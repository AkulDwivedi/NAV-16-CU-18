OBJECT Codeunit 137020 SCM Planning
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LocationSilver@1005 : Record 14;
      LocationBlue@1003 : Record 14;
      ItemJournalTemplate@1001 : Record 82;
      ItemJournalBatch@1000 : Record 233;
      LibraryVariableStorage@1012 : Codeunit 131004;
      LibraryUtility@1010 : Codeunit 131000;
      LibraryInventory@1009 : Codeunit 132201;
      LibraryPlanning@1008 : Codeunit 132203;
      LibraryPurchase@1015 : Codeunit 130512;
      LibrarySales@1016 : Codeunit 130509;
      LibraryWarehouse@1011 : Codeunit 132204;
      Assert@1007 : Codeunit 130000;
      IsInitialized@1006 : Boolean;
      RunRegPlanMsg@1013 : TextConst 'ENU=you must run a regenerative planning.';
      DaysInMonthFormula@1014 : DateFormula;
      PlanningStartDate@1002 : DateFormula;
      PlanningEndDate@1004 : DateFormula;

    [Normal]
    LOCAL PROCEDURE Initialize@110();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;

      // Initialize setup.
      IF IsInitialized THEN
        EXIT;

      // Setup Demonstration data.
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      GlobalSetup;

      EVALUATE(DaysInMonthFormula,FORMAT('<+%1D>',CALCDATE('<1M>') - TODAY));
      EVALUATE(PlanningStartDate,'<+2D>');
      EVALUATE(PlanningEndDate,'<+11M>');

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE GlobalSetup@1();
    BEGIN
      NoSeriesSetup;

      ItemJournalSetup;

      LocationSetup(LocationSilver,TRUE);
      LocationSetup(LocationBlue,FALSE);

      DisableWarnings;
    END;

    LOCAL PROCEDURE NoSeriesSetup@10();
    VAR
      PurchasesPayablesSetup@1003 : Record 312;
      SalesSetup@1004 : Record 311;
    BEGIN
      SalesSetup.GET;
      SalesSetup.VALIDATE("Customer Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Vendor Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemSetup@4(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option;SafetyLeadTime@1002 : Text[30]);
    BEGIN
      LibraryInventory.CreateItem(Item);

      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      EVALUATE(Item."Safety Lead Time",SafetyLeadTime);

      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE LFLItemSetup@5(VAR Item@1000 : Record 27;IncludeInventory@1001 : Boolean;ReschedulingPeriod@1006 : Text[30];LotAccumulationPeriod@1005 : Text[30];DampenerPeriod@1004 : Text[30];DampenerQuantity@1003 : Integer;SafetyStock@1002 : Integer;LotSize@1007 : Integer);
    BEGIN
      ItemSetup(Item,Item."Replenishment System"::Purchase,'<0D>');

      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.VALIDATE("Include Inventory",IncludeInventory);
      EVALUATE(Item."Lot Accumulation Period",LotAccumulationPeriod);
      EVALUATE(Item."Rescheduling Period",ReschedulingPeriod);
      EVALUATE(Item."Dampener Period",DampenerPeriod);
      Item.VALIDATE("Dampener Quantity",DampenerQuantity);
      Item.VALIDATE("Safety Stock Quantity",SafetyStock);
      Item.VALIDATE("Lot Size",LotSize);

      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE MaxQtyItemSetup@12(VAR Item@1000 : Record 27;ReorderPoint@1001 : Integer;MaximumInventory@1006 : Integer;OverflowLevel@1005 : Integer;TimeBucket@1004 : Text[30];DampenerQuantity@1003 : Integer;SafetyStock@1002 : Integer;SafetyLeadTime@1007 : Text[30];LotSize@1008 : Integer);
    BEGIN
      ItemSetup(Item,Item."Replenishment System"::Purchase,SafetyLeadTime);

      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Maximum Qty.");
      Item.VALIDATE("Reorder Point",ReorderPoint);
      Item.VALIDATE("Maximum Inventory",MaximumInventory);
      Item.VALIDATE("Overflow Level",OverflowLevel);
      EVALUATE(Item."Time Bucket",TimeBucket);
      Item.VALIDATE("Dampener Quantity",DampenerQuantity);
      Item.VALIDATE("Safety Stock Quantity",SafetyStock);
      Item.VALIDATE("Lot Size",LotSize);

      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FixedReorderQtyItemSetup@16(VAR Item@1000 : Record 27;ReorderPoint@1001 : Integer;ReorderQuantity@1006 : Integer;OverflowLevel@1005 : Integer;TimeBucket@1004 : Text[30];DampenerQuantity@1003 : Integer;SafetyStock@1002 : Integer;SafetyLeadTime@1007 : Text[30];LotSize@1008 : Integer);
    BEGIN
      ItemSetup(Item,Item."Replenishment System"::Purchase,SafetyLeadTime);

      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Fixed Reorder Qty.");
      Item.VALIDATE("Reorder Point",ReorderPoint);
      Item.VALIDATE("Reorder Quantity",ReorderQuantity);
      Item.VALIDATE("Overflow Level",OverflowLevel);
      EVALUATE(Item."Time Bucket",TimeBucket);
      Item.VALIDATE("Dampener Quantity",DampenerQuantity);
      Item.VALIDATE("Safety Stock Quantity",SafetyStock);
      Item.VALIDATE("Lot Size",LotSize);

      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OrderItemSetup@14(VAR Item@1000 : Record 27;DampenerPeriod@1003 : Text[30]);
    BEGIN
      ItemSetup(Item,Item."Replenishment System"::Purchase,'<0D>');

      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::Order);
      EVALUATE(Item."Dampener Period",DampenerPeriod);

      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@75();
    BEGIN
      CLEAR(ItemJournalTemplate);
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      CLEAR(ItemJournalBatch);
      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE LocationSetup@2(VAR Location@1000 : Record 14;BinMandatory@1001 : Boolean);
    VAR
      Bin@1003 : Record 7354;
      WarehouseEmployee@1004 : Record 7301;
      BinCount@1002 : Integer;
    BEGIN
      CLEAR(Location);
      Location.INIT;

      CLEAR(Bin);
      Bin.INIT;

      CLEAR(WarehouseEmployee);
      WarehouseEmployee.INIT;

      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      // Skip validate trigger for bin mandatory to improve performance.
      Location."Bin Mandatory" := BinMandatory;
      Location.MODIFY(TRUE);

      IF BinMandatory THEN
        FOR BinCount := 1 TO 4 DO
          LibraryWarehouse.CreateBin(Bin,Location.Code,'bin' + FORMAT(BinCount),'','');

      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
    END;

    LOCAL PROCEDURE ManufacturingSetup@7();
    VAR
      ManufacturingSetupRec@1000 : Record 99000765;
    BEGIN
      ManufacturingSetupRec.GET;
      ManufacturingSetupRec.VALIDATE("Components at Location",'');
      ManufacturingSetupRec.VALIDATE("Current Production Forecast",'');
      ManufacturingSetupRec.VALIDATE("Use Forecast on Locations",TRUE);
      ManufacturingSetupRec.VALIDATE("Combined MPS/MRP Calculation",TRUE);
      EVALUATE(ManufacturingSetupRec."Default Safety Lead Time",'<1D>');
      EVALUATE(ManufacturingSetupRec."Default Dampener Period",'');
      ManufacturingSetupRec.VALIDATE("Default Dampener Quantity",0);
      ManufacturingSetupRec.VALIDATE("Blank Overflow Level",ManufacturingSetupRec."Blank Overflow Level"::"Allow Default Calculation");
      ManufacturingSetupRec.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetDampenerTime@31(DampenerTime@1000 : Text[30]);
    VAR
      ManufacturingSetup@1001 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      EVALUATE(ManufacturingSetup."Default Dampener Period",DampenerTime);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetDampenerLotSize@87(DampenerPercentage@1000 : Decimal);
    VAR
      ManufacturingSetup@1001 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Default Dampener Quantity",DampenerPercentage);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetBlankOverflowLevel@38(DampenerOption@1000 : Option);
    VAR
      ManufacturingSetup@1001 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Blank Overflow Level",DampenerOption);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DisableWarnings@8();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Stockout Warning",FALSE);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@49(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;Item@1004 : Record 27;SalesQty@1003 : Integer;ShipmentDate@1002 : Date);
    BEGIN
      CLEAR(SalesHeader);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",SalesQty);
      SalesLine.VALIDATE("Shipment Date",ShipmentDate);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AddSalesOrderLine@56(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;Item@1004 : Record 27;SalesQty@1003 : Integer;ShipmentDate@1002 : Date);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",SalesQty);
      SalesLine.VALIDATE("Shipment Date",ShipmentDate);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderWith2Lines@50(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;Item@1004 : Record 27;SalesQty1@1003 : Integer;ShipmentDate1@1002 : Date;SalesQty2@1006 : Integer;ShipmentDate2@1005 : Date);
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,Item,SalesQty1,ShipmentDate1);
      AddSalesOrderLine(SalesHeader,SalesLine,Item,SalesQty2,ShipmentDate2);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@51(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;Item@1004 : Record 27;PurchaseQty@1003 : Integer;ReceiptDate@1002 : Date);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      AddPurchaseOrderLine(PurchaseHeader,PurchaseLine,Item,PurchaseQty,ReceiptDate);
    END;

    LOCAL PROCEDURE AddPurchaseOrderLine@136(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;Item@1004 : Record 27;PurchaseQty@1003 : Integer;ReceiveDate@1002 : Date);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",PurchaseQty);
      PurchaseLine.VALIDATE("Expected Receipt Date",ReceiveDate);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PurchaseSalesPlan@9(Item@1000 : Record 27;PurchaseQty@1001 : Integer;ReceivingDate@1002 : Date;SalesQty@1003 : Integer;ShipmentDate@1004 : Date);
    VAR
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
      SalesHeader@1007 : Record 36;
      SalesLine@1008 : Record 37;
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,PurchaseQty,ReceivingDate);

      CreateSalesOrder(SalesHeader,SalesLine,Item,SalesQty,ShipmentDate);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));
    END;

    LOCAL PROCEDURE FinalAssert@58(VAR RequisitionLine@1000 : Record 246;Item@1001 : Record 27);
    BEGIN
      // After carrying out all the messages and re-running the planning wksheet, no new lines should be suggested
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);
      AssertNoLinesForItem(Item);
    END;

    LOCAL PROCEDURE PopulateWithVendorAndCarryOut@55(VAR RequisitionLine@1000 : Record 246;Item@1001 : Record 27);
    VAR
      VendorNo@1002 : Code[20];
    BEGIN
      CLEAR(RequisitionLine);
      VendorNo := LibraryPurchase.CreateVendorNo;
      RequisitionLine.SETCURRENTKEY(Type,"No.","Variant Code","Location Code","Starting Date");
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");
      IF RequisitionLine.FINDSET THEN
        REPEAT
          RequisitionLine.VALIDATE("Vendor No.",VendorNo);
          RequisitionLine.VALIDATE("Accept Action Message",TRUE);
          RequisitionLine.MODIFY(TRUE);
        UNTIL RequisitionLine.NEXT = 0;

      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
    END;

    LOCAL PROCEDURE SalesPlanCarryOutChgSalesPlan@18(Item@1000 : Record 27;SalesQty@1003 : Integer;ShipmentDate@1004 : Date;NewShipmentDate@1001 : Date);
    VAR
      SalesHeader@1007 : Record 36;
      SalesLine@1008 : Record 37;
      RequisitionLine@1002 : Record 246;
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,Item,SalesQty,ShipmentDate);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      SalesLine.VALIDATE("Shipment Date",NewShipmentDate);
      SalesLine.MODIFY(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));
    END;

    LOCAL PROCEDURE SalePlanCarryOutCancelSalePlan@47(Item@1000 : Record 27;SalesQty@1003 : Integer;ShipmentDate@1004 : Date);
    VAR
      SalesHeader@1007 : Record 36;
      SalesLine@1008 : Record 37;
      RequisitionLine@1009 : Record 246;
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,Item,SalesQty,ShipmentDate);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      SalesHeader.DELETE(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));
    END;

    LOCAL PROCEDURE TestSetup@32();
    BEGIN
      ManufacturingSetup;
    END;

    LOCAL PROCEDURE AssertPlanningLine@3(Item@1007 : Record 27;ActionMsg@1000 : Option;OrigDueDate@1001 : Date;DueDate@1002 : Date;OrigQty@1003 : Decimal;Quantity@1004 : Decimal;RefOrderType@1008 : Option;NoOfLines@1006 : Integer);
    VAR
      RequisitionLine@1005 : Record 246;
    BEGIN
      RequisitionLine.SETCURRENTKEY(Type,"No.","Variant Code","Location Code","Starting Date");
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");

      RequisitionLine.SETRANGE("Action Message",ActionMsg);
      RequisitionLine.SETRANGE("Original Due Date",OrigDueDate);
      RequisitionLine.SETRANGE("Due Date",DueDate);
      RequisitionLine.SETRANGE("Original Quantity",OrigQty);
      RequisitionLine.SETRANGE(Quantity,Quantity);
      RequisitionLine.SETRANGE("Ref. Order Type",RefOrderType);
      Assert.AreEqual(NoOfLines,RequisitionLine.COUNT,'There is no line within the filter: ' + RequisitionLine.GETFILTERS);
    END;

    LOCAL PROCEDURE AssertTrackedQty@173(ItemNo@1001 : Code[20];ReqQty@1003 : Decimal);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.RESET;
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE("Reservation Status",ReservationEntry."Reservation Status"::Surplus);
      ReservationEntry.CALCSUMS("Quantity (Base)");

      Assert.AreEqual(ReqQty,ReservationEntry."Quantity (Base)",'Expected Surplus Quantity was wrong in the reservation entries.');
    END;

    LOCAL PROCEDURE AssertNoLinesForItem@24(Item@1007 : Record 27);
    BEGIN
      AssertNumberOfLinesForItem(Item,0);
    END;

    LOCAL PROCEDURE AssertNumberOfLinesForItem@125(Item@1007 : Record 27;NoOfLines@1000 : Integer);
    VAR
      RequisitionLine@1005 : Record 246;
    BEGIN
      RequisitionLine.SETCURRENTKEY(Type,"No.","Variant Code","Location Code","Starting Date");
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",Item."No.");

      Assert.AreEqual(NoOfLines,RequisitionLine.COUNT,'There should be ' + FORMAT(NoOfLines) +
        ' line(s) in the planning worksheet for item ' + Item."No.");
    END;

    [Test]
    PROCEDURE ProdOrder_CarryOut@126();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      Item@1002 : Record 27;
      RequisitionLine@1003 : Record 246;
      ProdOrder@1004 : Record 5405;
      ProdOrderLine@1005 : Record 5406;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.MODIFY(TRUE);

      // Create demands
      CreateSalesOrder(SalesHeader,SalesLine,Item,100,WORKDATE);
      CreateSalesOrder(SalesHeader,SalesLine,Item,100,WORKDATE + 1);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE - 1,WORKDATE + 1);

      // Carry out two lines
      RequisitionLine.SETFILTER("No.",Item."No.");
      RequisitionLine.FINDFIRST;
      Assert.AreEqual(2,RequisitionLine.COUNT,
        'Unexpected number of requisition lines after creating two demands and planning for lot-for-lot replenished item.');
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);

      // Validate structure and data of carried out production orders
      ProdOrder.SETRANGE("Source No.",Item."No.");
      ProdOrder.FINDSET;
      Assert.AreEqual(2,ProdOrder.COUNT,
        'Unexpected number of production orders after creating two demands and planning for lot-for-lot/prod. order replenished item, and carrying out.');

      REPEAT
        ProdOrderLine.SETRANGE(Status,ProdOrder.Status);
        ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrder."No.");
        Assert.AreEqual(1,ProdOrderLine.COUNT,
          'A single production order line per production order expected after carrying out.');
        ProdOrderLine.FINDFIRST;
        Assert.AreEqual(Item."No.",ProdOrderLine."Item No.",
          'Wrong item no. on production order line after carrying out');
        Assert.AreEqual(100,ProdOrderLine.Quantity,
          'Wrong quantity on production order line after carrying out');
      UNTIL ProdOrder.NEXT = 0;
    END;

    [Test]
    PROCEDURE SC1TC11ReschedPeriod@124();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'<5D>','','',0,0,0);

      // Exercise
      PurchaseSalesPlan(Item,10,CALCDATE('<+11D>',WORKDATE),10,CALCDATE('<+5D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,CALCDATE('<+11D>',WORKDATE),10,0,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,10,
        RequisitionLine."Ref. Order Type"::Purchase,1);
    END;

    [Test]
    PROCEDURE SC1TC12ReschedPeriod@123();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'<5D>','','',0,0,0);

      // Exercise
      PurchaseSalesPlan(Item,10,CALCDATE('<+10D>',WORKDATE),10,CALCDATE('<+5D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Reschedule,CALCDATE('<+10D>',WORKDATE),CALCDATE('<+5D>',WORKDATE),0,10,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC1TC13ReschedPeriod@122();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'<5D>','','',0,0,0);

      // Exercise
      PurchaseSalesPlan(Item,15,CALCDATE('<+10D>',WORKDATE),10,CALCDATE('<+5D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Resched. & Chg. Qty.",CALCDATE('<+10D>',WORKDATE),
        CALCDATE('<+5D>',WORKDATE),15,10,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC1TC18ReschedPeriod@121();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'<5D>','','',0,0,0);

      // Exercise
      SalesPlanCarryOutChgSalesPlan(Item,10,CALCDATE('<+11D>',WORKDATE),CALCDATE('<+5D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,CALCDATE('<+11D>',WORKDATE),10,0,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,10,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC1TC19ReschedPeriod@120();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'<5D>','','',0,0,0);

      // Exercise
      SalesPlanCarryOutChgSalesPlan(Item,10,CALCDATE('<+10D>',WORKDATE),CALCDATE('<+5D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Reschedule,CALCDATE('<+10D>',WORKDATE),CALCDATE('<+5D>',WORKDATE),0,10,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC1TC110ReschedPeriod@119();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Exercise
      PurchaseSalesPlan(Item,10,CALCDATE('<+6D>',WORKDATE),10,CALCDATE('<+5D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,CALCDATE('<+6D>',WORKDATE),10,0,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,10,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC1TC111ReschedPeriod@118();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'<0D>','','',0,0,0);

      // Exercise
      PurchaseSalesPlan(Item,10,CALCDATE('<+6D>',WORKDATE),10,CALCDATE('<+5D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,CALCDATE('<+6D>',WORKDATE),10,0,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,10,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC2TC21DampenerPeriod@117();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'<100D>','<14D>','<5D>',0,0,0);

      // Exercise
      PurchaseSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),10,CALCDATE('<+10D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC2TC22DampenerPeriod@116();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'<3D>','<14D>','<5D>',0,0,0);

      // Exercise
      PurchaseSalesPlan(Item,10,CALCDATE('<+11D>',WORKDATE),10,CALCDATE('<+5D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,CALCDATE('<+11D>',WORKDATE),10,0,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,10,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC2TC23DampenerPeriod@115();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'<7D>','<14D>','<5D>',0,0,0);

      // Exercise
      PurchaseSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),10,CALCDATE('<+11D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Reschedule,CALCDATE('<+5D>',WORKDATE),
        CALCDATE('<+11D>',WORKDATE),0,10,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC2TC24DampenerPeriod@114();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'<100D>','<14D>','<5D>',0,0,0);

      // Exercise
      PurchaseSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),15,CALCDATE('<+10D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,
        CALCDATE('<+5D>',WORKDATE),10,15,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC2TC25DampenerPeriod@113();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'<3D>','<14D>','<5D>',0,0,0);

      // Exercise
      PurchaseSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),5,CALCDATE('<+11D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE('<+5D>',WORKDATE),10,0,RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE('<+11D>',WORKDATE),0,5,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC2TC26DampenerPeriod@112();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'<7D>','<14D>','<5D>',0,0,0);

      // Exercise
      PurchaseSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),15,CALCDATE('<+11D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Resched. & Chg. Qty.",CALCDATE('<+5D>',WORKDATE),
        CALCDATE('<+11D>',WORKDATE),10,15,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC2TC27DampenerPeriod@111();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<5D>');
      LFLItemSetup(Item,TRUE,'<100D>','<14D>','',0,0,0);

      // Exercise
      PurchaseSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),10,CALCDATE('<+10D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC2TC28DampenerPeriod@109();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<5D>');
      LFLItemSetup(Item,TRUE,'<3D>','<14D>','',0,0,0);

      // Exercise
      PurchaseSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),10,CALCDATE('<+11D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE('<+5D>',WORKDATE),10,0,RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE('<+11D>',WORKDATE),0,10,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC2TC29DampenerPeriod@108();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<5D>');
      LFLItemSetup(Item,TRUE,'<7D>','<14D>','',0,0,0);

      // Exercise
      PurchaseSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),10,CALCDATE('<+11D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Reschedule,CALCDATE('<+5D>',WORKDATE),
        CALCDATE('<+11D>',WORKDATE),0,10,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC2TC210DampenerPeriod@107();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<5D>');
      LFLItemSetup(Item,TRUE,'<100D>','<14D>','',0,0,0);

      // Exercise
      PurchaseSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),15,CALCDATE('<+10D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,
        CALCDATE('<+5D>',WORKDATE),10,15,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC2TC211DampenerPeriod@106();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<5D>');
      LFLItemSetup(Item,TRUE,'<3D>','<14D>','',0,0,0);

      // Exercise
      PurchaseSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),5,CALCDATE('<+11D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE('<+5D>',WORKDATE),10,0,RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE('<+11D>',WORKDATE),0,5,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC2TC212DampenerPeriod@105();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<5D>');
      LFLItemSetup(Item,TRUE,'<7D>','<14D>','',0,0,0);

      // Exercise
      PurchaseSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),15,CALCDATE('<+11D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Resched. & Chg. Qty.",CALCDATE('<+5D>',WORKDATE),
        CALCDATE('<+11D>',WORKDATE),10,15,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC2TC215DampenerPeriod@104();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      LFLItemSetup(Item,TRUE,'<100D>','<14D>','<5D>',0,0,0);

      // Exercise
      SalesPlanCarryOutChgSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),CALCDATE('<+10D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC2TC216DampenerPeriod@103();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('');
      LFLItemSetup(Item,TRUE,'','<14D>','',0,0,0);

      // Exercise
      PurchaseSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),10,CALCDATE('<+6D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE('<+5D>',WORKDATE),10,0,RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE('<+6D>',WORKDATE),0,10,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC2TC217DampenerPeriod@102();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'','<14D>','<0D>',0,0,0);

      // Exercise
      PurchaseSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),10,CALCDATE('<+6D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE('<+5D>',WORKDATE),10,0,RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE('<+6D>',WORKDATE),0,10,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC2TC218DampenerPeriod@101();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      OrderItemSetup(Item,'<5D>');

      // Exercise
      SalesPlanCarryOutChgSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),CALCDATE('<+10D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC2TC219DampenerPeriod@100();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      OrderItemSetup(Item,'<5D>');

      // Exercise
      SalesPlanCarryOutChgSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),CALCDATE('<+11D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Reschedule,CALCDATE('<+5D>',WORKDATE),
        CALCDATE('<+11D>',WORKDATE),0,10,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC2TC220DampenerPeriod@99();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<5D>');
      OrderItemSetup(Item,'');

      // Exercise
      SalesPlanCarryOutChgSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),CALCDATE('<+10D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC2TC221DampenerPeriod@98();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<5D>');
      OrderItemSetup(Item,'<0D>');

      // Exercise
      SalesPlanCarryOutChgSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),CALCDATE('<+6D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Reschedule,CALCDATE('<+5D>',WORKDATE),
        CALCDATE('<+6D>',WORKDATE),0,10,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC2TC222DampenerPeriod@97();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<5D>');
      OrderItemSetup(Item,'');

      // Exercise
      SalesPlanCarryOutChgSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),CALCDATE('<+11D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Reschedule,CALCDATE('<+5D>',WORKDATE),
        CALCDATE('<+11D>',WORKDATE),0,10,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC2TC223DampenerPeriod@96();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('');
      OrderItemSetup(Item,'');

      // Exercise
      SalesPlanCarryOutChgSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),CALCDATE('<+6D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Reschedule,CALCDATE('<+5D>',WORKDATE),
        CALCDATE('<+6D>',WORKDATE),0,10,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC2TC224DampenerPeriod@95();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      OrderItemSetup(Item,'');

      // Exercise
      SalesPlanCarryOutChgSalesPlan(Item,10,CALCDATE('<+5D>',WORKDATE),CALCDATE('<+6D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Reschedule,CALCDATE('<+5D>',WORKDATE),
        CALCDATE('<+6D>',WORKDATE),0,10,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC2TC225DampenerPeriod@94();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      OrderItemSetup(Item,'<100D>');

      // Exercise
      SalePlanCarryOutCancelSalePlan(Item,10,CALCDATE('<+11D>',WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,
        CALCDATE('<+11D>',WORKDATE),10,0,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC3TC31LotAccumulationPeriod@93();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'','<5D>','',0,0,0);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,10,CALCDATE('<+5D>',WORKDATE),20,CALCDATE('<+10D>',WORKDATE));
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,30,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC3TC32LotAccumulationPeriod@92();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'','<5D>','',0,0,0);

      // Exercise
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,10,CALCDATE('<+5D>',WORKDATE));
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,10,CALCDATE('<+5D>',WORKDATE),20,CALCDATE('<+10D>',WORKDATE));
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+5D>',WORKDATE),10,30,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC3TC33LotAccumulationPeriod@91();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'','<5D>','',0,0,0);

      // Exercise
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,50,CALCDATE('<+5D>',WORKDATE));
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,10,CALCDATE('<+5D>',WORKDATE),20,CALCDATE('<+10D>',WORKDATE));
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+5D>',WORKDATE),50,30,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC3TC34LotAccumulationPeriod@90();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'','<5D>','',0,0,0);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,10,CALCDATE('<+5D>',WORKDATE),20,CALCDATE('<+11D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,30,CALCDATE('<+20D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,20,CALCDATE('<+14D>',WORKDATE));
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,3);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,10,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+11D>',WORKDATE),0,40,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+20D>',WORKDATE),0,30,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC3TC35LotAccumulationPeriod@89();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'','<5D>','',0,0,0);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,10,CALCDATE('<+5D>',WORKDATE),20,CALCDATE('<+11D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,30,CALCDATE('<+20D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,20,CALCDATE('<+14D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change last sales line
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<+6D>',WORKDATE));
      SalesLine.MODIFY(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+5D>',WORKDATE),10,30,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+11D>',WORKDATE),40,20,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC3TC310LotAccumulationPeriod@88();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'','','',0,0,0);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,10,CALCDATE('<+5D>',WORKDATE),20,CALCDATE('<+5D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,30,CALCDATE('<+6D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,40,CALCDATE('<+10D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,3);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,30,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+6D>',WORKDATE),0,30,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+10D>',WORKDATE),0,40,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC3TC311LotAccumulationPeriod@85();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'','<0D>','',0,0,0);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,10,CALCDATE('<+5D>',WORKDATE),20,CALCDATE('<+5D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,30,CALCDATE('<+6D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,40,CALCDATE('<+10D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,3);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,30,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+6D>',WORKDATE),0,30,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+10D>',WORKDATE),0,40,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC3TC312LotAccumulationPeriod@84();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'<3D>','<5D>','',0,0,0);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,10,CALCDATE('<+6D>',WORKDATE),30,CALCDATE('<+11D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,20,CALCDATE('<+7D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+6D>',WORKDATE),0,60,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change last sales line
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<+5D>',WORKDATE));
      SalesLine.MODIFY(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Resched. & Chg. Qty.",CALCDATE('<+6D>',WORKDATE),
        CALCDATE('<+5D>',WORKDATE),60,30,RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+11D>',WORKDATE),0,30,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC3TC313LotAccumulationPeriod@83();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'<2D>','<5D>','',0,0,0);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,10,CALCDATE('<+8D>',WORKDATE),30,CALCDATE('<+11D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,20,CALCDATE('<+9D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,60,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change last sales line
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<+5D>',WORKDATE));
      SalesLine.MODIFY(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,3);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,CALCDATE('<+8D>',WORKDATE)
        ,60,0,RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,30,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+11D>',WORKDATE),0,30,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC3TC314LotAccumulationPeriod@82();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'<100D>','<5D>','<3D>',0,0,0);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,30,CALCDATE('<+11D>',WORKDATE),20,CALCDATE('<+8D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,10,CALCDATE('<+6D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+6D>',WORKDATE),0,60,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change last sales line
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<+8D>',WORKDATE));
      SalesLine.MODIFY(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC3TC315LotAccumulationPeriod@63();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'<7D>','<5D>','<3D>',0,0,0);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,30,CALCDATE('<+10D>',WORKDATE),20,CALCDATE('<+9D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,10,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,60,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change last sales line
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<+9D>',WORKDATE));
      SalesLine.MODIFY(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Reschedule,CALCDATE('<+5D>',WORKDATE),
        CALCDATE('<+9D>',WORKDATE),0,60,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC3TC316LotAccumulationPeriod@64();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'<3D>','<5D>','<3D>',0,0,0);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,30,CALCDATE('<+10D>',WORKDATE),20,CALCDATE('<+9D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,10,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,60,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change last sales line
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<+9D>',WORKDATE));
      SalesLine.MODIFY(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,CALCDATE('<+5D>',WORKDATE),
        60,0,RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE('<+9D>',WORKDATE),0,60,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC3TC317LotAccumulationPeriod@65();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'<7D>','<5D>','<3D>',0,0,0);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,30,CALCDATE('<+10D>',WORKDATE),20,CALCDATE('<+9D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,10,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,60,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change last sales line
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<+9D>',WORKDATE));
      SalesLine.VALIDATE(Quantity,5);
      SalesLine.MODIFY(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Resched. & Chg. Qty.",CALCDATE('<+5D>',WORKDATE),
        CALCDATE('<+9D>',WORKDATE),60,55,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC3TC318LotAccumulationPeriod@66();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'<100D>','<5D>','<30D>',0,0,0);

      // Exercise
      CreateSalesOrder(SalesHeader,SalesLine,Item,10,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,10,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change last sales line
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<+9D>',WORKDATE));
      SalesLine.MODIFY(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC3TC319LotAccumulationPeriod@67();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'<10D>','<5D>','<30D>',0,0,0);

      // Exercise
      CreateSalesOrder(SalesHeader,SalesLine,Item,10,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,10,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change last sales line
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<+11D>',WORKDATE));
      SalesLine.MODIFY(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Reschedule,CALCDATE('<+5D>',WORKDATE),
        CALCDATE('<+11D>',WORKDATE),0,10,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC3TC320LotAccumulationPeriod@68();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'<5D>','<5D>','<30D>',0,0,0);

      // Exercise
      CreateSalesOrder(SalesHeader,SalesLine,Item,10,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,10,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change last sales line
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<+11D>',WORKDATE));
      SalesLine.MODIFY(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,CALCDATE('<+5D>',WORKDATE),
        10,0,RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+11D>',WORKDATE),
        0,10,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC3TC321LotAccumulationPeriod@71();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<30D>');
      LFLItemSetup(Item,TRUE,'<100D>','<5D>','',0,0,0);

      // Exercise
      CreateSalesOrder(SalesHeader,SalesLine,Item,10,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,10,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change last sales line
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<+9D>',WORKDATE));
      SalesLine.MODIFY(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC3TC322LotAccumulationPeriod@70();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<30D>');
      LFLItemSetup(Item,TRUE,'<10D>','<5D>','',0,0,0);

      // Exercise
      CreateSalesOrder(SalesHeader,SalesLine,Item,10,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,10,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change last sales line
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<+11D>',WORKDATE));
      SalesLine.MODIFY(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Reschedule,CALCDATE('<+5D>',WORKDATE),
        CALCDATE('<+11D>',WORKDATE),0,10,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC3TC323LotAccumulationPeriod@69();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<30D>');
      LFLItemSetup(Item,TRUE,'<5D>','<5D>','',0,0,0);

      // Exercise
      CreateSalesOrder(SalesHeader,SalesLine,Item,10,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,10,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change last sales line
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<+11D>',WORKDATE));
      SalesLine.MODIFY(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,CALCDATE('<+5D>',WORKDATE),
        10,0,RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+11D>',WORKDATE),
        0,10,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC3TC324LotAccumulationPeriod@72();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'<5D>','<5D>','<30D>',0,0,0);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,20,CALCDATE('<+9D>',WORKDATE),10,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,30,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change last sales line
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<+10D>',WORKDATE));
      SalesLine.MODIFY(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC3TC325LotAccumulationPeriod@73();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'<5D>','<5D>','<30D>',0,0,0);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,10,CALCDATE('<+5D>',WORKDATE),20,CALCDATE('<+9D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,30,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change last sales line
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<+14D>',WORKDATE));
      SalesLine.MODIFY(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+5D>',WORKDATE),
        30,10,RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+14D>',WORKDATE),
        0,20,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC3TC326LotAccumulationPeriod@74();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      LFLItemSetup(Item,TRUE,'<5D>','<5D>','<30D>',0,0,0);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,10,CALCDATE('<+5D>',WORKDATE),20,CALCDATE('<+9D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+5D>',WORKDATE),0,30,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Delete the sales order
      SalesHeader.DELETE(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,CALCDATE('<+5D>',WORKDATE),
        30,0,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC4TC41TimeBucket@81();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      MaxQtyItemSetup(Item,20,100,100,'<5D>',0,5,'<2D>',40);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",21);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,1,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+9D>',WORKDATE),0,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC4TC42TimeBucket@76();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      MaxQtyItemSetup(Item,20,100,100,'<5D>',0,5,'<2D>',40);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",21);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,1,CALCDATE('<+5D>',WORKDATE),10,CALCDATE('<+10D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+9D>',WORKDATE),0,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC4TC43TimeBucket@77();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      MaxQtyItemSetup(Item,20,100,100,'<5D>',0,5,'<2D>',40);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",21);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,1,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+9D>',WORKDATE),0,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Delete the sales order
      SalesHeader.DELETE(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+9D>',WORKDATE),
        80,79,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC4TC44TimeBucket@78();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      MaxQtyItemSetup(Item,20,100,100,'<5D>',0,5,'<2D>',40);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",21);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,1,CALCDATE('<+5D>',WORKDATE),10,CALCDATE('<+10D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,81,CALCDATE('<+11D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+9D>',WORKDATE),0,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+14D>',WORKDATE),0,91,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC4TC45TimeBucket@79();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      MaxQtyItemSetup(Item,20,100,100,'<5D>',0,5,'<2D>',40);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",21);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,1,CALCDATE('<+5D>',WORKDATE),10,CALCDATE('<+10D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,81,CALCDATE('<+11D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+9D>',WORKDATE),0,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+14D>',WORKDATE),0,91,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<+9D>',WORKDATE));
      SalesLine.MODIFY(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC4TC46TimeBucket@80();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      FixedReorderQtyItemSetup(Item,20,100,120,'<5D>',0,5,'<2D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",21);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,1,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+9D>',WORKDATE),0,100,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC4TC47TimeBucket@62();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      FixedReorderQtyItemSetup(Item,20,100,120,'<5D>',0,5,'<2D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",21);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,1,CALCDATE('<+5D>',WORKDATE),10,CALCDATE('<+10D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+9D>',WORKDATE),0,100,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC4TC48TimeBucket@61();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      FixedReorderQtyItemSetup(Item,20,100,120,'<5D>',0,5,'<2D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",21);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,1,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+9D>',WORKDATE),0,100,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Delete the sales order
      SalesHeader.DELETE(TRUE);

      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+9D>',WORKDATE),
        100,99,RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC4TC49TimeBucket@60();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      FixedReorderQtyItemSetup(Item,20,100,120,'<5D>',0,5,'<2D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",21);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,1,CALCDATE('<+5D>',WORKDATE),10,CALCDATE('<+10D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,91,CALCDATE('<+11D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Validate
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+9D>',WORKDATE),0,100,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+14D>',WORKDATE),0,100,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC4TC410TimeBucket@59();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerTime('<0D>');
      FixedReorderQtyItemSetup(Item,20,100,120,'<5D>',0,5,'<2D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",21);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,1,CALCDATE('<+5D>',WORKDATE),10,CALCDATE('<+10D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,91,CALCDATE('<+11D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Intermediate validate
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+9D>',WORKDATE),0,100,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+14D>',WORKDATE),0,100,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<+9D>',WORKDATE));
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC5TC51DampenerQuantity@86();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(10);
      SetDampenerTime('<0D>');
      MaxQtyItemSetup(Item,20,100,0,'<5D>',4,5,'<1D>',40);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",21);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,5,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,84,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,1);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC5TC52DampenerQuantity@17();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(10);
      SetDampenerTime('<0D>');
      MaxQtyItemSetup(Item,20,100,0,'<5D>',4,5,'<1D>',40);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",21);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,6,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,85,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,1);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+8D>',WORKDATE),85,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC5TC53DampenerQuantity@19();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(10);
      SetDampenerTime('<0D>');
      MaxQtyItemSetup(Item,20,100,0,'<5D>',0,5,'<1D>',40);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",21);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,5,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,84,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,1);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC5TC54DampenerQuantity@20();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(10);
      SetDampenerTime('<0D>');
      MaxQtyItemSetup(Item,20,100,0,'<5D>',0,5,'<1D>',40);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",21);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,6,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,85,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,1);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+8D>',WORKDATE),85,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC5TC55DampenerQuantity@21();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      MaxQtyItemSetup(Item,20,100,0,'<5D>',0,5,'<1D>',40);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",21);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,2,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,81,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,1);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+8D>',WORKDATE),81,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC5TC56DampenerQuantity@22();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(10);
      SetDampenerTime('<0D>');
      FixedReorderQtyItemSetup(Item,20,100,0,'<5D>',4,5,'<1D>',40);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,24,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,100,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,6);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC5TC57DampenerQuantity@23();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(10);
      SetDampenerTime('<0D>');
      FixedReorderQtyItemSetup(Item,20,100,0,'<5D>',4,5,'<1D>',40);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,24,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,100,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,5);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+8D>',WORKDATE),100,95,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC5TC58DampenerQuantity@25();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(10);
      SetDampenerTime('<0D>');
      FixedReorderQtyItemSetup(Item,20,100,0,'<5D>',0,5,'<1D>',40);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,24,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,100,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,6);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC5TC59DampenerQuantity@26();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(10);
      SetDampenerTime('<0D>');
      FixedReorderQtyItemSetup(Item,20,100,0,'<5D>',0,5,'<1D>',40);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,24,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,100,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,5);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+8D>',WORKDATE),100,95,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC5TC510DampenerQuantity@27();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      FixedReorderQtyItemSetup(Item,20,100,0,'<5D>',0,5,'<1D>',40);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,24,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,100,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,9);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+8D>',WORKDATE),100,99,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC5TC511DampenerQuantity@28();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(10);
      LFLItemSetup(Item,TRUE,'','<10D>','',4,0,40);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,10,CALCDATE('<+10D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+10D>',WORKDATE),0,10,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,6);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC5TC512DampenerQuantity@29();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(10);
      LFLItemSetup(Item,TRUE,'','<10D>','',4,0,40);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,10,CALCDATE('<+10D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+10D>',WORKDATE),0,10,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,5);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+10D>',WORKDATE),10,5,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC5TC513DampenerQuantity@30();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(10);
      LFLItemSetup(Item,TRUE,'','<10D>','',0,0,40);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,10,CALCDATE('<+10D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+10D>',WORKDATE),0,10,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,6);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC5TC514DampenerQuantity@33();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(10);
      LFLItemSetup(Item,TRUE,'','<10D>','',0,0,40);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,10,CALCDATE('<+10D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+10D>',WORKDATE),0,10,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,5);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+10D>',WORKDATE),10,5,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC5TC515DampenerQuantity@34();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(10);
      LFLItemSetup(Item,TRUE,'','<10D>','',0,0,0);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,10,CALCDATE('<+10D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+10D>',WORKDATE),0,10,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,9);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+10D>',WORKDATE),10,9,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC6TC61OverflowLevel@35();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      MaxQtyItemSetup(Item,20,100,101,'<5D>',0,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,90,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,2);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+8D>',WORKDATE),90,73,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC6TC62OverflowLevel@36();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      MaxQtyItemSetup(Item,20,100,101,'<5D>',0,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,90,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,19);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC6TC63OverflowLevel@37();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
      ManufacturingSetup@1005 : Record 99000765;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      SetBlankOverflowLevel(ManufacturingSetup."Blank Overflow Level"::"Use Item/SKU Values Only");
      MaxQtyItemSetup(Item,20,100,0,'<5D>',0,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,90,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,2);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC6TC64OverflowLevel@39();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
      ManufacturingSetup@1005 : Record 99000765;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      SetBlankOverflowLevel(ManufacturingSetup."Blank Overflow Level"::"Allow Default Calculation");
      MaxQtyItemSetup(Item,20,100,0,'<5D>',0,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,90,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,2);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+8D>',WORKDATE),90,72,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC6TC65OverflowLevel@40();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
      ManufacturingSetup@1005 : Record 99000765;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      SetBlankOverflowLevel(ManufacturingSetup."Blank Overflow Level"::"Allow Default Calculation");
      MaxQtyItemSetup(Item,20,100,101,'<5D>',0,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,90,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,19);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC6TC66OverflowLevel@41();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
      ManufacturingSetup@1005 : Record 99000765;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      SetBlankOverflowLevel(ManufacturingSetup."Blank Overflow Level"::"Allow Default Calculation");
      MaxQtyItemSetup(Item,20,100,101,'<5D>',5,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,90,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,14);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC6TC67OverflowLevel@42();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
      ManufacturingSetup@1005 : Record 99000765;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      SetBlankOverflowLevel(ManufacturingSetup."Blank Overflow Level"::"Allow Default Calculation");
      MaxQtyItemSetup(Item,20,100,101,'<5D>',5,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,90,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,13);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+8D>',WORKDATE),90,84,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC6TC68OverflowLevel@43();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      FixedReorderQtyItemSetup(Item,20,80,101,'<5D>',0,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,2);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+8D>',WORKDATE),80,73,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC6TC69OverflowLevel@45();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      FixedReorderQtyItemSetup(Item,20,80,101,'<5D>',0,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,9);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC6TC610OverflowLevel@44();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
      ManufacturingSetupRec@1005 : Record 99000765;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      SetBlankOverflowLevel(ManufacturingSetupRec."Blank Overflow Level"::"Use Item/SKU Values Only");
      FixedReorderQtyItemSetup(Item,20,80,0,'<5D>',0,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,2);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC6TC611OverflowLevel@46();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
      ManufacturingSetupRec@1005 : Record 99000765;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      SetBlankOverflowLevel(ManufacturingSetupRec."Blank Overflow Level"::"Allow Default Calculation");
      FixedReorderQtyItemSetup(Item,20,80,0,'<5D>',0,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,2);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+8D>',WORKDATE),80,72,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC6TC612OverflowLevel@48();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
      ManufacturingSetupRec@1005 : Record 99000765;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      SetBlankOverflowLevel(ManufacturingSetupRec."Blank Overflow Level"::"Allow Default Calculation");
      FixedReorderQtyItemSetup(Item,20,80,101,'<5D>',0,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,19);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC6TC613OverflowLevel@52();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
      ManufacturingSetupRec@1005 : Record 99000765;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      SetBlankOverflowLevel(ManufacturingSetupRec."Blank Overflow Level"::"Allow Default Calculation");
      FixedReorderQtyItemSetup(Item,20,80,101,'<5D>',5,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,4);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC6TC614OverflowLevel@53();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
      ManufacturingSetupRec@1005 : Record 99000765;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      SetBlankOverflowLevel(ManufacturingSetupRec."Blank Overflow Level"::"Allow Default Calculation");
      FixedReorderQtyItemSetup(Item,20,80,101,'<5D>',5,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,3);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+8D>',WORKDATE),80,74,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC6TC615OverflowLevel@54();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
      ManufacturingSetupRec@1005 : Record 99000765;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      SetBlankOverflowLevel(ManufacturingSetupRec."Blank Overflow Level"::"Allow Default Calculation");
      MaxQtyItemSetup(Item,20,100,5,'<5D>',0,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,90,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,19);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+8D>',WORKDATE),90,89,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC6TC616OverflowLevel@6();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
      ManufacturingSetupRec@1005 : Record 99000765;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      SetBlankOverflowLevel(ManufacturingSetupRec."Blank Overflow Level"::"Use Item/SKU Values Only");
      MaxQtyItemSetup(Item,20,100,5,'<5D>',0,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,90,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,19);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+8D>',WORKDATE),90,89,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC6TC617OverflowLevel@11();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
      ManufacturingSetupRec@1005 : Record 99000765;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      SetBlankOverflowLevel(ManufacturingSetupRec."Blank Overflow Level"::"Allow Default Calculation");
      FixedReorderQtyItemSetup(Item,20,80,5,'<5D>',0,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,9);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+8D>',WORKDATE),80,79,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC6TC618OverflowLevel@13();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
      ManufacturingSetupRec@1005 : Record 99000765;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      SetBlankOverflowLevel(ManufacturingSetupRec."Blank Overflow Level"::"Allow Default Calculation");
      FixedReorderQtyItemSetup(Item,20,80,5,'<5D>',0,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,10);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE SC6TC619OverflowLevel@15();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
      ManufacturingSetupRec@1005 : Record 99000765;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      SetBlankOverflowLevel(ManufacturingSetupRec."Blank Overflow Level"::"Use Item/SKU Values Only");
      FixedReorderQtyItemSetup(Item,20,80,5,'<5D>',0,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,9);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE('<+8D>',WORKDATE),80,79,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Final verification
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE SC6TC620OverflowLevel@57();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
      ManufacturingSetupRec@1005 : Record 99000765;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      SetDampenerLotSize(0);
      SetDampenerTime('<0D>');
      SetBlankOverflowLevel(ManufacturingSetupRec."Blank Overflow Level"::"Use Item/SKU Values Only");
      FixedReorderQtyItemSetup(Item,20,80,5,'<5D>',0,5,'<1D>',0);

      // Create inventory
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",30);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      // Create demand
      CreateSalesOrder(SalesHeader,SalesLine,Item,20,CALCDATE('<+5D>',WORKDATE));

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      // Carry out
      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      // Change the last sales line
      SalesLine.VALIDATE(Quantity,10);
      SalesLine.MODIFY(TRUE);

      // Run planning
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify planning worksheet lines
      AssertNoLinesForItem(Item);
    END;

    [Test]
    PROCEDURE AU959450N5YU_SafetyStock@127();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      TestSetup;
      MaxQtyItemSetup(Item,0,10,0,'<0D>',0,4,'<0D>',0);

      // Exercise
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));
      AssertNumberOfLinesForItem(Item,2);

      // Verify
      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE BE209606YG6Y_MaxInv@137();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      TestSetup;
      MaxQtyItemSetup(Item,2000,5000,0,'<0D>',0,1000,'<0D>',0);

      // Exercise
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",50);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE(PlanningStartDate,WORKDATE),0,950,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE(PlanningStartDate,WORKDATE),0,4000,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE NL687689SHU2_ROP@132();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      // Setup
      Initialize;

      TestSetup;
      FixedReorderQtyItemSetup(Item,40000,40000,0,'<0D>',0,0,'<0D>',0);
      Item.VALIDATE("Maximum Order Quantity",10000);
      Item.MODIFY(TRUE);

      // Exercise
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",50);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify
      AssertNumberOfLinesForItem(Item,4);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE(PlanningStartDate,WORKDATE),0,10000,
        RequisitionLine."Ref. Order Type"::Purchase,4);

      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE XXXXXXXXXXXX_MaxInv@140();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      TestSetup;
      MaxQtyItemSetup(Item,0,250,0,'<1M>',0,0,'<0D>',0);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,100,CALCDATE('<+2D>',WORKDATE),150,CALCDATE('<+4D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,100,CALCDATE('<+6D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,50,CALCDATE('<+8D>',WORKDATE));
      AddSalesOrderLine(SalesHeader,SalesLine,Item,100,CALCDATE('<+10D>',WORKDATE));
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify
      AssertNumberOfLinesForItem(Item,5);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE(PlanningStartDate,WORKDATE),0,250,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+6D>',WORKDATE),0,100,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+8D>',WORKDATE),0,50,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+10D>',WORKDATE),0,100,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(DaysInMonthFormula,CALCDATE('<-1D>',CALCDATE(PlanningStartDate,WORKDATE))),0,250,
        RequisitionLine."Ref. Order Type"::Purchase,1);// 1M-1D+Planningstartdate

      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE DE937204GJUH_MaxInv@147();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      TestSetup;
      MaxQtyItemSetup(Item,10,100,0,'<1M>',0,0,'<0D>',0);

      // Exercise
      CreateSalesOrderWith2Lines(SalesHeader,SalesLine,Item,120,CALCDATE('<+1W>',WORKDATE),80,CALCDATE('<+2W>',WORKDATE));
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify
      AssertNumberOfLinesForItem(Item,4);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE(PlanningStartDate,WORKDATE),0,100,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+1W>',WORKDATE),0,20,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<+2W>',WORKDATE),0,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,
        CALCDATE(DaysInMonthFormula,CALCDATE('<-1D>',CALCDATE(PlanningStartDate,WORKDATE))),0,100,
        RequisitionLine."Ref. Order Type"::Purchase,1);// 1M-1D+Planningstartdate

      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE AU83381476XT_MaxInv@155();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      TestSetup;
      MaxQtyItemSetup(Item,17,25,0,'<0D>',0,4,'<5D>',0);

      // Exercise
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE(PlanningStartDate,WORKDATE),0,4,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<5D>',CALCDATE(PlanningStartDate,WORKDATE)),0,21,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE HQ634879PFTC_Surplus@162();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      TestSetup;
      MaxQtyItemSetup(Item,50,100,0,'<0D>',0,20,'<0D>',0);
      LibraryVariableStorage.Enqueue(RunRegPlanMsg);  // Handled in Message Handler.
      Item.VALIDATE("Order Tracking Policy",Item."Order Tracking Policy"::"Tracking Only");
      Item.MODIFY(TRUE);

      // Exercise
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE(PlanningStartDate,WORKDATE),0,20,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE(PlanningStartDate,WORKDATE),0,80,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertTrackedQty(Item."No.",100);

      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE DE6056398K8T_ReorderCycle@182();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
      SKUMethod@1007 : 'Location,Variant,Location & Variant';
    BEGIN
      // Setup
      Initialize;

      TestSetup;
      MaxQtyItemSetup(Item,0,50,0,'<5D>',0,0,'<3D>',0);

      Item.SETFILTER("Location Filter",'%1',LocationBlue.Code);
      LibraryInventory.CreateStockKeepingUnit(Item,SKUMethod::Location,FALSE,FALSE);

      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",10);
      ItemJournalLine.VALIDATE("Location Code",LocationBlue.Code);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);

      CreateSalesOrder(SalesHeader,SalesLine,Item,30,CALCDATE('<+5D>',CALCDATE(PlanningStartDate,WORKDATE)));
      SalesLine.VALIDATE("Location Code",LocationBlue.Code);
      SalesLine.MODIFY(TRUE);

      // Exercise
      Item.SETRANGE("Location Filter",LocationBlue.Code);
      Item.SETRANGE("No.",Item."No.");
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<1D>',WORKDATE),0,20,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<5D>',WORKDATE),0,50,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      PopulateWithVendorAndCarryOut(RequisitionLine,Item);

      AddSalesOrderLine(SalesHeader,SalesLine,Item,20,WORKDATE);
      SalesLine.VALIDATE("Location Code",LocationBlue.Code);
      SalesLine.MODIFY(TRUE);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify
      AssertNumberOfLinesForItem(Item,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE('<1D>',WORKDATE),0,20,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      FinalAssert(RequisitionLine,Item);
    END;

    [Test]
    PROCEDURE DE790799VL86_MaxInv@128();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      TestSetup;
      MaxQtyItemSetup(Item,2,3,0,'<0D>',0,0,'<0D>',0);

      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,100,CALCDATE(PlanningStartDate,WORKDATE));
      AddPurchaseOrderLine(PurchaseHeader,PurchaseLine,Item,100,CALCDATE('<+1D>',CALCDATE(PlanningStartDate,WORKDATE)));
      AddPurchaseOrderLine(PurchaseHeader,PurchaseLine,Item,100,CALCDATE('<+2D>',CALCDATE(PlanningStartDate,WORKDATE)));

      // Exercise
      Item.SETFILTER("No.",Item."No.");
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      AssertNumberOfLinesForItem(Item,3);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::"Change Qty.",0D,CALCDATE(PlanningStartDate,WORKDATE),100,3,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,CALCDATE('<1D>',CALCDATE(PlanningStartDate,WORKDATE)),100,0,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::Cancel,0D,CALCDATE('<2D>',CALCDATE(PlanningStartDate,WORKDATE)),100,0,
        RequisitionLine."Ref. Order Type"::Purchase,1);
    END;

    [Test]
    PROCEDURE HQ123245YK8R_SST_and_ROP@149();
    VAR
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      // Setup
      Initialize;

      TestSetup;
      MaxQtyItemSetup(Item,9,10,0,'<0D>',0,8,'<0D>',0);

      // Exercise
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE(PlanningStartDate,WORKDATE),CALCDATE(PlanningEndDate,WORKDATE));

      // Verify
      AssertNumberOfLinesForItem(Item,2);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE(PlanningStartDate,WORKDATE),0,8,
        RequisitionLine."Ref. Order Type"::Purchase,1);
      AssertPlanningLine(Item,RequisitionLine."Action Message"::New,0D,CALCDATE(PlanningStartDate,WORKDATE),0,2,
        RequisitionLine."Ref. Order Type"::Purchase,1);

      FinalAssert(RequisitionLine,Item);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@167(Msg@1000 : Text[1024]);
    VAR
      DequeueVariable@1001 : Variant;
      LocalMessage@1002 : Text[1024];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LocalMessage := DequeueVariable;
      Assert.IsTrue(STRPOS(Msg,LocalMessage) > 0,Msg);
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [SCM]
      This test code unit contains tests for planning engine:
        1. Implements test cases from TDS (TCS) for feature 93486 - Improving planning options.
        2. Planning tests from the old costing suite - COD103542
    }
    END.
  }
}

