OBJECT Codeunit 136130 Service Statistics
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibrarySetupStorage@1004 : Codeunit 131009;
      LibraryERM@1023 : Codeunit 131300;
      LibraryInventory@1019 : Codeunit 132201;
      LibraryResource@1024 : Codeunit 130511;
      LibraryRandom@1025 : Codeunit 130440;
      LibrarySales@1003 : Codeunit 130509;
      LibraryService@1002 : Codeunit 131902;
      Assert@1006 : Codeunit 130000;
      AmountError@1007 : TextConst 'ENU=Amount %1 must be equal to %2.';
      VATAmountError@1008 : TextConst 'ENU=VAT Amount %1 must be equal to %2.';
      InvoiceDiscountAmountError@1009 : TextConst 'ENU=Invoice Discount Amount %1 must be equal to %2.';
      SalesLCYError@1010 : TextConst 'ENU=Sales(LCY) %1 must be equal to %2.';
      VATBaseAmountError@1011 : TextConst 'ENU=VAT Base Amount %1 must be equal to %2.';
      LibraryERMCountryData@1907 : Codeunit 131305;
      isInitialized@1000 : Boolean;
      Type2@1001 : ' ,Item,Resource,Cost,G/L Account';
      No2@1012 : Code[20];
      ItemNo@1017 : Code[20];
      GLAccountNo@1016 : Code[20];
      ResourceNo@1015 : Code[20];
      CostCode@1014 : Code[20];
      DocumentNo2@1013 : Code[20];
      DocumentType2@1018 : Option;
      CreditLimitLCY@1020 : Decimal;
      UpdateDiscountAmount@1021 : Boolean;
      UpdateTotalVAT@1022 : Boolean;
      InvoiceDiscountAmountErr@1005 : TextConst 'ENU=Incorrect Invoice Discount Amount.';

    [Test]
    [HandlerFunctions(DocumentItemPageHandler)]
    PROCEDURE InvoiceStatisticsItem@1();
    VAR
      ServiceLine@1000 : Record 5902;
      ServiceInvoice@1006 : TestPage 5933;
    BEGIN
      // Test creation of Service Invoice with Item and verify Statistics Page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup, Find VAT Posting Setup.
      Initialize;

      // 2. Exercise: Create Customer, Item, Service Invoice with Item and open Statistics Page.
      CreateServiceInvoiceHeader(ServiceInvoice,CreateCustomer);
      DocumentNo2 := ServiceInvoice."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Invoice;  // Assign global variable for page handler.
      CreateServiceInvoiceLine(ServiceInvoice,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      ServiceInvoice.Statistics.INVOKE;

      // 3. Verify: Verify Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(DocumentResourcePageHandler)]
    PROCEDURE InvoiceStatisticsResource@2();
    VAR
      ServiceLine@1000 : Record 5902;
      ServiceInvoice@1003 : TestPage 5933;
    BEGIN
      // Test creation of Service Invoice with Resource and verify Statistics Page.

      // 1. Setup: Find VAT Posting Setup.
      Initialize;

      // 2. Exercise: Create Customer, Resource, Service Invoice with Resource and open Statistics Page.
      CreateServiceInvoiceHeader(ServiceInvoice,CreateCustomer);
      DocumentNo2 := ServiceInvoice."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Invoice;  // Assign global variable for page handler.
      CreateServiceInvoiceLine(ServiceInvoice,ServiceLine.Type::Resource,LibraryResource.CreateResourceNo);
      ServiceInvoice.Statistics.INVOKE;

      // 3. Verify: Verify Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(DocumentGLAccountPageHandler)]
    PROCEDURE InvoiceStatisticsGLAccount@3();
    VAR
      ServiceLine@1000 : Record 5902;
      ServiceInvoice@1003 : TestPage 5933;
    BEGIN
      // Test creation of Service Invoice with G/L Account and verify Statistics Page.

      // 1. Setup: Find VAT Posting Setup.
      Initialize;

      // 2. Exercise: Create Customer, G/L Account, Create Service Invoice with G/L Account and open Statistics Page.
      CreateServiceInvoiceHeader(ServiceInvoice,CreateCustomer);
      DocumentNo2 := ServiceInvoice."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Invoice;  // Assign global variable for page handler.
      CreateServiceInvoiceLine(ServiceInvoice,ServiceLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup);
      ServiceInvoice.Statistics.INVOKE;

      // 3. Verify: Verify Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(DocumentGLAccountPageHandler)]
    PROCEDURE InvoiceStatisticsCost@5();
    VAR
      ServiceLine@1000 : Record 5902;
      ServiceCost@1008 : Record 5905;
      ServiceInvoice@1003 : TestPage 5933;
    BEGIN
      // Test creation of Service Invoice with Cost and verify Statistics Page.

      // 1. Setup: Find VAT Posting Setup and Service Cost.
      Initialize;
      LibraryService.FindServiceCost(ServiceCost);

      // 2. Exercise: Create Customer, Service Invoice with Cost and open Statistics Page.
      CreateServiceInvoiceHeader(ServiceInvoice,CreateCustomer);
      DocumentNo2 := ServiceInvoice."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Invoice;  // Assign global variable for page handler.
      CreateServiceInvoiceLine(ServiceInvoice,ServiceLine.Type::Cost,ServiceCost.Code);
      ServiceInvoice.Statistics.INVOKE;

      // 3. Verify: Verify Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,DocumentDiscountPageHandler)]
    PROCEDURE InvoiceWithInvoiceDiscount@6();
    VAR
      ServiceLine@1000 : Record 5902;
      ServiceCost@1005 : Record 5905;
      ServiceInvoice@1003 : TestPage 5933;
      CustomerNo@1002 : Code[20];
    BEGIN
      // Test creation of Service Invoice with multiple lines, Allow Invoice Discount and verify Statistics Page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup, Find VAT Posting Setup,Service Cost and
      // Create Customer, Customer Invoice Discount.
      Initialize;

      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);
      LibraryService.FindServiceCost(ServiceCost);

      // 2. Exercise: Create Item, Resource, G/L Account, Service Invoice with multiple lines, Calculate Invoice Discount
      // and open Statistics Page.
      CreateServiceInvoiceHeader(ServiceInvoice,CustomerNo);
      DocumentNo2 := ServiceInvoice."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Invoice;  // Assign global variable for page handler.
      CreateServiceInvoiceLine(ServiceInvoice,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      CreateServiceInvoiceLine(ServiceInvoice,ServiceLine.Type::Resource,LibraryResource.CreateResourceNo);
      CreateServiceInvoiceLine(ServiceInvoice,ServiceLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup);
      CreateServiceInvoiceLine(ServiceInvoice,ServiceLine.Type::Cost,ServiceCost.Code);

      ServiceInvoice."Calculate Invoice Discount".INVOKE;
      ServiceInvoice.Statistics.INVOKE;

      // 3. Verify: Verify Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(DocumentWithVATPageHandler)]
    PROCEDURE InvoiceWithPriceIncludingVAT@7();
    VAR
      ServiceLine@1000 : Record 5902;
      ServiceCost@1007 : Record 5905;
      ServiceInvoice@1005 : TestPage 5933;
    BEGIN
      // Test creation of Service Invoice with multiple lines, Price Including Vat and verify Statistics page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup, Find VAT Posting Setup and Service Cost.
      Initialize;

      LibraryService.FindServiceCost(ServiceCost);

      // 2. Exercise: Create Customer, Item, Resource,G/L Account, Service Invoice with Prices Including VAT as True,
      // multiple lines, in lines Allow Invoice Discount as False and open Statistics Page.
      CreateServiceInvoiceHeader(ServiceInvoice,CreateCustomer);
      ServiceInvoice."Prices Including VAT".SETVALUE(TRUE);
      DocumentNo2 := ServiceInvoice."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Invoice;  // Assign global variable for page handler.
      CreateServiceInvoiceLine(ServiceInvoice,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      CreateServiceInvoiceLine(ServiceInvoice,ServiceLine.Type::Resource,LibraryResource.CreateResourceNo);
      CreateServiceInvoiceLine(ServiceInvoice,ServiceLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup);
      CreateServiceInvoiceLine(ServiceInvoice,ServiceLine.Type::Cost,ServiceCost.Code);

      LineWithoutAllowInvoiceDisc(ServiceLine."Document Type"::Invoice,ServiceInvoice."No.".VALUE);
      ServiceInvoice.Statistics.INVOKE;

      // 3. Verify: Verify Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ChangeDiscountPageHandler)]
    PROCEDURE ChangeDiscountAmountInvoice@8();
    VAR
      ServiceLine@1000 : Record 5902;
      ServiceInvoice@1003 : TestPage 5933;
      CustomerNo@1002 : Code[20];
    BEGIN
      // Test creation of Service Invoice with Allow Invoice Discount and change Invoice Discount Amount on Statistics Page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup, Find VAT Posting Setup, Create Customer and
      // Customer Invoice Discount.
      Initialize;

      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);

      // 2. Exercise: Create Item, Service Invoice, Calculate Invoice Discount, open Statistics Page and change
      // Invoice Discount Amount and again open Statistics Page.
      CreateServiceInvoiceHeader(ServiceInvoice,CustomerNo);
      DocumentNo2 := ServiceInvoice."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Invoice;  // Assign global variable for page handler.
      CreateServiceInvoiceLine(ServiceInvoice,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      ServiceInvoice."Calculate Invoice Discount".INVOKE;
      ServiceInvoice.Statistics.INVOKE;
      UpdateDiscountAmount := TRUE;  // Assign global variable for page handler.
      ServiceInvoice.Statistics.INVOKE;

      // 3. Verify: Verify Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ChangeTotalVATPageHandler)]
    PROCEDURE ChangeTotalVATInvoice@9();
    VAR
      ServiceLine@1000 : Record 5902;
      ServiceInvoice@1003 : TestPage 5933;
      CustomerNo@1002 : Code[20];
    BEGIN
      // Test creation of Service Invoice with Allow Invoice Discount and change Total Incl. VAT on Statistics Page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup, Find VAT Posting Setup, Create Customer and
      // Customer Invoice Discount.
      Initialize;
      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);

      // 2. Exercise: Create Item, Service Invoice, Calculate Invoice Discount , open Statistics Page and change
      // Total Incl. VAT and again open Statistics Page.
      CreateServiceInvoiceHeader(ServiceInvoice,CustomerNo);
      DocumentNo2 := ServiceInvoice."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Invoice;  // Assign global variable for page handler.
      CreateServiceInvoiceLine(ServiceInvoice,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      ServiceInvoice."Calculate Invoice Discount".INVOKE;
      ServiceInvoice.Statistics.INVOKE;
      UpdateTotalVAT := TRUE;  // Assign global variable for page handler.
      ServiceInvoice.Statistics.INVOKE;

      // 3. Verify: Verify Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(DocumentCreditLimitPageHandler)]
    PROCEDURE CreditLimitLCYOnInvoice@10();
    VAR
      ServiceLine@1000 : Record 5902;
      Customer@1005 : Record 18;
      ServiceInvoice@1003 : TestPage 5933;
    BEGIN
      // Test creation of Service Invoice and verify Credit limit on Statistics Page.

      // 1. Setup: Create Customer with Credit Limit(LCY).
      Initialize;
      CreateCustomerWithCreditLimit(Customer);
      CreditLimitLCY := Customer."Credit Limit (LCY)";  // Assign global variable for page handler.

      // 2. Exercise: Create G/L Account, Service Invoice with G/L Account and open Statistics Page.
      CreateServiceInvoiceHeader(ServiceInvoice,Customer."No.");
      CreateServiceInvoiceLine(ServiceInvoice,ServiceLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup);
      ServiceInvoice.Statistics.INVOKE;

      // 3. Verify: Verify Credit Limit (LCY) in Statistics Page on Page handler.
    END;

    [Test]
    [HandlerFunctions(DocumentItemPageHandler)]
    PROCEDURE CreditMemoStatisticsItem@34();
    VAR
      ServiceLine@1000 : Record 5902;
      ServiceCreditMemo@1006 : TestPage 5935;
    BEGIN
      // Test creation of Service Credit Memo with Item and verify Statistics Page.

      // 1. Setup
      Initialize;

      // 2. Exercise: Create Customer, Item, Service Credit Memo with Item and open Statistics Page.
      CreateServiceCreditMemoHeader(ServiceCreditMemo,CreateCustomer);
      DocumentNo2 := ServiceCreditMemo."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::"Credit Memo";  // Assign global variable for page handler.
      CreateServiceCreditMemoLine(ServiceCreditMemo,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      ServiceCreditMemo.Statistics.INVOKE;

      // 3. Verify: Verify Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(DocumentResourcePageHandler)]
    PROCEDURE CreditMemoStatisticsResource@33();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceCreditMemo@1000 : TestPage 5935;
    BEGIN
      // Test creation of Service Credit Memo with Resource and verify Statistics Page.

      // 1. Setup
      Initialize;

      // 2. Exercise: Create Customer, Resource, Service Credit Memo with Resource and open Statistics Page.
      CreateServiceCreditMemoHeader(ServiceCreditMemo,CreateCustomer);
      DocumentNo2 := ServiceCreditMemo."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::"Credit Memo";  // Assign global variable for page handler.
      CreateServiceCreditMemoLine(ServiceCreditMemo,ServiceLine.Type::Resource,LibraryResource.CreateResourceNo);
      ServiceCreditMemo.Statistics.INVOKE;

      // 3. Verify: Verify Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(DocumentGLAccountPageHandler)]
    PROCEDURE CreditMemoStatisticsGLAccount@32();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceCreditMemo@1000 : TestPage 5935;
    BEGIN
      // Test creation of Service Credit Memo with G/L Account and verify Statistics Page.

      // 1. Setup
      Initialize;

      // 2. Exercise: Create Customer, G/L Account, Service Credit Memo with G/L Account and open Statistics Page.
      CreateServiceCreditMemoHeader(ServiceCreditMemo,CreateCustomer);
      DocumentNo2 := ServiceCreditMemo."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::"Credit Memo";  // Assign global variable for page handler.
      CreateServiceCreditMemoLine(ServiceCreditMemo,ServiceLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup);
      ServiceCreditMemo.Statistics.INVOKE;

      // 3. Verify: Verify Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(DocumentGLAccountPageHandler)]
    PROCEDURE CreditMemoStatisticsCost@31();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceCost@1008 : Record 5905;
      ServiceCreditMemo@1000 : TestPage 5935;
    BEGIN
      // Test creation of Service Credit Memo with Cost and verify Statistics Page.

      // 1. Setup: Find Service Cost.
      Initialize;
      LibraryService.FindServiceCost(ServiceCost);

      // 2. Exercise: Create Customer, Service Credit Memo with Cost and open Statistics Page.
      CreateServiceCreditMemoHeader(ServiceCreditMemo,CreateCustomer);
      DocumentNo2 := ServiceCreditMemo."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::"Credit Memo";  // Assign global variable for page handler.
      CreateServiceCreditMemoLine(ServiceCreditMemo,ServiceLine.Type::Cost,ServiceCost.Code);
      ServiceCreditMemo.Statistics.INVOKE;

      // 3. Verify: Verify Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,DocumentDiscountPageHandler)]
    PROCEDURE CreditMemoWithInvoiceDiscount@30();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceCost@1005 : Record 5905;
      ServiceCreditMemo@1000 : TestPage 5935;
      CustomerNo@1002 : Code[20];
    BEGIN
      // Test creation of Service Credit Memo with multiple lines, Allow Invoice Discount and verify Statistics Page.

      // 1. Setup: Find Service Cost and Create Customer, Customer Invoice Discount.
      Initialize;
      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);
      LibraryService.FindServiceCost(ServiceCost);

      // 2. Exercise: Create Item, Resource, G/L Account, Service Credit Memo with multiple lines, Calculate Invoice Discount
      // and open Statistics Page.
      CreateServiceCreditMemoHeader(ServiceCreditMemo,CustomerNo);
      DocumentNo2 := ServiceCreditMemo."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::"Credit Memo";  // Assign global variable for page handler.
      CreateServiceCreditMemoLine(ServiceCreditMemo,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      CreateServiceCreditMemoLine(ServiceCreditMemo,ServiceLine.Type::Resource,LibraryResource.CreateResourceNo);
      CreateServiceCreditMemoLine(ServiceCreditMemo,ServiceLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup);
      CreateServiceCreditMemoLine(ServiceCreditMemo,ServiceLine.Type::Cost,ServiceCost.Code);

      ServiceCreditMemo."Calculate Invoice Discount".INVOKE;
      ServiceCreditMemo.Statistics.INVOKE;

      // 3. Verify: Verify Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(DocumentWithVATPageHandler)]
    PROCEDURE MemoWithPriceIncludingVAT@27();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceCost@1007 : Record 5905;
      ServiceCreditMemo@1000 : TestPage 5935;
    BEGIN
      // Test creation of Service Credit Memo with multiple lines, Price Including Vat and verify Statistics page.

      // 1. Setup: Find Service Cost.
      Initialize;
      LibraryService.FindServiceCost(ServiceCost);

      // 2. Exercise: Create Customer, Item, Resource,G/L Account, Service Credit Memo with Prices Including VAT as True,
      // multiple lines, in lines Allow Invoice Discount as False and open Statistics Page.
      CreateServiceCreditMemoHeader(ServiceCreditMemo,CreateCustomer);
      ServiceCreditMemo."Prices Including VAT".SETVALUE(TRUE);
      DocumentNo2 := ServiceCreditMemo."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::"Credit Memo";  // Assign global variable for page handler.
      CreateServiceCreditMemoLine(ServiceCreditMemo,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      CreateServiceCreditMemoLine(ServiceCreditMemo,ServiceLine.Type::Resource,LibraryResource.CreateResourceNo);
      CreateServiceCreditMemoLine(
        ServiceCreditMemo,ServiceLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup);
      CreateServiceCreditMemoLine(ServiceCreditMemo,ServiceLine.Type::Cost,ServiceCost.Code);

      LineWithoutAllowInvoiceDisc(ServiceLine."Document Type"::"Credit Memo",ServiceCreditMemo."No.".VALUE);
      ServiceCreditMemo.Statistics.INVOKE;

      // 3. Verify: Verify Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ChangeDiscountPageHandler)]
    PROCEDURE ChangeDiscountAmountCreditMemo@26();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceCreditMemo@1000 : TestPage 5935;
      CustomerNo@1002 : Code[20];
    BEGIN
      // Test creation of Service Credit Memo with Allow Invoice Discount and change Invoice Discount Amount on Statistics Page.

      // 1. Setup: Find VAT Posting Setup, Create Customer and Customer Invoice Discount.
      Initialize;
      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);

      // 2. Exercise: Create Item, Service Credit Memo, Calculate Invoice Discount, open Statistics Page and change
      // Invoice Discount Amount and again open Statistics Page.
      CreateServiceCreditMemoHeader(ServiceCreditMemo,CustomerNo);
      DocumentNo2 := ServiceCreditMemo."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::"Credit Memo";  // Assign global variable for page handler.
      CreateServiceCreditMemoLine(ServiceCreditMemo,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      ServiceCreditMemo."Calculate Invoice Discount".INVOKE;
      ServiceCreditMemo.Statistics.INVOKE;
      UpdateDiscountAmount := TRUE;  // Assign global variable for page handler.
      ServiceCreditMemo.Statistics.INVOKE;

      // 3. Verify: Verify Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ChangeTotalVATPageHandler)]
    PROCEDURE ChangeTotalVATCreditMemo@24();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceCreditMemo@1000 : TestPage 5935;
      CustomerNo@1002 : Code[20];
    BEGIN
      // Test creation of Service Credit Memo with Allow Invoice Discount and change Total Incl. VAT on Statistics Page.

      // 1. Setup: Find VAT Posting Setup, Create Customer and Customer Invoice Discount.
      Initialize;
      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);

      // 2. Exercise: Create Item, Service Credit Memo, Calculate Invoice Discount , open Statistics Page and change
      // Total Incl. VAT and again open Statistics Page.
      CreateServiceCreditMemoHeader(ServiceCreditMemo,CustomerNo);
      DocumentNo2 := ServiceCreditMemo."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::"Credit Memo";  // Assign global variable for page handler.
      CreateServiceCreditMemoLine(ServiceCreditMemo,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      ServiceCreditMemo."Calculate Invoice Discount".INVOKE;
      ServiceCreditMemo.Statistics.INVOKE;
      UpdateTotalVAT := TRUE;  // Assign global variable for page handler.
      ServiceCreditMemo.Statistics.INVOKE;

      // 3. Verify: Verify Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(DocumentCreditLimitPageHandler)]
    PROCEDURE CreditLimitLCYOnCreditMemo@23();
    VAR
      ServiceLine@1001 : Record 5902;
      Customer@1005 : Record 18;
      ServiceCreditMemo@1000 : TestPage 5935;
    BEGIN
      // Test creation of Service Credit Memo and verify Credit limit on Statistics Page.

      // 1. Setup: Create Customer with Credit Limit(LCY).
      Initialize;
      CreateCustomerWithCreditLimit(Customer);
      CreditLimitLCY := Customer."Credit Limit (LCY)";  // Assign global variable for page handler.

      // 2. Exercise: Create G/L Account, Service Credit Memo with G/L Account and open Statistics Page.
      CreateServiceCreditMemoHeader(ServiceCreditMemo,Customer."No.");
      CreateServiceCreditMemoLine(
        ServiceCreditMemo,ServiceLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup);
      ServiceCreditMemo.Statistics.INVOKE;

      // 3. Verify: Verify Credit Limit (LCY) in Statistics Page on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceLinesPageHandler,OrderItemPageHandler,VATAmountLinesPageHandler)]
    PROCEDURE OrderStatisticsItem@53();
    VAR
      ServiceLine@1000 : Record 5902;
      ServiceOrder@1006 : TestPage 5900;
    BEGIN
      // Test creation of Service Order with Item and verify Service Order Statistics Page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup and Create Item.
      Initialize;

      // Assign global variable for page handler.
      No2 := LibraryInventory.CreateItemNo;
      Type2 := Type2::Item;

      // 2. Exercise: Create Service Order with Item and open Service Order Statistics Page.
      CreateServiceOrderHeader(ServiceOrder,CreateCustomer);
      CreateServiceOrderItemLine(ServiceOrder);
      DocumentNo2 := ServiceOrder."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Order;  // Assign global variable for page handler.
      Type2 := Type2::Item;  // Assign global variable for page handler.
      COMMIT;
      ServiceOrder.ServItemLines.FIRST;
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      ServiceOrder.Statistics.INVOKE;

      // 3. Verify: Verify Service Order Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceLinesPageHandler,OrderResourcePageHandler,VATAmountLinesPageHandler)]
    PROCEDURE OrderStatisticsResource@50();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceOrder@1000 : TestPage 5900;
    BEGIN
      // Test creation of Service Order with Resource and verify Service Order Statistics Page.

      // 1. Setup: Create Resource.
      Initialize;

      // Assign global variable for page handler.
      No2 := LibraryResource.CreateResourceNo;
      Type2 := Type2::Resource;

      // 2. Exercise: Create Customer Service Order with Resource and open Service Order Statistics Page.
      CreateServiceOrderHeader(ServiceOrder,CreateCustomer);
      CreateServiceOrderItemLine(ServiceOrder);
      DocumentNo2 := ServiceOrder."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Order;  // Assign global variable for page handler.
      Type2 := Type2::Resource;  // Assign global variable for page handler.
      COMMIT;
      ServiceOrder.ServItemLines.FIRST;
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      ServiceOrder.Statistics.INVOKE;

      // 3. Verify: Verify Service Order Statistics Page with details on Page Handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceLinesPageHandler,OrderGLAccountPageHandler,VATAmountLinesPageHandler)]
    PROCEDURE OrderStatisticsGLAccount@49();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceOrder@1000 : TestPage 5900;
    BEGIN
      // Test creation of Service Order with G/L Account and verify Service Order Statistics Page.

      // 1. Setup: Create G/L Account.
      Initialize;

      // Assign global variable for page handler.
      No2 := LibraryERM.CreateGLAccountWithSalesSetup;
      Type2 := Type2::"G/L Account";

      // 2. Exercise: Create Customer, Service Order with G/L Account and open Service Order Statistics Page.
      CreateServiceOrderHeader(ServiceOrder,CreateCustomer);
      CreateServiceOrderItemLine(ServiceOrder);
      DocumentNo2 := ServiceOrder."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Order;  // Assign global variable for page handler.
      Type2 := Type2::"G/L Account";  // Assign global variable for page handler.
      COMMIT;
      ServiceOrder.ServItemLines.FIRST;
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      ServiceOrder.Statistics.INVOKE;

      // 3. Verify: Verify Service Order Statistics Page with details on Page Handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceLinesPageHandler,OrderGLAccountPageHandler,VATAmountLinesPageHandler)]
    PROCEDURE OrderStatisticsCost@48();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceCost@1008 : Record 5905;
      ServiceOrder@1000 : TestPage 5900;
    BEGIN
      // Test creation of Service Order with Cost and verify Service Order Statistics Page.

      // 1. Setup: Find Service Cost.
      Initialize;
      LibraryService.FindServiceCost(ServiceCost);

      // Assign global variable for page handler.
      No2 := ServiceCost.Code;
      Type2 := Type2::Cost;

      // 2. Exercise: Create Customer, Service Order with Cost and open Service Order Statistics Page.
      CreateServiceOrderHeader(ServiceOrder,CreateCustomer);
      CreateServiceOrderItemLine(ServiceOrder);
      DocumentNo2 := ServiceOrder."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Order;  // Assign global variable for page handler.
      Type2 := Type2::Cost;  // Assign global variable for page handler.
      COMMIT;
      ServiceOrder.ServItemLines.FIRST;
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      ServiceOrder.Statistics.INVOKE;

      // 3. Verify: Verify Service Order Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceLinesMultiPageHandler,OrderInvoiceDiscountHandler,VATAmountLinesPageHandler)]
    PROCEDURE OrderWithInvoiceDiscount@45();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceCost@1005 : Record 5905;
      ServiceOrder@1000 : TestPage 5900;
      CustomerNo@1002 : Code[20];
    BEGIN
      // Test creation of Service Order with multiple lines, Allow Invoice Discount and verify Service Order Statistics Page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup and
      // Create Customer, Customer Invoice Discount ,Item, Resource and G/L Account.
      Initialize;
      LibraryService.FindServiceCost(ServiceCost);
      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);

      // Assign global variable for page handler.
      ItemNo := LibraryInventory.CreateItemNo;
      ResourceNo := LibraryResource.CreateResourceNo;
      GLAccountNo := LibraryERM.CreateGLAccountWithSalesSetup;
      CostCode := ServiceCost.Code;

      // 2. Exercise: Create Service Order with multiple lines, Calculate Invoice Discount and open Service Order Statistics Page.
      CreateServiceOrderHeader(ServiceOrder,CustomerNo);
      CreateServiceOrderItemLine(ServiceOrder);
      DocumentNo2 := ServiceOrder."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Order;  // Assign global variable for page handler.
      COMMIT;
      ServiceOrder.ServItemLines.FIRST;
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      ServiceOrder.Statistics.INVOKE;

      // 3. Verify: Verify Service Order Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceLinesMultiPageHandler,OrderWithVATPageHandler,VATAmountLinesPageHandler)]
    PROCEDURE OrderWithPriceIncludingVAT@44();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceCost@1007 : Record 5905;
      ServiceOrder@1000 : TestPage 5900;
    BEGIN
      // Test creation of Service Order with multiple lines, Price Including Vat and verify Service Order Statistics page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup, Find VAT Posting Setup, Service Cost and
      // Create Item, Resource and G/L Account.
      Initialize;
      LibraryService.FindServiceCost(ServiceCost);

      // Assign global variable for page handler.
      ItemNo := LibraryInventory.CreateItemNo;
      ResourceNo := LibraryResource.CreateResourceNo;
      GLAccountNo := LibraryERM.CreateGLAccountWithSalesSetup;
      CostCode := ServiceCost.Code;

      // 2. Exercise: Create Service Order with Prices Including VAT as True,multiple lines,
      // in lines Allow Invoice Discount as False and open Service Order Statistics Page.
      CreateServiceOrderHeader(ServiceOrder,CreateCustomer);
      ServiceOrder."Prices Including VAT".SETVALUE(TRUE);
      CreateServiceOrderItemLine(ServiceOrder);
      DocumentNo2 := ServiceOrder."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Order;  // Assign global variable for page handler.
      COMMIT;
      ServiceOrder.ServItemLines.FIRST;
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      LineWithoutAllowInvoiceDisc(ServiceLine."Document Type"::Order,ServiceOrder."No.".VALUE);
      ServiceOrder.Statistics.INVOKE;

      // 3. Verify: Verify Service Order Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceLinesPageHandler,ChangeDiscountOrderPageHandler,VATAmountLinesPageHandler)]
    PROCEDURE ChangeDiscountAmountOrder@41();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceOrder@1000 : TestPage 5900;
      CustomerNo@1002 : Code[20];
    BEGIN
      // Test creation of Service Order with Allow Invoice Discount and change Invoice Discount Amount on Service Order Statistics Page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup, Find VAT Posting Setup, Create Customer,
      // Customer Invoice Discount and Item.
      Initialize;
      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);

      // Assign global variable for page handler.
      No2 := LibraryInventory.CreateItemNo;
      Type2 := Type2::Item;

      // 2. Exercise: Create Service Order, Calculate Invoice Discount, open Service Order Statistics Page and change
      // Invoice Discount Amount and again open Service Order Statistics Page.
      CreateServiceOrderHeader(ServiceOrder,CustomerNo);
      CreateServiceOrderItemLine(ServiceOrder);
      DocumentNo2 := ServiceOrder."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Order;  // Assign global variable for page handler.
      COMMIT;
      ServiceOrder.ServItemLines.FIRST;
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      ServiceOrder.Statistics.INVOKE;
      UpdateDiscountAmount := TRUE;  // Assign global variable for page handler.
      ServiceOrder.Statistics.INVOKE;

      // 3. Verify: Verify Service Order Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceLinesPageHandler,ChangeTotalVATOrderPageHandler,VATAmountLinesPageHandler)]
    PROCEDURE ChangeTotalVATOrder@40();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceOrder@1000 : TestPage 5900;
      CustomerNo@1002 : Code[20];
    BEGIN
      // Test creation of Service Order with Allow Invoice Discount and change Total Incl. VAT on Service Order Statistics Page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup, Find VAT Posting Setup, Create Customer and
      // Customer Invoice Discount and Item.
      Initialize;
      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);

      // Assign global variable for page handler.
      No2 := LibraryInventory.CreateItemNo;
      Type2 := Type2::Item;

      // 2. Exercise: Create Service Order, Calculate Invoice Discount , open Service Order Statistics Page and change
      // Total Incl. VAT and again open Service Order Statistics Page.
      CreateServiceOrderHeader(ServiceOrder,CustomerNo);
      CreateServiceOrderItemLine(ServiceOrder);
      DocumentNo2 := ServiceOrder."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Order;  // Assign global variable for page handler.
      COMMIT;
      ServiceOrder.ServItemLines.FIRST;
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      ServiceOrder.Statistics.INVOKE;
      UpdateTotalVAT := TRUE;  // Assign global variable for page handler.
      ServiceOrder.Statistics.INVOKE;

      // 3. Verify: Verify Service Order Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceLinesPageHandler,QuantityToShipPageHandler,VATAmountLinesPageHandler)]
    PROCEDURE OrderWithQuantityToShip@62();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrder@1002 : TestPage 5900;
      CustomerNo@1000 : Code[20];
    BEGIN
      // Test creation of Service Order, Update Quantity to Ship and verify Service Order Statistics Page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup, Find VAT Posting Setup, Create Customer,
      // Customer Invoice Discount and Item.
      Initialize;
      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);

      // Assign global variable for page handler.
      No2 := LibraryInventory.CreateItemNo;
      Type2 := Type2::Item;

      // 2. Exercise: Create Service Order with Item, Update Quantity to Ship and open Service Order Statistics Page.
      CreateServiceOrderHeader(ServiceOrder,CustomerNo);
      CreateServiceOrderItemLine(ServiceOrder);
      DocumentNo2 := ServiceOrder."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Order;  // Assign global variable for page handler.
      COMMIT;
      ServiceOrder.ServItemLines.FIRST;
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      UpdateQuantityToShipLine(DocumentNo2);
      ServiceOrder.Statistics.INVOKE;

      // 3. Verify: Verify Service Order Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceLinesPageHandler,QuantityToShipPageHandler,ShipStrMenuHandler,VATAmountLinesPageHandler)]
    PROCEDURE OrderWithQuantityToShipPost@63();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrder@1002 : TestPage 5900;
      CustomerNo@1000 : Code[20];
    BEGIN
      // Test creation of Service Order, Update Quantity to Ship, Post and verify Service Order Statistics Page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup, Find VAT Posting Setup and Create Customer,
      // Customer Invoice Discount, Item.
      Initialize;
      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);

      // Assign global variable for page handler.
      No2 := LibraryInventory.CreateItemNo;
      Type2 := Type2::Item;

      // 2. Exercise: Create Service Order with Item, Update Quantity to Ship, Post and open Service Order Statistics Page.
      CreateServiceOrderHeader(ServiceOrder,CustomerNo);
      CreateServiceOrderItemLine(ServiceOrder);
      DocumentNo2 := ServiceOrder."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Order;  // Assign global variable for page handler.
      COMMIT;
      ServiceOrder.ServItemLines.FIRST;
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      UpdateQuantityToShipLine(DocumentNo2);
      ServiceOrder.Post.INVOKE;
      ServiceOrder.Statistics.INVOKE;

      // 3. Verify: Verify Service Order Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceLinesPageHandler,ChangeDiscountOrderShipHandler,ShipStrMenuHandler,VATAmountLinesPageHandler)]
    PROCEDURE ChangeDiscountAmountOrderShip@67();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrder@1002 : TestPage 5900;
      CustomerNo@1000 : Code[20];
    BEGIN
      // Test creation of Service Order, Update Quantity to Ship, Post, Update Invoice Discount Amount on Statistics Page and
      // verify Service Order Statistics Page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup, Find VAT Posting Setup and Create Customer,
      // Customer Invoice Discount, Item.
      Initialize;
      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);

      // Assign global variable for page handler.
      No2 := LibraryInventory.CreateItemNo;
      Type2 := Type2::Item;

      // 2. Exercise: Create Service Order with Item, Update Quantity to Ship, Post, Open Service Order Statistics Page,
      // Change Invoice Discount Amount, and again open Service Order Statistics Page.
      CreateServiceOrderHeader(ServiceOrder,CustomerNo);
      CreateServiceOrderItemLine(ServiceOrder);
      DocumentNo2 := ServiceOrder."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Order;  // Assign global variable for page handler.
      COMMIT;
      ServiceOrder.ServItemLines.FIRST;
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      UpdateQuantityToShipLine(DocumentNo2);
      ServiceOrder.Post.INVOKE;
      ServiceOrder.Statistics.INVOKE;
      UpdateDiscountAmount := TRUE;  // Assign global variable for page handler.
      ServiceOrder.Statistics.INVOKE;

      // 3. Verify: Verify Service Order Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceLinesPageHandler,ChangeDiscountOrderShipHandler,ShipStrMenuHandler)]
    PROCEDURE InvoiceDiscountAmountOrderShip@80();
    VAR
      CustomerNo@1000 : Code[20];
      InvoiceDiscountAmount@1006 : Decimal;
    BEGIN
      // [FEATURE] [Invoice Discount]
      // [SCENARIO 216154] Posted Service Line's Invoice Discount Amount after updating invoice discount amount on statistics page
      Initialize;

      // [GIVEN] Sales & Receivables Setup "Calc. Inv. Discount" = FALSE
      LibrarySales.SetCalcInvDiscount(FALSE);
      // [GIVEN] Customer with Invoice Discount setup: "Minimum Amount" = 0, "Discount %" = 10
      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);

      // [GIVEN] Service Order: "Service Item No." = "", "Item No." = "X"
      // [GIVEN] Servie Line for item "X": "Type" = Item, "No." = "X", "Unit Price" = 100, "Quantity" = 1
      // [GIVEN] Calculate Invoice Discount for Service Line
      // [GIVEN] Service Line's "Inv. Discount Amount" = 10
      // [GIVEN] Open Service Order's Statistics
      // [GIVEN] Change Invoice Discount = 20
      // [WHEN] Post Service Invoice
      No2 := LibraryInventory.CreateItemNo;
      Type2 := Type2::Item;
      CreateAndPostServiceOrderWithInvoiceDiscountAmount(CustomerNo,InvoiceDiscountAmount);

      // [THEN] Posted Service Line has "Inv. Discount Amount" = 20
      VerifyServiceLineInvoiceDiscountAmount(DocumentNo2,InvoiceDiscountAmount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceLinesPageHandler,ChangeTotalVATOrderShipHandler,ShipStrMenuHandler,VATAmountLinesPageHandler)]
    PROCEDURE ChangeTotalVATAmountOrderShip@66();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrder@1002 : TestPage 5900;
      CustomerNo@1000 : Code[20];
    BEGIN
      // Test creation of Service Order, Update Quantity to Ship, Post, Update Total Incl. VAT on Statistics Page and
      // verify Service Order Statistics Page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup, Find VAT Posting Setup and Create Customer,
      // Customer Invoice Discount, Item.
      Initialize;
      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);

      // Assign global variable for page handler.
      No2 := LibraryInventory.CreateItemNo;
      Type2 := Type2::Item;

      // 2. Exercise: Create Service Order with Item, Update Quantity to Ship, Post, Open Service Order Statistics Page,
      // Change Total Incl. VAT , and again open Service Order Statistics Page.
      CreateServiceOrderHeader(ServiceOrder,CustomerNo);
      CreateServiceOrderItemLine(ServiceOrder);
      DocumentNo2 := ServiceOrder."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Order;  // Assign global variable for page handler.
      COMMIT;
      ServiceOrder.ServItemLines.FIRST;
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      UpdateQuantityToShipLine(DocumentNo2);
      ServiceOrder.Post.INVOKE;
      ServiceOrder.Statistics.INVOKE;
      UpdateTotalVAT := TRUE;  // Assign global variable for page handler.
      ServiceOrder.Statistics.INVOKE;

      // 3. Verify: Verify Service Order Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceLinesPageHandler,QuantityToInvoicePageHandler,VATAmountLinesPageHandler)]
    PROCEDURE OrderWithQuantityToInvoice@65();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrder@1002 : TestPage 5900;
      CustomerNo@1000 : Code[20];
    BEGIN
      // Test creation of Service Order with Item, Update Quantity to Invoice and verify Service Order Statistics Page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup, Find VAT Posting Setup and Create Customer,
      // Customer Invoice Discount, Item.
      Initialize;
      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);

      // Assign global variable for page handler.
      No2 := LibraryInventory.CreateItemNo;
      Type2 := Type2::Item;

      // 2. Exercise: Create Service Order with Item, Update Quantity to Invoice and open Service Order Statistics Page.
      CreateServiceOrderHeader(ServiceOrder,CustomerNo);
      CreateServiceOrderItemLine(ServiceOrder);
      DocumentNo2 := ServiceOrder."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Order;  // Assign global variable for page handler.
      COMMIT;
      ServiceOrder.ServItemLines.FIRST;
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      UpdateQuantityToInvoiceLine(DocumentNo2);
      ServiceOrder.Statistics.INVOKE;

      // 3. Verify: Verify Service Order Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceLinesPageHandler,QuantityToInvoicePageHandler,ShipAndInvoiceStrMenuHandler,VATAmountLinesPageHandler)]
    PROCEDURE OrderWithQuantityToInvoicePost@75();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrder@1002 : TestPage 5900;
      CustomerNo@1000 : Code[20];
    BEGIN
      // Test creation of Service Order with Item, Update Quantity to Invoice, Post and verify Service Order Statistics Page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup, Find VAT Posting Setup and Create Customer,
      // Customer Invoice Discount, Item.
      Initialize;
      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);

      // Assign global variable for page handler.
      No2 := LibraryInventory.CreateItemNo;
      Type2 := Type2::Item;

      // 2. Exercise: Create Service Order with Item, Update Quantity to Invoice, Post and open Service Order Statistics Page.
      CreateServiceOrderHeader(ServiceOrder,CustomerNo);
      CreateServiceOrderItemLine(ServiceOrder);
      DocumentNo2 := ServiceOrder."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Order;  // Assign global variable for page handler.
      COMMIT;
      ServiceOrder.ServItemLines.FIRST;
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      UpdateQuantityToShipLine(DocumentNo2);
      UpdateQuantityToInvoiceLine(DocumentNo2);
      ServiceOrder.Post.INVOKE;
      ServiceOrder.Statistics.INVOKE;

      // 3. Verify: Verify Service Order Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceLinesPageHandler,ChangeDiscountOrderPostHandler,ShipAndInvoiceStrMenuHandler,VATAmountLinesPageHandler)]
    PROCEDURE ChangeDiscountAmountOrderPost@73();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrder@1002 : TestPage 5900;
      CustomerNo@1000 : Code[20];
    BEGIN
      // Test creation of Service Order with Item, Update Quantity to Invoice, Post, Update Invoice Discount Amount on Statistics Page and
      // verify Service Order Statistics Page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup, Find VAT Posting Setup and Create Customer,
      // Customer Invoice Discount, Item.
      Initialize;
      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);

      // Assign global variable for page handler.
      No2 := LibraryInventory.CreateItemNo;
      Type2 := Type2::Item;

      // 2. Exercise: Create Service Order with Item, Update Quantity to Invoice, Post, Open Service Order Statistics Page,
      // Change Invoice Discount Amount, and again open Service Order Statistics Page.
      CreateServiceOrderHeader(ServiceOrder,CustomerNo);
      CreateServiceOrderItemLine(ServiceOrder);
      DocumentNo2 := ServiceOrder."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Order;  // Assign global variable for page handler.
      COMMIT;
      ServiceOrder.ServItemLines.FIRST;
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      UpdateQuantityToShipLine(DocumentNo2);
      UpdateQuantityToInvoiceLine(DocumentNo2);
      ServiceOrder.Post.INVOKE;
      ServiceOrder.Statistics.INVOKE;
      UpdateDiscountAmount := TRUE;  // Assign global variable for page handler.
      ServiceOrder.Statistics.INVOKE;

      // 3. Verify: Verify Service Order Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceLinesPageHandler,ChangeTotalVATOrderPostHandler,ShipAndInvoiceStrMenuHandler,VATAmountLinesPageHandler)]
    PROCEDURE ChangeTotalVATAmountOrderPost@72();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrder@1002 : TestPage 5900;
      CustomerNo@1000 : Code[20];
    BEGIN
      // Test creation of Service Order, Update Quantity to Invoice, Post, Update Total Incl. VAT on Statistics Page and
      // verify Service Order Statistics Page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup, Find VAT Posting Setup and Create Customer,
      // Customer Invoice Discount, Item.
      Initialize;
      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);

      // Assign global variable for page handler.
      No2 := LibraryInventory.CreateItemNo;
      Type2 := Type2::Item;

      // 2. Exercise: Create Service Order with Item, Update Quantity to Invoice, Post,
      // open Service Order Statistics Page, Change Total Incl. VAT, and again open Service Order Statistics Page.
      CreateServiceOrderHeader(ServiceOrder,CustomerNo);
      CreateServiceOrderItemLine(ServiceOrder);
      DocumentNo2 := ServiceOrder."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Order;  // Assign global variable for page handler.
      COMMIT;
      ServiceOrder.ServItemLines.FIRST;
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      UpdateQuantityToShipLine(DocumentNo2);
      UpdateQuantityToInvoiceLine(DocumentNo2);
      ServiceOrder.Post.INVOKE;
      ServiceOrder.Statistics.INVOKE;
      UpdateQuantityToShipLine(DocumentNo2);
      UpdateQuantityToInvoiceLine(DocumentNo2);
      UpdateTotalVAT := TRUE;  // Assign global variable for page handler.
      ServiceOrder.Statistics.INVOKE;

      // 3. Verify: Verify Service Order Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceLinesPageHandler,CreditLimitLCYPageHandler)]
    PROCEDURE CreditLimitLCYOnOrder@77();
    VAR
      Customer@1002 : Record 18;
      ServiceOrder@1000 : TestPage 5900;
    BEGIN
      // Test creation of Service Order and verify Credit limit on Service Order Statistics Page.

      // 1. Setup: Find VAT Posting Setup, Create Customer with Credit Limit(LCY) and G/L Account.
      Initialize;
      CreateCustomerWithCreditLimit(Customer);
      CreditLimitLCY := Customer."Credit Limit (LCY)";  // Assign global variable for page handler.

      // Assign global variable for page handler.
      No2 := LibraryERM.CreateGLAccountWithSalesSetup;
      Type2 := Type2::"G/L Account";

      // 2. Exercise: Create Service Order with G/L Account and open Service Order Statistics Page.
      CreateServiceOrderHeader(ServiceOrder,Customer."No.");
      CreateServiceOrderItemLine(ServiceOrder);
      COMMIT;
      ServiceOrder.ServItemLines.FIRST;
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      ServiceOrder.Statistics.INVOKE;

      // 3. Verify: Verify Credit Limit (LCY) in Service Order Statistics Page on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,QuoteLinesPageHandler,DocumentItemPageHandler)]
    PROCEDURE QuoteStatisticsItem@98();
    VAR
      ServiceLine@1000 : Record 5902;
      ServiceQuote@1006 : TestPage 5964;
    BEGIN
      // Test creation of Service Quote with Item and verify Statistics Page.

      // 1. Setup: Find VAT Posting Setup and Create Item.
      Initialize;

      // Assign global variable for page handler.
      No2 := LibraryInventory.CreateItemNo;
      Type2 := Type2::Item;

      // 2. Exercise: Create Service Quote with Item and open Statistics Page.
      CreateServiceQuoteHeader(ServiceQuote,CreateCustomer);
      CreateServiceQuoteItemLine(ServiceQuote);
      DocumentNo2 := ServiceQuote."No.".VALUE; // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Quote;  // Assign global variable for page handler.
      COMMIT;
      ServiceQuote.ServItemLine.FIRST;
      ServiceQuote.ServItemLine.ServiceLines.INVOKE;
      ServiceQuote.Statistics.INVOKE;

      // 3. Verify: Verify Service Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,QuoteLinesPageHandler,DocumentResourcePageHandler)]
    PROCEDURE QuoteStatisticsResource@96();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceQuote@1000 : TestPage 5964;
    BEGIN
      // Test creation of Service Quote with Resource and verify Statistics Page.

      // 1. Setup: Find VAT Posting Setup and Create Resource.
      Initialize;

      // Assign global variable for page handler.
      No2 := LibraryResource.CreateResourceNo;
      Type2 := Type2::Resource;

      // 2. Exercise: Create Customer Service Quote with Resource and open Statistics Page.
      CreateServiceQuoteHeader(ServiceQuote,CreateCustomer);
      CreateServiceQuoteItemLine(ServiceQuote);
      DocumentNo2 := ServiceQuote."No.".VALUE; // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Quote;  // Assign global variable for page handler.
      COMMIT;
      ServiceQuote.ServItemLine.FIRST;
      ServiceQuote.ServItemLine.ServiceLines.INVOKE;
      ServiceQuote.Statistics.INVOKE;

      // 3. Verify: Verify Service Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,QuoteLinesPageHandler,DocumentGLAccountPageHandler)]
    PROCEDURE QuoteStatisticsGLAccount@93();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceQuote@1000 : TestPage 5964;
    BEGIN
      // Test creation of Service Quote with G/L Account and verify Statistics Page.

      // 1. Setup: Find VAT Posting Setup and Create G/L Account.
      Initialize;

      // Assign global variable for page handler.
      No2 := LibraryERM.CreateGLAccountWithSalesSetup;
      Type2 := Type2::"G/L Account";

      // 2. Exercise: Create Customer, Service Quote with G/L Account and open Statistics Page.
      CreateServiceQuoteHeader(ServiceQuote,CreateCustomer);
      CreateServiceQuoteItemLine(ServiceQuote);
      DocumentNo2 := ServiceQuote."No.".VALUE; // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Quote;  // Assign global variable for page handler.
      COMMIT;
      ServiceQuote.ServItemLine.FIRST;
      ServiceQuote.ServItemLine.ServiceLines.INVOKE;
      ServiceQuote.Statistics.INVOKE;

      // 3. Verify: Verify Service Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,QuoteLinesPageHandler,DocumentGLAccountPageHandler)]
    PROCEDURE QuoteStatisticsCost@90();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceCost@1008 : Record 5905;
      ServiceQuote@1000 : TestPage 5964;
    BEGIN
      // Test creation of Service Quote with Cost and verify Statistics Page.

      // 1. Setup: Find VAT Posting Setup and Service Cost.
      Initialize;
      LibraryService.FindServiceCost(ServiceCost);

      // Assign global variable for page handler.
      No2 := ServiceCost.Code;
      Type2 := Type2::Cost;

      // 2. Exercise: Create Customer, Service Quote with Cost and open Statistics Page.
      CreateServiceQuoteHeader(ServiceQuote,CreateCustomer);
      CreateServiceQuoteItemLine(ServiceQuote);
      DocumentNo2 := ServiceQuote."No.".VALUE; // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Quote;  // Assign global variable for page handler.
      COMMIT;
      ServiceQuote.ServItemLine.FIRST;
      ServiceQuote.ServItemLine.ServiceLines.INVOKE;
      ServiceQuote.Statistics.INVOKE;

      // 3. Verify: Verify Service Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,QuoteLinesMultiplePageHandler,DocumentDiscountPageHandler)]
    PROCEDURE QuoteWithInvoiceDiscount@87();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceCost@1005 : Record 5905;
      ServiceQuote@1000 : TestPage 5964;
      CustomerNo@1002 : Code[20];
    BEGIN
      // Test creation of Service Quote with multiple lines, Allow Invoice Discount and verify Statistics Page.

      // 1. Setup: Find VAT Posting Setup,Service Cost, Create Customer, Customer Invoice Discount ,Item, Resource and G/L Account.
      Initialize;
      LibraryService.FindServiceCost(ServiceCost);
      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);

      // Assign global variable for page handler.
      ItemNo := LibraryInventory.CreateItemNo;
      ResourceNo := LibraryResource.CreateResourceNo;
      GLAccountNo := LibraryERM.CreateGLAccountWithSalesSetup;
      CostCode := ServiceCost.Code;

      // 2. Exercise: Create Service Quote with multiple lines, Calculate Invoice Discount and open Statistics Page.
      CreateServiceQuoteHeader(ServiceQuote,CustomerNo);
      CreateServiceQuoteItemLine(ServiceQuote);
      DocumentNo2 := ServiceQuote."No.".VALUE; // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Quote;  // Assign global variable for page handler.
      COMMIT;
      ServiceQuote.ServItemLine.FIRST;
      ServiceQuote.ServItemLine.ServiceLines.INVOKE;
      ServiceQuote.Statistics.INVOKE;

      // 3. Verify: Verify Service Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,QuoteLinesMultiplePageHandler,DocumentWithVATPageHandler)]
    PROCEDURE QuoteWithPriceIncludingVAT@85();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceCost@1007 : Record 5905;
      ServiceQuote@1000 : TestPage 5964;
    BEGIN
      // Test creation of Service Quote with multiple lines, Price Including Vat and verify Statistics page.

      // 1. Setup: Find VAT Posting Setup, Service Cost, Create Item, Resource and G/L Account.
      Initialize;
      LibraryService.FindServiceCost(ServiceCost);

      // Assign global variable for page handler.
      ItemNo := LibraryInventory.CreateItemNo;
      ResourceNo := LibraryResource.CreateResourceNo;
      GLAccountNo := LibraryERM.CreateGLAccountWithSalesSetup;
      CostCode := ServiceCost.Code;

      // 2. Exercise: Create Service Quote with Prices Including VAT as True,multiple lines,
      // in lines Allow Invoice Discount as False and open Statistics Page.
      CreateServiceQuoteHeader(ServiceQuote,CreateCustomer);
      ServiceQuote."Prices Including VAT".SETVALUE(TRUE);
      CreateServiceQuoteItemLine(ServiceQuote);
      DocumentNo2 := ServiceQuote."No.".VALUE; // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Quote;  // Assign global variable for page handler.
      COMMIT;
      ServiceQuote.ServItemLine.FIRST;
      ServiceQuote.ServItemLine.ServiceLines.INVOKE;
      LineWithoutAllowInvoiceDisc(ServiceLine."Document Type"::Quote,ServiceQuote."No.".VALUE);
      ServiceQuote.Statistics.INVOKE;

      // 3. Verify: Verify Service Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,QuoteLinesPageHandler,ChangeDiscountPageHandler)]
    PROCEDURE ChangeDiscountAmountQuote@56();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceQuote@1000 : TestPage 5964;
      CustomerNo@1002 : Code[20];
    BEGIN
      // Test creation of Service Quote with Allow Invoice Discount and change Invoice Discount Amount on Statistics Page.

      // 1. Setup: Find VAT Posting Setup, Create Customer, Customer Invoice Discount and Item.
      Initialize;
      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);

      // Assign global variable for page handler.
      No2 := LibraryInventory.CreateItemNo;
      Type2 := Type2::Item;

      // 2. Exercise: Create Service Quote, Calculate Invoice Discount, open Statistics Page, change
      // Invoice Discount Amount and again open Statistics Page.
      CreateServiceQuoteHeader(ServiceQuote,CustomerNo);
      CreateServiceQuoteItemLine(ServiceQuote);
      DocumentNo2 := ServiceQuote."No.".VALUE; // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Quote;  // Assign global variable for page handler.
      COMMIT;
      ServiceQuote.ServItemLine.FIRST;
      ServiceQuote.ServItemLine.ServiceLines.INVOKE;
      ServiceQuote.Statistics.INVOKE;
      UpdateDiscountAmount := TRUE;  // Assign global variable for page handler.
      ServiceQuote.Statistics.INVOKE;

      // 3. Verify: Verify Service Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,QuoteLinesPageHandler,ChangeTotalVATPageHandler)]
    PROCEDURE ChangeTotalVATQuote@12();
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceQuote@1000 : TestPage 5964;
      CustomerNo@1002 : Code[20];
    BEGIN
      // Test creation of Service Quote with Allow Invoice Discount and change Total Incl. VAT on Statistics Page.

      // 1. Setup: Find VAT Posting Setup, Create Customer, Customer Invoice Discount and Item.
      Initialize;
      CustomerNo := CreateCustomer;
      CreateCustomerInvoiceDiscount(CustomerNo);

      // Assign global variable for page handler.
      No2 := LibraryInventory.CreateItemNo;
      Type2 := Type2::Item;

      // 2. Exercise: Create Service Quote, Calculate Invoice Discount , open Statistics Page, change
      // Total Incl. VAT and again open Statistics Page.
      CreateServiceQuoteHeader(ServiceQuote,CustomerNo);
      CreateServiceQuoteItemLine(ServiceQuote);
      DocumentNo2 := ServiceQuote."No.".VALUE; // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Quote;  // Assign global variable for page handler.
      COMMIT;
      ServiceQuote.ServItemLine.FIRST;
      ServiceQuote.ServItemLine.ServiceLines.INVOKE;
      ServiceQuote.Statistics.INVOKE;
      UpdateTotalVAT := TRUE;  // Assign global variable for page handler.
      ServiceQuote.Statistics.INVOKE;

      // 3. Verify: Verify Service Order Statistics Page with details on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,QuoteLinesPageHandler,DocumentCreditLimitPageHandler)]
    PROCEDURE CreditLimitLCYOnQuote@91();
    VAR
      Customer@1002 : Record 18;
      ServiceQuote@1000 : TestPage 5964;
    BEGIN
      // Test creation of Service Quote and verify Credit limit on Statistics Page.

      // 1. Setup: Find VAT Posting Setup, Create Customer with Credit Limit(LCY) and G/L Account.
      Initialize;
      CreateCustomerWithCreditLimit(Customer);
      CreditLimitLCY := Customer."Credit Limit (LCY)";  // Assign global variable for page handler.

      // Assign global variable for page handler.
      No2 := LibraryERM.CreateGLAccountWithSalesSetup;
      Type2 := Type2::"G/L Account";

      // 2. Exercise: Create Service Quote with G/L Account and open Statistics Page.
      CreateServiceQuoteHeader(ServiceQuote,Customer."No.");
      CreateServiceQuoteItemLine(ServiceQuote);
      COMMIT;
      ServiceQuote.ServItemLine.FIRST;
      ServiceQuote.ServItemLine.ServiceLines.INVOKE;
      ServiceQuote.Statistics.INVOKE;

      // 3. Verify: Verify Credit Limit (LCY) in Service Statistics Page on Page handler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,ServiceLinesPageHandler,ShipAndInvoiceStrMenuHandler)]
    PROCEDURE ServiceShipmentStatistics@97();
    VAR
      ServiceShipmentLine@1011 : Record 5991;
      ServiceOrder@1002 : TestPage 5900;
      PostedServiceShipment@1008 : TestPage 5975;
      ServiceShipmentStatistics@1007 : TestPage 6032;
      DocumentNo@1009 : Code[20];
    BEGIN
      // Test creation of Service Order with Item, post Service Order and verify Service Shipment Statistics Page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup, Find VAT Posting Setup and Create Item.
      Initialize;

      // Assign global variable for page handler.
      No2 := LibraryInventory.CreateItemNo;
      Type2 := Type2::Item;

      // 2. Exercise: Create Customer, Service Order with Item, Post, Find Posted Service Shipment and open Statistics.
      CreateServiceOrderHeader(ServiceOrder,CreateCustomer);
      CreateServiceOrderItemLine(ServiceOrder);
      DocumentNo := ServiceOrder."No.".VALUE;
      COMMIT;
      ServiceOrder.ServItemLines.FIRST;
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      ServiceOrder.Post.INVOKE;

      PostedServiceShipment.OPENVIEW;
      PostedServiceShipment.FILTER.SETFILTER("No.",FindServiceShipmentHeader(DocumentNo));
      ServiceShipmentStatistics.TRAP;
      PostedServiceShipment."Page Service Shipment Statistics".INVOKE;

      // 3. Verify: Verify Quantity on Service Shipment Statistics Page.
      ServiceShipmentLine.SETRANGE("Document No.",PostedServiceShipment."No.".VALUE);
      ServiceShipmentLine.FINDFIRST;
      ServiceShipmentStatistics.LineQty.ASSERTEQUALS(ServiceShipmentLine.Quantity);
    END;

    [Test]
    PROCEDURE PostedInvoiceStatistics@99();
    VAR
      ServiceLine@1003 : Record 5902;
      ServiceInvoiceLine@1009 : Record 5993;
      ServiceInvoice@1001 : TestPage 5933;
      PostedServiceInvoice@1008 : TestPage 5978;
      ServiceInvoiceStatistics@1007 : TestPage 6033;
      DocumentNo@1006 : Code[20];
    BEGIN
      // Test creation of Service Invoice with Item, post Service Invoice and verify Service Invoice Statistics Page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup and Find VAT Posting Setup.
      Initialize;

      // 2. Exercise: Create Customer, Item, Service Invoice with Item, Find Posted Service Invoice and  open Statistics Page.
      CreateServiceInvoiceHeader(ServiceInvoice,CreateCustomer);
      DocumentNo := ServiceInvoice."No.".VALUE;
      CreateServiceInvoiceLine(ServiceInvoice,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      PostServiceInvoice(ServiceInvoice);

      PostedServiceInvoice.OPENVIEW;
      PostedServiceInvoice.FILTER.SETFILTER("No.",FindServiceInvoiceHeader(DocumentNo));
      ServiceInvoiceStatistics.TRAP;
      PostedServiceInvoice.Statistics.INVOKE;

      // 3. Verify: Verify Service Invoice Statistics Page with details.
      ServiceInvoiceLine.SETRANGE("Document No.",PostedServiceInvoice."No.".VALUE);
      ServiceInvoiceLine.FINDFIRST;

      ServiceInvoiceStatistics.Amount.ASSERTEQUALS(ServiceInvoiceLine.Amount);
    END;

    [Test]
    PROCEDURE CreditLimitLCYOnPostedInvoice@102();
    VAR
      ServiceLine@1007 : Record 5902;
      Customer@1003 : Record 18;
      ServiceInvoice@1005 : TestPage 5933;
      PostedServiceInvoice@1001 : TestPage 5978;
      ServiceInvoiceStatistics@1000 : TestPage 6033;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Test creation of Service Invoice, post Service Invoice and verify Credit limit on Service Invoice Statistics Page.

      // 1. Setup: Update Stockout Warning on Sales & Receivables Setup, Find VAT Posting Setup and Create Customer with Credit Limit.
      Initialize;
      CreateCustomerWithCreditLimit(Customer);

      // 2. Exercise: Create Service Invoice with Item, post,Find Posted Service Invoice and open Statistic Page.
      CreateServiceInvoiceHeader(ServiceInvoice,Customer."No.");
      DocumentNo := ServiceInvoice."No.".VALUE;
      CreateServiceInvoiceLine(ServiceInvoice,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      PostServiceInvoice(ServiceInvoice);

      PostedServiceInvoice.OPENVIEW;
      PostedServiceInvoice.FILTER.SETFILTER("No.",FindServiceInvoiceHeader(DocumentNo));
      ServiceInvoiceStatistics.TRAP;
      PostedServiceInvoice.Statistics.INVOKE;

      // 3. Verify: Verify Credit Limit (LCY) on Service Invoice Statistics Page.
      ServiceInvoiceStatistics.CreditLimitLCY.ASSERTEQUALS(Customer."Credit Limit (LCY)");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE PostedCreditMemoStatistics@103();
    VAR
      ServiceLine@1002 : Record 5902;
      ServiceCrMemoLine@1008 : Record 5995;
      ServiceCreditMemo@1000 : TestPage 5935;
      PostedServiceCreditMemo@1007 : TestPage 5972;
      ServiceCreditMemoStatistics@1006 : TestPage 6034;
      DocumentNo@1004 : Code[20];
    BEGIN
      // Test creation of Service Credit Memo with Item, post Service Credit Memo and verify Service Credit Memo Statistics Page.

      // 1. Setup: Find VAT Posting Setup.
      Initialize;

      // 2. Exercise: Create Customer,Item,Service Credit Memo with Item, post, Find Posted Service Credit Memo and open Statistics Page.
      CreateServiceCreditMemoHeader(ServiceCreditMemo,CreateCustomer);
      DocumentNo := ServiceCreditMemo."No.".VALUE;
      CreateServiceCreditMemoLine(ServiceCreditMemo,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      ServiceCreditMemo.Post.INVOKE;

      PostedServiceCreditMemo.OPENVIEW;
      PostedServiceCreditMemo.FILTER.SETFILTER("No.",FindServiceCreditMemoHeader(DocumentNo));
      ServiceCreditMemoStatistics.TRAP;
      PostedServiceCreditMemo.Statistics.INVOKE;

      // 3. Verify: Verify Service Credit Memo Statistics Page with details.
      ServiceCrMemoLine.SETRANGE("Document No.",PostedServiceCreditMemo."No.".VALUE);
      ServiceCrMemoLine.FINDFIRST;
      ServiceCreditMemoStatistics.Amount.ASSERTEQUALS(ServiceCrMemoLine.Amount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE CreditLimitLCYOnPostedMemo@104();
    VAR
      ServiceLine@1006 : Record 5902;
      Customer@1002 : Record 18;
      ServiceCreditMemo@1004 : TestPage 5935;
      PostedServiceCreditMemo@1001 : TestPage 5972;
      ServiceCreditMemoStatistics@1000 : TestPage 6034;
      DocumentNo@1003 : Code[20];
    BEGIN
      // Test creation of Service Credit Memo, post Service Credit Memo and verify Credit limit on Service Credit Memo Statistics Page.

      // 1. Setup: Find VAT Posting Setup and Create Customer with Credit Limit.
      Initialize;
      CreateCustomerWithCreditLimit(Customer);

      // 2. Exercise: Create Item, Service Credit Memo with Item, post,Find Posted Service Credit Memo and open Statistics Page.
      CreateServiceCreditMemoHeader(ServiceCreditMemo,Customer."No.");
      DocumentNo := ServiceCreditMemo."No.".VALUE;
      CreateServiceCreditMemoLine(ServiceCreditMemo,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      ServiceCreditMemo.Post.INVOKE;

      PostedServiceCreditMemo.OPENVIEW;
      PostedServiceCreditMemo.FILTER.SETFILTER("No.",FindServiceCreditMemoHeader(DocumentNo));
      ServiceCreditMemoStatistics.TRAP;
      PostedServiceCreditMemo.Statistics.INVOKE;

      // 3. Verify: Verify Credit Limit (LCY) on Service Credit Memo Statistics Page.
      ServiceCreditMemoStatistics.CreditLimitLCY.ASSERTEQUALS(Customer."Credit Limit (LCY)");
    END;

    LOCAL PROCEDURE Initialize@4();
    BEGIN
      InitVariables;
      LibrarySetupStorage.Restore;

      IF isInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibrarySales.SetStockoutWarning(FALSE);

      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateCustomer@42() : Code[20];
    BEGIN
      EXIT(LibrarySales.CreateCustomerNo);
    END;

    LOCAL PROCEDURE CreateCustomerInvoiceDiscount@11(CustomerNo@1001 : Code[20]);
    VAR
      CustInvoiceDisc@1000 : Record 19;
      LibraryERM@1002 : Codeunit 131300;
    BEGIN
      LibraryERM.CreateInvDiscForCustomer(CustInvoiceDisc,CustomerNo,'',0);  // Set Zero for Charge Amount.
      CustInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandDec(50,2));  // Take Random Discount.
      CustInvoiceDisc.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithCreditLimit@19(VAR Customer@1002 : Record 18);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Credit Limit (LCY)",LibraryRandom.RandDec(100,2)); // Take Random Credit Limit (LCY).
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceCreditMemoHeader@36(VAR ServiceCreditMemo@1000 : TestPage 5935;CustomerNo@1001 : Code[20]);
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceCreditMemoNo@1003 : Code[20];
    BEGIN
      ServiceCreditMemoNo := LibraryService.CreateServiceCreditMemoHeaderUsingPage;
      COMMIT;

      CLEAR(ServiceCreditMemo);
      ServiceCreditMemo.OPENEDIT;
      ServiceCreditMemo.FILTER.SETFILTER("Document Type",FORMAT(ServiceHeader."Document Type"::"Credit Memo"));
      ServiceCreditMemo.FILTER.SETFILTER("No.",ServiceCreditMemoNo);
      ServiceCreditMemo."Customer No.".SETVALUE(CustomerNo);
    END;

    LOCAL PROCEDURE CreateServiceCreditMemoLine@35(VAR ServiceCreditMemo@1000 : TestPage 5935;Type@1002 : Option;No@1001 : Code[20]);
    BEGIN
      ServiceCreditMemo.ServLines.Type.SETVALUE(Type);
      ServiceCreditMemo.ServLines."No.".SETVALUE(No);

      // Take Random Quantity and Unit Price.
      ServiceCreditMemo.ServLines.Quantity.SETVALUE(LibraryRandom.RandDec(10,2));
      ServiceCreditMemo.ServLines."Unit Price".SETVALUE(LibraryRandom.RandDec(100,2));
      ServiceCreditMemo.ServLines.NEW;
    END;

    LOCAL PROCEDURE CreateServiceLine@54(VAR ServiceLines@1000 : TestPage 5905;Type@1002 : Option;No@1001 : Code[20]);
    BEGIN
      ServiceLines.Type.SETVALUE(Type);
      ServiceLines."No.".SETVALUE(No);

      // Take Random Quantity and Unit Price.
      ServiceLines.Quantity.SETVALUE(2 * LibraryRandom.RandDec(10,2));
      ServiceLines."Unit Price".SETVALUE(LibraryRandom.RandDec(100,2));
      ServiceLines.NEW;
    END;

    LOCAL PROCEDURE CreateServiceInvoiceHeader@52(VAR ServiceInvoice@1000 : TestPage 5933;CustomerNo@1001 : Code[20]);
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceInvoiceNo@1003 : Code[20];
    BEGIN
      ServiceInvoice.OPENNEW;
      ServiceInvoice."Customer No.".ACTIVATE;
      ServiceInvoiceNo := ServiceInvoice."No.".VALUE;
      ServiceInvoice.OK.INVOKE;
      COMMIT;

      CLEAR(ServiceInvoice);
      ServiceInvoice.OPENEDIT;
      ServiceInvoice.FILTER.SETFILTER("Document Type",FORMAT(ServiceHeader."Document Type"::Invoice));
      ServiceInvoice.FILTER.SETFILTER("No.",ServiceInvoiceNo);
      ServiceInvoice."Customer No.".SETVALUE(CustomerNo);
    END;

    LOCAL PROCEDURE CreateServiceInvoiceLine@64(VAR ServiceInvoice@1000 : TestPage 5933;Type@1002 : Option;No@1001 : Code[20]);
    BEGIN
      ServiceInvoice.ServLines.Type.SETVALUE(Type);
      ServiceInvoice.ServLines."No.".SETVALUE(No);

      // Take Random Quantity and Unit Price.
      ServiceInvoice.ServLines.Quantity.SETVALUE(LibraryRandom.RandDec(10,2));
      ServiceInvoice.ServLines."Unit Price".SETVALUE(LibraryRandom.RandDec(100,2));
      ServiceInvoice.ServLines.NEW;
    END;

    LOCAL PROCEDURE CreateServiceOrderHeader@51(VAR ServiceOrder@1000 : TestPage 5900;CustomerNo@1001 : Code[20]);
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceOrderNo@1003 : Code[20];
    BEGIN
      ServiceOrderNo := LibraryService.CreateServiceOrderHeaderUsingPage;
      COMMIT;

      CLEAR(ServiceOrder);
      ServiceOrder.OPENEDIT;
      ServiceOrder.FILTER.SETFILTER("Document Type",FORMAT(ServiceHeader."Document Type"::Order));
      ServiceOrder.FILTER.SETFILTER("No.",ServiceOrderNo);
      ServiceOrder."Customer No.".SETVALUE(CustomerNo);
    END;

    LOCAL PROCEDURE CreateServiceOrderItemLine@37(VAR ServiceOrder@1000 : TestPage 5900);
    BEGIN
      ServiceOrder.ServItemLines.Description.SETVALUE(ServiceOrder."No.".VALUE);
      ServiceOrder.ServItemLines.NEW;
    END;

    LOCAL PROCEDURE CreateServiceQuoteHeader@118(VAR ServiceQuote@1000 : TestPage 5964;CustomerNo@1001 : Code[20]);
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceQuoteNo@1003 : Code[20];
    BEGIN
      ServiceQuote.OPENNEW;
      ServiceQuote."Customer No.".ACTIVATE;
      ServiceQuoteNo := ServiceQuote."No.".VALUE;
      ServiceQuote.OK.INVOKE;
      COMMIT;

      CLEAR(ServiceQuote);
      ServiceQuote.OPENEDIT;
      ServiceQuote.FILTER.SETFILTER("Document Type",FORMAT(ServiceHeader."Document Type"::Quote));
      ServiceQuote.FILTER.SETFILTER("No.",ServiceQuoteNo);
      ServiceQuote."Customer No.".SETVALUE(CustomerNo);
    END;

    LOCAL PROCEDURE CreateServiceQuoteItemLine@101(VAR ServiceQuote@1000 : TestPage 5964);
    BEGIN
      ServiceQuote.ServItemLine.Description.SETVALUE(ServiceQuote."No.".VALUE);
      ServiceQuote.ServItemLine.NEW;
    END;

    LOCAL PROCEDURE CreateServiceQuoteLine@100(VAR ServiceQuoteLines@1000 : TestPage 5966;Type@1002 : Option;No@1001 : Code[20]);
    BEGIN
      ServiceQuoteLines.Type.SETVALUE(Type);
      ServiceQuoteLines."No.".SETVALUE(No);

      // Take Random Quantity and Unit Price.
      ServiceQuoteLines.Quantity.SETVALUE(LibraryRandom.RandDec(10,2));
      ServiceQuoteLines."Unit Price".SETVALUE(LibraryRandom.RandDec(100,2));
      ServiceQuoteLines.NEW;
    END;

    LOCAL PROCEDURE CreateAndPostServiceOrderWithInvoiceDiscountAmount@110(CustomerNo@1002 : Code[20];VAR InvoiceDiscountAmount@1003 : Decimal);
    VAR
      ServiceLine@1000 : Record 5902;
      ServiceOrder@1001 : TestPage 5900;
    BEGIN
      CreateServiceOrderHeader(ServiceOrder,CustomerNo);
      CreateServiceOrderItemLine(ServiceOrder);
      DocumentNo2 := ServiceOrder."No.".VALUE;  // Assign global variable for page handler.
      DocumentType2 := ServiceLine."Document Type"::Order;  // Assign global variable for page handler.
      COMMIT;
      ServiceOrder.ServItemLines.FIRST;
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      ServiceOrder.Statistics.INVOKE;
      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      InvoiceDiscountAmount := ServiceLine."Inv. Discount Amount";
      ServiceOrder.Post.INVOKE;
    END;

    LOCAL PROCEDURE FindServiceLine@16(VAR ServiceLine@1002 : Record 5902;DocumentType@1000 : Option;DocumentNo@1001 : Code[20]);
    BEGIN
      ServiceLine.SETRANGE("Document Type",DocumentType);
      ServiceLine.SETRANGE("Document No.",DocumentNo);
      ServiceLine.FINDSET;
    END;

    LOCAL PROCEDURE FilterServiceLine@43(VAR ServiceLine@1002 : Record 5902;DocumentType@1000 : Option;DocumentNo@1001 : Code[20]);
    BEGIN
      ServiceLine.SETRANGE("Document Type",DocumentType);
      ServiceLine.SETRANGE("Document No.",DocumentNo);
    END;

    LOCAL PROCEDURE FindServiceCreditMemoHeader@150(PreAssignedNo@1000 : Code[20]) : Code[20];
    VAR
      ServiceCrMemoHeader@1001 : Record 5994;
    BEGIN
      ServiceCrMemoHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      ServiceCrMemoHeader.FINDFIRST;
      EXIT(ServiceCrMemoHeader."No.");
    END;

    LOCAL PROCEDURE FindServiceShipmentHeader@151(OrderNo@1000 : Code[20]) : Code[20];
    VAR
      ServiceShipmentHeader@1001 : Record 5990;
    BEGIN
      ServiceShipmentHeader.SETRANGE("Order No.",OrderNo);
      ServiceShipmentHeader.FINDFIRST;
      EXIT(ServiceShipmentHeader."No.");
    END;

    LOCAL PROCEDURE FindServiceInvoiceHeader@157(PreAssignedNo@1000 : Code[20]) : Code[20];
    VAR
      ServiceInvoiceHeader@1001 : Record 5992;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      ServiceInvoiceHeader.FINDFIRST;
      EXIT(ServiceInvoiceHeader."No.");
    END;

    LOCAL PROCEDURE GetAmountRoundingPrecision@95() : Decimal;
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      EXIT(GeneralLedgerSetup."Amount Rounding Precision");
    END;

    LOCAL PROCEDURE InitVariables@81();
    BEGIN
      CLEAR(Type2);
      CLEAR(DocumentType2);
      No2 := '';
      ItemNo := '';
      GLAccountNo := '';
      ResourceNo := '';
      CostCode := '';
      DocumentNo2 := '';
      CreditLimitLCY := 0;
      UpdateDiscountAmount := FALSE;
      UpdateTotalVAT := FALSE;
    END;

    LOCAL PROCEDURE LineWithoutAllowInvoiceDisc@25(DocumentType@1002 : Option;DocumentNo@1001 : Code[20]);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,DocumentType,DocumentNo);
      REPEAT
        ServiceLine.VALIDATE("Allow Invoice Disc.",FALSE);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE PostServiceInvoice@113(ServiceInvoice@1000 : TestPage 5933);
    VAR
      ServiceHeader@1001 : Record 5900;
      Ship@1002 : Boolean;
      Consume@1003 : Boolean;
      Invoice@1004 : Boolean;
    BEGIN
      ServiceHeader.GET(ServiceHeader."Document Type"::Invoice,ServiceInvoice."No.".VALUE);
      Ship := FALSE;
      Consume := FALSE;
      Invoice := FALSE;
      LibraryService.PostServiceOrder(ServiceHeader,Ship,Consume,Invoice);
    END;

    LOCAL PROCEDURE UpdateDiscountAmountOrder@57(ServiceOrderStatistics@1001 : TestPage 5914);
    VAR
      InvoiceDiscountAmount@1000 : Decimal;
    BEGIN
      EVALUATE(InvoiceDiscountAmount,ServiceOrderStatistics."Inv. Discount Amount_General".VALUE);

      // Take Random for Invoice Discount Amount.
      ServiceOrderStatistics."Inv. Discount Amount_General".SETVALUE(
        InvoiceDiscountAmount + LibraryRandom.RandDec(5,2));
    END;

    LOCAL PROCEDURE UpdateDiscountAmountStatistics@38(ServiceStatistics@1001 : TestPage 6030);
    VAR
      InvoiceDiscountAmount@1000 : Decimal;
    BEGIN
      EVALUATE(InvoiceDiscountAmount,ServiceStatistics."Inv. Discount Amount_General".VALUE);

      // Take Random for Invoice Discount Amount.
      ServiceStatistics."Inv. Discount Amount_General".SETVALUE(
        InvoiceDiscountAmount + LibraryRandom.RandDec(5,2));
    END;

    LOCAL PROCEDURE UpdateQuantityToShipLine@78(DocumentNo@1001 : Code[20]);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,ServiceLine."Document Type"::Order,DocumentNo);
      ServiceLine.VALIDATE("Qty. to Ship",ServiceLine.Quantity / 2);  // Dividing by 2 to take partial Qty. to Ship.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityToInvoiceLine@79(DocumentNo@1001 : Code[20]);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,ServiceLine."Document Type"::Order,DocumentNo);
      ServiceLine.VALIDATE("Qty. to Invoice",ServiceLine.Quantity / 2);  // Dividing by 2 to take partial Qty. to Invoice.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateTotalVATOrderStatistics@58(ServiceOrderStatistics@1001 : TestPage 5914);
    VAR
      TotalInclVAT@1000 : Decimal;
    BEGIN
      EVALUATE(TotalInclVAT,ServiceOrderStatistics."Total Incl. VAT_General".VALUE);

      // Take Random for Total Incl. VAT.
      ServiceOrderStatistics."Total Incl. VAT_General".SETVALUE(TotalInclVAT + LibraryRandom.RandDec(5,2));
    END;

    LOCAL PROCEDURE UpdateTotalVATStatistics@39(ServiceStatistics@1001 : TestPage 6030);
    VAR
      TotalInclVAT@1000 : Decimal;
    BEGIN
      EVALUATE(TotalInclVAT,ServiceStatistics."Total Incl. VAT_General".VALUE);

      // Take Random for Total Incl. VAT.
      ServiceStatistics."Total Incl. VAT_General".SETVALUE(TotalInclVAT + LibraryRandom.RandDec(5,2));
    END;

    LOCAL PROCEDURE VerifyOrderLineItems@70(ServiceOrderStatistics@1000 : TestPage 5914;DocumentNo@1001 : Code[20]);
    VAR
      ServiceLine@1002 : Record 5902;
      AmountItems@1008 : Decimal;
      VATAmountItems@1007 : Decimal;
      TotalInclVATItems@1006 : Decimal;
      SalesLCYItems@1005 : Decimal;
      InvDiscountAmountItems@1004 : Decimal;
      AmountRoundingPrecision@1011 : Decimal;
    BEGIN
      AmountRoundingPrecision := 10 * GetAmountRoundingPrecision;  // Using multiplication of 10 for rounding.
      FilterServiceLine(ServiceLine,ServiceLine."Document Type"::Order,DocumentNo);
      ServiceLine.SETRANGE(Type,ServiceLine.Type::Item);
      ServiceLine.FINDFIRST;

      EVALUATE(AmountItems,ServiceOrderStatistics.Amount_Items.VALUE);
      EVALUATE(VATAmountItems,ServiceOrderStatistics."VAT Amount_Items".VALUE);
      EVALUATE(TotalInclVATItems,ServiceOrderStatistics."Total Incl. VAT_Items".VALUE);
      EVALUATE(SalesLCYItems,ServiceOrderStatistics."Sales (LCY)_Items".VALUE);
      EVALUATE(InvDiscountAmountItems,ServiceOrderStatistics."Inv. Discount Amount_Items".VALUE);

      Assert.AreNearlyEqual(
        ServiceLine.Amount + ServiceLine."Inv. Discount Amount",AmountItems,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,AmountItems,ServiceLine.Amount + ServiceLine."Inv. Discount Amount"));
      Assert.AreNearlyEqual(
        ServiceLine."Amount Including VAT" - ServiceLine.Amount,VATAmountItems,AmountRoundingPrecision,
        STRSUBSTNO(VATAmountError,VATAmountItems,ServiceLine."Amount Including VAT" - ServiceLine.Amount));
      Assert.AreNearlyEqual(
        ServiceLine."Amount Including VAT",TotalInclVATItems,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,TotalInclVATItems,ServiceLine."Amount Including VAT"));
      Assert.AreNearlyEqual(
        ServiceLine.Amount,SalesLCYItems,AmountRoundingPrecision,
        STRSUBSTNO(SalesLCYError,SalesLCYItems,ServiceLine.Amount));
      Assert.AreNearlyEqual(
        ServiceLine."Inv. Discount Amount",InvDiscountAmountItems,AmountRoundingPrecision,
        STRSUBSTNO(InvoiceDiscountAmountError,InvDiscountAmountItems,ServiceLine."Inv. Discount Amount"));
    END;

    LOCAL PROCEDURE VerifyOrderLineResources@69(ServiceOrderStatistics@1000 : TestPage 5914;DocumentNo@1002 : Code[20]);
    VAR
      ServiceLine@1001 : Record 5902;
      AmountResources@1008 : Decimal;
      VATAmountResources@1007 : Decimal;
      TotalInclVATResources@1006 : Decimal;
      SalesLCYResources@1005 : Decimal;
      InvDiscountAmountResources@1004 : Decimal;
      AmountRoundingPrecision@1011 : Decimal;
    BEGIN
      AmountRoundingPrecision := 10 * GetAmountRoundingPrecision;  // Using multiplication of 10 for rounding.
      FilterServiceLine(ServiceLine,ServiceLine."Document Type"::Order,DocumentNo);
      ServiceLine.SETRANGE(Type,ServiceLine.Type::Resource);
      ServiceLine.FINDFIRST;

      EVALUATE(AmountResources,ServiceOrderStatistics.Amount_Resources.VALUE);
      EVALUATE(VATAmountResources,ServiceOrderStatistics."VAT Amount_Resources".VALUE);
      EVALUATE(TotalInclVATResources,ServiceOrderStatistics."Total Incl. VAT_Resources".VALUE);
      EVALUATE(SalesLCYResources,ServiceOrderStatistics."Sales (LCY)_Resources".VALUE);
      EVALUATE(InvDiscountAmountResources,ServiceOrderStatistics."Inv. Discount Amount_Resources".VALUE);

      Assert.AreNearlyEqual(
        ServiceLine.Amount + ServiceLine."Inv. Discount Amount",AmountResources,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,AmountResources,ServiceLine.Amount + ServiceLine."Inv. Discount Amount"));
      Assert.AreNearlyEqual(
        ServiceLine."Amount Including VAT" - ServiceLine.Amount,VATAmountResources,AmountRoundingPrecision,
        STRSUBSTNO(VATAmountError,VATAmountResources,ServiceLine."Amount Including VAT" - ServiceLine.Amount));
      Assert.AreNearlyEqual(
        ServiceLine."Amount Including VAT",TotalInclVATResources,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,TotalInclVATResources,ServiceLine."Amount Including VAT"));
      Assert.AreNearlyEqual(
        ServiceLine.Amount,SalesLCYResources,AmountRoundingPrecision,
        STRSUBSTNO(SalesLCYError,SalesLCYResources,ServiceLine.Amount));
      Assert.AreNearlyEqual(
        ServiceLine."Inv. Discount Amount",InvDiscountAmountResources,AmountRoundingPrecision,
        STRSUBSTNO(InvoiceDiscountAmountError,InvDiscountAmountResources,ServiceLine."Inv. Discount Amount"));
    END;

    LOCAL PROCEDURE VerifyOrderLineCostGLAccount@68(ServiceOrderStatistics@1000 : TestPage 5914;DocumentNo@1002 : Code[20]);
    VAR
      ServiceLine@1001 : Record 5902;
      AmountIncludingVAT@1003 : Decimal;
      Amount@1004 : Decimal;
      InvDiscountAmount@1005 : Decimal;
      AmountCosts@1007 : Decimal;
      VATAmountCosts@1008 : Decimal;
      TotalInclVATCosts@1009 : Decimal;
      SalesLCYCosts@1010 : Decimal;
      InvDiscountAmountCosts@1011 : Decimal;
      AmountRoundingPrecision@1013 : Decimal;
    BEGIN
      AmountRoundingPrecision := 10 * GetAmountRoundingPrecision;  // Using multiplication of 10 for rounding.
      FilterServiceLine(ServiceLine,ServiceLine."Document Type"::Order,DocumentNo);
      ServiceLine.SETFILTER(Type,'%1|%2',ServiceLine.Type::Cost,ServiceLine.Type::"G/L Account");
      ServiceLine.FINDSET;
      REPEAT
        AmountIncludingVAT += ServiceLine."Amount Including VAT";
        Amount += ServiceLine.Amount;
        InvDiscountAmount += ServiceLine."Inv. Discount Amount";
      UNTIL ServiceLine.NEXT = 0;

      EVALUATE(AmountCosts,ServiceOrderStatistics.Amount_Costs.VALUE);
      EVALUATE(VATAmountCosts,ServiceOrderStatistics."VAT Amount_Costs".VALUE);
      EVALUATE(TotalInclVATCosts,ServiceOrderStatistics."Total Incl. VAT_Costs".VALUE);
      EVALUATE(SalesLCYCosts,ServiceOrderStatistics."Sales (LCY)_Costs".VALUE);
      EVALUATE(InvDiscountAmountCosts,ServiceOrderStatistics."Inv. Discount Amount_Costs".VALUE);

      Assert.AreNearlyEqual(
        Amount + InvDiscountAmount,AmountCosts,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,AmountCosts,Amount + InvDiscountAmount));
      Assert.AreNearlyEqual(
        AmountIncludingVAT - Amount,VATAmountCosts,AmountRoundingPrecision,
        STRSUBSTNO(VATAmountError,VATAmountCosts,AmountIncludingVAT - Amount));
      Assert.AreNearlyEqual(
        AmountIncludingVAT,TotalInclVATCosts,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,TotalInclVATCosts,AmountIncludingVAT));
      Assert.AreNearlyEqual(Amount,SalesLCYCosts,AmountRoundingPrecision,STRSUBSTNO(SalesLCYError,SalesLCYCosts,Amount));
      Assert.AreNearlyEqual(
        InvDiscountAmount,InvDiscountAmountCosts,AmountRoundingPrecision,
        STRSUBSTNO(InvoiceDiscountAmountError,InvDiscountAmountCosts,InvDiscountAmount));
    END;

    LOCAL PROCEDURE VerifyOrderStatistics@76(ServiceOrderStatistics@1000 : TestPage 5914;ServiceLine@1001 : Record 5902);
    VAR
      AmountGeneral@1006 : Decimal;
      VATAmountGeneral@1005 : Decimal;
      TotalInclVATGeneral@1004 : Decimal;
      SalesLCYGeneral@1003 : Decimal;
      AmountRoundingPrecision@1008 : Decimal;
    BEGIN
      AmountRoundingPrecision := 10 * GetAmountRoundingPrecision;  // Using multiplication of 10 for rounding.
      EVALUATE(AmountGeneral,ServiceOrderStatistics.Amount_General.VALUE);
      EVALUATE(VATAmountGeneral,ServiceOrderStatistics."VAT Amount_General".VALUE);
      EVALUATE(TotalInclVATGeneral,ServiceOrderStatistics."Total Incl. VAT_General".VALUE);
      EVALUATE(SalesLCYGeneral,ServiceOrderStatistics."Sales (LCY)_General".VALUE);

      Assert.AreNearlyEqual(
        ServiceLine."Amount Including VAT",AmountGeneral,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,AmountGeneral,ServiceLine."Amount Including VAT"));
      Assert.AreNearlyEqual(
        ServiceLine."Amount Including VAT" - ServiceLine.Amount,VATAmountGeneral,AmountRoundingPrecision,
        STRSUBSTNO(VATAmountError,VATAmountGeneral,ServiceLine."Amount Including VAT" - ServiceLine.Amount));
      Assert.AreNearlyEqual(
        ServiceLine.Amount,TotalInclVATGeneral,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,TotalInclVATGeneral,ServiceLine.Amount));
      Assert.AreNearlyEqual(
        ServiceLine.Amount,SalesLCYGeneral,AmountRoundingPrecision,
        STRSUBSTNO(SalesLCYError,SalesLCYGeneral,ServiceLine.Amount));
    END;

    LOCAL PROCEDURE VerifyOrderStatisticsDetails@59(ServiceOrderStatistics@1000 : TestPage 5914;ServiceLine@1002 : Record 5902);
    VAR
      AmountDetails@1006 : Decimal;
      VATAmountDetails@1005 : Decimal;
      TotalInclVATDetails@1004 : Decimal;
      SalesLCYDetails@1003 : Decimal;
      InvDiscountAmountDetails@1001 : Decimal;
      AmountRoundingPrecision@1009 : Decimal;
      Amount@1012 : Decimal;
      VATAmount@1011 : Decimal;
      AmountIncludingVAT@1010 : Decimal;
      SalesLCY@1008 : Decimal;
      InvoiceDiscountAmount@1007 : Decimal;
      QuantityPer@1013 : Decimal;
    BEGIN
      AmountRoundingPrecision := 10 * GetAmountRoundingPrecision;  // Using multiplication of 10 for rounding.
      EVALUATE(AmountDetails,ServiceOrderStatistics.Amount_Invoicing.VALUE);
      EVALUATE(VATAmountDetails,ServiceOrderStatistics."VAT Amount_Invoicing".VALUE);
      EVALUATE(TotalInclVATDetails,ServiceOrderStatistics."Total Incl. VAT_Invoicing".VALUE);
      EVALUATE(SalesLCYDetails,ServiceOrderStatistics."Sales (LCY)_Invoicing".VALUE);
      EVALUATE(InvDiscountAmountDetails,ServiceOrderStatistics."Inv. Discount Amount_Invoicing".VALUE);

      QuantityPer := ServiceLine."Qty. to Invoice" / ServiceLine.Quantity;
      Amount := ROUND((ServiceLine.Amount + ServiceLine."Inv. Discount Amount") * QuantityPer,AmountRoundingPrecision);
      VATAmount := ROUND((ServiceLine."Amount Including VAT" - ServiceLine.Amount) * QuantityPer,AmountRoundingPrecision);
      AmountIncludingVAT := ROUND(ServiceLine."Amount Including VAT" * QuantityPer,AmountRoundingPrecision);
      SalesLCY := ROUND(ServiceLine.Amount * QuantityPer,AmountRoundingPrecision);
      InvoiceDiscountAmount := ROUND(ServiceLine."Inv. Discount Amount" * QuantityPer,AmountRoundingPrecision);

      Assert.AreNearlyEqual(Amount,AmountDetails,AmountRoundingPrecision,STRSUBSTNO(AmountError,AmountDetails,Amount));
      Assert.AreNearlyEqual(VATAmount,VATAmountDetails,AmountRoundingPrecision,STRSUBSTNO(VATAmountError,VATAmountDetails,VATAmount));
      Assert.AreNearlyEqual(
        AmountIncludingVAT,TotalInclVATDetails,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,TotalInclVATDetails,AmountIncludingVAT));
      Assert.AreNearlyEqual(SalesLCY,SalesLCYDetails,AmountRoundingPrecision,STRSUBSTNO(SalesLCYError,SalesLCYDetails,SalesLCY));
      Assert.AreNearlyEqual(
        InvoiceDiscountAmount,InvDiscountAmountDetails,AmountRoundingPrecision,
        STRSUBSTNO(InvoiceDiscountAmountError,InvDiscountAmountDetails,InvoiceDiscountAmount ));
      ServiceOrderStatistics.Quantity_Consuming.ASSERTEQUALS(ServiceLine."Qty. to Consume");
    END;

    LOCAL PROCEDURE VerifyOrderStatisticsGeneral@55(ServiceOrderStatistics@1000 : TestPage 5914;ServiceLine@1002 : Record 5902);
    VAR
      AmountGeneral@1006 : Decimal;
      VATAmountGeneral@1005 : Decimal;
      TotalInclVATGeneral@1004 : Decimal;
      SalesLCYGeneral@1003 : Decimal;
      InvDiscountAmountGeneral@1001 : Decimal;
      AmountRoundingPrecision@1009 : Decimal;
    BEGIN
      AmountRoundingPrecision := 10 * GetAmountRoundingPrecision;  // Using multiplication of 10 for rounding.
      EVALUATE(AmountGeneral,ServiceOrderStatistics.Amount_General.VALUE);
      EVALUATE(VATAmountGeneral,ServiceOrderStatistics."VAT Amount_General".VALUE);
      EVALUATE(TotalInclVATGeneral,ServiceOrderStatistics."Total Incl. VAT_General".VALUE);
      EVALUATE(SalesLCYGeneral,ServiceOrderStatistics."Sales (LCY)_General".VALUE);
      EVALUATE(InvDiscountAmountGeneral,ServiceOrderStatistics."Inv. Discount Amount_General".VALUE);

      Assert.AreNearlyEqual(
        ServiceLine.Amount + ServiceLine."Inv. Discount Amount",AmountGeneral,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,AmountGeneral,ServiceLine.Amount + ServiceLine."Inv. Discount Amount"));
      Assert.AreNearlyEqual(
        ServiceLine."Amount Including VAT" - ServiceLine.Amount,VATAmountGeneral,AmountRoundingPrecision,
        STRSUBSTNO(VATAmountError,VATAmountGeneral,ServiceLine."Amount Including VAT" - ServiceLine.Amount));
      Assert.AreNearlyEqual(
        ServiceLine."Amount Including VAT",TotalInclVATGeneral,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,TotalInclVATGeneral,ServiceLine."Amount Including VAT"));
      Assert.AreNearlyEqual(
        ServiceLine.Amount,SalesLCYGeneral,AmountRoundingPrecision,
        STRSUBSTNO(SalesLCYError,SalesLCYGeneral,ServiceLine.Amount));
      Assert.AreNearlyEqual(
        ServiceLine."Inv. Discount Amount",InvDiscountAmountGeneral,AmountRoundingPrecision,
        STRSUBSTNO(InvoiceDiscountAmountError,InvDiscountAmountGeneral,ServiceLine."Inv. Discount Amount"));
    END;

    LOCAL PROCEDURE VerifyOrderStatisticsShipping@92(ServiceOrderStatistics@1000 : TestPage 5914;ServiceLine@1002 : Record 5902);
    VAR
      AmountShipping@1006 : Decimal;
      VATAmountShipping@1005 : Decimal;
      TotalInclVATShipping@1004 : Decimal;
      SalesLCYShipping@1003 : Decimal;
      InvDiscountAmountShipping@1001 : Decimal;
      AmountRoundingPrecision@1009 : Decimal;
      Amount@1012 : Decimal;
      VATAmount@1011 : Decimal;
      AmountIncludingVAT@1010 : Decimal;
      SalesLCY@1008 : Decimal;
      InvoiceDiscountAmount@1007 : Decimal;
      QuantityPer@1013 : Decimal;
    BEGIN
      AmountRoundingPrecision := 10 * GetAmountRoundingPrecision;  // Using multiplication of 10 for rounding.
      EVALUATE(AmountShipping,ServiceOrderStatistics.Amount_Shipping.VALUE);
      EVALUATE(VATAmountShipping,ServiceOrderStatistics."VAT Amount_Shipping".VALUE);
      EVALUATE(TotalInclVATShipping,ServiceOrderStatistics."Total Incl. VAT_Shipping".VALUE);
      EVALUATE(SalesLCYShipping,ServiceOrderStatistics."Sales (LCY)_Shipping".VALUE);
      EVALUATE(InvDiscountAmountShipping,ServiceOrderStatistics."Inv. Discount Amount_Shipping".VALUE);

      QuantityPer := ServiceLine."Qty. to Ship" / ServiceLine.Quantity;
      Amount := ROUND((ServiceLine.Amount + ServiceLine."Inv. Discount Amount") * QuantityPer,AmountRoundingPrecision);
      VATAmount := ROUND((ServiceLine."Amount Including VAT" - ServiceLine.Amount) * QuantityPer,AmountRoundingPrecision);
      AmountIncludingVAT := ROUND(ServiceLine."Amount Including VAT" * QuantityPer,AmountRoundingPrecision);
      SalesLCY := ROUND(ServiceLine.Amount * QuantityPer,AmountRoundingPrecision);
      InvoiceDiscountAmount := ROUND(ServiceLine."Inv. Discount Amount" * QuantityPer,AmountRoundingPrecision);

      Assert.AreNearlyEqual(Amount,AmountShipping,AmountRoundingPrecision,STRSUBSTNO(AmountError,AmountShipping,Amount));
      Assert.AreNearlyEqual(
        VATAmount,VATAmountShipping,AmountRoundingPrecision,STRSUBSTNO(VATAmountError,VATAmountShipping,VATAmount));
      Assert.AreNearlyEqual(
        AmountIncludingVAT,TotalInclVATShipping,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,TotalInclVATShipping,AmountIncludingVAT));
      Assert.AreNearlyEqual(SalesLCY,SalesLCYShipping,AmountRoundingPrecision,STRSUBSTNO(SalesLCYError,SalesLCYShipping,SalesLCY));
      Assert.AreNearlyEqual(
        InvoiceDiscountAmount,InvDiscountAmountShipping,AmountRoundingPrecision,
        STRSUBSTNO(InvoiceDiscountAmountError,InvDiscountAmountShipping,InvoiceDiscountAmount ));
    END;

    LOCAL PROCEDURE VerifyServiceOrderVATLine@61(VATAmountLines@1000 : TestPage 9401;DocumentNo@1008 : Code[20]);
    VAR
      ServiceLine@1001 : Record 5902;
      VATBase@1007 : Decimal;
      VATAmount@1006 : Decimal;
      AmountIncludingVAT@1005 : Decimal;
      VATBase2@1004 : Decimal;
      VATAmount2@1003 : Decimal;
      AmountIncludingVAT2@1002 : Decimal;
      VATBase3@1012 : Decimal;
      VATAmount3@1011 : Decimal;
      AmountIncludingVAT3@1009 : Decimal;
      QuantityPer@1013 : Decimal;
      AmountRoundingPrecision@1010 : Decimal;
    BEGIN
      FindServiceLine(ServiceLine,ServiceLine."Document Type"::Order,DocumentNo);
      ServiceLine.CALCSUMS("Amount Including VAT",Amount,"VAT Base Amount");

      AmountRoundingPrecision := 10 * GetAmountRoundingPrecision;  // Using multiplication of 10 for rounding.
      VATAmountLines.FIRST;
      REPEAT
        EVALUATE(VATBase,VATAmountLines."VAT Base".VALUE);
        EVALUATE(VATAmount,VATAmountLines."VAT Amount".VALUE);
        EVALUATE(AmountIncludingVAT,VATAmountLines."Amount Including VAT".VALUE);
        VATBase2 += VATBase;
        VATAmount2 += VATAmount;
        AmountIncludingVAT2 += AmountIncludingVAT;
      UNTIL NOT VATAmountLines.NEXT;

      QuantityPer := ServiceLine."Qty. to Ship" / ServiceLine.Quantity;
      VATBase3 := ROUND(ServiceLine."VAT Base Amount" * QuantityPer,AmountRoundingPrecision);
      VATAmount3 := ROUND((ServiceLine."Amount Including VAT" - ServiceLine.Amount) * QuantityPer,AmountRoundingPrecision);
      AmountIncludingVAT3 := ROUND(ServiceLine."Amount Including VAT" * QuantityPer,AmountRoundingPrecision);

      Assert.AreNearlyEqual(VATBase3,VATBase2,AmountRoundingPrecision,STRSUBSTNO(VATBaseAmountError,VATBase2,VATBase3));
      Assert.AreNearlyEqual(VATAmount3,VATAmount2,AmountRoundingPrecision,STRSUBSTNO(VATAmountError,VATAmount2,VATAmount3));
      Assert.AreNearlyEqual(
        AmountIncludingVAT3,AmountIncludingVAT2,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,AmountIncludingVAT2,AmountIncludingVAT3));
    END;

    LOCAL PROCEDURE VerifyServiceLineItems@17(ServiceStatistics@1000 : TestPage 6030;DocumentType@1003 : Option;DocumentNo@1001 : Code[20]);
    VAR
      ServiceLine@1002 : Record 5902;
      AmountItems@1008 : Decimal;
      VATAmountItems@1007 : Decimal;
      TotalInclVATItems@1006 : Decimal;
      SalesLCYItems@1005 : Decimal;
      InvDiscountAmountItems@1004 : Decimal;
      AmountRoundingPrecision@1011 : Decimal;
    BEGIN
      AmountRoundingPrecision := 10 * GetAmountRoundingPrecision;  // Using multiplication of 10 for rounding.
      FilterServiceLine(ServiceLine,DocumentType,DocumentNo);
      ServiceLine.SETRANGE(Type,ServiceLine.Type::Item);
      ServiceLine.FINDFIRST;

      EVALUATE(AmountItems,ServiceStatistics.Amount_Items.VALUE);
      EVALUATE(VATAmountItems,ServiceStatistics."VAT Amount_Items".VALUE);
      EVALUATE(TotalInclVATItems,ServiceStatistics."Total Incl. VAT_Items".VALUE);
      EVALUATE(SalesLCYItems,ServiceStatistics."Sales (LCY)_Items".VALUE);
      EVALUATE(InvDiscountAmountItems,ServiceStatistics."Inv. Discount Amount_Items".VALUE);

      Assert.AreNearlyEqual(
        ServiceLine.Amount + ServiceLine."Inv. Discount Amount",AmountItems,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,AmountItems,ServiceLine.Amount + ServiceLine."Inv. Discount Amount"));
      Assert.AreNearlyEqual(
        ServiceLine."Amount Including VAT" - ServiceLine.Amount,VATAmountItems,AmountRoundingPrecision,
        STRSUBSTNO(VATAmountError,VATAmountItems,ServiceLine."Amount Including VAT" - ServiceLine.Amount));
      Assert.AreNearlyEqual(
        ServiceLine."Amount Including VAT",TotalInclVATItems,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,TotalInclVATItems,ServiceLine."Amount Including VAT"));
      Assert.AreNearlyEqual(
        ServiceLine.Amount,SalesLCYItems,AmountRoundingPrecision,
        STRSUBSTNO(SalesLCYError,SalesLCYItems,ServiceLine.Amount));
      Assert.AreNearlyEqual(
        ServiceLine."Inv. Discount Amount",InvDiscountAmountItems,AmountRoundingPrecision,
        STRSUBSTNO(InvoiceDiscountAmountError,InvDiscountAmountItems,ServiceLine."Inv. Discount Amount"));
    END;

    LOCAL PROCEDURE VerifyServiceLineResources@18(ServiceStatistics@1000 : TestPage 6030;DocumentType@1003 : Option;DocumentNo@1002 : Code[20]);
    VAR
      ServiceLine@1001 : Record 5902;
      AmountResources@1008 : Decimal;
      VATAmountResources@1007 : Decimal;
      TotalInclVATResources@1006 : Decimal;
      SalesLCYResources@1005 : Decimal;
      InvDiscountAmountResources@1004 : Decimal;
      AmountRoundingPrecision@1011 : Decimal;
    BEGIN
      AmountRoundingPrecision := 10 * GetAmountRoundingPrecision;  // Using multiplication of 10 for rounding.
      FilterServiceLine(ServiceLine,DocumentType,DocumentNo);
      ServiceLine.SETRANGE(Type,ServiceLine.Type::Resource);
      ServiceLine.FINDFIRST;

      EVALUATE(AmountResources,ServiceStatistics.Amount_Resources.VALUE);
      EVALUATE(VATAmountResources,ServiceStatistics."VAT Amount_Resources".VALUE);
      EVALUATE(TotalInclVATResources,ServiceStatistics."Total Incl. VAT_Resources".VALUE);
      EVALUATE(SalesLCYResources,ServiceStatistics."Sales (LCY)_Resources".VALUE);
      EVALUATE(InvDiscountAmountResources,ServiceStatistics."Inv. Discount Amount_Resources".VALUE);

      Assert.AreNearlyEqual(
        ServiceLine.Amount + ServiceLine."Inv. Discount Amount",AmountResources,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,AmountResources,ServiceLine.Amount + ServiceLine."Inv. Discount Amount"));
      Assert.AreNearlyEqual(
        ServiceLine."Amount Including VAT" - ServiceLine.Amount,VATAmountResources,AmountRoundingPrecision,
        STRSUBSTNO(VATAmountError,VATAmountResources,ServiceLine."Amount Including VAT" - ServiceLine.Amount));
      Assert.AreNearlyEqual(
        ServiceLine."Amount Including VAT",TotalInclVATResources,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,TotalInclVATResources,ServiceLine."Amount Including VAT"));
      Assert.AreNearlyEqual(
        ServiceLine.Amount,SalesLCYResources,AmountRoundingPrecision,
        STRSUBSTNO(SalesLCYError,SalesLCYResources,ServiceLine.Amount));
      Assert.AreNearlyEqual(
        ServiceLine."Inv. Discount Amount",InvDiscountAmountResources,AmountRoundingPrecision,
        STRSUBSTNO(InvoiceDiscountAmountError,InvDiscountAmountResources,ServiceLine."Inv. Discount Amount"));
    END;

    LOCAL PROCEDURE VerifyServiceLineCostGLAccount@20(ServiceStatistics@1000 : TestPage 6030;DocumentType@1006 : Option;DocumentNo@1002 : Code[20]);
    VAR
      ServiceLine@1001 : Record 5902;
      AmountIncludingVAT@1003 : Decimal;
      Amount@1004 : Decimal;
      InvDiscountAmount@1005 : Decimal;
      AmountCosts@1007 : Decimal;
      VATAmountCosts@1008 : Decimal;
      TotalInclVATCosts@1009 : Decimal;
      SalesLCYCosts@1010 : Decimal;
      InvDiscountAmountCosts@1011 : Decimal;
      AmountRoundingPrecision@1013 : Decimal;
    BEGIN
      AmountRoundingPrecision := 10 * GetAmountRoundingPrecision;  // Using multiplication of 10 for rounding.
      FilterServiceLine(ServiceLine,DocumentType,DocumentNo);
      ServiceLine.SETFILTER(Type,'%1|%2',ServiceLine.Type::Cost,ServiceLine.Type::"G/L Account");
      ServiceLine.FINDSET;
      REPEAT
        AmountIncludingVAT += ServiceLine."Amount Including VAT";
        Amount += ServiceLine.Amount;
        InvDiscountAmount += ServiceLine."Inv. Discount Amount";
      UNTIL ServiceLine.NEXT = 0;

      EVALUATE(AmountCosts,ServiceStatistics.Amount_Costs.VALUE);
      EVALUATE(VATAmountCosts,ServiceStatistics."VAT Amount_Costs".VALUE);
      EVALUATE(TotalInclVATCosts,ServiceStatistics."Total Incl. VAT_Costs".VALUE);
      EVALUATE(SalesLCYCosts,ServiceStatistics."Sales (LCY)_Costs".VALUE);
      EVALUATE(InvDiscountAmountCosts,ServiceStatistics."Inv. Discount Amount_Costs".VALUE);

      Assert.AreNearlyEqual(
        Amount + InvDiscountAmount,AmountCosts,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,AmountCosts,Amount + InvDiscountAmount));
      Assert.AreNearlyEqual(
        AmountIncludingVAT - Amount,VATAmountCosts,AmountRoundingPrecision,
        STRSUBSTNO(VATAmountError,VATAmountCosts,AmountIncludingVAT - Amount));
      Assert.AreNearlyEqual(
        AmountIncludingVAT,TotalInclVATCosts,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,TotalInclVATCosts,AmountIncludingVAT));
      Assert.AreNearlyEqual(Amount,SalesLCYCosts,AmountRoundingPrecision,STRSUBSTNO(SalesLCYError,SalesLCYCosts,Amount));
      Assert.AreNearlyEqual(
        InvDiscountAmount,InvDiscountAmountCosts,AmountRoundingPrecision,
        STRSUBSTNO(InvoiceDiscountAmountError,InvDiscountAmountCosts,InvDiscountAmount));
    END;

    LOCAL PROCEDURE VerifyServiceStatistics@22(ServiceStatistics@1000 : TestPage 6030;ServiceLine@1001 : Record 5902);
    VAR
      AmountGeneral@1006 : Decimal;
      VATAmountGeneral@1005 : Decimal;
      TotalInclVATGeneral@1004 : Decimal;
      SalesLCYGeneral@1003 : Decimal;
      AmountRoundingPrecision@1008 : Decimal;
    BEGIN
      AmountRoundingPrecision := 10 * GetAmountRoundingPrecision;  // Using multiplication of 10 for rounding.
      EVALUATE(AmountGeneral,ServiceStatistics.Amount_General.VALUE);
      EVALUATE(VATAmountGeneral,ServiceStatistics."VAT Amount_General".VALUE);
      EVALUATE(TotalInclVATGeneral,ServiceStatistics."Total Incl. VAT_General".VALUE);
      EVALUATE(SalesLCYGeneral,ServiceStatistics."Sales (LCY)_General".VALUE);

      Assert.AreNearlyEqual(
        ServiceLine."Amount Including VAT",AmountGeneral,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,AmountGeneral,ServiceLine."Amount Including VAT"));
      Assert.AreNearlyEqual(
        ServiceLine."Amount Including VAT" - ServiceLine.Amount,VATAmountGeneral,AmountRoundingPrecision,
        STRSUBSTNO(VATAmountError,VATAmountGeneral,ServiceLine."Amount Including VAT" - ServiceLine.Amount));
      Assert.AreNearlyEqual(
        ServiceLine.Amount,TotalInclVATGeneral,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,TotalInclVATGeneral,ServiceLine.Amount));
      Assert.AreNearlyEqual(
        ServiceLine.Amount,SalesLCYGeneral,AmountRoundingPrecision,
        STRSUBSTNO(SalesLCYError,SalesLCYGeneral,ServiceLine.Amount));
    END;

    LOCAL PROCEDURE VerifyServiceStatisticsGeneral@47(ServiceStatistics@1000 : TestPage 6030;ServiceLine@1002 : Record 5902);
    VAR
      AmountGeneral@1006 : Decimal;
      VATAmountGeneral@1005 : Decimal;
      TotalInclVATGeneral@1004 : Decimal;
      SalesLCYGeneral@1003 : Decimal;
      InvDiscountAmountGeneral@1001 : Decimal;
      AmountRoundingPrecision@1009 : Decimal;
    BEGIN
      AmountRoundingPrecision := 10 * GetAmountRoundingPrecision;  // Using multiplication of 10 for rounding.
      EVALUATE(AmountGeneral,ServiceStatistics.Amount_General.VALUE);
      EVALUATE(VATAmountGeneral,ServiceStatistics."VAT Amount_General".VALUE);
      EVALUATE(TotalInclVATGeneral,ServiceStatistics."Total Incl. VAT_General".VALUE);
      EVALUATE(SalesLCYGeneral,ServiceStatistics."Sales (LCY)_General".VALUE);
      EVALUATE(InvDiscountAmountGeneral,ServiceStatistics."Inv. Discount Amount_General".VALUE);

      Assert.AreNearlyEqual(
        ServiceLine.Amount + ServiceLine."Inv. Discount Amount",AmountGeneral,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,AmountGeneral,ServiceLine.Amount + ServiceLine."Inv. Discount Amount"));
      Assert.AreNearlyEqual(
        ServiceLine."Amount Including VAT" - ServiceLine.Amount,VATAmountGeneral,AmountRoundingPrecision,
        STRSUBSTNO(VATAmountError,VATAmountGeneral,ServiceLine."Amount Including VAT" - ServiceLine.Amount));
      Assert.AreNearlyEqual(
        ServiceLine."Amount Including VAT",TotalInclVATGeneral,AmountRoundingPrecision,
        STRSUBSTNO(AmountError,TotalInclVATGeneral,ServiceLine."Amount Including VAT"));
      Assert.AreNearlyEqual(
        ServiceLine.Amount,SalesLCYGeneral,AmountRoundingPrecision,
        STRSUBSTNO(SalesLCYError,SalesLCYGeneral,ServiceLine.Amount));
      Assert.AreNearlyEqual(
        ServiceLine."Inv. Discount Amount",InvDiscountAmountGeneral,AmountRoundingPrecision,
        STRSUBSTNO(InvoiceDiscountAmountError,InvDiscountAmountGeneral,ServiceLine."Inv. Discount Amount"));
    END;

    LOCAL PROCEDURE VerifyServiceLineInvoiceDiscountAmount@108(DocumentNo@1000 : Code[20];ExpectedInvoiceDiscountAmount@1004 : Decimal);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,ServiceLine."Document Type"::Order,DocumentNo);
      Assert.RecordCount(ServiceLine,1);
      Assert.AreEqual(ExpectedInvoiceDiscountAmount,ServiceLine."Inv. Discount Amount",InvoiceDiscountAmountErr);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@14(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ChangeDiscountOrderPostHandler@131(VAR ServiceOrderStatistics@1000 : TestPage 5914);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      IF NOT UpdateDiscountAmount THEN BEGIN
        UpdateDiscountAmountOrder(ServiceOrderStatistics);
        ServiceOrderStatistics.OK.INVOKE;
        EXIT;
      END;

      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      VerifyOrderStatisticsDetails(ServiceOrderStatistics,ServiceLine);

      // Verify VAT Amount Line on Page handler.
      ServiceOrderStatistics."No. of VAT Lines_Shipping".DRILLDOWN;
      ServiceOrderStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ChangeDiscountOrderShipHandler@88(VAR ServiceOrderStatistics@1000 : TestPage 5914);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      IF NOT UpdateDiscountAmount THEN BEGIN
        UpdateDiscountAmountOrder(ServiceOrderStatistics);
        ServiceOrderStatistics.OK.INVOKE;
        EXIT;
      END;

      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      VerifyOrderStatisticsShipping(ServiceOrderStatistics,ServiceLine);

      // Verify VAT Amount Line on Page handler.
      ServiceOrderStatistics."No. of VAT Lines_Shipping".DRILLDOWN;
      ServiceOrderStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ChangeDiscountOrderPageHandler@144(VAR ServiceOrderStatistics@1000 : TestPage 5914);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      IF NOT UpdateDiscountAmount THEN BEGIN
        UpdateDiscountAmountOrder(ServiceOrderStatistics);
        ServiceOrderStatistics.OK.INVOKE;
        EXIT;
      END;

      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      VerifyOrderStatisticsGeneral(ServiceOrderStatistics,ServiceLine);
      VerifyOrderLineItems(ServiceOrderStatistics,DocumentNo2);

      // Verify VAT Amount Line on Page handler.
      ServiceOrderStatistics."No. of VAT Lines_General".DRILLDOWN;
      ServiceOrderStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ChangeDiscountPageHandler@82(VAR ServiceStatistics@1000 : TestPage 6030);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      IF NOT UpdateDiscountAmount THEN BEGIN
        UpdateDiscountAmountStatistics(ServiceStatistics);
        ServiceStatistics.OK.INVOKE;
        EXIT;
      END;

      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      VerifyServiceStatisticsGeneral(ServiceStatistics,ServiceLine);
      VerifyServiceLineItems(ServiceStatistics,DocumentType2,DocumentNo2);
      ServiceStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ChangeTotalVATOrderPageHandler@145(VAR ServiceOrderStatistics@1000 : TestPage 5914);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      IF NOT UpdateTotalVAT THEN BEGIN
        UpdateTotalVATOrderStatistics(ServiceOrderStatistics);
        ServiceOrderStatistics.OK.INVOKE;
        EXIT;
      END;

      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      VerifyOrderStatisticsGeneral(ServiceOrderStatistics,ServiceLine);
      VerifyOrderLineItems(ServiceOrderStatistics,DocumentNo2);

      // Verify VAT Amount Line on Page handler.
      ServiceOrderStatistics."No. of VAT Lines_General".DRILLDOWN;
      ServiceOrderStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ChangeTotalVATOrderShipHandler@89(VAR ServiceOrderStatistics@1000 : TestPage 5914);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      IF NOT UpdateTotalVAT THEN BEGIN
        UpdateTotalVATOrderStatistics(ServiceOrderStatistics);
        ServiceOrderStatistics.OK.INVOKE;
        EXIT;
      END;

      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      VerifyOrderStatisticsShipping(ServiceOrderStatistics,ServiceLine);

      // Verify VAT Amount Line on Page handler.
      ServiceOrderStatistics."No. of VAT Lines_Shipping".DRILLDOWN;
      ServiceOrderStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ChangeTotalVATOrderPostHandler@132(VAR ServiceOrderStatistics@1000 : TestPage 5914);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      IF NOT UpdateTotalVAT THEN BEGIN
        UpdateTotalVATOrderStatistics(ServiceOrderStatistics);
        ServiceOrderStatistics.OK.INVOKE;
        EXIT;
      END;

      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      VerifyOrderStatisticsDetails(ServiceOrderStatistics,ServiceLine);

      // Verify VAT Amount Line on Page handler.
      ServiceOrderStatistics."No. of VAT Lines_Shipping".DRILLDOWN;
      ServiceOrderStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ChangeTotalVATPageHandler@84(VAR ServiceStatistics@1000 : TestPage 6030);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      IF NOT UpdateTotalVAT THEN BEGIN
        UpdateTotalVATStatistics(ServiceStatistics);
        ServiceStatistics.OK.INVOKE;
        EXIT;
      END;

      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      VerifyServiceStatisticsGeneral(ServiceStatistics,ServiceLine);
      VerifyServiceLineItems(ServiceStatistics,DocumentType2,DocumentNo2);
      ServiceStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CreditLimitLCYPageHandler@133(VAR ServiceOrderStatistics@1000 : TestPage 5914);
    BEGIN
      ServiceOrderStatistics."Credit Limit (LCY)_Customer".ASSERTEQUALS(CreditLimitLCY);
      ServiceOrderStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DocumentCreditLimitPageHandler@121(VAR ServiceStatistics@1000 : TestPage 6030);
    BEGIN
      ServiceStatistics."Credit Limit (LCY)".ASSERTEQUALS(CreditLimitLCY);
      ServiceStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DocumentGLAccountPageHandler@120(VAR ServiceStatistics@1000 : TestPage 6030);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      VerifyServiceStatisticsGeneral(ServiceStatistics,ServiceLine);
      VerifyServiceLineCostGLAccount(ServiceStatistics,DocumentType2,DocumentNo2);
      ServiceStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DocumentDiscountPageHandler@106(VAR ServiceStatistics@1000 : TestPage 6030);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      ServiceLine.CALCSUMS("Amount Including VAT",Amount,"Inv. Discount Amount","VAT Base Amount");
      VerifyServiceStatisticsGeneral(ServiceStatistics,ServiceLine);

      VerifyServiceLineItems(ServiceStatistics,DocumentType2,DocumentNo2);
      VerifyServiceLineResources(ServiceStatistics,DocumentType2,DocumentNo2);
      VerifyServiceLineCostGLAccount(ServiceStatistics,DocumentType2,DocumentNo2);
      ServiceStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DocumentItemPageHandler@86(VAR ServiceStatistics@1000 : TestPage 6030);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      VerifyServiceStatisticsGeneral(ServiceStatistics,ServiceLine);
      VerifyServiceLineItems(ServiceStatistics,DocumentType2,DocumentNo2);
      ServiceStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DocumentResourcePageHandler@119(VAR ServiceStatistics@1000 : TestPage 6030);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      VerifyServiceStatisticsGeneral(ServiceStatistics,ServiceLine);
      VerifyServiceLineResources(ServiceStatistics,DocumentType2,DocumentNo2);
      ServiceStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DocumentWithVATPageHandler@115(VAR ServiceStatistics@1000 : TestPage 6030);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      ServiceLine.CALCSUMS("Amount Including VAT",Amount,"VAT Base Amount");
      VerifyServiceStatistics(ServiceStatistics,ServiceLine);
      ServiceStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE OrderGLAccountPageHandler@117(VAR ServiceOrderStatistics@1000 : TestPage 5914);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      VerifyOrderStatisticsGeneral(ServiceOrderStatistics,ServiceLine);
      VerifyOrderLineCostGLAccount(ServiceOrderStatistics,DocumentNo2);

      // Verify VAT Amount Line on Page handler.
      ServiceOrderStatistics."No. of VAT Lines_General".DRILLDOWN;
      ServiceOrderStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE OrderItemPageHandler@94(VAR ServiceOrderStatistics@1000 : TestPage 5914);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      VerifyOrderStatisticsGeneral(ServiceOrderStatistics,ServiceLine);
      VerifyOrderLineItems(ServiceOrderStatistics,DocumentNo2);

      // Verify VAT Amount Line on Page handler.
      ServiceOrderStatistics."No. of VAT Lines_General".DRILLDOWN;
      ServiceOrderStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE OrderInvoiceDiscountHandler@124(VAR ServiceOrderStatistics@1000 : TestPage 5914);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      ServiceLine.CALCSUMS("Amount Including VAT",Amount,"Inv. Discount Amount","VAT Base Amount");
      VerifyOrderStatisticsGeneral(ServiceOrderStatistics,ServiceLine);
      VerifyOrderLineItems(ServiceOrderStatistics,DocumentNo2);
      VerifyOrderLineResources(ServiceOrderStatistics,DocumentNo2);
      VerifyOrderLineCostGLAccount(ServiceOrderStatistics,DocumentNo2);

      // Verify VAT Amount Line on Page handler.
      ServiceOrderStatistics."No. of VAT Lines_General".DRILLDOWN;
      ServiceOrderStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE OrderResourcePageHandler@116(VAR ServiceOrderStatistics@1000 : TestPage 5914);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      VerifyOrderStatisticsGeneral(ServiceOrderStatistics,ServiceLine);
      VerifyOrderLineResources(ServiceOrderStatistics,DocumentNo2);

      // Verify VAT Amount Line on Page handler.
      ServiceOrderStatistics."No. of VAT Lines_General".DRILLDOWN;
      ServiceOrderStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE OrderWithVATPageHandler@130(VAR ServiceOrderStatistics@1000 : TestPage 5914);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      ServiceLine.CALCSUMS("Amount Including VAT",Amount,"VAT Base Amount");
      VerifyOrderStatistics(ServiceOrderStatistics,ServiceLine);

      // Verify VAT Amount Line on Page handler.
      ServiceOrderStatistics."No. of VAT Lines_General".DRILLDOWN;
      ServiceOrderStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToInvoicePageHandler@129(VAR ServiceOrderStatistics@1000 : TestPage 5914);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      VerifyOrderStatisticsDetails(ServiceOrderStatistics,ServiceLine);

      // Verify VAT Amount Line on Page handler.
      ServiceOrderStatistics."No. of VAT Lines_Shipping".DRILLDOWN;
      ServiceOrderStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToShipPageHandler@155(VAR ServiceOrderStatistics@1000 : TestPage 5914);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,DocumentType2,DocumentNo2);
      VerifyOrderStatisticsShipping(ServiceOrderStatistics,ServiceLine);

      // Verify VAT Amount Line on Page handler.
      ServiceOrderStatistics."No. of VAT Lines_Shipping".DRILLDOWN;
      ServiceOrderStatistics.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE QuoteLinesPageHandler@107(VAR ServiceQuoteLines@1000 : TestPage 5966);
    BEGIN
      CreateServiceQuoteLine(ServiceQuoteLines,Type2,No2);
      ServiceQuoteLines.CalculateInvoiceDiscount.INVOKE;
      ServiceQuoteLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE QuoteLinesMultiplePageHandler@105(VAR ServiceQuoteLines@1000 : TestPage 5966);
    BEGIN
      CreateServiceQuoteLine(ServiceQuoteLines,Type2::Item,ItemNo);
      CreateServiceQuoteLine(ServiceQuoteLines,Type2::"G/L Account",GLAccountNo);
      CreateServiceQuoteLine(ServiceQuoteLines,Type2::Resource,ResourceNo);
      CreateServiceQuoteLine(ServiceQuoteLines,Type2::Cost,CostCode);
      ServiceQuoteLines.CalculateInvoiceDiscount.INVOKE;
      ServiceQuoteLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ServiceLinesPageHandler@74(VAR ServiceLines@1000 : TestPage 5905);
    BEGIN
      CreateServiceLine(ServiceLines,Type2,No2);
      ServiceLines."Calculate Invoice Discount".INVOKE;
      ServiceLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ServiceLinesMultiPageHandler@21(VAR ServiceLines@1000 : TestPage 5905);
    BEGIN
      CreateServiceLine(ServiceLines,Type2::Item,ItemNo);
      CreateServiceLine(ServiceLines,Type2::"G/L Account",GLAccountNo);
      CreateServiceLine(ServiceLines,Type2::Resource,ResourceNo);
      CreateServiceLine(ServiceLines,Type2::Cost,CostCode);
      ServiceLines."Calculate Invoice Discount".INVOKE;
      ServiceLines.OK.INVOKE;
    END;

    [StrMenuHandler]
    PROCEDURE ShipAndInvoiceStrMenuHandler@60(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instructions@1002 : Text[1024]);
    BEGIN
      Choice := 3;  // For Ship and Invoice.
    END;

    [StrMenuHandler]
    PROCEDURE ShipStrMenuHandler@83(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instructions@1002 : Text[1024]);
    BEGIN
      Choice := 1;  // For Ship.
    END;

    [ModalPageHandler]
    PROCEDURE VATAmountLinesPageHandler@71(VAR VATAmountLines@1000 : TestPage 9401);
    BEGIN
      // Verify VAT Amount Line.

      VerifyServiceOrderVATLine(VATAmountLines,DocumentNo2);
      VATAmountLines.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Statistics] [Service]
        NA: Unable to compile (field [Prices Including VAT] is missing in PAG5933).
      Test for Service Statistics Page:
        1. Test creation of Service Invoice with Item and verify Statistics Page.
        2. Test creation of Service Invoice with Resource and verify Statistics Page.
        3. Test creation of Service Invoice with G/L Account and verify Statistics Page.
        4. Test creation of Service Invoice with Cost and verify Statistics Page.
        5. Test creation of Service Invoice with multiple lines, Allow Invoice Discount and verify Statistics Page.
        6. Test creation of Service Invoice with multiple lines, Price Including VAT and verify Statistics Page.
        7. Test creation of Service Invoice with Allow Invoice Discount and change Invoice Discount Amount on Statistics Page.
        8. Test creation of Service Invoice with Allow Invoice Discount and change Total Incl. VAT on Statistics Page.
        9. Test creation of Service Invoice and verify Credit limit on Statistics Page.
       10. Test creation of Service Credit Memo with Item and verify Statistics Page.
       11. Test creation of Service Credit Memo with Resource and verify Statistics Page.
       12. Test creation of Service Credit Memo with G/L Account and verify Statistics Page.
       13. Test creation of Service Credit Memo with Cost and verify Statistics Page.
       14. Test creation of Service Credit Memo with multiple lines, Allow Invoice Discount and verify Statistics Page.
       15. Test creation of Service Credit Memo with multiple lines, Price Including VAT and verify Statistics Page.
       16. Test creation of Service Credit Memo with Allow Invoice Discount and change Invoice Discount Amount on Statistics Page.
       17. Test creation of Service Credit Memo with Allow Invoice Discount and change Total Incl. VAT on Statistics Page.
       18. Test creation of Service Credit Memo and verify Credit limit on Statistics Page.
       19. Test creation of Service Order with Item and verify Service Order Statistics Page.
       20. Test creation of Service Order with Resource and verify Service Order Statistics Page.
       21. Test creation of Service Order with G/L Account and verify Service Order Statistics Page.
       22. Test creation of Service Order with Cost and verify Service Order Statistics Page.
       23. Test creation of Service Order with multiple lines, Allow Invoice Discount and verify Service Order Statistics Page.
       24. Test creation of Service Order with multiple lines, Price Including VAT and verify Service Order Statistics Page.
       25. Test creation of Service Order with Allow Invoice Discount and change Invoice Discount Amount on Service Order Statistics Page.
       26. Test creation of Service Order with Allow Invoice Discount and change Total Incl. VAT on Service Order Statistics Page.
       27. Test creation of Service Order, Update Quantity to Ship and verify Service Order Statistics Page.
       28. Test creation of Service Order, Update Quantity to Ship, Post and verify Service Order Statistics Page.
       29. Test creation of Service Order, Update Quantity to Ship, Post, Update Invoice Discount Amount on Statistics Page and
           verify Service Order Statistics Page.
       30. Test creation of Service Order, Update Quantity to Ship, Post, Update Total Incl. VAT on Statistics Page and
           verify Service Order Statistics Page.
       31. Test creation of Service Order with Item, Update Quantity to Invoice and verify Service Order Statistics Page.
       32. Test creation of Service Order with Item, Update Quantity to Invoice, Post and verify Service Order Statistics Page.
       33. Test creation of Service Order with Item, Update Quantity to Invoice, Post, Update Invoice Discount Amount on Statistics
           Page and verify Service Order Statistics Page.
       34. Test creation of Service Order, Update Quantity to Invoice, Post, Update Total Incl. VAT on Statistics Page and
           verify Service Order Statistics Page.
       35. Test creation of Service Order and verify Credit limit on Service Order Statistics Page.
       36. Test creation of Service Quote with Item and verify Statistics Page.
       37. Test creation of Service Quote with Resource and verify Statistics Page.
       38. Test creation of Service Quote with G/L Account and verify Statistics Page.
       39. Test creation of Service Quote with Cost and verify Statistics Page.
       40. Test creation of Service Quote with multiple lines, Allow Invoice Discount and verify Statistics Page.
       41. Test creation of Service Quote with multiple lines, Price Including VAT and verify Statistics Page.
       42. Test creation of Service Quote with Allow Invoice Discount and change Invoice Discount Amount on Statistics Page.
       43. Test creation of Service Quote with Allow Invoice Discount and change Total Incl. VAT on Statistics Page.
       44. Test creation of Service Quote and verify Credit limit on Statistics Page.
       45. Test creation of Service Order with Item, post Service Order and verify Service Shipment Statistics Page.
       46. Test creation of Service Invoice with Item, post Service Invoice and verify Service Invoice Statistics Page.
       47. Test creation of Service Invoice, post Service Invoice and verify Credit limit on Service Invoice Statistics Page.
       48. Test creation of Service Credit Memo with Item, post Service Credit Memo and verify Service Credit Memo Statistics Page.
       49. Test creation of Service Credit Memo, post Service Credit Memo and verify Credit limit on Service Credit Memo Statistics Page.
       50. Test creation of Service Order with Service Line, setting Invoice Discount Amount, Ship and verify Invoice Discount amount after shipment.

      TFS_TS_ID = 252871
      Cover Test cases:
      -----------------------------------------------------------------------------------------
      Test Function Name                                                              TFS ID
      -----------------------------------------------------------------------------------------
      InvoiceStatisticsItem,InvoiceStatisticsResource,InvoiceStatisticsGLAccount      128048
      InvoiceStatisticsCost,InvoiceWithInvoiceDiscount,InvoiceWithPriceIncludingVAT   128048
      ChangeDiscountAmountInvoice,ChangeTotalVATInvoice,CreditLimitLCYOnInvoice       128048

      TFS_TS_ID = 252876
      Cover Test cases:
      ------------------------------------------------------------------------------------------------
      Test Function Name                                                                       TFS ID
      ------------------------------------------------------------------------------------------------
      CreditMemoStatisticsItem,CreditMemoStatisticsResource,CreditMemoStatisticsGLAccount      128049
      CreditMemoStatisticsCost,CreditMemoWithInvoiceDiscount,MemoWithPriceIncludingVAT         128049
      ChangeDiscountAmountCreditMemo,ChangeTotalVATCreditMemo,CreditLimitLCYOnCreditMemo       128049

      TFS_TS_ID = 252878
      Cover Test cases:
      ------------------------------------------------------------------------------------------------
      Test Function Name                                                                       TFS ID
      ------------------------------------------------------------------------------------------------
      OrderStatisticsItem,OrderStatisticsResource,OrderStatisticsGLAccount                     128050
      OrderStatisticsCost,OrderWithInvoiceDiscount,OrderWithPriceIncludingVAT                  128050
      ChangeDiscountAmountOrder,ChangeTotalVATOrder                                            128050

      TFS_TS_ID = 252985
      Cover Test cases:
      ------------------------------------------------------------------------------------------------
      Test Function Name                                                                       TFS ID
      ------------------------------------------------------------------------------------------------
      OrderWithQuantityToShip,OrderWithQuantityToShipPost,ChangeDiscountAmountOrderShip        128050
      ChangeTotalVATAmountOrderShip,OrderWithQuantityToInvoice,OrderWithQuantityToInvoicePost  128050
      ChangeDiscountAmountOrderPost,ChangeTotalVATAmountOrderPost,CreditLimitLCYOnOrder        128050

      TFS_TS_ID = 252879
      Cover Test cases:
      ------------------------------------------------------------------------------------------------
      Test Function Name                                                                       TFS ID
      ------------------------------------------------------------------------------------------------
      QuoteStatisticsItem,QuoteStatisticsResource,QuoteStatisticsGLAccount                     128051
      QuoteStatisticsCost,QuoteWithInvoiceDiscount,QuoteWithPriceIncludingVAT                  128051
      ChangeDiscountAmountQuote,ChangeTotalVATQuote,CreditLimitLCYOnQuote                      128051

      TFS_TS_ID = 252880
      Cover Test cases:
      ------------------------------------------------------------------------------------------------
      Test Function Name                                                                       TFS ID
      ------------------------------------------------------------------------------------------------
      ServiceShipmentStatistics,PostedInvoiceStatistics,CreditLimitLCYOnPostedInvoice  128052,128053,128054
      PostedCreditMemoStatistics,CreditLimitLCYOnPostedMemo                            128052,128053,128054
      InvoiceDiscountAmountOrderShip                                                   346179
    }
    END.
  }
}

