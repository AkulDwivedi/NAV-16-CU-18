OBJECT Codeunit 137159 SCM Warehouse VII
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LocationWhite@1007 : Record 14;
      LocationBlue@1011 : Record 14;
      LocationSilver@1009 : Record 14;
      LocationRed@1019 : Record 14;
      LocationGreen@1030 : Record 14;
      LocationYellow@1039 : Record 14;
      LocationBlack@1042 : Record 14;
      LocationOrange@1043 : Record 14;
      LocationInTransit@1021 : Record 14;
      ItemJournalBatch@1005 : Record 233;
      ItemJournalTemplate@1006 : Record 82;
      JobJournalTemplate@1024 : Record 209;
      JobJournalBatch@1023 : Record 237;
      LibraryRandom@1000 : Codeunit 130440;
      LibraryVariableStorage@1001 : Codeunit 131004;
      LibraryUtility@1003 : Codeunit 131000;
      LibraryInventory@1004 : Codeunit 132201;
      LibraryItemTracking@1035 : Codeunit 130502;
      LibraryWarehouse@1008 : Codeunit 132204;
      LibraryPurchase@1013 : Codeunit 130512;
      LibrarySales@1014 : Codeunit 130509;
      LibraryPlanning@1022 : Codeunit 132203;
      LibraryManufacturing@1032 : Codeunit 132202;
      LibraryERM@1048 : Codeunit 131300;
      LibrarySetupStorage@1051 : Codeunit 131009;
      Assert@1015 : Codeunit 130000;
      isInitialized@1002 : Boolean;
      DirectedPutAwayAndPickError@1010 : TextConst 'ENU=Directed Put-away and Pick must be equal to ''No''  in Location:';
      InventoryMovementConfirmMessage@1018 : TextConst 'ENU=Do you want to create Inventory Movement?';
      InventoryMovementCreated@1017 : TextConst 'ENU=Invt. Movement activity no.';
      InternalMovementHeaderDelete@1016 : TextConst 'ENU=%1 must be deleted.';
      QuantityMustBeSame@1012 : TextConst 'ENU=Quantity must be same.';
      PostJobJournalLines@1026 : TextConst 'ENU=Do you want to post the journal lines';
      JobJournalPosted@1025 : TextConst 'ENU=The journal lines were successfully posted';
      ReservationConfirmMessage@1029 : TextConst 'ENU=Automatic reservation is not possible.';
      ReservationNotPossibleMessage@1028 : TextConst 'ENU=Full automatic Reservation is not possible.';
      InventoryMovementCreatedMessage@1031 : TextConst 'ENU=Number of Invt. Movement activities created';
      TotalBaseQuantityError@1033 : TextConst '@@@="%1 = Quantity.";ENU=The total base quantity to take %1 must be equal to the total base quantity to place';
      PostJournalLinesConfirmationMessage@1034 : TextConst 'ENU=Do you want to post the journal lines';
      JournalLinesPostedMessage@1036 : TextConst 'ENU=The journal lines were successfully posted';
      ItemNotOnInventoryError@1038 : TextConst '@@@="%1 = Item No.";ENU=Item %1 is not in inventory.';
      UndoShipmentConfirmationMessage@1040 : TextConst 'ENU=Do you really want to undo the selected Shipment lines?';
      UndoReceiptConfirmationMessage@1041 : TextConst 'ENU=Do you really want to undo the selected Receipt lines?';
      WarehouseShipmentRequiredError@1045 : TextConst 'ENU=Warehouse Shipment is required';
      WarehouseReceiveRequiredError@1044 : TextConst 'ENU=Warehouse Receive is required';
      UndoReturnReceiptConfirmationMessage@1049 : TextConst 'ENU=Do you really want to undo the selected Return Receipt lines?';
      NotMadeOrderErr@1046 : TextConst '@@@="%1 = PurchaseLine.""Qty. to Receive (Base)"",%2 = PurchaseLine.Type,%3 = PurchaseLine.""No."",%4 = PurchaseLine.""Line No.""";ENU=%1 of %2 %3 in %4 %5 cannot be more than %6.';
      UndoShipmentAfterPickedConfirmationMsg@1050 : TextConst 'ENU=The items have been picked. If you undo line';
      SpecificReservationTxt@1020 : TextConst 'ENU=Do you want to reserve specific';
      WarehouseEntryMsg@1047 : TextConst 'ENU=The Warehouse Entry is not correct after undo Sales Shipment Lines.';
      WrongQuantityBaseErr@1060 : TextConst 'ENU=Quantity (Base) must not be';
      ItemTrackingQuantityMsg@1037 : TextConst 'ENU=The corrections cannot be saved as excess quantity has been defined.\Close the form anyway?';
      BlankCodeErr@1052 : TextConst 'ENU=Code must be filled in. Enter a value.';

    [Test]
    PROCEDURE CreatePutAwayFromPurchaseOrderOnLocationWithBins@1();
    BEGIN
      // Setup.
      Initialize;
      PostShipmentAfterRegisterPickWithReservedQuantity(FALSE,FALSE,FALSE,FALSE);
    END;

    [Test]
    PROCEDURE RegisterPutAwayFromPurchaseOrderOnLocationWithBins@3();
    BEGIN
      // Setup.
      Initialize;
      PostShipmentAfterRegisterPickWithReservedQuantity(TRUE,FALSE,FALSE,FALSE);  // Register Put-away as TRUE.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE CreatePickWithReservedQuantityOnLocationWithBins@5();
    BEGIN
      // Setup.
      Initialize;
      PostShipmentAfterRegisterPickWithReservedQuantity(TRUE,TRUE,FALSE,FALSE);  // Register Put-away and Create Pick as TRUE.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE RegisterPickWithReservedQuantityOnLocationWithBins@10();
    BEGIN
      // Setup.
      Initialize;
      PostShipmentAfterRegisterPickWithReservedQuantity(TRUE,TRUE,TRUE,FALSE);  // Register Put-away, Create Pick and Register Pick as TRUE.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE PostShipmentWithReservedQuantityOnLocationWithBins@15();
    BEGIN
      // Setup.
      Initialize;
      PostShipmentAfterRegisterPickWithReservedQuantity(TRUE,TRUE,TRUE,TRUE);  // Register Put-away, Create Pick, Register Pick and Post Shipment as TRUE.
    END;

    LOCAL PROCEDURE PostShipmentAfterRegisterPickWithReservedQuantity@184(RegisterPutAway@1011 : Boolean;CreatePickFromSalesOrder@1012 : Boolean;RegisterPick@1013 : Boolean;PostShipment@1014 : Boolean);
    VAR
      Bin@1008 : Record 7354;
      Item@1000 : Record 27;
      ItemLedgerEntry@1005 : Record 32;
      PurchaseHeader@1003 : Record 38;
      SalesHeader@1009 : Record 36;
      SalesLine@1002 : Record 37;
      WarehouseActivityLine@1006 : Record 5767;
      WarehouseEntry@1007 : Record 7312;
      Quantity@1001 : Decimal;
    BEGIN
      // Create and release Purchase Order. Create Warehouse Receipt from Purchase Order.
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      CreateWarehouseReceiptFromPurchaseOrder(PurchaseHeader,Item."No.",Quantity,LocationSilver.Code,FALSE);

      // Exercise.
      PostWarehouseReceipt(PurchaseHeader."No.");

      // Verify.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Purchase,ItemLedgerEntry."Document Type"::"Purchase Receipt",LocationSilver.Code,Item."No.",'',
        '',Quantity);

      IF RegisterPutAway THEN BEGIN
        // Exercise.
        FindBin(Bin,LocationSilver);
        RegisterWarehouseActivity(
          WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
          WarehouseActivityLine."Activity Type"::"Put-away");

        // Verify.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,WarehouseEntry."Source Document"::"P. Order",Item."No.",
          LocationSilver."Receipt Bin Code",'',-Quantity,FALSE);
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,WarehouseEntry."Source Document"::"P. Order",Item."No.",Bin.Code,'',Quantity,FALSE);
      END;

      IF CreatePickFromSalesOrder THEN BEGIN
        // Exercise.
        CreateWarehouseShipmentFromSalesOrder(
          SalesHeader,SalesLine,'',Item."No.",Quantity,LocationSilver.Code,TRUE);  // TRUE for Reserve.
        CreatePick(SalesHeader."No.");

        // Verify.
        VerifyWarehousePickLine(WarehouseActivityLine."Action Type"::Take,SalesHeader."No.",Item."No.",Quantity,Bin.Code);
        VerifyWarehousePickLine(
          WarehouseActivityLine."Action Type"::Place,SalesHeader."No.",Item."No.",Quantity,LocationSilver."Shipment Bin Code");
      END;

      IF RegisterPick THEN BEGIN
        // Exercise.
        RegisterWarehouseActivity(
          WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

        // Verify.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,WarehouseEntry."Source Document"::"S. Order",Item."No.",Bin.Code,'',-Quantity,FALSE);
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,WarehouseEntry."Source Document"::"S. Order",Item."No.",
          LocationSilver."Shipment Bin Code",'',Quantity,FALSE);
      END;

      IF PostShipment THEN BEGIN
        // Exercise.
        PostWarehouseShipment(SalesHeader."No.");

        // Verify.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::"Negative Adjmt.",WarehouseEntry."Source Document"::"S. Order",Item."No.",
          LocationSilver."Shipment Bin Code",'',-Quantity,FALSE);
      END;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ReservationPageHandler,MessageHandler)]
    PROCEDURE PickWithUnreservedQuantityWithAlwaysCreatePickLine@18();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      WarehouseActivityLine@1004 : Record 5767;
      Quantity@1002 : Decimal;
      OldAlwaysCreatePickLine@1005 : Boolean;
    BEGIN
      // Setup: Update Always Create Pick Line on Location. Create Warehouse Shipment from Sales Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      OldAlwaysCreatePickLine := UpdateAlwaysCreatePickLineOnLocation(LocationWhite,TRUE);
      CreateItem(Item,Item.Reserve::Always,Item."Reordering Policy");
      CreateAndReleaseSalesOrderByPage(SalesHeader,Item."No.",LocationWhite.Code,Quantity);
      CreateWarehouseShipment(SalesHeader);

      // Exercise.
      CreatePick(SalesHeader."No.");

      // Verify.
      VerifyWarehousePickLine(WarehouseActivityLine."Action Type"::Take,SalesHeader."No.",Item."No.",Quantity,'');
      VerifyWarehousePickLine(
        WarehouseActivityLine."Action Type"::Place,SalesHeader."No.",Item."No.",Quantity,LocationWhite."Shipment Bin Code");

      // Tear Down.
      UpdateAlwaysCreatePickLineOnLocation(LocationWhite,OldAlwaysCreatePickLine);
    END;

    [Test]
    PROCEDURE PostWarehouseShipmentFromSalesOrder@44();
    BEGIN
      // Setup.
      Initialize;
      PostSalesInvoiceWithItemChargeAndGetShipmentLines(FALSE);  // Post Sales Invoice as FALSE.
    END;

    [Test]
    [HandlerFunctions(GetShipmentLinesPageHandler,ItemChargeAssignmentSalesPageHandler,SalesShipmentLinePageHandler)]
    PROCEDURE PostSalesInvoiceWithPostedShipmentNoWithItemCharge@45();
    BEGIN
      // Setup.
      Initialize;
      PostSalesInvoiceWithItemChargeAndGetShipmentLines(TRUE);  // Post Sales Invoice as TRUE.
    END;

    LOCAL PROCEDURE PostSalesInvoiceWithItemChargeAndGetShipmentLines@17(PostSalesInvoice@1015 : Boolean);
    VAR
      Customer@1004 : Record 18;
      CustomerPostingGroup@1012 : Record 92;
      GeneralPostingSetup@1011 : Record 252;
      Item@1000 : Record 27;
      ItemCharge@1170000000 : Record 5800;
      ItemLedgerEntry@1005 : Record 32;
      SalesHeader@1002 : Record 36;
      SalesLine@1006 : Record 37;
      SalesLine2@1014 : Record 37;
      Quantity@1001 : Decimal;
      PostedDocumentNo@1008 : Code[20];
    BEGIN
      // Create Customer. Create Warehouse Shipment from Sales Order.
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateCustomer(Customer);
      CreateWarehouseShipmentFromSalesOrder(SalesHeader,SalesLine,Customer."No.",Item."No.",Quantity,LocationBlue.Code,FALSE);

      // Exercise.
      PostWarehouseShipment(SalesHeader."No.");

      // Verify.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Sale,ItemLedgerEntry."Document Type"::"Sales Shipment",LocationBlue.Code,Item."No.",'','',
        -Quantity);

      IF PostSalesInvoice THEN BEGIN
        // Exercise: Create and post Sales Invoice with same No. as Posted Sales Shipment.
        PostedDocumentNo :=
          PostSalesInvoiceWithGetShipmentLinesAndItemCharge(
            SalesLine2,FindPostedSalesShipment(Customer."No.",SalesHeader."No."),Customer."No.");

        // Verify item charge entry
        ItemCharge.GET(SalesLine2."No.");
        CustomerPostingGroup.GET(Customer."Customer Posting Group");
        GeneralPostingSetup.GET(Customer."Gen. Bus. Posting Group",ItemCharge."Gen. Prod. Posting Group");
        VerifyGLEntry(PostedDocumentNo,GeneralPostingSetup."Sales Account",-SalesLine2."Line Amount",FALSE);

        // Verify item entry
        CustomerPostingGroup.GET(Customer."Customer Posting Group");
        GeneralPostingSetup.GET(Customer."Gen. Bus. Posting Group",Item."Gen. Prod. Posting Group");
        VerifyGLEntry(PostedDocumentNo,GeneralPostingSetup."Sales Account",-SalesLine."Line Amount",TRUE);  // TRUE for Next Line.
        VerifyGLEntry(
          PostedDocumentNo,CustomerPostingGroup."Receivables Account",
          SalesLine."Amount Including VAT" + SalesLine2."Amount Including VAT",FALSE);  // Value required for verification.
      END;
    END;

    [Test]
    [HandlerFunctions(ItemsByLocationMatrixPageHandler,ItemsByLocationPageHandler)]
    PROCEDURE ItemSelectedOnItemsByLocationMatrixPage@36();
    VAR
      Item@1001 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      LibraryInventory.CreateItem(Item);

      // Exercise.
      OpenItemsByLocationPageFromItemCard(Item."No.");

      // Verify: Item No. is selected on Items by Location Matrix Page using ItemsByLocationMatrixPageHandler.
    END;

    [Test]
    PROCEDURE ErrorOnUpdatingLocationOnInventoryMovement@8();
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      // Setup.
      Initialize;
      LibraryWarehouse.CreateInventoryMovementHeader(WarehouseActivityHeader,'');

      // Exercise.
      ASSERTERROR WarehouseActivityHeader.VALIDATE("Location Code",LocationWhite.Code);

      // Verify.
      Assert.ExpectedError(DirectedPutAwayAndPickError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE GetBinContentOnInternalMovementWithSerial@19();
    BEGIN
      // Setup.
      Initialize;
      InvtMovementFromInternalMovementWithSerial(FALSE);  // Inventory Movement as FALSE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE InventorytMovementAfterGetBinContentWithSerial@71();
    BEGIN
      // Setup.
      Initialize;
      InvtMovementFromInternalMovementWithSerial(TRUE);  // Inventory Movement as TRUE.
    END;

    LOCAL PROCEDURE InvtMovementFromInternalMovementWithSerial@28(InventoryMovement@1007 : Boolean);
    VAR
      Item@1006 : Record 27;
      Bin@1005 : Record 7354;
      InternalMovementHeader@1003 : Record 7346;
      WarehouseActivityLine@1002 : Record 5767;
      Bin2@1004 : Record 7354;
      ItemTrackingMode@1001 : ' ,AssignLotNo,AssignSerialNo,AssignMultipleLotNo,SelectEntries,SelectSerialNo,SelectLotNo';
      Quantity@1000 : Decimal;
    BEGIN
      // Create Item with Serial Item Tracking Code. Create Item Journal Line and update Expiration Date on Reservation Entry. Post Item Journal Line. Create Internal Movement with Get Bin Content.
      Quantity := LibraryRandom.RandInt(100);
      CreateTrackedItemAndUpdateInventoryOnLocationWithBin(
        Item,Bin,Quantity,FALSE,TRUE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode,ItemTrackingMode::AssignSerialNo,TRUE);

      // Exercise.
      CreateInternalMovementWithGetBinContent(InternalMovementHeader,Bin2,Bin,Item."No.");

      // Verify.
      VerifyInternalMovementLine(Bin,Item."No.",Bin2.Code,Quantity);

      IF InventoryMovement THEN BEGIN
        // Exercise.
        CreateInventoryMovementFromInternalMovement(InternalMovementHeader);

        // Verify: Verify Empty Internal Movement Header and Inventory Movement Lines for Serial.
        VerifyInternalMovementHeaderExists(LocationSilver.Code,Bin2.Code);
        VerifyInventoryMovementLinesForSerial(Bin,WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity);
        VerifyInventoryMovementLinesForSerial(Bin2,WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE GetBinContentOnInternalMovementWithLot@14();
    BEGIN
      // Setup.
      Initialize;
      InvtMovementFromInternalMovementWithLot(FALSE);  // Inventory Movement as FALSE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE InventoryMovementAfterGetBinContentWithLot@74();
    BEGIN
      // Setup.
      Initialize;
      InvtMovementFromInternalMovementWithLot(TRUE);  // Inventory Movement as TRUE.
    END;

    LOCAL PROCEDURE InvtMovementFromInternalMovementWithLot@34(InventoryMovement@1008 : Boolean);
    VAR
      Item@1007 : Record 27;
      Bin@1006 : Record 7354;
      InternalMovementHeader@1004 : Record 7346;
      WarehouseActivityLine@1003 : Record 5767;
      Bin2@1005 : Record 7354;
      ItemTrackingMode@1002 : ' ,AssignLotNo,AssignSerialNo,AssignMultipleLotNo,SelectEntries,SelectSerialNo,SelectLotNo';
      LotNo@1001 : Code[20];
      Quantity@1000 : Decimal;
    BEGIN
      // Create Item with Lot Item Tracking Code. Create Item Journal Line and update Expiration Date on Reservation Entry. Post Item journal Line. Create Internal Movement with Get Bin Content.
      Quantity := LibraryRandom.RandDec(10,2);
      CreateTrackedItemAndUpdateInventoryOnLocationWithBin(
        Item,Bin,Quantity,TRUE,FALSE,TRUE,LibraryUtility.GetGlobalNoSeriesCode,'',ItemTrackingMode::AssignLotNo,TRUE);
      GetLotNoFromItemTrackingPageHandler(LotNo);

      // Exercise.
      CreateInternalMovementWithGetBinContent(InternalMovementHeader,Bin2,Bin,Item."No.");

      // Verify.
      VerifyInternalMovementLine(Bin,Item."No.",Bin2.Code,Quantity);

      IF InventoryMovement THEN BEGIN
        // Exercise.
        CreateInventoryMovementFromInternalMovement(InternalMovementHeader);

        // Verify: Verify Empty Internal Movement Header Inventory Movement Lines for Lot.
        VerifyInternalMovementHeaderExists(LocationSilver.Code,Bin2.Code);
        VerifyInventoryMovementLineForLot(Bin,WarehouseActivityLine."Action Type"::Take,Item."No.",LotNo,Quantity);
        VerifyInventoryMovementLineForLot(Bin2,WarehouseActivityLine."Action Type"::Place,Item."No.",LotNo,Quantity);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,WhseItemTrackingLinesPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE InventorytMovementAfterInternalMovementWithSerial@12();
    VAR
      Item@1001 : Record 27;
      Bin@1002 : Record 7354;
      InternalMovementHeader@1005 : Record 7346;
      WarehouseActivityLine@1006 : Record 5767;
      Bin2@1004 : Record 7354;
      ItemTrackingMode@1003 : ' ,AssignLotNo,AssignSerialNo,AssignMultipleLotNo,SelectEntries,SelectSerialNo,SelectLotNo';
      WhseItemTrackingMode@1007 : 'SelectSerialNo,SelectLotNo';
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item with Serial Item Tracking Code. Create Item Journal Line and update Expiration Date on Reservation Entry. Post Item Journal Line. Create Internal Movement.
      Initialize;
      Quantity := LibraryRandom.RandInt(100);
      CreateTrackedItemAndUpdateInventoryOnLocationWithBin(
        Item,Bin,Quantity,FALSE,TRUE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode,ItemTrackingMode::AssignSerialNo,TRUE);
      CreateInternalMovement(InternalMovementHeader,Bin2,Bin,Item."No.",Quantity,WhseItemTrackingMode::SelectSerialNo);

      // Exercise.
      CreateInventoryMovementFromInternalMovement(InternalMovementHeader);

      // Verify: Verify Empty Internal Movement Header and Inventory Movement Lines for Serial.
      VerifyInternalMovementHeaderExists(LocationSilver.Code,Bin2.Code);
      VerifyInventoryMovementLinesForSerial(Bin,WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity);
      VerifyInventoryMovementLinesForSerial(Bin2,WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,WhseItemTrackingLinesPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE InventoryMovementAfterInternalMovementWithLot@135();
    VAR
      Item@1001 : Record 27;
      Bin@1002 : Record 7354;
      Bin2@1006 : Record 7354;
      InternalMovementHeader@1007 : Record 7346;
      WarehouseActivityLine@1005 : Record 5767;
      ItemTrackingMode@1003 : ' ,AssignLotNo,AssignSerialNo,AssignMultipleLotNo,SelectEntries,SelectSerialNo,SelectLotNo';
      WhseItemTrackingMode@1008 : 'SelectSerialNo,SelectLotNo';
      LotNo@1004 : Code[20];
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item with Lot Item Tracking Code. Create Item Journal Line and update Expiration Date on Reservation Entry. Post Item Journal Line. Create Internal Movement.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateTrackedItemAndUpdateInventoryOnLocationWithBin(
        Item,Bin,Quantity,TRUE,FALSE,TRUE,LibraryUtility.GetGlobalNoSeriesCode,'',ItemTrackingMode::AssignLotNo,TRUE);
      GetLotNoFromItemTrackingPageHandler(LotNo);
      CreateInternalMovement(InternalMovementHeader,Bin2,Bin,Item."No.",Quantity,WhseItemTrackingMode::SelectLotNo);

      // Exercise.
      CreateInventoryMovementFromInternalMovement(InternalMovementHeader);

      // Verify: Verify Empty Internal Movement Header Inventory Movement Lines for Lot.
      VerifyInternalMovementHeaderExists(LocationSilver.Code,Bin2.Code);
      VerifyInventoryMovementLineForLot(Bin,WarehouseActivityLine."Action Type"::Take,Item."No.",LotNo,Quantity);
      VerifyInventoryMovementLineForLot(Bin2,WarehouseActivityLine."Action Type"::Place,Item."No.",LotNo,Quantity);
    END;

    [Test]
    [HandlerFunctions(GetShipmentLinesPageHandler)]
    PROCEDURE PostSalesInvoiceUsingBlanketSalesOrder@56();
    VAR
      SalesHeader@1002 : Record 36;
      SalesHeader2@1003 : Record 36;
      SalesLine@1006 : Record 37;
      DocumentNo@1004 : Code[20];
    BEGIN
      // Setup: Create Sales Order with Partial Quantity from Blanket Sales Order. Post Sales Order. Get Shipment Line on Sales Invoice. Create Sales Order with Remaining Quantity from Blanket Sales Order.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);
      CreateSOFromBlanketSalesOrderWithPartialQuantity(SalesHeader,SalesLine);
      PostSalesOrder(SalesHeader."Sell-to Customer No.");
      GetShipmentLineOnSalesInvoice(SalesHeader2,SalesHeader."Sell-to Customer No.");
      LibrarySales.BlanketSalesOrderMakeOrder(SalesHeader);

      // Exercise:
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader2,FALSE,FALSE);  // Post Sales Invoice.

      // Verify.
      VerifySalesInvoiceLine(DocumentNo,SalesLine."No.",SalesLine.Quantity / 2);  // Calculated Value Required.
    END;

    [Test]
    [HandlerFunctions(OrderTrackingDetailsPageHandler)]
    PROCEDURE OrderTrackingOnReqLineAndSOAfterCalcRegenPlan@64();
    VAR
      Item@1001 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1000 : Record 37;
      Quantity@1006 : Decimal;
    BEGIN
      // Setup: Create Lot for Lot Item. Create and Update Multiple Stocks Keeping Unit. Create Sales Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item.Reserve,Item."Reordering Policy"::"Lot-for-Lot");
      CreateMultipleStockkeepingUnit(Item."No.",LocationBlue.Code,LocationRed.Code);
      UpdateReplenishmentSystemAsTransferOnSKU(LocationBlue.Code,Item."No.",LocationRed.Code);
      UpdateVendorNoOnStockkeepingUnit(LocationRed.Code,Item."No.");
      CreateSalesOrder(SalesHeader,SalesLine,'',Item."No.",Quantity,LocationBlue.Code,FALSE);  // Reserve as FALSE.

      // Exercise.
      LibraryPlanning.CalcRegenPlanForPlanWksh(
        Item,CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE),
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));

      // Verify: Verification is done in OrderTrackingDetailsPageHandler.
      VerifyOrderTrackingOnReqLineAndSalesOrder(Item."No.",Quantity,SalesHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE PostJobJournalWithLotItemTracking@82();
    VAR
      Item@1000 : Record 27;
      Bin@1001 : Record 7354;
      ItemLedgerEntry@1006 : Record 32;
      WarehouseEntry@1007 : Record 7312;
      LotNo@1004 : Variant;
      LotNo2@1005 : Variant;
      ItemTrackingMode@1003 : ' ,AssignLotNo,AssignSerialNo,AssignMultipleLotNo,SelectEntries,SelectSerialNo,SelectLotNo';
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create Item with Lot Item Tracking. Create and Post Item Journal Line.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateTrackedItemAndUpdateInventoryOnLocationWithBin(
        Item,Bin,Quantity,TRUE,FALSE,FALSE,LibraryUtility.GetGlobalNoSeriesCode,'',ItemTrackingMode::AssignMultipleLotNo,FALSE);
      GetLotNoFromItemTrackingPageHandler(LotNo);
      GetLotNoFromItemTrackingPageHandler(LotNo2);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::SelectEntries);   // Enqueue for ItemTrackingLinesPageHandler.

      // Exercise.
      CreateAndPostJobJournalLine(Bin,Item."No.",Quantity);

      // Verify: Verify Item Ledger Entry and Warehouse Entry.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::"Positive Adjmt.",ItemLedgerEntry."Document Type",LocationSilver.Code,Item."No.",LotNo,'',
        Quantity / 2);  // Calculated Value Required.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::"Positive Adjmt.",ItemLedgerEntry."Document Type",LocationSilver.Code,Item."No.",LotNo2,'',
        Quantity / 2);  // Calculated Value Required.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::"Negative Adjmt.",ItemLedgerEntry."Document Type",LocationSilver.Code,Item."No.",LotNo,'',
        -Quantity / 2);  // Calculated Value Required.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::"Negative Adjmt.",ItemLedgerEntry."Document Type",LocationSilver.Code,Item."No.",LotNo2,'',
        -Quantity / 2);  // Calculated Value Required.
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::"Negative Adjmt.",WarehouseEntry."Source Document"::"Job Jnl.",Item."No.",Bin.Code,LotNo,
        -Quantity / 2,FALSE);  // Calculated Value Required.
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::"Negative Adjmt.",WarehouseEntry."Source Document"::"Job Jnl.",Item."No.",Bin.Code,LotNo2,
        -Quantity / 2,FALSE);  // Calculated Value Required.
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::"Positive Adjmt.",WarehouseEntry."Source Document"::"Item Jnl.",Item."No.",Bin.Code,LotNo,
        Quantity / 2,FALSE);  // Calculated Value Required.
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::"Positive Adjmt.",WarehouseEntry."Source Document"::"Item Jnl.",Item."No.",Bin.Code,LotNo2,
        Quantity / 2,FALSE);  // Calculated Value Required.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,MessageHandler)]
    PROCEDURE InventoryMovementFromRPOWithBOMAndSerial@79();
    BEGIN
      // Setup.
      Initialize;
      PostConsumpAfterRegisterMovementFromRPOWithSerial(FALSE,FALSE,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,MessageHandler)]
    PROCEDURE ErrorOnRegisterMovementWithWrongSerial@78();
    BEGIN
      // Setup.
      Initialize;
      PostConsumpAfterRegisterMovementFromRPOWithSerial(TRUE,FALSE,FALSE,FALSE);  // Register Movement Error as TRUE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,MessageHandler)]
    PROCEDURE RegisterInventoryMovementFromRPOWithSerial@76();
    BEGIN
      // Setup.
      Initialize;
      PostConsumpAfterRegisterMovementFromRPOWithSerial(TRUE,TRUE,FALSE,FALSE);  // Register Movement Error and Register Movement as TRUE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,MessageHandler,ProductionJournalPageHandler,ConfirmHandler)]
    PROCEDURE ErrorOnPostingConsumptionWithWrongSerial@75();
    BEGIN
      // Setup.
      Initialize;
      PostConsumpAfterRegisterMovementFromRPOWithSerial(TRUE,TRUE,TRUE,FALSE);  // Register Movement Error, Register Movement and Post Consumption Error as TRUE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,MessageHandler,ProductionJournalPageHandler,ConfirmHandler)]
    PROCEDURE PostConsumptionJournalWithSerial@46();
    BEGIN
      // Setup.
      Initialize;
      PostConsumpAfterRegisterMovementFromRPOWithSerial(TRUE,TRUE,TRUE,TRUE);  // Register Movement Error, Register Movement, Post Consumption Error and Post Consumption as TRUE.
    END;

    LOCAL PROCEDURE PostConsumpAfterRegisterMovementFromRPOWithSerial@66(RegisterMovementError@1014 : Boolean;RegisterMovement@1013 : Boolean;PostConsumptionError@1009 : Boolean;PostConsumption@1007 : Boolean);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1001 : Record 27;
      Bin@1002 : Record 7354;
      ProductionOrder@1008 : Record 5405;
      ProdOrderComponent@1010 : Record 5407;
      WarehouseActivityLine@1012 : Record 5767;
      ProdOrderLine@1006 : Record 5406;
      BinCode@1003 : Code[20];
      ItemTrackingMode@1005 : ' ,AssignLotNo,AssignSerialNo,AssignMultipleLotNo,SelectEntries,SelectSerialNo,SelectLotNo';
      Quantity@1004 : Decimal;
    BEGIN
      // Create Item with Serial Item Tracking code. Create Item with Production BOM. Create and Post Item Journal Line. Create and Refresh Released Production Order. Update Bin on Production Order Component Line.
      Quantity := 1 + LibraryRandom.RandInt(5);  // Value required for multiple Serial Nos.
      CreateItemWithProductionBOM(ParentItem,ChildItem,Quantity,FALSE,TRUE,LibraryUtility.GetGlobalNoSeriesCode);  // TRUE for Serial.
      FindBin(Bin,LocationGreen);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignSerialNo);  // Enqueue for ItemTrackingLinesPageHandler.
      CreateAndPostItemJournalLine(Bin."Location Code",Bin.Code,ChildItem."No.",'',Quantity * Quantity * 2,TRUE,TRUE);  // Large Quantity required for test. Update Expiration Date and Use Tracking as TRUE.
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Bin,ParentItem."No.",Quantity);
      BinCode := UpdateBinCodeOnProductionOrderComponent(ProdOrderComponent,Bin,ProductionOrder);

      // Exercise.
      CreateInventoryMovement(ProductionOrder."No.");

      // Verify:
      VerifyInventoryMovementLinesForProdConsumption(
        WarehouseActivityLine."Action Type"::Take,ChildItem."No.",ProductionOrder."No.",BinCode,1,Quantity * Quantity);  // Value 1 required for Serial Quantity.
      VerifyInventoryMovementLinesForProdConsumption(
        WarehouseActivityLine."Action Type"::Place,ChildItem."No.",ProductionOrder."No.",Bin.Code,1,Quantity * Quantity);  // Value 1 required for Serial Quantity.

      IF RegisterMovementError THEN BEGIN
        // Exercise: Update Wrong Serial No. on Inventory Movement Lines and handle the Error.
        UpdateSerialNoOnInventoryMovementLines(ChildItem."No.",WarehouseActivityLine."Action Type"::Take,ProductionOrder."No.",FALSE);  // Move Next as FALSE.
        UpdateSerialNoOnInventoryMovementLines(ChildItem."No.",WarehouseActivityLine."Action Type"::Place,ProductionOrder."No.",TRUE);  // Move Next as TRUE.
        ASSERTERROR RegisterWarehouseActivity(
            WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",
            WarehouseActivityLine."Activity Type"::"Invt. Movement");

        // Verify: Error message.
        Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(TotalBaseQuantityError,1)) > 0,GETLASTERRORTEXT);  // Value 1 required for Serial Quantity.
      END;

      IF RegisterMovement THEN BEGIN
        // Exercise: Update Serial No. on Inventory Movement Lines and Register Inventory Movement.
        UpdateSerialNoOnInventoryMovementLines(ChildItem."No.",WarehouseActivityLine."Action Type"::Take,ProductionOrder."No.",FALSE);  // Move Next as FALSE.
        UpdateSerialNoOnInventoryMovementLines(ChildItem."No.",WarehouseActivityLine."Action Type"::Place,ProductionOrder."No.",FALSE);  // Move Next as FALSE.
        RegisterWarehouseActivity(
          WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",
          WarehouseActivityLine."Activity Type"::"Invt. Movement");

        // Verify.
        VerifyProductionOrderComponent(ProdOrderComponent,Quantity * Quantity,Quantity * Quantity,Bin.Code);  // Value required for test.
      END;

      IF PostConsumptionError THEN BEGIN
        // Exercise: Open Production Journal from Production Order Line and Update Wrong Serial No. on Consumption.
        FindProductionOrderLine(ProdOrderLine,ProductionOrder);
        EnqueueValuesForProductionJournalHandler(ItemTrackingMode::SelectSerialNo,ChildItem."No.",0);
        ASSERTERROR LibraryManufacturing.OpenProductionJournal(ProductionOrder,ProdOrderLine."Line No.");

        // Verify.
        Assert.ExpectedError(WrongQuantityBaseErr);
      END;

      IF PostConsumption THEN BEGIN
        // Exercise: Open Production Journal from Production Order Line and Update Serial No. on Consumption.
        LibraryVariableStorage.Enqueue(ItemTrackingMode);  // Enqueue for ItemTrackingLinesPageHandler.
        LibraryVariableStorage.Enqueue(PostJournalLinesConfirmationMessage);  // Enqueue for ConfirmHandler.
        LibraryVariableStorage.Enqueue(JournalLinesPostedMessage);  // Enqueue for MessageHandler.
        LibraryManufacturing.OpenProductionJournal(ProductionOrder,ProdOrderLine."Line No.");  // Posting is done in ProductionJournalPageHandler.

        // Verify.
        VerifyProductionOrderComponent(ProdOrderComponent,Quantity * Quantity,0,Bin.Code);  // Value required for test.
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,MessageHandler)]
    PROCEDURE InventoryMovementFromRPOWithBOMAndLot@112();
    BEGIN
      // Setup.
      Initialize;
      PostConsumptionAfterRegisterMovementFromRPOWithLot(FALSE,FALSE,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,MessageHandler)]
    PROCEDURE ErrorOnRegisterMovementWithWrongLot@111();
    BEGIN
      // Setup.
      Initialize;
      PostConsumptionAfterRegisterMovementFromRPOWithLot(TRUE,FALSE,FALSE,FALSE);  // Register Movement Error as TRUE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,MessageHandler)]
    PROCEDURE RegisterInventoryMovementFromRPOWithLot@108();
    BEGIN
      // Setup.
      Initialize;
      PostConsumptionAfterRegisterMovementFromRPOWithLot(TRUE,TRUE,FALSE,FALSE);  // Register Movement Error and Register Movement as TRUE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,MessageHandler,ProductionJournalPageHandler,ConfirmHandler)]
    PROCEDURE ErrorOnPostingConsumptionWithWrongLot@106();
    BEGIN
      // Setup.
      Initialize;
      PostConsumptionAfterRegisterMovementFromRPOWithLot(TRUE,TRUE,TRUE,FALSE);  // Register Movement Error, Register Movement and Post Consumption Error as TRUE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,MessageHandler,ProductionJournalPageHandler,ConfirmHandler)]
    PROCEDURE PostConsumptionJournalWithLot@103();
    BEGIN
      // Setup.
      Initialize;
      PostConsumptionAfterRegisterMovementFromRPOWithLot(TRUE,TRUE,TRUE,TRUE);  // Register Movement Error, Register Movement, Post Consumption Error and Post Consumption as TRUE.
    END;

    LOCAL PROCEDURE PostConsumptionAfterRegisterMovementFromRPOWithLot@101(RegisterMovementError@1015 : Boolean;RegisterMovement@1016 : Boolean;PostConsumptionError@1017 : Boolean;PostConsumption@1018 : Boolean);
    VAR
      Bin@1005 : Record 7354;
      ParentItem@1000 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ProdOrderLine@1014 : Record 5406;
      ChildItem@1001 : Record 27;
      ProdOrderComponent@1010 : Record 5407;
      WarehouseActivityLine@1012 : Record 5767;
      LotNo@1006 : Variant;
      LotNo2@1007 : Variant;
      Quantity@1003 : Decimal;
      ItemTrackingMode@1004 : ' ,AssignLotNo,AssignSerialNo,AssignMultipleLotNo,SelectEntries,SelectSerialNo,SelectLotNo';
      BinCode@1011 : Code[20];
    BEGIN
      // Create Item with Lot Item Tracking code. Create Item with Production BOM. Create and Post Item Journal Line. Create and Refresh Released Production Order. Update Bin on Production Order Component Line.
      Quantity := LibraryRandom.RandInt(10);
      FindBin(Bin,LocationGreen);
      CreateItemWithProductionBOM(ParentItem,ChildItem,Quantity,TRUE,FALSE,'');  // TRUE for Lot.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignMultipleLotNo);  // Enqueue for ItemTrackingLinesPageHandler.
      CreateAndPostItemJournalLine(Bin."Location Code",Bin.Code,ChildItem."No.",'',Quantity * Quantity * 2,TRUE,TRUE);  // Value required for test. Update Expiration Date and Use Tracking as TRUE.
      LibraryVariableStorage.Dequeue(LotNo);
      LibraryVariableStorage.Dequeue(LotNo2);
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Bin,ParentItem."No.",Quantity);
      BinCode := UpdateBinCodeOnProductionOrderComponent(ProdOrderComponent,Bin,ProductionOrder);

      // Exercise.
      CreateInventoryMovement(ProductionOrder."No.");

      // Verify.
      VerifyInventoryMovementLinesForProdConsumption(
        WarehouseActivityLine."Action Type"::Take,ChildItem."No.",ProductionOrder."No.",BinCode,Quantity * Quantity,
        Quantity * Quantity);  // Value required for verification.
      VerifyInventoryMovementLinesForProdConsumption(
        WarehouseActivityLine."Action Type"::Place,ChildItem."No.",ProductionOrder."No.",Bin.Code,Quantity * Quantity,
        Quantity * Quantity);  // Value required for verification.

      IF RegisterMovementError THEN BEGIN
        // Exercise: Update wrong Lot No. and handle the Error.
        UpdateLotNoOnInventoryMovementLine(WarehouseActivityLine."Action Type"::Take,ProductionOrder."No.",LotNo);
        UpdateLotNoOnInventoryMovementLine(WarehouseActivityLine."Action Type"::Place,ProductionOrder."No.",LotNo2);
        ASSERTERROR RegisterWarehouseActivity(
            WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",
            WarehouseActivityLine."Activity Type"::"Invt. Movement");

        // Verify: Error message.
        Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(TotalBaseQuantityError,Quantity * Quantity)) > 0,GETLASTERRORTEXT);  // Value required for test.
      END;

      IF RegisterMovement THEN BEGIN
        // Exercise.
        UpdateLotNoOnInventoryMovementLine(WarehouseActivityLine."Action Type"::Take,ProductionOrder."No.",LotNo);
        UpdateLotNoOnInventoryMovementLine(WarehouseActivityLine."Action Type"::Place,ProductionOrder."No.",LotNo);
        RegisterWarehouseActivity(
          WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",
          WarehouseActivityLine."Activity Type"::"Invt. Movement");

        // Verify.
        VerifyProductionOrderComponent(ProdOrderComponent,Quantity * Quantity,Quantity * Quantity,Bin.Code);  // Value required for verification.
      END;

      IF PostConsumptionError THEN BEGIN
        // Exercise.
        FindProductionOrderLine(ProdOrderLine,ProductionOrder);
        EnqueueValuesForProductionJournalHandler(ItemTrackingMode::SelectLotNo,LotNo2,Quantity);
        ASSERTERROR LibraryManufacturing.OpenProductionJournal(ProductionOrder,ProdOrderLine."Line No.");

        // Verify.
        Assert.ExpectedError(WrongQuantityBaseErr);
      END;

      IF PostConsumption THEN BEGIN
        // Exercise.
        EnqueueValuesForProductionJournalHandler(ItemTrackingMode::SelectLotNo,LotNo,Quantity);
        LibraryVariableStorage.Enqueue(JournalLinesPostedMessage);  // Enqueue for MessageHandler.
        LibraryManufacturing.OpenProductionJournal(ProductionOrder,ProdOrderLine."Line No.");  // Posting is done in ProductionJournalPageHandler.

        // Verify.
        VerifyProductionOrderComponent(ProdOrderComponent,Quantity * Quantity,0,Bin.Code);  // Value required for verification.
      END;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoSalesShipmentLineAfterPostSalesOrder@120();
    BEGIN
      // Setup.
      Initialize;
      PostTransferOrderAfterUndoSalesShipment(FALSE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ErrorOnPostingTransferOrderAfterUndoShipment@119();
    BEGIN
      // Setup.
      Initialize;
      PostTransferOrderAfterUndoSalesShipment(TRUE);  // TRUE for Transfer Order.
    END;

    LOCAL PROCEDURE PostTransferOrderAfterUndoSalesShipment@118(TransferOrder@1006 : Boolean);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      TransferHeader@1005 : Record 5740;
      PostedDocumentNo@1004 : Code[20];
    BEGIN
      // Create Item. Create and Post Sales Order as SHIP.
      LibraryInventory.CreateItem(Item);
      CreateSalesOrder(SalesHeader,SalesLine,'',Item."No.",LibraryRandom.RandDec(10,2),'',FALSE);
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);  // Post as SHIP.

      // Exercise.
      UndoSalesShipmentLine(PostedDocumentNo);

      // Verify.
      VerifySalesShipmentLine(PostedDocumentNo,Item."No.",SalesLine.Quantity,FALSE);
      VerifySalesShipmentLine(PostedDocumentNo,Item."No.",-SalesLine.Quantity,TRUE);  // MoveNext as TRUE.

      IF TransferOrder THEN BEGIN
        // Exercise.
        ASSERTERROR CreateAndPostTransferOrder(TransferHeader,SalesLine,LocationBlack.Code,LocationOrange.Code);

        // Verify.
        Assert.ExpectedError(STRSUBSTNO(ItemNotOnInventoryError,Item."No."));
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandler)]
    PROCEDURE UndoPostedPurchaseReceiptWithLocationAndSerial@117();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1003 : Record 38;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Update Use Put-away Worksheet on Location. Create and post Warehouse Receipt from Purchase Order with Serial No.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      CreateItemWithItemTrackingCode(Item,FALSE,FALSE,FALSE,'',LibraryUtility.GetGlobalNoSeriesCode);
      UpdateUsePutAwayWorksheetOnLocation(LocationYellow,TRUE);
      CreateWarehouseReceiptFromPurchaseOrder(PurchaseHeader,Item."No.",Quantity,LocationYellow.Code,TRUE);  // Use Tracking as TRUE.
      PostWarehouseReceipt(PurchaseHeader."No.");

      // Exercise.
      UndoPurchaseReceiptLine(Item."No.");

      // Verify.
      VerifyPurchRcptLine(PurchaseHeader."No.",Item."No.",LocationYellow.Code,Quantity,FALSE);
      VerifyPurchRcptLine(PurchaseHeader."No.",Item."No.",LocationYellow.Code,-Quantity,TRUE);  // MoveNext as TRUE.

      // Tear Down.
      UpdateUsePutAwayWorksheetOnLocation(LocationYellow,FALSE);
    END;

    [Test]
    PROCEDURE ErrorOnUpdatingQuantityToShipOnSalesOrder@138();
    VAR
      SalesOrder@1003 : TestPage 42;
    BEGIN
      // Setup: Create Sales Order by page.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);
      CreateSalesOrderByPage(SalesOrder,LocationWhite.Code);

      // Exercise.
      ASSERTERROR SalesOrder.SalesLines."Qty. to Ship".SETVALUE(LibraryRandom.RandDec(10,2));

      // Verify.
      Assert.ExpectedError(WarehouseShipmentRequiredError);
    END;

    [Test]
    PROCEDURE ErrorOnUpdatingQuantityOnSalesInvoice@137();
    VAR
      SalesInvoice@1003 : TestPage 43;
    BEGIN
      // Setup: Create Sales Invoice by page.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);
      CreateSalesInvoiceWithSalesLineByPage(SalesInvoice,LocationWhite.Code);

      // Exercise.
      ASSERTERROR SalesInvoice.SalesLines.Quantity.SETVALUE(LibraryRandom.RandDec(10,2));

      // Verify.
      Assert.ExpectedError(WarehouseShipmentRequiredError);
    END;

    [Test]
    PROCEDURE ErrorOnUpdatingReturnQuantityOnSalesReturnOrder@134();
    VAR
      SalesReturnOrder@1003 : TestPage 6630;
    BEGIN
      // Setup: Create Sales Return Order by page.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);
      CreateSalesReturnOrderByPage(SalesReturnOrder,LocationWhite.Code);

      // Exercise.
      COMMIT;
      ASSERTERROR SalesReturnOrder.SalesLines."Return Qty. to Receive".SETVALUE(LibraryRandom.RandDec(10,2));

      // Verify.
      Assert.ExpectedError(WarehouseReceiveRequiredError);
    END;

    [Test]
    PROCEDURE ErrorOnUpdatingQuantityOnSalesCreditMemo@133();
    VAR
      SalesCreditMemo@1003 : TestPage 44;
    BEGIN
      // Setup: Create Sales Credit Memo by page.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);
      CreateSalesCreditMemoByPage(SalesCreditMemo,LocationWhite.Code);

      // Exercise.
      ASSERTERROR SalesCreditMemo.SalesLines.Quantity.SETVALUE(LibraryRandom.RandDec(10,2));

      // Verify.
      Assert.ExpectedError(WarehouseReceiveRequiredError);
    END;

    [Test]
    PROCEDURE ErrorOnUpdatingQuantityToReceiveOnPurchaseOrder@132();
    VAR
      PurchaseOrder@1002 : TestPage 50;
    BEGIN
      // Setup: Create Purchase Order by page.
      Initialize;
      CreatePurchaseOrderByPage(PurchaseOrder,LocationWhite.Code);

      // Exercise.
      COMMIT;
      ASSERTERROR PurchaseOrder.PurchLines."Qty. to Receive".SETVALUE(LibraryRandom.RandDec(10,2));

      // Verify.
      Assert.ExpectedError(WarehouseReceiveRequiredError);
    END;

    [Test]
    PROCEDURE ErrorOnUpdatingQuantityOnPurchaseInvoice@131();
    VAR
      PurchaseInvoice@1002 : TestPage 51;
    BEGIN
      // Setup: Create Purchase Invoice by page.
      Initialize;
      CreatePurchaseInvoiceByPage(PurchaseInvoice,LocationWhite.Code);

      // Exercise.
      COMMIT;
      ASSERTERROR PurchaseInvoice.PurchLines.Quantity.SETVALUE(LibraryRandom.RandDec(10,2));

      // Verify.
      Assert.ExpectedError(WarehouseReceiveRequiredError);
    END;

    [Test]
    PROCEDURE ErrorOnUpdatingReturnQuantityOnPurchaseReturnOrder@100();
    VAR
      PurchaseReturnOrder@1001 : TestPage 6640;
    BEGIN
      // Setup: Create Purchase Return Order by page.
      Initialize;
      CreatePurchaseReturnOrderByPage(PurchaseReturnOrder,LocationWhite.Code);

      // Exercise.
      ASSERTERROR PurchaseReturnOrder.PurchLines."Return Qty. to Ship".SETVALUE(LibraryRandom.RandDec(10,2));

      // Verify.
      Assert.ExpectedError(WarehouseShipmentRequiredError);
    END;

    [Test]
    PROCEDURE ErrorOnUpdatingQuantityOnPurchaseCreditMemo@93();
    VAR
      PurchaseCreditMemo@1001 : TestPage 52;
    BEGIN
      // Setup: Create Purchase Credit Memo by page.
      Initialize;
      CreatePurchaseCreditMemoByPage(PurchaseCreditMemo,LocationWhite.Code);

      // Exercise.
      ASSERTERROR PurchaseCreditMemo.PurchLines.Quantity.SETVALUE(LibraryRandom.RandDec(10,2));

      // Verify.
      Assert.ExpectedError(WarehouseShipmentRequiredError);
    END;

    [Test]
    PROCEDURE PostSalesOrderAsInvoice@161();
    BEGIN
      // Setup.
      Initialize;
      SalesReturnOrderWithGetPostedDocLinesToReverse(FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(PostedSalesDocumentLinesHandler)]
    PROCEDURE PostSalesReturnOrderAsReceive@160();
    BEGIN
      // Setup.
      Initialize;
      SalesReturnOrderWithGetPostedDocLinesToReverse(TRUE,FALSE);  // Receive Return Order as TRUE.
    END;

    [Test]
    [HandlerFunctions(PostedSalesDocumentLinesHandler,ConfirmHandler)]
    PROCEDURE PostSalesReturnOrderAfterUndoReturnReceipt@159();
    BEGIN
      // Setup.
      Initialize;
      SalesReturnOrderWithGetPostedDocLinesToReverse(TRUE,TRUE);  // Invoice Return Order as TRUE.
    END;

    LOCAL PROCEDURE SalesReturnOrderWithGetPostedDocLinesToReverse@158(ReceiveReturnOrder@1011 : Boolean;InvoiceReturnOrder@1012 : Boolean);
    VAR
      Item@1002 : Record 27;
      Customer@1006 : Record 18;
      CustomerPostingGroup@1005 : Record 92;
      GeneralPostingSetup@1004 : Record 252;
      ItemLedgerEntry@1008 : Record 32;
      SalesHeader@1001 : Record 36;
      SalesHeader2@1007 : Record 36;
      SalesLine@1000 : Record 37;
      PostedDocumentNo@1003 : Code[20];
      Quantity@1009 : Decimal;
    BEGIN
      // Create Item. Create Customer. Create Sales Order.
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateCustomer(Customer);
      CreateSalesOrder(SalesHeader,SalesLine,Customer."No.",Item."No.",Quantity,'',FALSE);
      CustomerPostingGroup.GET(Customer."Customer Posting Group");
      GeneralPostingSetup.GET(Customer."Gen. Bus. Posting Group",Item."Gen. Prod. Posting Group");

      // Exercise.
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);  // Post as SHIP and INVOICE.

      // Verify.
      VerifyGLEntry(PostedDocumentNo,GeneralPostingSetup."Sales Account",-SalesLine."Line Amount",FALSE);
      VerifyGLEntry(PostedDocumentNo,CustomerPostingGroup."Receivables Account",SalesLine."Amount Including VAT",FALSE);

      IF ReceiveReturnOrder THEN BEGIN
        // Exercise.
        PostedDocumentNo := PostSalesReturnOrderWithGetPostedDocLinesToReverse(SalesHeader2,Customer."No.");

        // Verify.
        VerifyItemLedgerEntry(
          ItemLedgerEntry."Entry Type"::Sale,ItemLedgerEntry."Document Type"::"Sales Return Receipt",'',Item."No.",'','',Quantity);
      END;

      IF InvoiceReturnOrder THEN BEGIN
        // Exercise.
        UndoReturnReceiptLine(PostedDocumentNo);
        LibrarySales.ReopenSalesDocument(SalesHeader2);
        FindSalesReturnOrderLine(SalesLine,SalesHeader2."No.",Item."No.");
        UpdateQuantityOnSalesLine(SalesLine,Quantity / 2);  // Partial value required for test.
        PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader2,TRUE,TRUE);  // Post as RECEIVE and INVOICE.

        // Verify.
        VerifyGLEntry(PostedDocumentNo,GeneralPostingSetup."Sales Account",SalesLine."Line Amount",FALSE);
        VerifyGLEntry(PostedDocumentNo,CustomerPostingGroup."Receivables Account",-SalesLine."Amount Including VAT",FALSE);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE PostPurchaseOrderWithLot@157();
    BEGIN
      // Setup.
      Initialize;
      SalesReturnOrderWithGetPostedDocLinesAndLot(FALSE,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostSalesOrderWithLot@156();
    BEGIN
      // Setup.
      Initialize;
      SalesReturnOrderWithGetPostedDocLinesAndLot(TRUE,FALSE,FALSE);  // Post Sales Order as TRUE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,PostedSalesDocumentLinesHandler)]
    PROCEDURE PostSalesReturnOrderAsReceiveWithLot@155();
    BEGIN
      // Setup.
      Initialize;
      SalesReturnOrderWithGetPostedDocLinesAndLot(TRUE,TRUE,FALSE);  // Post Sales Order and Receive Return Order as TRUE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,PostedSalesDocumentLinesHandler,ConfirmHandler)]
    PROCEDURE PostSalesReturnOrderAfterUndoReturnReceiptWithLot@154();
    BEGIN
      // Setup.
      Initialize;
      SalesReturnOrderWithGetPostedDocLinesAndLot(TRUE,TRUE,TRUE);  // Post Sales Order, Receive Return Order and Invoice Return Order as TRUE.
    END;

    LOCAL PROCEDURE SalesReturnOrderWithGetPostedDocLinesAndLot@153(PostSalesOrder@1017 : Boolean;ReceiveReturnOrder@1016 : Boolean;InvoiceReturnOrder@1015 : Boolean);
    VAR
      Customer@1010 : Record 18;
      Item@1009 : Record 27;
      CustomerPostingGroup@1007 : Record 92;
      GeneralPostingSetup@1006 : Record 252;
      ItemLedgerEntry@1005 : Record 32;
      PurchaseHeader@1011 : Record 38;
      SalesHeader@1004 : Record 36;
      SalesHeader2@1003 : Record 36;
      SalesLine@1002 : Record 37;
      LotNo@1014 : Variant;
      PostedDocumentNo@1001 : Code[20];
      Quantity@1000 : Decimal;
    BEGIN
      // Create Item with Lot specific tracking. Create Purchase Order and assign Lot No.
      Quantity := LibraryRandom.RandInt(50);
      CreateItemWithItemTrackingCode(Item,TRUE,FALSE,FALSE,LibraryUtility.GetGlobalNoSeriesCode,'');  // TRUE for Lot.
      CreatePurchaseOrderWithLot(PurchaseHeader,Item."No.",Quantity);
      LibraryVariableStorage.Dequeue(LotNo);

      // Exercise.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);  // Post as RECEIVE and INVOICE.

      // Verify.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Purchase,ItemLedgerEntry."Document Type"::"Purchase Receipt",'',Item."No.",LotNo,'',Quantity);

      IF PostSalesOrder THEN BEGIN
        // Exercise.
        LibrarySales.CreateCustomer(Customer);
        CreateAndPostSalesOrderWithItemTracking(SalesHeader,Customer."No.",Item."No.",Quantity);

        // Verify.
        VerifyItemLedgerEntry(
          ItemLedgerEntry."Entry Type"::Sale,ItemLedgerEntry."Document Type"::"Sales Shipment",'',Item."No.",LotNo,'',-Quantity);
      END;

      IF ReceiveReturnOrder THEN BEGIN
        // Exercise.
        PostedDocumentNo := PostSalesReturnOrderWithGetPostedDocLinesToReverse(SalesHeader2,Customer."No.");

        // Verify.
        VerifyItemLedgerEntry(
          ItemLedgerEntry."Entry Type"::Sale,ItemLedgerEntry."Document Type"::"Sales Return Receipt",'',Item."No.",LotNo,'',Quantity);
      END;

      IF InvoiceReturnOrder THEN BEGIN
        // Exercise.
        UndoReturnReceiptLine(PostedDocumentNo);
        UpdateQuantityOnSalesAndReservationLine(SalesHeader2,SalesLine,Item."No.",Quantity / 2);  // Partial value required for test.

        PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader2,TRUE,TRUE);  // Post as RECEIVE and INVOICE.
        CustomerPostingGroup.GET(Customer."Customer Posting Group");
        GeneralPostingSetup.GET(Customer."Gen. Bus. Posting Group",Item."Gen. Prod. Posting Group");

        // Verify.
        VerifyItemLedgerEntry(
          ItemLedgerEntry."Entry Type"::Sale,ItemLedgerEntry."Document Type"::"Sales Return Receipt",'',Item."No.",LotNo,'',
          Quantity / 2);  // Partial value required for verification.
        VerifyGLEntry(PostedDocumentNo,GeneralPostingSetup."Sales Account",SalesLine."Line Amount",FALSE);
        VerifyGLEntry(PostedDocumentNo,CustomerPostingGroup."Receivables Account",-SalesLine."Amount Including VAT",FALSE);
      END;
    END;

    [Test]
    PROCEDURE WarehouseReceiptWithMultipleLines@180();
    BEGIN
      // Setup.
      Initialize;
      CalcCrossDockOnWhseReceiptAndRegisterPutAway(FALSE,FALSE,FALSE);  // Cross Dock, Post Receipt and Register Put Away as FALSE.
    END;

    [Test]
    PROCEDURE CalcCrossDockOnWarehouseReceiptWithMultipleLines@179();
    BEGIN
      // Setup.
      Initialize;
      CalcCrossDockOnWhseReceiptAndRegisterPutAway(TRUE,FALSE,FALSE);  // Cross Dock as TRUE. Post Receipt and Register Put Away as FALSE.
    END;

    [Test]
    [HandlerFunctions(SourceDocumentsPageHandler)]
    PROCEDURE CalcCrossDockOnWhseRcptWthLineBasedOnSpecOrder@234();
    VAR
      Item@1006 : Record 27;
      SalesHeader@1009 : Record 36;
      WhseCrossDockOpportunity@1019 : Record 5768;
      WhseRcptNo@1010 : Code[20];
      MaxInventoryQty@1004 : Decimal;
      SalesQty@1011 : Decimal;
    BEGIN
      // [FEATURE] [Warehouse Receipt] [Cross-Docking] [Special Order] [Requisition Worksheet]
      // [SCENARIO 378380] "Qty To Cross-Dock" should be equal to "Qty. to Receive" in Whse Receipt Line with Special Order after Calculating Cross-Dock if this line goes after line with Max Inventory
      Initialize;

      // [GIVEN] Item with Reordering Policy as "Maximum Qty.".
      CreateItemWithReorderPolicyAsMaxQty(Item,MaxInventoryQty,SalesQty);
      // [GIVEN] Create and release Sales Order as Special Order.
      CreateAndReleaseSpecialOrder(SalesHeader,Item."No.",SalesQty);
      // [GIVEN] Create Warehouse Receipt based on Purchase Orders with first line according to Reordering Policy and second based on Special Order.
      WhseRcptNo := CreateWhseRcpt(Item);

      // [WHEN] Calc Cross-Dock
      LibraryWarehouse.CalculateCrossDockLines(WhseCrossDockOpportunity,'',WhseRcptNo,LocationWhite.Code);

      // [THEN] "Qty To Cross-Dock" = 0 in Warehouse Receipt Line for Maximum Inventory.
      VerifyQtyToCrossDock(Item."No.",MaxInventoryQty,0);
      // [THEN] "Qty To Cross-Dock" = "Qty. to Receive" in Warehouse Receipt Line based on Special Order.
      VerifyQtyToCrossDock(Item."No.",SalesQty,SalesQty);
    END;

    [Test]
    PROCEDURE PostWhseReceiptAfterCalcCrossDockWithMultipleLines@178();
    BEGIN
      // Setup.
      Initialize;
      CalcCrossDockOnWhseReceiptAndRegisterPutAway(TRUE,TRUE,FALSE);  // Cross Dock and Post Receipt as TRUE. Register Put Away as FALSE.
    END;

    [Test]
    PROCEDURE RegisterPutAwayAfterCalcCrossDockWithMultipleLines@175();
    BEGIN
      // Setup.
      Initialize;
      CalcCrossDockOnWhseReceiptAndRegisterPutAway(TRUE,TRUE,TRUE);  // Cross Dock, Post Receipt and Register Put Away as TRUE.
    END;

    LOCAL PROCEDURE CalcCrossDockOnWhseReceiptAndRegisterPutAway@174(CrossDock@1010 : Boolean;PostReceipt@1011 : Boolean;RegisterPutaway@1012 : Boolean);
    VAR
      Bin@1009 : Record 7354;
      Item@1008 : Record 27;
      PurchaseHeader@1007 : Record 38;
      SalesHeader@1005 : Record 36;
      SalesLine@1004 : Record 37;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseEntry@1002 : Record 7312;
      Quantity@1001 : Decimal;
      Quantity2@1000 : Decimal;
    BEGIN
      // Create Item, Find Pick Bin. Create and Release Purchase Order with Multiple Lines. Create Warehouse Receipt.
      Quantity := LibraryRandom.RandDec(10,2);
      Quantity2 := Quantity + LibraryRandom.RandDec(10,2);  // Value Required for test.
      LibraryInventory.CreateItem(Item);
      FindPickBin(Bin,LocationWhite.Code);
      CreateAndReleasePurchaseOrderWithMultipleLines(PurchaseHeader,Item."No.",Quantity * 2,LocationWhite.Code,Quantity2);  // Value Required for test.
      CreateWarehouseReceipt(PurchaseHeader);

      // Exercise.
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,'',Item."No.",Quantity,LocationWhite.Code,FALSE);  // Reserve as FALSE.

      // Verify.
      VerifyWarehouseReceiptLine(PurchaseHeader."No.",Item."No.",Quantity * 2,0,LocationWhite.Code,FALSE);  // Value Required for test. Move Next as FALSE.
      VerifyWarehouseReceiptLine(PurchaseHeader."No.",Item."No.",Quantity2,0,LocationWhite.Code,TRUE);  // Value Required for test. Move Next as TRUE.

      IF CrossDock THEN BEGIN
        // Exercise.
        CalculateCrossDock(PurchaseHeader."No.");

        // Verify.
        VerifyWarehouseReceiptLine(PurchaseHeader."No.",Item."No.",Quantity * 2,Quantity,LocationWhite.Code,FALSE);  // Value Required for test. Move Next as FALSE.
        VerifyWarehouseReceiptLine(PurchaseHeader."No.",Item."No.",Quantity2,0,LocationWhite.Code,TRUE);  // Value Required for test. Move Next as TRUE.
      END;

      IF PostReceipt THEN BEGIN
        // Exercise.
        PostWarehouseReceipt(PurchaseHeader."No.");

        // Verify.
        // Take line for Receipt line that feeds the cross-dock.
        VerifyPutAwayLine(
          WarehouseActivityLine."Action Type"::Take,PurchaseHeader."No.",Item."No.",LocationWhite.Code,Quantity * 2,
          WarehouseActivityLine."Cross-Dock Information"::"Some Items Cross-Docked");
        // Take line for Receipt line that is not cross-docked.
        VerifyPutAwayLine(
          WarehouseActivityLine."Action Type"::Take,PurchaseHeader."No.",Item."No.",LocationWhite.Code,Quantity2,
          WarehouseActivityLine."Cross-Dock Information"::" ");

        // Place line for Cross-dock bin.
        VerifyPutAwayLine(
          WarehouseActivityLine."Action Type"::Place,PurchaseHeader."No.",Item."No.",LocationWhite.Code,Quantity,
          WarehouseActivityLine."Cross-Dock Information"::"Cross-Dock Items");
        // Place line for normal Pick bin.
        VerifyPutAwayLine(
          WarehouseActivityLine."Action Type"::Place,PurchaseHeader."No.",Item."No.",LocationWhite.Code,Quantity,
          WarehouseActivityLine."Cross-Dock Information"::"Some Items Cross-Docked");
        // Place line for non cross-docked Receipt line.
        VerifyPutAwayLine(
          WarehouseActivityLine."Action Type"::Place,PurchaseHeader."No.",Item."No.",LocationWhite.Code,Quantity2,
          WarehouseActivityLine."Cross-Dock Information"::" ");
      END;

      IF RegisterPutaway THEN BEGIN
        // Exercise: Update Bin Code on place Line and Register Put Away.
        UpdateBinCodeOnPutAwayLine(Bin,PurchaseHeader."No.");
        RegisterWarehouseActivity(
          WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
          WarehouseActivityLine."Activity Type"::"Put-away");

        // Verify.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,WarehouseEntry."Source Document"::"P. Order",Item."No.",
          LocationWhite."Receipt Bin Code",'',-Quantity * 2,FALSE);  // Value Required for test. Move Next as FALSE.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,WarehouseEntry."Source Document"::"P. Order",Item."No.",
          LocationWhite."Cross-Dock Bin Code",'',Quantity,FALSE);  // Move Next as FALSE.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,WarehouseEntry."Source Document"::"P. Order",Item."No.",Bin.Code,'',Quantity,FALSE);  // Move Next as FALSE.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,WarehouseEntry."Source Document"::"P. Order",Item."No.",
          LocationWhite."Receipt Bin Code",'',-Quantity2,TRUE);  // Move Next as TRUE.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,WarehouseEntry."Source Document"::"P. Order",Item."No.",Bin.Code,'',Quantity2,TRUE);  // Move Next as TRUE.
      END;
    END;

    [Test]
    PROCEDURE TransferOrderWithVariantCode@173();
    BEGIN
      // Setup.
      Initialize;
      CreateAndPostTransferOrderWithVariantCode(FALSE);  // Post Transfer as FALSE.
    END;

    [Test]
    PROCEDURE PostTransferOrderWithVariantCode@176();
    BEGIN
      // Setup.
      Initialize;
      CreateAndPostTransferOrderWithVariantCode(TRUE);  // Post Transfer as TRUE.
    END;

    LOCAL PROCEDURE CreateAndPostTransferOrderWithVariantCode@177(PostTransferOrder@1006 : Boolean);
    VAR
      Item@1005 : Record 27;
      ItemVariant@1004 : Record 5401;
      TransferHeader@1003 : Record 5740;
      TransferLine@1002 : Record 5741;
      ItemLedgerEntry@1001 : Record 32;
      Quantity@1000 : Decimal;
    BEGIN
      // Create Item with Variant. Create and Post Item Journal Line with Variant. Create Transfer Order.
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithVariant(Item,ItemVariant);
      CreateAndPostItemJournalLine(LocationBlack.Code,'',Item."No.",ItemVariant.Code,Quantity,FALSE,FALSE);  // Update Expiration Date and Use Tracking as FALSE.
      CreateTransferOrder(TransferHeader,TransferLine,LocationBlack.Code,LocationOrange.Code,Item."No.",Quantity);

      // Exerise.
      UpdateVariantCodeOnTransferLine(TransferLine,ItemVariant.Code);

      // Verify.
      TransferLine.TESTFIELD("Variant Code",ItemVariant.Code);

      IF PostTransferOrder THEN BEGIN
        // Exercise.
        LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,TRUE);  // Post as Ship and Receive.

        // Verify.
        VerifyItemLedgerEntry(
          ItemLedgerEntry."Entry Type"::Transfer,ItemLedgerEntry."Document Type"::"Transfer Shipment",LocationBlack.Code,Item."No.",
          '',ItemVariant.Code,-Quantity);
        VerifyItemLedgerEntry(
          ItemLedgerEntry."Entry Type"::Transfer,ItemLedgerEntry."Document Type"::"Transfer Shipment",LocationInTransit.Code,
          Item."No.",'',ItemVariant.Code,Quantity);
        VerifyItemLedgerEntry(
          ItemLedgerEntry."Entry Type"::Transfer,ItemLedgerEntry."Document Type"::"Transfer Receipt",LocationInTransit.Code,
          Item."No.",'',ItemVariant.Code,-Quantity);
        VerifyItemLedgerEntry(
          ItemLedgerEntry."Entry Type"::Transfer,ItemLedgerEntry."Document Type"::"Transfer Receipt",LocationOrange.Code,Item."No.",
          '',ItemVariant.Code,Quantity);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE JobLedgerEntryWithManExpirDateEntryReqdTrue@167();
    BEGIN
      // Test No Error will appear while Posting Job Journal with Item Reversal when Man. Expir. Date Entry Reqd. is True.
      VerifyNoErrorForJobJnlReversal(TRUE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE JobLedgerEntryWithManExpirDateEntryReqdFalse@129();
    BEGIN
      // Test No Error will appear while Posting Job Journal with Item Reversal when Man. Expir. Date Entry Reqd. is False.
      VerifyNoErrorForJobJnlReversal(FALSE);
    END;

    [Test]
    [HandlerFunctions(CheckAvailabilityFormHandler)]
    PROCEDURE MakeSalesOrderAfterCreateInvoiceAndOrderLinkBlanketOrder@198();
    VAR
      SalesHeader@1002 : Record 36;
      SalesHeader2@1003 : Record 36;
      SalesHeader3@1001 : Record 36;
      BlanketOrderSalesLine@1006 : Record 37;
      PartialInvoicedQty@1000 : Integer;
    BEGIN
      // Setup: Create Blanket Sales Order, create Sales Invoice and Sales Order link to Blanket Sales Order with Partial quantity.
      Initialize;
      CreateSalesBlanketOrder(SalesHeader,BlanketOrderSalesLine,''); // Set Location to blank.
      PartialInvoicedQty := BlanketOrderSalesLine.Quantity / 2;
      CreateSalesDocumentLinkBlanketOrder(
        SalesHeader2,BlanketOrderSalesLine,PartialInvoicedQty / 2,SalesHeader2."Document Type"::Invoice);
      CreateSalesDocumentLinkBlanketOrder(
        SalesHeader3,BlanketOrderSalesLine,PartialInvoicedQty / 2,SalesHeader3."Document Type"::Order);

      // Exercise and Verify: Pops up an error that Sales Order cannot be made.
      MakeSalesOrderAndVerifyErr(SalesHeader,BlanketOrderSalesLine,(BlanketOrderSalesLine.Quantity - PartialInvoicedQty));

      // Reduce the Quantity to Ship on Sales Line then Make Sales Order.
      BlanketOrderSalesLine.VALIDATE("Qty. to Ship",(BlanketOrderSalesLine.Quantity - PartialInvoicedQty));
      BlanketOrderSalesLine.MODIFY(TRUE);
      LibrarySales.BlanketSalesOrderMakeOrder(SalesHeader);

      // Post Sales Invoice and the Sales Order linked Blanket Order.
      LibrarySales.PostSalesDocument(SalesHeader2,FALSE,FALSE);
      LibrarySales.PostSalesDocument(SalesHeader3,TRUE,TRUE);

      // Exercise and Verify: Post the Sales Order made from Blanket Order successfully.
      PostSalesOrder(BlanketOrderSalesLine."Sell-to Customer No.");
    END;

    [Test]
    PROCEDURE MakePurchOrderAfterCreateInvoiceAndOrderLinkBlanketOrder@203();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseHeader2@1003 : Record 38;
      PurchaseHeader3@1000 : Record 38;
      BlanketOrderPurchaseLine@1006 : Record 39;
      PartialInvoicedQty@1001 : Integer;
    BEGIN
      // Setup: Create Blanket Purchase Order, create Purchase Invoice and Sales Order link to Blanket Purchase Order with Partial quantity.
      Initialize;
      CreatePurchaseBlanketOrder(PurchaseHeader,BlanketOrderPurchaseLine,''); // Set Location to blank.
      PartialInvoicedQty := BlanketOrderPurchaseLine.Quantity / 2;
      CreatePurchaseDocumentLinkBlanketOrder(
        PurchaseHeader2,BlanketOrderPurchaseLine,PartialInvoicedQty / 2,PurchaseHeader2."Document Type"::Invoice);
      CreatePurchaseDocumentLinkBlanketOrder(
        PurchaseHeader3,BlanketOrderPurchaseLine,PartialInvoicedQty / 2,PurchaseHeader3."Document Type"::Order);

      // Exercise and Verify: Pops up an error that Purchase Order cannot be made.
      MakePurchaseOrderAndVerifyErr(PurchaseHeader,BlanketOrderPurchaseLine,(BlanketOrderPurchaseLine.Quantity - PartialInvoicedQty));

      // Reduce the Quantity to Receive on Purchase Line then Make Purchase Order.
      BlanketOrderPurchaseLine.VALIDATE("Qty. to Receive",(BlanketOrderPurchaseLine.Quantity - PartialInvoicedQty));
      BlanketOrderPurchaseLine.MODIFY(TRUE);
      LibraryPurchase.BlanketPurchaseOrderMakeOrder(PurchaseHeader);

      // Post Purchase Invoice and the Sales Order linked Blanket Order.
      PostPurchaseDocument(PurchaseHeader2."Buy-from Vendor No.",PurchaseHeader2."Document Type"::Invoice,FALSE,FALSE);
      PostPurchaseDocument(PurchaseHeader3."Buy-from Vendor No.",PurchaseHeader3."Document Type"::Order,TRUE,TRUE);

      // Exercise and Verify: Post the Purchase Order made from Blanket Order successfully.
      PostPurchaseDocument(PurchaseHeader."Buy-from Vendor No.",PurchaseHeader3."Document Type"::Order,TRUE,TRUE);
    END;

    [Test]
    [HandlerFunctions(CheckAvailabilityFormHandler)]
    PROCEDURE MakeSalesOrderAfterCreateReturnOrderAndCreditMemoLinkBlanketOrder@209();
    VAR
      SalesHeader@1002 : Record 36;
      SalesHeader2@1003 : Record 36;
      SalesHeader3@1001 : Record 36;
      BlanketOrderSalesLine@1006 : Record 37;
      PartialShipQty@1000 : Integer;
    BEGIN
      // Setup: Create Blanket Sales Order, create Sales Credit Memo link to Blanket Sales Order.
      // Make Sales Order from Blanket Sales Order.
      Initialize;
      CreateSalesBlanketOrder(SalesHeader,BlanketOrderSalesLine,''); // Set Location to blank.
      LibrarySales.BlanketSalesOrderMakeOrder(SalesHeader);

      // Partial Post Sales Order, make the "Qty. to Ship" on Blanket Sales Order more than PartialShipQty.
      PartialShipQty := ROUND(BlanketOrderSalesLine.Quantity / 3,1);
      UpdateQtyToShipOnSalesLine(BlanketOrderSalesLine."Sell-to Customer No.",PartialShipQty);
      PostSalesOrder(BlanketOrderSalesLine."Sell-to Customer No.");
      CreateSalesDocumentLinkBlanketOrder(
        SalesHeader2,BlanketOrderSalesLine,PartialShipQty / 2,SalesHeader."Document Type"::"Return Order");
      CreateSalesDocumentLinkBlanketOrder(
        SalesHeader3,BlanketOrderSalesLine,PartialShipQty / 2,SalesHeader."Document Type"::"Credit Memo");

      // Exercise and Verify: Verify the error message when making Sales Order as
      // "Qty. to Ship" is more than the Quantity on the Sales Credit Memo add the Quantity on Sales Return Order.
      BlanketOrderSalesLine.FIND;
      MakeSalesOrderAndVerifyErr(SalesHeader,BlanketOrderSalesLine,PartialShipQty);

      // Reduce the Quantity to Ship on Sales Line then Make Sales Order.
      BlanketOrderSalesLine.VALIDATE("Qty. to Ship",PartialShipQty);
      BlanketOrderSalesLine.MODIFY(TRUE);
      LibrarySales.BlanketSalesOrderMakeOrder(SalesHeader);

      // Post Sales Return Order and Sales Credit Memo.
      LibrarySales.PostSalesDocument(SalesHeader2,TRUE,TRUE);
      LibrarySales.PostSalesDocument(SalesHeader3,FALSE,FALSE);

      // Exercise and Verify: the Sales Order made can be post successfully.
      PostSalesOrder(BlanketOrderSalesLine."Sell-to Customer No.");
    END;

    [Test]
    PROCEDURE MakePurchOrderAfterCreateReturnOrderAndCreditMemoLinkBlanketOrder@207();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseHeader2@1003 : Record 38;
      PurchaseHeader3@1000 : Record 38;
      BlanketOrderPurchaseLine@1006 : Record 39;
      PartialReceiveQty@1001 : Integer;
    BEGIN
      // Setup: Create Blanket Purchase Order,
      // create Purchase Credit Memo link to Blanket Purchase Order.
      // Make Purchase Order from Blanket Purchase Order.
      Initialize;
      CreatePurchaseBlanketOrder(PurchaseHeader,BlanketOrderPurchaseLine,''); // Set Location to blank.
      LibraryPurchase.BlanketPurchaseOrderMakeOrder(PurchaseHeader);

      // Partial Post Purchase Order, make the "Qty. to Receive" on the Blanket Purchase Order more than PartialReceiveQty.
      PartialReceiveQty := ROUND(BlanketOrderPurchaseLine.Quantity / 3,1);
      UpdateQtyToReceiveOnPurchaseLine(PurchaseHeader."Buy-from Vendor No.",PurchaseHeader."Document Type"::Order,PartialReceiveQty);
      PostPurchaseDocument(PurchaseHeader."Buy-from Vendor No.",PurchaseHeader."Document Type"::Order,TRUE,FALSE);
      CreatePurchaseDocumentLinkBlanketOrder(
        PurchaseHeader2,BlanketOrderPurchaseLine,PartialReceiveQty / 2,PurchaseHeader."Document Type"::"Return Order");
      CreatePurchaseDocumentLinkBlanketOrder(
        PurchaseHeader3,BlanketOrderPurchaseLine,PartialReceiveQty / 2,PurchaseHeader."Document Type"::"Credit Memo");

      // Exercise and Verify: Verify the error message when making Purchase Order
      // as "Qty. to Receive" is more than the Quantity on the Purchase Return Order add the Quantity on Purchase Credit Memo.
      BlanketOrderPurchaseLine.FIND;
      MakePurchaseOrderAndVerifyErr(PurchaseHeader,BlanketOrderPurchaseLine,PartialReceiveQty);

      // Reduce the Quantity to Receive on Purchase Line then Make Purchase Order.
      BlanketOrderPurchaseLine.VALIDATE("Qty. to Receive",PartialReceiveQty);
      BlanketOrderPurchaseLine.MODIFY(TRUE);
      LibraryPurchase.BlanketPurchaseOrderMakeOrder(PurchaseHeader);

      // Post Purchase Return Order and Purchase Credit Memo.
      PostPurchaseDocument(PurchaseHeader2."Buy-from Vendor No.",PurchaseHeader2."Document Type"::"Return Order",TRUE,TRUE);
      PostPurchaseDocument(PurchaseHeader3."Buy-from Vendor No.",PurchaseHeader2."Document Type"::"Credit Memo",FALSE,FALSE);

      // Exercise and Verify: the Purchase Order made can be post successfully.
      PostPurchaseDocument(PurchaseHeader."Buy-from Vendor No.",PurchaseHeader."Document Type"::Order,TRUE,TRUE);
    END;

    [Test]
    PROCEDURE CalcConsumptionWhenItemIsNotInTheBin@224();
    VAR
      ProductionOrder@1000 : Record 5405;
      ItemJournalLine@1002 : Record 83;
      ChildItemNo@1005 : Code[20];
    BEGIN
      // Test Calc. Consumption is run successfully without any errors when the Bin Code
      // filled in Prod. Order Component does not include the child item.

      // Setup: Create Item With ProductionBOM. Post Item Journal with ChildItem with Bin.
      // Uncheck Fixed and Default in Bin Content for ChildItem. Create RPO and fill another
      // bin which does not include the ChildItem in Production Component.
      Initialize;
      ChildItemNo := PreparationForCalcConsumptionAndOpeningProductionJournal(ProductionOrder);

      // Exercise & Verify: Verify Calc. Consumption is run successfully with the line generated.
      CalcConsumptionInConsumptionJournal(ProductionOrder."No.");
      SelectConsumptionLine(ItemJournalLine,ProductionOrder."No.");
      ItemJournalLine.TESTFIELD("Item No.",ChildItemNo);
    END;

    [Test]
    [HandlerFunctions(ProductionJournalPageHandler2)]
    PROCEDURE OpenProductionJournalWhenItemIsNotInTheBin@228();
    VAR
      ProductionOrder@1003 : Record 5405;
      ProdOrderLine@1005 : Record 5406;
      ChildItemNo@1004 : Code[20];
    BEGIN
      // Test Production Journal can be opened successfully without any errors when
      // the Bin Code filled in Prod. Order Component does not include the child item.

      // Setup: Create Item With ProductionBOM. Post Item Journal with ChildItem with Bin.
      // Uncheck Fixed and Default in Bin Content for ChildItem. Create RPO and fill another
      // bin which does not include the ChildItem in Prod. Order Component.
      Initialize;
      ChildItemNo := PreparationForCalcConsumptionAndOpeningProductionJournal(ProductionOrder);

      // Exercise & Verify: Verify no error pops up when opening Production Journal.
      // Verify the line in ProductionJournalPageHandler2.
      LibraryVariableStorage.Enqueue(ChildItemNo);
      FindProductionOrderLine(ProdOrderLine,ProductionOrder);
      LibraryManufacturing.OpenProductionJournal(ProductionOrder,ProdOrderLine."Line No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoMultipleSalesShipmentLinesAfterRegisterWhseShipment@212();
    VAR
      Bin@1000 : Record 7354;
      Item@1001 : Record 27;
      SalesLine@1003 : Record 37;
      WarehouseEntry@1006 : Record 7312;
    BEGIN
      // Test Warehouse Entry is correct after undo multiple Sales Shipment Lines with warehouse.

      // Setup: Create and post Item Journal Line with Location and Bin. Create and post Warehouse Shipment From Sales Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      CreateAndPostItemJournalLine(Bin."Location Code",Bin.Code,Item."No.",'',LibraryRandom.RandDec(10,2) + 100,FALSE,FALSE);
      CreateAndPostWarehouseShipmentFromSalesOrder(
        SalesLine,'',Item."No.",LibraryRandom.RandDec(50,2),LocationSilver.Code);

      // Exercise: Undo multiple Sales Shipment Lines.
      UndoMultipleShipmentLines(SalesLine."Document No.");

      // Verify: Verify Warehouse Entry has two lines after undo multiple Sales Shipment Lines.
      VerifyWarehouseEntryWithTotalLines(
        WarehouseEntry."Entry Type"::"Positive Adjmt.",WarehouseEntry."Source Document"::"S. Order",Item."No.",2);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler)]
    PROCEDURE ReducingQuantityInTrackingLinesDoesNotClearLedgerEntryRelations@232();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      ItemLedgerEntry@1004 : Record 32;
      Customer@1008 : Record 18;
      ItemNo@1000 : Code[20];
      LotNo@1006 : Code[20];
      ItemTrackingMode@1005 : ' ,AssignLotNo,SelectEntries,SetQuantity';
      QuantityToInvoice@1001 : Decimal;
      DeltaQty@1007 : Decimal;
    BEGIN
      // [FEATURE] [Item Tracking] [Sales Invoice]
      // [SCENARIO 363510] Reducing Quantity (Base) in Tracking Lines does not clear "Appl.-to Item Entry" if Quantity to Invoice is sufficient
      Initialize;

      // [GIVEN] Item Ledger Entry "L" for Item with Tracking
      DeltaQty := LibraryRandom.RandDec(10,2);
      QuantityToInvoice := LibraryRandom.RandDec(10,2) + DeltaQty;

      CreateItemOnInventoryWithTracking(ItemNo,LotNo,QuantityToInvoice);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDFIRST;

      // [GIVEN] Sales Order with Quantity to Invoice = "Q"
      LibrarySales.CreateCustomer(Customer);
      CreateSalesOrder(SalesHeader,SalesLine,Customer."No.",ItemNo,QuantityToInvoice,LocationOrange.Code,FALSE);

      // [GIVEN] Tracking Specification for Item with Quantity = "Q" and "Appl.-to Item Entry" = "L"
      LibraryVariableStorage.Enqueue(ItemTrackingMode::SelectEntries); // Enqueue for ItemTrackingLinesHandler
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(QuantityToInvoice);
      LibraryVariableStorage.Enqueue(ItemLedgerEntry."Entry No.");
      SalesLine.OpenItemTrackingLines;

      // [WHEN] Set "Quantity (Base)" on Tracking Line to "X", "X" < "Q"
      // [THEN] "Appl.-to Item Entry" = "L"
      LibraryVariableStorage.Enqueue(ItemTrackingMode::SetQuantity);
      LibraryVariableStorage.Enqueue(QuantityToInvoice - DeltaQty);
      LibraryVariableStorage.Enqueue(ItemLedgerEntry."Entry No.");
      SalesLine.OpenItemTrackingLines;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler,ConfirmHandler)]
    PROCEDURE IncreasingQuantityInTrackingLinesClearsLedgerEntryRelations@233();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      ItemLedgerEntry@1004 : Record 32;
      Customer@1008 : Record 18;
      ItemNo@1000 : Code[20];
      LotNo@1006 : Code[20];
      ItemTrackingMode@1005 : ' ,AssignLotNo,SelectEntries,SetQuantity';
      QuantityToInvoice@1001 : Decimal;
      DeltaQty@1007 : Decimal;
    BEGIN
      // [FEATURE] [Item Tracking] [Sales Invoice]
      // [SCENARIO 363510] Increasing Quantity (Base) in Tracking Lines clears "Appl.-to Item Entry"
      Initialize;

      // [GIVEN] Item Ledger Entry "L" for Item with Tracking
      DeltaQty := LibraryRandom.RandDec(10,2);
      QuantityToInvoice := LibraryRandom.RandDec(10,2) + DeltaQty;

      CreateItemOnInventoryWithTracking(ItemNo,LotNo,QuantityToInvoice + DeltaQty);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDFIRST;

      // [GIVEN] Sales Order with Quantity to Invoice = "Q"
      LibrarySales.CreateCustomer(Customer);
      CreateSalesOrder(SalesHeader,SalesLine,Customer."No.",ItemNo,QuantityToInvoice,LocationOrange.Code,FALSE);

      // [GIVEN] Tracking Specification for Item with Quantity = "Q" and "Appl.-to Item Entry" = "L"
      LibraryVariableStorage.Enqueue(ItemTrackingMode::SelectEntries); // Enqueue for ItemTrackingLinesHandler
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(QuantityToInvoice);
      LibraryVariableStorage.Enqueue(ItemLedgerEntry."Entry No.");
      SalesLine.OpenItemTrackingLines;

      // [WHEN] Set "Quantity (Base)" on Tracking Line to "X", "X" > "Q"
      // [THEN] "Appl.-to Item Entry" = 0
      LibraryVariableStorage.Enqueue(ItemTrackingMode::SetQuantity);
      LibraryVariableStorage.Enqueue(QuantityToInvoice + DeltaQty);
      LibraryVariableStorage.Enqueue(0);
      LibraryVariableStorage.Enqueue(ItemTrackingQuantityMsg);
      SalesLine.OpenItemTrackingLines;
    END;

    [Test]
    PROCEDURE BlankCodeInReturnReasonTable@231();
    VAR
      ReturnReason@1000 : TestPage 6635;
    BEGIN
      // [FEATURE] [Return Reason]
      // [SCENARIO 374829] It should not be possible to insert a record in Return Reason table with field "Code" blank

      // [WHEN] Insert record with "Code" = '' in Return Reason table
      ReturnReason.OPENNEW;
      ASSERTERROR ReturnReason.Code.SETVALUE('');

      // [THEN] Error is thrown: 'Code must be filled in. Enter a value.'
      Assert.ExpectedError(BlankCodeErr);
    END;

    [Test]
    PROCEDURE NoProdOrderForComponentWhenSKUReorderingPolicyAsLotForLot@244();
    VAR
      Item@1000 : Record 27;
      ComponentItem@1004 : Record 27;
      ProductionOrder@1009 : Record 5405;
      ItemQty@1005 : Decimal;
      ComponentQty@1006 : Decimal;
      QtyPer@1008 : Decimal;
      Direction@1011 : 'Forward,Backward';
      CalcMethod@1010 : 'No Levels,One level,All levels';
    BEGIN
      // [FEATURE] [Production Order] [Production BOM] [Stockkeeping Unit]
      // [SCENARIO 378606] Production Order for Component shouldn't be created when Replan PO with enough Inventory and "Reordering Policy" at SKU is equal to "Lot-for-Lot".
      Initialize;

      // [GIVEN] Item called ComponentItem with "Replenishment System" as "Prod. Order" and "Reordering Policy" as "Lot-for-Lot" at Stockkeeping Unit.
      ClearComponentsAtLocationInManufacturingSetup;
      QtyPer := LibraryRandom.RandInt(10);
      ItemQty := LibraryRandom.RandInt(20);
      ComponentQty := ItemQty * QtyPer + LibraryRandom.RandInt(100);
      CreateItemWithSKU(ComponentItem,LocationBlue.Code);
      // [GIVEN] Created Inventory of "X" for Component.
      CreateAndPostItemJournalLine(LocationBlue.Code,'',ComponentItem."No.",'',ComponentQty,FALSE,FALSE);
      // [GIVEN] Parent Item with Component as a child item.
      CreateItemWithComponent(Item,ComponentItem,QtyPer);
      // [GIVEN] Created Production Order for Parent Item with Component Item of Quantity < "X".
      CreateProdOrderForParentItem(ProductionOrder,LocationBlue.Code,Item."No.",ItemQty);

      // [WHEN] Replan Production Order for Parent Item.
      LibraryManufacturing.RunReplanProductionOrder(ProductionOrder,Direction::Backward,CalcMethod::"All levels");

      // [THEN] Production Order for Component doesn't exist.
      VerifyProdOrderLineNotExists(ComponentItem."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,ItemTrackingListPageHandler,ReservationPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE InvtMovementReservedLotCanBeSelected@249();
    VAR
      WarehouseActivityLine@1007 : Record 5767;
      LotNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Inventory Movement] [Item Tracking] [Reservation]
      // [SCENARIO 381324] Reserved lot can be selected on inventory movement line.
      Initialize;

      WITH WarehouseActivityLine DO BEGIN
        // [GIVEN] Lot-tracked Item with inventory in bin "B1". Lot No. = "L".
        // [GIVEN] Inventory Movement of Item from bin "B1" to "B2".
        // [GIVEN] Lot "L" is reserved for Sales Order.
        CreateInventoryMovementForReservedLot(WarehouseActivityLine,LotNo);
        VALIDATE("Qty. to Handle",Quantity);

        // [WHEN] Select "L" on Inventory Movement "take" line.
        VALIDATE("Lot No.",LotNo);

        // [THEN] Reserved lot "L" can be selected.
        TESTFIELD("Lot No.",LotNo);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,ItemTrackingListPageHandler,ReservationPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE InvtMovementCanBeRegisteredWhenLotIsReserved@256();
    VAR
      WarehouseActivityLine@1001 : Record 5767;
      WarehouseEntry@1003 : Record 7312;
      LotNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Inventory Movement] [Item Tracking] [Reservation]
      // [SCENARIO 381324] Inventory movement of reserved lot can be registered.
      Initialize;

      WITH WarehouseActivityLine DO BEGIN
        // [GIVEN] Lot-tracked Item with inventory in bin "B1". Lot No. = "L".
        // [GIVEN] Inventory Movement of Item from bin "B1" to "B2".
        // [GIVEN] Lot "L" is reserved for Sales Order.
        CreateInventoryMovementForReservedLot(WarehouseActivityLine,LotNo);
        SETRANGE("Action Type","Action Type"::Place);
        FINDFIRST;

        // [WHEN] Autofill qty. to handle and register Inventory Movement.
        RegisterWarehouseActivity("Source Document","Source No.","Activity Type"::"Invt. Movement");

        // [THEN] Reserved lot "L" is successfully moved to bin "B2".
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,0,"Item No.","Bin Code",LotNo,Quantity,FALSE);
      END;
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      NoSeriesSetup;
      LocationSetup;
      ItemJournalSetup;
      CreateTransferRoute;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
      LibrarySetupStorage.Save(DATABASE::"Manufacturing Setup");

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AddSpecialOrderToReqWsht@240(VAR RequisitionLine@1005 : Record 246;TemplateName@1001 : Code[10];WshtName@1002 : Code[10];ItemNo@1006 : Code[20]);
    BEGIN
      WITH RequisitionLine DO BEGIN
        SETRANGE("Worksheet Template Name",TemplateName);
        SETRANGE("Journal Batch Name",WshtName);
        FINDFIRST;
      END;
      LibraryPlanning.GetSpecialOrder(RequisitionLine,ItemNo);
    END;

    LOCAL PROCEDURE CreateFullWarehouseSetup@60(VAR Location@1000 : Record 14);
    VAR
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,2);  // Value used for number of bin per zone.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@53();
    BEGIN
      ItemJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE LocationSetup@92();
    VAR
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      CreateFullWarehouseSetup(LocationWhite);  // Location: White.
      CreateAndUpdateLocation(LocationSilver,TRUE,TRUE,TRUE,TRUE,TRUE);  // Location Silver.
      CreateBinsAndUpdateLocation(LocationSilver);
      CreateAndUpdateLocation(LocationBlue,FALSE,FALSE,FALSE,TRUE,FALSE);  // Location Blue with Require Shipment.
      CreateAndUpdateLocation(LocationRed,FALSE,FALSE,FALSE,TRUE,FALSE);  // Location Red with Require Shipment.
      CreateAndUpdateLocation(LocationGreen,FALSE,TRUE,FALSE,FALSE,TRUE);  // Location Green with Require Pick and Bin Manadatory.
      CreateBins(LocationGreen);
      CreateAndUpdateLocation(LocationYellow,TRUE,TRUE,TRUE,TRUE,FALSE);  // Location Yellow with Require Put Away, Require Pick, Require Receive, Require Shipment.
      CreateAndUpdateLocation(LocationBlack,FALSE,FALSE,FALSE,FALSE,FALSE);  // Location Black.
      CreateAndUpdateLocation(LocationOrange,FALSE,FALSE,FALSE,FALSE,FALSE);  // Location Orange.
      CreateInTransitLocation;
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      PurchasesPayablesSetup@1003 : Record 312;
      SalesSetup@1001 : Record 311;
    BEGIN
      SalesSetup.GET;
      SalesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AssignLotNoOnItemTrackingLine@86(VAR ItemTrackingLines@1000 : TestPage 6510;Quantity@1001 : Decimal);
    BEGIN
      ItemTrackingLines."Lot No.".SETVALUE(LibraryUtility.GenerateGUID);
      ItemTrackingLines."Quantity (Base)".SETVALUE(Quantity);
      LibraryVariableStorage.Enqueue(ItemTrackingLines."Lot No.".VALUE);  // Enqueue Lot No.
    END;

    LOCAL PROCEDURE CalcPlanForReqWsht@236(VAR Item@1000 : Record 27;VAR TemplateName@1001 : Code[10];VAR WshtName@1002 : Code[10]);
    VAR
      ReqWkshName@1004 : Record 245;
    BEGIN
      TemplateName := SelectRequisitionTemplateName;
      LibraryPlanning.CreateRequisitionWkshName(ReqWkshName,TemplateName);
      WshtName := ReqWkshName.Name;
      LibraryPlanning.CalculatePlanForReqWksh(Item,TemplateName,WshtName,WORKDATE,WORKDATE);
    END;

    LOCAL PROCEDURE CalculateCrossDock@190(SourceNo@1000 : Code[20]);
    VAR
      WhseCrossDockOpportunity@1004 : Record 5768;
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,SourceNo);
      LibraryWarehouse.CalculateCrossDockLines(
        WhseCrossDockOpportunity,'',WarehouseReceiptLine."No.",WarehouseReceiptLine."Location Code");
    END;

    LOCAL PROCEDURE ClearComponentsAtLocationInManufacturingSetup@246();
    VAR
      ManufacturingSetup@1000 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Components at Location",'');
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@188(VAR ProductionBOMHeader@1000 : Record 99000771;Item@1005 : Record 27;QuantityPer@1002 : Decimal);
    VAR
      ProductionBOMLine@1001 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item."No.",QuantityPer);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@40(LocationCode@1001 : Code[10];BinCode@1002 : Code[20];ItemNo@1005 : Code[20];VariantCode@1003 : Code[10];Quantity@1004 : Decimal;UpdateExpirationDate@1007 : Boolean;UseTracking@1006 : Boolean);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      UpdateNoSeriesOnItemJournalBatch(ItemJournalBatch,'');  // Use Blank No. Series.
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,
        Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.VALIDATE("Variant Code",VariantCode);
      ItemJournalLine.MODIFY(TRUE);
      IF UseTracking THEN
        ItemJournalLine.OpenItemTrackingLines(FALSE);
      IF UpdateExpirationDate THEN
        UpdateExpirationDateOnReservationEntry(ItemNo);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostJobJournalLine@83(Bin@1002 : Record 7354;ItemNo@1005 : Code[20];Quantity@1008 : Decimal);
    VAR
      JobTask@1000 : Record 1001;
      JobJournalLine@1004 : Record 210;
      LibraryJob@1001 : Codeunit 131920;
    BEGIN
      CreateJobWithJobTask(JobTask);
      LibraryJob.GetJobJournalTemplate(JobJournalTemplate);
      LibraryJob.CreateJobJournalBatch(JobJournalTemplate.Name,JobJournalBatch);
      LibraryJob.CreateJobJournalLine(JobJournalLine."Line Type"::"Both Schedule and Contract",JobTask,JobJournalLine);
      JobJournalLine.VALIDATE(Type,JobJournalLine.Type::Item);
      JobJournalLine.VALIDATE("No.",ItemNo);
      JobJournalLine.VALIDATE("Location Code",Bin."Location Code");
      JobJournalLine.VALIDATE("Bin Code",Bin.Code);
      JobJournalLine.VALIDATE(Quantity,Quantity);
      JobJournalLine.MODIFY(TRUE);
      JobJournalLine.OpenItemTrackingLines(FALSE);
      LibraryVariableStorage.Enqueue(PostJobJournalLines);  // Enqueue for ConfirmMessageHandler.
      LibraryVariableStorage.Enqueue(JobJournalPosted);  // Enqueue for MessageHandler.
      LibraryJob.PostJobJournal(JobJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderWithItemTracking@169(VAR SalesHeader@1003 : Record 36;CustomerNo@1006 : Code[20];ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      SalesLine@1004 : Record 37;
      ItemTrackingMode@1005 : ' ,AssignLotNo,AssignSerialNo,AssignMultipleLotNo,SelectEntries,SelectSerialNo,SelectLotNo';
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,CustomerNo,ItemNo,Quantity,'',FALSE);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::SelectEntries);  // Enqueue for ItemTrackingLinesPageHandler.
      SalesLine.OpenItemTrackingLines;
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);  // Post as SHIP and INVOICE.
    END;

    LOCAL PROCEDURE CreateAndPostTransferOrder@216(VAR TransferHeader@1000 : Record 5740;SalesLine@1006 : Record 37;FromLocationCode@1002 : Code[10];ToLocationCode@1003 : Code[10]);
    VAR
      TransferLine@1001 : Record 5741;
    BEGIN
      CreateTransferOrder(TransferHeader,TransferLine,FromLocationCode,ToLocationCode,SalesLine."No.",SalesLine.Quantity);
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);  // Post as SHIP.
    END;

    LOCAL PROCEDURE CreateAndRefreshReleasedProductionOrder@88(VAR ProductionOrder@1002 : Record 5405;Bin@1006 : Record 7354;ItemNo@1000 : Code[20];Quantity@1001 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",Bin."Location Code");
      ProductionOrder.VALIDATE("Bin Code",Bin.Code);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);  // CalcLines, CalcRoutings, CalcComponents as TRUE.
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithMultipleLines@185(VAR PurchaseHeader@1000 : Record 38;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10];Quantity2@1005 : Decimal);
    VAR
      PurchaseLine@1004 : Record 39;
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,ItemNo,Quantity,LocationCode);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,ItemNo,Quantity2,LocationCode);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchOrdersOnSpecialOrder@57(Item@1006 : Record 27);
    VAR
      RequisitionLine@1002 : Record 246;
      TemplateName@1001 : Code[10];
      WshtName@1000 : Code[10];
    BEGIN
      CalcPlanForReqWsht(Item,TemplateName,WshtName);
      AddSpecialOrderToReqWsht(RequisitionLine,TemplateName,WshtName,Item."No.");
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
      ReleasePurchaseOrders(Item."No.");
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrder@187(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;CustomerNo@1005 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10];Reserve@1006 : Boolean);
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,CustomerNo,ItemNo,Quantity,LocationCode,Reserve);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderByPage@87(VAR SalesHeader@1004 : Record 36;ItemNo@1001 : Code[20];LocationCode@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      Customer@1005 : Record 18;
      SalesOrder@1000 : TestPage 42;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryVariableStorage.Enqueue(ReservationConfirmMessage);  // Enqueue for ConfirmHandler.
      LibraryVariableStorage.Enqueue(ReservationNotPossibleMessage);  // Enqueue for MessageHandler.
      SalesOrder.OPENNEW;
      SalesOrder."Sell-to Customer No.".SETVALUE(Customer."No.");
      SalesOrder.SalesLines.Type.SETVALUE(SalesOrder.SalesLines.Type.GETOPTION(3));  // Option 3 is used for Item.
      SalesOrder.SalesLines."No.".SETVALUE(ItemNo);
      SalesOrder.SalesLines."Location Code".SETVALUE(LocationCode);
      SalesOrder.SalesLines.Quantity.SETVALUE(Quantity);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrder."No.");
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSpecialOrder@237(VAR SalesHeader@1000 : Record 36;ItemNo@1004 : Code[20];Quantity@1001 : Decimal);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,'',ItemNo,Quantity,LocationWhite.Code,FALSE);
      UpdatePurchasingCodeOnSalesLine(SalesLine);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndUpdateLocation@21(VAR Location@1000 : Record 14;RequirePutAway@1002 : Boolean;RequirePick@1003 : Boolean;RequireReceive@1006 : Boolean;RequireShipment@1005 : Boolean;BinMandatory@1001 : Boolean);
    VAR
      WarehouseEmployee@1004 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateLocationWMS(Location,BinMandatory,RequirePutAway,RequirePick,RequireReceive,RequireShipment);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
    END;

    LOCAL PROCEDURE CreateBins@91(VAR Location@1000 : Record 14);
    VAR
      Bin@1001 : Record 7354;
    BEGIN
      LibraryWarehouse.CreateBin(Bin,Location.Code,'','','');
      LibraryWarehouse.CreateBin(Bin,Location.Code,'','','');
    END;

    LOCAL PROCEDURE CreateBinsAndUpdateLocation@254(VAR Location@1001 : Record 14);
    VAR
      Bin@1000 : Record 7354;
    BEGIN
      LibraryWarehouse.CreateBin(Bin,Location.Code,'','','');
      Location.VALIDATE("Receipt Bin Code",Bin.Code);
      Location.MODIFY(TRUE);
      LibraryWarehouse.CreateBin(Bin,Location.Code,'','','');
      Location.VALIDATE("Shipment Bin Code",Bin.Code);
      Location.MODIFY(TRUE);
      LibraryWarehouse.CreateBin(Bin,Location.Code,'','','');
    END;

    LOCAL PROCEDURE CreateJobWithJobTask@85(VAR JobTask@1002 : Record 1001);
    VAR
      Job@1001 : Record 167;
      LibraryJob@1000 : Codeunit 131920;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
    END;

    LOCAL PROCEDURE CreateInternalMovement@98(VAR InternalMovementHeader@1002 : Record 7346;VAR Bin2@1000 : Record 7354;Bin@1001 : Record 7354;ItemNo@1004 : Code[20];Quantity@1006 : Decimal;WhseItemTrackingMode@1005 : Option);
    VAR
      InternalMovementLine@1003 : Record 7347;
    BEGIN
      CreateInternalMovementHeader(InternalMovementHeader,Bin2,Bin);
      LibraryWarehouse.CreateInternalMovementLine(InternalMovementHeader,InternalMovementLine,ItemNo,Bin.Code,Bin2.Code,Quantity);
      LibraryVariableStorage.Enqueue(WhseItemTrackingMode);   // Enqueue for WhseItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(ItemNo);  // Enqueue for WhseItemTrackingLinesPageHandler.
      InternalMovementLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateInternalMovementHeader@115(VAR InternalMovementHeader@1001 : Record 7346;VAR Bin2@1000 : Record 7354;Bin@1002 : Record 7354);
    BEGIN
      LibraryWarehouse.CreateBin(Bin2,Bin."Location Code",LibraryUtility.GenerateGUID,'','');
      LibraryWarehouse.CreateInternalMovementHeader(InternalMovementHeader,Bin."Location Code",Bin2.Code);
    END;

    LOCAL PROCEDURE CreateInternalMovementWithGetBinContent@38(VAR InternalMovementHeader@1001 : Record 7346;VAR Bin2@1002 : Record 7354;Bin@1000 : Record 7354;ItemNo@1003 : Code[20]);
    BEGIN
      CreateInternalMovementHeader(InternalMovementHeader,Bin2,Bin);
      LibraryWarehouse.GetBinContentInternalMovement(InternalMovementHeader,Bin."Location Code",ItemNo,Bin.Code);
    END;

    LOCAL PROCEDURE CreateInventoryMovement@139(SourceNo@1000 : Code[20]);
    VAR
      WarehouseRequest@1001 : Record 5765;
    BEGIN
      LibraryVariableStorage.Enqueue(InventoryMovementCreatedMessage);  // Enqueue for MessageHandler.
      LibraryWarehouse.CreateInvtPutPickMovement(WarehouseRequest."Source Document"::"Prod. Consumption",SourceNo,FALSE,FALSE,TRUE);  // TRUE for Movement.
    END;

    LOCAL PROCEDURE CreateInventoryMovementForReservedLot@268(VAR WarehouseActivityLine@1003 : Record 5767;VAR LotNo@1002 : Code[20]);
    VAR
      Item@1009 : Record 27;
      Bin@1008 : Record 7354;
      InternalMovementHeader@1007 : Record 7346;
      SalesHeader@1006 : Record 36;
      SalesLine@1005 : Record 37;
      ItemTrackingMode@1001 : ' ,AssignLotNo,AssignSerialNo,AssignMultipleLotNo,SelectEntries,SelectSerialNo,SelectLotNo';
      Qty@1000 : Decimal;
    BEGIN
      Qty := LibraryRandom.RandInt(100);
      CreateTrackedItemAndUpdateInventoryOnLocationWithBin(
        Item,Bin,Qty,TRUE,FALSE,FALSE,LibraryUtility.GetGlobalNoSeriesCode,'',ItemTrackingMode::AssignLotNo,FALSE);
      GetLotNoFromItemTrackingPageHandler(LotNo);

      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      LibraryWarehouse.CreateInternalMovementHeader(InternalMovementHeader,Bin."Location Code",Bin.Code);
      LibraryWarehouse.GetBinContentInternalMovement(InternalMovementHeader,'',Item."No.",'');
      CreateInventoryMovementFromInternalMovement(InternalMovementHeader);

      CreateSalesOrder(SalesHeader,SalesLine,LibrarySales.CreateCustomerNo,Item."No.",Qty,LocationSilver.Code,FALSE);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::SelectEntries);
      SalesLine.OpenItemTrackingLines;
      LibraryVariableStorage.Enqueue(SpecificReservationTxt);
      SalesLine.ShowReservation;

      FindInventoryMovementLine(
        WarehouseActivityLine,WarehouseActivityLine."Action Type"::Take,Item."No.",WarehouseActivityLine."Source Document"::" ",'');
    END;

    LOCAL PROCEDURE CreateInTransitLocation@221();
    BEGIN
      LibraryWarehouse.CreateInTransitLocation(LocationInTransit);
      LibraryInventory.UpdateInventoryPostingSetup(LocationInTransit);
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@48(VAR ItemTrackingCode@1001 : Record 6502;Lot@1000 : Boolean;Serial@1002 : Boolean;ManExpirDateEntryReqd@1003 : Boolean);
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,Serial,Lot);
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",Lot);
      ItemTrackingCode.VALIDATE("SN Warehouse Tracking",Serial);
      ItemTrackingCode.VALIDATE("Man. Expir. Date Entry Reqd.",ManExpirDateEntryReqd);
      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithComponent@248(VAR Item@1000 : Record 27;ComponentItem@1001 : Record 27;QtyPer@1002 : Decimal);
    VAR
      ProductionBOMHeader@1003 : Record 99000771;
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ComponentItem,QtyPer);
      Item.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithItemTrackingCode@47(VAR Item@1003 : Record 27;Lot@1000 : Boolean;Serial@1001 : Boolean;ManExpirDateEntryReqd@1006 : Boolean;LotNos@1004 : Code[10];SerialNos@1005 : Code[10]);
    VAR
      ItemTrackingCode@1002 : Record 6502;
    BEGIN
      CreateItemTrackingCode(ItemTrackingCode,Lot,Serial,ManExpirDateEntryReqd);
      LibraryInventory.CreateTrackedItem(Item,LotNos,SerialNos,ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateItemWithProductionBOM@109(VAR ParentItem@1000 : Record 27;VAR ChildItem@1001 : Record 27;QuantityPer@1003 : Decimal;Lot@1004 : Boolean;Serial@1005 : Boolean;SerialNos@1006 : Code[10]);
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
    BEGIN
      LibraryInventory.CreateItem(ParentItem);
      CreateItemWithItemTrackingCode(ChildItem,Lot,Serial,TRUE,'',SerialNos);  // TRUE for Man. Expir. Date Entry Reqd.
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem,QuantityPer);
      ParentItem.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      ParentItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithReorderPolicyAsMaxQty@242(VAR Item@1000 : Record 27;VAR MaxInventoryQty@1001 : Decimal;VAR SalesQty@1004 : Decimal);
    VAR
      Vendor@1002 : Record 23;
      StockkeepingUnit@1003 : Record 5700;
    BEGIN
      SalesQty := LibraryRandom.RandInt(10);
      MaxInventoryQty := LibraryRandom.RandInt(90) + SalesQty;

      LibraryPurchase.CreateVendor(Vendor);
      LibraryInventory.CreateItem(Item);
      WITH Item DO BEGIN
        VALIDATE("Vendor No.",Vendor."No.");
        VALIDATE("Reordering Policy","Reordering Policy"::"Maximum Qty.");
        VALIDATE("Reorder Point",LibraryRandom.RandInt(SalesQty));
        VALIDATE("Maximum Inventory",MaxInventoryQty);
        MODIFY(TRUE);
      END;
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,LocationWhite.Code,Item."No.",'');
    END;

    LOCAL PROCEDURE CreateItemWithSKU@252(VAR ComponentItem@1000 : Record 27;LocationCode@1001 : Code[10]);
    VAR
      StockkeepingUnit@1004 : Record 5700;
    BEGIN
      CreateItem(ComponentItem,ComponentItem.Reserve,ComponentItem."Reordering Policy"::" ");
      ComponentItem.VALIDATE("Replenishment System",ComponentItem."Replenishment System"::"Prod. Order");
      ComponentItem.MODIFY(TRUE);
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,LocationCode,ComponentItem."No.",'');
      StockkeepingUnit.VALIDATE("Reordering Policy",StockkeepingUnit."Reordering Policy"::"Lot-for-Lot");
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithVariant@193(VAR Item@1000 : Record 27;VAR ItemVariant@1001 : Record 5401);
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
    END;

    LOCAL PROCEDURE CreateItem@20(VAR Item@1000 : Record 27;Reserve@1002 : Option;ReorderingPolicy@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE(Reserve,Reserve);
      Item.VALIDATE("Reordering Policy",ReorderingPolicy);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTrackedItemAndUpdateInventoryOnLocationWithBin@260(VAR Item@1007 : Record 27;VAR Bin@1008 : Record 7354;Qty@1009 : Decimal;IsLotTracking@1000 : Boolean;IsSerialNoTracking@1001 : Boolean;ManExpirDateEntryReqd@1002 : Boolean;LotNos@1003 : Code[10];SerialNos@1004 : Code[10];ItemTrackingMode@1005 : Option;UpdateExpirDate@1006 : Boolean);
    BEGIN
      CreateItemWithItemTrackingCode(
        Item,IsLotTracking,IsSerialNoTracking,ManExpirDateEntryReqd,LotNos,SerialNos);
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      LibraryVariableStorage.Enqueue(ItemTrackingMode);
      CreateAndPostItemJournalLine(Bin."Location Code",Bin.Code,Item."No.",'',Qty,UpdateExpirDate,TRUE);
    END;

    LOCAL PROCEDURE CreateInventoryMovementFromInternalMovement@73(InternalMovementHeader@1000 : Record 7346);
    BEGIN
      LibraryVariableStorage.Enqueue(InventoryMovementConfirmMessage);  // Enqueue for Confirm Handler.
      LibraryVariableStorage.Enqueue(InventoryMovementCreated);  // Enqueue for Message Handler.
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);
    END;

    LOCAL PROCEDURE CreateMultipleStockkeepingUnit@166(ItemNo@1003 : Code[20];LocationCode@1001 : Code[10];LocationCode2@1002 : Code[10]);
    VAR
      Item@1000 : Record 27;
    BEGIN
      Item.SETRANGE("No.",ItemNo);
      Item.SETFILTER("Location Filter",'%1|%2',LocationCode,LocationCode2);
      LibraryInventory.CreateStockKeepingUnit(Item,0,FALSE,FALSE);  // Create Per Option as Zero.
    END;

    LOCAL PROCEDURE CreatePick@272(SourceNo@1001 : Code[20]);
    VAR
      WarehouseShipmentHeader@1000 : Record 7320;
    BEGIN
      GetWarehouseShipmentHeader(WarehouseShipmentHeader,SourceNo);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateProdOrderForParentItem@245(VAR ProductionOrder@1001 : Record 5405;LocationCode@1000 : Code[10];ItemNo@1002 : Code[20];ItemQty@1003 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,ItemQty);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);  // CalcLines, CalcRoutings, CalcComponents as TRUE.
    END;

    LOCAL PROCEDURE CreatePurchaseCreditMemoByPage@146(VAR PurchaseCreditMemo@1002 : TestPage 52;LocationCode@1003 : Code[10]);
    VAR
      Item@1000 : Record 27;
      Vendor@1001 : Record 23;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryPurchase.CreateVendor(Vendor);
      PurchaseCreditMemo.OPENNEW;
      PurchaseCreditMemo."Buy-from Vendor No.".SETVALUE(Vendor."No.");
      PurchaseCreditMemo.PurchLines.Type.SETVALUE(PurchaseCreditMemo.PurchLines.Type.GETOPTION(3));  // Option 3 is used for Item.
      PurchaseCreditMemo.PurchLines."No.".SETVALUE(Item."No.");
      PurchaseCreditMemo.PurchLines."Location Code".SETVALUE(LocationCode);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@2(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10]);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@27(VAR PurchaseHeader@1006 : Record 38;ItemNo@1004 : Code[20];Quantity@1000 : Decimal;LocationCode@1002 : Code[10]);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,ItemNo,Quantity,LocationCode);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithLot@168(VAR PurchaseHeader@1000 : Record 38;ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      PurchaseLine@1003 : Record 39;
      ItemTrackingMode@1004 : ' ,AssignLotNo,AssignSerialNo,AssignMultipleLotNo,SelectEntries,SelectSerialNo,SelectLotNo';
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,ItemNo,Quantity,'');
      FindPurchaseOrderLine(PurchaseLine,PurchaseHeader."No.");
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);  // Enqueue for ItemTrackingLinesPageHandler.
      PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreatePurchaseOrderByPage@145(VAR PurchaseOrder@1002 : TestPage 50;LocationCode@1003 : Code[10]);
    VAR
      Item@1000 : Record 27;
      Vendor@1001 : Record 23;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryPurchase.CreateVendor(Vendor);
      PurchaseOrder.OPENNEW;
      PurchaseOrder."Buy-from Vendor No.".SETVALUE(Vendor."No.");
      PurchaseOrder.PurchLines.Type.SETVALUE(PurchaseOrder.PurchLines.Type.GETOPTION(3));  // Option 3 is used for Item.
      PurchaseOrder.PurchLines."No.".SETVALUE(Item."No.");
      PurchaseOrder.PurchLines.Quantity.SETVALUE(LibraryRandom.RandDec(10,2));
      PurchaseOrder.PurchLines."Location Code".SETVALUE(LocationCode);
    END;

    LOCAL PROCEDURE CreatePurchaseInvoiceByPage@149(VAR PurchaseInvoice@1002 : TestPage 51;LocationCode@1003 : Code[10]);
    VAR
      Item@1000 : Record 27;
      Vendor@1001 : Record 23;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryPurchase.CreateVendor(Vendor);
      PurchaseInvoice.OPENNEW;
      PurchaseInvoice."Buy-from Vendor No.".SETVALUE(Vendor."No.");
      PurchaseInvoice.PurchLines.Type.SETVALUE(PurchaseInvoice.PurchLines.Type.GETOPTION(3));  // Option 3 is used for Item.
      PurchaseInvoice.PurchLines."No.".SETVALUE(Item."No.");
      PurchaseInvoice.PurchLines."Location Code".SETVALUE(LocationCode);
    END;

    LOCAL PROCEDURE CreatePurchaseReturnOrderByPage@148(VAR PurchaseReturnOrder@1002 : TestPage 6640;LocationCode@1003 : Code[10]);
    VAR
      Item@1000 : Record 27;
      Vendor@1001 : Record 23;
      ReturnReason@1004 : Record 6635;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryPurchase.CreateVendor(Vendor);
      ReturnReason.FINDFIRST;
      PurchaseReturnOrder.OPENNEW;
      PurchaseReturnOrder."Buy-from Vendor No.".SETVALUE(Vendor."No.");
      PurchaseReturnOrder.PurchLines.Type.SETVALUE(PurchaseReturnOrder.PurchLines.Type.GETOPTION(3));  // Option 3 is used for Item.
      PurchaseReturnOrder.PurchLines."No.".SETVALUE(Item."No.");
      PurchaseReturnOrder.PurchLines.Quantity.SETVALUE(LibraryRandom.RandDec(10,2));
      PurchaseReturnOrder.PurchLines."Return Reason Code".SETVALUE(ReturnReason.Code);
      PurchaseReturnOrder.PurchLines."Location Code".SETVALUE(LocationCode);
    END;

    LOCAL PROCEDURE CreateSalesCreditMemoByPage@144(VAR SalesCreditMemo@1000 : TestPage 44;LocationCode@1002 : Code[10]);
    VAR
      Customer@1005 : Record 18;
      Item@1004 : Record 27;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      SalesCreditMemo.OPENNEW;
      SalesCreditMemo."Sell-to Customer No.".SETVALUE(Customer."No.");
      SalesCreditMemo.SalesLines.Type.SETVALUE(SalesCreditMemo.SalesLines.Type.GETOPTION(3));  // Option 3 is used for Item.
      SalesCreditMemo.SalesLines."No.".SETVALUE(Item."No.");
      SalesCreditMemo.SalesLines."Location Code".SETVALUE(LocationCode);
    END;

    LOCAL PROCEDURE CreateSalesInvoiceByPage@33(No@1001 : Code[20];CustomerNo@1002 : Code[20]);
    VAR
      SalesInvoice@1000 : TestPage 43;
    BEGIN
      SalesInvoice.OPENNEW;
      SalesInvoice."No.".SETVALUE(No);
      SalesInvoice."Sell-to Customer No.".SETVALUE(CustomerNo);
      SalesInvoice.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateSalesInvoiceWithSalesLineByPage@142(VAR SalesInvoice@1000 : TestPage 43;LocationCode@1004 : Code[10]);
    VAR
      Customer@1002 : Record 18;
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateCustomer(Customer);
      SalesInvoice.OPENNEW;
      SalesInvoice."Sell-to Customer No.".SETVALUE(Customer."No.");
      SalesInvoice.SalesLines.Type.SETVALUE(SalesInvoice.SalesLines.Type.GETOPTION(3));  // Option 3 is used for Item.
      SalesInvoice.SalesLines."No.".SETVALUE(Item."No.");
      SalesInvoice.SalesLines."Location Code".SETVALUE(LocationCode);
    END;

    LOCAL PROCEDURE CreateSalesLine@72(VAR SalesHeader@1004 : Record 36;VAR SalesLine@1003 : Record 37;Type@1005 : Option;ItemNo@1001 : Code[20];Quantity@1000 : Decimal;LocationCode@1002 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,Type,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandInt(50));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@22(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1000 : Record 37;CustomerNo@1006 : Code[20];ItemNo@1004 : Code[20];Quantity@1003 : Decimal;LocationCode@1005 : Code[10];Reserve@1002 : Boolean);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      CreateSalesLine(SalesHeader,SalesLine,SalesLine.Type::Item,ItemNo,Quantity,LocationCode);
      IF Reserve THEN
        SalesLine.ShowReservation;
    END;

    LOCAL PROCEDURE CreateSalesOrderWithMultipleLines@229(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1000 : Record 37;CustomerNo@1006 : Code[20];ItemNo@1004 : Code[20];Quantity@1003 : Decimal;LocationCode@1005 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      CreateSalesLine(SalesHeader,SalesLine,SalesLine.Type::Item,ItemNo,Quantity,LocationCode);
      CreateSalesLine(SalesHeader,SalesLine,SalesLine.Type::Item,ItemNo,Quantity,LocationCode);
    END;

    LOCAL PROCEDURE CreateSalesBlanketOrder@202(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1000 : Record 37;LocationCode@1005 : Code[10]);
    VAR
      Customer@1004 : Record 18;
      Item@1002 : Record 27;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Blanket Order",Customer."No.");
      CreateSalesLine(SalesHeader,SalesLine,SalesLine.Type::Item,Item."No.",LibraryRandom.RandInt(100),LocationCode);
    END;

    LOCAL PROCEDURE CreatePurchaseBlanketOrder@205(VAR PurchaseHeader@1006 : Record 38;VAR PurchaseLine@1000 : Record 39;LocationCode@1002 : Code[10]);
    VAR
      Item@1003 : Record 27;
      Vendor@1001 : Record 23;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Blanket Order",Vendor."No.");
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,Item."No.",LibraryRandom.RandInt(100),LocationCode);
    END;

    LOCAL PROCEDURE CreateSalesOrderByPage@140(VAR SalesOrder@1000 : TestPage 42;LocationCode@1004 : Code[10]);
    VAR
      Customer@1002 : Record 18;
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateCustomer(Customer);
      SalesOrder.OPENNEW;
      SalesOrder."Sell-to Customer No.".SETVALUE(Customer."No.");
      SalesOrder.SalesLines.Type.SETVALUE(SalesOrder.SalesLines.Type.GETOPTION(3));  // Option 3 is used for Item.
      SalesOrder.SalesLines."No.".SETVALUE(Item."No.");
      SalesOrder.SalesLines.Quantity.SETVALUE(LibraryRandom.RandDec(10,2));
      SalesOrder.SalesLines."Location Code".SETVALUE(LocationCode);
    END;

    LOCAL PROCEDURE CreateSOFromBlanketSalesOrderWithPartialQuantity@62(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1002 : Record 37);
    VAR
      Customer@1000 : Record 18;
      Item@1005 : Record 27;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Blanket Order",Customer."No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));
      SalesLine.VALIDATE("Qty. to Ship",SalesLine.Quantity / 2);  // Making Sales Order of Partial Quantity.
      SalesLine.MODIFY(TRUE);
      LibrarySales.BlanketSalesOrderMakeOrder(SalesHeader);
    END;

    LOCAL PROCEDURE CreateSalesReturnOrderByPage@143(VAR SalesReturnOrder@1000 : TestPage 6630;LocationCode@1002 : Code[10]);
    VAR
      Customer@1005 : Record 18;
      Item@1004 : Record 27;
      ReturnReason@1001 : Record 6635;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      ReturnReason.FINDFIRST;
      SalesReturnOrder.OPENNEW;
      SalesReturnOrder."Sell-to Customer No.".SETVALUE(Customer."No.");
      SalesReturnOrder.SalesLines.Type.SETVALUE(SalesReturnOrder.SalesLines.Type.GETOPTION(3));  // Option 3 is used for Item.
      SalesReturnOrder.SalesLines."No.".SETVALUE(Item."No.");
      SalesReturnOrder.SalesLines.Quantity.SETVALUE(LibraryRandom.RandDec(10,2));
      SalesReturnOrder.SalesLines."Return Reason Code".SETVALUE(ReturnReason.Code);
      SalesReturnOrder.SalesLines."Location Code".SETVALUE(LocationCode);
    END;

    LOCAL PROCEDURE CreateTransferRoute@67();
    VAR
      TransferRoute@1003 : Record 5742;
    BEGIN
      LibraryWarehouse.CreateTransferRoute(TransferRoute,LocationRed.Code,LocationBlue.Code);
      TransferRoute.VALIDATE("In-Transit Code",LocationInTransit.Code);
      TransferRoute.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTransferOrder@195(VAR TransferHeader@1000 : Record 5740;VAR TransferLine@1003 : Record 5741;FromLocationCode@1001 : Code[10];ToLocationCode@1002 : Code[10];ItemNo@1004 : Code[20];Quantity@1005 : Decimal);
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocationCode,LocationInTransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateWarehouseReceipt@58(PurchaseHeader@1000 : Record 38);
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptFromPurchaseOrder@11(VAR PurchaseHeader@1000 : Record 38;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10];UseTracking@1005 : Boolean);
    VAR
      PurchaseLine@1004 : Record 39;
      ItemTrackingMode@1006 : ' ,AssignLotNo,AssignSerialNo,AssignMultipleLotNo,SelectEntries,SelectSerialNo,SelectLotNo';
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,ItemNo,Quantity,LocationCode);
      IF UseTracking THEN BEGIN
        FindPurchaseOrderLine(PurchaseLine,PurchaseHeader."No.");
        LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignSerialNo);
        PurchaseLine.OpenItemTrackingLines;
      END;
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      CreateWarehouseReceipt(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseShipment@84(SalesHeader@1000 : Record 36);
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentFromSalesOrder@26(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1006 : Record 37;CustomerNo@1005 : Code[20];ItemNo@1004 : Code[20];Quantity@1003 : Decimal;LocationCode@1002 : Code[10];Reserve@1001 : Boolean);
    BEGIN
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,CustomerNo,ItemNo,Quantity,LocationCode,Reserve);
      CreateWarehouseShipment(SalesHeader);
    END;

    LOCAL PROCEDURE CreateWhseRcpt@239(Item@1004 : Record 27) WhseRcptNo : Code[20];
    VAR
      WhseReceiptHeader@1000 : Record 7316;
      PurchLine@1003 : Record 39;
      GetSourceDocInbound@1002 : Codeunit 5751;
    BEGIN
      CreateAndReleasePurchOrdersOnSpecialOrder(Item);
      LibraryWarehouse.CreateWarehouseReceiptHeader(WhseReceiptHeader);
      WhseReceiptHeader.VALIDATE("Location Code",LocationWhite.Code);
      WhseReceiptHeader.MODIFY(TRUE);
      WhseRcptNo := WhseReceiptHeader."No.";

      WITH PurchLine DO BEGIN
        SETRANGE("No.",Item."No.");
        FINDSET;
        REPEAT
          LibraryVariableStorage.Enqueue("Document No.");
          GetSourceDocInbound.GetSingleInboundDoc(WhseReceiptHeader);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseShipmentFromSalesOrder@223(VAR SalesLine@1000 : Record 37;CustomerNo@1005 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10]);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      CreateSalesOrderWithMultipleLines(SalesHeader,SalesLine,CustomerNo,ItemNo,Quantity,LocationCode);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateWarehouseShipment(SalesHeader);
      CreateAndRegisterPick(SalesHeader."No.");
      PostWarehouseShipment(SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndRegisterPick@230(SalesHeaderNo@1000 : Code[20]);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      CreatePick(SalesHeaderNo);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeaderNo,WarehouseActivityLine."Activity Type"::Pick);
    END;

    LOCAL PROCEDURE CalcConsumptionInConsumptionJournal@220(ProductionOrderNo@1002 : Code[20]);
    VAR
      ItemJournalTemplate@1000 : Record 82;
      ItemJournalBatch@1001 : Record 233;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Consumption);
      LibraryInventory.SelectItemJournalBatchName(
        ItemJournalBatch,ItemJournalBatch."Template Type"::Consumption,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryManufacturing.CalculateConsumption(ProductionOrderNo,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE EnqueueValuesForOrderTrackingDetailsPageHandler@121(ItemNo@1000 : Code[20];Quantity@1001 : Decimal;MultipleLines@1002 : Boolean);
    BEGIN
      LibraryVariableStorage.Enqueue(MultipleLines);  // Enqueue for MultipleLines.
      LibraryVariableStorage.Enqueue(ItemNo);  // Enqueue for Item No.
      LibraryVariableStorage.Enqueue(Quantity);  // Enqueue for Quantity.
      LibraryVariableStorage.Enqueue(Quantity - Quantity);  // Enqueue for UntrackedQuantity.
      LibraryVariableStorage.Enqueue(Quantity);  // Enqueue for Line Quantity.
    END;

    LOCAL PROCEDURE EnqueueValuesForProductionJournalHandler@113(ItemTrackingMode@1000 : ' ,AssignLotNo,AssignSerialNo,AssignMultipleLotNo,SelectEntries,SelectSerialNo,SelectLotNo';No@1001 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      LibraryVariableStorage.Enqueue(ItemTrackingMode);  // Enqueue for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(No);  // Enqueue for ItemTrackingLinesPageHandler.
      IF ItemTrackingMode = ItemTrackingMode::SelectLotNo THEN
        LibraryVariableStorage.Enqueue(Quantity);
      LibraryVariableStorage.Enqueue(PostJournalLinesConfirmationMessage);  // Enqueue for ConfirmHandler.
    END;

    LOCAL PROCEDURE EnqueueValuesForItemTrackingLinesPageHandler@197(ItemTrackingMode@1002 : Option;LotNo@1000 : Code[20];Quantity@1001 : Decimal);
    BEGIN
      LibraryVariableStorage.Enqueue(ItemTrackingMode);
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(Quantity);
    END;

    LOCAL PROCEDURE FindBin@16(VAR Bin@1000 : Record 7354;Location@1001 : Record 14);
    BEGIN
      Bin.SETRANGE("Location Code",Location.Code);
      Bin.SETFILTER(Code,'<>%1&<>%2',Location."Shipment Bin Code",Location."Receipt Bin Code");
      Bin.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPickBin@183(VAR Bin@1001 : Record 7354;LocationCode@1000 : Code[10]);
    VAR
      Zone@1002 : Record 7300;
    BEGIN
      FindPickZone(Zone,LocationCode);
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.SETRANGE("Zone Code",Zone.Code);
      LibraryWarehouse.FindBin(Bin,LocationCode,Zone.Code,RANDOM(Bin.COUNT));  // Find Random Bin.
    END;

    LOCAL PROCEDURE FindPickZone@181(VAR Zone@1000 : Record 7300;LocationCode@1001 : Code[10]);
    BEGIN
      Zone.SETRANGE("Location Code",LocationCode);
      Zone.SETRANGE("Bin Type Code",LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE));  // TRUE for Put-away and Pick.
      Zone.SETRANGE("Cross-Dock Bin Zone",FALSE);
      Zone.FINDFIRST;
    END;

    LOCAL PROCEDURE FindInventoryMovementLine@49(VAR WarehouseActivityLine@1000 : Record 5767;ActionType@1001 : Option;ItemNo@1002 : Code[20];SourceDocument@1003 : Option;SourceNo@1004 : Code[20]);
    BEGIN
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,WarehouseActivityLine."Activity Type"::"Invt. Movement");
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@116(VAR ItemLedgerEntry@1000 : Record 32;ItemNo@1001 : Code[20]);
    BEGIN
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::"Positive Adjmt.");
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDSET;
    END;

    LOCAL PROCEDURE FindPostedSalesShipment@23(CustomerNo@1002 : Code[20];OrderNo@1001 : Code[20]) : Code[20];
    VAR
      SalesShipmentHeader@1000 : Record 110;
    BEGIN
      SalesShipmentHeader.SETRANGE("Sell-to Customer No.",CustomerNo);
      SalesShipmentHeader.SETRANGE("Order No.",OrderNo);
      SalesShipmentHeader.FINDFIRST;
      EXIT(SalesShipmentHeader."No.");
    END;

    LOCAL PROCEDURE FindProductionOrderLine@96(VAR ProdOrderLine@1000 : Record 5406;ProductionOrder@1001 : Record 5405);
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesOrderLine@215(VAR SalesLine@1000 : Record 37;DocumentNo@1001 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseOrderLine@147(VAR PurchaseLine@1000 : Record 39;DocumentNo@1001 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesHeader@105(VAR SalesHeader@1000 : Record 36;DocumentType@1001 : Option);
    BEGIN
      SalesHeader.SETRANGE("Document Type",DocumentType);
      SalesHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseHeader@214(VAR PurchaseHeader@1000 : Record 38;BuyFromVendorNo@1002 : Code[20];DocumentType@1001 : Option);
    BEGIN
      PurchaseHeader.SETRANGE("Buy-from Vendor No.",BuyFromVendorNo);
      PurchaseHeader.SETRANGE("Document Type",DocumentType);
      PurchaseHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesInvoiceHeader@37(VAR SalesHeader@1000 : Record 36;No@1001 : Code[20]);
    BEGIN
      SalesHeader.SETRANGE("No.",No);
      FindSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice);
    END;

    LOCAL PROCEDURE FindSalesReturnOrderLine@164(VAR SalesLine@1000 : Record 37;DocumentNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    VAR
      SalesHeader@1003 : Record 36;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type"::"Return Order");
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.SETRANGE("No.",ItemNo);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityLine@13(VAR WarehouseActivityLine@1000 : Record 5767;SourceDocument@1001 : Option;SourceNo@1002 : Code[20];ActivityType@1003 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source Document",SourceDocument);
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseReceiptLine@29(VAR WarehouseReceiptLine@1002 : Record 7317;SourceNo@1000 : Code[20]);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",WarehouseReceiptLine."Source Document"::"Purchase Order");
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseShipmentLine@141(VAR WarehouseShipmentLine@1002 : Record 7321;SourceNo@1000 : Code[20]);
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Document",WarehouseShipmentLine."Source Document"::"Sales Order");
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE GetLotNoFromItemTrackingPageHandler@150(VAR LotNo@1001 : Code[20]);
    VAR
      DequeueVariable@1000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LotNo := DequeueVariable;
    END;

    LOCAL PROCEDURE GetShipmentLineOnSalesInvoice@63(VAR SalesHeader@1000 : Record 36;CustomerNo@1001 : Code[20]);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      SalesLine.INIT;
      SalesLine.VALIDATE("Document Type",SalesHeader."Document Type");
      SalesLine.VALIDATE("Document No.",SalesHeader."No.");
      LibrarySales.GetShipmentLines(SalesLine);
    END;

    LOCAL PROCEDURE CreateSalesDocumentLinkBlanketOrder@204(VAR SalesHeader@1000 : Record 36;SalesLine@1001 : Record 37;Quantity@1005 : Decimal;DocumentType@1003 : Option);
    VAR
      SalesLine2@1002 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,SalesLine."Sell-to Customer No.");
      LibrarySales.CreateSalesLine(SalesLine2,SalesHeader,SalesLine.Type,SalesLine."No.",Quantity);
      SalesLine2.VALIDATE("Blanket Order No.",SalesLine."Document No.");
      SalesLine2.VALIDATE("Blanket Order Line No.",SalesLine."Line No.");
      SalesLine2.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentLinkBlanketOrder@208(VAR PurchaseHeader@1000 : Record 38;PurchaseLine@1001 : Record 39;Quantity@1004 : Decimal;DocumentType@1003 : Option);
    VAR
      PurchaseLine2@1002 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,PurchaseLine."Buy-from Vendor No.");
      LibraryPurchase.CreatePurchaseLine(PurchaseLine2,PurchaseHeader,PurchaseLine.Type,PurchaseLine."No.",Quantity);
      PurchaseLine2.VALIDATE("Blanket Order No.",PurchaseLine."Document No.");
      PurchaseLine2.VALIDATE("Blanket Order Line No.",PurchaseLine."Line No.");
      PurchaseLine2.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetWarehouseShipmentHeader@251(VAR WarehouseShipmentHeader@1001 : Record 7320;SourceNo@1002 : Code[20]);
    VAR
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,SourceNo);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
    END;

    LOCAL PROCEDURE OpenItemsByLocationPageFromItemCard@9(ItemNo@1000 : Code[20]);
    VAR
      ItemCard@1001 : TestPage 30;
    BEGIN
      LibraryVariableStorage.Enqueue(ItemNo);  // Enqueue for ItemsByLocationMatrixPageHandler.
      ItemCard.OPENEDIT;
      ItemCard.FILTER.SETFILTER("No.",ItemNo);
      ItemCard.ItemsByLocation.INVOKE;  // ItemsByLocationPageHandler is invoked.
    END;

    LOCAL PROCEDURE OpenOrderTrackingPageFromPlanningWorksheet@70(ItemNo@1001 : Code[20];RefOrderType@1003 : Option;Quantity@1002 : Decimal;MultipleLines@1000 : Boolean);
    VAR
      PlanningWorksheet@1004 : TestPage 99000852;
    BEGIN
      EnqueueValuesForOrderTrackingDetailsPageHandler(ItemNo,Quantity,MultipleLines);
      PlanningWorksheet.OPENEDIT;
      PlanningWorksheet.FILTER.SETFILTER("No.",ItemNo);
      PlanningWorksheet.FILTER.SETFILTER("Ref. Order Type",FORMAT(RefOrderType));
      PlanningWorksheet.OrderTracking.INVOKE;
    END;

    LOCAL PROCEDURE OpenOrderTrackingPageFromSalesOrder@77(DocumentNo@1003 : Code[20];ItemNo@1000 : Code[20];Quantity@1001 : Decimal);
    VAR
      SalesOrder@1004 : TestPage 42;
    BEGIN
      EnqueueValuesForOrderTrackingDetailsPageHandler(ItemNo,Quantity,TRUE);  // Multiple Lines as TRUE.
      OpenSalesOrderByPage(SalesOrder,DocumentNo);
      SalesOrder.SalesLines.OrderTracking.INVOKE;
    END;

    LOCAL PROCEDURE OpenSalesOrderByPage@114(VAR SalesOrder@1000 : TestPage 42;No@1001 : Code[20]);
    BEGIN
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",No);
    END;

    LOCAL PROCEDURE PostJobJournalLineWithSelectedItemTrackingLines@199(JobTask@1003 : Record 1001;ItemNo@1005 : Code[20];Quantity@1008 : Decimal) : Code[20];
    VAR
      JobJournalLine@1002 : Record 210;
      LibraryJob@1001 : Codeunit 131920;
    BEGIN
      LibraryJob.CreateJobJournalLine(JobJournalLine."Line Type"::" ",JobTask,JobJournalLine);
      JobJournalLine.VALIDATE(Type,JobJournalLine.Type::Item);
      JobJournalLine.VALIDATE("No.",ItemNo);
      JobJournalLine.VALIDATE(Quantity,Quantity);
      JobJournalLine.MODIFY(TRUE);
      JobJournalLine.OpenItemTrackingLines(FALSE);
      LibraryVariableStorage.Enqueue(PostJobJournalLines);
      LibraryVariableStorage.Enqueue(JobJournalPosted);
      LibraryJob.PostJobJournal(JobJournalLine);
      EXIT(JobJournalLine."Document No.");
    END;

    LOCAL PROCEDURE PostSalesInvoiceWithGetShipmentLinesAndItemCharge@32(VAR SalesLine@1001 : Record 37;No@1002 : Code[20];CustomerNo@1003 : Code[20]) : Code[20];
    VAR
      ItemCharge@1004 : Record 5800;
      SalesHeader@1000 : Record 36;
    BEGIN
      UpdateManualNosAsTrueOnNoSeriesSetupOfSalesInvoice;
      CreateSalesInvoiceByPage(No,CustomerNo);
      FindSalesInvoiceHeader(SalesHeader,No);
      LibraryInventory.CreateItemCharge(ItemCharge);
      CreateSalesLine(SalesHeader,SalesLine,SalesLine.Type::"Charge (Item)",ItemCharge."No.",LibraryRandom.RandDec(10,2),'');
      LibraryVariableStorage.Enqueue(SalesLine.Quantity);  // Enqueue for ItemChargeAssignmentSalesPageHandler.
      SalesLine.ShowItemChargeAssgnt;
      LibrarySales.GetShipmentLines(SalesLine);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));  // Post as SHIP and INVOICE.
    END;

    LOCAL PROCEDURE PostSalesReturnOrderWithGetPostedDocLinesToReverse@162(VAR SalesHeader@1000 : Record 36;CustomerNo@1001 : Code[20]) : Code[20];
    VAR
      ReasonCode@1002 : Record 231;
    BEGIN
      LibraryERM.CreateReasonCode(ReasonCode);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",CustomerNo);
      SalesHeader.VALIDATE("Reason Code",ReasonCode.Code);
      SalesHeader.MODIFY(TRUE);
      SalesHeader.GetPstdDocLinesToRevere;
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE));  // Post as RECEIVE.
    END;

    LOCAL PROCEDURE PostSalesOrder@122(SellToCustomerNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.SETRANGE("Sell-to Customer No.",SellToCustomerNo);
      FindSalesHeader(SalesHeader,SalesHeader."Document Type"::Order);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);  // Ship as TRUE.
    END;

    LOCAL PROCEDURE CreateItemOnInventoryWithTracking@255(VAR ItemNo@1000 : Code[20];VAR LotNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      Item@1004 : Record 27;
      ItemTrackingMode@1003 : ' ,AssignLotNo,SelectEntries,SetQuantity,VerifyEntryNo';
    BEGIN
      CreateItemWithItemTrackingCode(Item,TRUE,FALSE,TRUE,LibraryUtility.GetGlobalNoSeriesCode,'');
      ItemNo := Item."No.";

      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);
      CreateAndPostItemJournalLine(LocationOrange.Code,'',ItemNo,'',Quantity,TRUE,TRUE);
      GetLotNoFromItemTrackingPageHandler(LotNo);
    END;

    LOCAL PROCEDURE PostPurchaseDocument@206(BuyFromVendorNo@1002 : Code[20];DocumentType@1004 : Option;Receive@1001 : Boolean;Invoice@1003 : Boolean);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      FindPurchaseHeader(PurchaseHeader,BuyFromVendorNo,DocumentType);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",LibraryUtility.GenerateGUID);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,Receive,Invoice);
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@55(SourceNo@1003 : Code[20]);
    VAR
      WarehouseReceiptHeader@1001 : Record 7316;
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,SourceNo);
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE PostWarehouseShipment@107(SourceNo@1003 : Code[20]);
    VAR
      WarehouseShipmentHeader@1000 : Record 7320;
    BEGIN
      GetWarehouseShipmentHeader(WarehouseShipmentHeader,SourceNo);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);
    END;

    LOCAL PROCEDURE PreparationForCalcConsumptionAndOpeningProductionJournal@222(VAR ProductionOrder@1012 : Record 5405) : Code[20];
    VAR
      Bin@1003 : Record 7354;
      ChildItem@1000 : Record 27;
      ParentItem@1001 : Record 27;
      ProdOrderComponent@1005 : Record 5407;
      Quantity@1002 : Decimal;
    BEGIN
      // General preparation for running Calc. Consumption / openning Production Journal.
      Quantity := LibraryRandom.RandInt(10);
      FindBin(Bin,LocationGreen);
      CreateItemWithProductionBOM(ParentItem,ChildItem,Quantity,FALSE,FALSE,'');
      CreateAndPostItemJournalLine(
        Bin."Location Code",Bin.Code,ChildItem."No.",'',Quantity,FALSE,FALSE);
      UpdateBinContentForItem(LocationGreen.Code,ChildItem."No.");
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Bin,ParentItem."No.",Quantity);

      // Filled with another Bin which does not include the Item in Prod. Order Component.
      UpdateBinCodeOnProductionOrderComponent(ProdOrderComponent,Bin,ProductionOrder);

      EXIT(ChildItem."No.");
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@35(SourceDocument@1001 : Option;SourceNo@1002 : Code[20];ActivityType@1000 : Option);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE ReleasePurchaseOrders@235(ItemNo@1004 : Code[20]);
    VAR
      PurchHeader@1003 : Record 38;
      PurchLine@1000 : Record 39;
    BEGIN
      PurchLine.SETRANGE("No.",ItemNo);
      PurchLine.FINDSET;
      REPEAT
        PurchHeader.GET(PurchHeader."Document Type"::Order,PurchLine."Document No.");
        LibraryPurchase.ReleasePurchaseDocument(PurchHeader);
      UNTIL PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SelectConsumptionLine@219(VAR ItemJournalLine@1000 : Record 83;ProductionOrderNo@1002 : Code[20]);
    BEGIN
      WITH ItemJournalLine DO BEGIN
        SETRANGE("Entry Type","Entry Type"::Consumption);
        SETRANGE("Order Type","Order Type"::Production);
        SETRANGE("Order No.",ProductionOrderNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE SelectRequisitionTemplateName@1033() : Code[10];
    VAR
      ReqWkshTemplate@1001 : Record 244;
    BEGIN
      WITH ReqWkshTemplate DO BEGIN
        SETRANGE(Type,Type::Planning);
        SETRANGE(Recurring,FALSE);
        FINDFIRST;
        EXIT(Name);
      END;
    END;

    LOCAL PROCEDURE UndoSalesShipmentLine@182(DocumentNo@1000 : Code[20]);
    VAR
      SalesShipmentLine@1002 : Record 111;
    BEGIN
      LibraryVariableStorage.Enqueue(UndoShipmentConfirmationMessage);  // UndoShipmentMessage Used in ConfirmHandler.
      SalesShipmentLine.SETRANGE("Document No.",DocumentNo);
      LibrarySales.UndoSalesShipmentLine(SalesShipmentLine);
    END;

    LOCAL PROCEDURE UndoMultipleShipmentLines@225(OrderNo@1002 : Code[20]);
    VAR
      SalesShipmentLine@1001 : Record 111;
    BEGIN
      LibraryVariableStorage.Enqueue(UndoShipmentConfirmationMessage);  // UndoShipmentMessage Used in ConfirmHandler.
      LibraryVariableStorage.Enqueue(UndoShipmentAfterPickedConfirmationMsg);
      LibraryVariableStorage.Enqueue(UndoShipmentAfterPickedConfirmationMsg);
      SalesShipmentLine.SETRANGE("Order No.",OrderNo);
      LibrarySales.UndoSalesShipmentLine(SalesShipmentLine);
    END;

    LOCAL PROCEDURE UpdateAlwaysCreatePickLineOnLocation@30(VAR Location@1001 : Record 14;NewAlwaysCreatePickLine@1002 : Boolean) OldAlwaysCreatePickLine : Boolean;
    BEGIN
      OldAlwaysCreatePickLine := Location."Always Create Pick Line";
      Location.VALIDATE("Always Create Pick Line",NewAlwaysCreatePickLine);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinCodeOnProductionOrderComponent@89(VAR ProdOrderComponent@1000 : Record 5407;VAR Bin@1003 : Record 7354;ProductionOrder@1001 : Record 5405) BinCode : Code[20];
    BEGIN
      BinCode := Bin.Code;
      Bin.NEXT;  // Next is required to get second different Bin.
      ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderComponent.FINDFIRST;
      ProdOrderComponent.VALIDATE("Location Code",Bin."Location Code");
      ProdOrderComponent.VALIDATE("Bin Code",Bin.Code);
      ProdOrderComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinCodeOnPutAwayLine@192(Bin@1000 : Record 7354;SourceNo@1002 : Code[20]);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Zone Code",Bin."Zone Code");
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Place);
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,
        WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityLine.MODIFYALL("Bin Code",Bin.Code,TRUE);
    END;

    LOCAL PROCEDURE UpdateExpirationDateOnReservationEntry@136(ItemNo@1000 : Code[20]);
    VAR
      ReservationEntry@1001 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.MODIFYALL("Expiration Date",WORKDATE,TRUE);
    END;

    LOCAL PROCEDURE UpdateLotNoOnInventoryMovementLine@99(ActionType@1005 : Option;SourceNo@1002 : Code[20];LotNo@1003 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Prod. Consumption",SourceNo,
        WarehouseActivityLine."Activity Type"::"Invt. Movement");
      WarehouseActivityLine.VALIDATE("Lot No.",LotNo);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateManualNosAsTrueOnNoSeriesSetupOfSalesInvoice@24();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
      NoSeries@1001 : Record 308;
    BEGIN
      SalesReceivablesSetup.GET;
      NoSeries.GET(SalesReceivablesSetup."Invoice Nos.");
      NoSeries.VALIDATE("Manual Nos.",TRUE);
      NoSeries.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateNoSeriesOnItemJournalBatch@110(VAR ItemJournalBatch@1000 : Record 233;NoSeries@1001 : Code[10]);
    BEGIN
      ItemJournalBatch.VALIDATE("No. Series",NoSeries);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchasingCodeOnSalesLine@243(VAR SalesLine@1002 : Record 37);
    VAR
      Purchasing@1001 : Record 5721;
    BEGIN
      LibraryPurchase.CreatePurchasingCode(Purchasing);
      Purchasing.VALIDATE("Special Order",TRUE);
      Purchasing.MODIFY(TRUE);
      SalesLine.VALIDATE("Purchasing Code",Purchasing.Code);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityBaseOnReservationEntry@171(ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.FINDFIRST;
      ReservationEntry.VALIDATE("Quantity (Base)",Quantity);
      ReservationEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityOnSalesLine@165(VAR SalesLine@1000 : Record 37;Quantity@1001 : Decimal);
    BEGIN
      SalesLine.VALIDATE(Quantity,Quantity);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQtyToShipOnSalesLine@217(SellToCustomerNo@1001 : Code[20];ShipQty@1004 : Decimal);
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1005 : Record 37;
    BEGIN
      SalesHeader.SETRANGE("Sell-to Customer No.",SellToCustomerNo);
      FindSalesHeader(SalesHeader,SalesHeader."Document Type"::Order);
      FindSalesOrderLine(SalesLine,SalesHeader."No.");
      SalesLine.VALIDATE("Qty. to Ship",ShipQty);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQtyToReceiveOnPurchaseLine@213(BuyFromVendorNo@1002 : Code[20];DocumentType@1004 : Option;ReceiveQty@1005 : Decimal);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1006 : Record 39;
    BEGIN
      FindPurchaseHeader(PurchaseHeader,BuyFromVendorNo,DocumentType);
      FindPurchaseOrderLine(PurchaseLine,PurchaseHeader."No.");
      PurchaseLine.VALIDATE("Qty. to Receive",ReceiveQty);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityOnSalesAndReservationLine@170(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      LibrarySales.ReopenSalesDocument(SalesHeader);
      UpdateQuantityBaseOnReservationEntry(ItemNo,Quantity);
      FindSalesReturnOrderLine(SalesLine,SalesHeader."No.",ItemNo);
      UpdateQuantityOnSalesLine(SalesLine,Quantity);
    END;

    LOCAL PROCEDURE UpdateReplenishmentSystemAsTransferOnSKU@69(LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];TransferFromCode@1003 : Code[10]);
    VAR
      StockkeepingUnit@1000 : Record 5700;
    BEGIN
      StockkeepingUnit.GET(LocationCode,ItemNo,'');
      StockkeepingUnit.VALIDATE("Replenishment System",StockkeepingUnit."Replenishment System"::Transfer);
      StockkeepingUnit.VALIDATE("Transfer-from Code",TransferFromCode);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSerialNoOnInventoryMovementLines@94(ItemNo@1001 : Code[20];ActionType@1004 : Option;SourceNo@1003 : Code[20];MoveNext@1005 : Boolean);
    VAR
      ItemLedgerEntry@1000 : Record 32;
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      FindInventoryMovementLine(
        WarehouseActivityLine,ActionType,ItemNo,WarehouseActivityLine."Source Document"::"Prod. Consumption",SourceNo);
      FindItemLedgerEntry(ItemLedgerEntry,ItemNo);
      IF MoveNext THEN
        ItemLedgerEntry.NEXT(WarehouseActivityLine.COUNT);  // Required for Entering Wrong Serial No.
      REPEAT
        WarehouseActivityLine.VALIDATE("Serial No.",ItemLedgerEntry."Serial No.");
        WarehouseActivityLine.MODIFY(TRUE);
        ItemLedgerEntry.NEXT;
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateUsePutAwayWorksheetOnLocation@130(VAR Location@1000 : Record 14;UsePutAwayWorksheet@1001 : Boolean);
    BEGIN
      Location.VALIDATE("Use Put-away Worksheet",UsePutAwayWorksheet);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVariantCodeOnTransferLine@196(VAR TransferLine@1000 : Record 5741;VariantCode@1001 : Code[10]);
    BEGIN
      TransferLine.VALIDATE("Variant Code",VariantCode);
      TransferLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVendorNoOnStockkeepingUnit@126(LocationCode@1000 : Code[10];ItemNo@1001 : Code[20]);
    VAR
      StockkeepingUnit@1003 : Record 5700;
      Vendor@1004 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      StockkeepingUnit.GET(LocationCode,ItemNo,'');
      StockkeepingUnit.VALIDATE("Vendor No.",Vendor."No.");
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinContentForItem@218(LocationCode@1001 : Code[10];ItemNo@1002 : Code[20]);
    VAR
      BinContent@1000 : Record 7302;
    BEGIN
      WITH BinContent DO BEGIN
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        VALIDATE(Default,FALSE);
        VALIDATE(Fixed,FALSE);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UndoPurchaseReceiptLine@151(ItemNo@1002 : Code[20]);
    VAR
      PurchRcptLine@1000 : Record 121;
    BEGIN
      LibraryVariableStorage.Enqueue(UndoReceiptConfirmationMessage);  // UndoReceiptMessage Used in ConfirmHandler.
      PurchRcptLine.SETRANGE("No.",ItemNo);
      PurchRcptLine.FINDFIRST;
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);
    END;

    LOCAL PROCEDURE UndoReturnReceiptLine@163(DocumentNo@1000 : Code[20]);
    VAR
      ReturnReceiptLine@1001 : Record 6661;
    BEGIN
      LibraryVariableStorage.Enqueue(UndoReturnReceiptConfirmationMessage);  // Enqueue for ConfirmHandler.
      ReturnReceiptLine.SETRANGE("Document No.",DocumentNo);
      LibrarySales.UndoReturnReceiptLine(ReturnReceiptLine);
    END;

    LOCAL PROCEDURE VerifyInternalMovementHeaderExists@41(LocationCode@1001 : Code[10];ToBinCode@1002 : Code[20]);
    VAR
      InternalMovementHeader@1000 : Record 7346;
    BEGIN
      InternalMovementHeader.SETRANGE("Location Code",LocationCode);
      InternalMovementHeader.SETRANGE("To Bin Code",ToBinCode);
      Assert.IsTrue(InternalMovementHeader.ISEMPTY,STRSUBSTNO(InternalMovementHeaderDelete,InternalMovementHeader.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyGLEntry@7(DocumentNo@1000 : Code[20];GLAccountNo@1001 : Code[20];Amount@1002 : Decimal;NextLine@1004 : Boolean);
    VAR
      GLEntry@1003 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.FINDSET;
      IF NextLine THEN
        GLEntry.NEXT;
      GLEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyInternalMovementLine@39(Bin@1001 : Record 7354;ItemNo@1002 : Code[20];ToBinCode@1004 : Code[20];Quantity@1005 : Decimal);
    VAR
      InternalMovementLine@1000 : Record 7347;
    BEGIN
      InternalMovementLine.SETRANGE("Item No.",ItemNo);
      InternalMovementLine.SETRANGE("Location Code",Bin."Location Code");
      InternalMovementLine.SETRANGE("From Bin Code",Bin.Code);
      InternalMovementLine.SETRANGE("To Bin Code",ToBinCode);
      InternalMovementLine.FINDFIRST;
      InternalMovementLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@186(EntryType@1006 : Option;DocumentType@1002 : Option;LocationCode@1007 : Code[10];ItemNo@1003 : Code[20];LotNo@1001 : Code[20];VariantCode@1004 : Code[10];Quantity@1005 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.SETRANGE("Document Type",DocumentType);
      ItemLedgerEntry.SETRANGE("Location Code",LocationCode);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Lot No.",LotNo);
      ItemLedgerEntry.SETRANGE("Variant Code",VariantCode);
      ItemLedgerEntry.FINDLAST;
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyInventoryMovementLinesForProdConsumption@90(ActionType@1002 : Option;ItemNo@1003 : Code[20];SourceNo@1001 : Code[20];BinCode@1005 : Code[20];Quantity@1004 : Decimal;ExpectedTotalQuantity@1006 : Decimal);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
      ActualTotalQuantity@1007 : Decimal;
    BEGIN
      FindInventoryMovementLine(
        WarehouseActivityLine,ActionType,ItemNo,WarehouseActivityLine."Source Document"::"Prod. Consumption",SourceNo);
      REPEAT
        WarehouseActivityLine.TESTFIELD("Bin Code",BinCode);
        WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
        ActualTotalQuantity += WarehouseActivityLine.Quantity;
      UNTIL WarehouseActivityLine.NEXT = 0;
      Assert.AreEqual(ExpectedTotalQuantity,ActualTotalQuantity,QuantityMustBeSame);
    END;

    LOCAL PROCEDURE VerifyInventoryMovementLineForLot@43(Bin@1003 : Record 7354;ActionType@1001 : Option;ItemNo@1002 : Code[20];LotNo@1005 : Code[20];Quantity@1006 : Decimal);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindInventoryMovementLine(WarehouseActivityLine,ActionType,ItemNo,WarehouseActivityLine."Source Document"::" ",'');
      WarehouseActivityLine.TESTFIELD("Location Code",Bin."Location Code");
      WarehouseActivityLine.TESTFIELD("Bin Code",Bin.Code);
      WarehouseActivityLine.TESTFIELD("Lot No.",LotNo);
      WarehouseActivityLine.TESTFIELD("Expiration Date",WORKDATE);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyInventoryMovementLinesForSerial@42(Bin@1003 : Record 7354;ActionType@1001 : Option;ItemNo@1002 : Code[20];TotalQuantity@1005 : Decimal);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
      Quantity@1004 : Decimal;
    BEGIN
      FindInventoryMovementLine(WarehouseActivityLine,ActionType,ItemNo,WarehouseActivityLine."Source Document"::" ",'');
      REPEAT
        WarehouseActivityLine.TESTFIELD("Location Code",Bin."Location Code");
        WarehouseActivityLine.TESTFIELD("Bin Code",Bin.Code);
        WarehouseActivityLine.TESTFIELD("Serial No.");
        WarehouseActivityLine.TESTFIELD("Expiration Date",WORKDATE);
        WarehouseActivityLine.TESTFIELD(Quantity,1);   // Value required for Serial No. Item Tracking.
        Quantity += WarehouseActivityLine.Quantity;
      UNTIL WarehouseActivityLine.NEXT = 0;
      Assert.AreEqual(TotalQuantity,Quantity,QuantityMustBeSame);
    END;

    LOCAL PROCEDURE VerifyJobLedgerEntry@200(DocumentNo@1000 : Code[20];JobNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      JobLedgerEntry@1003 : Record 169;
    BEGIN
      JobLedgerEntry.SETRANGE("Document No.",DocumentNo);
      JobLedgerEntry.FINDFIRST;
      JobLedgerEntry.TESTFIELD("Job No.",JobNo);
      JobLedgerEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyOrderTracking@81(VAR OrderTracking@1006 : TestPage 99000822);
    VAR
      ItemNo@1002 : Variant;
      Quantity@1005 : Variant;
      UntrackedQuantity@1004 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ItemNo);  // Dequeue variable.
      LibraryVariableStorage.Dequeue(Quantity);  // Dequeue variable.
      LibraryVariableStorage.Dequeue(UntrackedQuantity);  // Dequeue variable.
      OrderTracking.CurrItemNo.ASSERTEQUALS(ItemNo);
      OrderTracking.Quantity.ASSERTEQUALS(Quantity);
      OrderTracking."Untracked Quantity".ASSERTEQUALS(UntrackedQuantity);
    END;

    LOCAL PROCEDURE VerifyOrderTrackingLine@128(VAR OrderTracking@1002 : TestPage 99000822);
    VAR
      Quantity@1000 : Variant;
      LineQuantity@1001 : Decimal;
    BEGIN
      LibraryVariableStorage.Dequeue(Quantity);  // Dequeue variable.
      LineQuantity := Quantity;
      OrderTracking.Quantity.ASSERTEQUALS(LineQuantity);
    END;

    LOCAL PROCEDURE VerifyOrderTrackingOnReqLineAndSalesOrder@102(ItemNo@1000 : Code[20];Quantity@1003 : Decimal;SalesHeaderNo@1001 : Code[20]);
    VAR
      RequisitionLine@1002 : Record 246;
    BEGIN
      OpenOrderTrackingPageFromPlanningWorksheet(ItemNo,RequisitionLine."Ref. Order Type"::Transfer,Quantity,FALSE);  // Multiple Lines as FALSE.
      OpenOrderTrackingPageFromPlanningWorksheet(ItemNo,RequisitionLine."Ref. Order Type"::Purchase,Quantity,TRUE);  // Multiple Lines as TRUE.
      OpenOrderTrackingPageFromSalesOrder(SalesHeaderNo,ItemNo,-Quantity);
    END;

    LOCAL PROCEDURE VerifyProdOrderLineNotExists@275(ItemNo@1002 : Code[20]);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      ProdOrderLine.INIT;
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      Assert.RecordIsEmpty(ProdOrderLine);
    END;

    LOCAL PROCEDURE VerifyProductionOrderComponent@95(ProdOrderComponent@1000 : Record 5407;QuantityPicked@1001 : Decimal;RemainingQuantity@1002 : Decimal;BinCode@1003 : Code[20]);
    BEGIN
      ProdOrderComponent.FIND;
      ProdOrderComponent.TESTFIELD("Qty. Picked",QuantityPicked);
      ProdOrderComponent.TESTFIELD("Remaining Quantity",RemainingQuantity);
      ProdOrderComponent.TESTFIELD("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE VerifyPurchRcptLine@152(OrderNo@1000 : Code[20];ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];Quantity@1001 : Decimal;MoveNext@1005 : Boolean);
    VAR
      PurchRcptLine@1004 : Record 121;
    BEGIN
      PurchRcptLine.SETRANGE("Order No.",OrderNo);
      PurchRcptLine.SETRANGE("No.",ItemNo);
      PurchRcptLine.SETRANGE("Location Code",LocationCode);
      PurchRcptLine.FINDSET;
      IF MoveNext THEN
        PurchRcptLine.NEXT;
      PurchRcptLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPutAwayLine@191(ActionType@1001 : Option;SourceNo@1002 : Code[20];ItemNo@1004 : Code[20];LocationCode@1003 : Code[10];Quantity@1005 : Decimal;CrossDockInformation@1006 : Option);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,
        WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityLine.SETRANGE("Cross-Dock Information",CrossDockInformation);
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      WarehouseActivityLine.SETRANGE("Location Code",LocationCode);
      WarehouseActivityLine.SETRANGE(Quantity,Quantity);
      Assert.AreEqual(
        1,WarehouseActivityLine.COUNT,'Unexpected no. of Whse activity lines for Put Away ' + WarehouseActivityLine."No.");
    END;

    LOCAL PROCEDURE VerifyQtyToCrossDock@241(ItemNo@1005 : Code[20];QtyToReceive@1000 : Decimal;QtyToCrossDock@1001 : Decimal);
    VAR
      WhseRcptLine@1002 : Record 7317;
    BEGIN
      WITH WhseRcptLine DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Qty. to Receive",QtyToReceive);
        FINDFIRST;
        TESTFIELD("Qty. to Cross-Dock",QtyToCrossDock);
      END;
    END;

    LOCAL PROCEDURE VerifySalesInvoiceLine@253(DocumentNo@1001 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      SalesInvoiceLine@1000 : Record 113;
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.",DocumentNo);
      SalesInvoiceLine.SETRANGE("No.",ItemNo);
      SalesInvoiceLine.FINDFIRST;
      SalesInvoiceLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifySalesShipmentLine@127(DocumentNo@1000 : Code[20];ItemNo@1004 : Code[20];Quantity@1001 : Decimal;MoveNext@1003 : Boolean);
    VAR
      SalesShipmentLine@1002 : Record 111;
    BEGIN
      SalesShipmentLine.SETRANGE("Document No.",DocumentNo);
      SalesShipmentLine.SETRANGE("No.",ItemNo);
      SalesShipmentLine.FINDSET;
      IF MoveNext THEN
        SalesShipmentLine.NEXT;
      SalesShipmentLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseEntry@6(EntryType@1001 : Option;SourceDocument@1007 : Option;ItemNo@1002 : Code[20];BinCode@1006 : Code[20];LotNo@1005 : Code[20];Quantity@1004 : Decimal;MoveNext@1003 : Boolean);
    VAR
      WarehouseEntry@1000 : Record 7312;
    BEGIN
      WarehouseEntry.SETRANGE("Entry Type",EntryType);
      WarehouseEntry.SETRANGE("Source Document",SourceDocument);
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      WarehouseEntry.SETRANGE("Bin Code",BinCode);
      WarehouseEntry.SETRANGE("Lot No.",LotNo);
      WarehouseEntry.FINDSET;
      IF MoveNext THEN
        WarehouseEntry.NEXT;
      WarehouseEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehousePickLine@51(ActionType@1000 : Option;SourceNo@1001 : Code[20];ItemNo@1004 : Code[20];Quantity@1005 : Decimal;BinCode@1002 : Code[20]);
    VAR
      WarehouseActivityLine@1003 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SourceNo,
        WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityLine.TESTFIELD("Item No.",ItemNo);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
      WarehouseActivityLine.TESTFIELD("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE VerifyWarehouseReceiptLine@189(SourceNo@1001 : Code[20];ItemNo@1000 : Code[20];Quantity@1004 : Decimal;QtyToCrossDock@1005 : Decimal;LocationCode@1006 : Code[10];MoveNext@1003 : Boolean);
    VAR
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,SourceNo);
      IF MoveNext THEN
        WarehouseReceiptLine.NEXT;
      WarehouseReceiptLine.TESTFIELD("Item No.",ItemNo);
      WarehouseReceiptLine.TESTFIELD(Quantity,Quantity);
      WarehouseReceiptLine.TESTFIELD("Qty. to Cross-Dock",QtyToCrossDock);
      WarehouseReceiptLine.TESTFIELD("Location Code",LocationCode);
    END;

    LOCAL PROCEDURE VerifyNoErrorForJobJnlReversal@194(ManExpirDateEntryReqd@1018 : Boolean);
    VAR
      Item@1003 : Record 27;
      PurchaseHeader@1002 : Record 38;
      JobTask@1005 : Record 1001;
      LotNo@1001 : Variant;
      DocumentNo@1004 : Code[20];
      Quantity@1012 : Decimal;
      ItemTrackingMode@1015 : ' ,AssignLotNo,AssignSerialNo,AssignMultipleLotNo,SelectEntries,SelectSerialNo,SelectLotNo';
    BEGIN
      // Setup: Create and Post Purchase Order with Assigned Lot No. and Expiration Date.
      // Post Job Journal with Select Entries and with Positive Quantity.
      Initialize;
      Quantity := LibraryRandom.RandInt(50);
      CreateItemWithItemTrackingCode(Item,TRUE,FALSE,ManExpirDateEntryReqd,LibraryUtility.GetGlobalNoSeriesCode,'');
      CreatePurchaseOrderWithLot(PurchaseHeader,Item."No.",Quantity);
      UpdateExpirationDateOnReservationEntry(Item."No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      LibraryVariableStorage.Dequeue(LotNo);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::SelectEntries);
      CreateJobWithJobTask(JobTask);
      PostJobJournalLineWithSelectedItemTrackingLines(JobTask,Item."No.",Quantity);
      EnqueueValuesForItemTrackingLinesPageHandler(ItemTrackingMode::SelectLotNo,LotNo,-Quantity);

      // Exercise: Post Job Journal.
      DocumentNo := PostJobJournalLineWithSelectedItemTrackingLines(JobTask,Item."No.",-Quantity);

      // Verify: Verify Job Journal Line with Negative Quantity and Expiration Date Posted with out error Message.
      VerifyJobLedgerEntry(DocumentNo,JobTask."Job No.",-Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseEntryWithTotalLines@227(EntryType@1007 : Option;SourceDocument@1006 : Option;ItemNo@1005 : Code[20];WarehouseEntryCount@1000 : Integer);
    VAR
      WarehouseEntry@1008 : Record 7312;
    BEGIN
      WarehouseEntry.SETRANGE("Entry Type",EntryType);
      WarehouseEntry.SETRANGE("Source Document",SourceDocument);
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      Assert.AreEqual(WarehouseEntryCount,WarehouseEntry.COUNT,WarehouseEntryMsg);
    END;

    LOCAL PROCEDURE MakeSalesOrderAndVerifyErr@210(SalesHeader@1000 : Record 36;SalesLine@1001 : Record 37;ExpectedQty@1002 : Integer);
    BEGIN
      COMMIT; // COMMIT is necessary here since the following LibraryInventory.BlanketSalesOrderMakeOrder will invoke RUNMODAL.
      ASSERTERROR LibrarySales.BlanketSalesOrderMakeOrder(SalesHeader);
      Assert.ExpectedError(
        STRSUBSTNO(
          NotMadeOrderErr,SalesLine.FIELDCAPTION("Qty. to Ship (Base)"),SalesLine.Type,
          SalesLine."No.",SalesLine.FIELDCAPTION("Line No."),SalesLine."Line No.",ExpectedQty));
    END;

    LOCAL PROCEDURE MakePurchaseOrderAndVerifyErr@211(PurchaseHeader@1000 : Record 38;PurchaseLine@1001 : Record 39;ExpectedQty@1002 : Integer);
    BEGIN
      COMMIT; // COMMIT is necessary here since the following LibraryInventory.BlanketPurchaseOrderMakeOrder will invoke RUNMODAL.
      ASSERTERROR LibraryPurchase.BlanketPurchaseOrderMakeOrder(PurchaseHeader);
      Assert.ExpectedError(
        STRSUBSTNO(
          NotMadeOrderErr,PurchaseLine.FIELDCAPTION("Qty. to Receive (Base)"),PurchaseLine.Type,
          PurchaseLine."No.",PurchaseLine.FIELDCAPTION("Line No."),PurchaseLine."Line No.",ExpectedQty));
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@50(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);
      Assert.IsTrue(STRPOS(ConfirmMessage,ExpectedMessage) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE CheckAvailabilityFormHandler@201(VAR CheckAvailability@1000 : Page 342;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::Yes;
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreatePageHandler@123(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GetShipmentLinesPageHandler@25(VAR GetShipmentLines@1000 : TestPage 5708);
    BEGIN
      GetShipmentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemsByLocationMatrixPageHandler@59(VAR ItemsbyLocationMatrix@1000 : TestPage 9231);
    VAR
      ItemNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ItemNo);
      ItemsbyLocationMatrix."No.".ASSERTEQUALS(ItemNo);
    END;

    [PageHandler]
    PROCEDURE ItemsByLocationPageHandler@68(VAR ItemsbyLocation@1000 : TestPage 491);
    BEGIN
      ItemsbyLocation.ShowMatrix.INVOKE;
      ItemsbyLocation.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemChargeAssignmentSalesPageHandler@65(VAR ItemChargeAssignmentSales@1000 : TestPage 5814);
    VAR
      DequeueVariable@1005 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      ItemChargeAssignmentSales.GetShipmentLines.INVOKE;
      ItemChargeAssignmentSales."Qty. to Assign".SETVALUE(DequeueVariable);
      ItemChargeAssignmentSales.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@125(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      ItemLedgerEntry@1005 : Record 32;
      DequeueVariable@1004 : Variant;
      QuantityBase@1006 : Variant;
      ItemTrackingMode@1003 : ' ,AssignLotNo,AssignSerialNo,AssignMultipleLotNo,SelectEntries,SelectSerialNo,SelectLotNo';
      ItemNo@1002 : Code[20];
      TrackingQuantity@1001 : Decimal;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      ItemTrackingMode := DequeueVariable;
      CASE ItemTrackingMode OF
        ItemTrackingMode::AssignLotNo:
          BEGIN
            ItemTrackingLines."Assign Lot No.".INVOKE;
            LibraryVariableStorage.Enqueue(ItemTrackingLines."Lot No.".VALUE);
          END;
        ItemTrackingMode::AssignSerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;
        ItemTrackingMode::AssignMultipleLotNo:
          BEGIN
            TrackingQuantity := ItemTrackingLines.Quantity3.ASDECIMAL / 2;  // Value required for test.
            AssignLotNoOnItemTrackingLine(ItemTrackingLines,TrackingQuantity);
            ItemTrackingLines.NEXT;
            AssignLotNoOnItemTrackingLine(ItemTrackingLines,TrackingQuantity);
          END;
        ItemTrackingMode::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
        ItemTrackingMode::SelectSerialNo:
          BEGIN
            LibraryVariableStorage.Dequeue(DequeueVariable);
            ItemNo := DequeueVariable;
            ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
            ItemLedgerEntry.FINDLAST;
            ItemTrackingLines."Serial No.".SETVALUE(ItemLedgerEntry."Serial No.");
          END;
        ItemTrackingMode::SelectLotNo:
          BEGIN
            LibraryVariableStorage.Dequeue(DequeueVariable);
            LibraryVariableStorage.Dequeue(QuantityBase);
            ItemTrackingLines."Lot No.".SETVALUE(DequeueVariable);
            ItemTrackingLines."Quantity (Base)".SETVALUE(QuantityBase);
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesHandler@247(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      DequeueVariable@1004 : Variant;
      LotNo@1002 : Variant;
      QuantityBase@1006 : Variant;
      EntryNo@1001 : Variant;
      ItemTrackingMode@1007 : ' ,AssignLotNo,SelectEntries,SetQuantity';
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      ItemTrackingMode := DequeueVariable;
      CASE ItemTrackingMode OF
        ItemTrackingMode::AssignLotNo:
          BEGIN
            ItemTrackingLines."Assign Lot No.".INVOKE;
            LibraryVariableStorage.Enqueue(ItemTrackingLines."Lot No.".VALUE);
          END;
        ItemTrackingMode::SelectEntries:
          BEGIN
            LibraryVariableStorage.Dequeue(LotNo);
            LibraryVariableStorage.Dequeue(QuantityBase);
            LibraryVariableStorage.Dequeue(EntryNo);
            ItemTrackingLines."Lot No.".SETVALUE(LotNo);
            ItemTrackingLines."Quantity (Base)".SETVALUE(QuantityBase);
            ItemTrackingLines."Appl.-to Item Entry".SETVALUE(EntryNo);
          END;
        ItemTrackingMode::SetQuantity:
          BEGIN
            LibraryVariableStorage.Dequeue(QuantityBase);
            LibraryVariableStorage.Dequeue(EntryNo);
            ItemTrackingLines."Quantity (Base)".SETVALUE(QuantityBase);
            ItemTrackingLines."Appl.-to Item Entry".ASSERTEQUALS(EntryNo)
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@124(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingListPageHandler@257(VAR ItemTrackingList@1000 : TestPage 6507);
    BEGIN
      ItemTrackingList.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@104(Message@1000 : Text[1024]);
    VAR
      DequeueVariable@1002 : Variant;
      LocalMessage@1001 : Text[1024];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LocalMessage := DequeueVariable;
      Assert.IsTrue(STRPOS(Message,LocalMessage) > 0,Message);
    END;

    [ModalPageHandler]
    PROCEDURE OrderTrackingDetailsPageHandler@80(VAR OrderTracking@1000 : TestPage 99000822);
    VAR
      Variant@1002 : Variant;
    BEGIN
      // Verify Item No, Quantity and UntrackedQuantity.
      LibraryVariableStorage.Dequeue(Variant);
      VerifyOrderTracking(OrderTracking);
      VerifyOrderTrackingLine(OrderTracking);
    END;

    [ModalPageHandler]
    PROCEDURE ProductionJournalPageHandler@97(VAR ProductionJournal@1000 : TestPage 5510);
    BEGIN
      ProductionJournal.FILTER.SETFILTER("Entry Type",ProductionJournal."Entry Type".GETOPTION(6));  // Value 6 is used for Consumption.
      ProductionJournal.ItemTrackingLines.INVOKE;
      ProductionJournal.Post.INVOKE;
      ProductionJournal.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@61(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Auto Reserve".INVOKE;
      Reservation.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SalesShipmentLinePageHandler@54(VAR SalesShipmentLines@1000 : TestPage 5824);
    BEGIN
      SalesShipmentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE WhseItemTrackingLinesPageHandler@52(VAR WhseItemTrackingLines@1000 : TestPage 6550);
    VAR
      ItemLedgerEntry@1003 : Record 32;
      DequeueVariable@1001 : Variant;
      WhseItemTrackingMode@1002 : 'SelectSerialNo,SelectLotNo';
      ItemNo@1005 : Code[20];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      WhseItemTrackingMode := DequeueVariable;
      LibraryVariableStorage.Dequeue(DequeueVariable);
      ItemNo := DequeueVariable;
      CASE WhseItemTrackingMode OF
        WhseItemTrackingMode::SelectSerialNo:
          BEGIN
            ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
            ItemLedgerEntry.FINDSET;
            REPEAT
              WhseItemTrackingLines."Serial No.".SETVALUE(ItemLedgerEntry."Serial No.");
              WhseItemTrackingLines.Quantity.SETVALUE(ItemLedgerEntry.Quantity);
              WhseItemTrackingLines.NEXT;
            UNTIL ItemLedgerEntry.NEXT = 0;
          END;
        WhseItemTrackingMode::SelectLotNo:
          BEGIN
            ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
            ItemLedgerEntry.FINDSET;
            REPEAT
              WhseItemTrackingLines."Lot No.".SETVALUE(ItemLedgerEntry."Lot No.");
              WhseItemTrackingLines.Quantity.SETVALUE(ItemLedgerEntry.Quantity);
              WhseItemTrackingLines.NEXT;
            UNTIL ItemLedgerEntry.NEXT = 0;
          END;
      END;
    END;

    [ModalPageHandler]
    PROCEDURE PostedSalesDocumentLinesHandler@172(VAR PostedSalesDocumentLines@1000 : TestPage 5850);
    BEGIN
      PostedSalesDocumentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ProductionJournalPageHandler2@226(VAR ProductionJournal@1000 : TestPage 5510);
    VAR
      ItemNo@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ItemNo);
      ProductionJournal.FILTER.SETFILTER("Entry Type",ProductionJournal."Entry Type".GETOPTION(6)); // Value 6 is used for Consumption.
      ProductionJournal."Item No.".ASSERTEQUALS(ItemNo);
    END;

    [ModalPageHandler]
    PROCEDURE SourceDocumentsPageHandler@238(VAR SourceDocuments@1000 : Page 5793;VAR Response@1001 : Action);
    VAR
      WarehouseRequest@1002 : Record 5765;
    BEGIN
      WarehouseRequest.SETRANGE("Source Document",WarehouseRequest."Source Document"::"Purchase Order");
      WarehouseRequest.SETFILTER("Source No.",LibraryVariableStorage.DequeueText);
      WarehouseRequest.FINDFIRST;
      SourceDocuments.SETRECORD(WarehouseRequest);
      Response := ACTION::LookupOK;
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [SCM]
       1. Test the creation Put-away from Purchase Order on Location with Bins.
       2. Test the registering of Put-away from Purchase Order on Location with Bins.
       3. Test the creation of Pick from Sales Order with Reserved Quantity on Location with Bins.
       4. Test the registering of Pick from Sales Order with Reserved Quantity on Location with Bins.
       5. Test the posting of Shipment from Sales Order with Reserved Quantity on Location with Bins.
       6. Test the creation of Pick from Sales Order with unreserved Quantity and Always Create Pick Line as True.
       7. Test and verify Item ledger entry after Posting Warehouse Shipment from Sales Order on Location with Require Shipment.
       8. Test the posting of Sales Invoice with the same No. as the Posted Sales Shipment after Get Shipment lines and Item Charge Assignment.
       9. Test and verify that Item is selected on Items by Location Matrix page invoked from Items by Location page opened from Item card.
      10. Test and verify error message on updating Location with Directed Put-away and Pick on Inventory Movement.
      11. Test the Internal Movement Line after creating Internal Movement with Get Bin content and Serial Item Tracking Code.
      12. Test the Inventory Movement Line after creating Inventory Movement from Internal Movement with Get Bin content and Serial Item Tracking Code.
      13. Test the Internal Movement Line after creating Internal Movement with Get Bin content and Lot Item Tracking Code.
      14. Test the Inventory Movement Line after creating Inventory Movement from Internal Movement with Get Bin content and Lot Item Tracking Code.
      15. Test the Inventory Movement Line after creating Inventory Movement from Internal Movement with Serial Item Tracking Code.
      16. Test the Inventory Movement Line after creating Inventory Movement from Internal Movement with Lot Item Tracking Code.
      17. Test the Sales Invoice Line after Sales Order Created from Blanket Order with Partial Quantity. And Sales Invoice created from Get Shipment Line.
      18. Test the Order Tracking on Requisition Lines and Sales Order after Calculate Regenerative Plan on planning worksheet.
      19. Test the Item Ledger Entry and Warehouse Entry after Posting Job Journal Line with Lot Item Tracking Code.
      20. Test the functionality of creating Inventory Movement from Released Production Order with BOM and Serial Item Tracking.
      21. Test the error message on registering Inventory Movement with wrong Serial No. created from Released Production Order.
      22. Test the functionality of registering Inventory Movement from Released Production Order with BOM and Serial Item Tracking.
      23. Test the error message on posting Consumption Journal with wrong Serial No. after registering Inventory Movement.
      24. Test the functionality of posting Consumption Journal with Serial Item Tracking after registering Inventory Movement.
      25. Test the functionality of creating Inventory Movement from Released Production Order with BOM and Lot.
      26. Test the error on registering Inventory Movement with wrong Lot No. created from Released Production Order with BOM and Lot.
      27. Test the functionality of registering Inventory Movement from Released Production Order with BOM and Lot.
      28. Test the error on posting Consumption Journal with wrong Lot No. after registering Inventory Movement with BOM and Lot.
      29. Test the functionality of posting Consumption Journal with Lot No. after registering Inventory Movement with BOM and Lot.
      30. Test the functionality of Undo Posted Sales Shipment after posting Sales Order as Ship.
      31. Test the error on posting Transfer Order as Ship after Undo Posted Sales Shipment.
      32. Test the functionality of Undo Posted Purchase Receipt with Serial and Location with Use Put-away Worksheet.
      33. Test the error message on updating Quantity to Ship on Sales Order page with White Location.
      34. Test the error message on updating Quantity on Sales Invoice page with White Location.
      35. Test the error message on updating Return Quantity to Receive on Sales Return Order page with White Location.
      36. Test the error message on updating Quantity on Sales Credit Memo page with White Location.
      37. Test the error message on updating Quantity to Receive on Purchase Order page with White Location.
      38. Test the error message on updating Quantity on Purchase Invoice page with White Location.
      39. Test the error message on updating Return Quantity to Ship on Purchase Return Order page with White Location.
      40. Test the error message on updating Quantity on Purchase Credit Memo page with White Location.
      41. Test the posting of Sales Order as Invoice.
      42. Test the posting of Sales Return Order as Receive after Get Posted Doc Lines to Reverse.
      43. Test the posting of Sales Return Order as Invoice with Undo Return Receipt and updated Quantity.
      44. Test the posting of Purchase Order with Lot.
      45. Test the posting of Sales Order as Invoice with Lot.
      46. Test the posting of Sales Return Order as Receive after Get Posted Doc Lines to Reverse with Lot.
      47. Test the posting of Sales Return Order as Invoice with Undo Return Receipt, updated Quantity and Lot.
      48. Test the Warehouse Receipt Line after Creating Purchase Order With Multiple Lines and Sales Order.
      49. Test the Warehouse Receipt Line after Calculating Cross Dock with Multiple Lines.
      50. Test the Put Away Line after Posting Warehouse Receipt and Calculate Cross Dock with Purchase Order of Multiple Lines.
      51. Test the Warehouse Entry after Register Put Away and Calculate Cross Dock with Purchase Order of Multiple Lines.
      52. Test the functionality of updating Variant Code on Transfer Order Line.
      53. Test the Item Ledger Entry after updating Variant Code on Transfer Order Line and Post Transfer Order as Ship and Receive.
      54. Test no Error will appear while Posting Job Journal with Item Reversal when Man. Expir. Date Entry Reqd. is True.
      55. Test no Error will appear while Posting Job Journal with Item Reversal when Man. Expir. Date Entry Reqd. is False.
      56. Test the error message on making Sales Order after creating Sales Invoice and Sales Order linked Blanket Sales Order.
      57. Test the error message on making Purchase Order after creating Purchase Invoice and Sales Order linked Blanket Purchase Order.
      58. Test the error message on making Sales Order after creating Sales Return Order and Sales Credit Memo linked Blanket Sales Order.
      59. Test the error message on making Purchase Order after creating Purchase Return Order and Purchase Credit Memo linked Blanket Purchase Order.
      60. Test Calc. Consumption is run successfully without any errors when the Bin Code filled in Prod. Order Component does not include the child item.
      61. Test Production Journal can be opened successfully without any errors when the Bin Code filled in Prod. Order Component does not include the child item.
      62. Test Warehouse Entry is correct after undo multiple Sales Shipment Lines with warehouse.

      Covers Test Cases for WI - 309016
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      CreatePutAwayFromPurchaseOrderOnLocationWithBins                          257804
      RegisterPutAwayFromPurchaseOrderOnLocationWithBins                        257804
      CreatePickWithReservedQuantityOnLocationWithBins                          257804
      RegisterPickWithReservedQuantityOnLocationWithBins                        257804
      PostShipmentWithReservedQuantityOnLocationWithBins                        257804
      PickWithUnreservedQuantityWithAlwaysCreatePickLine                        244489
      PostWarehouseShipmentFromSalesOrder                                       236524
      PostSalesInvoiceWithPostedShipmentNoWithItemCharge                        236524
      ItemSelectedOnItemsByLocationMatrixPage                                   250549

      Covers Test Cases for WI - 314873
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      ErrorOnUpdatingLocationOnInventoryMovement                                184943

      Covers Test Cases for WI - 314874
      ----------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ----------------------------------------------------------------------------------
      GetBinContentOnInternalMovementWithSerial                                 184992
      InventorytMovementAfterGetBinContentWithSerial                            184992
      GetBinContentOnInternalMovementWithLot                                    184998
      InventoryMovementAfterGetBinContentWithLot                                184998
      InventorytMovementAfterInternalMovementWithSerial                         185556
      InventoryMovementAfterInternalMovementWithLot                             185594

      Covers Test Cases for WI - 309022
      ----------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ----------------------------------------------------------------------------------
      PostSalesInvoiceUsingBlanketSalesOrder                                    229615
      OrderTrackingOnReqLineAndSOAfterCalcRegenPlan                             274858
      PostJobJournalWithLotItemTracking                                         238535

      Covers Test Cases for WI - 316031
      ----------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ----------------------------------------------------------------------------------
      InventoryMovementFromRPOWithBOMAndSerial                                  185595
      ErrorOnRegisterMovementWithWrongSerial                                    185595
      RegisterInventoryMovementFromRPOWithSerial                                185595
      ErrorOnPostingConsumptionWithWrongSerial                                  185595
      PostConsumptionJournalWithSerial                                          185595

      Covers Test Cases for WI - 314875
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      InventoryMovementFromRPOWithBOMAndLot                                     185597
      ErrorOnRegisterMovementWithWrongLot                                       185597
      RegisterInventoryMovementFromRPOWithLot                                   185597
      ErrorOnPostingConsumptionWithWrongLot                                     185597
      PostConsumptionJournalWithLot                                             185597

      Covers Test Cases for WI - 316025
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      UndoSalesShipmentLineAfterPostSalesOrder                                  314591
      ErrorOnPostingTransferOrderAfterUndoShipment                              314591

      Covers Test Cases for WI - 316030
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      UndoPostedPurchaseReceiptWithLocationAndSerial                            274465

      Covers Test Cases for WI - 318114
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      ErrorOnUpdatingQuantityToShipOnSalesOrder                                 263880
      ErrorOnUpdatingQuantityOnSalesInvoice                                     263880
      ErrorOnUpdatingReturnQuantityOnSalesReturnOrder                           263880
      ErrorOnUpdatingQuantityOnSalesCreditMemo                                  263880
      ErrorOnUpdatingQuantityToReceiveOnPurchaseOrder                           263880
      ErrorOnUpdatingQuantityOnPurchaseInvoice                                  263880
      ErrorOnUpdatingReturnQuantityOnPurchaseReturnOrder                        263880
      ErrorOnUpdatingQuantityOnPurchaseCreditMemo                               263880
      PostSalesOrderAsInvoice                                                   264268
      PostSalesReturnOrderAsReceive                                             264268
      PostSalesReturnOrderAfterUndoReturnReceipt                                264268
      PostPurchaseOrderWithLot                                                  264268
      PostSalesOrderWithLot                                                     264268
      PostSalesReturnOrderAsReceiveWithLot                                      264268
      PostSalesReturnOrderAfterUndoReturnReceiptWithLot                         264268

      Covers Test Cases for WI - 318115
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      WarehouseReceiptWithMultipleLines                                         295123
      CalcCrossDockOnWarehouseReceiptWithMultipleLines                          295123
      PostWhseReceiptAfterCalcCrossDockWithMultipleLines                        295123
      RegisterPutAwayAfterCalcCrossDockWithMultipleLines                        295123

      Covers Test Cases for WI - 318115
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      TransferOrderWithVariantCode                                              288974
      CreateAndPostTransferOrderWithVariantCode                                 288974

      Covers Test Cases for Bug Id - 333967
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      JobLedgerEntryWithManExpirDateEntryReqdTrue
      JobLedgerEntryWithManExpirDateEntryReqdFalse                             333968

      Covers Test Cases for WI
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      MakeSalesOrderAfterCreateInvoiceAndOrderLinkBlanketOrder                  56603
      MakePurchOrderAfterCreateInvoiceAndOrderLinkBlanketOrder                  56603
      MakeSalesOrderAfterCreateReturnOrderAndCreditMemoLinkBlanketOrder         56603
      MakePurchOrderAfterCreateReturnOrderAndCreditMemoLinkBlanketOrder         56603

      Covers Test Cases for WI
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      CalcConsumptionWhenItemIsNotInTheBin                                      57771
      OpenProductionJournalWhenItemIsNotInTheBin                                57771

      Covers Test Cases for Bug Id - 58926
      ---------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      ---------------------------------------------------------------------------------
      UndoMultipleSalesShipmentLinesAfterRegisterWhseShipment                   58926
    }
    END.
  }
}

