OBJECT Codeunit 134146 ERM Reverse Recurring Journal
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1001 : Codeunit 131300;
      LibraryRandom@1000 : Codeunit 130440;
      Assert@1003 : Codeunit 130000;
      IsInitialized@1002 : Boolean;
      AmountError@1007 : TextConst 'ENU=%1 must be %2.';

    LOCAL PROCEDURE Initialize@7();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseFixedRecurringJnl@8();
    VAR
      GenJournalLine@1009 : Record 81;
    BEGIN
      // Create Recurring Journal for Fixed Recurring Method and Post it and Check GL Entry.

      ReverseRecurringJournal(GenJournalLine."Recurring Method"::"F  Fixed",GenJournalLine."Document Type"::" ");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseVariableRecurringJnl@14();
    VAR
      GenJournalLine@1009 : Record 81;
    BEGIN
      // Create Recurring Journal for Variable Recurring Method and Post it and Check GL Entry.

      ReverseRecurringJournal(GenJournalLine."Recurring Method"::"V  Variable",GenJournalLine."Document Type"::" ");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseRFFixedRecurringJnl@27();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create Recurring Journal for RF Reversing Fixed Recurring Method and Post it and Check GL Entry.

      ReverseRecurringJournal(GenJournalLine."Recurring Method"::"RF Reversing Fixed",GenJournalLine."Document Type"::Payment);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseRVVariabeRecurringJnl@28();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create Recurring Journal for RV Reversing Variable Recurring Method and Post it and Check GL Entry.

      ReverseRecurringJournal(GenJournalLine."Recurring Method"::"RV Reversing Variable",GenJournalLine."Document Type"::Payment);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseFixedRecurringJournal@22();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Reverse the lines for Recurring Method as Fixed in Recurring General Journal and Verify G/L Entry.
      // Verify whether correct entries have been reversed when the Recurring Method is Fixed.

      ReverseRecurringJournal(GenJournalLine."Recurring Method"::"F  Fixed",GenJournalLine."Document Type"::Payment);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseVariableJournal@21();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Reverse the lines for Recurring Method as Variable in Recurring General Journal and Verify G/L Entry.
      // Verify whether correct entries have been reversed when the Recurring Method is Variable.

      ReverseRecurringJournal(GenJournalLine."Recurring Method"::"V  Variable",GenJournalLine."Document Type"::Payment);
    END;

    LOCAL PROCEDURE ReverseRecurringJournal@33(RecurringMethod@1001 : Option;DocumentType@1000 : Option);
    VAR
      GLAccount@1005 : Record 15;
      GenJnlAllocation@1004 : Record 221;
      GenJournalLine@1003 : Record 81;
      TempGenJournalLine@1002 : TEMPORARY Record 81;
    BEGIN
      // 1. Setup: Create Recurring Journal, Allocation Line and Post it with Random Amount.
      Initialize;
      CreateRecurringJournalLine(
        GenJournalLine,RecurringMethod,DocumentType,
        CreateGLAccount(GLAccount."Income/Balance"::"Balance Sheet"),LibraryRandom.RandInt(100));
      CreateAllocationLine(GenJnlAllocation,GenJournalLine,GenJournalLine."Account No.",100); // Required for 100 % allocation.
      SaveGenJournalLineInTemp(TempGenJournalLine,GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2. Exercise: Reverse GL Register for Recurring Journal.
      ReverseGLRegister;

      // 3. Verify: Verify Reversed GL Entry for Recurring Journal.
      VerifyGLEntry(GenJnlAllocation."Account No.",-(GenJournalLine.Amount + GenJnlAllocation."VAT Amount"));
      VerifyReversal(TempGenJournalLine."Account No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseBalanceJournal@20();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check the Functionality of Recurring Method as "Balance" in Recurring General Journal.Reverse the lines having
      // Recurring Method as "Balance"and verify Posted G/L Entries.

      ReversingBalanceJournal(GenJournalLine."Recurring Method"::"B  Balance");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseReversingBalanceJournal@23();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check the Functionality of Recurring Method as "Reversing Balance" in Recurring General Journal.Reverse the lines having
      // Recurring Method as "Reversing Balance" and verify Posted G/L Entries.

      ReversingBalanceJournal(GenJournalLine."Recurring Method"::"RB Reversing Balance")
    END;

    LOCAL PROCEDURE ReversingBalanceJournal@2(RecurringMethod@1006 : Option);
    VAR
      GLAccount@1005 : Record 15;
      GenJnlAllocation@1004 : Record 221;
      GenJournalLine@1003 : Record 81;
      GenJournalLine2@1002 : Record 81;
    BEGIN
      // Setup: Create General Journal, Recurring Journal with Amount 0, Define Allocation and Post it.
      Initialize;
      CreateAndPostGenJournalLine(GenJournalLine);
      CreateRecurringJournalLine(
        GenJournalLine2,RecurringMethod,GenJournalLine2."Document Type"::Payment,GenJournalLine."Account No.",0);

      // Required for 20 and 80 % allocation.
      CreateAllocationLine(GenJnlAllocation,GenJournalLine2,CreateGLAccount(GLAccount."Income/Balance"::"Balance Sheet"),20);
      CreateAllocationLine(GenJnlAllocation,GenJournalLine2,GenJournalLine."Bal. Account No.",80);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);

      // Exercise: Reverse GL Register for Recurring Journal.
      ReverseGLRegister;

      // Verify: Verify GL Entry after Reversal.
      VerifyGLEntry(GenJournalLine."Bal. Account No.",-GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseBalanceRecurringJnl@10();
    VAR
      GenJournalLine@1009 : Record 81;
    BEGIN
      // Create Recurring Journal for Balance Recurring Method and Post it and Check GL Entry.

      ReversingBalanceRecurringJnl(GenJournalLine."Recurring Method"::"B  Balance");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseRBBalanceRecurringJnl@18();
    VAR
      GenJournalLine@1009 : Record 81;
    BEGIN
      // Create Recurring Journal for RB Reversing Balance Recurring Method and Post it and Check GL Entry.

      ReversingBalanceRecurringJnl(GenJournalLine."Recurring Method"::"RB Reversing Balance")
    END;

    LOCAL PROCEDURE ReversingBalanceRecurringJnl@13(RecurringMethod@1001 : Option);
    VAR
      GLAccount@1010 : Record 15;
      GenJnlAllocation@1000 : Record 221;
      GenJournalLine@1009 : Record 81;
      GenJournalLine2@1005 : Record 81;
    BEGIN
      // 1. Setup: Create General Journal, Recurring Journal with Amount 0, Define Allocation and Post it.
      Initialize;
      CreateAndPostGenJournalLine(GenJournalLine);
      CreateRecurringJournalLine(
        GenJournalLine2,RecurringMethod,GenJournalLine2."Document Type"::Payment,GenJournalLine."Account No.",0);

      // Required for 80 and 20 % allocation.
      CreateAllocationLine(GenJnlAllocation,GenJournalLine2,CreateGLAccount(GLAccount."Income/Balance"::"Balance Sheet"),80);
      CreateAllocationLine(GenJnlAllocation,GenJournalLine2,GenJournalLine."Bal. Account No.",20);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);

      // 2. Exercise: Reverse GL Register for Recurring Journal.
      ReverseGLRegister;

      // 3. Verify: Verify GL Entry after Reversal.
      VerifyGLEntry(GenJournalLine."Bal. Account No.",-GenJournalLine.Amount);
    END;

    [Test]
    PROCEDURE PaymentWithAllocationCustomer@12();
    VAR
      GenJournalLine@1001 : Record 81;
      GenJnlAllocation@1004 : Record 221;
      GLEntry@1009 : Record 17;
      Customer@1000 : Record 18;
      LibrarySales@1002 : Codeunit 130509;
      GLAccountNo@1003 : ARRAY [2] OF Code[20];
    BEGIN
      // Check the Receive a Payment with Allocation from the Recurring Journal for Customer.

      // 1. Setup: Create Customer,create and post General Journal Line, create Recurring Journal with Applies to Document No.
      LibrarySales.CreateCustomer(Customer);
      GLAccountNo[1] := LibraryERM.CreateGLAccountNo;
      GLAccountNo[2] := LibraryERM.CreateGLAccountNo;
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalLine."Account Type"::Customer,Customer."No.",
        LibraryRandom.RandInt(1000));  // Using Random Number Generator for Amount, Integer value for Allocation.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      CreateApplyRecurringJournal(
        GenJournalLine,GenJournalLine."Account Type"::Customer,Customer."No.",-GenJournalLine.Amount,GenJournalLine."Document No.");

      // 2. Exercise: Define Allocation in Recurring Journal and Post it.
      CreateAllocationLine(GenJnlAllocation,GenJournalLine,GLAccountNo[1],50);  // Required for 50 % allocation.
      CreateAllocationLine(GenJnlAllocation,GenJournalLine,GLAccountNo[2],50);  // Required for 50 % allocation.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify Customer Ledger Entry and GL Entry for allocation.
      VerifyCustomerLedgerEntry(Customer."No.");
      VerifyGLEntryAllocation(GLEntry,GLAccountNo[1],-(GenJournalLine.Amount / 2));  // Verify 50 % allocation of amount.
      VerifyGLEntryAllocation(GLEntry,GLAccountNo[2],-(GenJournalLine.Amount / 2)); // Verify 50 % allocation of amount.
    END;

    [Test]
    PROCEDURE PaymentWithAllocationVendor@24();
    VAR
      GenJournalLine@1008 : Record 81;
      GenJnlAllocation@1007 : Record 221;
      Vendor@1004 : Record 23;
      GLEntry@1010 : Record 17;
      LibraryPurchase@1009 : Codeunit 130512;
      GLAccountNo@1000 : ARRAY [2] OF Code[20];
    BEGIN
      // Check the Receive a Payment with Allocation from the Recurring Journal for Vendor.

      // 1. Setup: Create Vendor,Create and post General Journal Line, create Recurring Journal with Applies to Document No.
      LibraryPurchase.CreateVendor(Vendor);
      GLAccountNo[1] := LibraryERM.CreateGLAccountNo;
      GLAccountNo[2] := LibraryERM.CreateGLAccountNo;
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalLine."Account Type"::Vendor,Vendor."No.",
        -LibraryRandom.RandInt(1000));  // Using Random Number Generator for Amount, Integer value for Allocation.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      CreateApplyRecurringJournal(
        GenJournalLine,GenJournalLine."Account Type"::Vendor,Vendor."No.",-GenJournalLine.Amount,GenJournalLine."Document No.");

      // 2. Exercise: Define Allocation in Recurring Journal and Post it.
      CreateAllocationLine(GenJnlAllocation,GenJournalLine,GLAccountNo[1],50);  // Required for 50 % allocation.
      CreateAllocationLine(GenJnlAllocation,GenJournalLine,GLAccountNo[2],50);  // Required for 50 % allocation.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify Vendor Ledger Entry and GL Entry for allocation.
      VerifyVendorLedgerEntry(Vendor."No.");
      VerifyGLEntryAllocation(GLEntry,GLAccountNo[1],-(GenJournalLine.Amount / 2));  // Verify 50 % allocation of amount.
      VerifyGLEntryAllocation(GLEntry,GLAccountNo[2],-(GenJournalLine.Amount / 2));  // Verify 50 % allocation of amount.
    END;

    LOCAL PROCEDURE CreateApplyRecurringJournal@36(VAR GenJournalLine@1000 : Record 81;AccountType@1006 : Option;AccountNo@1008 : Code[20];Amount@1010 : Decimal;AppliestoDocNo@1003 : Code[20]);
    VAR
      GenJournalTemplate@1002 : Record 80;
      GenJournalBatch@1001 : Record 232;
    BEGIN
      LibraryERM.FindRecurringTemplateName(GenJournalTemplate);
      LibraryERM.CreateRecurringBatchName(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        AccountType,AccountNo,Amount);
      GenJournalLine.VALIDATE("Recurring Method",GenJournalLine."Recurring Method"::"F  Fixed");
      GenJournalLine.VALIDATE("Document No.",GenJournalLine."Journal Batch Name");
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",AppliestoDocNo);

      // Take Random Recurring Frequency.
      EVALUATE(GenJournalLine."Recurring Frequency",'<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>');
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRecurringJournalLine@5(VAR GenJournalLine@1000 : Record 81;RecurringMethod@1004 : Option;DocumentType@1006 : Option;AccountNo@1008 : Code[20];Amount@1010 : Decimal);
    VAR
      GenJournalTemplate@1002 : Record 80;
      GenJournalBatch@1001 : Record 232;
    BEGIN
      LibraryERM.FindRecurringTemplateName(GenJournalTemplate);
      LibraryERM.CreateRecurringBatchName(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::"G/L Account",AccountNo,Amount);
      GenJournalLine.VALIDATE("Recurring Method",RecurringMethod);
      GenJournalLine.VALIDATE("Document No.",GenJournalLine."Journal Batch Name");

      // Take Random Recurring Frequency.
      EVALUATE(GenJournalLine."Recurring Frequency",'<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>');
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAllocationLine@3(VAR GenJnlAllocation@1001 : Record 221;GenJournalLine@1000 : Record 81;AccountNo@1004 : Code[20];AllocationPercent@1005 : Decimal);
    BEGIN
      LibraryERM.CreateGenJnlAllocation(
        GenJnlAllocation,GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",GenJournalLine."Line No.");
      GenJnlAllocation.VALIDATE("Account No.",AccountNo);
      GenJnlAllocation.VALIDATE("Allocation %",AllocationPercent);
      GenJnlAllocation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLine@17(VAR GenJournalLine@1002 : Record 81);
    VAR
      GLAccount@1001 : Record 15;
      GenJournalBatch@1000 : Record 232;
      GenJournalTemplate@1003 : Record 80;
    BEGIN
      // Take Random Amount for General Journal Line.
      GenJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);

      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",CreateGLAccount(GLAccount."Income/Balance"::"Income Statement"),
        LibraryRandom.RandInt(100));
      GenJournalLine.VALIDATE("Bal. Account No.",CreateGLAccount(GLAccount."Income/Balance"::"Balance Sheet"));
      GenJournalLine.VALIDATE("Document No.",GenJournalBatch.Name + FORMAT(GenJournalLine."Line No."));
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateGLAccount@11(IncomeBalance@1001 : Option) : Code[20];
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Income/Balance",IncomeBalance);
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@31(VAR GenJournalLine@1005 : Record 81;AccountType@1001 : Option;AccountNo@1002 : Code[20];Amount@1003 : Decimal);
    VAR
      GenJournalBatch@1000 : Record 232;
      GLAccount@1004 : Record 15;
    BEGIN
      CreateGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Invoice,AccountType,AccountNo,Amount);
      GenJournalLine.VALIDATE("Bal. Account No.",CreateGLAccount(GLAccount."Income/Balance"::"Balance Sheet"));
      GenJournalLine.VALIDATE("Document No.",GenJournalBatch.Name + FORMAT(GenJournalLine."Line No."));
      GenJournalLine.VALIDATE("External Document No.",GenJournalLine."Document No.");
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGenJournalBatch@26(VAR GenJournalBatch@1000 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE ReverseGLRegister@1();
    VAR
      GLRegister@1000 : Record 45;
      ReversalEntry@1001 : Record 179;
    BEGIN
      GLRegister.FINDLAST;
      ReversalEntry.SetHideDialog(TRUE);
      ReversalEntry.ReverseRegister(GLRegister."No.");
    END;

    LOCAL PROCEDURE SaveGenJournalLineInTemp@6(VAR TempGenJournalLine@1001 : TEMPORARY Record 81;GenJournalLine@1000 : Record 81);
    BEGIN
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
      GenJournalLine.SETRANGE("Account No.",GenJournalLine."Account No.");
      GenJournalLine.FINDSET;
      REPEAT
        TempGenJournalLine.INIT;
        TempGenJournalLine := GenJournalLine;
        TempGenJournalLine.INSERT;
      UNTIL GenJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyReversal@19(GLAccountNo@1003 : Code[20]);
    VAR
      GLEntry@1001 : Record 17;
    BEGIN
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD(Reversed,TRUE);
    END;

    LOCAL PROCEDURE VerifyGLEntry@4(GLAccountNo@1002 : Code[20];Amount@1001 : Decimal);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      GLEntry.SETFILTER(Amount,'<0');
      VerifyGLEntryAllocation(GLEntry,GLAccountNo,Amount);
    END;

    LOCAL PROCEDURE VerifyGLEntryAllocation@25(VAR GLEntry@1003 : Record 17;GLAccountNo@1002 : Code[20];Amount@1001 : Decimal);
    VAR
      GeneralLedgerSetup@1004 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        Amount,GLEntry.Amount,GeneralLedgerSetup."Appln. Rounding Precision",
        STRSUBSTNO(AmountError,GLEntry.FIELDCAPTION(Amount),Amount));
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@29(CustomerNo@1000 : Code[20]);
    VAR
      CustLedgerEntry@1001 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgerEntry.FINDFIRST;
      CustLedgerEntry.CALCFIELDS("Remaining Amount");
      CustLedgerEntry.TESTFIELD("Remaining Amount",0);
    END;

    LOCAL PROCEDURE VerifyVendorLedgerEntry@58(VendorNo@1000 : Code[20]);
    VAR
      VendorLedgerEntry@1001 : Record 25;
    BEGIN
      VendorLedgerEntry.SETRANGE("Vendor No.",VendorNo);
      VendorLedgerEntry.FINDFIRST;
      VendorLedgerEntry.CALCFIELDS("Remaining Amount");
      VendorLedgerEntry.TESTFIELD("Remaining Amount",0);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@15(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@9(Message@1000 : Text[1024]);
    BEGIN
      // dummy message handler
    END;

    BEGIN
    {
      // [FEATURE] [Reverse] [Recurring General Journal]
      Unsupported version tags:
      ES: Unable to Execute
      GB: Tests failing

      Test Reverse Recurring Journal.
       1. Create Recurring Journal for Fixed Recurring Method and Post it and Check GL Entry.
       2. Create Recurring Journal for Variable Recurring Method and Post it and Check GL Entry.
       3. Create Recurring Journal for Balance Recurring Method and Post it and Check GL Entry.
       4. Create Recurring Journal for RF Reversing Fixed Recurring Method and Post it and Check GL Entry.
       5. Create Recurring Journal for RV Reversing Variable Recurring Method and Post it and Check GL Entry.
       6. Create Recurring Journal for RB Reversing Balance Recurring Method and Post it and Check GL Entry.
       7. Reverse the lines for Recurring Method as Fixed in Recurring General Journal and Verify G/L Entry.
          Verify whether correct entries have been reversed when the Recurring Method is Fixed.
       8. Reverse the lines for Recurring Method as Variable in Recurring General Journal and Verify G/L Entry.
          Verify whether correct entries have been reversed when the Recurring Method is Variable.
       9. Check the Functionality of Recurring Method as "Balance" in Recurring General Journal.Reverse the lines having
          Recurring Method as "Balance".Verify Posted G/L Entries having Recurring Method as "Balance".
      10. Check the Functionality of Recurring Method as "Reversing Balance" in Recurring General Journal.Reverse the lines having
          Recurring Method as "Reversing Balance".Verify Posted G/L Entries having Recurring Method as "Reversing Balance".
      11. Check the Receive a Payment with Allocation from the Recurring Journal for Customer.
      12. Check the Receive a Payment with Allocation from the Recurring Journal for Vendor.

      Covers Test Cases for WI - 201590
      ---------------------------------------------------
      Test Function Name                   TFS ID
      ---------------------------------------------------
      ReverseFixedRecurringJnl        125256 to 125258
      ReverseVariableRecurringJnl     125259 to 125261
      ReverseBalanceRecurringJnl      125262 to 125264

      Covers Test Cases for WI - 201591
      ---------------------------------------------------
      Test Function Name                   TFS ID
      ---------------------------------------------------
      ReverseRFFixedRecurringJnl       125265 to 125267
      ReverseRVVariabeRecurringJnl     125268 to 125270
      ReverseRBBalanceRecurringJnl     125271, 125272 and 124877

      Covers Test Cases for WI - 237608
      --------------------------------------------------------------------------
      Test Function Name                                           TFS ID
      --------------------------------------------------------------------------
      ReverseFixedRecurringJournal                              122077,122078,122079
      ReverseVariableJournal                                    122080,122081,122082
      ReverseBalanceJournal,ReverseReversingBalanceJournal      122083,122084,122085

      Covers Test Cases for WI - 237760
      --------------------------------------------------------------------------
      Test Function Name                                         TFS ID
      --------------------------------------------------------------------------
      PaymentWithAllocationCustomer                             122109
      PaymentWithAllocationVendor                               122125,122126
    }
    END.
  }
}

