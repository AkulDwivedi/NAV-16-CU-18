OBJECT Codeunit 134154 ERM Intercompany III
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd,
                TableData 25=rimd;
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryUtility@1021 : Codeunit 131000;
      LibraryVariableStorage@1002 : Codeunit 131004;
      LibrarySetupStorage@1003 : Codeunit 131009;
      LibraryDimension@1001 : Codeunit 131001;
      LibrarySales@1004 : Codeunit 130509;
      LibraryPurchase@1007 : Codeunit 130512;
      LibraryInventory@1006 : Codeunit 132201;
      Assert@1005 : Codeunit 130000;
      IsInitialized@1000 : Boolean;

    [Test]
    PROCEDURE CreateSalesDocumentFromICSalesDocWithDimension@94();
    VAR
      DimensionValue@1001 : ARRAY [5] OF Record 349;
      ICInboxSalesHeader@1002 : Record 434;
      ICInboxOutboxMgt@1007 : Codeunit 427;
      CustomerNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Sales] [Dimensions]
      // [SCENARIO 227855] Sales Order should contains merged Dimension Set from Customer and IC inbox
      Initialize;

      // [GIVEN] Dimensions and Dimension Values:
      // [GIVEN] Dimension "D1" with Dimension Value "DV1"
      // [GIVEN] Dimension "D2" with Dimension Values "DV2-1" and "DV2-1"
      // [GIVEN] Dimension "D3" with Dimension Value "DV3"
      // [GIVEN] Dimension "D4" with Dimension Value "DV4"
      CreateSetOfDimValues(DimensionValue);

      // [GIVEN] Customer with Default Dimensions:
      // [GIVEN] Dimension - "D1" and "Dimension Value" - "DV1"
      // [GIVEN] Dimension - "D2" and "Dimension Value" - "DV2-1"
      CustomerNo := CreateCustomerWithDefaultDimensions(DimensionValue);

      // [GIVEN] IC Inbox Sales Order with
      // [GIVEN] Dimensions of Sales Header
      // [GIVEN] Dimension - "D2" and "Dimension Value" - "DV2-2"
      // [GIVEN] Dimension - "D3" and "Dimension Value" - "DV3"
      // [GIVEN] Dimensions of Sales Line
      // [GIVEN] Dimension - "D4" and "Dimension Value" - "DV4"
      MockICInboxSalesOrder(ICInboxSalesHeader,DimensionValue,CustomerNo);

      // [WHEN] Invoke CreateSalesDocument
      ICInboxOutboxMgt.CreateSalesDocument(ICInboxSalesHeader,ICInboxSalesHeader."Transaction Source",FALSE,WORKDATE);

      // [THEN] Created Sales Order has dimensions:
      // [THEN] Sales header:
      // [THEN] Dimension "D1" with Dimension Value "DV1"
      // [THEN] Dimension "D2" with Dimension Value "DV2-2"
      // [THEN] Dimension "D3" with Dimension Value "DV3"
      // [THEN] Sales Line:
      // [THEN] Dimensions are same as in the header and
      // [THEN] Dimension "D4" with Dimension Value "DV4"
      VerifySalesDocDimSet(DimensionValue,CustomerNo);
    END;

    [Test]
    PROCEDURE CreatePurchDocumentFromICPurchDocWithDimension@25();
    VAR
      DimensionValue@1001 : ARRAY [5] OF Record 349;
      ICInboxPurchaseHeader@1002 : Record 436;
      ICInboxOutboxMgt@1007 : Codeunit 427;
      VendorNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Purchase] [Dimensions]
      // [SCENARIO 227855] Purchase Order should contains merged Dimension Set from Vendor and IC inbox
      Initialize;

      // [GIVEN] Dimensions and Dimension Values:
      // [GIVEN] Dimension "D1" with Dimension Value "DV1"
      // [GIVEN] Dimension "D2" with Dimension Values "DV2-1" and "DV2-2"
      // [GIVEN] Dimension "D3" with Dimension Value "DV3"
      // [GIVEN] Dimension "D4" with Dimension Value "DV4"
      CreateSetOfDimValues(DimensionValue);

      // [GIVEN] Vendor with Default Dimensions:
      // [GIVEN] Dimension - "D1" and "Dimension Value" - "DV1"
      // [GIVEN] Dimension - "D2" and "Dimension Value" - "DV2-1"
      VendorNo := CreateVendorWithDefaultDimensions(DimensionValue);

      // [GIVEN] IC Inbox Purchase Order with
      // [GIVEN] Dimensions of Purchase Header
      // [GIVEN] Dimension - "D2" and "Dimension Value" - "DV2-2"
      // [GIVEN] Dimension - "D3" and "Dimension Value" - "DV3"
      // [GIVEN] Dimensions of Purchase Line
      // [GIVEN] Dimension - "D4" and "Dimension Value" - "DV4"
      MockICInboxPurchOrder(ICInboxPurchaseHeader,DimensionValue,VendorNo);

      // [WHEN] Invoke CreatePurchDocument
      ICInboxOutboxMgt.CreatePurchDocument(ICInboxPurchaseHeader,ICInboxPurchaseHeader."Transaction Source",FALSE,WORKDATE);

      // [THEN] Created Purchase Order has dimensions:
      // [THEN] Purchase header:
      // [THEN] Dimension "D1" with Dimension Value "DV1"
      // [THEN] Dimension "D2" with Dimension Value "DV2-2"
      // [THEN] Dimension "D3" with Dimension Value "DV3"
      // [THEN] Purchase Line:
      // [THEN] Dimensions are same as in the header and
      // [THEN] Dimension "D4" with Dimension Value "DV4"
      VerifyPurchDocDimSet(DimensionValue,VendorNo);
    END;

    LOCAL PROCEDURE Initialize@13();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      IsInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE CreateSetOfDimValues@1(VAR DimensionValue@1000 : ARRAY [5] OF Record 349);
    BEGIN
      LibraryDimension.CreateDimWithDimValue(DimensionValue[1]);
      LibraryDimension.CreateDimWithDimValue(DimensionValue[2]);
      LibraryDimension.CreateDimensionValue(DimensionValue[3],DimensionValue[2]."Dimension Code");
      LibraryDimension.CreateDimWithDimValue(DimensionValue[4]);
      LibraryDimension.CreateDimWithDimValue(DimensionValue[5]);
    END;

    LOCAL PROCEDURE CreateCustomerWithDefaultDimensions@2(DimensionValue@1001 : ARRAY [5] OF Record 349) CustomerNo : Code[20];
    VAR
      DefaultDimension@1002 : Record 352;
    BEGIN
      CustomerNo := LibrarySales.CreateCustomerNo;
      LibraryDimension.CreateDefaultDimensionCustomer(
        DefaultDimension,CustomerNo,DimensionValue[1]."Dimension Code",DimensionValue[1].Code);
      LibraryDimension.CreateDefaultDimensionCustomer(
        DefaultDimension,CustomerNo,DimensionValue[2]."Dimension Code",DimensionValue[2].Code);
    END;

    LOCAL PROCEDURE CreateVendorWithDefaultDimensions@32(DimensionValue@1001 : ARRAY [5] OF Record 349) VendorNo : Code[20];
    VAR
      DefaultDimension@1002 : Record 352;
    BEGIN
      VendorNo := LibraryPurchase.CreateVendorNo;
      LibraryDimension.CreateDefaultDimensionVendor(
        DefaultDimension,VendorNo,DimensionValue[1]."Dimension Code",DimensionValue[1].Code);
      LibraryDimension.CreateDefaultDimensionVendor(
        DefaultDimension,VendorNo,DimensionValue[2]."Dimension Code",DimensionValue[2].Code);
    END;

    LOCAL PROCEDURE MockICInboxSalesOrder@12(VAR ICInboxSalesHeader@1000 : Record 434;DimensionValue@1003 : ARRAY [5] OF Record 349;CustomerNo@1002 : Code[20]);
    BEGIN
      MockICInboxSalesHeader(ICInboxSalesHeader,CustomerNo);
      MockICDocumentDimension(ICInboxSalesHeader."IC Partner Code",ICInboxSalesHeader."IC Transaction No.",
        DimensionValue[3],DATABASE::"IC Inbox Sales Header",0);
      MockICDocumentDimension(ICInboxSalesHeader."IC Partner Code",ICInboxSalesHeader."IC Transaction No.",
        DimensionValue[4],DATABASE::"IC Inbox Sales Header",0);
      MockICDocumentDimension(ICInboxSalesHeader."IC Partner Code",ICInboxSalesHeader."IC Transaction No.",
        DimensionValue[5],DATABASE::"IC Inbox Sales Line",MockICInboxSalesLine(ICInboxSalesHeader));
    END;

    LOCAL PROCEDURE MockICInboxSalesHeader@108(VAR ICInboxSalesHeader@1000 : Record 434;CustomerNo@1001 : Code[20]);
    BEGIN
      ICInboxSalesHeader.INIT;
      ICInboxSalesHeader."IC Transaction No." :=
        LibraryUtility.GetNewRecNo(ICInboxSalesHeader,ICInboxSalesHeader.FIELDNO("IC Transaction No."));
      ICInboxSalesHeader."IC Partner Code" :=
        LibraryUtility.GenerateRandomCode(ICInboxSalesHeader.FIELDNO("IC Partner Code"),DATABASE::"IC Inbox Sales Header");
      ICInboxSalesHeader."Document Type" := ICInboxSalesHeader."Document Type"::Order;
      ICInboxSalesHeader."Sell-to Customer No." := CustomerNo;
      ICInboxSalesHeader."Bill-to Customer No." := CustomerNo;
      ICInboxSalesHeader."Posting Date" := WORKDATE;
      ICInboxSalesHeader."Document Date" := WORKDATE;
      ICInboxSalesHeader.INSERT;
    END;

    LOCAL PROCEDURE MockICInboxSalesLine@5(ICInboxSalesHeader@1002 : Record 434) : Integer;
    VAR
      ICInboxSalesLine@1000 : Record 435;
    BEGIN
      ICInboxSalesLine.INIT;
      ICInboxSalesLine."Line No." :=
        LibraryUtility.GetNewRecNo(ICInboxSalesLine,ICInboxSalesLine.FIELDNO("Line No."));
      ICInboxSalesLine."IC Transaction No." := ICInboxSalesHeader."IC Transaction No.";
      ICInboxSalesLine."IC Partner Code" := ICInboxSalesHeader."IC Partner Code";
      ICInboxSalesLine."Transaction Source" := ICInboxSalesHeader."Transaction Source";
      ICInboxSalesLine."IC Partner Ref. Type" := ICInboxSalesLine."IC Partner Ref. Type"::Item;
      ICInboxSalesLine."IC Partner Reference" := LibraryInventory.CreateItemNo;
      ICInboxSalesLine.INSERT;
      EXIT(ICInboxSalesLine."Line No.");
    END;

    LOCAL PROCEDURE MockICInboxPurchOrder@35(VAR ICInboxPurchaseHeader@1000 : Record 436;DimensionValue@1003 : ARRAY [5] OF Record 349;VendorNo@1002 : Code[20]);
    BEGIN
      MockICInboxPurchHeader(ICInboxPurchaseHeader,VendorNo);
      MockICDocumentDimension(ICInboxPurchaseHeader."IC Partner Code",ICInboxPurchaseHeader."IC Transaction No.",
        DimensionValue[3],DATABASE::"IC Inbox Purchase Header",0);
      MockICDocumentDimension(ICInboxPurchaseHeader."IC Partner Code",ICInboxPurchaseHeader."IC Transaction No.",
        DimensionValue[4],DATABASE::"IC Inbox Purchase Header",0);
      MockICDocumentDimension(ICInboxPurchaseHeader."IC Partner Code",ICInboxPurchaseHeader."IC Transaction No.",
        DimensionValue[5],DATABASE::"IC Inbox Purchase Line",MockICInboxPurchLine(ICInboxPurchaseHeader));
    END;

    LOCAL PROCEDURE MockICInboxPurchHeader@34(VAR ICInboxPurchaseHeader@1000 : Record 436;VendorNo@1001 : Code[20]);
    BEGIN
      ICInboxPurchaseHeader.INIT;
      ICInboxPurchaseHeader."IC Transaction No." :=
        LibraryUtility.GetNewRecNo(ICInboxPurchaseHeader,ICInboxPurchaseHeader.FIELDNO("IC Transaction No."));
      ICInboxPurchaseHeader."IC Partner Code" :=
        LibraryUtility.GenerateRandomCode(ICInboxPurchaseHeader.FIELDNO("IC Partner Code"),DATABASE::"IC Inbox Purchase Header");
      ICInboxPurchaseHeader."Document Type" := ICInboxPurchaseHeader."Document Type"::Order;
      ICInboxPurchaseHeader."Buy-from Vendor No." := VendorNo;
      ICInboxPurchaseHeader."Pay-to Vendor No." := VendorNo;
      ICInboxPurchaseHeader."Posting Date" := WORKDATE;
      ICInboxPurchaseHeader."Document Date" := WORKDATE;
      ICInboxPurchaseHeader.INSERT;
    END;

    LOCAL PROCEDURE MockICInboxPurchLine@33(ICInboxPurchaseHeader@1002 : Record 436) : Integer;
    VAR
      ICInboxPurchaseLine@1000 : Record 437;
    BEGIN
      ICInboxPurchaseLine.INIT;
      ICInboxPurchaseLine."Line No." :=
        LibraryUtility.GetNewRecNo(ICInboxPurchaseLine,ICInboxPurchaseLine.FIELDNO("Line No."));
      ICInboxPurchaseLine."IC Transaction No." := ICInboxPurchaseHeader."IC Transaction No.";
      ICInboxPurchaseLine."IC Partner Code" := ICInboxPurchaseHeader."IC Partner Code";
      ICInboxPurchaseLine."Transaction Source" := ICInboxPurchaseHeader."Transaction Source";
      ICInboxPurchaseLine."IC Partner Ref. Type" := ICInboxPurchaseLine."IC Partner Ref. Type"::Item;
      ICInboxPurchaseLine."IC Partner Reference" := LibraryInventory.CreateItemNo;
      ICInboxPurchaseLine.INSERT;
      EXIT(ICInboxPurchaseLine."Line No.");
    END;

    LOCAL PROCEDURE MockICDocumentDimension@118(ICPartnerCode@1007 : Code[20];TransactionNo@1008 : Integer;DimensionValue@1003 : Record 349;TableID@1006 : Integer;LineNo@1004 : Integer);
    VAR
      ICDimension@1001 : Record 411;
      ICDimensionValue@1002 : Record 412;
      ICDocumentDimension@1000 : Record 442;
    BEGIN
      LibraryDimension.CreateAndMapICDimFromDim(ICDimension,DimensionValue."Dimension Code");
      LibraryDimension.CreateAndMapICDimValueFromDimValue(ICDimensionValue,DimensionValue.Code,DimensionValue."Dimension Code");
      ICDocumentDimension.INIT;
      ICDocumentDimension."IC Partner Code" := ICPartnerCode;
      ICDocumentDimension."Transaction No." := TransactionNo;
      ICDocumentDimension."Table ID" := TableID;
      ICDocumentDimension."Dimension Code" := ICDimensionValue."Dimension Code";
      ICDocumentDimension."Dimension Value Code" := ICDimensionValue.Code;
      ICDocumentDimension."Line No." := LineNo;
      ICDocumentDimension.INSERT;
    END;

    LOCAL PROCEDURE SetFilterDimensionSetEntry@4(VAR DimensionSetEntry@1000 : Record 480;DimensionValue@1001 : Record 349);
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Code",DimensionValue."Dimension Code");
      DimensionSetEntry.SETRANGE("Dimension Value Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE VerifySalesDocDimSet@26(DimensionValue@1000 : ARRAY [5] OF Record 349;CustomerNo@1001 : Code[20]);
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      SalesHeader.SETRANGE("Sell-to Customer No.",CustomerNo);
      SalesHeader.FINDFIRST;
      VerifyDimensionSet(DimensionValue,SalesHeader."Dimension Set ID");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDFIRST;
      VerifyLineDimSet(DimensionValue,SalesLine."Dimension Set ID");
    END;

    LOCAL PROCEDURE VerifyPurchDocDimSet@29(DimensionValue@1000 : ARRAY [5] OF Record 349;VendorNo@1001 : Code[20]);
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
    BEGIN
      PurchaseHeader.SETRANGE("Buy-from Vendor No.",VendorNo);
      PurchaseHeader.FINDFIRST;
      VerifyDimensionSet(DimensionValue,PurchaseHeader."Dimension Set ID");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;
      VerifyLineDimSet(DimensionValue,PurchaseLine."Dimension Set ID");
    END;

    LOCAL PROCEDURE VerifyDimensionSet@110(DimensionValue@1001 : ARRAY [5] OF Record 349;DimSetID@1000 : Integer);
    VAR
      DimensionSetEntry@1002 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      SetFilterDimensionSetEntry(DimensionSetEntry,DimensionValue[1]);
      Assert.RecordIsNotEmpty(DimensionSetEntry);

      SetFilterDimensionSetEntry(DimensionSetEntry,DimensionValue[2]);
      Assert.RecordIsEmpty(DimensionSetEntry);

      SetFilterDimensionSetEntry(DimensionSetEntry,DimensionValue[3]);
      Assert.RecordIsNotEmpty(DimensionSetEntry);

      SetFilterDimensionSetEntry(DimensionSetEntry,DimensionValue[4]);
      Assert.RecordIsNotEmpty(DimensionSetEntry);
    END;

    LOCAL PROCEDURE VerifyLineDimSet@16(DimensionValue@1001 : ARRAY [5] OF Record 349;DimSetID@1000 : Integer);
    VAR
      DimensionSetEntry@1002 : Record 480;
    BEGIN
      VerifyDimensionSet(DimensionValue,DimSetID);
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      SetFilterDimensionSetEntry(DimensionSetEntry,DimensionValue[5]);
      Assert.RecordIsNotEmpty(DimensionSetEntry);
    END;

    BEGIN
    {
      // [FEATURE] [Intercompany]
    }
    END.
  }
}

