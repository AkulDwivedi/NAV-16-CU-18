OBJECT Codeunit 136134 Jobs Stockout
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1006 : Codeunit 130000;
      LibraryInventory@1004 : Codeunit 132201;
      QuantityValidationErrorText@1018 : TextConst 'ENU="Validation error for Field: Quantity,  Message = ''The update has been interrupted to respect the warning.''"';
      DescriptionText@1017 : TextConst 'ENU=NTF_TEST_NTF_TEST';
      ValidateQuantityDocumentError@1012 : TextConst 'ENU=DocNo %1 not found in following objects: Job.';
      ReceiptDateDocumentError@1011 : TextConst 'ENU=No Purchase Line found with sales order no %1.';
      LibraryWarehouse@1015 : Codeunit 132204;
      LibraryPurchase@1014 : Codeunit 130512;
      LibraryJob@1013 : Codeunit 131920;
      JobPlanningLines@1003 : TestPage 1007;
      IsInitialized@1010 : Boolean;
      ZeroQuantity@1008 : Integer;
      PlanningLineQuantity@1002 : Integer;
      QuantityToSet@1001 : Integer;
      CheckAvailabilityActionYes@1000 : Boolean;

    [Normal]
    LOCAL PROCEDURE Initialize@11();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Clear the needed globals
      ClearGlobals;

      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(HandleCheckAvailabilityInfo)]
    PROCEDURE JobAnswerYes@2();
    VAR
      Item@1003 : Record 27;
      JobNo@1002 : Code[20];
    BEGIN
      // Test availability warning for demand from Job planning Lines.
      // SETUP: Create Job with Demand from planning lines for Item with Zero Quantity on Inventory.
      Initialize;
      PlanningLineQuantity := RANDOM(10000);
      CreateItem(Item);
      JobNo := CreateJobDemand(Item."No.",ZeroQuantity);

      // EXECUTE: Open the Job Planning Lines Card.
      // EXECUTE: Change Demand Quantity on Planning Line Through UI
      // EXECUTE: (Quantity Change set in EditJobPlanningLinesQuantity).
      // EXECUTE: Answer Yes to the ignore stock out warning (in HandleCheckAvailabilityInfo method).
      CheckAvailabilityActionYes := TRUE;
      EditJobPlaningLinesQuantity(JobNo,PlanningLineQuantity);

      // VERIFY: that quantity change is reflected when availability warning is ignored
      ValidateQuantity(JobNo,PlanningLineQuantity);
    END;

    [Test]
    [HandlerFunctions(HandleCheckAvailabilityInfo)]
    PROCEDURE JobAnswerNo@6();
    VAR
      Item@1003 : Record 27;
      JobNo@1002 : Code[20];
    BEGIN
      // Test availability warning for demand from Job Planning Lines. Answer No to Warning.
      // SETUP: Create Job with Demand from planning lines for Item with Zero Quantity on Inventory.
      Initialize;
      PlanningLineQuantity := RANDOM(10000);
      CreateItem(Item);
      JobNo := CreateJobDemand(Item."No.",ZeroQuantity);

      // EXECUTE: Open the Job Planning Lines Card.
      // EXECUTE: Change Demand Quantity on Planning Line Through UI.
      // EXECUTE: (Quantity Change set in EditJobPlanningLinesQuantity).
      // EXECUTE: Answer No to the ignore stock out warning (in HandleCheckAvailabilityInfo method).
      CheckAvailabilityActionYes := FALSE;
      ASSERTERROR EditJobPlaningLinesQuantity(JobNo,PlanningLineQuantity);
      Assert.AreEqual(FORMAT(QuantityValidationErrorText),FORMAT(GETLASTERRORTEXT),
        'Verify operation was cancelled and right error message is displayed');
    END;

    [Test]
    [HandlerFunctions(HandleCheckAvailabilityInfo)]
    PROCEDURE JobDemandHigherThanSupply@7();
    VAR
      Item@1005 : Record 27;
      JobNo@1002 : Code[20];
      PurchaseOrderNo@1004 : Code[20];
      PurchaseQuantity@1003 : Integer;
    BEGIN
      // Test availability warning for Job Demand higher than Supply.

      // SETUP: Create Supply with Purchase Order for Item X, Quantity = Y.
      // SETUP: Create Job Planning Line Demand for Item X,with zero quantity
      Initialize;
      PurchaseQuantity := RANDOM(10);
      PlanningLineQuantity := PurchaseQuantity + 1;
      CreateItem(Item);
      PurchaseOrderNo := CreatePurchaseSupply(Item."No.",PurchaseQuantity);
      JobNo := CreateJobDemandAfter(Item."No.",PurchaseQuantity + 5,GetReceiptDate(PurchaseOrderNo));

      // EXECUTE: Open the Job Planning Lines Card.
      // EXECUTE: Change Demand Quantity on Job Planning Line Through UI to Quantity = Y + 1.
      // EXECUTE: (Quantity Change set in EditJobPlanningLinesQuantity).
      // EXECUTE: Answer Yes to the ignore stock out warning (in HandleCheckAvailabilityInfo method).
      CheckAvailabilityActionYes := TRUE;
      EditJobPlaningLinesQuantity(JobNo,PlanningLineQuantity);

      // VERIFY: that quantity change is reflected when availability warning is ignored
      ValidateQuantity(JobNo,PlanningLineQuantity);
    END;

    [Test]
    PROCEDURE JobDemandLowerThanSupply@1();
    VAR
      Item@1005 : Record 27;
      JobNo@1002 : Code[20];
      PurchaseOrderNo@1003 : Code[20];
      PurchaseQuantity@1004 : Integer;
    BEGIN
      // Test supply cover Job Planning Line demand and therefore no warning.

      // SETUP: Create Supply for Item X.
      Initialize;
      PurchaseQuantity := RANDOM(10);
      CreateItem(Item);
      PurchaseOrderNo := CreatePurchaseSupply(Item."No.",PurchaseQuantity);
      JobNo := CreateJobDemandAfter(Item."No.",ZeroQuantity,GetReceiptDate(PurchaseOrderNo));
      PlanningLineQuantity := PurchaseQuantity - 1;

      // EXECUTE: Open the Job Planning Lines Card.
      // EXECUTE: Create Job Plannnig Line Demand for Item X at a date after Supply is arrived and quantity less than supply
      // EXECUTE: (Quantity Change set in EditJobPlanningLinesQuantity).
      CheckAvailabilityActionYes := TRUE;
      EditJobPlaningLinesQuantity(JobNo,PlanningLineQuantity);

      // VERIFY: Quantity is not changed. Availability warning is not displayed.
      ValidateQuantity(JobNo,PlanningLineQuantity);
    END;

    [Test]
    [HandlerFunctions(HandleCheckAvailabilityInfo)]
    PROCEDURE JobDemandBeforeSupplyArrive@8();
    VAR
      Item@1005 : Record 27;
      JobNo@1002 : Code[20];
      PurchaseQuantity@1004 : Integer;
    BEGIN
      // Test availability warning if Job Demand is at a date before Supply arrives.

      // SETUP: Create Job Planning Line Demand for Item X,with zero quantity.
      // SETUP: Create Supply with Purchase Order for Item X, Qantity=Y, at a date after Job Demand.
      Initialize;
      PurchaseQuantity := RANDOM(10) * 2;  // Taking Minimum Value as 2 as the Sale Quantity should not be zero.
      PlanningLineQuantity := PurchaseQuantity - 1;
      CreateItem(Item);
      JobNo := CreateJobDemand(Item."No.",PurchaseQuantity - 5);
      CreatePurchaseSupplyAfter(Item."No.",PurchaseQuantity,GetPlanningDate(JobNo));

      // EXECUTE: Open the Job Planning Lines Card.
      // EXECUTE: Change Demand Quantity on Job Planning Line Through UI to Quantity = Y - 1.
      // EXECUTE: (Quantity Change set in EditJobPlanningLinesQuantity).
      // EXECUTE: Answer Yes to the ignore stock out warning (in HandleCheckAvailabilityInfo method).
      CheckAvailabilityActionYes := TRUE;
      EditJobPlaningLinesQuantity(JobNo,PlanningLineQuantity);

      // VERIFY: Quantity on Job Planning Line after warning is Y - 1.
      ValidateQuantity(JobNo,PlanningLineQuantity);
    END;

    [Test]
    [HandlerFunctions(HandleCheckAvailabilityInfo)]
    PROCEDURE JobLocationDifferentFromSupply@14();
    VAR
      Item@1005 : Record 27;
      JobNo@1002 : Code[20];
      LocationA@1007 : Code[10];
      LocationB@1006 : Code[10];
      PurchaseOrderNo@1008 : Code[20];
      PurchaseQuantity@1004 : Integer;
    BEGIN
      // Test availability warning if Job Demand is at a different Location than a supply from purchase.

      // SETUP: Create Supply with Purchase Order for Item X, Qantity=Y, Location = Z.
      // SETUP: Create Job Planning Line Demand for Item X, Quantity=0, Location = M.
      Initialize;
      PurchaseQuantity := RANDOM(10) * 2;  // Taking Minimum Value as 2 as the Sale Quantity should not be zero.
      PlanningLineQuantity := PurchaseQuantity - 1;
      CreateItem(Item);
      LocationA := CreateLocation;
      LocationB := CreateLocation;
      PurchaseOrderNo := CreatePurchaseSupplyAtLocation(Item."No.",PurchaseQuantity,LocationA);
      JobNo := CreateJobDemandLocationAfter(Item."No.",PurchaseQuantity - 5,LocationB,GetReceiptDate(PurchaseOrderNo));

      // EXECUTE: Open the Job Planning Lines Card.
      // EXECUTE: Change Demand Quantity on Job Planning Line Through UI to Quantity = Y - 1.
      // EXECUTE: (Quantity Change set in EditJobPlanningLinesQuantity).
      // EXECUTE: Answer Yes to the ignore stock out warning (in HandleCheckAvailabilityInfo method).
      CheckAvailabilityActionYes := TRUE;
      EditJobPlaningLinesQuantity(JobNo,PlanningLineQuantity);

      // VERIFY: Verify Quantity on Job Planning Line after warning is Y - 1.
      ValidateQuantity(JobNo,PlanningLineQuantity);
    END;

    [Test]
    [HandlerFunctions(HandleCheckAvailabilityInfo)]
    PROCEDURE JobChangeLocation@21();
    VAR
      Item@1005 : Record 27;
      JobNo@1002 : Code[20];
      LocationA@1006 : Code[10];
      LocationB@1007 : Code[10];
      PurchaseOrderNo@1003 : Code[20];
      PurchaseQuantity@1004 : Integer;
    BEGIN
      // Test availability warning if the location for Job Demand modified to a location where demand cannot be met.

      // SETUP: Create Supply with Purchase Order for Item X, Qantity=Y, Location = Z.
      // SETUP: Create Job Planning Line Demand for Item X, Quantity=Y, Location = Z.
      Initialize;
      PurchaseQuantity := RANDOM(10);
      CreateItem(Item);
      LocationA := CreateLocation;
      LocationB := CreateLocation;
      PurchaseOrderNo := CreatePurchaseSupplyAtLocation(Item."No.",PurchaseQuantity,LocationA);
      JobNo := CreateJobDemandLocationAfter(Item."No.",PurchaseQuantity,LocationA,GetReceiptDate(PurchaseOrderNo));

      // EXECUTE: Open the Job Planning Lines Card.
      // EXECUTE: Change Location on Job Planning Line Through UI to location M.
      // EXECUTE: (Location Change set in EditJobPlanningLinesLocation).
      // EXECUTE: Answer Yes to the ignore stock out warning (in HandleCheckAvailabilityInfo method).
      CheckAvailabilityActionYes := TRUE;
      QuantityToSet := PurchaseQuantity;
      EditJobPlaningLinesLocation(JobNo,LocationB);

      // VERIFY: Quantity on Job Planning Line after warning is Y and location M.
      ValidateQuantity(JobNo,QuantityToSet);
    END;

    [Test]
    [HandlerFunctions(HandleCheckAvailabilityInfo)]
    PROCEDURE JobChangeDate@23();
    VAR
      Item@1005 : Record 27;
      JobNo@1002 : Code[20];
      PurchaseOrderNo@1003 : Code[20];
      PurchaseQuantity@1004 : Integer;
    BEGIN
      // Test availability warning if the date of Job Demand is modified to a date where demand cannot be met

      // SETUP: Create Supply with Purchase Order for Item X, Qantity=Y, Date = Workdate.
      // SETUP: Create Job Planning Line Demand for Item X, Quantity=Y, Date = Workdate + 1
      Initialize;
      PurchaseQuantity := RANDOM(10);
      CreateItem(Item);
      JobNo := CreateJobDemand(Item."No.",PurchaseQuantity);
      PurchaseOrderNo := CreatePurchaseSupplyAfter(Item."No.",PurchaseQuantity,GetPlanningDate(JobNo));
      JobNo := CreateJobDemandAfter(Item."No.",PurchaseQuantity,GetReceiptDate(PurchaseOrderNo));

      // EXECUTE: Open the Job Planning Lines Card.
      // EXECUTE: Change Date on Job Planning Line Through UI to Date = Workdate - 1.
      // EXECUTE: (Date Change set in EditJobPlanningLinesDate).
      // EXECUTE: Answer Yes to the ignore stock out warning (in HandleCheckAvailabilityInfo method).
      CheckAvailabilityActionYes := TRUE;
      QuantityToSet := PurchaseQuantity;
      EditJobPlaningLinesPlanDate(JobNo);

      // VERIFY: Quantity on Job Planning Line after warning is Y and Date is Workdate - 1.
      ValidateQuantity(JobNo,QuantityToSet);
    END;

    [Normal]
    LOCAL PROCEDURE ClearGlobals@30();
    BEGIN
      // Clear all global variables
      ZeroQuantity := 0;
      CLEAR(JobPlanningLines);
      PlanningLineQuantity := 0;
      QuantityToSet := 0;
      CheckAvailabilityActionYes := TRUE;
    END;

    LOCAL PROCEDURE CreateJobDemandAtBasis@31(ItemNo@1002 : Code[20];ItemQuantity@1001 : Integer;LocationCode@1003 : Code[10];PlanDate@1010 : Date) : Code[20];
    VAR
      Job@1000 : Record 167;
      JobTaskLine@1004 : Record 1001;
      JobPlanningLine@1005 : Record 1003;
      DocNo@1007 : Code[20];
    BEGIN
      // Create Job
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Apply Usage Link",TRUE);
      Job.VALIDATE("Description 2",DescriptionText);
      Job.MODIFY;

      // Job Task Line:
      LibraryJob.CreateJobTask(Job,JobTaskLine);
      JobTaskLine.MODIFY;

      // Job Planning Line:
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Item,JobTaskLine,JobPlanningLine);

      JobPlanningLine.VALIDATE("Planning Date",PlanDate);
      JobPlanningLine.VALIDATE("Usage Link",TRUE);

      DocNo := DELCHR(FORMAT(TODAY),'=','-/') + '_' + DELCHR(FORMAT(TIME),'=',':');
      JobPlanningLine.VALIDATE("Document No.",DocNo);
      JobPlanningLine.VALIDATE("No.",ItemNo);
      JobPlanningLine.VALIDATE(Quantity,ItemQuantity);
      JobPlanningLine.VALIDATE("Location Code",LocationCode);
      JobPlanningLine.MODIFY;

      EXIT(Job."No.");
    END;

    LOCAL PROCEDURE CreateJobDemand@49(ItemNo@1003 : Code[20];Quantity@1000 : Integer) : Code[20];
    BEGIN
      EXIT(CreateJobDemandAtBasis(ItemNo,Quantity,'',WORKDATE));
    END;

    LOCAL PROCEDURE CreateJobDemandAfter@13(ItemNo@1004 : Code[20];Quantity@1000 : Integer;PlanningDate@1001 : Date) : Code[20];
    BEGIN
      EXIT(CreateJobDemandAtBasis(ItemNo,Quantity,'',CALCDATE('<+1D>',PlanningDate)));
    END;

    LOCAL PROCEDURE CreateJobDemandLocationAfter@40(ItemNo@1004 : Code[20];Quantity@1000 : Integer;LocationCode@1002 : Code[10];PlanningDate@1001 : Date) : Code[20];
    BEGIN
      EXIT(CreateJobDemandAtBasis(ItemNo,Quantity,LocationCode,CALCDATE('<+1D>',PlanningDate)));
    END;

    [Normal]
    LOCAL PROCEDURE CreateItem@12(VAR Item@1000 : Record 27);
    BEGIN
      // Creates a new item. Wrapper for the library method.
      LibraryInventory.CreateItem(Item);
    END;

    [Normal]
    LOCAL PROCEDURE CreateLocation@15() : Code[10];
    VAR
      Location@1001 : Record 14;
    BEGIN
      // Creates a new Location. Wrapper for the library method.
      LibraryWarehouse.CreateLocation(Location);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreatePurchaseSupplyBasis@36(ItemNo@1008 : Code[20];Quantity@1000 : Integer;LocationCode@1006 : Code[10];ReceiptDate@1001 : Date) : Code[20];
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
    BEGIN
      // Creates a Purchase order for the given item.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE(Quantity,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Expected Receipt Date",ReceiptDate);
      PurchaseLine.MODIFY;
      EXIT(PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreatePurchaseSupply@25(ItemNo@1003 : Code[20];ItemQuantity@1002 : Integer) : Code[20];
    BEGIN
      // Creates a Purchase order for the given item.
      EXIT(CreatePurchaseSupplyBasis(ItemNo,ItemQuantity,'',WORKDATE));
    END;

    LOCAL PROCEDURE CreatePurchaseSupplyAtLocation@9(ItemNo@1003 : Code[20];ItemQuantity@1002 : Integer;LocationCode@1000 : Code[10]) : Code[20];
    BEGIN
      // Creates a Purchase order for the given item at the specified location.
      EXIT(CreatePurchaseSupplyBasis(ItemNo,ItemQuantity,LocationCode,WORKDATE));
    END;

    LOCAL PROCEDURE CreatePurchaseSupplyAfter@26(ItemNo@1004 : Code[20];Quantity@1000 : Integer;ReceiptDate@1001 : Date) : Code[20];
    BEGIN
      // Creates a Purchase order for the given item After a source document date.
      EXIT(CreatePurchaseSupplyBasis(ItemNo,Quantity,'',CALCDATE('<+1D>',ReceiptDate)));
    END;

    LOCAL PROCEDURE GetReceiptDate@20(PurchaseHeaderNo@1000 : Code[20]) : Date;
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Method returns the receipt date from a purchase order.
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",PurchaseHeaderNo);
      PurchaseLine.FINDFIRST;
      IF PurchaseLine.COUNT > 0 THEN
        EXIT(PurchaseLine."Expected Receipt Date");
      ERROR(ReceiptDateDocumentError,PurchaseHeaderNo);
    END;

    LOCAL PROCEDURE GetPlanningDate@18(JobNo@1000 : Code[20]) : Date;
    VAR
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      // Method returns the planning date from Job.
      JobPlanningLine.SETRANGE("Job No.",JobNo);
      JobPlanningLine.FINDFIRST;
      EXIT(JobPlanningLine."Planning Date");
    END;

    [Normal]
    LOCAL PROCEDURE OpenJobPlanningLines@65(JobPlanningLinesToReturn@1000 : TestPage 1007;JobNo@1001 : Code[20]);
    VAR
      Job@1003 : Record 167;
      JobTaskLine@1002 : Record 1001;
    BEGIN
      JobPlanningLinesToReturn.OPENEDIT;
      IF Job.GET(JobNo) THEN BEGIN
        JobTaskLine.SETRANGE("Job No.",Job."No.");
        JobTaskLine.FINDFIRST;
        JobPlanningLinesToReturn.FILTER.SETFILTER("Job No.",Job."No.");
        JobPlanningLinesToReturn.FILTER.SETFILTER("Job Task No.",JobTaskLine."Job Task No.");
        JobPlanningLinesToReturn.FIRST;
      END;
    END;

    [Normal]
    LOCAL PROCEDURE EditJobPlaningLinesQuantity@60(JobNo@1001 : Code[20];PlanningLineQuantity@1002 : Integer);
    VAR
      JobPlanningLinesToEdit@1000 : TestPage 1007;
    BEGIN
      // Open Job Planning Lines Page.
      // Change the line quantity.
      OpenJobPlanningLines(JobPlanningLinesToEdit,JobNo);
      JobPlanningLines := JobPlanningLinesToEdit;
      QuantityToSet := PlanningLineQuantity;
      JobPlanningLinesToEdit.Quantity.SETVALUE(FORMAT(QuantityToSet));
    END;

    [Normal]
    LOCAL PROCEDURE EditJobPlaningLinesLocation@79(JobNo@1002 : Code[20];LocationCode@1001 : Code[10]);
    VAR
      JobPlanningLinesToEdit@1000 : TestPage 1007;
    BEGIN
      // Open Job Planning Lines Page.
      // Change the line Location Code.
      OpenJobPlanningLines(JobPlanningLinesToEdit,JobNo);
      JobPlanningLines := JobPlanningLinesToEdit;
      JobPlanningLinesToEdit."Location Code".SETVALUE(LocationCode);
    END;

    [Normal]
    LOCAL PROCEDURE EditJobPlaningLinesPlanDate@78(JobNo@1001 : Code[20]);
    VAR
      JobPlanningLinesToEdit@1000 : TestPage 1007;
    BEGIN
      // Open Job Planning Lines Page.
      // Change the line Planning Date.
      OpenJobPlanningLines(JobPlanningLinesToEdit,JobNo);
      JobPlanningLines := JobPlanningLinesToEdit;
      JobPlanningLinesToEdit."Planning Date".SETVALUE(FORMAT(WORKDATE));
    END;

    [Normal]
    LOCAL PROCEDURE AssertCheckAvailabilityInfo@96(CheckAvailability@1000 : TestPage 342;SourceJobPlanningLines@1001 : TestPage 1007;EditedQuantity@1002 : Text[30]);
    BEGIN
      // Perform validations on the check availability form.
      Assert.AreEqual(
        SourceJobPlanningLines."No.".VALUE,CheckAvailability."No.".VALUE,'Verify No. match');
      Assert.AreEqual(
        SourceJobPlanningLines.Description.VALUE,CheckAvailability.Description.VALUE,'Verify Description match');
      Assert.AreEqual(
        EditedQuantity,FORMAT(CheckAvailability.CurrentQuantity.ASINTEGER),
        'Verify Current Quantity matches edited quantity');
      // Formula: (Inventory+ ScheduledReceipt) - (GrossRequirement+Current quantity) = total quantity
      Assert.AreEqual(
        SourceJobPlanningLines."Unit of Measure Code".VALUE,CheckAvailability.UnitOfMeasureCode.VALUE,
        'Verify Unit of measure match');
    END;

    LOCAL PROCEDURE ValidateQuantity@97(DocumentNo@1000 : Code[20];Quantity@1001 : Integer);
    VAR
      Job@1003 : Record 167;
      JobPlanningLine@1002 : Record 1003;
    BEGIN
      // Method verifies the quantity on a Job.
      IF Job.GET(DocumentNo) THEN BEGIN
        JobPlanningLine.SETRANGE("Job No.",Job."No.");
        JobPlanningLine.FINDFIRST;
        Assert.AreEqual(Quantity,JobPlanningLine.Quantity,'Verify Job Planning Line Quantity matches expected');
        EXIT;
      END;

      ERROR(ValidateQuantityDocumentError,DocumentNo);
    END;

    [ModalPageHandler]
    PROCEDURE HandleCheckAvailabilityInfo@95(VAR CheckAvailability@1000 : TestPage 342);
    BEGIN
      // Handler for Check Availability Warning Page.
      // VERIFY:  Verify Availability Warning.
      AssertCheckAvailabilityInfo(CheckAvailability,JobPlanningLines,FORMAT(QuantityToSet));
      IF CheckAvailabilityActionYes THEN BEGIN
        CheckAvailability.Yes.INVOKE;
        EXIT;
      END;
      CheckAvailability.No.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Item Availability] [Job]
      Tests Availability warning for Jobs.

      Covered Test cases:
      --------------------------------------------------
      Test Function Name                  TFS ID
      --------------------------------------------------
      --------------------------------------------------
      Test Function Name                  TFS ID
      --------------------------------------------------
      JobAnswerYes                         174096
      JobAnswerNo                          174097
      JobDemandHigherThanSupply            174098
      JobDemandLowerThanSupply             174099
      JobDemandBeforeSupplyArrive          174100
      JobLocationDifferentFromSupply       174101
      JobChangeLocation                    174102
      JobChangeDate                        174103
    }
    END.
  }
}

