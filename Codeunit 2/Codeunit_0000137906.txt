OBJECT Codeunit 137906 SCM Assembly Availability
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 32=rimd;
    Subtype=Test;
    OnRun=VAR
            MfgSetup@1000 : Record 99000765;
          BEGIN
            MfgSetup.GET;
            WorkDate2 := CALCDATE(MfgSetup."Default Safety Lead Time",WORKDATE); // to avoid Due Date Before Work Date message.
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      LibraryAssembly@1000 : Codeunit 132207;
      LibraryKitting@1002 : Codeunit 132205;
      LibraryInventory@1010 : Codeunit 132201;
      LibraryManufacturing@1003 : Codeunit 132202;
      LibraryWarehouse@1011 : Codeunit 132204;
      LastEntryNo@1004 : Integer;
      WorkDate2@1005 : Date;
      MSG_IS_BEFORE_WORKDATE@1006 : TextConst 'ENU=is before work date';
      Initialized@1009 : Boolean;

    [Normal]
    LOCAL PROCEDURE Initialize@31();
    BEGIN
      IF Initialized THEN
        EXIT;

      Initialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler,IsBeforeWorkDateMsgHandler)]
    PROCEDURE BUG231289Availabilitydateblank@28();
    VAR
      AssemblyHeader@1007 : Record 900;
      BOMComp@1006 : Record 90;
      parentItem@1003 : Record 27;
      childItem@1001 : Record 27;
      childItem2@1002 : Record 27;
      QTYParent@1005 : Decimal;
      QTYChild@1004 : Decimal;
      ExpectedDate@1000 : Date;
    BEGIN
      Initialize;
      LibraryKitting.SetLookahead('<1Y>');
      QTYParent := 2;
      QTYChild := 1;
      parentItem.GET(LibraryKitting.CreateItemWithLotAndNewUOMUsingItemNo('Parent',500,700,1));
      childItem.GET(LibraryKitting.CreateItemWithNewUOMUsingItemNo('Child1',500,700));
      childItem2.GET(LibraryKitting.CreateItemWithNewUOMUsingItemNo('Child2',500,700));

      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parentItem."No.",BOMComp.Type::Item,childItem."No.",QTYChild,childItem."Base Unit of Measure");
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parentItem."No.",BOMComp.Type::Item,childItem2."No.",QTYChild,childItem2."Base Unit of Measure");

      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,
        LibraryKitting.CreateOrderNo(010210D,'testAvailField',parentItem."No.",QTYParent));
      AssemblyHeader.VALIDATE("Due Date",010210D);

      MockItemLedgerEntry(childItem."No.",2,AssemblyHeader."Location Code",010108D);
      MockItemLedgerEntry(childItem2."No.",1,AssemblyHeader."Location Code",010108D);

      ExpectedDate := 0D; // Anydate with a year of due date of line=due date of header
      MockPurchaseOrder(childItem."No.",1,AssemblyHeader."Location Code",010110D); // any date before due date

      ValidateQtyAvailableToMake(AssemblyHeader,1);
      ValidateEarliestDate(AssemblyHeader,ExpectedDate);
      ValidateOrderRatio(AssemblyHeader,1);
      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE TestMockfunctions@18();
    VAR
      ChildItem@1000 : Record 27;
      Location@1002 : Record 14;
    BEGIN
      Initialize;
      ChildItem.GET(LibraryKitting.CreateItemWithNewUOM(500,700));
      MockItemLedgerEntry(ChildItem."No.",10,LibraryWarehouse.CreateLocation(Location),010110D);
      ChildItem.CALCFIELDS(Inventory);
      Assert.AreEqual(10,ChildItem.Inventory,'Wrong Inventory');

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE TestLocation@25();
    VAR
      AssemblyHeader@1002 : Record 900;
      ParentItemNo@1003 : Code[20];
    BEGIN
      Initialize;
      ParentItemNo := LibraryKitting.CreateItemWithLotAndNewUOM(500,700,1);

      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,WorkDate2,ParentItemNo,'',1,'');
      AssemblyHeader.VALIDATE("Location Code",'');
      AssemblyHeader.VALIDATE("Due Date",WorkDate2);
      AssemblyHeader.VALIDATE("Item No.");

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE TestRemainingOnLineforOne@10();
    VAR
      AssemblyHeader@1001 : Record 900;
      BOMComp@1002 : Record 90;
      AssemblyLine@1003 : Record 901;
      parentItem@1000 : Record 27;
      childItem@1004 : Record 27;
    BEGIN
      Initialize;
      parentItem.GET(LibraryKitting.CreateItemWithLotAndNewUOM(500,700,1));
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parentItem."No.",1));
      childItem.GET(LibraryKitting.CreateItemWithNewUOM(500,700));
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parentItem."No.",BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure");

      AssemblyHeader.RefreshBOM;
      AssemblyLine.SETRANGE("Document Type",AssemblyLine."Document Type"::Order);
      AssemblyLine.SETRANGE("Document No.",AssemblyHeader."No.");
      AssemblyLine.FINDFIRST;
      ValidateremainingQty(AssemblyLine,1);
      ValidateremainingQtyBase(AssemblyLine,1);
      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE TestCalcFieldsForOrderAndLine@1();
    VAR
      AssemblyHeader@1001 : Record 900;
      BOMComp@1002 : Record 90;
      parentItem@1003 : Record 27;
      childItem@1000 : Record 27;
      QTYParent@1005 : Decimal;
      QTYChild@1006 : Decimal;
    BEGIN
      Initialize;
      QTYParent := 2;
      QTYChild := 4;

      parentItem.GET(LibraryKitting.CreateItemWithLotAndNewUOM(500,700,1));
      childItem.GET(LibraryKitting.CreateItemWithNewUOM(500,700));
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parentItem."No.",BOMComp.Type::Item,childItem."No.",QTYChild,childItem."Base Unit of Measure");
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parentItem."No.",QTYParent));

      ValidateInItemOnOrder(parentItem."No.",QTYParent);
      ValidateInItemOnComponents(childItem."No.",QTYParent * QTYChild);
      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(UpdateLocationHandler,AvailabilityWindowHandler)]
    PROCEDURE TestCalcFieldsForOrderLocation@4();
    VAR
      AssemblyHeader@1001 : Record 900;
      AssemblyLine@1007 : Record 901;
      BOMComponent@1002 : Record 90;
      Location@1010 : Record 14;
      otherLocation@1011 : Record 14;
      parentItem@1000 : Record 27;
      childItem@1004 : Record 27;
      QTYParent@1005 : Decimal;
      QTYChild@1006 : Decimal;
    BEGIN
      Initialize;
      QTYParent := 2;
      QTYChild := 4;

      parentItem.GET(LibraryKitting.CreateItemWithLotAndNewUOMUsingItemNo('Parent',500,700,1));
      childItem.GET(LibraryKitting.CreateItemWithNewUOMUsingItemNo('Child',500,700));
      LibraryManufacturing.CreateBOMComponent(
        BOMComponent,parentItem."No.",BOMComponent.Type::Item,childItem."No.",QTYChild,childItem."Base Unit of Measure");
      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parentItem."No.",QTYParent));
      LibraryWarehouse.CreateLocation(Location);
      LibraryWarehouse.CreateLocation(otherLocation);

      AssemblyHeader.VALIDATE("Location Code",Location.Code);
      AssemblyHeader.MODIFY;
      ValidateInItemOnOrderLocation(parentItem."No.",QTYParent,Location.Code);
      ValidateInItemOnCompLocation(childItem."No.",QTYParent * QTYChild,Location.Code);
      ValidateInItemOnCompLocation(childItem."No.",0,otherLocation.Code);

      AssemblyLine.SETRANGE("Document Type",AssemblyLine."Document Type"::Order);
      AssemblyLine.SETRANGE("Document No.",AssemblyHeader."No.");
      AssemblyLine.FINDFIRST;
      AssemblyLine.VALIDATE("Location Code",Location.Code);
      ValidateInItemOnCompLocation(childItem."No.",QTYParent * QTYChild,Location.Code);
      ValidateInItemOnCompLocation(childItem."No.",0,otherLocation.Code);
      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler,IsBeforeWorkDateMsgHandler)]
    PROCEDURE TestAvailablilty@12();
    VAR
      AssemblyHeader@1003 : Record 900;
      BOMComp@1001 : Record 90;
      MfgSetup@1000 : Record 99000765;
      parentItem@1002 : Record 27;
      childItem@1004 : Record 27;
      QTYParent@1007 : Decimal;
      QTYChild@1006 : Decimal;
    BEGIN
      Initialize;
      LibraryKitting.SetLookahead('<1M>');

      MfgSetup.GET;
      CLEAR(MfgSetup."Default Safety Lead Time");
      MfgSetup.MODIFY;

      QTYParent := 1;
      QTYChild := 5;
      parentItem.GET(LibraryKitting.CreateItemWithLotAndNewUOMUsingItemNo('Parent',500,700,1));
      childItem.GET(LibraryKitting.CreateItemWithNewUOMUsingItemNo('Child',500,700));
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parentItem."No.",BOMComp.Type::Item,childItem."No.",QTYChild,childItem."Base Unit of Measure");

      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parentItem."No.",QTYParent));
      AssemblyHeader.VALIDATE("Due Date",010110D);
      ValidateOrderAvailability(AssemblyHeader,FALSE);
      MockItemLedgerEntry(childItem."No.",10,AssemblyHeader."Location Code",010110D);
      ValidateInventoryMock(childItem."No.",10);
      ValidateOrderAvailability(AssemblyHeader,TRUE);
      MockSalesOrder(childItem."No.",7,AssemblyHeader."Location Code",010110D);
      ValidateOrderAvailability(AssemblyHeader,FALSE);
      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(AvailabilityWarningHandler,AvailabilityWindowHandler,IsBeforeWorkDateMsgHandler)]
    PROCEDURE TestAvailabilityWarning@17();
    VAR
      AssemblyHeader@1003 : Record 900;
      AssemblyLine@1002 : Record 901;
      BOMComp@1001 : Record 90;
      parentItem@1000 : Record 27;
      childItem@1004 : Record 27;
      QTYParent@1007 : Decimal;
      QTYChild@1006 : Decimal;
    BEGIN
      Initialize;
      QTYParent := 2;
      QTYChild := 1;

      parentItem.GET(LibraryKitting.CreateItemWithLotAndNewUOMUsingItemNo('Parent',500,700,1));
      childItem.GET(LibraryKitting.CreateItemWithNewUOMUsingItemNo('Child',500,700));

      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parentItem."No.",BOMComp.Type::Item,childItem."No.",QTYChild,childItem."Base Unit of Measure");

      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parentItem."No.",QTYParent));
      AssemblyHeader.VALIDATE("Due Date",010110D);
      ValidateOrderAvailability(AssemblyHeader,FALSE);

      AssemblyLine.SETRANGE("Document Type",AssemblyLine."Document Type"::Order);
      AssemblyLine.SETRANGE("Document No.",AssemblyHeader."No.");
      AssemblyLine.FINDFIRST;
      AssemblyLine.ShowAvailabilityWarning;

      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(AvailabilityWarningHandler,AvailabilityWindowHandler,IsBeforeWorkDateMsgHandler)]
    PROCEDURE TestAvailabilityWarningFields@23();
    VAR
      AssemblyHeader@1003 : Record 900;
      AssemblyLine@1002 : Record 901;
      BOMComp@1001 : Record 90;
      MfgSetup@1010 : Record 99000765;
      parentItem@1004 : Record 27;
      childItem@1005 : Record 27;
      QTYParent@1007 : Decimal;
      QTYChild@1006 : Decimal;
      QTYInventory@1000 : Decimal;
      QTYPurchase@1008 : Decimal;
      QTYNewPurchase@1009 : Decimal;
    BEGIN
      Initialize;
      LibraryKitting.SetLookahead('<1Y>');

      MfgSetup.GET;
      CLEAR(MfgSetup."Default Safety Lead Time");
      MfgSetup.MODIFY;

      QTYParent := 1;
      QTYChild := 16;     // must be 16
      QTYInventory := 10;
      QTYPurchase := 5;
      QTYNewPurchase := 1;

      parentItem.GET(LibraryKitting.CreateItemWithLotAndNewUOMUsingItemNo('Parent',500,700,1));
      childItem.GET(LibraryKitting.CreateItemWithNewUOMUsingItemNo('Child',500,700));

      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parentItem."No.",BOMComp.Type::Item,childItem."No.",QTYChild,childItem."Base Unit of Measure");

      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parentItem."No.",QTYParent));
      AssemblyHeader.VALIDATE("Due Date",150210D);
      ValidateOrderAvailability(AssemblyHeader,FALSE);

      MockItemLedgerEntry(childItem."No.",QTYInventory,AssemblyHeader."Location Code",010108D);
      MockPurchaseOrder(childItem."No.",QTYPurchase,AssemblyHeader."Location Code",010210D);

      LibraryAssembly.SetLinkToLines(AssemblyHeader,AssemblyLine);
      AssemblyLine.FINDFIRST;
      ValidateAvailabilityFields(AssemblyLine,QTYChild,QTYInventory,0,QTYPurchase,FALSE);

      MockPurchaseOrder(childItem."No.",QTYNewPurchase,AssemblyHeader."Location Code",150210D);
      ValidateAvailabilityFields(AssemblyLine,QTYChild,QTYInventory,0,QTYPurchase + QTYNewPurchase,TRUE);

      ValidateEarliestDate(AssemblyHeader,0D);
      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler,IsBeforeWorkDateMsgHandler)]
    PROCEDURE TestAvailabilityFields@21();
    VAR
      AssemblyHeader@1003 : Record 900;
      BOMComp@1001 : Record 90;
      MfgSetup@1000 : Record 99000765;
      parentItem@1002 : Record 27;
      childItem@1004 : Record 27;
      childItem2@1005 : Record 27;
      QTYParent@1007 : Decimal;
      QTYChild@1006 : Decimal;
      ExpectedDate@1009 : Date;
    BEGIN
      Initialize;
      MfgSetup.GET;
      EVALUATE(MfgSetup."Default Safety Lead Time",'<1D>');
      MfgSetup.MODIFY;

      LibraryKitting.SetLookahead('<1M>');
      QTYParent := 8;
      QTYChild := 1;
      parentItem.GET(LibraryKitting.CreateItemWithLotAndNewUOMUsingItemNo('Parent',500,700,1));
      childItem.GET(LibraryKitting.CreateItemWithNewUOMUsingItemNo('Child1',500,700));
      childItem2.GET(LibraryKitting.CreateItemWithNewUOMUsingItemNo('Child2',500,700));

      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parentItem."No.",BOMComp.Type::Item,childItem."No.",QTYChild,childItem."Base Unit of Measure");
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,parentItem."No.",BOMComp.Type::Item,childItem2."No.",QTYChild,childItem2."Base Unit of Measure");

      AssemblyHeader.GET(AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrderNo(WorkDate2,'testAvailField',
          parentItem."No.",QTYParent));
      AssemblyHeader.VALIDATE("Due Date",010210D);

      MockItemLedgerEntry(childItem."No.",3,AssemblyHeader."Location Code",010108D);
      MockItemLedgerEntry(childItem2."No.",7,AssemblyHeader."Location Code",010108D);
      ExpectedDate := 170210D; // Anydate with a year of due date of line=due date of header
      MockPurchaseOrder(childItem."No.",1,AssemblyHeader."Location Code",010110D); // any date before due date
      MockPurchaseOrder(childItem."No.",4,AssemblyHeader."Location Code",100210D); // any date between due date and expected date
      MockPurchaseOrder(childItem2."No.",1,AssemblyHeader."Location Code",ExpectedDate);

      ValidateQtyAvailableToMake(AssemblyHeader,4);
      ValidateEarliestDate(AssemblyHeader,CALCDATE(MfgSetup."Default Safety Lead Time",ExpectedDate));
      ValidateOrderRatio(AssemblyHeader,4);
      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE TestRatioUOM@27();
    VAR
      AssemblyHeader@1002 : Record 900;
      BOMComp@1004 : Record 90;
      ParentItem@1003 : Record 27;
      ChildItem@1000 : Record 27;
      ItemUOM@1005 : Record 5404;
      NonBaseUOM@1006 : Record 204;
    BEGIN
      Initialize;
      LibraryKitting.SetLookahead('<1M>');

      ParentItem.GET(LibraryKitting.CreateItemWithLotAndNewUOMUsingItemNo('Parent',500,700,1));
      LibraryInventory.CreateUnitOfMeasureCode(NonBaseUOM);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUOM,ParentItem."No.",NonBaseUOM.Code,10);

      ChildItem.GET(LibraryKitting.CreateItemWithNewUOMUsingItemNo('Child1',500,700));
      LibraryManufacturing.CreateBOMComponent(
        BOMComp,ParentItem."No.",BOMComp.Type::Item,ChildItem."No.",2,ChildItem."Base Unit of Measure");

      AssemblyHeader.GET(
        AssemblyHeader."Document Type"::Order,LibraryKitting.CreateOrderNo(WorkDate2,'testAvailField',ParentItem."No.",3));
      AssemblyHeader.VALIDATE("Unit of Measure Code",NonBaseUOM.Code);
      AssemblyHeader.MODIFY;
      MockItemLedgerEntry(ChildItem."No.",5,AssemblyHeader."Location Code",010108D);

      ValidateOrderRatio(AssemblyHeader,0.25);

      ASSERTERROR ERROR('') // roll back
    END;

    [ModalPageHandler]
    PROCEDURE AvailabilityWindowHandler@43(VAR AsmAvailability@1000 : Page 908;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::Yes; // always confirm
    END;

    LOCAL PROCEDURE ValidateOrderRatio@26(AsmHeader@1000 : Record 900;ExpectedAvailable@1001 : Decimal);
    VAR
      AssemblyLine@1004 : Record 901;
      Result@1002 : Decimal;
      AvailableDate@1003 : Date;
    BEGIN
      LibraryAssembly.SetLinkToLines(AsmHeader,AssemblyLine);
      LibraryAssembly.EarliestAvailableDate(AsmHeader,AssemblyLine,Result,AvailableDate);
      Assert.AreEqual(Result,ExpectedAvailable,
        STRSUBSTNO('Bad Able to make for Assembly order %1 Expected %2, got %3',
          AsmHeader."No.",
          ExpectedAvailable,
          Result));
    END;

    LOCAL PROCEDURE ValidateAvailabilityFields@24(AsmLine@1000 : Record 901;ExpectedQuantity@1016 : Decimal;ExpectedInventory@1001 : Decimal;ExpectedCrossRequirement@1002 : Decimal;ExpectedScheduledReceipts@1014 : Decimal;ExpectedAvailable@1015 : Boolean);
    VAR
      ItemCheckAvail@1004 : Codeunit 311;
      getItemNo@1013 : Code[20];
      getInventory@1012 : Decimal;
      getGrossRequirement@1011 : Decimal;
      getReservedRequirement@1007 : Decimal;
      getScheduledReceipts@1010 : Decimal;
      getReservedReceipts@1017 : Decimal;
      getCurrentQty@1009 : Decimal;
      getCurrentResQty@1005 : Decimal;
      getTotalQty@1008 : Decimal;
      getEarliestAvilabilityDate@1006 : Date;
      getUnitOfMeasure@1003 : Code[10];
    BEGIN
      ItemCheckAvail.AssemblyLineCheck(AsmLine);
      ItemCheckAvail.FetchCalculation(getItemNo,getUnitOfMeasure,getInventory,
        getGrossRequirement,getReservedRequirement,getScheduledReceipts,getReservedReceipts,
        getCurrentQty,getCurrentResQty,getTotalQty,getEarliestAvilabilityDate);
      Assert.AreEqual(ExpectedQuantity,AsmLine."Remaining Quantity",
        STRSUBSTNO('Wrong Expected Quantity in %1, expected %2 - got %3',AsmLine."Document No.",ExpectedQuantity,
          AsmLine."Remaining Quantity"));
      Assert.AreEqual(ExpectedInventory,getInventory,
        STRSUBSTNO('Wrong Inventory in %1, expected %2 - got %3',AsmLine."Document No.",ExpectedInventory,getInventory));
      Assert.AreEqual(ExpectedCrossRequirement,getGrossRequirement,
        STRSUBSTNO('Wrong GrossReq. in %1, expected %2 - got %3',AsmLine."Document No.",ExpectedCrossRequirement,
          getGrossRequirement));
      Assert.AreEqual(ExpectedScheduledReceipts,getScheduledReceipts,
        STRSUBSTNO('Wrong ScheduledReceipts in %1, expected %2 - got %3',AsmLine."Document No.",ExpectedScheduledReceipts,
          getScheduledReceipts));
      Assert.AreEqual(ExpectedAvailable,getTotalQty >= 0,
        STRSUBSTNO('Wrong Availability in %1, expected %2 - got %3',AsmLine."Document No.",ExpectedAvailable,getTotalQty >= 0));
    END;

    LOCAL PROCEDURE ValidateQtyAvailableToMake@20(AsmHeader@1003 : Record 900;ExpectedQty@1000 : Decimal);
    VAR
      AssemblyLine@1004 : Record 901;
      QtyAvailable@1002 : Decimal;
      EarliestDate@1001 : Date;
    BEGIN
      LibraryAssembly.SetLinkToLines(AsmHeader,AssemblyLine);
      LibraryAssembly.EarliestAvailableDate(AsmHeader,AssemblyLine,QtyAvailable,EarliestDate);
      Assert.AreEqual(QtyAvailable,ExpectedQty,
        STRSUBSTNO('Wrong Availability Qty in %1, expected %2 - got %3',AsmHeader."No.",ExpectedQty,QtyAvailable));
    END;

    LOCAL PROCEDURE ValidateEarliestDate@22(AsmHeader@1003 : Record 900;ExpectedDate@1000 : Date);
    VAR
      AssemblyLine@1004 : Record 901;
      QtyAvailable@1002 : Decimal;
      EarliestDate@1001 : Date;
    BEGIN
      LibraryAssembly.SetLinkToLines(AsmHeader,AssemblyLine);
      LibraryAssembly.EarliestAvailableDate(AsmHeader,AssemblyLine,QtyAvailable,EarliestDate);
      Assert.AreEqual(EarliestDate,ExpectedDate,
        STRSUBSTNO('Wrong EarliestDate in %1, expected %2 - got %3',AsmHeader."No.",ExpectedDate,EarliestDate));
    END;

    LOCAL PROCEDURE ValidateInventoryMock@15(Itemno@1000 : Code[20];ExpectedInventory@1001 : Decimal);
    VAR
      Item@1002 : Record 27;
      result@1003 : Decimal;
    BEGIN
      Item.GET(Itemno);
      Item.CALCFIELDS(Inventory);
      result := Item.Inventory;
      Assert.AreEqual(result,ExpectedInventory,
        STRSUBSTNO('Bad inventory for %1 expected %2 but got %3',
          Item."No.",ExpectedInventory,result));
    END;

    LOCAL PROCEDURE ValidateOrderAvailability@14(AsmHeader@1000 : Record 900;ExpectedAvailable@1001 : Boolean);
    VAR
      Result@1002 : Boolean;
    BEGIN
      Result := LibraryAssembly.ComponentsAvailable(AsmHeader);
      Assert.AreEqual(Result,ExpectedAvailable,
        STRSUBSTNO('Bad Availability for components in Assembly order %1 Expected %2, got %3',
          AsmHeader."No.",
          ExpectedAvailable,
          Result));
    END;

    LOCAL PROCEDURE ValidateremainingQty@29(AssemblyLine@1001 : Record 901;ExpectedRemQty@1000 : Decimal);
    BEGIN
      Assert.AreEqual(AssemblyLine."Quantity (Base)",ExpectedRemQty,
        STRSUBSTNO('Bad Remaining Qty in Assembly Line %1 Expected %2, got %3',
          AssemblyLine."Document No.",
          ExpectedRemQty,
          AssemblyLine."Quantity (Base)"));
    END;

    LOCAL PROCEDURE ValidateremainingQtyBase@30(AssemblyLine@1001 : Record 901;ExpectedRemQty@1000 : Decimal);
    BEGIN
      Assert.AreEqual(AssemblyLine."Remaining Quantity",ExpectedRemQty,
        STRSUBSTNO('Bad Remaining Qty(Base) in Assembly Line %1 Expected %2, got %3',
          AssemblyLine."Document No.",
          ExpectedRemQty,
          AssemblyLine."Remaining Quantity"));
    END;

    LOCAL PROCEDURE ValidateInItemOnOrder@3(ItemNo@1000 : Code[20];ExpectedQuantity@1002 : Decimal);
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      Item.CALCFIELDS("Qty. on Assembly Order");
      Assert.AreEqual(Item."Qty. on Assembly Order",ExpectedQuantity,
        STRSUBSTNO('Bad "Qty. on Assembly Order" for Item %1 Expected %2, got %3',
          Item."No.",
          ExpectedQuantity,
          Item."Qty. on Assembly Order"));
    END;

    LOCAL PROCEDURE ValidateInItemOnComponents@5(ItemNo@1000 : Code[20];ExpectedQuantity@1002 : Decimal);
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      Item.SETRANGE("Location Filter");
      Item.CALCFIELDS("Qty. on Asm. Component");
      Assert.AreEqual(Item."Qty. on Asm. Component",ExpectedQuantity,
        STRSUBSTNO('Bad "Qty. on Assembly Order" for Item %1 Expected %2, got %3',
          Item."No.",
          ExpectedQuantity,
          Item."Qty. on Asm. Component"));
    END;

    LOCAL PROCEDURE ValidateInItemOnOrderLocation@9(ItemNo@1000 : Code[20];ExpectedQuantity@1002 : Decimal;LocationCode@1003 : Code[20]);
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      Item.SETRANGE("Location Filter",LocationCode);
      Item.CALCFIELDS("Qty. on Assembly Order");
      Assert.AreEqual(Item."Qty. on Assembly Order",ExpectedQuantity,
        STRSUBSTNO('Bad "Qty. on Assembly Order" for Item %1 Expected %2, got %3',
          Item."No.",
          ExpectedQuantity,
          Item."Qty. on Assembly Order"));
    END;

    LOCAL PROCEDURE ValidateInItemOnCompLocation@8(ItemNo@1000 : Code[20];ExpectedQuantity@1002 : Decimal;LocationCode@1003 : Code[20]);
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      Item.SETRANGE("Location Filter",LocationCode);
      Item.CALCFIELDS("Qty. on Asm. Component");
      Assert.AreEqual(Item."Qty. on Asm. Component",ExpectedQuantity,
        STRSUBSTNO('Bad "Qty. on Assembly Comp" for Item %1 Expected %2 at %4, got %3',
          Item."No.",
          ExpectedQuantity,
          Item."Qty. on Asm. Component",LocationCode));
    END;

    [ConfirmHandler]
    PROCEDURE UpdateLocationHandler@11(Question@1002 : Text[1024];VAR Choice@1001 : Boolean);
    BEGIN
      Choice := TRUE;
    END;

    LOCAL PROCEDURE MockItemLedgerEntry@13(ItemNo@1001 : Code[20];Qty@1000 : Decimal;LocationCode@1002 : Code[10];Date@1004 : Date);
    VAR
      ItemLedgEntry@1003 : Record 32;
    BEGIN
      ItemLedgEntry.RESET;
      IF LastEntryNo = 0 THEN BEGIN
        IF ItemLedgEntry.FINDLAST THEN;
        ItemLedgEntry."Entry No." += 1;
        LastEntryNo := ItemLedgEntry."Entry No."
      END ELSE BEGIN
        LastEntryNo += 1;
        ItemLedgEntry."Entry No." := LastEntryNo;
      END;
      ItemLedgEntry."Item No." := ItemNo;
      ItemLedgEntry.Quantity := Qty;
      ItemLedgEntry."Location Code" := LocationCode;
      ItemLedgEntry."Posting Date" := Date;
      ItemLedgEntry.INSERT;
    END;

    LOCAL PROCEDURE MockSalesOrder@16(ItemNo@1001 : Code[20];Qty@1000 : Decimal;LocationCode@1002 : Code[10];Date@1004 : Date);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      SalesLine.RESET;
      SalesLine."Document Type" := SalesLine."Document Type"::Order;
      IF LastEntryNo = 0 THEN BEGIN
        IF SalesLine.FINDLAST THEN;
        SalesLine."Line No." := SalesLine."Line No." + 10000;
        LastEntryNo := SalesLine."Line No.";
      END ELSE BEGIN
        LastEntryNo += 10000;
        SalesLine."Line No." := LastEntryNo;
      END;
      SalesLine.Type := SalesLine.Type::Item;
      SalesLine."No." := ItemNo;
      SalesLine."Outstanding Qty. (Base)" := Qty;
      SalesLine."Location Code" := LocationCode;
      SalesLine."Shipment Date" := Date;
      SalesLine.INSERT;
    END;

    LOCAL PROCEDURE MockPurchaseOrder@19(ItemNo@1001 : Code[20];Qty@1000 : Decimal;LocationCode@1002 : Code[10];Date@1004 : Date);
    VAR
      PurchaseLine@1003 : Record 39;
    BEGIN
      PurchaseLine.RESET;
      PurchaseLine."Document Type" := PurchaseLine."Document Type"::Order;
      IF LastEntryNo = 0 THEN BEGIN
        IF PurchaseLine.FINDLAST THEN;
        PurchaseLine."Line No." := PurchaseLine."Line No." + 10000;
        LastEntryNo := PurchaseLine."Line No.";
      END ELSE BEGIN
        LastEntryNo += 10000;
        PurchaseLine."Line No." := LastEntryNo;
      END;
      PurchaseLine.Type := PurchaseLine.Type::Item;
      PurchaseLine."No." := ItemNo;
      PurchaseLine."Outstanding Qty. (Base)" := Qty;
      PurchaseLine."Outstanding Quantity" := Qty;
      PurchaseLine."Location Code" := LocationCode;
      PurchaseLine."Expected Receipt Date" := Date;
      PurchaseLine.INSERT;
    END;

    [ModalPageHandler]
    PROCEDURE AvailabilityWarningHandler@2(VAR CheckAvailability@1000 : Page 342;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::OK;
    END;

    [MessageHandler]
    PROCEDURE IsBeforeWorkDateMsgHandler@168(Msg@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Msg,MSG_IS_BEFORE_WORKDATE) > 0,'');
    END;

    BEGIN
    {
      // [FEATURE] [Assembly] [SCM]
    }
    END.
  }
}

