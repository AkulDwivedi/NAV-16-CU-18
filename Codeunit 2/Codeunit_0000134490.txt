OBJECT Codeunit 134490 ERM Matrix Management
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryDimension@1001 : Codeunit 131001;
      LibraryERM@1012 : Codeunit 131300;
      LibraryAccSchedule@1005 : Codeunit 131304;
      Assert@1003 : Codeunit 130000;
      LibraryRandom@1004 : Codeunit 130440;
      WrongCaptionRangeMsg@1006 : TextConst 'ENU=Wrong CaptionRange length';
      WrongNumberOfColumnsMsg@1007 : TextConst 'ENU=Wrong NumberOfLines value';
      DimTotalingTxt@1000 : TextConst '@@@="%1 - Field Value; %2 - Field Value";ENU=%1|%2';
      WrongDimTotalingErr@1002 : TextConst 'ENU=Wrong dimension totaling filter.';
      RoundingFactorRef@1008 : 'None,1,1000,1000000';
      WrongRoundedValueErr@1009 : TextConst 'ENU=Wrong value for %1 rounding';
      WrongFormatValueErr@1011 : TextConst 'ENU=Wrong value format for %1 rounding';

    [Test]
    PROCEDURE EmptyCaptionSet@1();
    VAR
      CaptionSet@1002 : ARRAY [32] OF Text[1024];
      FirstColumn@1003 : Text;
      LastColumn@1004 : Text;
      DimensionCode@1000 : Code[20];
      Count@1001 : Integer;
    BEGIN
      // Verify filtered dimension values when applied filter does not allow any entry

      InitDimensionValues(DimensionCode,Count,CaptionSet,FirstColumn,LastColumn);
      VerifyDimToCaptions('',0,DimensionCode,FirstColumn,LastColumn,'=0',CaptionSet);
    END;

    [Test]
    PROCEDURE SingleEntryInCaptionSet@3();
    VAR
      DimensionValue@1002 : Record 349;
      FirstColumn@1004 : Text;
      LastColumn@1001 : Text;
      CaptionSet@1003 : ARRAY [32] OF Text[1024];
      DimensionCode@1000 : Code[20];
      Count@1012 : Integer;
    BEGIN
      // Verify filtered dimension values when applied filter allows only single entry

      InitDimensionValues(DimensionCode,Count,CaptionSet,FirstColumn,LastColumn);
      DimensionValue.SETRANGE("Dimension Code",DimensionCode);
      DimensionValue.FINDFIRST;
      VerifyDimToCaptions(DimensionValue.Name,1,DimensionCode,FirstColumn,LastColumn,'=' + DimensionValue.Code,CaptionSet);
    END;

    [Test]
    PROCEDURE MultipleEntriesInCaptionSet@2();
    VAR
      CaptionSet@1006 : ARRAY [32] OF Text[1024];
      Filter@1003 : Text[1024];
      FirstDimensionValue@1004 : Text[1024];
      LastDimensionValue@1005 : Text[1024];
      FirstColumn@1009 : Text;
      LastColumn@1008 : Text;
      DimensionCode@1002 : Code[20];
      Count@1000 : Integer;
      DimensionValueCount@1001 : Integer;
      ExpectedCaptionRange@1007 : Text[1024];
    BEGIN
      // Verify CaptionRange and NumberOfColumns initialization and CaptionSet filling on multiple DimensionValue.
      // But the number of DimensionValue does not exceed uppper bound of CaptionSet array

      InitDimensionValues(DimensionCode,Count,CaptionSet,FirstColumn,LastColumn);
      BuildDimensionValueFilter(DimensionValueCount,Filter,FirstDimensionValue,LastDimensionValue,Count,DimensionCode);
      ExpectedCaptionRange := COPYSTR(FirstDimensionValue + '..' + LastDimensionValue,1,1024);
      VerifyDimToCaptions(ExpectedCaptionRange,DimensionValueCount,DimensionCode,FirstColumn,LastColumn,Filter,CaptionSet);
    END;

    [Test]
    PROCEDURE ExtraEntriesInDimensionValues@4();
    VAR
      CaptionSet@1023 : ARRAY [32] OF Text[1024];
      FirstColumn@1002 : Text;
      LastColumn@1001 : Text;
      DimensionCode@1000 : Code[20];
      Count@1011 : Integer;
    BEGIN
      // Verify CaptionRange and NumberOfColumns initialization and CaptionSet filling on DimensionValue table.
      // The number of DimensionValue does not exceed uppper bound of CaptionSet array

      InitDimensionValues(DimensionCode,Count,CaptionSet,FirstColumn,LastColumn);
      VerifyDimToCaptions(
        CalcExpectedCaptionRange(CaptionSet,DimensionCode),
        ARRAYLEN(CaptionSet),DimensionCode,FirstColumn,LastColumn,'',CaptionSet);
    END;

    [Test]
    PROCEDURE DimensionTotaling@6();
    VAR
      TotalingDimValue@1006 : Record 349;
      CaptionSet@1004 : ARRAY [32] OF Text[1024];
      FirstColumn@1003 : Text;
      LastColumn@1002 : Text;
      DimensionCode@1001 : Code[20];
      Count@1000 : Integer;
    BEGIN
      // Verify that amount and drill down of G/L Budget Matrix page works correctly when using dimension for "Show as Columns" option

      InitDimensionValues(DimensionCode,Count,CaptionSet,FirstColumn,LastColumn);
      MakeDimTotaling(TotalingDimValue,DimensionCode);
      VerifyDimTotaling(
        DimensionCode,TotalingDimValue,FirstColumn,LastColumn,'',CaptionSet);
    END;

    [Test]
    PROCEDURE UTRoundValueRoundingFactorNone@18();
    VAR
      Value@1001 : Decimal;
    BEGIN
      // [FEATURE] [Rounding Factor] [UT]
      // [SCENARIO 362971] MatrixMgt.RoundValue function does not make any rounding for RoundingFactor::None. Value = 123.45678 is not rounded
      Value := LibraryRandom.RandDec(100,5);
      RoundValueWithRoundingFactor(
        Value,Value,RoundingFactorRef::None);
    END;

    [Test]
    PROCEDURE UTRoundValueRoundingFactor1@28();
    VAR
      Value@1001 : Decimal;
    BEGIN
      // [FEATURE] [Rounding Factor] [UT]
      // [SCENARIO 362971] MatrixMgt.RoundValue function makes rounding with presicion = 1 for RoundingFactor::"1". Value = 123.45678 is rounded to 123
      Value := LibraryRandom.RandDec(100,5);
      RoundValueWithRoundingFactor(
        ROUND(Value,1),Value,RoundingFactorRef::"1");
    END;

    [Test]
    PROCEDURE UTRoundValueRoundingFactor1000@29();
    VAR
      Value@1001 : Decimal;
    BEGIN
      // [FEATURE] [Rounding Factor] [UT]
      // [SCENARIO 362971] MatrixMgt.RoundValue function makes division by 1000 and rounding with presicion = 0.1 for RoundingFactor::"1000". Value = 12345.67891 is "rounded" to 12.3
      Value := LibraryRandom.RandDecInRange(10000,20000,5);
      RoundValueWithRoundingFactor(
        ROUND(Value / 1000,0.1),Value,RoundingFactorRef::"1000");
    END;

    [Test]
    PROCEDURE UTRoundValueRoundingFactor1000000@5();
    VAR
      Value@1001 : Decimal;
    BEGIN
      // [FEATURE] [Rounding Factor] [UT]
      // [SCENARIO 362971] MatrixMgt.RoundValue function makes division by 1000000 and rounding with presicion = 0.1 for RoundingFactor::"1000000". Value = 1234567.89123 is "rounded" to 1.2
      Value := LibraryRandom.RandIntInRange(1000000,2000000) + LibraryRandom.RandDec(1,5);
      RoundValueWithRoundingFactor(
        ROUND(Value / 1000000,0.1),Value,RoundingFactorRef::"1000000");
    END;

    [Test]
    PROCEDURE UTFormatValueRoundingFactorNone@13();
    VAR
      Value@1000 : Decimal;
    BEGIN
      // [FEATURE] [Rounding Factor] [UT]
      // [SCENARIO 362971] MatrixMgt.FormatValue returns value with format based on GLSetup."Amount Decimal Places" for RoundingFactor::None. Value = 123.45678 converted to '123,46' when GLSetup."Amount Decimal Places" = 2:2
      Value := LibraryRandom.RandDec(100,5);
      FormatValueWithRoundingFactor(
        FORMAT(Value,0,LibraryAccSchedule.GetAutoFormatString),Value,RoundingFactorRef::None,FALSE);
    END;

    [Test]
    PROCEDURE UTFormatZeroValueRoundingFactorNone@123();
    BEGIN
      // [FEATURE] [Rounding Factor] [UT]
      // [SCENARIO 362971] MatrixMgt.FormatValue returns empty string for Value = 0 for RoundingFactor::None.
      FormatValueWithRoundingFactor('',0,RoundingFactorRef::None,FALSE);
    END;

    [Test]
    PROCEDURE UTFormatValueAddCurrencyRoundingFactorNone@11();
    VAR
      Decimals@1001 : Integer;
      Value@1000 : Decimal;
      IntPart@1003 : Decimal;
      ExpectedValue@1002 : Text;
    BEGIN
      // [FEATURE] [Rounding Factor] [UT]
      // [SCENARIO 362971] MatrixMgt.FormatValue returns Decimals according to AdditionalCurrency."Amount Decimal Places" for RoundingFactor::None.
      Decimals := LibraryRandom.RandIntInRange(5,7);
      Value := LibraryRandom.RandDec(100,Decimals);
      SetAddCurrency(CreateCurrencyWithDecimals(Decimals));

      IntPart := ROUND(Value,1,'<');
      ExpectedValue :=
        FORMAT(IntPart) + COPYSTR(FORMAT(Value - IntPart,0,LibraryAccSchedule.GetCustomFormatString(FORMAT(Decimals))),2);

      FormatValueWithRoundingFactor(
        ExpectedValue,Value,RoundingFactorRef::None,TRUE);
    END;

    [Test]
    PROCEDURE UTFormatValueRoundingFactor1@91();
    VAR
      Value@1000 : Decimal;
    BEGIN
      // [FEATURE] [Rounding Factor] [UT]
      // [SCENARIO 362971] MatrixMgt.FormatValue returns value without decimals for RoundingFactor::1. Value = 123.45678 converted to '123'
      Value := LibraryRandom.RandDec(100,5);
      FormatValueWithRoundingFactor(
        FORMAT(ROUND(Value,1)),Value,RoundingFactorRef::"1",FALSE);
    END;

    [Test]
    PROCEDURE UTFormatValueRoundingFactor1000@92();
    VAR
      Value@1000 : Decimal;
    BEGIN
      // [FEATURE] [Rounding Factor] [UT]
      // [SCENARIO 362971] MatrixMgt.FormatValue returns value divided by 1000 with 1 decimal for RoundingFactor::1000. Value = 12345.67891 converted to '12,3'
      Value := LibraryRandom.RandDecInRange(10000,20000,5);

      FormatValueWithRoundingFactor(
        FORMAT(Value / 1000,0,LibraryAccSchedule.GetCustomFormatString('1')),Value,RoundingFactorRef::"1000",FALSE);
    END;

    [Test]
    PROCEDURE UTFormatValueRoundingFactor1000WithLastSymbZero@8();
    VAR
      MatrixMgt@1001 : Codeunit 9200;
      Value@1000 : Decimal;
      ZeroValue@1003 : Decimal;
      ZeroDecimalTxt@1002 : Text;
    BEGIN
      // [FEATURE] [Rounding Factor] [UT]
      // [SCENARIO 362971] MatrixMgt.FormatValue returns value divided by 1000 with ',0' for RoundingFactor::1000 if rounded value is ended with Zero. Value = 12000 converted to '12,0'
      Value := LibraryRandom.RandIntInRange(10,20) * 1000;
      ZeroValue := 0;
      ZeroDecimalTxt := COPYSTR(FORMAT(ZeroValue,0,LibraryAccSchedule.GetCustomFormatString('1')),2);
      Assert.IsTrue(
        STRPOS(MatrixMgt.FormatValue(Value,RoundingFactorRef::"1000",FALSE),ZeroDecimalTxt) > 0,
        STRSUBSTNO(WrongFormatValueErr,RoundingFactorRef::"1000"));
    END;

    [Test]
    PROCEDURE UTFormatValueRoundingFactor1000000@93();
    VAR
      Value@1000 : Decimal;
    BEGIN
      // [FEATURE] [Rounding Factor] [UT]
      // [SCENARIO 362971] MatrixMgt.FormatValue returns value divided by 1000000 with 1 decimal for RoundingFactor::1000000. Value = 1234567.89123 converted to '1,2'
      Value := LibraryRandom.RandIntInRange(1000000,2000000) + LibraryRandom.RandDec(1,5);
      FormatValueWithRoundingFactor(
        FORMAT(Value / 1000000,0,LibraryAccSchedule.GetCustomFormatString('1')),Value,RoundingFactorRef::"1000000",FALSE);
    END;

    LOCAL PROCEDURE RoundValueWithRoundingFactor@19(ExpectedValue@1002 : Decimal;Value@1000 : Decimal;RoundingFactor@1001 : Option);
    VAR
      MatrixMgt@1003 : Codeunit 9200;
    BEGIN
      Assert.AreEqual(
        ExpectedValue,
        MatrixMgt.RoundValue(Value,RoundingFactor),
        STRSUBSTNO(WrongRoundedValueErr,RoundingFactor));
    END;

    LOCAL PROCEDURE FormatValueWithRoundingFactor@66(ExpectedValue@1002 : Text;Value@1000 : Decimal;RoundingFactor@1001 : Option;AddCurrency@1003 : Boolean);
    VAR
      MatrixMgt@1004 : Codeunit 9200;
    BEGIN
      Assert.AreEqual(
        ExpectedValue,
        MatrixMgt.FormatValue(Value,RoundingFactor,AddCurrency),
        STRSUBSTNO(WrongFormatValueErr,RoundingFactor));
    END;

    LOCAL PROCEDURE VerifyDimToCaptions@9(ExpectedCaptionRange@1013 : Text[1024];ExpectedNumberOfColumns@1000 : Integer;DimensionCode@1007 : Code[20];FirstColumn@1002 : Text;LastColumn@1005 : Text;DimensionValueFilter@1015 : Text[1024];VAR CaptionSet@1001 : ARRAY [32] OF Text[1024]);
    VAR
      DimensionCodeBuffer@1010 : ARRAY [32] OF Record 367;
      MatrixManagement@1009 : Codeunit 9200;
      CaptionRange@1004 : Text[1024];
      NumberOfColumns@1003 : Integer;
    BEGIN
      MatrixManagement.DimToCaptions(
        CaptionSet,DimensionCodeBuffer,DimensionCode,FirstColumn,LastColumn,
        NumberOfColumns,TRUE,CaptionRange,DimensionValueFilter);

      Assert.AreEqual(ExpectedCaptionRange,CaptionRange,WrongCaptionRangeMsg);
      Assert.AreEqual(ExpectedNumberOfColumns,NumberOfColumns,WrongNumberOfColumnsMsg);
    END;

    LOCAL PROCEDURE VerifyDimTotaling@24(DimensionCode@1004 : Code[20];TotalingDimValue@1011 : Record 349;FirstColumn@1003 : Text;LastColumn@1002 : Text;DimensionValueFilter@1001 : Text[1024];CaptionSet@1000 : ARRAY [32] OF Text[1024]);
    VAR
      DimensionCodeBuffer@1008 : ARRAY [32] OF Record 367;
      MatrixManagement@1007 : Codeunit 9200;
      CaptionRange@1006 : Text[1024];
      NumberOfColumns@1005 : Integer;
      i@1010 : Integer;
    BEGIN
      MatrixManagement.DimToCaptions(
        CaptionSet,DimensionCodeBuffer,DimensionCode,FirstColumn,LastColumn,
        NumberOfColumns,TRUE,CaptionRange,DimensionValueFilter);
      REPEAT
        i += 1;
      UNTIL (DimensionCodeBuffer[i].Code = TotalingDimValue.Code) OR (i = ARRAYLEN(DimensionCodeBuffer));

      Assert.AreEqual(TotalingDimValue.Totaling,DimensionCodeBuffer[i].Totaling,WrongDimTotalingErr);
    END;

    LOCAL PROCEDURE InitDimensionValues@15(VAR DimensionCode@1004 : Code[20];VAR Count@1010 : Integer;VAR CaptionSet@1000 : ARRAY [32] OF Text[1024];VAR FirstColumn@1002 : Text;VAR LastColumn@1001 : Text);
    VAR
      DimensionValue@1009 : Record 349;
      Dimension@1008 : Record 348;
      Index@1006 : Integer;
    BEGIN
      CLEAR(CaptionSet);
      Count := ARRAYLEN(CaptionSet) + 1;
      FirstColumn := 'GU';
      LastColumn := 'GU' + PADSTR('9',9,'9');

      LibraryDimension.CreateDimension(Dimension);
      DimensionCode := Dimension.Code;

      FOR Index := 1 TO Count DO BEGIN
        LibraryDimension.CreateDimensionValue(DimensionValue,DimensionCode);
        DimensionValue.VALIDATE(Name,PADSTR('x',Index,'x'));
        DimensionValue.MODIFY(TRUE);
        IF Index <= ARRAYLEN(CaptionSet) THEN
          CaptionSet[Index] := '';
      END;
    END;

    LOCAL PROCEDURE BuildDimensionValueFilter@10(VAR DimensionValueCount@1001 : Integer;VAR Filter@1004 : Text[1024];VAR FirstDimValue@1009 : Text[1024];VAR LastDimValue@1010 : Text[1024];Count@1003 : Integer;DimensionCode@1002 : Code[20]);
    VAR
      DimensionValue@1000 : Record 349;
      Step@1005 : Integer;
      Index@1008 : Integer;
    BEGIN
      DimensionValueCount := LibraryRandom.RandIntInRange(3,7);
      Step := Count DIV DimensionValueCount;

      DimensionValue.SETRANGE("Dimension Code",DimensionCode);
      DimensionValue.FINDSET;

      FirstDimValue := DimensionValue.Name;

      Filter := DimensionValue.Code;
      FOR Index := 2 TO DimensionValueCount DO BEGIN
        DimensionValue.NEXT(LibraryRandom.RandInt(Step));
        IF STRLEN(Filter) + STRLEN(DimensionValue.Code) < MAXSTRLEN(Filter) THEN BEGIN
          Filter += '|' + DimensionValue.Code;
          LastDimValue := DimensionValue.Name;
        END;
      END;
    END;

    LOCAL PROCEDURE CalcExpectedCaptionRange@67(CaptionSet@1002 : ARRAY [32] OF Text[1024];DimensionCode@1001 : Code[20]) ExpectedCaptionRange : Text[1024];
    VAR
      DimensionValue@1000 : Record 349;
    BEGIN
      DimensionValue.SETRANGE("Dimension Code",DimensionCode);
      DimensionValue.FINDSET;
      ExpectedCaptionRange := DimensionValue.Name;
      DimensionValue.NEXT(ARRAYLEN(CaptionSet) - 1);
      ExpectedCaptionRange += '..' + DimensionValue.Name;
    END;

    LOCAL PROCEDURE MakeDimTotaling@20(VAR TotalingDimValue@1005 : Record 349;DimensionCode@1000 : Code[20]);
    VAR
      DimensionValue@1001 : Record 349;
      DimValueCode@1003 : ARRAY [2] OF Code[20];
      i@1002 : Integer;
    BEGIN
      TotalingDimValue.SETRANGE("Dimension Code",DimensionCode);
      TotalingDimValue.FINDFIRST;

      DimensionValue.COPY(TotalingDimValue);
      FOR i := 1 TO ARRAYLEN(DimValueCode) DO BEGIN
        DimensionValue.NEXT;
        DimValueCode[i] := DimensionValue.Code;
      END;

      TotalingDimValue.VALIDATE("Dimension Value Type",TotalingDimValue."Dimension Value Type"::Total);
      TotalingDimValue.VALIDATE(Totaling,STRSUBSTNO(DimTotalingTxt,DimValueCode[1],DimValueCode[2]));
      TotalingDimValue.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCurrencyWithDecimals@17(Decimals@1003 : Integer) : Code[10];
    VAR
      Currency@1002 : Record 4;
    BEGIN
      WITH Currency DO BEGIN
        LibraryERM.CreateCurrency(Currency);
        "Amount Decimal Places" := FORMAT(Decimals);
        MODIFY;
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE SetAddCurrency@27(AddCurrencyCode@1000 : Code[10]);
    VAR
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      WITH GeneralLedgerSetup DO BEGIN
        GET;
        "Additional Reporting Currency" := AddCurrencyCode;
        MODIFY;
      END;
    END;

    BEGIN
    {
      // [FEATURE] [Matrix]
      Cover Test cases:
      ---------------------------------------------------------------------
      Test Function Name                                             TFS ID
      ---------------------------------------------------------------------
      EmptyCaptionSet                                                49469,51573
      MultipleEntriesInCaptionSet                                    49469,51573
      SingleEntryInCaptionSet                                        49469,51573
      ExtraEntriesInDimensionValues                                  49469,51573
      DimensionTotaling                                              355561
    }
    END.
  }
}

