OBJECT Codeunit 134450 ERM Fixed Assets Journal
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 5629=rimd;
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1010 : Codeunit 130000;
      LibraryFixedAsset@1004 : Codeunit 131330;
      LibraryERM@1003 : Codeunit 131300;
      LibraryInventory@1029 : Codeunit 132201;
      LibraryPurchase@1027 : Codeunit 130512;
      LibrarySales@1028 : Codeunit 130509;
      LibraryUtility@1018 : Codeunit 131000;
      LibraryVariableStorage@1002 : Codeunit 131004;
      LibraryRandom@1001 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      AllowCorrectionErr@1017 : TextConst '@@@=%1: Field Name,%2: Record Value;ENU="%1 must have a value in Depreciation Book: Code=%2. It cannot be zero or empty."';
      CopyFixedAssetErr@1007 : TextConst '@@@=%1: Fixed Assets Names,%2: Fixed Assets Names;ENU=%1 must be equal to %2.';
      FAAllocationErr@1005 : TextConst 'ENU=Number of FA Allocation must be equal.';
      GLAccountBlockErr@1009 : TextConst '@@@=Field Name and Record Values;ENU="%1 must be equal to ''No''  in %2: %3=%4. Current value is ''Yes''."';
      NoSeriesErr@1006 : TextConst '@@@=No Series Name;ENU=Only the %1 field can be filled in on recurring journals.';
      FAPostingDateErr@1021 : TextConst '@@@=Entered Date And Date Range;ENU="%1 is not within your range of allowed posting dates in %2 %3=''%4'',%5=''%6'',%7=''%8''."';
      FADisposalErr@1022 : TextConst '@@@=Disposal Amount and  Fixed Asset No;ENU="Disposal must not be positive on %1 for Fixed Asset No. = %2 in %3 = %4."';
      FAAcquisitionErr@1026 : TextConst '@@@=Acquisition Cost And Journal batch,template and line no;ENU="%1 Acquisition Cost must be posted in the FA journal in %2 %3=''%4'',%5=''%6'',Line No.=''%7''."';
      ReversalErr@1012 : TextConst 'ENU=Maintenance Ledger Entry was not reversed properly.';
      DepreciationMethodErr@1011 : TextConst '@@@=Depreciation Method name and required values;ENU="%1 must not be %2 in %3 %4=''%5'',%6=''%7''."';
      IndexAmountErr@1013 : TextConst '@@@=Present Value;ENU=%1 must be equal.';
      UnknownErr@1008 : TextConst 'ENU=Unknown Error.';
      DisposeMainAssetErr@1015 : TextConst '@@@=Main Asset Name;ENU=You cannot dispose Main Asset %1 until Components are disposed.';
      FAJournlLineErr@1024 : TextConst '@@@=Fa Journal Line;ENU=%1 must be blank.';
      TemplateSelectionErr@1023 : TextConst '@@@=FA Journal Record;ENU=Template must exits in %1.';
      ExpectedBatchErr@1016 : TextConst '@@@=Required Batch Name;ENU=Batch must be same as of %1.';
      FAJnlTemplateNameRecurringLbl@1025 : TextConst 'ENU=Recurring';
      FAJnlTemplateDescRecJnlLbl@1020 : TextConst 'ENU=Recurring Fixed Asset Journal';
      FAJnlTemplateNameAssetsLbl@1019 : TextConst '@@@=ASSETS is the name of FA Journal Template.;ENU=ASSETS';
      FAJnlTemplateDescFAJnlLbl@1014 : TextConst 'ENU=Fixed Asset Journal';

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateFAPostingGroup;
      LibraryERMCountryData.CreateNewFiscalYear;
      LibraryERMCountryData.UpdateVATPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateAccountInCustomerPostingGroup;
      LibraryFixedAsset.CreateFAIncomeTaxAccPeriod(WORKDATE);
      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE AppreciationFixedAsset@46();
    VAR
      DepreciationBook@1006 : Record 5611;
      GenJournalLine@1005 : Record 81;
      FixedAsset@1004 : Record 5600;
      FADepreciationBook@1003 : Record 5612;
      FAJournalLine@1002 : Record 5621;
      FAGetBalanceAccount@1000 : Codeunit 5603;
    BEGIN
      // Test the Appreciation of Fixed Assets.

      // 1.Setup: Create Fixed Asset, FA Acquisition, FA Journal Line and Insert FA Bal Account.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type",FAJournalLine."FA Posting Type");
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);
      CreateFAGLJournal(
        GenJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        GenJournalLine."FA Posting Type"::Appreciation);

      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");
      UpdateAppreciationAccount(FixedAsset."FA Posting Group");
      GenJournalLine.SETRANGE("Account No.",GenJournalLine."Account No.");
      FAGetBalanceAccount.InsertAcc(GenJournalLine); // Insert FA Bal Account.

      // 2.Exercise: Post FA G/L Line.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3.Verify: Verify Amount on FA Ledger Entry Correctly Populated.
      VerifyAmountInFATransaction(FixedAsset."No.",FAJournalLine."FA Posting Type"::Appreciation);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CancelFALedgerEntries@14();
    VAR
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1009 : Record 5612;
      FAJournalLine@1008 : Record 5621;
      FixedAsset@1004 : Record 5600;
      FALedgerEntry@1011 : Record 5601;
      CancelFALedgEntries@1013 : Codeunit 5624;
    BEGIN
      // Test the Cancelation of FA Ledger Entries.

      // 1.Setup: Create Fixed Asset, FA Journal Line, Post FA Journal line and Create FA Journal Setup.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type",FAJournalLine."FA Posting Type");
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);
      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");

      // 2.Exercise: Cancel FA Ledger Entries.
      FALedgerEntry.SETRANGE("FA No.",FixedAsset."No.");
      FALedgerEntry.FINDLAST;
      CancelFALedgEntries.TransferLine(FALedgerEntry,FALSE,0D);

      // 3.Verify: Verify that the Cancel FA Ledger Entries No. exist in Gen Journal Line.
      VerifyCancelFALedgerEntry(FALedgerEntry);
    END;

    [Test]
    PROCEDURE CopyFixedAssets@6();
    VAR
      DepreciationBook@1004 : Record 5611;
      FixedAsset@1000 : Record 5600;
      FADepreciationBook@1001 : Record 5612;
      NoOfFixedAssetCopied@1005 : Integer;
      FixedAssetCount@1008 : Integer;
    BEGIN
      // Test the Copy Fixed Assets functionality.

      // 1.Setup: Create Fixed Asset, FA Posting Group, FA Depreciation Book.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      FixedAssetCount := FixedAsset.COUNT;
      NoOfFixedAssetCopied := LibraryRandom.RandInt(10);  // Using Random Generator to Copy the Number of Fixed Asset.

      // 2.Exercise: Run the Copy Fixed Assets.
      RunCopyFixedAsset(FixedAsset,NoOfFixedAssetCopied);

      // 3.Verify: New count of Fixed Asset should be Equal to total of Previous Fixed Asset count and No of fixed assets copied.
      Assert.AreEqual(FixedAssetCount + NoOfFixedAssetCopied,FixedAsset.COUNT,CopyFixedAssetErr);
    END;

    [Test]
    PROCEDURE CopyDepreciationBookEntries@39();
    VAR
      FADepreciationBook@1006 : Record 5612;
      FAJournalLine@1005 : Record 5621;
      FixedAsset@1004 : Record 5600;
      DepreciationBook@1008 : Record 5611;
      Amount@1000 : Decimal;
    BEGIN
      // Test Copy FA Ledger Entries from Depreciation Book.

      // 1.Setup: Create Fixed Asset, FA Journal Line, Post FA Journal, Create a new Depreciation Book.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type",FAJournalLine."FA Posting Type");
      Amount := FAJournalLine.Amount;

      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);
      CreateJournalSetupDepreciation(DepreciationBook);

      // 2.Exercise: Run Copy Depreciation Book.
      RunCopyDepreciationBook(FixedAsset."No.",FADepreciationBook."Depreciation Book Code",DepreciationBook.Code,TRUE);

      // 3.Verify: Verify Amoount in FA Journal Line.
      VerifyAmountInFAJournalLine(FixedAsset."No.",DepreciationBook.Code,Amount);
    END;

    [Test]
    PROCEDURE CopyDepreciationBook@47();
    VAR
      FADepreciationBook@1004 : Record 5612;
      FixedAsset@1002 : Record 5600;
      DepreciationBook@1000 : Record 5611;
    BEGIN
      // Test Copy Depreciation Book.

      // 1.Setup: Create Fixed Asset, FA Posting Group, FA Journal Line, Post the FA Journal, Create a new Depreciation Book.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      CreateJournalSetupDepreciation(DepreciationBook);

      // 2.Exercise: Run Copy Depreciation Book.
      RunCopyDepreciationBook(FixedAsset."No.",FADepreciationBook."Depreciation Book Code",DepreciationBook.Code,FALSE);

      // 3. Verify: Verify New Depreciation Book is attached with Fixed Asset.
      VerifyDepreciationBookAttached(FixedAsset."No.",DepreciationBook.Code);
    END;

    [Test]
    PROCEDURE DepreciationBalanceAccount@10();
    BEGIN
      // Test the Calculate Depreciation with Bal Account.
      DepreciationWithFixedAsset(TRUE);
    END;

    [Test]
    PROCEDURE PostFAGLJournalNonLinearDepreciationMethod@163();
    VAR
      FixedAsset@1000 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FAJournalLine@1003 : Record 5621;
    BEGIN
      Initialize;

      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      UpdateDepreciationMethod(FADepreciationBook);

      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type",FAJournalLine."FA Posting Type");
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");

      // 2.Exercise: Run the Calculate Depreciation and post FA Journal Line.
      DeleteGeneralJournalLine(FADepreciationBook."Depreciation Book Code");
      RunCalculateDepreciation(FixedAsset."No.",FADepreciationBook."Depreciation Book Code",TRUE);
      PostDepreciationWithDocumentNo(FADepreciationBook."Depreciation Book Code");

      // 3.Verify: Verify FA Ledger Entry for Depreciation.
      VerifyDepreciationFALedger(FixedAsset."No.",DepreciationBook.Code);
    END;

    [Test]
    PROCEDURE DepreciationWOBalanceAccount@12();
    BEGIN
      // Test the Calculate Depreciation without Bal Account.
      DepreciationWithFixedAsset(FALSE);
    END;

    [Test]
    PROCEDURE FAAllocation@20();
    VAR
      FAPostingGroup@1005 : Record 5606;
      FAAllocation@1015 : Record 5615;
      FAEntriesCreated@1000 : Integer;
    BEGIN
      // Test the FA Allocation.

      // 1.Setup: Create FA Posting Group.
      Initialize;
      LibraryFixedAsset.CreateFAPostingGroup(FAPostingGroup);

      // 2.Exercise: Create FA Allocation.
      FAEntriesCreated := CreateFAAllocation(FAAllocation,FAPostingGroup.Code);

      // 3.Verify: Verify the line in FA allocation created for FA Posting Group.
      CountFAAllocationEntries(FAPostingGroup.Code,FAEntriesCreated);
    END;

    [Test]
    PROCEDURE FixedAssetPurchaseInvoice@18();
    VAR
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Test the Purchase of Fixed Assets from Invoice ,Test the FA Ledger Entries

      // 1.Setup: Create Fixed Asset and Post Purchase Invoice.
      Initialize;
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine);

      // 2.Verify: Verify that Line Amount and Fixed Asset No. in Purchase Invoice Line.
      VerifyPurchaseInvoiceLine(PurchaseHeader,PurchaseLine."No.",PurchaseLine."Line Amount");
    END;

    [Test]
    PROCEDURE FixedAssetIndexation@52();
    VAR
      DepreciationBook@1000 : Record 5611;
      FixedAsset@1004 : Record 5600;
      FADepreciationBook@1003 : Record 5612;
      FAJournalLine@1002 : Record 5621;
    BEGIN
      // Test the Indexation of a Fixed Asset.

      // 1.Setup: Create Fixed Asset, FA Journal line, FA Posting Group, FA Depreciation Book.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type",FAJournalLine."FA Posting Type");
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");
      AcquisitionCostBalanceAccount(FixedAsset."FA Posting Group");

      // 2.Exercise: Run Index Fixed Assets.
      RunIndexFixedAssets(FixedAsset."No.",FADepreciationBook."Depreciation Book Code");

      // 3.Verify: Verify the FA G/L Journal entries Created for Fixed asset with index Entry marked as True.
      VerifyIndexationEntry(FixedAsset."No.");
    END;

    [Test]
    PROCEDURE PostFixedAssetJournal@2();
    VAR
      DepreciationBook@1004 : Record 5611;
      FixedAsset@1000 : Record 5600;
      FADepreciationBook@1001 : Record 5612;
      FAJournalLine@1002 : Record 5621;
      TempFAJournalLine@1003 : TEMPORARY Record 5621;
    BEGIN
      // Test the Posting of FA Journal line.

      // 1.Setup: Create Fixed Asset and FA Journal Line.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type",FAJournalLine."FA Posting Type");
      CopyFAJournalLine(TempFAJournalLine,FAJournalLine);

      // 2.Exercise: Post FA Journal Line.
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      // 3.Verify: Verify that Document Type, Fixed Asset No, FA Posting Type and Amount on FA Ledger Entry Correctly Populated.
      VerifyValuesInFALedgerEntry(TempFAJournalLine);
    END;

    [Test]
    PROCEDURE PartialDisposalOfFA@61();
    VAR
      DepreciationBook@1001 : Record 5611;
      FAJournalLine@1007 : Record 5621;
      FixedAsset@1004 : Record 5600;
      FADepreciationBook@1003 : Record 5612;
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
    BEGIN
      // Test the Partial Disposal of an Asset Functionality.

      // 1.Setup: Create Fixed Asset, FA Acquisition, Sales Header and Create Sales Line.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      AcquisitionCostBalanceAccount(FixedAsset."FA Posting Group");
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type",FAJournalLine."FA Posting Type");
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");
      CreateSalesOrder(SalesHeader,SalesLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code");

      // 2.Exercise: Post Sales Order.
      LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE);

      // 3.Verify: The amount in FA ledger Entry.
      VerifyDisposalAmount(SalesLine);
    END;

    [Test]
    PROCEDURE PostFAGLJournal@35();
    VAR
      DepreciationBook@1004 : Record 5611;
      FixedAsset@1003 : Record 5600;
      FADepreciationBook@1002 : Record 5612;
      GenJournalLine@1000 : Record 81;
      FALedgerEntry@1001 : Record 5601;
    BEGIN
      // Test the posting of FA G/L Journal.

      // 1.Setup: Create Fixed Asset, FA Posting Group, FA Depreciation Book and FA G/L Journal Line.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateFAGLJournal(
        GenJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        GenJournalLine."FA Posting Type"::"Acquisition Cost");

      BalanceAccountFAGLJournalLine(GenJournalLine);
      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");

      // 2.Exercise: Post FA G/L Journal.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3.Verify: Verify the Amount on FA Ledger Entry for Fixed Asset.
      VerifyAmountInFAEntry(FixedAsset."No.",FALedgerEntry."FA Posting Type"::"Acquisition Cost",GenJournalLine.Amount);
    END;

    [Test]
    PROCEDURE SetupDepreciationBook@45();
    VAR
      DepreciationBook@1000 : Record 5611;
    BEGIN
      // Test the Creation of New Depreciation Book.

      // 1.Setup:
      Initialize;

      // 2.Exercise: Create Depreciation Book, Create FA Journal Setup.
      CreateJournalSetupDepreciation(DepreciationBook);

      // 3.Verify: Verify the New depreciation Book Created.
      DepreciationBook.GET(DepreciationBook.Code);
    END;

    [Test]
    PROCEDURE WriteDownFixedAsset@36();
    VAR
      DepreciationBook@1007 : Record 5611;
      GenJournalLine@1006 : Record 81;
      FixedAsset@1005 : Record 5600;
      FADepreciationBook@1004 : Record 5612;
      FAJournalLine@1003 : Record 5621;
      FAGetBalanceAccount@1001 : Codeunit 5603;
      GenJournalLineAmount@1000 : Decimal;
    BEGIN
      // Test the Write-Down of Fixed Assets.

      // 1.Setup: Create Fixed Asset, FA Acquisition, FA Journal, FA G/L Journal and Insert FA Bal Account.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type",FAJournalLine."FA Posting Type" );

      GenJournalLineAmount := FAJournalLine.Amount;
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);
      CreateFAGLJournal(
        GenJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        GenJournalLine."FA Posting Type"::"Write-Down");

      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");
      UpdateWriteDownAmount(GenJournalLine,GenJournalLineAmount);
      UpdateWriteDownAccount(FixedAsset."FA Posting Group");
      GenJournalLine.SETRANGE("Account No.",GenJournalLine."Account No.");
      FAGetBalanceAccount.InsertAcc(GenJournalLine);  // Insert FA Bal Account.

      // 2.Exercise: Post FA G/L Journal Line.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3.Verify: Verify that Amount on FA Ledger Entry Correctly Populated.
      VerifyAmountInFATransaction(FixedAsset."No.",FAJournalLine."FA Posting Type"::"Write-Down");
    END;

    [Test]
    PROCEDURE InputBalanceAccount@3();
    VAR
      DepreciationBook@1000 : Record 5611;
      GenJournalLine@1006 : Record 81;
      GenJournalLine2@1007 : Record 81;
      FixedAsset@1005 : Record 5600;
      FADepreciationBook@1004 : Record 5612;
      FAJournalLine@1003 : Record 5621;
      FAPostingGroup@1002 : Record 5606;
      FAGetBalanceAccount@1001 : Codeunit 5603;
    BEGIN
      // Test Balance Account Correctly Inserted.

      // 1.Setup: Create Fixed Asset, FA Acquisition, FA Journal, FA G/L Journal.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type",FAJournalLine."FA Posting Type");
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      CreateFAGLJournal(
        GenJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        GenJournalLine."FA Posting Type"::"Write-Down");
      UpdateWriteDownAccount(FixedAsset."FA Posting Group");

      // 2.Exercise: Insert FA Bal Account
      GenJournalLine.SETRANGE("Account No.",GenJournalLine."Account No.");
      FAGetBalanceAccount.InsertAcc(GenJournalLine);

      // 3.Verify: Verify that Balance Account Correctly Inserted.
      FAPostingGroup.GET(FixedAsset."FA Posting Group");
      GenJournalLine2.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
      GenJournalLine2.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
      GenJournalLine2.FINDLAST;
      GenJournalLine2.TESTFIELD("Account No.",FAPostingGroup."Write-Down Account");
    END;

    [Test]
    PROCEDURE SetupInsuranceBook@71();
    VAR
      FASetup@1000 : Record 5603;
      OldInsuranceDeprBookValue@1001 : Code[10];
    BEGIN
      // Test Insurance Depreciation Book updated in Fixed Asset Setup.

      // 1. Setup:
      Initialize;
      FASetup.GET;
      OldInsuranceDeprBookValue := FASetup."Insurance Depr. Book";

      // 2. Exercise: Update Insurance Depreciation Book.
      UpdateInsuranceBook(FASetup,'');
      UpdateDefaultDepreciationBook(FASetup);

      // 3. Verify: Check Setup fields are non blank.
      FASetup.TESTFIELD("Insurance Depr. Book",FASetup."Default Depr. Book");

      // 4. Tear Down: Assign back Old Value of Insurance Depreciation Book.
      UpdateInsuranceBook(FASetup,OldInsuranceDeprBookValue);
    END;

    [Test]
    PROCEDURE CreatePostingGroup@44();
    VAR
      FAPostingGroup@1000 : Record 5606;
      FASubclass@1001 : Record 5608;
    BEGIN
      // Test Fixed Asset Posting Group.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Fixed Asset Posting Group and Sub Class.
      LibraryFixedAsset.CreateFAPostingGroup(FAPostingGroup);
      LibraryFixedAsset.CreateFASubclass(FASubclass);

      // 3. Verify: Check FA Posting Group and Sub Class generated.
      FAPostingGroup.GET(FAPostingGroup.Code);
      FASubclass.GET(FASubclass.Code);
    END;

    [Test]
    PROCEDURE AcquisitionCostAccount@73();
    VAR
      FAPostingGroup@1000 : Record 5606;
      GLAccount@1002 : Record 15;
      GLAccountNo@1003 : Code[20];
    BEGIN
      // Test Error Occurs on updating Acquisition Cost Account in FA Posting Group.

      // 1. Setup: Create FA Posting Group and GL Account.
      Initialize;
      LibraryFixedAsset.CreateFAPostingGroup(FAPostingGroup);
      GLAccountNo := CreateBlockedGLAccount;

      // 2. Exercise: Update Acquisition Cost Account.
      ASSERTERROR FAPostingGroup.VALIDATE("Acquisition Cost Account",GLAccountNo);

      // 3. Verify: Check Application throws an Error while updating Block Account.
      Assert.AreEqual(
        STRSUBSTNO(GLAccountBlockErr,GLAccount.FIELDNAME(Blocked),GLAccount.TABLENAME,GLAccount.FIELDNAME("No."),GLAccountNo),
        GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE AccumulatedDepreciationAccount@81();
    VAR
      FAPostingGroup@1000 : Record 5606;
      GLAccount@1002 : Record 15;
      GLAccountNo@1003 : Code[20];
    BEGIN
      // Test Error Occurs on updating Accumulated Depreciation Account in FA Posting Group.

      // 1. Setup: Create FA Posting Group and GL Account.
      Initialize;
      LibraryFixedAsset.CreateFAPostingGroup(FAPostingGroup);
      GLAccountNo := CreateBlockedGLAccount;

      // 2. Exercise: Update Accumulated Depreciation Account.
      ASSERTERROR FAPostingGroup.VALIDATE("Accum. Depreciation Account",GLAccountNo);

      // 3. Verify: Check Application throws an Error while updating Block Account.
      Assert.AreEqual(
        STRSUBSTNO(GLAccountBlockErr,GLAccount.FIELDNAME(Blocked),GLAccount.TABLENAME,GLAccount.FIELDNAME("No."),GLAccountNo),
        GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE CostAcquisitionDisposal@87();
    VAR
      FAPostingGroup@1000 : Record 5606;
      GLAccount@1002 : Record 15;
      GLAccountNo@1003 : Code[20];
    BEGIN
      // Test Error Occurs on updating Acquisition Cost Account on Disposal in FA Posting Group.

      // 1. Setup: Create FA Posting Group and GL Account.
      Initialize;
      LibraryFixedAsset.CreateFAPostingGroup(FAPostingGroup);
      GLAccountNo := CreateBlockedGLAccount;

      // 2. Exercise: Update Acquisition Cost Account.
      ASSERTERROR FAPostingGroup.VALIDATE("Acq. Cost Acc. on Disposal",GLAccountNo);

      // 3. Verify: Check Application throws an Error while updating Block Account.
      Assert.AreEqual(
        STRSUBSTNO(GLAccountBlockErr,GLAccount.FIELDNAME(Blocked),GLAccount.TABLENAME,GLAccount.FIELDNAME("No."),GLAccountNo),
        GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE AccumulatedDisposalAccount@93();
    VAR
      FAPostingGroup@1000 : Record 5606;
      GLAccount@1002 : Record 15;
      GLAccountNo@1003 : Code[20];
    BEGIN
      // Test Error Occurs on updating Accumulated Depreciation Account on Disposal in FA Posting Group.

      // 1. Setup: Create FA Posting Group and GL Account.
      Initialize;
      LibraryFixedAsset.CreateFAPostingGroup(FAPostingGroup);
      GLAccountNo := CreateBlockedGLAccount;

      // 2. Exercise: Update Accumulated Depreciation Account on Disposal.
      ASSERTERROR FAPostingGroup.VALIDATE("Accum. Depr. Acc. on Disposal",GLAccountNo);

      // 3. Verify: Check Application throws an Error while updating Block Account.
      Assert.AreEqual(
        STRSUBSTNO(GLAccountBlockErr,GLAccount.FIELDNAME(Blocked),GLAccount.TABLENAME,GLAccount.FIELDNAME("No."),GLAccountNo),
        GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE GainsDisposalAccount@98();
    VAR
      FAPostingGroup@1000 : Record 5606;
      GLAccount@1002 : Record 15;
      GLAccountNo@1003 : Code[20];
    BEGIN
      // Test Error Occurs on updating Gains Account on Disposal in FA Posting Group.

      // 1. Setup: Create FA Posting Group and GL Account.
      Initialize;
      LibraryFixedAsset.CreateFAPostingGroup(FAPostingGroup);
      GLAccountNo := CreateBlockedGLAccount;

      // 2. Exercise: Update Gains Account on Disposal.
      ASSERTERROR FAPostingGroup.VALIDATE("Gains Acc. on Disposal",GLAccountNo);

      // 3. Verify: Check Application throws an Error while updating Block Account.
      Assert.AreEqual(
        STRSUBSTNO(GLAccountBlockErr,GLAccount.FIELDNAME(Blocked),GLAccount.TABLENAME,GLAccount.FIELDNAME("No."),GLAccountNo),
        GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE LossDisposalAccount@101();
    VAR
      FAPostingGroup@1000 : Record 5606;
      GLAccount@1002 : Record 15;
      GLAccountNo@1003 : Code[20];
    BEGIN
      // Test Error Occurs on updating Losses Account on Disposal in FA Posting Group.

      // 1. Setup: Create FA Posting Group and GL Account.
      Initialize;
      LibraryFixedAsset.CreateFAPostingGroup(FAPostingGroup);
      GLAccountNo := CreateBlockedGLAccount;

      // 2. Exercise: Update Losses Account on Disposal.
      ASSERTERROR FAPostingGroup.VALIDATE("Losses Acc. on Disposal",GLAccountNo);

      // 3. Verify: Check Application throws an Error while updating Block Account.
      Assert.AreEqual(
        STRSUBSTNO(GLAccountBlockErr,GLAccount.FIELDNAME(Blocked),GLAccount.TABLENAME,GLAccount.FIELDNAME("No."),GLAccountNo),
        GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE MaintenanceExpenseAccount@103();
    VAR
      FAPostingGroup@1000 : Record 5606;
      GLAccount@1002 : Record 15;
      GLAccountNo@1003 : Code[20];
    BEGIN
      // Test Error Occurs on updating Maintenance Expense Account in FA Posting Group.

      // 1. Setup: Create FA Posting Group and GL Account.
      Initialize;
      LibraryFixedAsset.CreateFAPostingGroup(FAPostingGroup);
      GLAccountNo := CreateBlockedGLAccount;

      // 2. Exercise: Update Maintenance Expense Account.
      ASSERTERROR FAPostingGroup.VALIDATE("Maintenance Expense Account",GLAccountNo);

      // 3. Verify: Check Application throws an Error while updating Block Account.
      Assert.AreEqual(
        STRSUBSTNO(GLAccountBlockErr,GLAccount.FIELDNAME(Blocked),GLAccount.TABLENAME,GLAccount.FIELDNAME("No."),GLAccountNo),
        GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE DepreciationExpenseAccount@105();
    VAR
      FAPostingGroup@1000 : Record 5606;
      GLAccount@1002 : Record 15;
      GLAccountNo@1003 : Code[20];
    BEGIN
      // Test Error Occurs on updating Depreciation Expense Account in FA Posting Group.

      // 1. Setup: Create FA Posting Group and GL Account.
      Initialize;
      LibraryFixedAsset.CreateFAPostingGroup(FAPostingGroup);
      GLAccountNo := CreateBlockedGLAccount;

      // 2. Exercise: Update Depreciation Expense Account.
      ASSERTERROR FAPostingGroup.VALIDATE("Depreciation Expense Acc.",GLAccountNo);

      // 3. Verify: Check Application throws an Error while updating Block Account.
      Assert.AreEqual(
        STRSUBSTNO(GLAccountBlockErr,GLAccount.FIELDNAME(Blocked),GLAccount.TABLENAME,GLAccount.FIELDNAME("No."),GLAccountNo),
        GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE JournalSetup@49();
    VAR
      DepreciationBook@1000 : Record 5611;
      FAJournalSetup@1001 : Record 5605;
    BEGIN
      // Test Fixed Asset Journal Setup.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Fixed Asset Journal Setup.
      CreateJournalSetupDepreciation(DepreciationBook);

      // 3. Verify: Check FA Journal Setup generated.
      FAJournalSetup.SETRANGE("Depreciation Book Code",DepreciationBook.Code);
      FAJournalSetup.FINDFIRST;
    END;

    [Test]
    PROCEDURE JournalSetupBatch@72();
    VAR
      DepreciationBook@1000 : Record 5611;
      FAJournalSetup@1001 : Record 5605;
    BEGIN
      // Test Check FA Journal Batch Name in Journal Setup.

      // 1. Setup: Create Fixed Asset Journal Setup.
      Initialize;
      CreateJournalSetupDepreciation(DepreciationBook);

      // 2. Exercise: Modify Fixed Asset Journal Setup.
      UpdateTemplateOnJournalSetup(FAJournalSetup,DepreciationBook.Code);

      // 3. Verify: Check FA Journal Batch get blank.
      FAJournalSetup.TESTFIELD("FA Jnl. Batch Name",'');
    END;

    [Test]
    PROCEDURE JournalTemplate@17();
    VAR
      FAJournalTemplate@1000 : Record 5619;
    BEGIN
      // Test FA Journal Template.

      // 1.Setup:
      Initialize;

      // 2.Exercise: Create FA Journal Template.
      LibraryFixedAsset.CreateJournalTemplate(FAJournalTemplate);

      // 3. Verify: Check FA Journal Template created correctly.
      FAJournalTemplate.GET(FAJournalTemplate.Name);
    END;

    [Test]
    PROCEDURE JournalTemplateWithRecurring@80();
    VAR
      FAJournalTemplate@1000 : Record 5619;
    BEGIN
      // Test FA Journal Template with Recurring.

      // 1. Setup: Create and modify FA Journal Template.
      Initialize;
      LibraryFixedAsset.CreateJournalTemplate(FAJournalTemplate);
      ModifyRecurringOnTemplate(FAJournalTemplate);

      // 2. Exercise: Update No Series.
      ASSERTERROR FAJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);

      // 3. Verify: Check Application throws an error while updating No Series with Recurring.
      Assert.AreEqual(STRSUBSTNO(NoSeriesErr,FAJournalTemplate.FIELDNAME("Posting No. Series")),GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE DepreciationDocument@108();
    VAR
      DepreciationTableHeader@1000 : Record 5642;
      DepreciationTableLine@1001 : Record 5643;
    BEGIN
      // Test Depreciation Table and Line Creation.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create FA Depreciation Table Header and Line.
      LibraryFixedAsset.CreateDepreciationTableHeader(DepreciationTableHeader);
      CreateDepreciationTableLine(DepreciationTableLine,DepreciationTableHeader.Code);

      // 3. Verify: Check FA Depreciation Table created correctly.
      DepreciationTableHeader.GET(DepreciationTableLine."Depreciation Table Code");
      DepreciationTableLine.TESTFIELD(
        "No. of Units in Period",
        ROUND(DepreciationTableHeader."Total No. of Units" * DepreciationTableLine."Period Depreciation %" / 100,0.00001));
    END;

    [Test]
    PROCEDURE MainAssetComponent@67();
    VAR
      FixedAsset@1000 : Record 5600;
      FixedAsset2@1002 : Record 5600;
      MainAssetComponent@1001 : Record 5640;
    BEGIN
      // Test Main Assets Components.

      // 1. Setup: Create Fixed Assets.
      Initialize;
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);
      LibraryFixedAsset.CreateFixedAsset(FixedAsset2);

      // 2. Exercise: Create FAs for FA Main Asset and FA No for FA Main Asset Creation.
      LibraryFixedAsset.CreateMainAssetComponent(MainAssetComponent,FixedAsset."No.",FixedAsset2."No.");

      // 3. Verify: Check FA main Asset Component Created Correctly.
      MainAssetComponent.GET(FixedAsset."No.",FixedAsset2."No.");
      MainAssetComponent.TESTFIELD(Description,FixedAsset2.Description);
    END;

    [Test]
    PROCEDURE Maintenance@84();
    VAR
      Maintenance@1000 : Record 5626;
    BEGIN
      // Test New Maintenance Code.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create FA Maintenance.
      LibraryFixedAsset.CreateMaintenance(Maintenance);

      // 3. Verify: Check FA Maintenance Created Correctly.
      Maintenance.GET(Maintenance.Code);
    END;

    [Test]
    PROCEDURE InsuranceType@99();
    VAR
      InsuranceType@1000 : Record 5630;
    BEGIN
      // Test New Insurance Types in Insurance Setup.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create FA Insurance Type.
      LibraryFixedAsset.CreateInsuranceType(InsuranceType);

      // 3. Verify: Check FA Insurance Type Created Correctly.
      InsuranceType.GET(InsuranceType.Code);
    END;

    [Test]
    PROCEDURE PostFAMaintenance@75();
    VAR
      DepreciationBook@1004 : Record 5611;
      FixedAsset@1003 : Record 5600;
      FADepreciationBook@1002 : Record 5612;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Test Posting of FA Maintenance.

      // 1.Setup: Create Fixed Asset, FA Posting Group, FA Depreciation Book and FA General Journal Line.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");
      CreateAndUpdateJournalLine(
        GenJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",GenJournalLine."FA Posting Type"::Maintenance);

      // 2.Exercise: Post FA G/L Journal.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3.Verify: Verify the Amount on Maintenance Ledger Entry.
      VerifyMaintenanceEntry(GenJournalLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseFAMaintenance@74();
    VAR
      DepreciationBook@1004 : Record 5611;
      FixedAsset@1003 : Record 5600;
      FADepreciationBook@1002 : Record 5612;
      GenJournalLine@1000 : Record 81;
      MaintenanceLedgerEntry@1001 : Record 5625;
      ReversalEntry@1005 : Record 179;
    BEGIN
      // Test Reversal of FA Maintenance.

      // 1.Setup: Create Fixed Asset, FA Posting Group, FA Depreciation Book, FA General Journal Line and Post.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");
      CreateAndUpdateJournalLine(
        GenJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",GenJournalLine."FA Posting Type"::Maintenance);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      FindMaintenanceLedgerEntry(MaintenanceLedgerEntry,GenJournalLine."Account No.");

      // 2.Exercise: Reverse Maintenance Ledger Entry.
      ReversalEntry.SetHideDialog(TRUE);
      ReversalEntry.ReverseTransaction(MaintenanceLedgerEntry."Transaction No.");

      // 3.Verify: Verify the Amount on Maintenance Ledger Entry.
      VerifyMaintenanceEntryReversal(GenJournalLine);
    END;

    [Test]
    PROCEDURE FAAcquisitionFromFAJournal@9();
    VAR
      DepreciationBook@1005 : Record 5611;
      FixedAsset@1004 : Record 5600;
      FADepreciationBook@1003 : Record 5612;
      FAJournalLine@1000 : Record 5621;
      TempFAJournalLine@1001 : TEMPORARY Record 5621;
    BEGIN
      // Test the Fixed Asset Acquisition with FA Journal.

      // 1.Setup: Create Fixed Asset and FA Journal Line.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type"::Invoice,FAJournalLine."FA Posting Type"::"Acquisition Cost");
      CopyFAJournalLine(TempFAJournalLine,FAJournalLine);

      // 2.Exercise: Post FA Journal Line.
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      // 3.Verify: Verify that Document Type, Fixed Asset No, FA Posting Type and Amount on FA Ledger Entry Correctly Populated.
      VerifyValuesInFALedgerEntry(TempFAJournalLine);
    END;

    [Test]
    PROCEDURE FixedAssetDepreciation@16();
    VAR
      FAJournalLine@1000 : Record 5621;
    BEGIN
      // Test the Fixed Asset Depreciation with FA Journal.
      FAJournalPost(FAJournalLine."Document Type"::Invoice,FAJournalLine."FA Posting Type"::Depreciation);
    END;

    [Test]
    PROCEDURE WriteDownFixedAssetFAJournal@91();
    VAR
      FAJournalLine@1001 : Record 5621;
    BEGIN
      // Test the Fixed Asset Write Dowm with FA Journal.
      FAJournalPost(FAJournalLine."Document Type"::Invoice,FAJournalLine."FA Posting Type"::"Write-Down");
    END;

    [Test]
    PROCEDURE AppreciationOfFAFromFAJournal@28();
    VAR
      FAJournalLine@1001 : Record 5621;
    BEGIN
      // Test the Fixed Asset Appreciation With FA Journal.
      FAJournalPost(FAJournalLine."Document Type"::Invoice,FAJournalLine."FA Posting Type"::Appreciation);
    END;

    [Test]
    PROCEDURE Custom1FixedAssetFAJournal@95();
    VAR
      FAJournalLine@1001 : Record 5621;
    BEGIN
      // Test the Fixed Asset Posting with FA Posting Type as Custom 1 in FA Journal.
      FAJournalPost(FAJournalLine."Document Type"::Invoice,FAJournalLine."FA Posting Type"::"Custom 1");
    END;

    [Test]
    PROCEDURE Custom2FixedAssetFAJournal@53();
    VAR
      FAJournalLine@1001 : Record 5621;
    BEGIN
      // Test the Fixed Asset Posting with FA Posting Type as Custom 2 in FA Journal.
      FAJournalPost(FAJournalLine."Document Type"::Invoice,FAJournalLine."FA Posting Type"::"Custom 2");
    END;

    LOCAL PROCEDURE FAJournalPost@70(FAPostingType@1000 : Option;DocumentType@1001 : Option);
    VAR
      DepreciationBook@1008 : Record 5611;
      FixedAsset@1007 : Record 5600;
      FADepreciationBook@1006 : Record 5612;
      TempFAJournalLine@1004 : TEMPORARY Record 5621;
      FAJournalLine@1003 : Record 5621;
      FAJournalLineAmount@1002 : Decimal;
    BEGIN
      // 1.Setup: Create Fixed Asset, FA Journal Line, Post FA Acquisition, and Update Amount in FA Journal Line.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type"::Invoice,FAJournalLine."FA Posting Type"::"Acquisition Cost");
      FAJournalLineAmount := FAJournalLine.Amount;
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",DocumentType,FAPostingType);
      UpdateAmountInFAJournalLine(FAJournalLine,FAJournalLineAmount);
      CopyFAJournalLine(TempFAJournalLine,FAJournalLine);

      // 2.Exercise: Post FA Journal Line.
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      // 3.Verify: Verify that Document Type, Fixed Asset No, FA Posting Type and Amount on FA Ledger Entry Correctly Populated.
      VerifyValuesInFALedgerEntry(TempFAJournalLine);
    END;

    [Test]
    PROCEDURE SalvageValueOfFAFromFAJournal@58();
    VAR
      DepreciationBook@1006 : Record 5611;
      FixedAsset@1005 : Record 5600;
      FADepreciationBook@1004 : Record 5612;
      FAJournalLine@1001 : Record 5621;
      FAJournalLineAmount@1000 : Decimal;
    BEGIN
      // Test the Fixed Asset Posting with FA Posting Type as Salvage Value in FA Journal.

      // 1.Setup: Create Fixed Asset, FA Journal Line, Post FA Acquisition and Update the Amount in FA Journal Line.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type"::Invoice,FAJournalLine."FA Posting Type"::"Acquisition Cost");
      FAJournalLineAmount := FAJournalLine.Amount;
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type"::Invoice,FAJournalLine."FA Posting Type"::"Salvage Value");
      UpdateAmountInFAJournalLine(FAJournalLine,FAJournalLineAmount);
      FAJournalLineAmount := FAJournalLine.Amount;

      // 2.Exercise: Post FA Journal Line.
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      // 3.Verify: Verify the Salvage Value in attached Depreciation Book of Fixed Asset.
      FADepreciationBook.GET(FixedAsset."No.",DepreciationBook.Code);
      FADepreciationBook.CALCFIELDS("Salvage Value");
      FADepreciationBook.TESTFIELD("Salvage Value",FAJournalLineAmount);
    END;

    [Test]
    PROCEDURE PostingDateErrorFromFAJournal@69();
    VAR
      DepreciationBook@1006 : Record 5611;
      FixedAsset@1005 : Record 5600;
      FADepreciationBook@1004 : Record 5612;
      FAJournalLine@1001 : Record 5621;
    BEGIN
      // Test the Posting Date Error Message while posting Fixed Asset form FA Journal

      // 1.Setup: Create Fixed Asset, Update the date in FA setup, and FA Journal Line.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      UpdatePostingDateInFASetup;
      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type"::Invoice,FAJournalLine."FA Posting Type"::"Acquisition Cost");

      // 2.Exercise: Post FA Journal Line.
      ASSERTERROR LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      // 3.Verify: Verify the Error Message Occured while posting.
      Assert.AreEqual(
        STRSUBSTNO(FAPostingDateErr,FAJournalLine.FIELDCAPTION("FA Posting Date"),FAJournalLine.TABLECAPTION,
          FAJournalLine.FIELDCAPTION("Journal Template Name"),FAJournalLine."Journal Template Name",
          FAJournalLine.FIELDCAPTION("Journal Batch Name"),FAJournalLine."Journal Batch Name",
          FAJournalLine.FIELDCAPTION("Line No."),FAJournalLine."Line No."),GETLASTERRORTEXT,UnknownErr);

      // 4.TearDown : Clear the Date in FA Setup.
      ClearPostingDateInFASetup;
    END;

    [Test]
    PROCEDURE PostingDateErrorFAGLJournal@96();
    VAR
      DepreciationBook@1006 : Record 5611;
      FixedAsset@1005 : Record 5600;
      FADepreciationBook@1004 : Record 5612;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Test the Posting Date Error Message while posting Fixed Asset form FA GL Journal.

      // 1.Setup: Create Fixed Asset, Update the date in FA setup and FA G/L Journal Line.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      UpdatePostingDateInFASetup;
      CreateFAGLJournal(
        GenJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        GenJournalLine."FA Posting Type"::"Acquisition Cost");

      // 2.Exercise: Post FA G/L Journal.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3.Verify: Verify the Error Message Occured while posting.
      Assert.AreEqual(
        STRSUBSTNO(FAPostingDateErr,GenJournalLine.FIELDCAPTION("FA Posting Date"),GenJournalLine.TABLECAPTION,
          GenJournalLine.FIELDCAPTION("Journal Template Name"),GenJournalLine."Journal Template Name",
          GenJournalLine.FIELDCAPTION("Journal Batch Name"),GenJournalLine."Journal Batch Name",
          GenJournalLine.FIELDCAPTION("Line No."),GenJournalLine."Line No."),GETLASTERRORTEXT,UnknownErr);

      // 4.TearDown : Clear the Date in FA Setup.
      ClearPostingDateInFASetup;
    END;

    [Test]
    PROCEDURE FADisposalErrorFromFAGLJournal@66();
    VAR
      DepreciationBook@1006 : Record 5611;
      FixedAsset@1005 : Record 5600;
      FADepreciationBook@1004 : Record 5612;
      GenJournalLine@1003 : Record 81;
      FAJournalLine@1001 : Record 5621;
    BEGIN
      // Test the Fixed Asset Disposal Error Message While Posting From FA G/L Journal.

      // 1.Setup: Create Fixed Asset, FA Journal Line, Post FA Journal Line for Acqusition.
      // And Update the Balance Account in FA G/L Journal Line.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type"::Invoice,FAJournalLine."FA Posting Type"::"Acquisition Cost");
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");
      CreateFAGLJournal(
        GenJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        GenJournalLine."FA Posting Type"::Disposal);
      BalanceAccountFAGLJournalLine(GenJournalLine);

      // 2.Exercise: Post FA G/L Journal.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3.Verify: Verify the Error Message.
      Assert.AreEqual(
        STRSUBSTNO(FADisposalErr,GenJournalLine."Posting Date",GenJournalLine."Account No.",
          FADepreciationBook.FIELDCAPTION("Depreciation Book Code"),FADepreciationBook."Depreciation Book Code"),
        GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE FADisposalFromFAGLJournal@79();
    VAR
      DepreciationBook@1006 : Record 5611;
      FixedAsset@1005 : Record 5600;
      FADepreciationBook@1004 : Record 5612;
      GenJournalLine@1003 : Record 81;
      FAJournalLine@1001 : Record 5621;
      FALedgerEntry@1000 : Record 5601;
      FAJournalLineAmount@1007 : Decimal;
    BEGIN
      // Test the Fixed Asset Disposal From FA G/L Journal.

      // 1.Setup: Create Fixed Asset, FA Journal Line, Post FA Journal Line for Acqusition,
      // Update the Balance Account in FA G/L Journal Line and Update the Amount in FA G/L Journal Line .
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type"::Invoice,FAJournalLine."FA Posting Type"::"Acquisition Cost");
      FAJournalLineAmount := FAJournalLine.Amount;
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");
      CreateFAGLJournal(
        GenJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        GenJournalLine."FA Posting Type"::Disposal);
      BalanceAccountFAGLJournalLine(GenJournalLine);
      UpdateDisposalAmount(GenJournalLine,FAJournalLineAmount);

      // 2.Exercise: Post FA G/L Journal.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3.Verify: Verify the Disposal Amount in FA Ledger Entry.
      FALedgerEntry.SETRANGE("FA No.",FixedAsset."No.");
      FALedgerEntry.SETRANGE(Amount,GenJournalLine.Amount);
      FALedgerEntry.FINDFIRST;
    END;

    [Test]
    PROCEDURE FAWithComponentDisposalFromGLJournal_DisposeMainFABeforeComponent_ErrorOnPosting@122();
    VAR
      FixedAsset@1005 : Record 5600;
      ComponentFixedAsset@1000 : Record 5600;
      FADepreciationBook@1004 : Record 5612;
      ComponentFADepreciationBook@1006 : Record 5612;
      AllowPostingMainAsset@1008 : Boolean;
      MainFAAmount@1002 : Decimal;
    BEGIN
      Initialize;
      InitSetup(AllowPostingMainAsset);

      CreateFAWithComponent(FixedAsset,ComponentFixedAsset,FADepreciationBook,ComponentFADepreciationBook);

      MainFAAmount := PostFAAcquisition(FixedAsset,FADepreciationBook);
      ASSERTERROR PostFADisposal(FixedAsset,FADepreciationBook,MainFAAmount);

      Assert.ExpectedError(STRSUBSTNO(DisposeMainAssetErr,FixedAsset."No."));

      ResetSetup(AllowPostingMainAsset);
    END;

    [Test]
    PROCEDURE FAWithComponentDisposalFromGLJournal_DisposeMainFAAfterComponent_NoErrorsOnPosting@157();
    VAR
      FixedAsset@1005 : Record 5600;
      ComponentFixedAsset@1000 : Record 5600;
      FADepreciationBook@1004 : Record 5612;
      ComponentFADepreciationBook@1002 : Record 5612;
      AllowPostingMainAsset@1008 : Boolean;
      ComponentFAAmount@1003 : Decimal;
      MainFAAmount@1006 : Decimal;
    BEGIN
      Initialize;
      InitSetup(AllowPostingMainAsset);

      CreateFAWithComponent(FixedAsset,ComponentFixedAsset,FADepreciationBook,ComponentFADepreciationBook);

      ComponentFAAmount := PostFAAcquisition(ComponentFixedAsset,FADepreciationBook);
      MainFAAmount := PostFAAcquisition(FixedAsset,FADepreciationBook);

      PostFADisposal(ComponentFixedAsset,ComponentFADepreciationBook,ComponentFAAmount);
      PostFADisposal(FixedAsset,FADepreciationBook,MainFAAmount);

      // Verification - No errors occured.

      ResetSetup(AllowPostingMainAsset);
    END;

    [Test]
    PROCEDURE AllowCorrectionOfDisposalError@86();
    VAR
      DepreciationBook@1007 : Record 5611;
      FixedAsset@1006 : Record 5600;
      FADepreciationBook@1005 : Record 5612;
      GenJournalLine@1004 : Record 81;
      FAJournalLine@1002 : Record 5621;
      FAJournalLineAmount@1000 : Decimal;
    BEGIN
      // Test the Message 'Allow Correction of Disposal must not be No in Depreciation Book Code' from FA G/L Journal.

      // 1.Setup: Create Fixed Asset, FA Journal Line, Post FA Journal Line for Acqusition and create FA G/L Journal Line.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type"::Invoice,FAJournalLine."FA Posting Type"::"Acquisition Cost");
      FAJournalLineAmount := FAJournalLine.Amount;
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");
      CreateFAGLJournal(
        GenJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",GenJournalLine."FA Posting Type"::Disposal);
      BalanceAccountFAGLJournalLine(GenJournalLine);
      UpdateDisposalAmount(GenJournalLine,FAJournalLineAmount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateFAGLJournal(
        GenJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",GenJournalLine."FA Posting Type"::Disposal);
      BalanceAccountFAGLJournalLine(GenJournalLine);
      UpdateDisposalAmount(GenJournalLine,FAJournalLineAmount);

      // 2.Exercise: Post FA G/L Journal.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3.Verify: Verify the Error Mesage.
      Assert.AreEqual(
        STRSUBSTNO(AllowCorrectionErr,DepreciationBook.FIELDCAPTION("Allow Correction of Disposal"),
          FADepreciationBook."Depreciation Book Code"),GETLASTERRORTEXT,UnknownErr)
    END;

    [Test]
    PROCEDURE SetCorrectionOfDisposal@109();
    VAR
      DepreciationBook@1007 : Record 5611;
      FixedAsset@1006 : Record 5600;
      FADepreciationBook@1005 : Record 5612;
      GenJournalLine@1004 : Record 81;
      FALedgerEntry@1001 : Record 5601;
      FAJournalLine@1002 : Record 5621;
      FAJournalLineAmount@1000 : Decimal;
    BEGIN
      // Test the Fixed Asset Disposal with 'Allow correction in Disposal'.

      // 1.Setup: Create Fixed Asset, FA Journal Line, Post FA Journal Line for Acqusition and create FA G/L Journal Line.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type"::Invoice,FAJournalLine."FA Posting Type"::"Acquisition Cost");
      FAJournalLineAmount := FAJournalLine.Amount;
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");
      CreateFAGLJournal(
        GenJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",GenJournalLine."FA Posting Type"::Disposal);
      BalanceAccountFAGLJournalLine(GenJournalLine);
      UpdateDisposalAmount(GenJournalLine,FAJournalLineAmount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      CreateFAGLJournal(
        GenJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",GenJournalLine."FA Posting Type"::Disposal);
      BalanceAccountFAGLJournalLine(GenJournalLine);
      UpdateDisposalAmount(GenJournalLine,FAJournalLineAmount);

      // Mark Allow Correction of Disposal as True in Depreciation Book Code
      SetAllowCorrectionOfDisposal(FADepreciationBook."Depreciation Book Code");

      // 2.Exercise: Post FA G/L Journal.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3.Verify: Verify Amount in FA Ledger Entry.
      FALedgerEntry.SETRANGE("FA No.",FixedAsset."No.");
      FALedgerEntry.SETRANGE(Amount,GenJournalLine.Amount);
      FALedgerEntry.FINDFIRST;
    END;

    [Test]
    PROCEDURE FAAcquisitionCostError@76();
    VAR
      DepreciationBook@1007 : Record 5611;
      FixedAsset@1006 : Record 5600;
      GenJournalLine@1004 : Record 81;
      FADepreciationBook@1000 : Record 5612;
    BEGIN
      // Test the FA Acquisition Cost Error From FA G/L Journal.

      // 1.Setup: Create Fixed Asset, FA G/L Journal Line and Update the Balance Acccount in FA/GL Journal Line.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateFAGLJournal(
        GenJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        GenJournalLine."FA Posting Type"::"Acquisition Cost");
      BalanceAccountFAGLJournalLine(GenJournalLine);

      // 2.Exercise: Post FA G/L Journal.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3.Verify: Verify the Error Message.
      Assert.AreEqual(
        STRSUBSTNO(FAAcquisitionErr,GenJournalLine.FIELDCAPTION("FA Posting Type"),GenJournalLine.TABLECAPTION,
          GenJournalLine.FIELDCAPTION("Journal Template Name"),GenJournalLine."Journal Template Name",
          GenJournalLine.FIELDCAPTION("Journal Batch Name"),GenJournalLine."Journal Batch Name",
          GenJournalLine."Line No."),GETLASTERRORTEXT,UnknownErr)
    END;

    [Test]
    PROCEDURE CreateFixedAsset@97();
    VAR
      FixedAsset@1000 : Record 5600;
      FASetup@1001 : Record 5603;
      NoSeriesManagement@1003 : Codeunit 396;
      NextFANo@1002 : Code[20];
    BEGIN
      // Test Create New Fixed Asset.

      // 1. Setup: Get Next Fixed Asset No from No Series.
      Initialize;
      FASetup.GET;
      NextFANo := NoSeriesManagement.GetNextNo(FASetup."Fixed Asset Nos.",WORKDATE,FALSE);

      // 2. Exercise: Create new Fixed Asset.
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);

      // 3. Verify: Check that the application generates an error if FA No. is not incremented automatically as per the setup.
      FixedAsset.TESTFIELD("No.",NextFANo);
    END;

    [Test]
    PROCEDURE PostAcquisitionWithInsurance@94();
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      DepreciationBook@1003 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FixedAsset@1001 : Record 5600;
    BEGIN
      // Test Post Acquisition with Insurance.

      // 1. Setup: Create Fixed Asset, FA Posting Group, FA Depreciation Book and Purchase Invoice with Insurance.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",LibraryFixedAsset.GetDefaultDeprBook);
      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");
      CreatePurchaseHeader(PurchaseHeader);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader,FixedAsset."No.",FADepreciationBook."Depreciation Book Code");
      ModifyInsuranceNo(PurchaseLine);

      // 2. Exercise: Post Invoice.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // 3. Verify: Check that Insurance Coverage Ledger Entry posted correctly.
      VerifyCoverageLedger(FindPostedInvoice(PurchaseHeader."No."),PurchaseLine."No.",PurchaseLine."Insurance No.");
    END;

    [Test]
    PROCEDURE LinearDepreciationMethod@90();
    VAR
      DepreciationBook@1003 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FixedAsset@1001 : Record 5600;
    BEGIN
      // Test Linear Depreciation Method.

      // 1. Setup: Create Fixed Asset, FA Posting Group, FA Depreciation Book.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");

      // 2. Exercise: Update No of Depreciation Years.
      UpdateDepreciationYear(FADepreciationBook);

      // 3. Verify: Check that No of Depreciation Months updated correctly.
      FADepreciationBook.TESTFIELD("No. of Depreciation Months",ROUND(FADepreciationBook."No. of Depreciation Years" * 12,0.00000001));
    END;

    [Test]
    PROCEDURE NonLinearDepreciationMethod@92();
    VAR
      DepreciationBook@1003 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FixedAsset@1001 : Record 5600;
    BEGIN
      // Test Non Linear Depreciation Method.

      // 1. Setup: Create Fixed Asset, FA Posting Group, FA Depreciation Book.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");
      UpdateDepreciationMethod(FADepreciationBook);

      // 2. Exercise: Update No of Depreciation Years.
      ASSERTERROR UpdateDepreciationYear(FADepreciationBook);

      // 3. Verify: Check that Application generates an error while updating, No of Depreciation Year, for Non Linear
      // Depreciation Method.
      Assert.AreEqual(
        STRSUBSTNO(
          DepreciationMethodErr,FADepreciationBook.FIELDNAME("Depreciation Method"),FADepreciationBook."Depreciation Method",
          FADepreciationBook.TABLENAME,FADepreciationBook.FIELDNAME("FA No."),FADepreciationBook."FA No.",
          FADepreciationBook.FIELDNAME("Depreciation Book Code"),FADepreciationBook."Depreciation Book Code"),
        GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PostFAJournalBatch@118();
    VAR
      FixedAsset@1000 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FAJournalLine@1003 : Record 5621;
      FAJournalBatch@1004 : Record 5620;
      FALedgerEntry@1005 : Record 5601;
      FAJournalLineAmount@1006 : Decimal;
    BEGIN
      // Test the Post Fixed Asset Journal through FA Journal Batch.

      // 1.Setup: Create Fixed Asset,Depreciation Book,FA Depreciation Book, Create FA Journal Batch and create FA Journal Line.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type"::" ",FAJournalLine."FA Posting Type"::"Acquisition Cost");

      COMMIT; // Commit is required for Posting
      FAJournalLineAmount := FAJournalLine.Amount;
      FAJournalBatch.GET(FAJournalLine."Journal Template Name",FAJournalLine."Journal Batch Name");

      // 2.Exercise: Post FA Journal Line through FA Journal Batch.
      FAJournalBatch.SETRANGE("Journal Template Name",FAJournalLine."Journal Template Name");
      FAJournalBatch.SETRANGE(Name,FAJournalLine."Journal Batch Name");
      LibraryFixedAsset.PostFAJournalLineBatch(FAJournalBatch);

      // 3.Verify: Verify Amount in FA Ledger Entry.
      VerifyAmountInFAEntry(FixedAsset."No.",FALedgerEntry."FA Posting Type"::"Acquisition Cost",FAJournalLineAmount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PostRecurringFAJournalBatch@117();
    VAR
      FixedAsset@1003 : Record 5600;
      DepreciationBook@1002 : Record 5611;
      FADepreciationBook@1001 : Record 5612;
      FAJournalLine@1000 : Record 5621;
      FAJournalBatch@1004 : Record 5620;
      FALedgerEntry@1005 : Record 5601;
      FAJournalLineAmount@1007 : Decimal;
    BEGIN
      // Test the Post Recurring Fixed Asset Journal through FA Journal Batch.

      // 1.Setup: Create Fixed Asset,Depreciation Book,FA Depreciation Book, Create FA Journal Batch For Recurring
      // and create Recurring FA Journal Line.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      CreateFAJournalRecurringBatch(FAJournalBatch);
      CreateRecurringFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",FAJournalBatch);

      COMMIT; // Commit is required for Posting
      FAJournalLineAmount := FAJournalLine.Amount;

      // 2.Exercise: Post Recurring FA Journal Line through Recurring FA Journal Batch.
      FAJournalBatch.SETRANGE("Journal Template Name",FAJournalLine."Journal Template Name");
      FAJournalBatch.SETRANGE(Name,FAJournalLine."Journal Batch Name");
      LibraryFixedAsset.PostFAJournalLineBatch(FAJournalBatch);

      // 3.Verify: Verify Amount in FA Ledger Entry.
      VerifyAmountInFAEntry(FixedAsset."No.",FALedgerEntry."FA Posting Type"::"Acquisition Cost",FAJournalLineAmount);
    END;

    [Test]
    PROCEDURE FAJournalWithDuplicateBookCode@121();
    VAR
      DepreciationBook@1006 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      FAJournalLine@1002 : Record 5621;
      Amount@1010 : Decimal;
      GLIntegrationAcqCost@1000 : Boolean;
    BEGIN
      // Test Duplicate Entry in General Journal Line after Posting FA Journal with Duplicate in Depreciation Book Code.

      // 1. Setup: Create Depreciation Book, Fixed Asset, FA Depreciation Book with Default Depreciation Book on FA Setup and Created new
      // Depreciation Book, Update G/L Integration - Acq. Cost as false on Default Depreciation Book.
      Initialize;
      CreateJournalSetupDepreciation(DepreciationBook);
      UpdateDepreciationBook(DepreciationBook);
      CreateFAWithFADepreciationBook(FADepreciationBook,DepreciationBook.Code);
      GLIntegrationAcqCost := UpdateAcquisitionIntegration(FADepreciationBook."Depreciation Book Code",FALSE);

      // 2. Exercise: Create and Post FA Journal Line with Duplicate in Depreciation Book Code.
      CreateFAJournalLine(
        FAJournalLine,FADepreciationBook."FA No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type",FAJournalLine."FA Posting Type"::"Acquisition Cost");
      UpdateDuplicateBookCode(FAJournalLine,DepreciationBook.Code);
      Amount := FAJournalLine.Amount;
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      // 3. Verify: Verify Duplicate Entry in General Journal Line.
      VerifyGeneralJournalLine(
        FADepreciationBook."FA No.",DepreciationBook.Code,ROUND(Amount * 100 / DepreciationBook."Default Exchange Rate"));

      // 4. Teardown: Rollback G/L Integration - Acq. Cost to Default Value for Default Depreciation Book and for new Depreciation Book
      // Part of Duplication List as False.
      UpdateAcquisitionIntegration(FADepreciationBook."Depreciation Book Code",GLIntegrationAcqCost);
      UpdatePartOfDuplicationList(DepreciationBook,FALSE);
    END;

    [Test]
    PROCEDURE FAJournalWithUseDuplicateList@119();
    VAR
      DepreciationBook@1006 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      FAJournalLine@1002 : Record 5621;
      Amount@1010 : Decimal;
      GLIntegrationAcqCost@1000 : Boolean;
    BEGIN
      // Test Duplicate Entry in General Journal Line after Posting FA Journal with Use Duplication List as True.

      // 1. Setup: Create Depreciation Book, Fixed Asset, FA Depreciation Book with Default Depreciation Book on FA Setup and Created new
      // Depreciation Book, Update G/L Integration - Acq. Cost as false on Default Depreciation Book.
      Initialize;
      CreateJournalSetupDepreciation(DepreciationBook);
      UpdateDepreciationBook(DepreciationBook);
      CreateFAWithFADepreciationBook(FADepreciationBook,DepreciationBook.Code);
      GLIntegrationAcqCost := UpdateAcquisitionIntegration(FADepreciationBook."Depreciation Book Code",FALSE);

      // 2. Exercise: Create and Post FA Journal Line with Use Duplication List as True.
      CreateFAJournalLine(
        FAJournalLine,FADepreciationBook."FA No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type",FAJournalLine."FA Posting Type"::"Acquisition Cost");
      UpdateUseDuplicationList(FAJournalLine);
      Amount := FAJournalLine.Amount;
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      // 3. Verify: Verify Duplicate Entry in General Journal Line.
      VerifyGeneralJournalLine(
        FADepreciationBook."FA No.",DepreciationBook.Code,ROUND(Amount * 100 / DepreciationBook."Default Exchange Rate"));

      // 4. Teardown: Rollback G/L Integration - Acq. Cost to Default Value for Default Depreciation Book and for new Depreciation Book
      // Part of Duplication List as False.
      UpdateAcquisitionIntegration(FADepreciationBook."Depreciation Book Code",GLIntegrationAcqCost);
      UpdatePartOfDuplicationList(DepreciationBook,FALSE);
    END;

    [Test]
    PROCEDURE IndexFixedAssets@128();
    VAR
      DepreciationBook@1000 : Record 5611;
      FixedAsset@1004 : Record 5600;
      FADepreciationBook@1003 : Record 5612;
      IndexFigure@1001 : Integer;
    BEGIN
      // Test the Generates correct entry in FA G/L Journal after executing the Index Fixed Assets.

      // 1.Setup: Create Fixed Asset,FA Posting Group, FA Depreciation Book,Create and Post Purchase Invoice and
      // Calculate Depreciation and post.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");
      AcquisitionCostBalanceAccount(FixedAsset."FA Posting Group");

      CreateAndPostPurchaseInvoice(FixedAsset."No.",FADepreciationBook."Depreciation Book Code");
      DeleteGeneralJournalLine(FADepreciationBook."Depreciation Book Code");
      RunCalculateDepreciation(FixedAsset."No.",FADepreciationBook."Depreciation Book Code",TRUE);
      PostDepreciationWithDocumentNo(FADepreciationBook."Depreciation Book Code");

      // 2.Exercise: Run Index Fixed Assets.
      IndexFigure := RunIndexFixedAssets(FixedAsset."No.",FADepreciationBook."Depreciation Book Code");

      // 3.Verify: Verify the FA G/L Journal entries Created for Fixed asset with correct Amount.
      VerifyFixedAssetsIndexEntry(FixedAsset."No.",IndexFigure);
    END;

    [Test]
    PROCEDURE DepreciationWithAcqCostTrue@139();
    VAR
      FixedAsset@1002 : Record 5600;
      DepreciationBook@1000 : Record 5611;
      FAJournalLine@1009 : Record 5621;
      FADepreciationBook@1008 : Record 5612;
      FALedgerEntry@1004 : Record 5601;
      AcqusitionAmount@1007 : Decimal;
      DepreciationAmount@1006 : Decimal;
      NewAcqusitionAmount@1001 : Decimal;
      Amount@1003 : Decimal;
    BEGIN
      // Test FA Ledger Entry after Posting FA Journal Line with "Depr. Acquisition Cost" field as True.

      // 1. Setup: Create Depreciation Book, Fixed Asset, Create and Post FA Journal Lines with FA Posting Type Acquisition Cost and
      // Depreciation.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      UpdateDepreciationCustomField(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      UpdateDepreciationEndingDate(FADepreciationBook);
      CreateAndPostAcqusitionLine(FADepreciationBook,AcqusitionAmount);
      DepreciationAmount := AcqusitionAmount;
      CreateAndPostDepreciationLine(FADepreciationBook,DepreciationAmount);

      // 2. Exercise: Create and Post FA Journal Line with Depr. Acquisition Cost as True and Salvage Value.
      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type",FAJournalLine."FA Posting Type"::"Acquisition Cost");
      NewAcqusitionAmount := LibraryRandom.RandDec(100,2);  // Using LibraryRandom for NewAcqusitionAmount
      Amount := LibraryRandom.RandDec(10,2);  // Using LibraryRandom for amount
      UpdateAndPostWithSalvageValue(FAJournalLine,NewAcqusitionAmount,Amount);

      // 3. Verify: Verify Depreciation Amount on FA Ledger Entry..
      VerifyAmountInFAEntry(
        FixedAsset."No.",FALedgerEntry."FA Posting Type"::Depreciation,
        ROUND((NewAcqusitionAmount - Amount) * DepreciationAmount / AcqusitionAmount));
    END;

    [Test]
    PROCEDURE CreateAndModifyFixedAsset@135();
    VAR
      FixedAsset@1000 : Record 5600;
      TempFixedAsset@1001 : TEMPORARY Record 5600;
    BEGIN
      // Test Create New Fixed Asset and Update Values on Fixed Asset.

      // 1. Setup: Create New Fixed Asset.
      Initialize;
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);

      // 2. Exercise: Update Responsible Employee, FA Class Code, FA Subclass Code, FA Location Code,
      // Vendor No., Maintenance Vendor No. on Fixed Asset.
      UpdateValuesOnFixedAsset(TempFixedAsset,FixedAsset);

      // 3. Verify: Varify Values on Fixed Asset.
      VerifyValuesOnFixedAsset(TempFixedAsset);
    END;

    [Test]
    PROCEDURE TestFirstFAJournalTemplateCreationRecurringTrue@154();
    BEGIN
      // Unit Test - COD5638: Test if no FA Journal Template exist then a default value is inserted and JnlSelected is TRUE with FA Journal Line remains empty.
      // with Template name as "Recurring" and Description as "Recurring Fixed Asset Journal" and Recurring Journal boolean is TRUE.

      VerifyFirstFAJournalTemplateCreation(TRUE,FAJnlTemplateNameRecurringLbl,FAJnlTemplateDescRecJnlLbl);
    END;

    [Test]
    PROCEDURE TestFirstFAJournalTemplateCreationRecurringFalse@148();
    BEGIN
      // Unit Test - COD5638: Test if no FA Journal Template exist then a default value is inserted and JnlSelected is TRUE with FA Journal Line remains empty.
      // with Template name as "ASSETS" and Description as "Fixed Asset Journal" and Recurring Journal boolean is FALSE.

      VerifyFirstFAJournalTemplateCreation(FALSE,FAJnlTemplateNameAssetsLbl,FAJnlTemplateDescFAJnlLbl);
    END;

    [Test]
    [HandlerFunctions(FAPageHandler)]
    PROCEDURE TestFAJournalBatchNameOnFAJournalPage@147();
    VAR
      FAJournalBatch@1000 : Record 5620;
      FAJnlManagement@1001 : Codeunit 5638;
    BEGIN
      // Unit Test - COD5638: Test FA Journal Batch name on FA Journal Batch Page when opened through batch.

      // Setup: Create a new FA journal template and cost journal batch.
      Initialize;
      CreateFAJournalBatch(FAJournalBatch);

      // Exercise: Execute TemplateSelectionFromBatch function of FAJnlManagement.
      COMMIT;       // commit is required here;
      LibraryVariableStorage.Enqueue(FAJournalBatch.Name);
      FAJnlManagement.TemplateSelectionFromBatch(FAJournalBatch);

      // Verify: Verification has been done in FAPageHandler.
    END;

    [Test]
    PROCEDURE UpdateExistingLineTypeToItemOnPurchaseOrder@158();
    VAR
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      DepreciationBook@1003 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FixedAsset@1001 : Record 5600;
      Vendor@1000 : Record 23;
    BEGIN
      // Setup: Create Vendor, Create and Set up Fixed Asset, Create Purchase Order.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      CreatePurchaseLine(PurchaseLine,PurchaseHeader,FixedAsset."No.",FADepreciationBook."Depreciation Book Code");

      // Exercise & Verify: Change the Purchase Line Type to Item, the Error Message doesn't pop up.
      PurchaseLine.VALIDATE(Type,PurchaseLine.Type::Item);
      PurchaseLine.MODIFY(TRUE);

      // Verify: Verify the Purchase Line Type is updated.
      PurchaseLine.TESTFIELD(Type,PurchaseLine.Type::Item);
    END;

    LOCAL PROCEDURE AcquisitionCostBalanceAccount@57(FAPostingGroupCode@1000 : Code[10]);
    VAR
      GLAccount@1001 : Record 15;
      FAPostingGroup@1002 : Record 5606;
    BEGIN
      GLAccount.SETFILTER("Gen. Prod. Posting Group",'<>%1','');
      LibraryERM.FindGLAccount(GLAccount);
      FAPostingGroup.GET(FAPostingGroupCode);
      FAPostingGroup.VALIDATE("Acquisition Cost Bal. Acc.",GLAccount."No.");
      FAPostingGroup.VALIDATE("Acq. Cost Acc. on Disposal",GLAccount."No.");
      FAPostingGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE BalanceAccountFAGLJournalLine@41(VAR GenJournalLine@1000 : Record 81);
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      GenJournalLine.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CountFAAllocationEntries@40(Code@1000 : Code[10];FAEntriesCreated@1002 : Integer);
    VAR
      FAAllocation@1001 : Record 5615;
    BEGIN
      FAAllocation.SETRANGE(Code,Code);
      Assert.AreEqual(FAAllocation.COUNT,FAEntriesCreated,FAAllocationErr);
    END;

    LOCAL PROCEDURE CopyFAJournalLine@4(VAR FAJournalLineOld@1000 : Record 5621;VAR FAJournalLine@1001 : Record 5621);
    BEGIN
      FAJournalLineOld := FAJournalLine;
      FAJournalLineOld.INSERT;
    END;

    LOCAL PROCEDURE ClearPostingDateInFASetup@78();
    VAR
      FASetup@1000 : Record 5603;
    BEGIN
      FASetup.GET;
      FASetup.VALIDATE("Allow FA Posting From");
      FASetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostAcqusitionLine@126(FADepreciationBook@1000 : Record 5612;VAR Amount@1003 : Decimal);
    VAR
      FAJournalLine@1001 : Record 5621;
    BEGIN
      CreateFAJournalLine(
        FAJournalLine,FADepreciationBook."FA No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type",FAJournalLine."FA Posting Type"::"Acquisition Cost");
      Amount := FAJournalLine.Amount;
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostDepreciationLine@133(FADepreciationBook@1000 : Record 5612;VAR Amount@1002 : Decimal);
    VAR
      FAJournalLine@1001 : Record 5621;
    BEGIN
      CreateFAJournalLine(
        FAJournalLine,FADepreciationBook."FA No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type",FAJournalLine."FA Posting Type"::Depreciation);
      UpdateAmountInFAJournalLine(FAJournalLine,Amount);
      Amount := FAJournalLine.Amount;
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);
    END;

    LOCAL PROCEDURE CreateFAJournalLine@7(VAR FAJournalLine@1001 : Record 5621;FANo@1002 : Code[20];DepreciationBookCode@1003 : Code[10];DocumentType@1004 : Option;FAPostingType@1005 : Option);
    VAR
      FAJournalBatch@1000 : Record 5620;
    BEGIN
      CreateFAJournalBatch(FAJournalBatch);
      LibraryFixedAsset.CreateFAJournalLine(FAJournalLine,FAJournalBatch."Journal Template Name",FAJournalBatch.Name);
      FAJournalLine.VALIDATE("Document Type",DocumentType);
      FAJournalLine.VALIDATE("Document No.",GetDocumentNo(FAJournalBatch));
      FAJournalLine.VALIDATE("Posting Date",WORKDATE);
      FAJournalLine.VALIDATE("FA Posting Date",WORKDATE);
      FAJournalLine.VALIDATE("FA Posting Type",FAPostingType);
      FAJournalLine.VALIDATE("FA No.",FANo);
      FAJournalLine.VALIDATE(Amount,LibraryRandom.RandInt(1000));  // Using Random Number Generator for Amount.
      FAJournalLine.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      FAJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFAWithComponent@178(VAR FixedAsset@1004 : Record 5600;VAR ComponentFixedAsset@1003 : Record 5600;VAR FADepreciationBook@1002 : Record 5612;VAR ComponentFADepreciationBook@1001 : Record 5612);
    VAR
      MainAssetComponent@1000 : Record 5640;
      DepreciationBook@1005 : Record 5611;
    BEGIN
      CreateMainOrComponentFAWithEnviroment(FixedAsset,FADepreciationBook,DepreciationBook,'',TRUE);
      CreateMainOrComponentFAWithEnviroment(ComponentFixedAsset,ComponentFADepreciationBook,DepreciationBook,FixedAsset."No.",FALSE);
      LibraryFixedAsset.CreateMainAssetComponent(MainAssetComponent,FixedAsset."No.",ComponentFixedAsset."No.");
    END;

    LOCAL PROCEDURE CreateMainOrComponentFAWithEnviroment@136(VAR FixedAsset@1001 : Record 5600;VAR FADepreciationBook@1000 : Record 5612;VAR DepreciationBook@1005 : Record 5611;ParentFACode@1003 : Code[20];IsMainAsset@1004 : Boolean);
    BEGIN
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      FixedAsset.VALIDATE("Component of Main Asset",ParentFACode);
      IF IsMainAsset THEN
        FixedAsset."Main Asset/Component" := FixedAsset."Main Asset/Component"::"Main Asset"
      ELSE
        FixedAsset."Main Asset/Component" := FixedAsset."Main Asset/Component"::Component;

      FixedAsset.MODIFY;

      IF DepreciationBook.Code = '' THEN
        CreateJournalSetupDepreciation(DepreciationBook);

      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
    END;

    LOCAL PROCEDURE CreateFADepreciationBook@30(VAR FADepreciationBook@1000 : Record 5612;FANo@1002 : Code[20];FAPostingGroupCode@1003 : Code[10];DepreciationBookCode@1004 : Code[10]);
    BEGIN
      LibraryFixedAsset.CreateFADepreciationBook(FADepreciationBook,FANo,DepreciationBookCode);
      FADepreciationBook.VALIDATE("FA Posting Group",FAPostingGroupCode);
      FADepreciationBook.VALIDATE("Depreciation Starting Date",WORKDATE);

      // Depreciation Ending Date greater than Depreciation Starting Date, Using the Random Number for the Year.
      FADepreciationBook.VALIDATE("Depreciation Ending Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE));
      FADepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJournalSetupDepreciation@62(VAR DepreciationBook@1000 : Record 5611);
    VAR
      FAJournalSetup@1001 : Record 5605;
    BEGIN
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAJournalSetup(FAJournalSetup,DepreciationBook.Code,'');
      UpdateFAJournalSetup(FAJournalSetup);
    END;

    LOCAL PROCEDURE CreateGenJournalBatch@50(VAR GenJournalBatch@1002 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      GenJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFAJournalBatch@65(VAR FAJournalBatch@1000 : Record 5620);
    VAR
      FAJournalTemplate@1002 : Record 5619;
    BEGIN
      FAJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryFixedAsset.FindFAJournalTemplate(FAJournalTemplate);
      LibraryFixedAsset.CreateFAJournalBatch(FAJournalBatch,FAJournalTemplate.Name);
      FAJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      FAJournalBatch.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateFAAllocation@21(VAR FAAllocation@1000 : Record 5615;FAPostingGroup@1001 : Code[10]) : Integer;
    VAR
      Counter@1002 : Integer;
    BEGIN
      // Using Random Number Generator for creating the lines.
      FOR Counter := 1 TO 1 + LibraryRandom.RandInt(3) DO BEGIN
        CLEAR(FAAllocation);
        LibraryFixedAsset.CreateFAAllocation(FAAllocation,FAPostingGroup,FAAllocation."Allocation Type"::Depreciation);
        UpdateFAAllocation(FAAllocation);
      END;
      EXIT(Counter);
    END;

    LOCAL PROCEDURE CreateFAGLJournal@48(VAR GenJournalLine@1003 : Record 81;AccountNo@1002 : Code[20];DepreciationBookCode@1004 : Code[10];FAPostingType@1005 : Option);
    VAR
      GenJournalBatch@1000 : Record 232;
    BEGIN
      CreateGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type",
        GenJournalLine."Account Type"::"Fixed Asset",
        AccountNo,LibraryRandom.RandInt(1000));  // Using Random Number Generator for Amount.
      GenJournalLine.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      GenJournalLine.VALIDATE("FA Posting Type",FAPostingType);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseInvoice@129(FixedAssetNo@1000 : Code[20];DepreciationBookCode@1002 : Code[10]);
    VAR
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1007 : Record 39;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader,FixedAssetNo,DepreciationBookCode);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
    END;

    LOCAL PROCEDURE CreateFAWithFADepreciationBook@161(VAR FADepreciationBook@1000 : Record 5612;DepreciationBookCode@1003 : Code[10]);
    VAR
      FixedAsset@1001 : Record 5600;
    BEGIN
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBookCode);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",LibraryFixedAsset.GetDefaultDeprBook);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@19(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1002 : Record 39);
    VAR
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1006 : Record 5612;
      FixedAsset@1004 : Record 5600;
    BEGIN
      // 1.Setup: Create Fixed Asset, FA Posting Group, Purchase Header and Purchase Line.
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      CreatePurchaseHeader(PurchaseHeader);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader,FixedAsset."No.",FADepreciationBook."Depreciation Book Code");
      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");

      // 2.Exercise: Post Purchase Invoice.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@24(VAR PurchaseHeader@1000 : Record 38);
    VAR
      Vendor@1002 : Record 23;
    BEGIN
      Vendor.SETRANGE("Currency Code",'');
      FindVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,Vendor."No.");

      // Using Random Code Generator for Vendor Invoice No.
      PurchaseHeader.VALIDATE(
        "Vendor Invoice No.",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(PurchaseHeader.FIELDNO("Vendor Invoice No."),DATABASE::"Purchase Header"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Vendor Invoice No."))));
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@25(VAR PurchaseLine@1000 : Record 39;VAR PurchaseHeader@1002 : Record 38;FANo@1003 : Code[20];DepreciationBookCode@1004 : Code[10]);
    BEGIN
      // Using the Random Number Generator for Quantity and Amount.
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Fixed Asset",FANo,LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(1000,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@37(VAR SalesHeader@1005 : Record 36;VAR SalesLine@1006 : Record 37;FANo@1000 : Code[20];DepreciationBookCode@1007 : Code[10]);
    BEGIN
      CreateSalesHeader(SalesHeader);
      CreateSalesLine(SalesHeader,SalesLine,FANo,DepreciationBookCode);
    END;

    LOCAL PROCEDURE CreateSalesHeader@112(VAR SalesHeader@1000 : Record 36);
    VAR
      Customer@1002 : Record 18;
    BEGIN
      Customer.SETRANGE("Currency Code",'');
      FindCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,Customer."No.");
    END;

    LOCAL PROCEDURE CreateSalesLine@63(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1000 : Record 37;FANo@1003 : Code[20];DepreciationBookCode@1002 : Code[10]);
    VAR
      UnitOfMeasure@1006 : Record 204;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      // Using the Random Number Generator for Quantity.
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::"Fixed Asset",FANo,LibraryRandom.RandDec(10,2));
      SalesLine.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));  // Using the Random Number Generator for Unit Price.
      SalesLine.VALIDATE("Depr. until FA Posting Date",TRUE);
      SalesLine.VALIDATE("Unit of Measure",UnitOfMeasure.Code);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBlockedGLAccount@115() : Code[20];
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE(Blocked,TRUE);
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateDepreciationTableLine@59(VAR DepreciationTableLine@1001 : Record 5643;DepreciationTableHeaderCode@1000 : Code[10]);
    BEGIN
      LibraryFixedAsset.CreateDepreciationTableLine(DepreciationTableLine,DepreciationTableHeaderCode);
      // Using RANDOM value for Period Depreciation %.
      DepreciationTableLine.VALIDATE("Period Depreciation %",10 * LibraryRandom.RandDec(10,2));
      DepreciationTableLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateJournalLine@34(VAR GenJournalLine@1000 : Record 81;FixedAssetNo@1001 : Code[20];DepreciationBookCode@1002 : Code[10];FAPostingType@1003 : Option);
    BEGIN
      CreateFAGLJournal(GenJournalLine,FixedAssetNo,DepreciationBookCode,FAPostingType);
      UpdatePostingSetupGeneralLine(GenJournalLine);
      BalanceAccountFAGLJournalLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateFAJournalRecurringBatch@107(VAR FAJournalBatch@1000 : Record 5620);
    VAR
      FAJournalTemplate@1002 : Record 5619;
    BEGIN
      FAJournalTemplate.SETRANGE(Recurring,TRUE);
      LibraryFixedAsset.FindFAJournalTemplate(FAJournalTemplate);
      LibraryFixedAsset.CreateFAJournalBatch(FAJournalBatch,FAJournalTemplate.Name);
      FAJournalBatch.VALIDATE("Posting No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      FAJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRecurringFAJournalLine@116(VAR FAJournalLine@1001 : Record 5621;FANo@1002 : Code[20];DepreciationBookCode@1003 : Code[10];FAJournalBatch@1006 : Record 5620);
    VAR
      RecurringFrequency@1007 : DateFormula;
    BEGIN
      LibraryFixedAsset.CreateFAJournalLine(FAJournalLine,FAJournalBatch."Journal Template Name",FAJournalBatch.Name);
      FAJournalLine.VALIDATE(
        "Document No.",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(FAJournalLine.FIELDNO("Document No."),DATABASE::"FA Journal Line"),
          1,LibraryUtility.GetFieldLength(DATABASE::"FA Journal Line",FAJournalLine.FIELDNO("Document No."))));
      FAJournalLine.VALIDATE("Recurring Method",FAJournalLine."Recurring Method"::"F Fixed");
      EVALUATE(RecurringFrequency,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>'); // Using Random Number Generator for Days.
      FAJournalLine.VALIDATE("Recurring Frequency",RecurringFrequency);
      FAJournalLine.VALIDATE("Posting Date",WORKDATE);
      FAJournalLine.VALIDATE("FA Posting Date",WORKDATE);
      FAJournalLine.VALIDATE("FA Posting Type",FAJournalLine."FA Posting Type"::"Acquisition Cost");
      FAJournalLine.VALIDATE("FA No.",FANo);
      FAJournalLine.VALIDATE(Amount,LibraryRandom.RandDec(1000,2));  // Using Random Number Generator for Amount.
      FAJournalLine.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      FAJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DeleteGeneralJournalLine@131(DepreciationBookCode@1000 : Code[10]);
    VAR
      GenJournalLine@1002 : Record 81;
      FAJournalSetup@1001 : Record 5605;
    BEGIN
      FAJournalSetup.GET(DepreciationBookCode,'');
      GenJournalLine.SETRANGE("Journal Template Name",FAJournalSetup."Gen. Jnl. Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",FAJournalSetup."Gen. Jnl. Batch Name");
      GenJournalLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE DepreciationWithFixedAsset@15(BalAccount@1000 : Boolean);
    VAR
      DepreciationBook@1006 : Record 5611;
      FixedAsset@1004 : Record 5600;
      FADepreciationBook@1003 : Record 5612;
      FAJournalLine@1002 : Record 5621;
      GenJournalLine@1001 : Record 81;
      FAAllocation@1007 : Record 5615;
    BEGIN
      // 1.Setup: Create Fixed Asset, FA Journal Line, Post FA Journal Line, Create FA Allocation and Create FA Journal Setup.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type",FAJournalLine."FA Posting Type");
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      CreateFAAllocation(FAAllocation,FixedAsset."FA Posting Group");
      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");

      // 2.Exercise: Run the Calculate Depreciation.
      RunCalculateDepreciation(FixedAsset."No.",FADepreciationBook."Depreciation Book Code",BalAccount);

      // 3.Verify: Verify that the line in FA G/L Journal created for Fixed Asset.
      GenJournalLine.SETRANGE("Document No.",FixedAsset."No.");
      GenJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindFALedgerEntry@137(VAR FALedgerEntry@1000 : Record 5601;FANo@1001 : Code[20];FAPostingType@1002 : Option);
    BEGIN
      FALedgerEntry.SETRANGE("FA No.",FANo);
      FALedgerEntry.SETRANGE("FA Posting Type",FAPostingType);
      FALedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindMaintenanceLedgerEntry@88(VAR MaintenanceLedgerEntry@1003 : Record 5625;FANo@1000 : Code[20]);
    BEGIN
      MaintenanceLedgerEntry.SETRANGE("FA No.",FANo);
      MaintenanceLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPostedInvoice@104(PreAssignedNo@1001 : Code[20]) : Code[20];
    VAR
      PurchInvHeader@1000 : Record 122;
    BEGIN
      PurchInvHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      PurchInvHeader.FINDFIRST;
      EXIT(PurchInvHeader."No.");
    END;

    LOCAL PROCEDURE FindVATPostingSetupWithZeroVAT@138(VAR VATPostingSetup@1000 : Record 325);
    BEGIN
      VATPostingSetup.SETFILTER("VAT Bus. Posting Group",'<>''''');
      VATPostingSetup.SETFILTER("VAT Prod. Posting Group",'<>''''');
      VATPostingSetup.SETRANGE("VAT Calculation Type",VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      VATPostingSetup.SETRANGE("VAT %",0);
      VATPostingSetup.FINDFIRST;
    END;

    LOCAL PROCEDURE GetDocumentNo@33(FAJournalBatch@1000 : Record 5620) : Code[20];
    VAR
      NoSeries@1001 : Record 308;
      NoSeriesManagement@1002 : Codeunit 396;
    BEGIN
      NoSeries.GET(FAJournalBatch."No. Series");
      EXIT(NoSeriesManagement.GetNextNo(FAJournalBatch."No. Series",WORKDATE,FALSE));
    END;

    LOCAL PROCEDURE ModifyRecurringOnTemplate@85(VAR FAJournalTemplate@1000 : Record 5619);
    BEGIN
      FAJournalTemplate.VALIDATE(Recurring,TRUE);
      FAJournalTemplate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyInsuranceNo@100(VAR PurchaseLine@1000 : Record 39);
    VAR
      Insurance@1001 : Record 5628;
    BEGIN
      LibraryFixedAsset.FindInsurance(Insurance);
      PurchaseLine.VALIDATE("Insurance No.",Insurance."No.");
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostDepreciationWithDocumentNo@132(DepreciationBookCode@1004 : Code[10]);
    VAR
      GenJournalLine@1005 : Record 81;
      FAJournalSetup@1003 : Record 5605;
      GenJournalBatch@1000 : Record 232;
      NoSeriesManagement@1001 : Codeunit 396;
      DocumentNo@1007 : Code[20];
    BEGIN
      FAJournalSetup.GET(DepreciationBookCode,'');
      GenJournalLine.SETRANGE("Journal Template Name",FAJournalSetup."Gen. Jnl. Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",FAJournalSetup."Gen. Jnl. Batch Name");
      GenJournalLine.FINDSET;
      GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
      DocumentNo := NoSeriesManagement.GetNextNo(GenJournalBatch."No. Series",WORKDATE,FALSE);
      REPEAT
        GenJournalLine.VALIDATE("Document No.",DocumentNo);
        GenJournalLine.VALIDATE(Description,FAJournalSetup."Gen. Jnl. Batch Name");
        GenJournalLine.MODIFY(TRUE);
      UNTIL GenJournalLine.NEXT = 0;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE RunCalculateDepreciation@11(No@1001 : Code[20];DepreciationBookCode@1003 : Code[10];BalAccount@1004 : Boolean);
    VAR
      FixedAsset@1002 : Record 5600;
      CalculateDepreciation@1000 : Report 5692;
      NewPostingDate@1005 : Date;
    BEGIN
      CLEAR(CalculateDepreciation);
      FixedAsset.SETRANGE("No.",No);

      NewPostingDate := WORKDATE;
      CalculateDepreciation.SETTABLEVIEW(FixedAsset);
      CalculateDepreciation.InitializeRequest(
        DepreciationBookCode,NewPostingDate,FALSE,0,NewPostingDate,No,FixedAsset.Description,BalAccount);
      CalculateDepreciation.USEREQUESTPAGE(FALSE);
      CalculateDepreciation.RUN;
    END;

    LOCAL PROCEDURE RunCopyFixedAsset@31(VAR FixedAsset@1001 : Record 5600;NoOfFixedAssetCopied@1002 : Integer);
    VAR
      CopyFixedAsset@1000 : Report 5685;
    BEGIN
      CLEAR(CopyFixedAsset);
      CopyFixedAsset.SetFANo(FixedAsset."No.");
      CopyFixedAsset.InitializeRequest(FixedAsset."No.",NoOfFixedAssetCopied,'',TRUE);
      CopyFixedAsset.USEREQUESTPAGE(FALSE);
      CopyFixedAsset.RUN;
    END;

    LOCAL PROCEDURE RunIndexFixedAssets@60(No@1002 : Code[20];DepBookCode@1003 : Code[10]) IndexFigure : Integer;
    VAR
      FixedAsset@1001 : Record 5600;
      IndexFixedAssets@1000 : Report 5690;
    BEGIN
      CLEAR(IndexFixedAssets);
      FixedAsset.SETRANGE("No.",No);
      IndexFixedAssets.SETTABLEVIEW(FixedAsset);

      // Using the Random Number Generator for New Index Figure.
      IndexFigure := LibraryRandom.RandInt(200);
      IndexFixedAssets.InitializeRequest(DepBookCode,IndexFigure,WORKDATE,WORKDATE,No,No,TRUE);
      IndexFixedAssets.SetIndexAcquisitionCost(TRUE);
      IndexFixedAssets.SetIndexDepreciation(TRUE);
      IndexFixedAssets.USEREQUESTPAGE(FALSE);
      IndexFixedAssets.RUN;
    END;

    LOCAL PROCEDURE RunCopyDepreciationBook@38(No@1000 : Code[20];DepreciationBookCode@1003 : Code[10];DepreciationBookCode2@1004 : Code[10];CopyAcquisitionCost@1005 : Boolean);
    VAR
      FixedAsset@1001 : Record 5600;
      CopyDepreciationBook@1002 : Report 5687;
    BEGIN
      CLEAR(CopyDepreciationBook);
      FixedAsset.SETRANGE("No.",No);
      CopyDepreciationBook.SETTABLEVIEW(FixedAsset);

      // Using the Random Number Generator for Date.
      CopyDepreciationBook.InitializeRequest(
        DepreciationBookCode,DepreciationBookCode2,WORKDATE,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(100)) + 'Y>',WORKDATE),
        No,FixedAsset.Description,FALSE);
      CopyDepreciationBook.SetCopyAcquisitionCost(CopyAcquisitionCost);
      CopyDepreciationBook.USEREQUESTPAGE(FALSE);
      CopyDepreciationBook.RUN;
    END;

    LOCAL PROCEDURE SetAllowCorrectionOfDisposal@77(DepreciationBookCode@1000 : Code[10]);
    VAR
      DepreciationBook@1001 : Record 5611;
    BEGIN
      DepreciationBook.GET(DepreciationBookCode);
      DepreciationBook.VALIDATE("Allow Correction of Disposal",TRUE);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SaveValuesOnTempFixedAsset@153(VAR FixedAssetOld@1000 : Record 5600;FixedAsset@1001 : Record 5600);
    BEGIN
      FixedAssetOld.INIT;
      FixedAssetOld := FixedAsset;
      FixedAssetOld.INSERT(TRUE);
    END;

    LOCAL PROCEDURE IndexationAndIntegrationInBook@1(DepreciationBookCode@1000 : Code[10]);
    VAR
      DepreciationBook@1002 : Record 5611;
    BEGIN
      DepreciationBook.GET(DepreciationBookCode);
      DepreciationBook.VALIDATE("G/L Integration - Acq. Cost",TRUE);
      DepreciationBook.VALIDATE("G/L Integration - Depreciation",TRUE);
      DepreciationBook.VALIDATE("G/L Integration - Write-Down",TRUE);
      DepreciationBook.VALIDATE("G/L Integration - Appreciation",TRUE);
      DepreciationBook.VALIDATE("G/L Integration - Disposal",TRUE);
      DepreciationBook.VALIDATE("Allow Indexation",TRUE);
      DepreciationBook.VALIDATE("G/L Integration - Custom 1",TRUE);
      DepreciationBook.VALIDATE("G/L Integration - Custom 2",TRUE);
      DepreciationBook.VALIDATE("G/L Integration - Maintenance",TRUE);
      DepreciationBook.VALIDATE("Use Same FA+G/L Posting Dates",TRUE);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAcquisitionIntegration@156(DepreciationBookCode@1000 : Code[10];GLIntegrationAcqCost@1002 : Boolean) OldGLIntegrationAcqCost : Boolean;
    VAR
      DepreciationBook@1001 : Record 5611;
    BEGIN
      DepreciationBook.GET(DepreciationBookCode);
      OldGLIntegrationAcqCost := DepreciationBook."G/L Integration - Acq. Cost";
      DepreciationBook.VALIDATE("G/L Integration - Acq. Cost",GLIntegrationAcqCost);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAndPostWithSalvageValue@142(VAR FAJournalLine@1000 : Record 5621;AcqusitionAmount@1002 : Decimal;Amount@1005 : Decimal);
    BEGIN
      FAJournalLine.VALIDATE(Amount,AcqusitionAmount);
      FAJournalLine.VALIDATE("Salvage Value",-Amount);
      FAJournalLine.VALIDATE("Depr. Acquisition Cost",TRUE);
      FAJournalLine.MODIFY(TRUE);
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);
    END;

    LOCAL PROCEDURE UpdateDepreciationBook@125(VAR DepreciationBook@1000 : Record 5611);
    BEGIN
      DepreciationBook.VALIDATE("Use FA Exch. Rate in Duplic.",TRUE);
      DepreciationBook.VALIDATE("G/L Integration - Acq. Cost",TRUE);

      // Using Random Number Generator for Default Exchange Rate.
      DepreciationBook.VALIDATE("Default Exchange Rate",LibraryRandom.RandDec(10,2));
      UpdatePartOfDuplicationList(DepreciationBook,TRUE);
    END;

    LOCAL PROCEDURE UpdateDuplicateBookCode@123(VAR FAJournalLine@1001 : Record 5621;DepreciationBookCode@1000 : Code[10]);
    BEGIN
      FAJournalLine.VALIDATE("Duplicate in Depreciation Book",DepreciationBookCode);
      FAJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateFAAllocation@23(VAR FAAllocation@1000 : Record 5615);
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      FAAllocation.SETRANGE(Code,FAAllocation.Code);
      FAAllocation.SETRANGE("Allocation Type",FAAllocation."Allocation Type");
      FAAllocation.FINDSET;

      // Using Random Number Generator for Allocation Percent.
      REPEAT
        FAAllocation.VALIDATE("Account No.",FindGLAccountWithNormalTypeVATSetup);
        FAAllocation.VALIDATE("Allocation %",LibraryRandom.RandDec(20,2));
        GLAccount.NEXT;
      UNTIL FAAllocation.NEXT = 0;
      FAAllocation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateFAJournalSetup@134(VAR FAJournalSetup@1000 : Record 5605);
    VAR
      FAJournalSetup2@1005 : Record 5605;
    BEGIN
      FAJournalSetup2.SETRANGE("Depreciation Book Code",LibraryFixedAsset.GetDefaultDeprBook);
      FAJournalSetup2.FINDFIRST;
      FAJournalSetup.TRANSFERFIELDS(FAJournalSetup2,FALSE);
      FAJournalSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePartOfDuplicationList@127(VAR DepreciationBook@1000 : Record 5611;PartOfDuplicationList@1001 : Boolean);
    BEGIN
      DepreciationBook.VALIDATE("Part of Duplication List",PartOfDuplicationList);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUseDuplicationList@130(VAR FAJournalLine@1000 : Record 5621);
    BEGIN
      FAJournalLine.VALIDATE("Use Duplication List",TRUE);
      FAJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateWriteDownAmount@43(VAR GenJournalLine@1000 : Record 81;Amount@1001 : Decimal);
    BEGIN
      // Using the Random Number Generator for Amount.
      GenJournalLine.VALIDATE(Amount,-(Amount - LibraryRandom.RandInt(10)));
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAmountInFAJournalLine@13(VAR FAJournalLine@1000 : Record 5621;Amount@1001 : Decimal);
    BEGIN
      // Using the Random Number Generator for Amount.
      FAJournalLine.VALIDATE(Amount,-(Amount - LibraryRandom.RandInt(10)));
      FAJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePostingDateInFASetup@167();
    VAR
      FASetup@1000 : Record 5603;
    BEGIN
      FASetup.GET;

      // Using the Random function for Date.
      FASetup.VALIDATE("Allow FA Posting From",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE));
      FASetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateWriteDownAccount@54(FAPostingGroupCode@1000 : Code[10]);
    VAR
      GLAccount@1001 : Record 15;
      FAPostingGroup@1002 : Record 5606;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      FAPostingGroup.GET(FAPostingGroupCode);
      FAPostingGroup.VALIDATE("Write-Down Account",GLAccount."No.");
      FAPostingGroup.VALIDATE("Write-Down Acc. on Disposal",GLAccount."No.");
      FAPostingGroup.VALIDATE("Write-Down Bal. Acc. on Disp.",GLAccount."No.");
      FAPostingGroup.VALIDATE("Write-Down Expense Acc.",GLAccount."No.");
      FAPostingGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAppreciationAccount@56(FAPostingGroupCode@1000 : Code[10]);
    VAR
      GLAccount@1001 : Record 15;
      FAPostingGroup@1002 : Record 5606;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      FAPostingGroup.GET(FAPostingGroupCode);
      FAPostingGroup.VALIDATE("Appreciation Account",GLAccount."No.");
      FAPostingGroup.VALIDATE("Appreciation Bal. Account",GLAccount."No.");
      FAPostingGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDepreciationCustomField@141(DepreciationBook@1001 : Record 5611);
    BEGIN
      DepreciationBook.VALIDATE("Use Custom 1 Depreciation",TRUE);
      DepreciationBook.VALIDATE("G/L Integration - Acq. Cost",FALSE);
      DepreciationBook.VALIDATE("G/L Integration - Depreciation",FALSE);
      DepreciationBook.VALIDATE("G/L Integration - Custom 1",FALSE);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDepreciationEndingDate@140(VAR FADepreciationBook@1003 : Record 5612);
    BEGIN
      FADepreciationBook.VALIDATE("Depr. Ending Date (Custom 1)",FADepreciationBook."Depreciation Ending Date");
      FADepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDisposalAmount@181(VAR GenJournalLine@1000 : Record 81;Amount@1001 : Decimal);
    BEGIN
      // Using the Random Number Generator for Amount.
      GenJournalLine.VALIDATE(Amount,-(Amount - LibraryRandom.RandInt(10)));
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInsuranceBook@110(VAR FASetup@1000 : Record 5603;InsuranceDeprBook@1001 : Code[10]);
    BEGIN
      FASetup.VALIDATE("Insurance Depr. Book",InsuranceDeprBook);
      FASetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDefaultDepreciationBook@82(VAR FASetup@1000 : Record 5603);
    BEGIN
      FASetup.VALIDATE("Default Depr. Book");
      FASetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateTemplateOnJournalSetup@120(VAR FAJournalSetup@1000 : Record 5605;DepreciationBookCode@1001 : Code[10]);
    BEGIN
      FAJournalSetup.SETRANGE("Depreciation Book Code",DepreciationBookCode);
      FAJournalSetup.FINDFIRST;
      FAJournalSetup.VALIDATE("FA Jnl. Template Name");
      FAJournalSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePostingSetupGeneralLine@177(VAR GenJournalLine@1000 : Record 81);
    VAR
      VATPostingSetup@1001 : Record 325;
    BEGIN
      FindVATPostingSetupWithZeroVAT(VATPostingSetup);
      GenJournalLine.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      GenJournalLine.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      GenJournalLine.VALIDATE("Gen. Posting Type",GenJournalLine."Gen. Posting Type"::Purchase);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDepreciationYear@106(VAR FADepreciationBook@1000 : Record 5612);
    BEGIN
      FADepreciationBook.VALIDATE("No. of Depreciation Years",LibraryRandom.RandInt(10));
      FADepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDepreciationMethod@114(VAR FADepreciationBook@1000 : Record 5612);
    BEGIN
      FADepreciationBook.VALIDATE("Depreciation Method",FADepreciationBook."Depreciation Method"::"Declining-Balance 1");
      FADepreciationBook.VALIDATE("Declining-Balance %",LibraryRandom.RandInt(50));
      FADepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateValuesOnFixedAsset@143(VAR FixedAssetOld@1007 : Record 5600;FixedAsset@1000 : Record 5600);
    VAR
      Employee@1004 : Record 5200;
      FAClass@1003 : Record 5607;
      FASubclass@1002 : Record 5608;
      FALocation@1001 : Record 5609;
      Vendor@1006 : Record 23;
    BEGIN
      // Update Responsible Employee, FA Class Code, FA Subclass Code, FA Location Code, Vendor No.,
      // Maintenance Vendor No. on Fixed Asset.
      LibraryFixedAsset.FindEmployee(Employee);
      LibraryFixedAsset.FindFAClass(FAClass);
      LibraryFixedAsset.FindFASubclass(FASubclass);
      LibraryFixedAsset.FindFALocation(FALocation);
      FindVendor(Vendor);
      FixedAsset.VALIDATE("Responsible Employee",Employee."No.");
      FixedAsset.VALIDATE("FA Class Code",FAClass.Code);
      FixedAsset.VALIDATE("FA Subclass Code",FASubclass.Code);
      FixedAsset.VALIDATE("FA Location Code",FALocation.Code);
      FixedAsset.VALIDATE("Vendor No.",Vendor."No.");
      FixedAsset.VALIDATE("Maintenance Vendor No.",Vendor."No.");
      SaveValuesOnTempFixedAsset(FixedAssetOld,FixedAsset);
      FixedAsset.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyCancelFALedgerEntry@29(FALedgerEntry@1000 : Record 5601);
    VAR
      GenJournalLine@1001 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Account No.",FALedgerEntry."FA No.");
      GenJournalLine.FINDFIRST;
      GenJournalLine.TESTFIELD("FA Error Entry No.",FALedgerEntry."Entry No.");
    END;

    LOCAL PROCEDURE VerifyValuesInFALedgerEntry@5(FAJournalLine@1000 : Record 5621);
    VAR
      FALedgerEntry@1002 : Record 5601;
    BEGIN
      FALedgerEntry.SETRANGE("FA No.",FAJournalLine."FA No.");
      FALedgerEntry.FINDLAST;
      FALedgerEntry.TESTFIELD("Document Type",FAJournalLine."Document Type");
      FALedgerEntry.TESTFIELD("FA Posting Type",FAJournalLine."FA Posting Type");
      FALedgerEntry.TESTFIELD(Amount,FAJournalLine.Amount);
    END;

    LOCAL PROCEDURE VerifyPurchaseInvoiceLine@32(PurchaseHeader@1000 : Record 38;No@1002 : Code[20];LineAmount@1004 : Decimal);
    VAR
      PurchInvHeader@1001 : Record 122;
      PurchInvLine@1003 : Record 123;
    BEGIN
      PurchInvHeader.SETRANGE("Pre-Assigned No.",PurchaseHeader."No.");
      PurchInvHeader.FINDFIRST;
      PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
      PurchInvLine.FINDFIRST;
      PurchInvLine.TESTFIELD("No.",No);
      PurchInvLine.TESTFIELD("Line Amount",LineAmount);
    END;

    LOCAL PROCEDURE VerifyAmountInFATransaction@55(FANo@1000 : Code[20];FAPostingType@1003 : Option);
    VAR
      FALedgerEntry@1001 : Record 5601;
      GLEntry@1002 : Record 17;
    BEGIN
      FindFALedgerEntry(FALedgerEntry,FANo,FAPostingType);
      GLEntry.GET(FALedgerEntry."G/L Entry No.");
      GLEntry.TESTFIELD(Amount,FALedgerEntry.Amount);
    END;

    LOCAL PROCEDURE VerifyAmountInFAEntry@51(FANo@1000 : Code[20];FAPostingType@1002 : Option;Amount@1003 : Decimal);
    VAR
      FALedgerEntry@1001 : Record 5601;
    BEGIN
      FindFALedgerEntry(FALedgerEntry,FANo,FAPostingType);
      FALedgerEntry.FINDLAST;
      FALedgerEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyAmountInFAJournalLine@42(FANo@1000 : Code[20];DepreciationBookCode@1004 : Code[10];Amount@1001 : Decimal);
    VAR
      FAJournalLine@1003 : Record 5621;
    BEGIN
      FAJournalLine.SETRANGE("Depreciation Book Code",DepreciationBookCode);
      FAJournalLine.SETRANGE("FA No.",FANo);
      FAJournalLine.FINDFIRST;
      FAJournalLine.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyFixedAssetsIndexEntry@124(AccountNo@1000 : Code[20];IndexFigure@1002 : Integer);
    VAR
      GenJournalLine@1001 : Record 81;
      FALedgerEntry@1003 : Record 5601;
      GeneralLedgerSetup@1004 : Record 98;
      GenJournalLineAmount@1005 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      FindFALedgerEntry(FALedgerEntry,AccountNo,FALedgerEntry."FA Posting Type"::"Acquisition Cost");
      GenJournalLine.SETRANGE("Account No.",AccountNo);
      GenJournalLine.FINDFIRST;
      GenJournalLineAmount := FALedgerEntry.Amount - (FALedgerEntry.Amount * IndexFigure / 100);
      Assert.AreNearlyEqual(
        -GenJournalLineAmount,GenJournalLine.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(IndexAmountErr,GenJournalLine.FIELDCAPTION(Amount)));
    END;

    LOCAL PROCEDURE VerifyIndexationEntry@159(AccountNo@1000 : Code[20]);
    VAR
      GenJournalLine@1001 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Account No.",AccountNo);
      GenJournalLine.FINDFIRST;
      GenJournalLine.TESTFIELD("Index Entry",TRUE);
    END;

    LOCAL PROCEDURE VerifyDisposalAmount@64(SalesLine@1000 : Record 37);
    VAR
      SalesInvoiceHeader@1001 : Record 112;
      FALedgerEntry@1002 : Record 5601;
    BEGIN
      SalesInvoiceHeader.SETRANGE("Pre-Assigned No.",SalesLine."Document No.");
      SalesInvoiceHeader.FINDFIRST;
      FALedgerEntry.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      FALedgerEntry.SETRANGE(Amount,-SalesLine."Line Amount");
      FALedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyDepreciationBookAttached@68(FANo@1000 : Code[20];DepreciationBookCode@1001 : Code[10]);
    VAR
      FADepreciationBook@1002 : Record 5612;
    BEGIN
      FADepreciationBook.SETRANGE("FA No.",FANo);
      FADepreciationBook.SETRANGE("Depreciation Book Code",DepreciationBookCode);
      FADepreciationBook.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyDepreciationFALedger@180(FANo@1001 : Code[20];DepreciationBookCode@1000 : Code[10]);
    VAR
      FALedgerEntry@1002 : Record 5601;
    BEGIN
      WITH FALedgerEntry DO BEGIN
        SETRANGE("FA No.",FANo);
        SETRANGE("FA Posting Type","FA Posting Type"::Depreciation);
        FINDFIRST;
        TESTFIELD("Depreciation Book Code",DepreciationBookCode)
      END;
    END;

    LOCAL PROCEDURE VerifyMaintenanceEntry@89(GenJournalLine@1000 : Record 81);
    VAR
      MaintenanceLedgerEntry@1001 : Record 5625;
    BEGIN
      FindMaintenanceLedgerEntry(MaintenanceLedgerEntry,GenJournalLine."Account No.");
      MaintenanceLedgerEntry.TESTFIELD(Amount,GenJournalLine.Amount);
    END;

    LOCAL PROCEDURE VerifyMaintenanceEntryReversal@111(GenJournalLine@1000 : Record 81);
    VAR
      MaintenanceLedgerEntry@1001 : Record 5625;
      Amount@1002 : Decimal;
    BEGIN
      MaintenanceLedgerEntry.SETRANGE("FA No.",GenJournalLine."Account No.");
      MaintenanceLedgerEntry.SETRANGE("Document No.",GenJournalLine."Document No.");
      MaintenanceLedgerEntry.FINDSET;
      REPEAT
        Amount += MaintenanceLedgerEntry.Amount;
      UNTIL MaintenanceLedgerEntry.NEXT = 0;
      Assert.AreEqual(0,Amount,ReversalErr);
    END;

    LOCAL PROCEDURE VerifyCoverageLedger@102(DocumentNo@1001 : Code[20];FANo@1002 : Code[20];InsuranceNo@1003 : Code[20]);
    VAR
      InsCoverageLedgerEntry@1000 : Record 5629;
    BEGIN
      InsCoverageLedgerEntry.SETRANGE("Document No.",DocumentNo);
      InsCoverageLedgerEntry.SETRANGE("FA No.",FANo);
      InsCoverageLedgerEntry.SETRANGE("Insurance No.",InsuranceNo);
      InsCoverageLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyGeneralJournalLine@145(AccountNo@1000 : Code[20];DepreciationBookCode@1001 : Code[10];Amount@1002 : Decimal);
    VAR
      GenJournalLine@1003 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::"Fixed Asset");
      GenJournalLine.SETRANGE("Account No.",AccountNo);
      GenJournalLine.FINDFIRST;
      GenJournalLine.TESTFIELD("Depreciation Book Code",DepreciationBookCode);
      GenJournalLine.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyValuesOnFixedAsset@155(FixedAsset@1000 : Record 5600);
    VAR
      FixedAsset2@1001 : Record 5600;
    BEGIN
      FixedAsset2.GET(FixedAsset."No.");
      FixedAsset2.TESTFIELD(Description,FixedAsset.Description);
      FixedAsset2.TESTFIELD("Responsible Employee",FixedAsset."Responsible Employee");
      FixedAsset2.TESTFIELD("FA Class Code",FixedAsset."FA Class Code");
      FixedAsset2.TESTFIELD("FA Subclass Code",FixedAsset."FA Subclass Code");
      FixedAsset2.TESTFIELD("FA Location Code",FixedAsset."FA Location Code");
      FixedAsset2.TESTFIELD("Vendor No.",FixedAsset."Vendor No.");
      FixedAsset2.TESTFIELD("Maintenance Vendor No.",FixedAsset."Maintenance Vendor No.");
    END;

    LOCAL PROCEDURE VerifyFAJournalTemplate@144(JnlSelected@1001 : Boolean;FAJnlTemplateName@1002 : Text[250];FAJnlTemplateDescription@1003 : Text[250]);
    VAR
      FAJournalTemplate@1000 : Record 5619;
    BEGIN
      // Verify that new record has been created or not.
      FAJournalTemplate.FINDFIRST;
      FAJournalTemplate.TESTFIELD(Name,FAJnlTemplateName);
      FAJournalTemplate.TESTFIELD(Description,FAJnlTemplateDescription);
      Assert.IsTrue(JnlSelected,STRSUBSTNO(TemplateSelectionErr,FAJournalTemplate.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyFirstFAJournalTemplateCreation@160(RecurringJnl@1008 : Boolean;FAJnlTemplateName@1170000000 : Text[250];FAJnlTemplateDescription@1170000001 : Text[250]);
    VAR
      FAJournalLine@1001 : Record 5621;
      FAJournalTemplate@1002 : Record 5619;
      FAJnlManagement@1003 : Codeunit 5638;
      JnlSelected@1004 : Boolean;
    BEGIN
      // Setup: Setup Demo Data and make Cost Journal Setup Blank.
      Initialize;

      // Exercise: Execute TemplateSelection function of FAJnlManagement.
      FAJournalTemplate.DELETEALL;
      FAJournalLine.DELETEALL;
      FAJnlManagement.TemplateSelection(FAJournalTemplate."Page ID",RecurringJnl,FAJournalLine,JnlSelected);

      // Verify: Verify that if no FA Journal Template is present in setup then a default setup will be created
      VerifyFAJournalTemplate(JnlSelected,FAJnlTemplateName,FAJnlTemplateDescription);
      Assert.IsTrue(FAJournalLine.ISEMPTY,STRSUBSTNO(FAJournlLineErr,FAJournalLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE PostFAAcquisition@168(FixedAsset@1001 : Record 5600;FADepreciationBook@1000 : Record 5612) FAJournalLineAmount : Decimal;
    VAR
      FAJournalLine@1003 : Record 5621;
    BEGIN
      CreateFAJournalLine(
        FAJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        FAJournalLine."Document Type"::Invoice,FAJournalLine."FA Posting Type"::"Acquisition Cost");
      FAJournalLineAmount := FAJournalLine.Amount;
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);
    END;

    LOCAL PROCEDURE PostFADisposal@169(FixedAsset@1001 : Record 5600;FADepreciationBook@1000 : Record 5612;FAJournalLineAmount@1002 : Decimal);
    VAR
      GenJournalLine@1003 : Record 81;
    BEGIN
      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");
      CreateFAGLJournal(
        GenJournalLine,FixedAsset."No.",FADepreciationBook."Depreciation Book Code",
        GenJournalLine."FA Posting Type"::Disposal);
      BalanceAccountFAGLJournalLine(GenJournalLine);
      UpdateDisposalAmount(GenJournalLine,FAJournalLineAmount);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE InitSetup@151(VAR AllowPostingMainAsset@1001 : Boolean);
    VAR
      FASetup@1000 : Record 5603;
    BEGIN
      FASetup.GET;
      AllowPostingMainAsset := FASetup."Allow Posting to Main Assets";
      FASetup."Allow Posting to Main Assets" := TRUE;
      FASetup.MODIFY;
    END;

    LOCAL PROCEDURE ResetSetup@152(AllowPostingMainAsset@1000 : Boolean);
    VAR
      FASetup@1001 : Record 5603;
    BEGIN
      FASetup.GET;
      FASetup."Allow Posting to Main Assets" := AllowPostingMainAsset;
      FASetup.MODIFY;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@27(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@113(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Handler for confirmation messages, always send positive reply.
      Reply := TRUE;
    END;

    [PageHandler]
    PROCEDURE FAPageHandler@149(VAR FixedAssetJournal@1000 : TestPage 5629);
    VAR
      FAJnlBatchName@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FAJnlBatchName);

      // Verify: FA Journal Page open with the same value of created batch when open through batches.
      Assert.AreEqual(FixedAssetJournal.CurrentJnlBatchName.VALUE,FAJnlBatchName,STRSUBSTNO(ExpectedBatchErr,FAJnlBatchName));
    END;

    LOCAL PROCEDURE FindGLAccountWithNormalTypeVATSetup@162() : Code[20];
    VAR
      GLAccount@1001 : Record 15;
      VATPostingSetup@1000 : Record 325;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibraryERM.FindGLAccount(GLAccount);
      GLAccount.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE FindCustomer@146(VAR Customer@1000 : Record 18);
    BEGIN
      // Filter Customer so that errors are not generated due to mandatory fields.
      Customer.SETFILTER("Customer Posting Group",'<>''''');
      Customer.SETFILTER("Gen. Bus. Posting Group",'<>''''');
      Customer.SETFILTER("Payment Terms Code",'<>''''');
      Customer.SETRANGE(Blocked,Customer.Blocked::" ");
      // For Complete Shipping Advice, partial shipments are disallowed, hence select Partial.
      Customer.SETRANGE("Shipping Advice",Customer."Shipping Advice"::Partial);
      Customer.FINDFIRST;
    END;

    LOCAL PROCEDURE FindVendor@150(VAR Vendor@1000 : Record 23);
    BEGIN
      // Filter Vendor so that errors are not generated due to mandatory fields.
      Vendor.SETFILTER("Vendor Posting Group",'<>''''');
      Vendor.SETFILTER("Gen. Bus. Posting Group",'<>''''');
      Vendor.SETRANGE(Blocked,Vendor.Blocked::" ");
      Vendor.FINDFIRST;
    END;

    BEGIN
    {
      // [FEATURE] [Fixed Asset]
      Unsupported version tags:
      NA: Unable to Execute
      ES: Unable to Execute
      SE: Unable to Execute

      Test for Fixed Asset:
       1. Test the Cancelation of FA Ledger Entries.
       2. Test the Copy Fixed Assets functionality.
       3. Test the Calculate Depreciation with Bal Account.
       4. Test the Calculate Depreciation without Bal Account.
       5. Test the FA Allocation.
       6. Test the Purchase of Fixed Assets from Invoice.
       7. Test the FA Ledger Entries.
       8. Test the Posting of FA Journal line.
       9. Test the Write-Down of Fixed Asset.
      10. Test the Appreciation of Fixed Asset.
      11. Test the Indexation of a Fixed Asset.
      12. Test the Partial Disposal of an Asset Functionality.
      13. Test the posting of FA G/L Journal.
      14. Test the Setup new Depreciation Book.
      15. Test Copy FA Ledger Entries from Depreciation Book.
      16. Test Copy Depreciation Book.
      17. Test the Balance Account Correctly Inserted.
      18. Test Fixed Asset Setup.
      19. Test Fixed Asset Posting Group.
      20. Test Fixed Asset Journal Setup.
      21. Test FA Journal Template.
      22. Test Depreciation Table and Line Creation.
      23. Test Main Assets Components.
      24. Test New Maintenance Code.
      25. Test New Insurance Types in Insurance Setup.
      26. Test Posting of FA Maintenance.
      27. Test Reversal of FA Maintenance.
      28. Test the Fixed Asset Acquisition with FA Journal.
      29. Test the Fixed Asset Depreciation with FA Journal.
      30. Test the Fixed Asset Write Down with FA Journal.
      31. Test the Fixed Asset Appreciation with FA Journal.
      32. Test the Fixed Asset Posting with FA Posting Type as Custom 1 in FA Journal.
      33. Test the Fixed Asset Posting with FA Posting Type as Custom 2 in FA Journal.
      34. Test the Fixed Asset Posting with FA Posting Type as Salvage Value in FA Journal.
      35. Test the Posting Date Error Message while posting Fixed Asset form FA Journal.
      36. Test the Posting Date Error Message while posting Fixed Asset form FA GL Journal.
      37. Test the Fixed Asset Disposal Error Message While Posting From FA G/L Journal.
      38. Test the Fixed Asset Disposal From FA G/L Journal.
      49. Test the Message 'Allow Correction of Disposal must not be No in Depreciation Book Code' from FA G/L Journal.
      40. Test the Fixed Asset Disposal with 'Allow correction in Disposal'.
      41. Test the FA Acquisition cost Error From FA G/L Journal.
      42. Test Create New Fixed Asset.
      43. Test Post Acquisition with Insurance.
      44. Test Depreciation Method.
      45. Test the Post Fixed Asset Journal through FA Journal Batch.
      46. Test the Post Recurring Fixed Asset Journal through FA Journal Batch.
      47. Test Duplicate Entry in General Journal Line after Posting FA Journal with Duplicate in Depreciation Book Code.
      48. Test Duplicate Entry in General Journal Line after Posting FA Journal with Use Duplication List as True.
      49. Test the Generates correct entry in FA G/L Journal after executing the Index Fixed Assets.
      50. Test FA Ledger Entry after Posting FA Journal Line with "Depr. Acquisition Cost" field as True.
      51. Test Create New Fixed Asset and Update Values on Fixed Asset.
      52. Test change existing Purchase line Type(FA) to Item.

      --------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                 Test TFS ID
      --------------------------------------------------------------------------------------------------------------
      CancelFALedgerEntries, CopyFixedAssets, DepreciationWithBalAccount, DepreciationWithoutBalAccount   141322
      FAAllocation, FixedAssetPurchaseInvoice, WriteDownFixedAsset, AppreciationFixedAsset                141322
      FixedAssetIndexation, PartialDisposalOfFA, PostFAGLJournal, SetupDepreciationBook                   141322
      CopyDepreciationBookEntries, CopyDepreciationBook, InputBalanceAccount                              141322
      PostFixedAssetJournal                                                                               141323

      TFS_TS_ID = 205965
      Covers Test cases:
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      SetupInsuranceBook                                                            122820
      AcquisitionCostAccount,AccumulatedDepreciationAccount,CostAcquisitionDisposal 122821
      AccumulatedDisposalAccount,GainsDisposalAccount,LossDisposalAccount           122821
      MaintenanceExpenseAccount,DepreciationExpenseAccount,CreatePostingGroup       122821
      JournalSetup,JournalSetupBatch                                                122824
      JournalTemplate,JournalTemplateWithRecurring                                  122825
      DepreciationDocument                                                          122826
      MainAssetComponent                                                            122829
      Maintenance                                                                   122830
      InsuranceType                                                                 122831

      TFS_TS_ID = 206316
      Covers Test cases:
      ---------------------------
      Test Function Name   TFS ID
      ---------------------------
      PostFAMaintenance    122859
      ReverseFAMaintenance 122860

      --------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                 Test TFS ID
      --------------------------------------------------------------------------------------------------------------
      FAAcquisitionFromFAJournal, FixedAssetDepreciation, WriteDownFixedAssetFAJournal                    205975
      AppreciationOfFAFromFAJournal, Custom1FixedAssetFAJournal, Custom2FixedAssetFAJournal               205975
      SalvageValueOfFAFromFAJournal, PostingDateErrorFromFAJournal, PostingDateErrorFAGLJournal           205975
      FADisposalErrorFromFAGLJournal, FADisposalFromFAGLJournal, AllowCorrectionOfDisposalError           205975
      SetCorrectionOfDisposal, FAAcquisitionError                                                         205975

      TFS_TS_ID = 206118
      Covers Test cases:
      -----------------------------------------------------------
      Test Function Name                                   TFS ID
      -----------------------------------------------------------
      CreateFixedAsset                                     130459
      PostAcquisitionWithInsurance                         130461
      LinearDepreciationMethod,NonLinearDepreciationMethod 130460

      TFS_TS_ID = 206085
      Covers Test cases:
      ------------------------------------------------------------------------------------
      Test Function Name                                                         TFS ID
      ------------------------------------------------------------------------------------
      PostFAJournalBatch,PostRecurringFAJournalBatch                             141321

      TFS_TS_ID = 205985
      Covers Test cases:
      ------------------------------------------------------------------------------------
      Test Function Name                                                         TFS ID
      ------------------------------------------------------------------------------------
      FAJournalWithDuplicateBookCode, FAJournalWithUseDuplicateList              141544

      TFS_TS_ID = 217009
      Covers Test cases:
      ------------------------------------------------------------------------------------
      Test Function Name                                                         TFS ID
      ------------------------------------------------------------------------------------
      IndexFixedAssets                                                           129073

      TFS_TS_ID = 206091
      Covers Test case:
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      DepreciationWithAcqCostTrue                                                   141318

      TFS_TS_ID = 237335
      Covers Test case:
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      CreateAndModifyFixedAsset                                                     143242

      TFS_TS_ID = 313716
      Covers Test case:
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      TestFirstFAJournalTemplateCreationRecurringTrue,                              COD5638
      TestFirstFAJournalTemplateCreationRecurringFalse,
      TestFAJournalBatchNameOnFAJournalPage.

      TFS_TS_ID = 89682
      Covers Test case:
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      UpdateExistingLineTypeToItemOnPurchaseOrder                                   354653
    }
    END.
  }
}

