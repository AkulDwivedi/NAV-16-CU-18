OBJECT Codeunit 138005 SMB ExtendedTexts
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryRandom@1000 : Codeunit 130440;
      LibrarySmallBusiness@1005 : Codeunit 132213;
      LibraryService@1004 : Codeunit 131902;
      LibraryResource@1006 : Codeunit 130511;
      LibraryERM@1007 : Codeunit 131300;
      Assert@1009 : Codeunit 130000;
      EntendedTableNameTextType@1003 : 'Standard Text,G/L Account,Item,Resource';
      ExtendedLineTextTxt@1002 : TextConst 'ENU=Text';

    [Test]
    PROCEDURE RenameWhenLanguageRecordIsUnique@7();
    VAR
      ExtendedTextHeader@1000 : Record 279;
      Language@1001 : Record 8;
      Item@1002 : Record 27;
      NumberOfLines@1003 : Integer;
    BEGIN
      CreateItem(Item);

      CreateLanguageSpecificExtendedTextHeader(ExtendedTextHeader,EntendedTableNameTextType::Item,Item."No.");
      NumberOfLines := LibraryRandom.RandIntInRange(1,100);
      CreateExtendedTextLines(ExtendedTextHeader,NumberOfLines);

      Language.SETFILTER(Code,'<>%1',ExtendedTextHeader."Language Code");
      Language.FINDFIRST;

      ExtendedTextHeader.RENAME(
        ExtendedTextHeader."Table Name",
        ExtendedTextHeader."No.",
        Language.Code,
        ExtendedTextHeader."Text No.");

      Assert.AreEqual(1,ExtendedTextHeader."Text No.",'Text No. was not updated correctly');

      VerifyLines(ExtendedTextHeader,NumberOfLines);
    END;

    [Test]
    PROCEDURE RenameWhenSameLanguageRecordExists@45();
    VAR
      AllLanguagesExtendedTextHeader@1000 : Record 279;
      SpecificLanguageExtendedTextHeader@1001 : Record 279;
      Item@1004 : Record 27;
      NumberOfLines@1002 : Integer;
    BEGIN
      CreateItem(Item);

      CreateAllLanguageCodesExtendedTextHeader(AllLanguagesExtendedTextHeader,EntendedTableNameTextType::Item,Item."No.");
      CreateLanguageSpecificExtendedTextHeader(SpecificLanguageExtendedTextHeader,EntendedTableNameTextType::Item,Item."No.");

      NumberOfLines := LibraryRandom.RandIntInRange(1,100);
      CreateExtendedTextLines(AllLanguagesExtendedTextHeader,NumberOfLines);
      CreateExtendedTextLines(SpecificLanguageExtendedTextHeader,NumberOfLines);

      SpecificLanguageExtendedTextHeader.RENAME(
        SpecificLanguageExtendedTextHeader."Table Name",
        SpecificLanguageExtendedTextHeader."No.",
        '',
        SpecificLanguageExtendedTextHeader."Text No.");

      Assert.AreEqual(
        AllLanguagesExtendedTextHeader."Text No." + 1,SpecificLanguageExtendedTextHeader."Text No.",
        'Text No. was not updated correctly');

      VerifyLines(AllLanguagesExtendedTextHeader,NumberOfLines);
      VerifyLines(SpecificLanguageExtendedTextHeader,NumberOfLines);
    END;

    [Test]
    PROCEDURE SettingLanguageCodeRemovesAllLanguageCodes@8();
    VAR
      ExtendedTextHeader@1001 : Record 279;
      Item@1004 : Record 27;
      Language@1000 : Record 8;
    BEGIN
      CreateItem(Item);

      CreateAllLanguageCodesExtendedTextHeader(ExtendedTextHeader,EntendedTableNameTextType::Item,Item."No.");
      Language.FINDFIRST;
      ExtendedTextHeader.VALIDATE("Language Code",Language.Code);
      Assert.AreEqual(FALSE,ExtendedTextHeader."All Language Codes",'All Language codes should be removed once language is set');
    END;

    [Test]
    PROCEDURE SettingAllLanguageCodesRemovesLanguageCode@4();
    VAR
      ExtendedTextHeader@1001 : Record 279;
      Item@1004 : Record 27;
    BEGIN
      CreateItem(Item);

      CreateLanguageSpecificExtendedTextHeader(ExtendedTextHeader,EntendedTableNameTextType::Item,Item."No.");

      ExtendedTextHeader.VALIDATE("All Language Codes",TRUE);
      Assert.AreEqual('',ExtendedTextHeader."Language Code",'Language code was not deleted by setting All Language Codes');
    END;

    [Test]
    PROCEDURE TestAllLanguagesFalseLanguageCodeBlankSetup@6();
    VAR
      ExtendedTextHeader@1000 : Record 279;
      Item@1001 : Record 27;
    BEGIN
      // Some customers do not have language code set to Customer and Vendor
      // Thus their rules will have All Languages Codes = FALSE and Language Code = ''
      // This test case covers that this setup is still possible
      CreateItem(Item);
      CreateAllLanguageCodesExtendedTextHeader(ExtendedTextHeader,EntendedTableNameTextType::Item,Item."No.");

      // Execute
      ExtendedTextHeader.VALIDATE("All Language Codes",FALSE);
      ExtendedTextHeader.MODIFY;

      // Verify
      ExtendedTextHeader.GET(
        ExtendedTextHeader."Table Name",ExtendedTextHeader."No.",ExtendedTextHeader."Language Code",ExtendedTextHeader."Text No.");
      Assert.AreEqual(FALSE,ExtendedTextHeader."All Language Codes",'Wrong value for All Language Codes');
      Assert.AreEqual('',ExtendedTextHeader."Language Code",'Wrong value for Language Code');
    END;

    LOCAL PROCEDURE CreateLanguageSpecificExtendedTextHeader@44(VAR ExtendedTextHeader@1001 : Record 279;TableName@1002 : 'Standard Text,G/L Account,Item,Resource';No@1000 : Code[20]);
    VAR
      Language@1005 : Record 8;
    BEGIN
      SetDefaultValuesToExtendedTextHeader(ExtendedTextHeader,TableName,No);
      Language.FINDFIRST;
      ExtendedTextHeader.VALIDATE("Language Code",Language.Code);
      ExtendedTextHeader.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateAllLanguageCodesExtendedTextHeader@17(VAR ExtendedTextHeader@1000 : Record 279;TableName@1001 : 'Standard Text,G/L Account,Item,Resource';No@1003 : Code[20]);
    BEGIN
      SetDefaultValuesToExtendedTextHeader(ExtendedTextHeader,TableName,No);
      ExtendedTextHeader.INSERT(TRUE);
    END;

    LOCAL PROCEDURE SetDefaultValuesToExtendedTextHeader@5(VAR ExtendedTextHeader@1001 : Record 279;TableName@1000 : 'Standard Text,G/L Account,Item,Resource';No@1002 : Code[20]);
    BEGIN
      ExtendedTextHeader.INIT;
      ExtendedTextHeader.VALIDATE("Table Name",TableName);
      ExtendedTextHeader.VALIDATE("No.",No);
    END;

    LOCAL PROCEDURE CreateExtendedTextLines@56(VAR ExtendedTextHeader@1000 : Record 279;NumberOfLines@1001 : Integer);
    VAR
      ExtendedTextLine@1003 : Record 280;
      I@1002 : Integer;
    BEGIN
      FOR I := 1 TO NumberOfLines DO BEGIN
        LibraryService.CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
        ExtendedTextLine.Text := ExtendedLineTextTxt + FORMAT(I);
        ExtendedTextLine.MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateItem@12(VAR Item@1000 : Record 27);
    BEGIN
      LibrarySmallBusiness.CreateItem(Item);
    END;

    LOCAL PROCEDURE VerifyLines@32(VAR ExtendedTextHeader@1000 : Record 279;NumberOfLines@1001 : Integer);
    VAR
      ExtendedTextLine@1003 : Record 280;
    BEGIN
      ExtendedTextLine.SETRANGE("No.",ExtendedTextHeader."No.");
      ExtendedTextLine.SETRANGE("Table Name",ExtendedTextHeader."Table Name");
      ExtendedTextLine.SETRANGE("Text No.",ExtendedTextHeader."Text No.");
      ExtendedTextLine.SETRANGE("Language Code",ExtendedTextHeader."Language Code");

      ExtendedTextLine.FIND('-');
      Assert.AreEqual(NumberOfLines,ExtendedTextLine.COUNT,'Wrong number of lines');

      REPEAT
        Assert.AreEqual(1,STRPOS(ExtendedTextLine.Text,ExtendedLineTextTxt),'Text value was lost');
      UNTIL ExtendedTextLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalculateCaption@14(No@1003 : Code[20];Description@1002 : Text[50];LanguageCode@1001 : Code[20];TxtNo@1000 : Integer) : Text;
    BEGIN
      EXIT(
        FORMAT(No) + ' ' +
        Description + ' ' +
        FORMAT(LanguageCode) + ' ' +
        FORMAT(TxtNo));
    END;

    [Test]
    PROCEDURE VerifyCaption@1();
    VAR
      ExtendedTextHeader@1002 : Record 279;
      Item@1001 : Record 27;
      Resource@1000 : Record 156;
      GLAccount@1003 : Record 15;
      Language@1004 : Record 8;
    BEGIN
      CreateItem(Item);
      Language.FINDFIRST;
      CreateLanguageSpecificExtendedTextHeader(ExtendedTextHeader,EntendedTableNameTextType::Item,Item."No.");
      Assert.AreEqual(
        ExtendedTextHeader.GetCaption,
        CalculateCaption(Item."No.",Item.Description,Language.Code,ExtendedTextHeader."Text No."),
        'Caption is broken');

      LibraryResource.CreateResourceNew(Resource);
      CreateLanguageSpecificExtendedTextHeader(ExtendedTextHeader,EntendedTableNameTextType::Resource,Resource."No.");
      Assert.AreEqual(
        ExtendedTextHeader.GetCaption,
        CalculateCaption(Resource."No.",Resource.Name,Language.Code,ExtendedTextHeader."Text No."),
        'Caption is broken');

      LibraryERM.CreateGLAccount(GLAccount);
      CreateLanguageSpecificExtendedTextHeader(ExtendedTextHeader,EntendedTableNameTextType::"G/L Account",GLAccount."No.");
      Assert.AreEqual(
        ExtendedTextHeader.GetCaption,
        CalculateCaption(GLAccount."No.",GLAccount.Name,Language.Code,ExtendedTextHeader."Text No."),
        'Caption is broken');

      // Blank std txt
      CreateLanguageSpecificExtendedTextHeader(ExtendedTextHeader,EntendedTableNameTextType::"Standard Text",'');
      Assert.AreEqual(
        ExtendedTextHeader.GetCaption,
        CalculateCaption('','',Language.Code,ExtendedTextHeader."Text No."),
        'Caption is broken');
    END;

    BEGIN
    {
      // [FEATURE] [Extended Text] [SMB]
    }
    END.
  }
}

