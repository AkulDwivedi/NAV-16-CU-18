OBJECT Codeunit 137071 SCM Supply Planning -II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalTemplate@1012 : Record 82;
      ItemJournalBatch@1013 : Record 233;
      ConsumptionItemJournalTemplate@1025 : Record 82;
      ConsumptionItemJournalBatch@1024 : Record 233;
      OutputItemJournalTemplate@1026 : Record 82;
      OutputItemJournalBatch@1027 : Record 233;
      LocationYellow@1020 : Record 14;
      LocationRed@1014 : Record 14;
      LocationSilver@1017 : Record 14;
      LocationBlue@1015 : Record 14;
      LocationSilver2@1030 : Record 14;
      LocationGreen@1033 : Record 14;
      LocationInTransit@1009 : Record 14;
      LibraryInventory@1000 : Codeunit 132201;
      LibraryItemTracking@1044 : Codeunit 130502;
      LibraryPlanning@1005 : Codeunit 132203;
      LibraryUtility@1007 : Codeunit 131000;
      LibraryManufacturing@1011 : Codeunit 132202;
      LibraryWarehouse@1023 : Codeunit 132204;
      LibraryCosting@1028 : Codeunit 132200;
      LibrarySales@1010 : Codeunit 130509;
      LibraryPurchase@1029 : Codeunit 130512;
      LibraryRandom@1001 : Codeunit 130440;
      Assert@1002 : Codeunit 130000;
      LibraryVariableStorage@1016 : Codeunit 131004;
      LibrarySetupStorage@1046 : Codeunit 131009;
      isInitialized@1006 : Boolean;
      RequisitionLineMustNotExist@1008 : TextConst 'ENU=Requisition Line must not exist for Item %1.';
      ItemFilter@1021 : TextConst 'ENU=%1|%2';
      AvailabilityWarningConfirmationMessage@1003 : TextConst 'ENU=There are availability warnings on one or more lines.';
      ItemNotPlanned@1004 : TextConst 'ENU=Not all items were planned. A total of 1 items were not planned.';
      NewWorksheetMessage@1022 : TextConst 'ENU=You are now in worksheet';
      NothingToCreateMessage@1019 : TextConst 'ENU=There is nothing to create.';
      CannotChangeQuantityError@1018 : TextConst 'ENU="You cannot change Quantity because the order line is associated with sales order "';
      ProductionOrderMustNotExist@1031 : TextConst 'ENU=Production Order Must No Exist for Item %1.';
      TransferOrderNotExistError@1032 : TextConst 'ENU=The Transfer Header does not exist.';
      ReservationEntryExistMsg@1034 : TextConst 'ENU=One or more reservation entries exist for the item with';
      ShipFieldErr@1035 : TextConst 'ENU=The Ship field on Sales Header is not correct.';
      ReceiveFieldErr@1036 : TextConst 'ENU=The Receive field on Purchase Header is not correct.';
      SalesOrderStatusErr@1037 : TextConst 'ENU=The Status of the Sales Order is not correct.';
      PurchaseOrderStatusErr@1038 : TextConst 'ENU=The Status of the Purchase Order is not correct.';
      RequisitionLineNoErr@1039 : TextConst 'ENU=There should be no extra empty line generated before the generated line with Item.';
      InventoryPickCreatedMsg@1040 : TextConst 'ENU=Number of Invt. Pick activities created';
      BinCodeInWarehouseEntryErr@1041 : TextConst 'ENU=Bin Code in Warehouse Entry is not correct.';
      QuantityInWarehouseEntryErr@1042 : TextConst 'ENU=Quantity in Warehouse Entry is not correct.';
      ReservationEntryErr@1043 : TextConst 'ENU=Reservation Entry with Item Ledger Entry is not empty.';
      NumberOfErrorsErr@1045 : TextConst 'ENU=Wrong number of errors.';
      ReservationEntrySurplusErr@1047 : TextConst '@@@="%1: Expected Quantity Value; %2: Actual Quantity Value.";ENU=Reservation Entry Surplus Quantity must be %1, actual value is %2.';
      PlanningComponentReseredQtyErr@1048 : TextConst '@@@=%1: Field Name;ENU=In "Planning Component" table the fields "%1" is wrong.';

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanWithMPSPartialSalesShipUsingForecastOnSameDateLFLItem@90();
    VAR
      Item@1010 : Record 27;
      ProductionForecastEntry@1009 : ARRAY [3] OF Record 99000852;
      SalesHeader@1008 : Record 36;
      SalesLine@1007 : Record 37;
      ItemJournalLine@1006 : Record 83;
      RequisitionWkshName@1005 : Record 245;
      RequisitionLine@1004 : Record 246;
      PlanningWorksheet@1003 : TestPage 99000852;
      OldCombinedMPSMRPCalculation@1011 : Boolean;
    BEGIN
      // Setup: Create Lot for Lot Item. Create Production Forecast with multiple Entries.
      Initialize;
      OldCombinedMPSMRPCalculation := UpdateManufacturingSetup(FALSE);  // Combined MPS/MRP Calculation of Manufacturing Setup -FALSE.
      CreateLotForLotItem(Item);
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",WORKDATE,FALSE);  // Boolean - FALSE, for single Forecast Entry.

      // Update Item inventory.
      UpdateInventory(ItemJournalLine,Item."No.",WORKDATE,LibraryRandom.RandDec(100,2) + 100);  // Large Random Quantity Required.

      // Create Sales Order. Update Quantity To Ship on Sales Line. Post Sales Order.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",ItemJournalLine.Quantity + LibraryRandom.RandDec(10,2));
      UpdateQuantityToShipOnSalesLine(SalesLine,ItemJournalLine.Quantity);  // Quantity to Ship equal to Item Inventory Quantity.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // Exercise: Calculate regenerative Plan with MPS - TRUE and MRP - FALSE for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      VerifyRequisitionLineWithDueDate(
        Item,RequisitionLine."Action Message"::New,SalesLine.Quantity - SalesLine."Qty. to Ship",0,SalesLine."Shipment Date");

      // Teardown.
      UpdateManufacturingSetup(OldCombinedMPSMRPCalculation);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanWithMPSSalesShipUsingForecastForParentLFLItemOnly@81();
    VAR
      Item@1001 : Record 27;
      ChildItem@1002 : Record 27;
      ProductionBOMHeader@1003 : Record 99000771;
      ProductionForecastEntry@1010 : ARRAY [3] OF Record 99000852;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      RequisitionWkshName@1008 : Record 245;
      RequisitionLine@1011 : Record 246;
      RequisitionLine2@1006 : Record 246;
      ManufacturingSetup@1013 : Record 99000765;
      PlanningWorksheet@1007 : TestPage 99000852;
      OldCombinedMPSMRPCalculation@1000 : Boolean;
      ForecastDate@1009 : Date;
      NewShipmentDate@1012 : Date;
    BEGIN
      // Setup: Create Lot for Lot Parent and Child Item. Create And Certify Production BOM.
      Initialize;
      OldCombinedMPSMRPCalculation := UpdateManufacturingSetup(FALSE);  // Combined MPS/MRP Calculation of Manufacturing Setup - FALSE.
      CreateLotForLotItem(ChildItem);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem."No.");
      CreateLotForLotItem(Item);
      UpdateProductionBOMNoOnItem(Item,ProductionBOMHeader."No.");

      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,TRUE);  // Boolean - TRUE, for multiple Forecast Entries.

      // Create and Post Sales Order for Parent Item.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));  // Random Quantity not important.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // Exercise: Calculate regenerative Plan with MPS - TRUE and MRP - FALSE for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type for Parent Item.
      ManufacturingSetup.GET;
      NewShipmentDate := CALCDATE('<-' + FORMAT(ManufacturingSetup."Default Safety Lead Time"),SalesLine."Shipment Date");
      VerifyRequisitionLineWithDueDate(Item,RequisitionLine."Action Message"::New,SalesLine.Quantity,0,NewShipmentDate);
      VerifyRequisitionLineWithDueDate(
        Item,RequisitionLine."Action Message"::New,ProductionForecastEntry[1]."Forecast Quantity (Base)",0,
        ProductionForecastEntry[1]."Forecast Date");
      VerifyRequisitionLineWithDueDate(
        Item,RequisitionLine."Action Message"::New,ProductionForecastEntry[2]."Forecast Quantity (Base)",0,
        ProductionForecastEntry[2]."Forecast Date");
      VerifyRequisitionLineWithDueDate(
        Item,RequisitionLine."Action Message"::New,ProductionForecastEntry[3]."Forecast Quantity (Base)",0,
        ProductionForecastEntry[3]."Forecast Date");

      // Verify that no Requisition line is created for Child Item.
      FilterOnRequisitionLine(RequisitionLine2,ChildItem."No.");
      Assert.IsTrue(RequisitionLine2.ISEMPTY,STRSUBSTNO(RequisitionLineMustNotExist,ChildItem."No."));

      // Teardown.
      UpdateManufacturingSetup(OldCombinedMPSMRPCalculation);
    END;

    [Test]
    PROCEDURE CalcPlanForSalesAndMultiPurchaseWithLocationAndVariant@130();
    VAR
      Item@1000 : Record 27;
      ItemVariant@1006 : Record 5401;
      ItemVariant2@1007 : Record 5401;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      PurchaseHeader@1003 : Record 38;
      PurchaseHeader2@1010 : Record 38;
      PurchaseLine@1005 : Record 39;
      RequisitionLine@1014 : Record 246;
      Quantity@1004 : Decimal;
    BEGIN
      // Setup: Create Lot for Lot Item with Stockkeeping Units.
      Initialize;
      CreateLotForLotItemSKUSetup(Item,ItemVariant,ItemVariant2,LocationYellow.Code,LocationRed.Code);
      Quantity := LibraryRandom.RandDec(5,2);  // Random Quantity not important

      // Create Sales Order. Update Location and Variant Code on Sales Line.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity);
      UpdateLocationAndVariantOnSalesLine(SalesLine,LocationYellow.Code,ItemVariant.Code);

      // Create multiple Purchase Orders with different Locations and Variant.
      CreatePurchaseOrderWithLocationAndVariant(PurchaseHeader,Item."No.",LocationYellow.Code,ItemVariant.Code,Quantity);
      CreatePurchaseOrderWithLocationAndVariant(PurchaseHeader2,Item."No.",LocationRed.Code,ItemVariant2.Code,Quantity);

      // Exercise: Calculate Plan for Planning Worksheet with Location Yellow and Red Filter.
      CalcRegenPlanForPlanWkshWithLocation(Item."No.",Item."No.",LocationYellow.Code,LocationRed.Code);

      // Verify: Verify Planning Worksheet for Location, Variant, Action Message and Quantity.
      SelectPurchaseLine(PurchaseLine,Item."No.");
      VerifyRequisitionLineForLocationAndVariant(
        Item,RequisitionLine."Action Message"::New,SalesLine.Quantity,0,SalesLine."Shipment Date",LocationYellow.Code,
        ItemVariant.Code);
      VerifyRequisitionLineForLocationAndVariant(
        Item,RequisitionLine."Action Message"::Cancel,0,Quantity,PurchaseLine."Expected Receipt Date",LocationYellow.Code,
        ItemVariant.Code);
      VerifyRequisitionLineWithVariant(RequisitionLine."Action Message"::Cancel,0,Quantity,LocationRed.Code,ItemVariant2.Code);
    END;

    [Test]
    PROCEDURE CalcPlanForSalesWithLocationAndVariant@129();
    VAR
      Item@1006 : Record 27;
      ItemVariant@1005 : Record 5401;
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      RequisitionLine@1000 : Record 246;
    BEGIN
      // Setup: Create Lot for Lot Item with Stockkeeping Units with single Location and Variant.
      Initialize;
      CreateLotForLotItemSKUSetup(Item,ItemVariant,ItemVariant,LocationYellow.Code,'');

      // Create Sales Order, update Location and Variant Code on Sales Line.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(5,2));  // Random Quantity not important.
      UpdateLocationAndVariantOnSalesLine(SalesLine,LocationYellow.Code,ItemVariant.Code);

      // Exercise: Calculate Plan for Planning Worksheet with Location Filter.
      CalcRegenPlanForPlanWkshWithLocation(Item."No.",Item."No.",LocationYellow.Code,'');

      // Verify: Verify Planning Worksheet for Location, Variant, Action Message and Quantity.
      VerifyRequisitionLineForLocationAndVariant(
        Item,RequisitionLine."Action Message"::New,SalesLine.Quantity,0,SalesLine."Shipment Date",LocationYellow.Code,
        ItemVariant.Code);
    END;

    [Test]
    PROCEDURE CalcPlanForNewVariantOnProductionOrderComponent@128();
    VAR
      Item@1009 : Record 27;
      ChildItem@1008 : Record 27;
      ItemVariant@1007 : Record 5401;
      ProductionBOMHeader@1003 : Record 99000771;
      ProductionOrder@1002 : Record 5405;
      RequisitionLine@1011 : Record 246;
    BEGIN
      // Setup: Create Lot for Lot Item with Stockkeeping Units with single Location and Variant. Create And Certify Production BOM.
      Initialize;
      CreateLotForLotItemSKUSetup(ChildItem,ItemVariant,ItemVariant,LocationYellow.Code,'');
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem."No.");
      CreateLotForLotItem(Item);
      UpdateProductionBOMNoOnItem(Item,ProductionBOMHeader."No.");

      // Create and Refresh Firm Planned Production Order and update Variant Code on Production Order Component.
      CreateAndRefreshFirmPlannedProductionOrderWithLocation(
        ProductionOrder,Item."No.",LocationYellow.Code,LibraryRandom.RandInt(10));  // Random Quantity not important.
      UpdateVariantCodeOnProdOrderComponent(ChildItem."No.",ItemVariant.Code);

      // Exercise: Calculate Plan for Production Order Component for Planning Worksheet with Location Filter.
      CalcRegenPlanForPlanWkshWithLocation(ChildItem."No.",ChildItem."No.",LocationYellow.Code,'');

      // Verify: Verify Planning Worksheet for Location, Variant, Action Message and Quantity.
      VerifyRequisitionLineForLocationAndVariant(
        ChildItem,RequisitionLine."Action Message"::New,ProductionOrder.Quantity,0,ProductionOrder."Starting Date",
        LocationYellow.Code,ItemVariant.Code);
    END;

    [Test]
    PROCEDURE CalcPlanForSalesAndPurchaseWithoutVariantForDifferentLocations@172();
    VAR
      Item@1002 : Record 27;
      ItemVariant@1001 : Record 5401;
      SalesHeader@1006 : Record 36;
      SalesLine@1005 : Record 37;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      RequisitionLine@1009 : Record 246;
      Quantity@1007 : Decimal;
    BEGIN
      // Setup: Create Lot for Lot Item with Stockkeeping Units.
      Initialize;
      CreateLotForLotItemSKUSetup(Item,ItemVariant,ItemVariant,LocationYellow.Code,LocationRed.Code);
      Quantity := LibraryRandom.RandDec(10,2);  // Random Quantity not important.

      // Create Sales Order. Update Location Code on Sales Line. Variant Code is not updated.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity);
      UpdateLocationAndVariantOnSalesLine(SalesLine,LocationYellow.Code,'');

      // Create Purchase Order. Update Location Code on Purchase Line. Variant Code is not updated.
      CreatePurchaseOrderWithLocationAndVariant(PurchaseHeader,Item."No.",LocationRed.Code,'',Quantity);

      // Exercise: Calculate Plan for Planning Worksheet with Location Yellow and Red Filter.
      CalcRegenPlanForPlanWkshWithLocation(Item."No.",Item."No.",LocationYellow.Code,LocationRed.Code);

      // Verify: Verify Planning Worksheet for Location, Variant, Action Message and Quantity.
      SelectPurchaseLine(PurchaseLine,Item."No.");
      VerifyRequisitionLineForLocationAndVariant(
        Item,RequisitionLine."Action Message"::New,SalesLine.Quantity,0,SalesLine."Shipment Date",LocationYellow.Code,'');
      VerifyRequisitionLineForLocationAndVariant(
        Item,RequisitionLine."Action Message"::Cancel,0,PurchaseLine.Quantity,PurchaseLine."Expected Receipt Date",LocationRed.Code,
        '');
    END;

    [Test]
    PROCEDURE CalcPlanForSalesWithLocationAndNewVariantOnPlanningComponent@127();
    VAR
      Item@1002 : Record 27;
      ChildItem@1013 : Record 27;
      ItemVariant@1001 : Record 5401;
      ProductionBOMHeader@1014 : Record 99000771;
      SalesHeader@1006 : Record 36;
      SalesLine@1005 : Record 37;
      RequisitionLine@1009 : Record 246;
      PlanningComponent@1003 : Record 99000829;
    BEGIN
      // Setup: Create Lot for Lot Item with Stockkeeping Units with single Location and Variant.
      Initialize;
      CreateLotForLotItemSKUSetup(ChildItem,ItemVariant,ItemVariant,LocationYellow.Code,'');
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem."No.");
      CreateLotForLotItem(Item);
      UpdateReplenishmentSystemOnItem(Item);
      UpdateProductionBOMNoOnItem(Item,ProductionBOMHeader."No.");

      // Create Sales Order. Update Location Code on Sales Line. Variant Code is not updated.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandInt(10));  // Random Quantity not important.
      UpdateLocationAndVariantOnSalesLine(SalesLine,LocationYellow.Code,'');

      // Calculate Plan for Planning Worksheet with Location Yellow Filter. Update Variant Code On Planning Component.
      CalcRegenPlanForPlanWkshWithLocation(Item."No.",Item."No.",LocationYellow.Code,'');
      SelectRequisitionLine(RequisitionLine,Item."No.");
      SelectPlanningComponent(PlanningComponent,RequisitionLine."Worksheet Template Name",RequisitionLine."Journal Batch Name");
      UpdateVariantCodeOnPlanningComponent(PlanningComponent,ItemVariant.Code);

      // Exercise: Calculate Plan for Parent and Child Item for Planning Worksheet with single Location.
      CalcRegenPlanForPlanWkshWithLocation(Item."No.",ChildItem."No.",LocationYellow.Code,'');

      // Verify: Verify Planning Worksheet for Location, Action Message and Quantity. Variant is not updated for Planning Component on Planning Worksheet.
      VerifyRequisitionLineForLocationAndVariant(
        Item,RequisitionLine."Action Message"::New,SalesLine.Quantity,0,SalesLine."Shipment Date",LocationYellow.Code,'');
      VerifyRequisitionLineForLocationAndVariant(
        ChildItem,RequisitionLine."Action Message"::New,SalesLine.Quantity,0,PlanningComponent."Due Date",LocationYellow.Code,'');
    END;

    [Test]
    PROCEDURE CalcPlanWithNegativeInventoryWithLocationAndVariant@79();
    VAR
      Item@1002 : Record 27;
      ItemVariant@1001 : Record 5401;
      RequisitionLine@1009 : Record 246;
      ItemJournalLine@1005 : Record 83;
      Quantity@1007 : Decimal;
    BEGIN
      // Setup: Create Lot for Lot Item with Stockkeeping Units with single Location and Variant.
      Initialize;
      CreateLotForLotItemSKUSetup(Item,ItemVariant,ItemVariant,LocationYellow.Code,'');

      // Update Inventory with Negative Adjustment.
      Quantity := LibraryRandom.RandDec(10,2);  // Random Quantity not important
      UpdateInventoryWithLocationAndVariant(
        ItemJournalLine,Item."No.",Quantity,ItemJournalLine."Entry Type"::"Negative Adjmt.",LocationYellow.Code,ItemVariant.Code);

      // Exercise: Calculate Plan for Planning Worksheet with Location Yellow.
      CalcRegenPlanForPlanWkshWithLocation(Item."No.",Item."No.",LocationYellow.Code,'');

      // Verify: Verify Planning Worksheet for Location, Variant, Action Message and Quantity.
      VerifyRequisitionLineWithItem(
        Item,RequisitionLine."Action Message"::New,ItemJournalLine.Quantity,0,LocationYellow.Code,ItemVariant.Code);
    END;

    [Test]
    PROCEDURE CalcNetChangePlanWithSalesForLFLItems@149();
    VAR
      Item@1002 : Record 27;
      ChildItem@1001 : Record 27;
      SalesHeader@1006 : Record 36;
      SalesLine@1005 : Record 37;
      RequisitionLine@1003 : Record 246;
      ProductionBOMLine@1008 : Record 99000772;
    BEGIN
      // Setup: Create Lot for Lot Parent and Child Item. Create and Certify Production BOM.
      Initialize;
      CreateLotForLotItemSetup(ChildItem,Item);

      // Create Sales Order for Parent Item.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));  // Random Quantity not important.

      // Exercise: Calculate Net Change Plan for Parent Item and Child Item.
      CalcNetChangePlanForPlanWkshForMultipleItems(Item."No.",ChildItem."No.");

      // Verify: Verify Planning Worksheet for Action Message, Quantity and Reference Order Type on Planning Worksheet.
      SelectProductionBOMLine(ProductionBOMLine,Item."Production BOM No.");
      VerifyRequisitionLineWithItem(Item,RequisitionLine."Action Message"::New,SalesLine.Quantity,0,'','');
      VerifyRequisitionLineWithItem(ChildItem,RequisitionLine."Action Message"::New,ProductionBOMLine.Quantity,0,'','');
    END;

    [Test]
    PROCEDURE CalcNetChangePlanWithSalesAndNewUOMForLFLChildItem@148();
    VAR
      Item@1002 : Record 27;
      ChildItem@1001 : Record 27;
      SalesHeader@1006 : Record 36;
      SalesLine@1005 : Record 37;
      RequisitionLine@1003 : Record 246;
      PlanningComponent@1004 : Record 99000829;
    BEGIN
      // Setup: Create Lot for Lot Parent and Child Item. Create and Certify Production BOM.
      Initialize;
      CreateLotForLotItemSetup(ChildItem,Item);

      // Create Sales Order with Parent Item.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));  // Random Quantity not important.

      // Calculate Plan for Planning Worksheet with Parent and Child Item.
      CalcRegenPlanForPlanWkshWithLocation(Item."No.",ChildItem."No.",'','');

      // Update Quantity on Sales Line. Change Base Unit Of Measure on Child Item.
      UpdateQuantityOnSalesLine(SalesLine,SalesLine.Quantity + LibraryRandom.RandDec(10,2));  // Quantity more than previous Quantity on Sales Line.
      CreateAndUpdateUnitOfMeasureOnItem(ChildItem);

      // Exercise: Calculate Net Change Plan for Parent Item and Child Item.
      CalcNetChangePlanForPlanWkshForMultipleItems(Item."No.",ChildItem."No.");

      // Verify: Verify Planning Worksheet for Action Message, Quantity and Reference Order Type on Planning Worksheet. Verify Unit of Measure is updated on Planning Worksheet for child Item.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      SelectPlanningComponent(PlanningComponent,RequisitionLine."Worksheet Template Name",RequisitionLine."Journal Batch Name");
      VerifyRequisitionLineForUnitOfMeasure(
        Item,Item."Base Unit of Measure",RequisitionLine."Action Message"::New,SalesLine.Quantity,0,SalesLine."Shipment Date");
      VerifyRequisitionLineForUnitOfMeasure(
        ChildItem,ChildItem."Base Unit of Measure",RequisitionLine."Action Message"::New,PlanningComponent."Expected Quantity",0,
        PlanningComponent."Due Date");
    END;

    [Test]
    PROCEDURE CalcNetChangePlanWithSalesForNewLocationOnPlanningComponent@147();
    VAR
      Item@1002 : Record 27;
      ChildItem@1001 : Record 27;
      SalesHeader@1006 : Record 36;
      SalesLine@1005 : Record 37;
      RequisitionLine@1003 : Record 246;
      PlanningComponent@1004 : Record 99000829;
    BEGIN
      // Setup: Create Lot for Lot Parent and Child Item. Create and Certify Production BOM.
      Initialize;
      CreateLotForLotItemSetup(ChildItem,Item);

      // Create Sales Order for Parent Item.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));  // Random Quantity not important.

      // Calculate Plan for Planning Worksheet with Parent and Child Item.
      CalcRegenPlanForPlanWkshWithLocation(Item."No.",ChildItem."No.",'','');

      // Update Location Code on Planning Component.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      UpdateLocationOnPlanningComponent(PlanningComponent,RequisitionLine,LocationYellow.Code);

      // Exercise: Calculate Net Change Plan for Parent Item and Child Item.
      CalcNetChangePlanForPlanWkshForMultipleItems(Item."No.",ChildItem."No.");

      // Verify: Verify Location is updated for Child Item on Requisition Line. Verify Action Message, Quantity and Reference Order Type on Planning Worksheet.
      VerifyRequisitionLineWithDueDate(Item,RequisitionLine."Action Message"::New,SalesLine.Quantity,0,SalesLine."Shipment Date");
      VerifyRequisitionLineForLocationAndVariant(
        ChildItem,RequisitionLine."Action Message"::New,PlanningComponent."Expected Quantity",0,PlanningComponent."Due Date",
        LocationYellow.Code,'');
    END;

    [Test]
    PROCEDURE CalcNetChangePlanWithoutAnyDemandLFLItem@144();
    VAR
      Item@1002 : Record 27;
      RequisitionLine@1003 : Record 246;
      EndDate@1007 : Date;
    BEGIN
      // Setup: Create Lot for Lot Item.
      Initialize;
      CreateLotForLotItem(Item);

      // Exercise: Calculate Net Change Plan for Planning Worksheet without any demand.
      EndDate := GetRequiredDate(5,10,WORKDATE,1);
      LibraryPlanning.CalcNetChangePlanForPlanWksh(Item,WORKDATE,EndDate,FALSE);

      // Verify: Verify that no Requisition line is created for Requisition Worksheet, when no demand exist.
      FilterOnRequisitionLine(RequisitionLine,Item."No.");
      Assert.IsTrue(RequisitionLine.ISEMPTY,STRSUBSTNO(RequisitionLineMustNotExist,Item."No."));
    END;

    [Test]
    PROCEDURE CalcNetChangePlanForFirmPlannedProdOrderForLFLParentItem@143();
    VAR
      Item@1002 : Record 27;
      ChildItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ProductionOrder2@1000 : Record 5405;
      RequisitionLine@1004 : Record 246;
      ProductionBOMLine@1005 : Record 99000772;
    BEGIN
      // Setup: Create Lot for Lot Parent and Child Item. Create And Certify Production BOM.
      Initialize;
      CreateLotForLotItemSetup(ChildItem,Item);
      UpdateReplenishmentSystemOnItem(ChildItem);  // Update Replenishment System to Production Order on Child Item.

      // Create and Refresh Firm Planned Production Order.
      CreateAndRefreshProductionOrder(
        ProductionOrder,ChildItem."No.",ProductionOrder.Status::"Firm Planned",LibraryRandom.RandDec(10,2));  // Random Quantity not important for Test.

      // Calculate Plan for Planning Worksheet with Parent and Child Item.
      CalcRegenPlanForPlanWkshWithLocation(Item."No.",ChildItem."No.",'','');

      // Create and Refresh Firm Planned Production Order for Parent Item.
      CreateAndRefreshProductionOrder(
        ProductionOrder2,Item."No.",ProductionOrder2.Status::"Firm Planned",LibraryRandom.RandDec(10,2));  // Random Quantity not important for Test.

      // Exercise: Calculate Net Change Plan for Parent Item and Child Item.
      CalcNetChangePlanForPlanWkshForMultipleItems(Item."No.",ChildItem."No.");

      // Verify: Verify Item is updated on Requisition Line. Verify Action Message, Quantity and Reference Order Type on Planning Worksheet.
      SelectProductionBOMLine(ProductionBOMLine,Item."Production BOM No.");
      VerifyRequisitionLineWithDueDate(
        ChildItem,RequisitionLine."Action Message"::Cancel,0,ProductionOrder.Quantity,ProductionOrder."Due Date");
      VerifyRequisitionLineWithItem(ChildItem,RequisitionLine."Action Message"::New,ProductionBOMLine.Quantity,0,'','');
      VerifyRequisitionLineWithItem(Item,RequisitionLine."Action Message"::Cancel,0,ProductionOrder2.Quantity,'','');
    END;

    [Test]
    PROCEDURE CalcNetChangePlanWithNewQuantityOnFirmPlannedProdOrder@133();
    VAR
      Item@1002 : Record 27;
      RequisitionLine@1003 : Record 246;
      ProductionOrder@1008 : Record 5405;
      EndDate@1000 : Date;
    BEGIN
      // Setup: Create Lot for Lot Item. Create and Refresh Firm Planned Production Order.
      Initialize;
      CreateLotForLotItem(Item);
      UpdateReplenishmentSystemOnItem(Item);
      CreateAndRefreshProductionOrder(
        ProductionOrder,Item."No.",ProductionOrder.Status::"Firm Planned",LibraryRandom.RandDec(10,2));  // Random Quantity not important for Test.

      // Calculate Regenerative Plan for Planning Worksheet.
      EndDate := GetRequiredDate(10,30,WORKDATE,1);  // End Date relative to Workdate.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,EndDate);

      // Update Quantity and Refresh Firm Planned Production Order.
      UpdateQuantityAndRefreshProductionOrder(
        ProductionOrder,Item."No.",ProductionOrder.Quantity + LibraryRandom.RandDec(10,2));  // Quantity more than previous Quantity on Production Order.

      // Exercise: Calculate Net Change Plan for Planning Worksheet.
      LibraryPlanning.CalcNetChangePlanForPlanWksh(Item,WORKDATE,EndDate,FALSE);

      // Verify: Verify Original Quantity is modified on Planning Worksheet.
      VerifyRequisitionLineWithDueDate(
        Item,RequisitionLine."Action Message"::Cancel,0,ProductionOrder.Quantity,ProductionOrder."Due Date");
    END;

    [Test]
    PROCEDURE CalcNetChangePlanWithConsumptionJournalForLFLItem@161();
    VAR
      Item@1000 : Record 27;
      ChildItem@1004 : Record 27;
      ProductionOrder@1001 : Record 5405;
      SalesHeader@1009 : Record 36;
      SalesLine@1008 : Record 37;
      RequisitionLine@1005 : Record 246;
      ItemJournalLine@1006 : Record 83;
      ProdOrderComponent@1007 : Record 5407;
    BEGIN
      // Setup: Create Lot for Lot Parent and Child Item. Create And Certify Production BOM.
      Initialize;
      CreateLotForLotItemSetup(ChildItem,Item);
      UpdateReplenishmentSystemOnItem(ChildItem);

      // Create and Refresh Released Production Order.
      CreateAndRefreshProductionOrder(ProductionOrder,Item."No.",ProductionOrder.Status::Released,LibraryRandom.RandDec(10,2));  // Random Quantity not important.

      // Calculate Regenerative Change Plan for Planning Worksheet for Parent Item and Child Item..
      CalcRegenPlanForPlanWkshWithLocation(Item."No.",ChildItem."No.",'','');

      // Create and Post Consumption Journal.
      UpdateInventory(ItemJournalLine,ChildItem."No.",WORKDATE,LibraryRandom.RandDec(100,2));  // Larger Inventory Value required for Test.
      CreateAndPostConsumptionJournal(ProductionOrder."No.");

      // Create Sales Order For Child Item.
      CreateSalesOrder(SalesHeader,SalesLine,ChildItem."No.",ProductionOrder.Quantity + LibraryRandom.RandDec(10,2));  // Quantity more than Production Order Quantity.

      // Exercise: Calculate Net Change Plan for Planning Worksheet for Parent and Child Item.
      CalcNetChangePlanForPlanWkshForMultipleItems(Item."No.",ChildItem."No.");

      // Verify: Verify Planning Worksheet for Action Message, Quantity and Reference Order Type on Planning Worksheet.
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder.Status::Released,ProductionOrder."No.",ChildItem."No.");
      VerifyRequisitionLineWithItem(Item,RequisitionLine."Action Message"::Cancel,0,ProductionOrder.Quantity,'','');
      VerifyRequisitionLineWithItem(
        ChildItem,RequisitionLine."Action Message"::New,
        SalesLine.Quantity - (ItemJournalLine.Quantity - ProdOrderComponent."Expected Quantity"),0,'','');
    END;

    [Test]
    PROCEDURE CalcNetChangePlanWithOutputJournalForLFLItem@160();
    VAR
      Item@1000 : Record 27;
      ChildItem@1004 : Record 27;
      ProductionOrder@1001 : Record 5405;
      SalesHeader@1007 : Record 36;
      SalesLine@1006 : Record 37;
      RequisitionLine@1005 : Record 246;
    BEGIN
      // Setup: Create Lot for Lot Parent and Child Item. Create And Certify Production BOM.
      Initialize;
      CreateLotForLotItemSetup(ChildItem,Item);
      UpdateReplenishmentSystemOnItem(ChildItem);

      // Create and Refresh Released Production Order.
      CreateAndRefreshProductionOrder(ProductionOrder,Item."No.",ProductionOrder.Status::Released,LibraryRandom.RandDec(10,2));  // Random Quantity not important.

      // Calculate Regenerative Change Plan for Planning Worksheet for Parent Item and Child Item..
      CalcRegenPlanForPlanWkshWithLocation(Item."No.",ChildItem."No.",'','');

      // Create and Post Output Journal.
      CreateAndPostOutputJournal(ProductionOrder."No.");

      // Create Sales Order For Child Item.
      CreateSalesOrder(SalesHeader,SalesLine,ChildItem."No.",ProductionOrder.Quantity + LibraryRandom.RandDec(10,2));  // Quantity more than Production Order Quantity.

      // Exercise: Calculate Net Change Plan for Planning Worksheet for Parent and Child Item.
      CalcNetChangePlanForPlanWkshForMultipleItems(Item."No.",ChildItem."No.");

      // Verify: Verify Planning Worksheet for Action Message, Quantity and Reference Order Type on Planning Worksheet.
      VerifyRequisitionLineWithItem(Item,RequisitionLine."Action Message"::Cancel,0,ProductionOrder.Quantity,'','');
      VerifyRequisitionLineWithItem(ChildItem,RequisitionLine."Action Message"::New,SalesLine.Quantity,0,'','');
    END;

    [Test]
    [HandlerFunctions(MessageHandler,PlanningErrorLogPageHandler)]
    PROCEDURE CalcRegenPlanWithRoutingStatusNewLFLItem@159();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1005 : Record 246;
      SalesHeader@1004 : Record 36;
      SalesLine@1006 : Record 37;
    BEGIN
      // Setup: Create Lot for Lot Item.
      Initialize;
      CreateLotForLotItem(Item);
      UpdateReplenishmentSystemOnItem(Item);

      // Create Routing With Status New and create Sales Order.
      CreateRoutingAndUpdateItem(Item);
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));  // Random Quantity not important.

      // Calculate Regenerative Plan for Planning Worksheet.
      LibraryVariableStorage.Enqueue(ItemNotPlanned);  // Required inside MessageHandler.
      CalculateRegenPlanForPlanningWorksheet(Item);

      // Verify: Verify that no Requisition line is created for Requisition Worksheet, Since Routing is not Certified.
      FilterOnRequisitionLine(RequisitionLine,Item."No.");
      Assert.IsTrue(RequisitionLine.ISEMPTY,STRSUBSTNO(RequisitionLineMustNotExist,Item."No."));
    END;

    [Test]
    PROCEDURE CalcRegenPlanWithSalesAndProdOrderWithAdjustCostItemEntriesLFLItem@180();
    VAR
      Item@1000 : Record 27;
      ChildItem@1001 : Record 27;
      ItemJournalLine@1003 : Record 83;
      ProductionOrder@1006 : Record 5405;
      SalesHeader@1008 : Record 36;
      SalesLine@1009 : Record 37;
      ProdOrderComponent@1002 : Record 5407;
      RequisitionLine@1010 : Record 246;
    BEGIN
      // [FEATURE] [Calculate Regenerative Plan] [Lot-for-Lot] [Production] [Sales]
      // [SCENARIO] Verify Quantities for Parent and Child Items are correct after Calculate Regeneration Plan: Production Order which expects child Qty greater than is on stock, plus Sales Order for parent Item.

      // [GIVEN] Lot for Lot parent and child Items (Costing Method is Average).
      Initialize;
      CreateLotForLotItemSetup(ChildItem,Item);
      UpdateCostingMethodToAverageOnItem(ChildItem);
      UpdateCostingMethodToAverageOnItem(Item);

      // [GIVEN] Child Item stock Qty X.
      UpdateInventory(ItemJournalLine,ChildItem."No.",WORKDATE,LibraryRandom.RandDec(10,2));  // Inventory Value required for Test.

      // [GIVEN] Released Production for Parent Item of Qty (X + P).
      CreateAndRefreshProductionOrder(
        ProductionOrder,Item."No.",ProductionOrder.Status::Released,ItemJournalLine.Quantity + LibraryRandom.RandDec(10,2));

      // Run Adjust Cost Item Entries report.
      LibraryCosting.AdjustCostItemEntries(STRSUBSTNO(ItemFilter,Item."No.",ChildItem."No."),'');

      // [GIVEN] Sales Order for Parent Item of Qty S.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));

      // [WHEN] Run Calculate Plan for Planning Worksheet with Parent and Child Item.
      CalcRegenPlanForPlanWkshWithLocation(Item."No.",ChildItem."No.",'','');

      // [THEN] Planning Worksheet for Parent: Action Message: Change Qty, from Qty S to Qty (X + P).
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder.Status::Released,ProductionOrder."No.",ChildItem."No.");
      VerifyRequisitionLineWithItem(
        Item,RequisitionLine."Action Message"::"Change Qty.",SalesLine.Quantity,ProductionOrder.Quantity,'','');
      // [THEN] Planning Worksheet for Child: Action Message: New, Qty = (Child expected Qty from Production Order) - X.
      VerifyRequisitionLineWithItem(
        ChildItem,RequisitionLine."Action Message"::New,ProdOrderComponent."Expected Quantity" - ItemJournalLine.Quantity,0,'','');
    END;

    [Test]
    PROCEDURE CalcRegenPlanAndCarryOutWithSalesAndProdOrderWithAdjustCostItemEntriesLFLItem@173();
    VAR
      Item@1000 : Record 27;
      ChildItem@1001 : Record 27;
      ItemJournalLine@1003 : Record 83;
      ProductionOrder@1006 : Record 5405;
      SalesHeader@1008 : Record 36;
      SalesLine@1009 : Record 37;
      ProdOrderComponent@1002 : Record 5407;
      RequisitionLine@1011 : Record 246;
      RequisitionLine2@1005 : Record 246;
    BEGIN
      // [FEATURE] [Carry Out Action Message] [Lot-for-Lot] [Production] [Sales]
      // [SCENARIO] Verify Quantities for Parent and Child Items are correct after Calculate Regeneration Plan and Carry Out with no Accepted lines: Production Order which expects child Qty greater than is on stock, plus Sales Order for parent Item.

      // [GIVEN] Lot for Lot parent and child Items (Costing Method is Average).
      Initialize;
      CreateLotForLotItemSetup(ChildItem,Item);
      UpdateCostingMethodToAverageOnItem(ChildItem);
      UpdateCostingMethodToAverageOnItem(Item);

      // [GIVEN] Child Item stock Qty = X.
      UpdateInventory(ItemJournalLine,ChildItem."No.",WORKDATE,LibraryRandom.RandDec(10,2));  // Inventory Value required for Test.

      // [GIVEN] Released Production for Parent Item of Qty X + P.
      CreateAndRefreshProductionOrder(
        ProductionOrder,Item."No.",ProductionOrder.Status::Released,ItemJournalLine.Quantity + LibraryRandom.RandDec(10,2));  // Quantity more than Inventory Quantity.

      // [GIVEN] Sales Order for Parent Item of Qty S.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));

      // [GIVEN] Calculate Plan for Planning Worksheet with Parent and Child Item.
      CalcRegenPlanForPlanWkshWithLocation(Item."No.",ChildItem."No.",'','');

      // Run Adjust Cost Item Entries report.
      LibraryCosting.AdjustCostItemEntries(STRSUBSTNO(ItemFilter,Item."No.",ChildItem."No."),'');

      // [WHEN] Carry Out Action Message for Planning Worksheet, Accept Action is FALSE (?), so Requisition Lines remain.
      CarryoutActionMessageForPlanWorksheet(RequisitionLine,Item."No.");
      CarryoutActionMessageForPlanWorksheet(RequisitionLine2,ChildItem."No.");

      // [THEN] Planning Worksheet for Parent: Action Message: Change Qty, from Qty S to Qty (X + P).
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder.Status::Released,ProductionOrder."No.",ChildItem."No.");
      VerifyRequisitionLineWithItem(
        Item,RequisitionLine."Action Message"::"Change Qty.",SalesLine.Quantity,ProductionOrder.Quantity,'','');
      // [THEN] Planning Worksheet for Child: Action Message: New, Qty = (Child expected Qty from Production Order) - X.
      VerifyRequisitionLineWithItem(
        ChildItem,RequisitionLine."Action Message"::New,ProdOrderComponent."Expected Quantity" - ItemJournalLine.Quantity,0,'','');
    END;

    [Test]
    PROCEDURE CalcNetChangePlanWithMutipleSalesAndProdOrderLFLItem@171();
    VAR
      Item@1000 : Record 27;
      ChildItem@1001 : Record 27;
      ItemJournalLine@1003 : Record 83;
      ProductionOrder@1006 : Record 5405;
      SalesHeader@1008 : Record 36;
      SalesLine@1009 : Record 37;
      SalesHeader2@1016 : Record 36;
      SalesLine2@1015 : Record 37;
      RequisitionLine@1005 : Record 246;
      ProdOrderComponent@1004 : Record 5407;
      ShipmentDate@1014 : Date;
      Quantity@1010 : Decimal;
    BEGIN
      // Setup: Create Lot for Lot Item setup. Update Costing Method to Average on Parent and Child Item.
      Initialize;
      CreateLotForLotItemSetup(ChildItem,Item);
      UpdateCostingMethodToAverageOnItem(ChildItem);
      UpdateCostingMethodToAverageOnItem(Item);
      Quantity := LibraryRandom.RandDec(10,2);  // Random Quantity not important.

      // Update Inventory for Child Item.
      UpdateInventory(ItemJournalLine,ChildItem."No.",WORKDATE,Quantity);  // Inventory Value required for Test.

      // Create and Refresh Released Production for Parent Item.
      CreateAndRefreshProductionOrder(ProductionOrder,Item."No.",ProductionOrder.Status::Released,Quantity);

      // Create multiple Sales Order for Parent Item and Child Item.
      CreateSalesOrder(SalesHeader,SalesLine,ChildItem."No.",Quantity);
      ShipmentDate := GetRequiredDate(10,0,WORKDATE,1);  // Shipment Date relative to Work Date.
      CreateSalesOrder(SalesHeader2,SalesLine2,Item."No.",SalesLine.Quantity + LibraryRandom.RandDec(10,2));  // Quantity more than quantity of first Sales Order.
      UpdateShipmentDateOnSalesLine(SalesLine,ShipmentDate);

      // Calculate Plan for Planning Worksheet with Parent and Child Item.
      CalcRegenPlanForPlanWkshWithLocation(Item."No.",ChildItem."No.",'','');

      // Delete Sales Order for Child item. Update Quantity on Sales Order for Parent item.
      SalesHeader.DELETE(TRUE);
      UpdateQuantityOnSalesLine(SalesLine2,Quantity - LibraryRandom.RandInt(10));  // Quantity less than previous quantity.

      // Exercise: Calculate Net Change Plan for Parent Item and Child Item.
      CalcNetChangePlanForPlanWkshForMultipleItems(Item."No.",ChildItem."No.");

      // Verify: Verify Planning Worksheet for Action Message, Quantity and Reference Order Type on Planning Worksheet.
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder.Status::Released,ProductionOrder."No.",ChildItem."No.");
      VerifyRequisitionLineWithItem(
        ChildItem,RequisitionLine."Action Message"::New,ProdOrderComponent."Expected Quantity" - ItemJournalLine.Quantity,0,'','');
      VerifyRequisitionLineWithItem(Item,RequisitionLine."Action Message"::Cancel,0,ProductionOrder.Quantity,'','');
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ConfirmHandler)]
    PROCEDURE DeleteRequisitionLineForItemHavingComponentWithLotTracking@3();
    VAR
      Item@1000 : Record 27;
      ChildItem@1001 : Record 27;
      ItemTrackingCode@1003 : Record 6502;
      RequisitionLine@1002 : Record 246;
      ProductionOrder@1004 : Record 5405;
      Quantity@1005 : Decimal;
      EndDate@1007 : Date;
    BEGIN
      // Setup: Create Lot for Lot Item setup. Update Lot specific Tracking and Lot Nos on Child Item.
      Initialize;
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateLotForLotItemSetup(ChildItem,Item);
      UpdateTrackingAndLotNosOnItem(ChildItem,ItemTrackingCode.Code);

      // Update Inventory With Lot specific Tracking.
      Quantity := LibraryRandom.RandDec(10,2);  // Random Quantity not important for test.
      UpdateInventoryWithTracking(ChildItem."No.",Quantity);

      // Create and Refresh Released Production Order. Open Tracking On Production Order Component.
      CreateAndRefreshProductionOrder(ProductionOrder,Item."No.",ProductionOrder.Status::Released,Quantity);
      LibraryVariableStorage.Enqueue(AvailabilityWarningConfirmationMessage);  // Required inside ConfirmHandler.
      OpenTrackingOnProductionOrderComponent(ProductionOrder,ChildItem."No.");

      // Calculate Plan for Planning Worksheet.
      EndDate := GetRequiredDate(10,30,WORKDATE,1);  // End Date relative to Workdate.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,EndDate);

      // Exercise: Delete the Requisition Line created on Planning Worksheet.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      RequisitionLine.DELETE(TRUE);

      // Verify: Verify the Requisition Line having tracking on its component is deleted successfully.
      FilterOnRequisitionLine(RequisitionLine,Item."No.");
      Assert.IsTrue(RequisitionLine.ISEMPTY,STRSUBSTNO(RequisitionLineMustNotExist,Item."No."));
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanWithMPSWithMultiSalesLineOrderItemUsingForecast@125();
    VAR
      Item@1008 : Record 27;
      ProductionForecastEntry@1007 : ARRAY [3] OF Record 99000852;
      RequisitionWkshName@1004 : Record 245;
      RequisitionLine@1003 : Record 246;
      SalesHeader@1009 : Record 36;
      SalesLine@1010 : Record 37;
      SalesLine2@1006 : Record 37;
      PlanningWorksheet@1002 : TestPage 99000852;
      OldCombinedMPSMRPCalculation@1005 : Boolean;
      ForecastDate@1001 : Date;
      ShipmentDate@1013 : Date;
    BEGIN
      // Setup: Create Order Item. Create Production Forecast.
      Initialize;
      OldCombinedMPSMRPCalculation := UpdateManufacturingSetup(FALSE);  // Combined MPS/MRP Calculation of Manufacturing Setup -FALSE.
      CreateOrderItem(Item);
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,FALSE);  // Boolean - FALSE, for single Forecast Entry.

      // Create Sales Order with multiple lines.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));
      ShipmentDate := GetRequiredDate(20,20,WORKDATE,1);  // Shipment Date relative to Work Date.
      LibrarySales.CreateSalesLineWithShipmentDate(
        SalesLine2,SalesHeader,SalesLine2.Type::Item,Item."No.",ShipmentDate,SalesLine.Quantity + LibraryRandom.RandDec(5,2));  // Quantity more than Quantity on first Sales Line.

      // Exercise: Calculate Regenerative Plan with MPS - TRUE and MRP - FALSE for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type.
      VerifyRequisitionLineWithDueDate(Item,RequisitionLine."Action Message"::New,SalesLine.Quantity,0,SalesLine."Shipment Date");
      VerifyRequisitionLineWithDueDate(Item,RequisitionLine."Action Message"::New,SalesLine2.Quantity,0,SalesLine2."Shipment Date");
      VerifyRequisitionLineWithDueDate(
        Item,RequisitionLine."Action Message"::New,ProductionForecastEntry[1]."Forecast Quantity" - SalesLine2.Quantity,0,
        ProductionForecastEntry[1]."Forecast Date");

      // Teardown.
      UpdateManufacturingSetup(OldCombinedMPSMRPCalculation);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanWithMPSWithSalesLineOrderItemWithNewSalesUOMUsingForecast@1();
    VAR
      Item@1000 : Record 27;
      ProductionForecastEntry@1001 : ARRAY [3] OF Record 99000852;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1005 : Record 246;
      RequisitionWkshName@1006 : Record 245;
      PlanningWorksheet@1007 : TestPage 99000852;
      OldCombinedMPSMRPCalculation@1008 : Boolean;
      ForecastDate@1004 : Date;
    BEGIN
      // Setup: Create Order Item. Update Item parameters. Create Production Forecast
      Initialize;
      OldCombinedMPSMRPCalculation := UpdateManufacturingSetup(FALSE);  // Combined MPS/MRP Calculation of Manufacturing Setup -FALSE.
      CreateOrderItem(Item);
      UpdateUnitOfMeasuresOnItem(Item);  // Update Sales and Purchase Unit Of Measure and Include Inventory - FALSE on Item.
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",ForecastDate,FALSE);  // Boolean - FALSE, for single Forecast Entry.

      // Create Sales Order.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));  // Random Quantity not important for Test.

      // Exercise: Calculate Regenerative Plan with MPS - TRUE and MRP - FALSE for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Planning Worksheet for Quantities and Reference Order Type. Verify Item Sales Unit Of Measure is updated on Requisition Line.
      VerifyRequisitionLineForUnitOfMeasure(
        Item,Item."Sales Unit of Measure",RequisitionLine."Action Message"::New,SalesLine.Quantity,0,SalesLine."Shipment Date");
      VerifyRequisitionLineForUnitOfMeasure(
        Item,Item."Sales Unit of Measure",RequisitionLine."Action Message"::New,ProductionForecastEntry[1]."Forecast Quantity",0,
        ProductionForecastEntry[1]."Forecast Date");

      // Teardown.
      UpdateManufacturingSetup(OldCombinedMPSMRPCalculation);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanWithTransferOrderAndForecastWithReschedulingPeriodLFLItem@57();
    VAR
      ChildItem@1000 : Record 27;
      Item@1001 : Record 27;
      ProductionForecastEntry@1003 : ARRAY [3] OF Record 99000852;
      TransferHeader@1006 : Record 5740;
      TransferLine@1004 : Record 5741;
      StockkeepingUnit@1009 : Record 5700;
      ProductionBOMHeader@1010 : Record 99000771;
      RequisitionWkshName@1012 : Record 245;
      StockkeepingUnit2@1013 : Record 5700;
      ItemJournalLine@1017 : Record 83;
      Bin@1018 : Record 7354;
      RequisitionLine@1019 : Record 246;
      PlanningWorksheet@1005 : TestPage 99000852;
      ForecastDate@1002 : Date;
    BEGIN
      // Setup: Create Lot for Lot Child Item. Create Lot for Lot Item and Stockkeeping Unit setup.
      Initialize;
      CreateLotForLotItem(ChildItem);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem."No.");
      CreateLotForLotItemSKUSetupWithTransfer(Item,StockkeepingUnit,StockkeepingUnit2,LocationSilver.Code,LocationBlue.Code);
      UpdateProductionBOMNoOnItem(Item,ProductionBOMHeader."No.");

      // Update Rescheduling Period and Dampener Period with random values. Lot Accumulation Period - 0D on Stockkeeping Units of Parent Item.
      UpdateLotForLotSKUPlanningParameters(StockkeepingUnit,GetRequiredPeriod(2,5),GetRequiredPeriod(0,3),'<0D>');
      UpdateLotForLotSKUPlanningParameters(StockkeepingUnit2,GetRequiredPeriod(2,5),GetRequiredPeriod(0,3),'<0D>');

      // Update Item inventory with Bin.
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1);  // Find Bin of Index 1.
      UpdateInventoryWithLocationAndBin(
        ItemJournalLine,Item."No.",LocationSilver.Code,Bin.Code,LibraryRandom.RandDec(10,2) + 100);  // Large Random Quantity Required.

      // Create Production Forecast.
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetupWithLocation(ProductionForecastEntry,Item."No.",LocationBlue.Code,ForecastDate,FALSE);  // Boolean - FALSE, for single Forecast Entry.

      // Create Transfer Order.
      CreateTransferOrderWithReceiptDate(
        TransferHeader,Item."No.",LocationSilver.Code,LocationBlue.Code,LibraryRandom.RandDec(10,2));

      // Exercise: Calculate Plan for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Planning Worksheet with Location, Action Message, Quantities and Reference Order Type.
      SelectTransferLine(TransferLine,TransferHeader."No.");
      VerifyRequisitionLineWithDueDate(
        Item,RequisitionLine."Action Message"::New,ProductionForecastEntry[1]."Forecast Quantity",0,
        ProductionForecastEntry[1]."Forecast Date");
      VerifyRequisitionLineWithDueDateForTransfer(
        RequisitionLine."Action Message"::Cancel,0,TransferLine.Quantity,TransferLine."Receipt Date",LocationBlue.Code);
    END;

    [Test]
    PROCEDURE CalcPlanWithTransferAndProdOrderWithReschedulingPeriodPlanningFlexibilityNoneLFLItem@56();
    BEGIN
      PlanningWithTransferPlanningFlexibilityAndProdOrderWithReschedulingPeriodSKULFLItem(TRUE);  // Planning Flexibility - None for Transfer Line.
    END;

    [Test]
    PROCEDURE CalcPlanWithTransferAndProdOrderWithReschedulingPeriodLFLItem@50();
    BEGIN
      PlanningWithTransferPlanningFlexibilityAndProdOrderWithReschedulingPeriodSKULFLItem(FALSE);  // Planning Flexibility - Unlimited for Transfer Line.
    END;

    LOCAL PROCEDURE PlanningWithTransferPlanningFlexibilityAndProdOrderWithReschedulingPeriodSKULFLItem@48(PlanningFlexibilityNone@1006 : Boolean);
    VAR
      ChildItem@1000 : Record 27;
      Item@1001 : Record 27;
      TransferHeader@1005 : Record 5740;
      TransferLine@1004 : Record 5741;
      StockkeepingUnit@1009 : Record 5700;
      ProductionBOMHeader@1010 : Record 99000771;
      StockkeepingUnit2@1013 : Record 5700;
      ProductionOrder@1018 : Record 5405;
      RequisitionLine@1019 : Record 246;
      StartDate@1003 : Date;
      EndDate@1002 : Date;
    BEGIN
      // Setup: Create Lot for Lot Child Item. Create Lot for Lot Item and Stockkeeping Unit setup.
      Initialize;
      CreateLotForLotItem(ChildItem);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem."No.");
      CreateLotForLotItemSKUSetupWithTransfer(Item,StockkeepingUnit,StockkeepingUnit2,LocationSilver.Code,LocationBlue.Code);
      UpdateReplenishmentSystemOnItem(Item);
      UpdateProductionBOMNoOnItem(Item,ProductionBOMHeader."No.");

      // Update Rescheduling Period and Dampener Period with random values. Lot Accumulation Period - 0D on Stockkeeping Units of Parent Item.
      UpdateLotForLotSKUPlanningParameters(StockkeepingUnit,GetRequiredPeriod(2,5),GetRequiredPeriod(2,0),'<0D>');
      UpdateLotForLotSKUPlanningParameters(StockkeepingUnit2,GetRequiredPeriod(2,5),GetRequiredPeriod(2,0),'<0D>');
      UpdateSKUReplenishmentSystem(StockkeepingUnit,StockkeepingUnit."Replenishment System"::"Prod. Order");  // Replenishment System Production Order.

      // Create and Refresh Released Production Order. Create Transfer Order.
      CreateAndRefreshFirmPlannedProductionOrderWithLocation(
        ProductionOrder,Item."No.",LocationSilver.Code,LibraryRandom.RandInt(10));  // Random Quantity not important.
      CreateTransferOrderWithReceiptDate(
        TransferHeader,Item."No.",LocationSilver.Code,LocationBlue.Code,LibraryRandom.RandDec(10,2));
      SelectTransferLine(TransferLine,TransferHeader."No.");
      IF PlanningFlexibilityNone THEN
        UpdateTransferLinePlanningFlexibilityNone(TransferLine);  // Update Planning Flexibilty on Transfer Line - None.

      // Exercise: Calculate Plan for Planning Worksheet.
      StartDate := GetRequiredDate(20,0,TransferLine."Receipt Date",-1);  // Start Date Relative to Receipt Date of Transfer Order.
      EndDate := GetRequiredDate(30,0,TransferLine."Receipt Date",1);  // End Date Relative to Receipt Date of Transfer Order.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,StartDate,EndDate);

      // Verify: Verify Planning Worksheet with Location, Action Message, Quantities and Reference Order Type.
      IF PlanningFlexibilityNone THEN BEGIN
        VerifyRequisitionLineWithDueDate(
          Item,RequisitionLine."Action Message"::Cancel,0,ProductionOrder.Quantity,ProductionOrder."Due Date");
        VerifyRequisitionLineWithDueDate(
          Item,RequisitionLine."Action Message"::New,TransferLine.Quantity,0,TransferLine."Receipt Date");
      END ELSE BEGIN
        VerifyRequisitionLineWithDueDate(
          Item,RequisitionLine."Action Message"::Cancel,0,ProductionOrder.Quantity,ProductionOrder."Due Date");
        VerifyRequisitionLineWithDueDateForTransfer(
          RequisitionLine."Action Message"::Cancel,0,TransferLine.Quantity,TransferLine."Receipt Date",LocationBlue.Code);
      END;
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanWithTransferAndForecastWithLotAccumulationPeriodLFLItem@47();
    VAR
      ChildItem@1000 : Record 27;
      Item@1001 : Record 27;
      ProductionForecastEntry@1003 : ARRAY [3] OF Record 99000852;
      StockkeepingUnit@1009 : Record 5700;
      ProductionBOMHeader@1010 : Record 99000771;
      RequisitionWkshName@1012 : Record 245;
      StockkeepingUnit2@1013 : Record 5700;
      ItemJournalLine@1017 : Record 83;
      Bin@1014 : Record 7354;
      RequisitionLine@1020 : Record 246;
      PlanningWorksheet@1004 : TestPage 99000852;
      ForecastDate@1002 : Date;
    BEGIN
      // Setup: Create Lot for Lot Child Item. Create Lot for Lot Item and Stockkeeping Unit setup.
      Initialize;
      CreateLotForLotItem(ChildItem);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem."No.");
      CreateLotForLotItemSKUSetupWithTransfer(Item,StockkeepingUnit,StockkeepingUnit2,LocationSilver.Code,LocationBlue.Code);
      UpdateReplenishmentSystemOnItem(Item);
      UpdateProductionBOMNoOnItem(Item,ProductionBOMHeader."No.");

      // Update Rescheduling Period - 0D, Dampener Period - 0D. Lot Accumulation Period with random value on Stockkeeping Units of Parent Item.
      UpdateLotForLotSKUPlanningParameters(StockkeepingUnit,'<0D>','<0D>',GetRequiredPeriod(2,5));
      UpdateLotForLotSKUPlanningParameters(StockkeepingUnit2,'<0D>','<0D>',GetRequiredPeriod(2,5));

      // Update Item inventory with Location and Bin.
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1);  // Find Bin of Index 1.
      UpdateInventoryWithLocationAndBin(
        ItemJournalLine,Item."No.",LocationSilver.Code,Bin.Code,LibraryRandom.RandDec(10,2) + 100);  // Large Random Quantity Required.

      // Create Production Forecast with multiple Entries.
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetupWithLocation(ProductionForecastEntry,Item."No.",LocationBlue.Code,ForecastDate,TRUE);  // Boolean - TRUE, for multiple Forecast Entry.

      // Exercise: Calculate Plan for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Planning Worksheet with Action Message, Quantities and Reference Order Type.
      VerifyRequisitionLineWithDueDate(
        Item,RequisitionLine."Action Message"::New,ProductionForecastEntry[1]."Forecast Quantity",0,
        ProductionForecastEntry[1]."Forecast Date");
      VerifyRequisitionLineWithDueDate(
        Item,RequisitionLine."Action Message"::New,ProductionForecastEntry[2]."Forecast Quantity",0,
        ProductionForecastEntry[2]."Forecast Date");
      VerifyRequisitionLineWithDueDate(
        Item,RequisitionLine."Action Message"::New,ProductionForecastEntry[3]."Forecast Quantity",0,
        ProductionForecastEntry[3]."Forecast Date");
    END;

    [Test]
    PROCEDURE CalcPlanWithTransferOrderWithLotAccumulationPeriodPlanningFlexibiltyNoneLFLItem@107();
    BEGIN
      PlanningWithTransferWithLotAccumulationPeriodSKULFLItem(TRUE);  // Planning Flexibility - None for Transfer Lines.
    END;

    [Test]
    PROCEDURE CalcPlanWithTransferOrderWithLotAccumulationPeriodLFLItem@108();
    BEGIN
      PlanningWithTransferWithLotAccumulationPeriodSKULFLItem(FALSE);  // Planning Flexibility - Unlimited for Transfer Lines.
    END;

    LOCAL PROCEDURE PlanningWithTransferWithLotAccumulationPeriodSKULFLItem@38(PlanningFlexibilityNone@1007 : Boolean);
    VAR
      ChildItem@1000 : Record 27;
      Item@1001 : Record 27;
      TransferHeader@1005 : Record 5740;
      TransferLine@1004 : Record 5741;
      StockkeepingUnit@1009 : Record 5700;
      ProductionBOMHeader@1010 : Record 99000771;
      StockkeepingUnit2@1013 : Record 5700;
      ItemJournalLine@1017 : Record 83;
      Bin@1014 : Record 7354;
      RequisitionLine@1019 : Record 246;
      StartDate@1003 : Date;
      EndDate@1002 : Date;
    BEGIN
      // Setup: Create Lot for Lot Child Item. Create Lot for Lot Item and Stockkeeping Unit setup.
      Initialize;
      CreateLotForLotItem(ChildItem);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem."No.");
      CreateLotForLotItemSKUSetupWithTransfer(Item,StockkeepingUnit,StockkeepingUnit2,LocationSilver.Code,LocationBlue.Code);
      UpdateReplenishmentSystemOnItem(Item);
      UpdateProductionBOMNoOnItem(Item,ProductionBOMHeader."No.");

      // Update Rescheduling Period - 0D, Dampener Period - 0D. Lot Accumulation Period with random values on Stockkeeping Units of Parent Item.
      UpdateLotForLotSKUPlanningParameters(StockkeepingUnit,'<0D>','<0D>',GetRequiredPeriod(2,5));
      UpdateLotForLotSKUPlanningParameters(StockkeepingUnit2,'<0D>','<0D>',GetRequiredPeriod(2,5));
      UpdateSKUReplenishmentSystem(StockkeepingUnit,StockkeepingUnit."Replenishment System"::"Prod. Order");

      // Update Item inventory with Location and Bin.
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1);  // Find Bin of Index 1.
      UpdateInventoryWithLocationAndBin(
        ItemJournalLine,Item."No.",LocationSilver.Code,Bin.Code,LibraryRandom.RandDec(10,2) + 100);  // Large Random Quantity Required.

      // Create Tansfer Order. Update Planning Flexibility - None On Transfer Line.
      CreateTransferOrderWithReceiptDate(
        TransferHeader,Item."No.",LocationBlue.Code,LocationSilver.Code,LibraryRandom.RandDec(10,2));
      SelectTransferLine(TransferLine,TransferHeader."No.");
      IF PlanningFlexibilityNone THEN
        UpdateTransferLinePlanningFlexibilityNone(TransferLine);

      // Exercise: Calculate Plan for Planning Worksheet.
      StartDate := GetRequiredDate(20,0,TransferLine."Receipt Date",-1);  // Start Date relative to Receipt Date of Transfer Order.
      EndDate := GetRequiredDate(30,0,TransferLine."Receipt Date",1);  // End Date relative to Receipt Date of Transfer Order.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,StartDate,EndDate);

      // Verify: Verify Planning Worksheet with Location, Action Message, Quantities and Reference Order Type.
      IF PlanningFlexibilityNone THEN
        VerifyRequisitionLineForLocationAndVariant(
          Item,RequisitionLine."Action Message"::New,TransferLine.Quantity,0,TransferLine."Receipt Date",LocationBlue.Code,'')
      ELSE
        VerifyRequisitionLineWithDueDateForTransfer(
          RequisitionLine."Action Message"::Cancel,0,TransferLine.Quantity,TransferLine."Receipt Date",LocationSilver.Code);
    END;

    [Test]
    PROCEDURE CalcPlanWithReqWkshWithSalesQuantityGreaterThanMaxInventoryOnLocationMQItem@66();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      ItemVariant@1009 : Record 5401;
      RequisitionWkshName@1011 : Record 245;
      RequisitionLine@1003 : Record 246;
      StartDate@1012 : Date;
      EndDate@1013 : Date;
    BEGIN
      // Setup: Create Maximum Quantity Item. Create Stockkeeping Unit.
      Initialize;
      CreateStockkeepingUnitForMaximumQtyItem(Item,ItemVariant,LocationBlue.Code);

      // Update Inventory With Location.
      UpdateInventoryWithLocationAndBin(ItemJournalLine,Item."No.",LocationBlue.Code,'',Item."Maximum Inventory");

      // Create Sales Order for Quantity more than Maximum Inventory.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Item."Maximum Inventory" + LibraryRandom.RandDec(10,2));
      UpdateLocationAndVariantOnSalesLine(SalesLine,LocationBlue.Code,'');

      // Update Quantity to Ship with Quantity equal to Maximum Inventory on Sales Order Line. Post Sales Order with Ship.
      UpdateQuantityToShipOnSalesLine(SalesLine,Item."Maximum Inventory");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // Exercise: Calculate Plan for Requisition Worksheet.
      StartDate := GetRequiredDate(10,0,ItemJournalLine."Posting Date",1);  // Start Date greater than Posting Date of Item Journal.
      EndDate := GetRequiredDate(10,0,StartDate,1);  // End Date relative to Start Date.
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item."No.",'',StartDate,EndDate);

      // Verify: Verify Planning Worksheet with Location, Variant, Action Message, Quantities and Reference Order Type.
      VerifyRequisitionLineWithVariant(
        RequisitionLine."Action Message"::New,Item."Maximum Inventory",0,LocationBlue.Code,ItemVariant.Code);
    END;

    [Test]
    PROCEDURE QtyErrorOnPurchaseLineAfterCalcPlanForSalesOrderWithDropShipment@37();
    VAR
      Item@1006 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      RequisitionLine@1002 : Record 246;
    BEGIN
      // Setup: Create Order Item. Create Sales Order with Purchasing Code, Drop Shipment for Sales Line on Requisition Worksheet. Post Sales Order.
      Initialize;
      CreateOrderItem(Item);
      CreateSalesOrderWithPurchasingCode(SalesHeader,SalesLine,Item."No.",LocationSilver.Code,LibraryRandom.RandDec(10,2));
      GetSalesOrderOnRequisitionWkshtAndCarryOutActionMsg(SalesLine,RequisitionLine);  // Drop Shipment On Requisition Line.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      SelectPurchaseLine(PurchaseLine,Item."No.");
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No."); // Get the Purchase Header.
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);

      // Exercise: Update Quantity on Purchase Order Line which is linked with previously created Sales Order.
      ASSERTERROR UpdateQuantityOnPurchaseLine(Item."No.");

      // Verify: Verify error - Quantity cannot be changed because the order line is associated with Sales Order.
      Assert.ExpectedError(CannotChangeQuantityError);
    END;

    [Test]
    PROCEDURE PurchaseBinOnBinContentForSalesAfterCalcPlanOfSalesWithDropShipment@73();
    VAR
      Item@1003 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      RequisitionLine@1004 : Record 246;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1006 : Record 39;
      Bin@1007 : Record 7354;
    BEGIN
      // Setup: Create Order Item. Create Sales Order with Purchasing Code, Drop Shipment for Sales Line on Requisition Worksheet.
      Initialize;
      CreateOrderItem(Item);
      CreateSalesOrderWithPurchasingCode(SalesHeader,SalesLine,Item."No.",LocationSilver.Code,LibraryRandom.RandDec(10,2));
      GetSalesOrderOnRequisitionWkshtAndCarryOutActionMsg(SalesLine,RequisitionLine);  // Drop Shipment On Requisition Line. Carry out to generate a new Purchase Order.

      // Create second new Purchase Order with Location and Bin.
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.",LibraryRandom.RandDec(10,2));
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1);  // Find Bin of Index 1.
      UpdateBinOnPurchaseLine(PurchaseLine,LocationSilver.Code,Bin.Code);

      // Exercise: Post Purchase Order.
      PostPurchaseDocument(PurchaseHeader);

      // Verify: Verify Bin Code of second Purchase Order is updated on Bin Content for Sales Order.
      VerifyBinContent(SalesLine,PurchaseLine."Bin Code");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE NothingToCreateMsgWhenInvtPutPickMovementAfterCalcPlanReqWkshWithCarryOutOrderItem@45();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1001 : Record 83;
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      SalesHeader2@1007 : Record 36;
      SalesLine2@1004 : Record 37;
      WarehouseActivityHeader@1006 : Record 5766;
      StartDate@1008 : Date;
      EndDate@1005 : Date;
    BEGIN
      // Setup: Create Order Item. Update Inventory with Location.
      Initialize;
      CreateOrderItem(Item);
      UpdateInventoryWithLocationAndBin(ItemJournalLine,Item."No.",LocationSilver2.Code,'',LibraryRandom.RandDec(10,2) + 100);  // Large Random Quantity Required.

      // Create Sales Order with random quantity.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));

      // Calculate Plan for Requisition Worksheet and Carry out Action Message.
      StartDate := WORKDATE;
      EndDate := GetRequiredDate(30,0,StartDate,1);
      CalcPlanAndCarryOutActionMessage(Item,StartDate,EndDate);

      // Create new Sales Order with same Item for random Quantity.
      CreateSalesOrder(SalesHeader2,SalesLine2,Item."No.",LibraryRandom.RandDec(10,2));

      // Exercise & Verify: Run Create Inventory Put-away Pick Movement report. Verifying message - Nothing to create in Message Handler, when trying to create Put or Pick movement for Sales Order.
      LibraryVariableStorage.Enqueue(NothingToCreateMessage);  // Required inside MessageHandler.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader2."No.",TRUE,TRUE,FALSE);
    END;

    [Test]
    PROCEDURE CalcPlanForItemCategoryCodeOnRequisitionLineForFRQItem@74();
    VAR
      Item@1000 : Record 27;
      RequisitionWkshName@1004 : Record 245;
      RequisitionLine@1005 : Record 246;
      EndDate@1002 : Date;
    BEGIN
      // Setup: Create FRQ Item with Item Category Code.
      Initialize;
      CreateFRQItem(Item);
      UpdateItemCategoryCode(Item);

      // Exercise: Calculate Plan for Requisition Worksheet.
      EndDate := GetRequiredDate(10,0,WORKDATE,1);  // End Date relative to WORKDATE.
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item."No.",'',WORKDATE,EndDate);

      // Verify: Verify Item Category of Item is updated on Requisition Line of Requisition Worksheet.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      RequisitionLine.TESTFIELD("Item Category Code",Item."Item Category Code");
    END;

    [Test]
    PROCEDURE CalPlanForReqWkshForSalesCreatedFromBlanketOrder@71();
    VAR
      Item@1000 : Record 27;
      RequisitionWkshName@1006 : Record 245;
      SalesReceivablesSetup@1009 : Record 311;
      RequisitionLine@1010 : Record 246;
      OldCreditWarnings@1007 : Option;
      OldStockoutWarning@1008 : Boolean;
      QuantityToShip@1003 : Decimal;
      StartDate@1005 : Date;
      EndDate@1004 : Date;
    BEGIN
      // Setup: Create Order Item, Create Sales Order from Blanket Order with new Quantity To Ship.
      Initialize;
      UpdateSalesReceivablesSetup(OldStockoutWarning,OldCreditWarnings,FALSE,SalesReceivablesSetup."Credit Warnings"::"No Warning");
      CreateOrderItem(Item);
      QuantityToShip := LibraryRandom.RandDec(10,2);
      CreateSalesOrderFromBlanketOrder(Item."No.",QuantityToShip);

      // Exercise: Calculate Plan for Requisition Worksheet.
      StartDate := GetRequiredDate(10,0,WORKDATE,-1);  // Start Date less than WORKDATE
      EndDate := GetRequiredDate(10,0,WORKDATE,1);  // End Date more than to WORKDATE.
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item."No.",'',StartDate,EndDate);

      // Verify: Verify Requisition Worksheet Action Message, Quantity and Reference Order Type.
      VerifyRequisitionLineWithItem(Item,RequisitionLine."Action Message"::New,QuantityToShip,0,'','');

      // Teardown.
      UpdateSalesReceivablesSetup(OldStockoutWarning,OldCreditWarnings,OldStockoutWarning,OldCreditWarnings);
    END;

    [Test]
    PROCEDURE CalcPlanWithReqWkshWithSKUAndPurchaseForMQItem@102();
    VAR
      Item@1000 : Record 27;
      StockkeepingUnit@1001 : Record 5700;
      ItemJournalLine@1002 : Record 83;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      RequisitionWkshName@1007 : Record 245;
      RequisitionLine@1008 : Record 246;
      StartDate@1005 : Date;
      EndDate@1006 : Date;
    BEGIN
      // Setup: Create Maximum Quantity Item.Create Stockkeeping Unit. Update Inventory With Location.
      Initialize;
      CreateMaximumQtyItem(Item,LibraryRandom.RandDec(50,2) + 50);  // Large Random quantity for Maximum Inventory.
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,LocationSilver2.Code,Item."No.",'');
      UpdateInventoryWithLocationAndVariant(
        ItemJournalLine,Item."No.",LibraryRandom.RandDec(10,2),ItemJournalLine."Entry Type"::"Positive Adjmt.",
        LocationSilver2.Code,'');

      // Create Purchase Order With Location.
      CreatePurchaseOrderWithLocationAndVariant(PurchaseHeader,Item."No.",LocationSilver2.Code,'',LibraryRandom.RandDec(10,2));
      SelectPurchaseLine(PurchaseLine,Item."No.");

      // Exercise: Calculate Plan for Requisition Worksheet.
      StartDate := GetRequiredDate(10,0,WORKDATE,-1);  // Start Date less than WORKDATE.
      EndDate := GetRequiredDate(10,0,PurchaseLine."Expected Receipt Date",1);  // End Date relative to Purchase Line Expected receipt Date.
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item."No.",Item."No.",StartDate,EndDate);

      // Verify: Verify Planning Worksheet Location,Action Message, Quantity and Reference Order Type.
      VerifyRequisitionLineWithItem(
        Item,RequisitionLine."Action Message"::New,Item."Maximum Inventory" - ItemJournalLine.Quantity,0,LocationSilver2.Code,'');
    END;

    [Test]
    PROCEDURE CalcPlanWithTransferAndDampenerPeriodForLFLItem@70();
    VAR
      Item@1001 : Record 27;
      TransferHeader@1005 : Record 5740;
      TransferLine@1004 : Record 5741;
      StockkeepingUnit@1009 : Record 5700;
      ItemVariant@1000 : Record 5401;
      RequisitionLine@1019 : Record 246;
      StartDate@1003 : Date;
      EndDate@1002 : Date;
    BEGIN
      // Setup: Create Lot for Lot Item and Stockkeeping Unit setup.
      Initialize;
      CreateLFLItemWithVariantAndSKU(Item,ItemVariant,StockkeepingUnit,LocationSilver.Code);

      // Update Rescheduling Period - 0D, Dampener Period with random value and Lot Accumulation Period -0D  on Stockkeeping Unit of Item.
      UpdateLotForLotSKUPlanningParameters(StockkeepingUnit,'<0D>',GetRequiredPeriod(2,5),'<0D>');

      // Create Tansfer Order.
      CreateTransferOrderWithReceiptDate(
        TransferHeader,Item."No.",LocationBlue.Code,LocationSilver.Code,LibraryRandom.RandDec(10,2));
      SelectTransferLine(TransferLine,TransferHeader."No.");

      // Exercise: Calculate Plan for Planning Worksheet.
      StartDate := GetRequiredDate(20,0,TransferLine."Receipt Date",-1);  // Start Date relative to Receipt Date of Transfer Order.
      EndDate := GetRequiredDate(30,0,TransferLine."Receipt Date",1);  // End Date relative to Receipt Date of Transfer Order.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,StartDate,EndDate);

      // Verify: Verify Planning Worksheet with Location, Action Message,Reference Order Type and effect of Dampener Period on Quantities.
      VerifyRequisitionLineWithDueDateForTransfer(
        RequisitionLine."Action Message"::Cancel,0,TransferLine.Quantity,TransferLine."Receipt Date",LocationSilver.Code);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcPlanWithForecastAndDampenerPeriodForLFLItem@40();
    VAR
      Item@1001 : Record 27;
      ProductionForecastEntry@1003 : ARRAY [3] OF Record 99000852;
      StockkeepingUnit@1009 : Record 5700;
      RequisitionWkshName@1012 : Record 245;
      ItemVariant@1000 : Record 5401;
      RequisitionLine@1020 : Record 246;
      PlanningWorksheet@1004 : TestPage 99000852;
      ForecastDate@1002 : Date;
    BEGIN
      // Setup: Create Lot for Lot Item and Stockkeeping Unit setup.
      Initialize;
      CreateLFLItemWithVariantAndSKU(Item,ItemVariant,StockkeepingUnit,LocationSilver.Code);

      // Update Rescheduling Period - 0D, Dampener Period with random value and Lot Accumulation Period -0D  on Stockkeeping Unit of Item.
      UpdateLotForLotSKUPlanningParameters(StockkeepingUnit,'<0D>',GetRequiredPeriod(2,5),'<0D>');

      // Create Production Forecast with multiple Entries.
      ForecastDate := GetRequiredDate(10,0,WORKDATE,1);  // Forecast Date Relative to Workdate.
      CreateProductionForecastSetupWithLocation(ProductionForecastEntry,Item."No.",LocationBlue.Code,ForecastDate,TRUE);  // Boolean - TRUE, for multiple Forecast Entry.

      // Exercise: Calculate Plan for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // Verify: Verify Planning Worksheet with Action Message, Reference Order Type and effect of Dampener Period on Quantities.
      VerifyRequisitionLineWithDueDate(
        Item,RequisitionLine."Action Message"::New,ProductionForecastEntry[1]."Forecast Quantity",0,
        ProductionForecastEntry[1]."Forecast Date");
      VerifyRequisitionLineWithDueDate(
        Item,RequisitionLine."Action Message"::New,ProductionForecastEntry[2]."Forecast Quantity",0,
        ProductionForecastEntry[2]."Forecast Date");
      VerifyRequisitionLineWithDueDate(
        Item,RequisitionLine."Action Message"::New,ProductionForecastEntry[3]."Forecast Quantity",0,
        ProductionForecastEntry[3]."Forecast Date");
    END;

    [Test]
    PROCEDURE CalcRegenPlanAndReleasedProdOrderDeletedAfterCarryOutLFLItem@61();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1004 : Record 5405;
    BEGIN
      // Setup: Create Lot for Lot Item setup.
      CreateLotForLotItem(Item);

      // Create and Refresh Released Production Order.
      CreateAndRefreshProductionOrder(ProductionOrder,Item."No.",ProductionOrder.Status::Released,LibraryRandom.RandDec(10,2));

      // Exercise: Calculate Plan for Planning Worksheet and Carry Out Action Message.
      CalcRegenPlanAndCarryOutActionMessage(Item);

      // Verify: Verify the Released Production Order having tracking on its component is deleted.
      ProductionOrder.SETRANGE("Source No.",Item."No.");
      ProductionOrder.SETRANGE(Status,ProductionOrder.Status::Released);
      Assert.IsTrue(ProductionOrder.ISEMPTY,STRSUBSTNO(ProductionOrderMustNotExist,Item."No."));
    END;

    [Test]
    PROCEDURE CalcRegenPlanTwiceForSKUSafetyStockQuantityForLFLItem@59();
    VAR
      Item@1000 : Record 27;
      StockkeepingUnit@1001 : Record 5700;
      RequisitionLine@1003 : Record 246;
    BEGIN
      // Setup: Create Lot for Lot Item with Safety Stock Quantity. Create Stockkeeping Unit for Item.
      Initialize;
      CreateLotForLotItem(Item);
      UpdateReplenishmentSystemOnItem(Item);  // Update Replenishment System Production Order.
      UpdateItemSafetyStockQuantityAndLeadTimeCalculation(Item,'<0D>');  // Lead Time Calculation - 0D.
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,LocationBlue.Code,Item."No.",'');

      // Calculate Plan for Planning Worksheet.
      CalculateRegenPlanForPlanningWorksheet(Item);

      // Update Safety Stock Quantity on Stockkeeping Unit.
      UpdateSKUSafetyStockQuantity(StockkeepingUnit,Item."Safety Stock Quantity" + LibraryRandom.RandDec(10,2));

      // Exercise: Calculate Plan for Planning Worksheet.
      CalculateRegenPlanForPlanningWorksheet(Item);

      // Verify: Verify Planning Worksheet Location and Action Message. Verify Safety Stock Quantity of Stockkeeping Unit of Item is updated on Requisition Line for Item.
      VerifyRequisitionLineWithItem(
        Item,RequisitionLine."Action Message"::New,StockkeepingUnit."Safety Stock Quantity",0,LocationBlue.Code,'');
    END;

    [Test]
    [HandlerFunctions(AssignItemTrackingAndVerifyTrackingQuantityPageHandler,ConfirmHandler)]
    PROCEDURE CalcRegenPlanForLotSpecificSalesAndTrackingOnRequisitionLineLFLItem@120();
    VAR
      Item@1000 : Record 27;
      ItemTrackingCode@1001 : Record 6502;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      RequisitionLine@1008 : Record 246;
    BEGIN
      // Setup: Create Lot for Lot Item. Update Lot specific Tracking and Lot Nos on Item.
      Initialize;
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateLotForLotItem(Item);
      UpdateTrackingAndLotNosOnItem(Item,ItemTrackingCode.Code);

      // Create Sales Order. Assign Lot specific Tracking to Sales Line.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));
      LibraryVariableStorage.Enqueue(TRUE);  // Enqueue variable used in AssignItemTrackingAndVerifyTrackingQuantityPageHandler.
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Sales Line using page Item Tracking Lines. Page Handler - AssignItemTrackingAndVerifyTrackingQuantityPageHandler.

      // Exercise: Calculate Plan for Planning Worksheet.
      CalculateRegenPlanForPlanningWorksheet(Item);

      // Verify: Verify Tracking is also assigned to requisition Line for Item. Verified in AssignItemTrackingAndVerifyTrackingQuantityPageHandler.
      LibraryVariableStorage.Enqueue(FALSE);  // Enqueue variable used inside AssignItemTrackingAndVerifyTrackingQuantityPageHandler.
      LibraryVariableStorage.Enqueue(SalesLine.Quantity);  // Enqueue variable for Quantity(Base) on Item Tracking Lines Page.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      RequisitionLine.OpenItemTrackingLines;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE CalcRegenPlanTwiceForNewPurchaseAfterCarryOutLotSpecificTrackingLFLItem@18();
    VAR
      Item@1007 : Record 27;
      ItemTrackingCode@1008 : Record 6502;
      SalesHeader@1006 : Record 36;
      SalesLine@1005 : Record 37;
      PurchaseLine@1004 : Record 39;
      RequisitionLine@1002 : Record 246;
    BEGIN
      // Setup: Create Lot for Lot Item. Update Lot specific Tracking and Lot Nos on Item.
      Initialize;
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateLotForLotItem(Item);
      UpdateTrackingAndLotNosOnItem(Item,ItemTrackingCode.Code);

      // Create Sales Order.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));

      // Calculate Plan for Planning Worksheet and Carry out Action Message.
      CalcRegenPlanAndCarryOutActionMessage(Item);

      // Update Quantity on Purchase Line created after Carry Out. Assign Lot Specific Tracking on Purchase Line. Post Purchase Order with Receive.
      AssignTrackingAndPostPurchaseWithUpdatedQuantity(PurchaseLine,Item."No.");

      // Exercise: Calculate Plan for Planning Worksheet.
      CalculateRegenPlanForPlanningWorksheet(Item);

      // Verify: Verify Planning Worksheet with Action Message, Reference Order Type and Quantity.
      VerifyRequisitionLineWithItem(Item,RequisitionLine."Action Message"::New,SalesLine.Quantity - PurchaseLine.Quantity,0,'','');
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE CalcRegenPlanTwiceTrackedTransferOrderDeletedAfterCarryOutLFLItem@92();
    VAR
      Item@1001 : Record 27;
      StockkeepingUnit@1000 : Record 5700;
      ItemTrackingCode@1002 : Record 6502;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      TransferHeader@1006 : Record 5740;
      TransferLine@1007 : Record 5741;
      ItemVariant@1008 : Record 5401;
      RequisitionWkshName@1013 : Record 245;
      Direction@1005 : 'Outbound,Inbound';
      EndDate@1009 : Date;
    BEGIN
      // Setup: Create Lot for Lot Item setup. Update Lot specific Tracking and Lot Nos on Child Item.
      Initialize;
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateLFLItemWithVariantAndSKU(Item,ItemVariant,StockkeepingUnit,LocationSilver.Code);
      UpdateTrackingAndLotNosOnItem(Item,ItemTrackingCode.Code);

      // Create Tansfer Order. Open Tracking On Tansfer Line.
      CreateTransferOrderWithReceiptDate(
        TransferHeader,Item."No.",LocationBlue.Code,LocationSilver.Code,LibraryRandom.RandDec(10,2));
      SelectTransferLine(TransferLine,TransferHeader."No.");
      LibraryVariableStorage.Enqueue(AvailabilityWarningConfirmationMessage);
      TransferLine.OpenItemTrackingLines(Direction::Outbound);  // Assign Tracking on Page Handler ItemTrackingPageHandler.

      // Calculate Plan for Requisition Worksheet.
      EndDate := GetRequiredDate(10,30,WORKDATE,1);  // End Date relative to Workdate.
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item."No.",'',WORKDATE,EndDate);

      // Create Sales Order with Location.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(5,2));
      UpdateLocationAndVariantOnSalesLine(SalesLine,LocationBlue.Code,'');
      LibraryVariableStorage.Enqueue(AvailabilityWarningConfirmationMessage);
      SalesLine.OpenItemTrackingLines;

      // Exercise: Calculate Plan for Planning Worksheet and Carry out Action Message.
      CalcPlanAndCarryOutActionMessage(Item,WORKDATE,EndDate);

      // Exercise: Post created purchase order.
      PostCarriedOutPurchaseOrder(Item."No.");

      // Exercise: Ship transfer order
      PostTransferHeader(TransferLine,TransferHeader);

      // Exercise: Select created Transfer Order.
      ASSERTERROR TransferHeader.GET(TransferHeader."No.");

      // Verify: Verify the Transfer Order having tracking attached to it, is deleted.
      Assert.ExpectedError(TransferOrderNotExistError);
    END;

    [Test]
    [HandlerFunctions(OrderPromisingPageHandler)]
    PROCEDURE PlanningLineWhenCalculateCapableToPromiseForSales@179();
    VAR
      Item@1001 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      RequisitionLine@1005 : Record 246;
      PlannedDeliveryDate@1017 : Date;
    BEGIN
      // Setup: Create Lot for Lot Item.
      Initialize;
      CreateLotForLotItem(Item);

      // Create Sales Order. Update Plannede Delivery date on Sales Line.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));
      PlannedDeliveryDate := GetRequiredDate(10,30,SalesLine."Shipment Date",1);  // Planned Delivery Date more than Shipment Date.
      UpdateSalesLinePlannedDeliveryDate(SalesLine,PlannedDeliveryDate);

      // Exercise: Open Order Promising Lines Page and Invoke Capable to Promise to create Requisition Worksheet Line.
      OpenOrderPromisingPage(SalesLine."Document No.");  // Using Page to avoid Due Date error - OrderPromisingPageHandler.

      // Verify: Verify Requisition Line with Action Message,Quantity and Due Date after Calculating Capable To Promise.
      VerifyRequisitionLineWithDueDate(
        Item,RequisitionLine."Action Message"::New,SalesLine.Quantity,0,SalesLine."Planned Shipment Date");
    END;

    [Test]
    PROCEDURE CalcPlanReqWkshWithNewProdOrderComponentForFirmPlannedProdOrderLFLItem@91();
    VAR
      ChildItem@1002 : Record 27;
      Item@1000 : Record 27;
      ProductionOrder@1001 : Record 5405;
      ProdOrderComponent@1004 : Record 5407;
      RequisitionWkshName@1005 : Record 245;
      RequisitionLine@1008 : Record 246;
      StartDate@1006 : Date;
      EndDate@1007 : Date;
    BEGIN
      // Setup: Create Lot for Lot Parent and Child Item. Create and Certify Production BOM. Update Safety Stock Quantity and Lead Time Calculation on Child item.
      Initialize;
      CreateLotForLotItemSetup(ChildItem,Item);
      UpdateItemSafetyStockQuantityAndLeadTimeCalculation(ChildItem,'<' + FORMAT(LibraryRandom.RandInt(5) + 10) + 'W>');  // Random Lead Time Calculation.

      // Create and refresh Firm Planned Production Order. Create Production Order Components.
      CreateAndRefreshFirmPlannedProductionOrderWithLocation(ProductionOrder,Item."No.",'',LibraryRandom.RandDec(10,2));
      CreateProdOrderComponent(ProductionOrder,ProdOrderComponent,ChildItem."No.");

      // Exercise: Calculate Plan for Requisition Worksheet.
      StartDate := GetRequiredDate(10,0,ProdOrderComponent."Due Date",-1);  // Start Date less than Production Order Component Due date.
      EndDate := GetRequiredDate(10,0,ProductionOrder."Due Date",1);  // End Date more than Production Order Due Date.
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item."No.",ChildItem."No.",StartDate,EndDate);

      // Verify: Verify Planning Worksheet with Action Message, Reference Order Type and Quantity.
      VerifyRequisitionLineWithItem(ChildItem,RequisitionLine."Action Message"::New,ChildItem."Safety Stock Quantity",0,'','');
      VerifyRequisitionLineWithDueDate(
        ChildItem,RequisitionLine."Action Message"::New,2 * ProdOrderComponent."Expected Quantity",0,ProdOrderComponent."Due Date");
    END;

    [Test]
    PROCEDURE CalcPlanReqWkshTwiceWithNewProdOrderComponentForProdAndPurchaseLFLItem@89();
    VAR
      ChildItem@1002 : Record 27;
      Item@1000 : Record 27;
      ProductionOrder@1001 : Record 5405;
      ProdOrderComponent@1004 : Record 5407;
      RequisitionWkshName@1005 : Record 245;
      PurchaseHeader@1008 : Record 38;
      PurchaseLine@1003 : Record 39;
      RequisitionLine@1009 : Record 246;
      StartDate@1007 : Date;
      EndDate@1006 : Date;
    BEGIN
      // Setup: Create Lot for Lot Parent and Child Item. Create and Certify Production BOM. Update Safety Stock Quantity and Lead Time Calculation on Child item.Initialize;
      CreateLotForLotItemSetup(ChildItem,Item);
      UpdateItemSafetyStockQuantityAndLeadTimeCalculation(ChildItem,'<' + FORMAT(LibraryRandom.RandInt(5) + 10) + 'W>');  // Random Lead Time Calculation.

      // Create and refresh Firm Planned Production Order. Create Production Order Components.
      CreateAndRefreshFirmPlannedProductionOrderWithLocation(ProductionOrder,Item."No.",'',LibraryRandom.RandDec(10,2));
      CreateProdOrderComponent(ProductionOrder,ProdOrderComponent,ChildItem."No.");

      // Calculate Plan for Requisition Worksheet.
      StartDate := GetRequiredDate(10,0,ProdOrderComponent."Due Date",-1);  // Start Date less than Production Order Component Due date.
      EndDate := GetRequiredDate(10,0,ProductionOrder."Due Date",1);  // End Date more than Production Order Due Date.
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item."No.",ChildItem."No.",StartDate,EndDate);

      // Create Purchase Order for Child Item.
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,ChildItem."No.",LibraryRandom.RandDec(10,2));

      // Exercise: Calculate Plan for Requisition Worksheet.
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item."No.",ChildItem."No.",StartDate,EndDate);

      // Verify: Verify Planning Worksheet with Action Message, Reference Order Type and Quantity.
      VerifyRequisitionLineWithItem(ChildItem,RequisitionLine."Action Message"::New,ChildItem."Safety Stock Quantity",0,'','');
    END;

    [Test]
    PROCEDURE CalcRegenPlanForSupplyDemandMismatchLocationLFLItem@115();
    VAR
      Item@1002 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      RequisitionLine@1005 : Record 246;
    BEGIN
      // Setup: Create Lot for Lot Item. Create Sales Order With Location.
      Initialize;
      CreateLotForLotItem(Item);
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));
      UpdateLocationAndVariantOnSalesLine(SalesLine,LocationYellow.Code,'');

      // Create Purchase Order with different Location than Sales Order.
      CreatePurchaseOrderWithLocationAndVariant(PurchaseHeader,Item."No.",LocationBlue.Code,'',SalesLine.Quantity);

      // Exercise: Calculate Plan for Planning Worksheet.
      CalculateRegenPlanForPlanningWorksheet(Item);

      // Verify: Verify Planning Worksheet for Location,Quantity, and Action Message when demand and supply have mismatch of Location.
      SelectPurchaseLine(PurchaseLine,Item."No.");
      VerifyRequisitionLineForLocationAndVariant(
        Item,RequisitionLine."Action Message"::New,SalesLine.Quantity,0,SalesLine."Shipment Date",LocationYellow.Code,'');
      VerifyRequisitionLineForLocationAndVariant(
        Item,RequisitionLine."Action Message"::Cancel,0,PurchaseLine.Quantity,PurchaseLine."Expected Receipt Date",LocationBlue.Code,
        '');
    END;

    [Test]
    PROCEDURE CalcRegenPlanForTransferOrderItem@100();
    VAR
      Item@1001 : Record 27;
      TransferHeader@1002 : Record 5740;
      TransferLine@1004 : Record 5741;
      RequisitionLine@1003 : Record 246;
    BEGIN
      // Setup: Create Order Item. Create Transfer Order.
      Initialize;
      CreateOrderItem(Item);
      CreateTransferOrderWithReceiptDate(
        TransferHeader,Item."No.",LocationSilver.Code,LocationBlue.Code,LibraryRandom.RandDec(10,2));

      // Exercise: Calculate Plan for Planning Worksheet.
      CalculateRegenPlanForPlanningWorksheet(Item);

      // Verify: Verify Planning Worksheet for Location,Quantity, and Action Message.
      SelectTransferLine(TransferLine,TransferHeader."No.");
      VerifyRequisitionLineWithDueDateForTransfer(
        RequisitionLine."Action Message"::Cancel,0,TransferLine.Quantity,TransferLine."Receipt Date",LocationBlue.Code);
    END;

    [Test]
    PROCEDURE CalcRegenPlanForPostedPurchaseAndTransferLFLItem@97();
    VAR
      Item@1001 : Record 27;
      TransferHeader@1002 : Record 5740;
      RequisitionLine@1004 : Record 246;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create Lot For Lot Item.
      Initialize;
      CreateLotForLotItem(Item);

      // Create Purchase Order with Location.Post Purchase Order.
      Quantity := LibraryRandom.RandDec(10,2);
      CreateAndPostPurchaseWithLocation(Item."No.",LocationBlue.Code,Quantity);

      // Create and Post Transfer Order.
      CreateTransferOrderWithReceiptDate(TransferHeader,Item."No.",LocationBlue.Code,LocationRed.Code,Quantity);
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);  // Ship -TRUE.

      // Exercise: Calculate Plan for Planning Worksheet.
      CalculateRegenPlanForPlanningWorksheet(Item);

      // Verify: Verify that no Requisition line is created for Requisition Worksheet.
      FilterOnRequisitionLine(RequisitionLine,Item."No.");
      Assert.IsTrue(RequisitionLine.ISEMPTY,STRSUBSTNO(RequisitionLineMustNotExist,Item."No."));
    END;

    [Test]
    PROCEDURE CalcRegenPlanForSalesWithLocationCarryOutForTransferOrderLFLItem@174();
    BEGIN
      // Setup: Calculate Plan for Planning Worksheet and Carry out Action Message with locations that are not Warehouse Locations.
      Initialize;
      CalcRegenPlanForSalesAndSKUNewTransferWithLocationsAfterCarryOutLFLItem(LocationRed.Code,LocationBlue.Code);
    END;

    [Test]
    PROCEDURE CalcRegenPlanForSalesWithWarehouseLocationCarryOutForTransferOrderLFLItem@167();
    BEGIN
      // Setup: Calculate Plan for Planning Worksheet and Carry out Action Message with Warehouse Locations.
      Initialize;
      CalcRegenPlanForSalesAndSKUNewTransferWithLocationsAfterCarryOutLFLItem(LocationSilver2.Code,LocationGreen.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerOnDeleteSalesHeader,ItemTrackingPageHandler)]
    PROCEDURE ItemLotNosOnShippedTransferOrderAfterSalesOrderDeleted@33();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      TransferHeader@1003 : Record 5740;
      PurchaseLine@1004 : Record 39;
    BEGIN
      // Setup: Create Location.
      Initialize;

      // Create a new Item and define the Stockkeeping Unit.
      CreateOrderItem(Item);
      CreateLotNosAndStockkeepingUnitForItemWithTransfer(Item,LocationRed.Code,LocationBlue.Code);

      // Exercise: Create Sales Order with Locations.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));
      UpdateLocationAndVariantOnSalesLine(SalesLine,LocationBlue.Code,'');

      // Calculate Plan for Planning Worksheet and Carry out Action Message. Assign Lot Specific Tracking on Purchase Line. Post Purchase Order with Receive.
      CalcRegenPlanAndCarryOutActionMessage(Item);
      AssignTrackingAndPostPurchase(PurchaseLine,Item."No.");

      // Ship transfer order and delete Sales order.
      FindAndPostTransferHeaderByItemNo(TransferHeader,Item."No.");
      SalesHeader.DELETE(TRUE);

      // Receive transfer order.
      LibraryWarehouse.PostTransferOrder(TransferHeader,FALSE,TRUE);

      // Verify: Transfer Shipment can be post successfully.
      VerifyTransferShipment(Item."No.",LocationRed.Code,LocationBlue.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerOnDeleteSalesHeader,ItemTrackingPageHandlerForAssignSN,QuantityToCreatePageHandler)]
    PROCEDURE ItemSerialNosOnShippedTransferOrderAfterSalesOrderDeleted@141();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      TransferHeader@1003 : Record 5740;
      PurchaseLine@1004 : Record 39;
    BEGIN
      // Setup: Create Location.
      Initialize;

      // Create a new Item and define the Stockkeeping Unit.
      CreateOrderItem(Item);
      CreateSerialNosAndStockkeepingUnitForItemWithTransfer(Item,LocationRed.Code,LocationBlue.Code);

      // Exercise: Create Sales Order with Locations.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandIntInRange(10,2));
      UpdateLocationAndVariantOnSalesLine(SalesLine,LocationBlue.Code,'');

      // Calculate Plan for Planning Worksheet and Carry out Action Message. Assign Lot Specific Tracking on Purchase Line. Post Purchase Order with Receive.
      CalcRegenPlanAndCarryOutActionMessage(Item);
      AssignTrackingAndPostPurchase(PurchaseLine,Item."No.");

      // Ship transfer order and delete Sales order.
      FindAndPostTransferHeaderByItemNo(TransferHeader,Item."No.");
      SalesHeader.DELETE(TRUE);

      // Receive transfer order.
      LibraryWarehouse.PostTransferOrder(TransferHeader,FALSE,TRUE);

      // Verify: Transfer Shipment can be post successfully.
      VerifyTransferShipment(Item."No.",LocationRed.Code,LocationBlue.Code);
    END;

    LOCAL PROCEDURE CalcRegenPlanForSalesAndSKUNewTransferWithLocationsAfterCarryOutLFLItem@140(FromLocationCode@1001 : Code[10];ToLocationCode@1002 : Code[10]);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
    BEGIN
      // Create Lot for Lot Item and Stockkeeping Unit on Locations.
      CreateLotForLotItem(Item);
      CreateSKUSetupWithTransfer(Item."No.",FromLocationCode,ToLocationCode);

      // Create Sales Order with Locations.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2));
      UpdateLocationAndVariantOnSalesLine(SalesLine,ToLocationCode,'');

      // Exercise: Calculate Plan for Planning Worksheet and Carry out Action Message.
      CalcRegenPlanAndCarryOutActionMessage(Item);

      // Verfiy: Verify Transfer Order is created with required quantity successfully with both types of locations after Carry Out with Locations.
      VerifyTransferLine(Item."No.",FromLocationCode,SalesLine.Quantity);
    END;

    [Test]
    PROCEDURE RefreshProdOrderAfterDeleteRoutingLineWithComment@190();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      ProductionOrder@1005 : Record 5405;
      WorkCenterNo@1006 : Code[20];
      Operation@1002 : 'Comment,Tool,Personnel,QualityMeasure';
    BEGIN
      // Setup: Create item. Create routing with comment. Create and release sales order.
      Initialize;
      // Reordering Policy can be anyone except Order. Since reservation entry will be generated when select order
      // so that production order cannot be refreshed. Using Lot-for-Lot is easier than other available options.
      CreateItem(Item,Item."Reordering Policy"::"Lot-for-Lot",Item."Replenishment System"::"Prod. Order");
      WorkCenterNo := CreateRoutingWithOperationAndUpdateItem(Item,Operation::Comment);
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.");

      // Exercise: Delete the routing line after Calculate Regenerative Plan, then Carry Out Action Message.
      DeletePlanningRoutingLineAndCarryOutActionMessage(Item,WorkCenterNo);

      // Verify: Production order can be refreshed successfully without error.
      VerifyProductionOrderWithRefresh(ProductionOrder,Item."No.");
    END;

    [Test]
    PROCEDURE RefreshProdOrderAfterDeleteRoutingLineWithTool@194();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      ProductionOrder@1005 : Record 5405;
      WorkCenterNo@1006 : Code[20];
      Operation@1007 : 'Comment,Tool,Personnel,QualityMeasure';
    BEGIN
      // Setup: Create item. Create routing with Tool. Create and release sales order.
      Initialize;
      // Reordering Policy can be anyone except Order. Since reservation entry will be generated when select order
      // so that production order cannot be refreshed. Using Lot-for-Lot is easier than other available options.
      CreateItem(Item,Item."Reordering Policy"::"Lot-for-Lot",Item."Replenishment System"::"Prod. Order");
      WorkCenterNo := CreateRoutingWithOperationAndUpdateItem(Item,Operation::Tool);
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.");

      // Exercise: Delete the routing line after Calculate Regenerative Plan, then Carry Out Action Message.
      DeletePlanningRoutingLineAndCarryOutActionMessage(Item,WorkCenterNo);

      // Verify: Production order can be refreshed successfully without error.
      VerifyProductionOrderWithRefresh(ProductionOrder,Item."No.");
    END;

    [Test]
    PROCEDURE RefreshProdOrderAfterDeleteRoutingLineWithPersonnel@195();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      ProductionOrder@1005 : Record 5405;
      WorkCenterNo@1006 : Code[20];
      Operation@1007 : 'Comment,Tool,Personnel,QualityMeasure';
    BEGIN
      // Setup:  Create item. Create routing with personnel. Create and release sales order.
      Initialize;
      // Reordering Policy can be anyone except Order. Since reservation entry will be generated when select order
      // so that production order cannot be refreshed. Using Lot-for-Lot is easier than other available options.
      CreateItem(Item,Item."Reordering Policy"::"Lot-for-Lot",Item."Replenishment System"::"Prod. Order");
      WorkCenterNo := CreateRoutingWithOperationAndUpdateItem(Item,Operation::Personnel);
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.");

      // Exercise: Delete the routing line after Calculate Regenerative Plan, then Carry Out Action Message.
      DeletePlanningRoutingLineAndCarryOutActionMessage(Item,WorkCenterNo);

      // Verify: Production order can be refreshed successfully without error.
      VerifyProductionOrderWithRefresh(ProductionOrder,Item."No.");
    END;

    [Test]
    PROCEDURE RefreshProdOrderAfterDeleteRoutingLineWithQualityMeasure@196();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      ProductionOrder@1005 : Record 5405;
      WorkCenterNo@1006 : Code[20];
      Operation@1008 : 'Comment,Tool,Personnel,QualityMeasure';
    BEGIN
      // Setup: Create item. Create routing with Quality measure.Create and release sales order.
      Initialize;
      // Reordering Policy can be anyone except Order. Since reservation entry will be generated when select order
      // so that production order cannot be refreshed. Using Lot-for-Lot is easier than other available options.
      CreateItem(Item,Item."Reordering Policy"::"Lot-for-Lot",Item."Replenishment System"::"Prod. Order");
      WorkCenterNo := CreateRoutingWithOperationAndUpdateItem(Item,Operation::QualityMeasure);
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.");

      // Exercise: Delete the routing line after Calculate Regenerative Plan, then Carry Out Action Message.
      DeletePlanningRoutingLineAndCarryOutActionMessage(Item,WorkCenterNo);

      // Verify: Production order is refreshed successfully without error.
      VerifyProductionOrderWithRefresh(ProductionOrder,Item."No.");
    END;

    [Test]
    PROCEDURE CalcNetChangePlanAfterInsertOneLineInPlanningComponent@191();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      PlanningComponent@1004 : Record 99000829;
      RequisitionLine@1005 : Record 246;
      Quantity@1006 : Decimal;
      QuantityPer@1007 : Decimal;
    BEGIN
      // Setup: Create sales order.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      QuantityPer := LibraryRandom.RandInt(10);
      CreateSalesOrderForRegenPlan(Item,Item2,Quantity);

      // Exercise: Calculate Regenerative Plan for Planning Worksheet.
      // Add one line in Planning Component. Then calculate Net Change Plan.
      CalculateRegenPlanForPlanningWorksheet(Item);
      SelectRequisitionLine(RequisitionLine,Item."No.");
      CreateOneLineOnPlanningComponent(PlanningComponent,RequisitionLine,Item2."No.",QuantityPer);
      CalcNetChangePlanForPlanWkshForMultipleItems(Item."No.",Item2."No.");

      // Verify: Verify calculate successfully and the added line in Planning Component is added in Planning worksheet.
      VerifyRequisitionLineWithAddedItem(RequisitionLine,Item2."No.",Quantity * QuantityPer);
    END;

    [Test]
    PROCEDURE PostItemJournalWithinItemAvailabilityWhenReservationEntryExist@223();
    BEGIN
      PostItemJournalWithItemAvailabilityWhenReservationEntryExist(TRUE); // No warning pops up when it has available Item.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE PostItemJournalOutOfItemAvailabilityWhenReservationEntryExist@225();
    BEGIN
      PostItemJournalWithItemAvailabilityWhenReservationEntryExist(FALSE); // Warning pops up when it hasn't available Item.
    END;

    LOCAL PROCEDURE PostItemJournalWithItemAvailabilityWhenReservationEntryExist@222(ItemAvailability@1010 : Boolean);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      RequisitionWkshName@1004 : Record 245;
      RequisitionLine@1005 : Record 246;
      ItemJournalLine@1007 : Record 83;
      ItemJournalBatch@1008 : Record 233;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create an Order Item.
      Initialize;
      CreateOrderItem(Item);
      Quantity := LibraryRandom.RandInt(10);

      // Create a Sales Order with Location.
      CreateSalesOrderWithLocation(SalesHeader,SalesLine,Item."No.",Quantity,LocationYellow.Code);

      // Calculate Plan and Carry Out Action Message. Post carried Purchase Order.
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item."No.",'',WORKDATE,WORKDATE);
      CarryoutActionMessageForPlanWorksheet(RequisitionLine,Item."No.");
      PostCarriedOutPurchaseOrder(Item."No.");

      // Post Positive Adjustment in Item Journal.
      UpdateInventoryWithLocationAndVariant(
        ItemJournalLine,Item."No.",Quantity,ItemJournalLine."Entry Type"::"Positive Adjmt.",LocationYellow.Code,'');

      // Create Negative Adjustment with a new Batch in Item Journal.
      CreateItemJournalLineWithNewBatch(
        ItemJournalBatch,ItemJournalLine,Item."No.",Quantity,ItemJournalLine."Entry Type"::"Negative Adjmt.",LocationYellow.Code);

      // Exercise & Verify: Post Negative Adjustment with default Batch in Item Journal.
      IF ItemAvailability THEN BEGIN
        UpdateInventoryWithLocationAndVariant(
          ItemJournalLine,Item."No.",Quantity,ItemJournalLine."Entry Type"::"Negative Adjmt.",LocationYellow.Code,'');
        VerifyItemInventory(Item,Quantity); // Verify Item Inventory after posting Item Journal successfully.
      END ELSE BEGIN
        LibraryVariableStorage.Enqueue(ReservationEntryExistMsg); // Requied for ConfirmHandler.
        UpdateInventoryWithLocationAndVariant(
          ItemJournalLine,Item."No.",Quantity + 1,ItemJournalLine."Entry Type"::"Negative Adjmt.",LocationYellow.Code,''); // Quantity needs greater than the positive qty.
        VerifyItemInventory(Item,(Quantity - 1)); // Verify Item Inventory after posting Item Journal successfully.
      END;
    END;

    [Test]
    PROCEDURE ReceivePurchaseOrderForDropShipment@262();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
    BEGIN
      // Setup: Create Order Item. Create Sales Order with Drop Shipment. Carry out Purchase Order by Requisition Worksheet.
      Initialize;
      CarryOutPurchaseOrderForDropShipmentOnReqWksh(Item,SalesHeader,SalesLine);

      // Exercise: Receive Purchase Order.
      SelectPurchaseLine(PurchaseLine,Item."No.");
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      SalesHeader.GET(SalesLine."Document Type"::Order,SalesLine."Document No."); // Get the Sales Header.

      // Verify: Verify the Ship Field is TRUE and Status is Released on Sales Header.
      VerifyShipAndStatusFieldOnSalesHeader(SalesHeader.Ship,SalesHeader.Status,TRUE,SalesHeader.Status::Released);
    END;

    [Test]
    PROCEDURE ShipSalesOrderForDropShipment@294();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
    BEGIN
      // Setup: Create Order Item. Create Sales Order with Drop Shipment. Carry out Purchase Order by Requisition Worksheet.
      Initialize;
      CarryOutPurchaseOrderForDropShipmentOnReqWksh(Item,SalesHeader,SalesLine);

      // Exercise: Ship the Sales Order.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      SelectPurchaseLine(PurchaseLine,Item."No.");
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No."); // Get the Purchase Header.

      // Verify: Verify the Receive Field is TRUE and Status is Released on Purchase Header.
      VerifyReceiveAndStatusFieldOnPurchaseHeader(PurchaseHeader.Receive,PurchaseHeader.Status,TRUE,PurchaseHeader.Status::Released);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcRegenPlanFromSalesOrderWithCombinedMPSAndMRP@208();
    BEGIN
      CalcRegenPlanWithCombinedMPSAndMRP(TRUE);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE CalcRegenPlanFromProdForecastWithCombinedMPSAndMRP@203();
    BEGIN
      CalcRegenPlanWithCombinedMPSAndMRP(FALSE);
    END;

    [Test]
    PROCEDURE ReCalcRegenPlanAfterDeleteOneRequisitionLineAtFirstCalculation@215();
    VAR
      Item@1000 : Record 27;
      Item2@1005 : Record 27;
      RequisitionLine@1004 : Record 246;
      LineNo@1001 : Integer;
    BEGIN
      // Verify no extra empty line generated before the generated line with Item when re-calc Regenerative Plan in Planning Worksheet.

      // Setup: Create two Maximum Items. Maximum Inventory must be greater than Reorder Point.
      Initialize;
      CreateMaximumQtyItem(Item,LibraryRandom.RandIntInRange(40,50));
      CreateMaximumQtyItem(Item2,LibraryRandom.RandIntInRange(40,50));

      // Calculate Regenerative Plan for two Items. Delete one Requisition Line.
      // Carry Out Action Message for Planning Worksheet.
      CalcRegenPlanForPlanWkshWithLocation(Item."No.",Item2."No.",'','');
      LineNo := DeleteRequisitionLine(Item."No."); // Return Line No. 10000.
      CarryoutActionMessageForPlanWorksheet(RequisitionLine,Item2."No.");

      // Exercise: Re-calculate Regenerative Plan.
      CalculateRegenPlanForPlanningWorksheet(Item);

      // Verify: Verify no extra empty line generated before the generated line with Item.
      SelectRequisitionLine(RequisitionLine,Item."No.");
      Assert.AreEqual(LineNo,RequisitionLine."Line No.",RequisitionLineNoErr);
    END;

    [Test]
    [HandlerFunctions(OrderPromisingPageHandler,MessageHandler)]
    PROCEDURE PostInventoryPickWhenCalculateCapableToPromiseForSalesNotReserveFromILE@217();
    BEGIN
      // Verify Inventory Pick can be posted successfully when the Quantity on Pick exists in Inventory,
      // the quantity that is out of stock on Sales Order reserved from Requisition Line by Order Promising.
      PostInventoryPickWhenCalculateCapableToPromiseForSales(FALSE); // Only reserve from Requsition Line.
    END;

    [Test]
    [HandlerFunctions(ReservationHandler,OrderPromisingPageHandler,MessageHandler)]
    PROCEDURE PostInventoryPickWhenCalculateCapableToPromiseForSalesReserveFromILE@233();
    BEGIN
      // Verify Inventory Pick can be posted successfully when the Quantity on Pick exists in Inventory and is partially reserved from ILE,
      // the quantity that is out of stock on Sales Order reserved from Requisition Line by Order Promising.
      PostInventoryPickWhenCalculateCapableToPromiseForSales(TRUE); // Reserve from ILE and Requsition Line.
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler,MessageHandler2,PlanningErrorLogPageHandler2)]
    PROCEDURE CalcPlanForSubChildItemWithBOMsUnderDevelopment@329();
    VAR
      Item@1001 : ARRAY [2] OF Record 27;
      ChildItem@1014 : Record 27;
      ProductionBOMHeader@1003 : Record 99000771;
      PurchaseHeader@1015 : Record 38;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      RequisitionWkshName@1008 : Record 245;
      PlanningWorksheet@1007 : TestPage 99000852;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Calculate Regenerative Plan] [Manufacturing]
      // [SCENARIO 375502] When two items are planned for replenishment and each has not certified BOM, two errors logged for each item respectively.

      // [GIVEN] Two Items with Prod Order replenishment, each has BOM with Status = "New"
      Initialize;
      CreateItem(ChildItem,ChildItem."Reordering Policy"::"Lot-for-Lot",ChildItem."Replenishment System"::Purchase);
      CreateProductionBOM(ProductionBOMHeader,ChildItem."No.");
      CreatePurchaseOrderWithLocationAndVariant(
        PurchaseHeader,ChildItem."No.",'','',LibraryRandom.RandDecInRange(1000,2000,2));

      CreateItem(Item[1],Item[1]."Reordering Policy"::"Lot-for-Lot",Item[1]."Replenishment System"::"Prod. Order");
      UpdateProductionBOMNoOnItem(Item[1],ProductionBOMHeader."No.");
      CreateItem(Item[2],Item[2]."Reordering Policy"::"Lot-for-Lot",Item[2]."Replenishment System"::"Prod. Order");
      UpdateProductionBOMNoOnItem(Item[2],ProductionBOMHeader."No.");

      // [GIVEN] Create and Post Sales Order for Item 1 and Item 2.
      CreateSalesOrder(
        SalesHeader,SalesLine,Item[1]."No.",LibraryRandom.RandDecInRange(10,20,2));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      CLEAR(SalesHeader);
      CreateSalesOrder(
        SalesHeader,SalesLine,Item[2]."No.",LibraryRandom.RandDecInRange(10,20,2));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [WHEN] Calculate regenerative Plan.
      // [THEN] Two errors are logged for each Item respectively.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      LibraryVariableStorage.Enqueue(Item[1]."No.");  // for CalculatePlanPlanWkshRequestPageHandler.
      LibraryVariableStorage.Enqueue(Item[2]."No.");  // for CalculatePlanPlanWkshRequestPageHandler.
      LibraryVariableStorage.Enqueue(Item[2]."No.");  // for PlanningErrorLogPageHandler2.
      LibraryVariableStorage.Enqueue(Item[1]."No.");  // for PlanningErrorLogPageHandler2.
      CalcRegenPlanForPlanningWkshPage(PlanningWorksheet,RequisitionWkshName.Name);
      // Verification is done in PlanningErrorLogPageHandler2.
    END;

    [Test]
    [HandlerFunctions(MessageHandler2)]
    PROCEDURE CalcRegenPlanForThreeMaketoOrderItemsWithInventoryOfChildItem@232();
    VAR
      ParentItem@1002 : ARRAY [2] OF Record 27;
      ChildItem@1001 : Record 27;
      ChildRequisitionLine@1025 : Record 246;
      ParentItemSafetyStockQty@1004 : ARRAY [2] OF Decimal;
      ParentItemDemandQty@1006 : ARRAY [2] OF Decimal;
      ItemFilter@1013 : Text;
      ShipmentDate@1020 : Date;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Calculate Regenerative Plan] [Manufacturing]
      // [SCENARIO 379441] For three Items with Prod Order replenishment "Ref. Order No." must be corresponding
      Initialize;

      // [GIVEN] First and Second Parent Items have same demand dates.
      ShipmentDate := WORKDATE + LibraryRandom.RandInt(30); // up to 1 month after WORKDATE

      // [GIVEN] Child Item with Prod Order replenishment, Manufacturing Policy: Make-to-Order, zero safety stock, nonzero inventory
      CreateZeroSafetyStockItemWithInventory(ChildItem);

      // [GIVEN] First Parent Item with Prod Order replenishment, Manufacturing Policy: Make-to-Order, nonzero safety stock
      ParentItemDemandQty[1] := LibraryRandom.RandInt(20) + 1; // demand more then 1
      ParentItemSafetyStockQty[1] := ParentItemDemandQty[1] * 10; // strong greater then demand
      CreateSafetyStockBOMItemWithDemand(
        ChildItem."No.",ParentItemSafetyStockQty[1],ParentItemDemandQty[1],ShipmentDate,ParentItem[1]);

      // [GIVEN] Second Parent Item with Prod Order replenishment, Manufacturing Policy: Make-to-Order, nonzero safety stock
      ParentItemDemandQty[2] := ParentItemDemandQty[1] + LibraryRandom.RandInt(10); // demand 1 and demand 2 - different values
      ParentItemSafetyStockQty[2] := ParentItemDemandQty[2] * 10; // strong greater then demand
      CreateSafetyStockBOMItemWithDemand(
        ChildItem."No.",ParentItemSafetyStockQty[2],ParentItemDemandQty[2],ShipmentDate,ParentItem[2]);

      // [WHEN] Calculate Regenerative Plan for Planning Worksheet with three Items.
      ItemFilter := STRSUBSTNO('%1|%2|%3',ChildItem."No.",ParentItem[1]."No.",ParentItem[2]."No.");
      CalcRegenPlanForPlanWkshWithItemFilterAndPeriod(ItemFilter,WORKDATE,ShipmentDate);

      // [THEN] Requisition Line for Child Item corresponding to First Parent Item must exist with same Qty and same "Ref. Order No."
      FilterChildRequisitionLineByNoAndQty(ParentItem[1]."No.",ChildItem."No.",ParentItemDemandQty[1],ChildRequisitionLine);
      Assert.RecordIsNotEmpty(ChildRequisitionLine);

      // [THEN] Requisition Line for Child Item corresponding to Second Parent Item must exist with same Qty and same "Ref. Order No."
      FilterChildRequisitionLineByNoAndQty(ParentItem[2]."No.",ChildItem."No.",ParentItemDemandQty[2],ChildRequisitionLine);
      Assert.RecordIsNotEmpty(ChildRequisitionLine);
    END;

    [Test]
    [HandlerFunctions(MessageHandler2)]
    PROCEDURE CalcRegenPlanForProdOrderItemWithDampenerQtyAndCheckSurplus@236();
    VAR
      Item@1002 : Record 27;
      ReservationEntry@1003 : Record 337;
      DampenerQuantity@1000 : Integer;
      ShipmentDate@1001 : Date;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Calculate Regenerative Plan] [Manufacturing]
      // [SCENARIO 379978] For Item with Prod Order replenishment and "Dampener Quantity" Surplus must be equal to "Dampener Quantity"
      Initialize;

      // [GIVEN] Item has Dampener Quantity.
      DampenerQuantity := LibraryRandom.RandInt(10);
      CreateItemWithDampenerQuantity(Item,DampenerQuantity);

      // [GIVEN] Sales Order For Item has Production Order, "Reserved Quantity" is less on the "Dampener Quantity".
      ShipmentDate := WORKDATE + LibraryRandom.RandIntInRange(30,60); // up to 1 - 2 months after WORKDATE
      CreateSalesOrderForItemPlanProdOrderAndReduceQtyOnDampener(Item,ShipmentDate);

      // [WHEN] Calculate Regenerative Plan for Planning Worksheet with Item.
      CalcRegenPlanForPlanWkshWithItemFilterAndPeriod(Item."No.",WORKDATE,ShipmentDate);

      // [THEN] Reservation Entry for Item contains one row with Status Surplus.
      FilterSurplusReservationEntryByItemNo(ReservationEntry,Item."No.");
      Assert.RecordCount(ReservationEntry,1);

      // [THEN] Reservation Entry Quantity with "Reservation Status" Surplus for Item is equal to "Dampener Quantity".
      ReservationEntry.FINDFIRST;
      Assert.AreEqual(
        DampenerQuantity,ReservationEntry.Quantity,STRSUBSTNO(ReservationEntrySurplusErr,DampenerQuantity,ReservationEntry));
    END;

    [Test]
    [HandlerFunctions(MessageHandler2)]
    PROCEDURE CheckPlanningComponentResQtys@240();
    VAR
      Item@1002 : Record 27;
      ChildItem@1004 : Record 27;
      PlanningComponent@1000 : Record 99000829;
      ReservationEntry@1003 : Record 337;
      ShipmentDate@1001 : Date;
      ItemFilter@1008 : Text;
    BEGIN
      // [FEATURE] [Planning Component] [Reservation]
      // [SCENARIO 380209] When Item has only Base Unit Of Measure the fields "Reserved Quantity" and "Reserved Qty. (Base)" must be equal in "Planning Component" table
      Initialize;

      // [GIVEN] Prod. Order Lot For Lot Child Item.
      CreateProdOrderLotForLotReserveAlwaysItem(ChildItem);

      // [GIVEN] Prod. Order Lot For Lot Parent Item with Child Item as BOM.
      CreateProdOrderLotForLotProductionBOMItem(Item,ChildItem."No.");

      // [GIVEN] Demand For Parent Item, Quantity = X.
      ShipmentDate := CreateSalesOrderForItemRandomQuantity(Item);

      // [WHEN] Calculate Regenerative Plan for Planning Worksheet with both Items.
      ItemFilter := STRSUBSTNO('%1|%2',ChildItem."No.",Item."No.");
      CalcRegenPlanForPlanWkshWithItemFilterAndPeriod(ItemFilter,ShipmentDate,ShipmentDate);

      // [THEN] Planning Component for Child Item exists.
      FindPlanningComponentByItemNoAndCALCResQtys(PlanningComponent,ChildItem."No.");

      // [THEN] Reservation Entry of type Reservation for Planning Component and Child Item exists.
      FindReservationReservationEntryByItemNoForPlanningComponent(ReservationEntry,ChildItem."No.");

      // [THEN] "Planning Component"."Reserved Qty. (Base)" is equal to -"Reservation Entry"."Quantity (Base)" = X.
      Assert.AreEqual(
        PlanningComponent."Reserved Qty. (Base)",-ReservationEntry."Quantity (Base)",
        STRSUBSTNO(PlanningComponentReseredQtyErr,PlanningComponent.FIELDNAME("Reserved Qty. (Base)")));

      // [THEN] "Planning Component"."Reserved Quantity" is equal to -"Reservation Entry".Quantity = X.
      Assert.AreEqual(
        PlanningComponent."Reserved Quantity",-ReservationEntry.Quantity,
        STRSUBSTNO(PlanningComponentReseredQtyErr,PlanningComponent.FIELDNAME("Reserved Quantity")));
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE DeleteReqLineWithoutPlanningComponentsInWorksheetWithFilterLikeName@12();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      RequisitionWkshName@1002 : Record 245;
      RequisitionLine@1001 : Record 246;
      PlanningWorksheet@1003 : TestPage 99000852;
    BEGIN
      // [FEATURE] [Reservation]
      // [SCENARIO 204345] Requisition line can be deleted with its reservation entries from a worksheet having a filter-like name.
      Initialize;

      // [GIVEN] Item "I" with Lot-for-Lot reordering policy.
      CreateLotForLotItem(Item);

      // [GIVEN] Sales order for item "I".
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandIntInRange(10,20));
      UpdateShipmentDateOnSalesLine(SalesLine,LibraryRandom.RandDateFromInRange(WORKDATE,30,60));

      // [GIVEN] Planning worksheet "W" with filter-like name "20000000..".
      CreateRequisitionWorksheetWithGivenName(RequisitionWkshName,'20000000..');

      // [GIVEN] Regenerative plan in the worksheet "W" is calculated for item "I".
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",Item."No.");

      // [WHEN] Delete planning line for "I".
      DeleteRequisitionLine(Item."No.");

      // [THEN] The planning line is deleted.
      FilterOnRequisitionLine(RequisitionLine,Item."No.");
      Assert.RecordIsEmpty(RequisitionLine);

      // [THEN] Reservation entries for the planning line are deleted.
      VerifyReservationEntryIsEmpty(Item."No.",DATABASE::"Requisition Line");

      // Tear down.
      RequisitionWkshName.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler,MessageHandler2)]
    PROCEDURE DeleteReqLineWithPlanningComponentsInWorksheetWithFilterLikeName@26();
    VAR
      CompItem@1004 : Record 27;
      ProdItem@1003 : Record 27;
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      RequisitionWkshName@1002 : Record 245;
      RequisitionLine@1001 : Record 246;
      PlanningWorksheet@1000 : TestPage 99000852;
      ReqLineNo@1010 : Integer;
    BEGIN
      // [FEATURE] [Planning Component] [Reservation]
      // [SCENARIO 204345] Requisition line can be deleted with its planning components and their reservation entries from a worksheet having a filter-like name.
      Initialize;

      // [GIVEN] Production item "P" with a purchased component "C", both with Lot-for-Lot reordering policy.
      CreateProductionItem(ProdItem,CompItem);

      // [GIVEN] Sales order for item "P".
      CreateSalesOrder(SalesHeader,SalesLine,ProdItem."No.",LibraryRandom.RandIntInRange(10,20));
      UpdateShipmentDateOnSalesLine(SalesLine,LibraryRandom.RandDateFromInRange(WORKDATE,30,60));

      // [GIVEN] Planning worksheet "W" with filter-like name "..20000000".
      CreateRequisitionWorksheetWithGivenName(RequisitionWkshName,'..20000000');

      // [GIVEN] Regenerative plan in the worksheet "W" is calculated for items "P" and "C".
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,ProdItem."No.",CompItem."No.");

      // [WHEN] Delete planning line for "P".
      ReqLineNo := DeleteRequisitionLine(ProdItem."No.");

      // [THEN] The planning line is deleted.
      FilterOnRequisitionLine(RequisitionLine,ProdItem."No.");
      Assert.RecordIsEmpty(RequisitionLine);

      // [THEN] Planning component "C" for the deleted planning line is deleted too.
      VerifyPlanningComponentsAreEmpty(RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name,ReqLineNo);

      // [THEN] Reservation entries for the planning component are deleted.
      VerifyReservationEntryIsEmpty(CompItem."No.",DATABASE::"Planning Component");

      // Tear down.
      RequisitionWkshName.DELETE(TRUE);
    END;

    LOCAL PROCEDURE Initialize@5();
    VAR
      RequisitionLine@1001 : Record 246;
      ReservationEntry@1002 : Record 337;
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      RequisitionLine.DELETEALL;
      ReservationEntry.DELETEALL;
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      NoSeriesSetup;
      ItemJournalSetup;
      CreateLocationSetup;
      ConsumptionJournalSetup;
      OutputJournalSetup;
      DisableManufacturingPlanningWarning;

      LibrarySetupStorage.Save(DATABASE::"Inventory Setup");
      LibrarySetupStorage.Save(DATABASE::"Manufacturing Setup");
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Posted Shipment Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@54();
    BEGIN
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationSetup@65();
    VAR
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationYellow);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationRed);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationBlue);
      LibraryWarehouse.CreateInTransitLocation(LocationInTransit);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationGreen.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationSilver2.Code,FALSE);

      CreateAndUpdateLocation(LocationGreen,TRUE,FALSE,FALSE,FALSE,TRUE,FALSE);  // Location Green.
      CreateAndUpdateLocation(LocationSilver,TRUE,FALSE,FALSE,FALSE,FALSE,FALSE);  // Location Silver: Bin Mandatory TRUE.
      CreateAndUpdateLocation(LocationSilver2,FALSE,TRUE,TRUE,FALSE,FALSE,FALSE);  // Location Silver2: Bin Mandatory FALSE, Require Put Away, Require Pick TRUE.
      LibraryWarehouse.CreateNumberOfBins(LocationSilver.Code,'','',LibraryRandom.RandInt(3) + 2,FALSE);  // Random Integer value required for Number of Bins.
    END;

    LOCAL PROCEDURE ConsumptionJournalSetup@138();
    BEGIN
      ConsumptionItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ConsumptionItemJournalTemplate,ConsumptionItemJournalTemplate.Type::Consumption);

      ConsumptionItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(
        ConsumptionItemJournalBatch,ConsumptionItemJournalTemplate.Type,ConsumptionItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE OutputJournalSetup@154();
    BEGIN
      OutputItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(OutputItemJournalTemplate,OutputItemJournalTemplate.Type::Output);

      OutputItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(
        OutputItemJournalBatch,OutputItemJournalTemplate.Type,OutputItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateItem@27(VAR Item@1000 : Record 27;ReorderingPolicy@1002 : Option;ReplenishmentSystem@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Reordering Policy",ReorderingPolicy);
      Item.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProductionItem@310(VAR ProdItem@1001 : Record 27;VAR CompItem@1002 : Record 27);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      CreateLotForLotItem(CompItem);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,CompItem."No.");
      CreateProdOrderLotForLotItem(ProdItem);
      UpdateProductionBOMNoOnItem(ProdItem,ProductionBOMHeader."No.");
    END;

    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    LOCAL PROCEDURE CalcRegenPlanWithCombinedMPSAndMRP@209(IsSales@1002 : Boolean);
    VAR
      ChildItem@1000 : Record 27;
      Item@1010 : Record 27;
      ProductionForecastEntry@1009 : ARRAY [3] OF Record 99000852;
      SalesHeader@1008 : Record 36;
      SalesLine@1007 : Record 37;
      RequisitionWkshName@1005 : Record 245;
      PlanningWorksheet@1003 : TestPage 99000852;
      OldCombinedMPSMRPCalculation@1011 : Boolean;
    BEGIN
      // Setup: Create BOM with component.
      Initialize;
      OldCombinedMPSMRPCalculation := UpdateManufacturingSetup(TRUE); // Combined MPS/MRP Calculation of Manufacturing Setup -TRUE.
      CreateLotForLotItemSetup(ChildItem,Item);

      IF IsSales THEN
        CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2))
      ELSE
        CreateProductionForecastSetup(ProductionForecastEntry,Item."No.",WORKDATE,FALSE); // Boolean - FALSE, for single Forecast Entry.

      // Exercise: Calculate regenerative Plan for Planning Worksheet.
      CreateRequisitionWorksheetName(RequisitionWkshName);
      CalcRegenPlanForPlanWkshPage(PlanningWorksheet,RequisitionWkshName.Name,Item."No.",ChildItem."No.");

      // Verify: Verify MPS Order field on Requisition Line.
      VerifyMPSOrderOnRequisitionLine(Item."No.",TRUE);
      VerifyMPSOrderOnRequisitionLine(ChildItem."No.",FALSE);

      // Teardown.
      UpdateManufacturingSetup(OldCombinedMPSMRPCalculation);
    END;

    LOCAL PROCEDURE CreateLotForLotItem@35(VAR Item@1000 : Record 27);
    BEGIN
      // Create Lot-for-Lot Item.
      CreateItem(Item,Item."Reordering Policy"::"Lot-for-Lot",Item."Replenishment System"::Purchase);
      Item.VALIDATE("Include Inventory",TRUE);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLotNosAndStockkeepingUnitForItemWithTransfer@103(Item@1000 : Record 27;FromLocationCode@1001 : Code[10];ToLocationCode@1002 : Code[10]);
    VAR
      ItemTrackingCode@1003 : Record 6502;
    BEGIN
      // Create Lot Nos for Item.
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      UpdateTrackingAndLotNosOnItem(Item,ItemTrackingCode.Code);

      // Create Stockingkeeping Unit with transfer.
      CreateSKUSetupWithTransfer(Item."No.",FromLocationCode,ToLocationCode);
    END;

    LOCAL PROCEDURE CreateSerialNosAndStockkeepingUnitForItemWithTransfer@188(Item@1000 : Record 27;FromLocationCode@1001 : Code[10];ToLocationCode@1002 : Code[10]);
    VAR
      ItemTrackingCode@1003 : Record 6502;
    BEGIN
      // Create Serial Nos for Item.
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,TRUE,FALSE);
      UpdateTrackingAndSerialNosOnItem(Item,ItemTrackingCode.Code);

      // Create Stockingkeeping Unit with transfer.
      CreateSKUSetupWithTransfer(Item."No.",FromLocationCode,ToLocationCode);
    END;

    LOCAL PROCEDURE CreateOrderItem@49(VAR Item@1000 : Record 27);
    BEGIN
      // Create Order Item.
      CreateItem(Item,Item."Reordering Policy"::Order,Item."Replenishment System"::Purchase);
    END;

    LOCAL PROCEDURE CreateMaximumQtyItem@186(VAR Item@1000 : Record 27;MaximumInventory@1001 : Decimal);
    BEGIN
      // Create Maximum Quantity Item.
      CreateItem(Item,Item."Reordering Policy"::"Maximum Qty.",Item."Replenishment System"::Purchase);
      Item.VALIDATE("Reorder Point",LibraryRandom.RandDec(10,2) + 20);  // Large Random Value required for test.
      Item.VALIDATE("Maximum Inventory",MaximumInventory);
      Item.VALIDATE("Minimum Order Quantity",LibraryRandom.RandDec(5,2));  // Random Quantity less than Reorder Point Quantity.
      Item.VALIDATE("Maximum Order Quantity",MaximumInventory + LibraryRandom.RandDec(100,2));  // Random Quantity more than Maximum Inventory.
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFRQItem@76(VAR Item@1001 : Record 27);
    BEGIN
      // Create Fixed Reorder Quantity Item.
      CreateItem(Item,Item."Reordering Policy"::"Fixed Reorder Qty.",Item."Replenishment System"::Purchase);
      Item.VALIDATE("Safety Stock Quantity",LibraryRandom.RandInt(10));
      Item.VALIDATE("Reorder Point",LibraryRandom.RandInt(10) + 10);  // Reorder Point more than Safety Stock Quantity or Reorder Quantity.
      Item.VALIDATE("Reorder Quantity",LibraryRandom.RandInt(5));
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProductionForecastSetup@14(VAR ProductionForecastEntry@1005 : ARRAY [3] OF Record 99000852;ItemNo@1002 : Code[20];ForecastDate@1001 : Date;MultipleLine@1000 : Boolean);
    VAR
      ProductionForecastName@1003 : Record 99000851;
    BEGIN
      // Using Random Value and Dates based on WORKDATE.
      LibraryManufacturing.CreateProductionForecastName(ProductionForecastName);
      UpdateForecastOnManufacturingSetup(ProductionForecastName.Name);
      CreateAndUpdateProductionForecast(
        ProductionForecastEntry[1],ProductionForecastName.Name,ForecastDate,ItemNo,LibraryRandom.RandDec(10,2) + 100);  // Large Random Quantity Required.
      IF MultipleLine THEN BEGIN
        CreateAndUpdateProductionForecast(
          ProductionForecastEntry[2],ProductionForecastName.Name,GetRandomDateUsingWorkDate(1),ItemNo,
          LibraryRandom.RandDec(10,2) + 100);  // Large Random Quantity Required.
        CreateAndUpdateProductionForecast(
          ProductionForecastEntry[3],ProductionForecastName.Name,GetRandomDateUsingWorkDate(2),ItemNo,
          LibraryRandom.RandDec(10,2) + 100);  // Large Random Quantity Required.
      END;
    END;

    LOCAL PROCEDURE CreateAndPostInventoryPickFromSalesOrder@221(SalesHeaderNo@1000 : Code[20];LocationCode@1001 : Code[10]);
    VAR
      WhseActivityHeader@1002 : Record 5766;
    BEGIN
      LibraryWarehouse.CreateInvtPutPickMovement(
        WhseActivityHeader."Source Document"::"Sales Order",SalesHeaderNo,FALSE,TRUE,FALSE);
      FindWhseActivityHeader(WhseActivityHeader,WhseActivityHeader.Type::"Invt. Pick",LocationCode);
      LibraryWarehouse.AutoFillQtyInventoryActivity(WhseActivityHeader);
      LibraryWarehouse.PostInventoryActivity(WhseActivityHeader,TRUE);
    END;

    LOCAL PROCEDURE UpdateForecastOnManufacturingSetup@116(CurrentProductionForecast@1001 : Code[10]);
    VAR
      ManufacturingSetup@1000 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Current Production Forecast",CurrentProductionForecast);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateManufacturingSetup@112(NewCombinedMPSMRPCalculation@1002 : Boolean) OldCombinedMPSMRPCalculation : Boolean;
    VAR
      ManufacturingSetup@1000 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      OldCombinedMPSMRPCalculation := ManufacturingSetup."Combined MPS/MRP Calculation";
      ManufacturingSetup.VALIDATE("Combined MPS/MRP Calculation",NewCombinedMPSMRPCalculation);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateLocation@231(RequirePick@1000 : Boolean) OriginalRequirePick : Boolean;
    BEGIN
      OriginalRequirePick := LocationSilver."Require Pick";
      LocationSilver.VALIDATE("Require Pick",RequirePick);
      LocationSilver.MODIFY(TRUE);
      EXIT(OriginalRequirePick);
    END;

    LOCAL PROCEDURE CreateAndUpdateProductionForecast@119(VAR ProductionForecastEntry@1000 : Record 99000852;Name@1003 : Code[10];Date@1001 : Date;ItemNo@1004 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionForecastEntry(ProductionForecastEntry,Name,ItemNo,'',Date,FALSE);
      ProductionForecastEntry.VALIDATE("Forecast Quantity (Base)",Quantity);
      ProductionForecastEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLotForLotItemSetup@157(VAR ChildItem@1000 : Record 27;VAR Item@1002 : Record 27);
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
    BEGIN
      CreateLotForLotItem(ChildItem);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem."No.");
      CreateLotForLotItem(Item);
      UpdateReplenishmentSystemOnItem(Item);
      UpdateProductionBOMNoOnItem(Item,ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@98(VAR ProductionBOMHeader@1002 : Record 99000771;ItemNo@1001 : Code[20]);
    BEGIN
      CreateProductionBOM(ProductionBOMHeader,ItemNo);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProductionBOM@242(VAR ProductionBOMHeader@1002 : Record 99000771;ItemNo@1001 : Code[20]);
    VAR
      ProductionBOMLine@1005 : Record 99000772;
      Item@1000 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item."No.",1);
    END;

    LOCAL PROCEDURE UpdateProductionBOMNoOnItem@118(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInventory@2(VAR ItemJournalLine@1006 : Record 83;ItemNo@1002 : Code[20];PostingDate@1001 : Date;Quantity@1003 : Decimal);
    BEGIN
      CreateItemJournalLine(ItemJournalBatch,ItemJournalLine,ItemJournalLine."Entry Type"::Purchase,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Posting Date",PostingDate);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateRequisitionWorksheetName@53(VAR RequisitionWkshName@1001 : Record 245);
    VAR
      ReqWkshTemplate@1000 : Record 244;
    BEGIN
      SelectRequisitionTemplate(ReqWkshTemplate,ReqWkshTemplate.Type::Planning);
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
    END;

    LOCAL PROCEDURE CreateRequisitionWorksheetWithGivenName@184(VAR RequisitionWkshName@1001 : Record 245;NewName@1002 : Code[10]);
    VAR
      ReqWkshTemplate@1000 : Record 244;
    BEGIN
      SelectRequisitionTemplate(ReqWkshTemplate,ReqWkshTemplate.Type::Planning);
      RequisitionWkshName.INIT;
      RequisitionWkshName.VALIDATE("Worksheet Template Name",ReqWkshTemplate.Name);
      RequisitionWkshName.VALIDATE(Name,NewName);
      RequisitionWkshName.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CalcRegenPlanForPlanWkshPage@99(VAR PlanningWorksheet@1000 : TestPage 99000852;Name@1001 : Code[10];ItemNo@1002 : Code[20];ItemNo2@1003 : Code[20]);
    BEGIN
      // Regenerative Planning using Page required where Forecast is used.
      LibraryVariableStorage.Enqueue(ItemNo);  // Required for CalculatePlanPlanWkshRequestPageHandler.
      LibraryVariableStorage.Enqueue(ItemNo2);  // Required for CalculatePlanPlanWkshRequestPageHandler.
      COMMIT;  // Required for Test.
      OpenPlanningWorksheetPage(PlanningWorksheet,Name);
      PlanningWorksheet.CalculateRegenerativePlan.INVOKE;  // Open report on Handler CalculatePlanPlanWkshRequestPageHandler.
      PlanningWorksheet.OK.INVOKE;
    END;

    LOCAL PROCEDURE CalcRegenPlanForPlanningWkshPage@271(VAR PlanningWorksheet@1000 : TestPage 99000852;Name@1001 : Code[10]);
    BEGIN
      COMMIT;  // Required for Test.
      OpenPlanningWorksheetPage(PlanningWorksheet,Name);
      PlanningWorksheet.CalculateRegenerativePlan.INVOKE;  // Open report on Handler CalculatePlanPlanWkshRequestPageHandler.
      PlanningWorksheet.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateSalesOrder@8(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1007 : Record 37;ItemNo@1003 : Code[20];Quantity@1005 : Decimal);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity)
    END;

    LOCAL PROCEDURE CreateSalesOrderWithLocation@227(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1007 : Record 37;ItemNo@1003 : Code[20];Quantity@1005 : Decimal;LocationCode@1001 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndRefreshProductionOrder@105(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];Status@1003 : Option;Quantity@1002 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrder@200(VAR SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20]);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,LibraryRandom.RandInt(10));
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateSalesOrderForRegenPlan@197(VAR Item@1000 : Record 27;VAR Item2@1001 : Record 27;Quantity@1004 : Decimal);
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Reordering Policy can be anyone except blank. Replenishment System can be anyone.
      CreateItem(Item,Item."Reordering Policy"::Order,Item."Replenishment System"::"Prod. Order");
      CreateItem(Item2,Item2."Reordering Policy"::Order,Item2."Replenishment System"::"Prod. Order");
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity);
    END;

    LOCAL PROCEDURE UpdateShipmentDateOnSalesLine@21(VAR SalesLine@1000 : Record 37;ShipmentDate@1001 : Date);
    BEGIN
      SalesLine.VALIDATE("Shipment Date",ShipmentDate);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectRequisitionTemplate@63(VAR ReqWkshTemplate@1000 : Record 244;Type@1001 : Option);
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,Type);
      ReqWkshTemplate.SETRANGE(Recurring,FALSE);
      ReqWkshTemplate.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectProductionOrder@52(VAR ProductionOrder@1000 : Record 5405;SourceNo@1001 : Code[20];Status@1002 : Option);
    BEGIN
      ProductionOrder.SETRANGE("Source No.",SourceNo);
      ProductionOrder.SETRANGE(Status,Status);
      ProductionOrder.FINDFIRST;
    END;

    LOCAL PROCEDURE FilterOnRequisitionLine@132(VAR RequisitionLine@1000 : Record 246;No@1001 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
    END;

    LOCAL PROCEDURE SelectRequisitionLine@64(VAR RequisitionLine@1000 : Record 246;ItemNo@1001 : Code[20]);
    BEGIN
      FilterOnRequisitionLine(RequisitionLine,ItemNo);
      RequisitionLine.FINDSET;
    END;

    LOCAL PROCEDURE UpdateQuantityOnSalesLine@25(VAR SalesLine@1000 : Record 37;Quantity@1001 : Decimal);
    BEGIN
      SalesLine.VALIDATE(Quantity,Quantity);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostConsumptionJournal@142(ProductionOrderNo@1000 : Code[20]);
    BEGIN
      LibraryInventory.ClearItemJournal(ConsumptionItemJournalTemplate,ConsumptionItemJournalBatch);
      LibraryManufacturing.CalculateConsumption(
        ProductionOrderNo,ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
      LibraryInventory.PostItemJournalLine(ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CalcRegenPlanForPlanWkshWithLocation@136(ItemNo@1001 : Code[20];ItemNo2@1002 : Code[20];LocationCode@1004 : Code[10];LocationCode2@1005 : Code[10]);
    VAR
      Item@1000 : Record 27;
    BEGIN
      Item.SETFILTER("No.",ItemFilter,ItemNo,ItemNo2);  // Filter Required for two Items.
      Item.SETFILTER("Location Filter",'%1|%2',LocationCode,LocationCode2);  // Filter Required for two Locations.
      CalculateRegenPlanForPlanningWorksheet(Item);
    END;

    LOCAL PROCEDURE SelectPlanningComponent@139(VAR PlanningComponent@1002 : Record 99000829;WorksheetTemplateName@1000 : Code[10];WorksheetBatchName@1001 : Code[10]);
    BEGIN
      PlanningComponent.SETRANGE("Worksheet Template Name",WorksheetTemplateName);
      PlanningComponent.SETRANGE("Worksheet Batch Name",WorksheetBatchName);
      PlanningComponent.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateItemJournalLine@150(VAR ItemJournalBatch@1001 : Record 233;VAR ItemJournalLine@1005 : Record 83;EntryType@1002 : Option;ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateItemJournalLineWithNewBatch@226(VAR ItemJournalBatch@1002 : Record 233;VAR ItemJournalLine@1005 : Record 83;ItemNo@1003 : Code[20];Quantity@1004 : Decimal;EntryType@1001 : Option;LocationCode@1000 : Code[10]);
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalBatch."Template Type"::Item);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
      CreateItemJournalLine(ItemJournalBatch,ItemJournalLine,EntryType,ItemNo,Quantity);
      UpadteLocationAndVariantOnItemJournalLine(ItemJournalLine,LocationCode,'');
    END;

    LOCAL PROCEDURE UpdateReplenishmentSystemOnItem@135(VAR Item@1000 : Record 27);
    BEGIN
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcNetChangePlanForPlanWkshForMultipleItems@151(ItemNo@1001 : Code[20];ItemNo2@1002 : Code[20]);
    VAR
      Item@1000 : Record 27;
      EndDate@1003 : Date;
    BEGIN
      Item.SETFILTER("No.",ItemFilter,ItemNo,ItemNo2);  // Filter Required for two Items.
      EndDate := GetRequiredDate(10,30,WORKDATE,1);  // End Date relative to Workdate.
      LibraryPlanning.CalcNetChangePlanForPlanWksh(Item,WORKDATE,EndDate,FALSE);
    END;

    LOCAL PROCEDURE CreateAndUpdateUnitOfMeasureOnItem@10(VAR Item@1003 : Record 27);
    VAR
      ItemUnitOfMeasure@1000 : Record 5404;
    BEGIN
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",1);
      UpdateBaseUnitOfMeasureOnItem(Item,ItemUnitOfMeasure.Code);
    END;

    LOCAL PROCEDURE SelectProductionBOMLine@7(VAR ProductionBOMLine@1000 : Record 99000772;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      ProductionBOMLine.SETRANGE("Production BOM No.",ProductionBOMNo);
      ProductionBOMLine.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateQuantityAndRefreshProductionOrder@156(VAR ProductionOrder@1000 : Record 5405;ItemNo@1002 : Code[20];Quantity@1001 : Decimal);
    BEGIN
      SelectProductionOrder(ProductionOrder,ItemNo,ProductionOrder.Status::"Firm Planned");
      ProductionOrder.VALIDATE(Quantity,Quantity);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE UpdateQuantityToShipOnSalesLine@213(VAR SalesLine@1001 : Record 37;QtytoShip@1000 : Decimal);
    BEGIN
      SalesLine.VALIDATE("Qty. to Ship",QtytoShip);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectPurchaseLine@22(VAR PurchaseLine@1000 : Record 39;No@1003 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.SETRANGE("No.",No);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE OpenPlanningWorksheetPage@126(VAR PlanningWorksheet@1000 : TestPage 99000852;Name@1001 : Code[10]);
    BEGIN
      PlanningWorksheet.OPENEDIT;
      PlanningWorksheet.CurrentWkshBatchName.SETVALUE(Name);
    END;

    LOCAL PROCEDURE UpdateBaseUnitOfMeasureOnItem@30(VAR Item@1001 : Record 27;BaseUnitOfMeasure@1000 : Code[10]);
    BEGIN
      Item.GET(Item."No.");
      Item.VALIDATE("Base Unit of Measure",BaseUnitOfMeasure);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLotForLotItemSKUSetup@131(VAR Item@1000 : Record 27;VAR ItemVariant@1004 : Record 5401;VAR ItemVariant2@1005 : Record 5401;LocationCode@1006 : Code[10];LocationCode2@1007 : Code[10]);
    VAR
      StockkeepingUnit@1003 : Record 5700;
      StockkeepingUnit2@1002 : Record 5700;
    BEGIN
      CreateLFLItemWithVariantAndSKU(Item,ItemVariant,StockkeepingUnit,LocationCode);
      LibraryInventory.CreateItemVariant(ItemVariant2,Item."No.");
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit2,LocationCode2,Item."No.",ItemVariant2.Code);
    END;

    LOCAL PROCEDURE UpdateLocationAndVariantOnSalesLine@15(VAR SalesLine@1000 : Record 37;LocationCode@1001 : Code[10];VariantCode@1002 : Code[10]);
    BEGIN
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Variant Code",VariantCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVariantCodeOnProdOrderComponent@176(ItemNo@1001 : Code[20];VariantCode@1002 : Code[10]);
    VAR
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);
      ProdOrderComponent.FINDFIRST;
      ProdOrderComponent.VALIDATE("Variant Code",VariantCode);
      ProdOrderComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVariantCodeOnPlanningComponent@137(VAR PlanningComponent@1000 : Record 99000829;VariantCode@1001 : Code[10]);
    BEGIN
      PlanningComponent.VALIDATE("Variant Code",VariantCode);
      PlanningComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndRefreshFirmPlannedProductionOrderWithLocation@134(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];LocationCode@1004 : Code[10];Quantity@1002 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithLocationAndVariant@145(VAR PurchaseHeader@1003 : Record 38;ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];VariantCode@1004 : Code[10];Quantity@1005 : Decimal);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Variant Code",VariantCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInventoryWithLocationAndVariant@146(VAR ItemJournalLine@1006 : Record 83;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;EntryType@1000 : Option;LocationCode@1004 : Code[10];VariantCode@1005 : Code[10]);
    BEGIN
      CreateItemJournalLine(ItemJournalBatch,ItemJournalLine,EntryType,ItemNo,Quantity);
      UpadteLocationAndVariantOnItemJournalLine(ItemJournalLine,LocationCode,VariantCode);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpadteLocationAndVariantOnItemJournalLine@152(VAR ItemJournalLine@1000 : Record 83;LocationCode@1001 : Code[10];VariantCode@1002 : Code[10]);
    BEGIN
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Variant Code",VariantCode);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateLocationOnPlanningComponent@158(VAR PlanningComponent@1000 : Record 99000829;RequisitionLine@1001 : Record 246;LocationCode@1002 : Code[10]);
    BEGIN
      SelectPlanningComponent(PlanningComponent,RequisitionLine."Worksheet Template Name",RequisitionLine."Journal Batch Name");
      PlanningComponent.VALIDATE("Location Code",LocationCode);
      PlanningComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectItemJournalLine@211(VAR ItemJournalLine@1000 : Record 83;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      ItemJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateAndPostOutputJournal@86(ProductionOrderNo@1001 : Code[20]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CreateOutputJournalWithExlpodeRouting(ProductionOrderNo);
      SelectItemJournalLine(ItemJournalLine,OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
      LibraryInventory.PostItemJournalLine(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateOutputJournalWithExlpodeRouting@155(ProductionOrderNo@1002 : Code[20]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(OutputItemJournalTemplate,OutputItemJournalBatch);
      LibraryManufacturing.CreateOutputJournal(ItemJournalLine,OutputItemJournalTemplate,OutputItemJournalBatch,'',ProductionOrderNo);
      LibraryInventory.OutputJnlExplRoute(ItemJournalLine);
    END;

    LOCAL PROCEDURE CreateWorkCenter@168(VAR WorkCenter@1001 : Record 99000754);
    BEGIN
      LibraryManufacturing.CreateWorkCenterWithCalendar(WorkCenter);
    END;

    LOCAL PROCEDURE CreateRoutingAndUpdateItem@166(Item@1000 : Record 27);
    VAR
      RoutingHeader@1001 : Record 99000763;
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1003 : Record 99000754;
    BEGIN
      CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.");

      // Update Routing No on Item.
      Item.VALIDATE("Routing No.",RoutingHeader."No.");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingLine@165(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;CenterNo@1002 : Code[20]);
    VAR
      OperationNo@1001 : Code[10];
    BEGIN
      // Random value used so that the Next Operation No is greater than the previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));
      LibraryManufacturing.CreateRoutingLineSetup(
        RoutingLine,RoutingHeader,CenterNo,OperationNo,LibraryRandom.RandInt(5),LibraryRandom.RandInt(5));
    END;

    LOCAL PROCEDURE CreateRoutingCommentLine@192(RoutingLine@1000 : Record 99000764);
    VAR
      RoutingCommentLine@1002 : Record 99000775;
    BEGIN
      RoutingCommentLine.INIT;
      RoutingCommentLine.VALIDATE("Routing No.",RoutingLine."Routing No.");
      RoutingCommentLine.VALIDATE("Operation No.",RoutingLine."Operation No.");
      RoutingCommentLine.VALIDATE(Comment,RoutingLine."Operation No.");
      RoutingCommentLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingToolLine@204(RoutingLine@1000 : Record 99000764);
    VAR
      RoutingTool@1002 : Record 99000802;
    BEGIN
      RoutingTool.INIT;
      RoutingTool.VALIDATE("Routing No.",RoutingLine."Routing No.");
      RoutingTool.VALIDATE("Operation No.",RoutingLine."Operation No.");
      RoutingTool.VALIDATE("No.",RoutingLine."Operation No.");
      RoutingTool.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingPersonnelLine@205(RoutingLine@1000 : Record 99000764);
    VAR
      RoutingPersonnel@1002 : Record 99000803;
    BEGIN
      RoutingPersonnel.INIT;
      RoutingPersonnel.VALIDATE("Routing No.",RoutingLine."Routing No.");
      RoutingPersonnel.VALIDATE("Operation No.",RoutingLine."Operation No.");
      RoutingPersonnel.VALIDATE("No.",RoutingLine."Operation No.");
      RoutingPersonnel.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingQualityMeasureLine@206(RoutingLine@1000 : Record 99000764);
    VAR
      QualityMeasure@1001 : Record 99000785;
      RoutingQualityMeasure@1002 : Record 99000805;
    BEGIN
      QualityMeasure.INIT;
      QualityMeasure.VALIDATE(Code,FORMAT(LibraryRandom.RandInt(1000)));
      QualityMeasure.INSERT(TRUE);
      RoutingQualityMeasure.INIT;
      RoutingQualityMeasure.VALIDATE("Routing No.",RoutingLine."Routing No.");
      RoutingQualityMeasure.VALIDATE("Operation No.",RoutingLine."Operation No.");
      RoutingQualityMeasure.VALIDATE("Qlty Measure Code",QualityMeasure.Code);
      RoutingQualityMeasure.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingWithOperationAndUpdateItem@198(Item@1005 : Record 27;Operation@1004 : 'Comment,Tool,Personnel,QualityMeasure') : Code[20];
    VAR
      RoutingHeader@1002 : Record 99000763;
      RoutingLine@1001 : Record 99000764;
      WorkCenter@1000 : Record 99000754;
    BEGIN
      CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.");
      CASE Operation OF
        Operation::Comment:
          CreateRoutingCommentLine(RoutingLine);
        Operation::Tool:
          CreateRoutingToolLine(RoutingLine);
        Operation::Personnel:
          CreateRoutingPersonnelLine(RoutingLine);
        Operation::QualityMeasure:
          CreateRoutingQualityMeasureLine(RoutingLine);
      END;
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);

      // Update Routing No on Item.
      Item.VALIDATE("Routing No.",RoutingHeader."No.");
      Item.MODIFY(TRUE);

      EXIT(WorkCenter."No.");
    END;

    LOCAL PROCEDURE CreateOneLineOnPlanningComponent@202(VAR PlanningComponent@1001 : Record 99000829;RequisitionLine@1000 : Record 246;ItemNo@1002 : Code[20];QuantityPer@1005 : Decimal);
    BEGIN
      LibraryPlanning.CreatePlanningComponent(PlanningComponent,RequisitionLine);
      PlanningComponent.VALIDATE("Item No.",ItemNo);
      PlanningComponent.VALIDATE("Quantity per",QuantityPer);
      PlanningComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DeletePlanningRoutingLineAndCarryOutActionMessage@207(Item@1000 : Record 27;WorkCenterNo@1001 : Code[20]);
    VAR
      PlanningRoutingLine@1003 : Record 99000830;
      RequisitionLine@1004 : Record 246;
    BEGIN
      CalculateRegenPlanForPlanningWorksheet(Item);
      PlanningRoutingLine.SETRANGE("No.",WorkCenterNo);
      PlanningRoutingLine.FINDFIRST;
      PlanningRoutingLine.DELETE;
      AcceptActionMessage(RequisitionLine,Item."No.");
      CarryoutActionMessageForPlanWorksheet(RequisitionLine,Item."No.");
    END;

    LOCAL PROCEDURE DeleteRequisitionLine@216(ItemNo@1001 : Code[20]) : Integer;
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      SelectRequisitionLine(RequisitionLine,ItemNo);
      RequisitionLine.DELETE(TRUE);
      EXIT(RequisitionLine."Line No.");
    END;

    LOCAL PROCEDURE FindLastOperationNo@170(RoutingNo@1000 : Code[20]) : Code[10];
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      IF RoutingLine.FINDLAST THEN
        EXIT(RoutingLine."Operation No.");
    END;

    LOCAL PROCEDURE FindWhseActivityHeader@218(VAR WhseActivityHeader@1000 : Record 5766;WhseActivityHeaderType@1001 : Option;LocationCode@1002 : Code[10]);
    BEGIN
      WhseActivityHeader.SETRANGE(Type,WhseActivityHeaderType);
      WhseActivityHeader.SETRANGE("Location Code",LocationCode);
      WhseActivityHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseEntry@219(VAR WarehouseEntry@1000 : Record 7312;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    BEGIN
      WITH WarehouseEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Entry Type","Entry Type"::"Negative Adjmt.");
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE UpdateCostingMethodToAverageOnItem@175(VAR Item@1000 : Record 27);
    BEGIN
      Item.VALIDATE("Costing Method",Item."Costing Method"::Average);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindProdOrderComponent@111(VAR ProdOrderComponent@1000 : Record 5407;Status@1001 : Option;ProdOrderNo@1002 : Code[20];ItemNo@1003 : Code[20]);
    BEGIN
      ProdOrderComponent.SETRANGE(Status,Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);
      ProdOrderComponent.FINDFIRST;
    END;

    LOCAL PROCEDURE CarryoutActionMessageForPlanWorksheet@28(VAR RequisitionLine@1000 : Record 246;ItemNo@1001 : Code[20]);
    BEGIN
      SelectRequisitionLine(RequisitionLine,ItemNo);
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
    END;

    LOCAL PROCEDURE UpdateInventoryWithTracking@6(ItemNo@1004 : Code[20];Quantity@1002 : Decimal);
    VAR
      ItemJournalLine@1007 : Record 83;
    BEGIN
      CreateItemJournalLine(ItemJournalBatch,ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      ItemJournalLine.OpenItemTrackingLines(FALSE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE OpenTrackingOnProductionOrderComponent@121(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20]);
    VAR
      ProdOrderComponent@1002 : Record 5407;
    BEGIN
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder.Status::Released,ProductionOrder."No.",ItemNo);
      ProdOrderComponent.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingPageHandler.
    END;

    LOCAL PROCEDURE GetRequiredDate@9(Days@1000 : Integer;IncludeAdditionalPeriod@1003 : Integer;RelativeDate@1001 : Date;SignFactor@1002 : Integer) NewDate : Date;
    BEGIN
      // Calculating a New Date relative to WorkDate.
      NewDate :=
        CALCDATE('<' + FORMAT(SignFactor * LibraryRandom.RandInt(Days) + IncludeAdditionalPeriod) + 'D>',RelativeDate);
    END;

    LOCAL PROCEDURE GetRandomDateUsingWorkDate@69(Month@1000 : Integer) NewDate : Date;
    BEGIN
      // Calculating a New Date relative to work date for different supply and demands.
      NewDate := CALCDATE('<' + FORMAT(Month) + 'M>',WORKDATE);
    END;

    LOCAL PROCEDURE UpdateTrackingAndLotNosOnItem@4(VAR Item@1000 : Record 27;ItemTrackingCode@1001 : Code[10]);
    BEGIN
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode);  // Assign Tracking Code.
      Item.VALIDATE("Lot Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateTrackingAndSerialNosOnItem@185(VAR Item@1000 : Record 27;ItemTrackingCode@1001 : Code[10]);
    BEGIN
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode); // Assign Tracking Code.
      Item.VALIDATE("Serial Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUnitOfMeasuresOnItem@19(VAR Item@1000 : Record 27);
    VAR
      ItemUnitOfMeasure@1001 : Record 5404;
    BEGIN
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",1);
      Item.VALIDATE("Include Inventory",FALSE);
      Item.VALIDATE("Purch. Unit of Measure",ItemUnitOfMeasure.Code);
      Item.VALIDATE("Sales Unit of Measure",ItemUnitOfMeasure.Code);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateLocation@34(VAR Location@1004 : Record 14;BinMandatory@1000 : Boolean;RequirePutAway@1001 : Boolean;RequirePick@1002 : Boolean;RequireReceive@1003 : Boolean;RequireShipment@1005 : Boolean;PickAccordingToFEFO@1006 : Boolean);
    BEGIN
      LibraryWarehouse.CreateLocationWMS(Location,BinMandatory,RequirePutAway,RequirePick,RequireReceive,RequireShipment);
      Location.VALIDATE("Pick According to FEFO",PickAccordingToFEFO);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLotForLotItemSKUSetupWithTransfer@23(VAR Item@1000 : Record 27;VAR StockkeepingUnit@1005 : Record 5700;VAR StockkeepingUnit2@1007 : Record 5700;LocationCode@1006 : Code[10];LocationCode2@1002 : Code[10]);
    VAR
      ItemVariant@1004 : Record 5401;
    BEGIN
      CreateLFLItemWithVariantAndSKU(Item,ItemVariant,StockkeepingUnit,LocationCode);
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit2,LocationCode2,Item."No.",ItemVariant.Code);
      UpdateSKUReplenishmentSystem(StockkeepingUnit,StockkeepingUnit."Replenishment System"::Purchase);
      UpdateSKUReplenishmentSystem(StockkeepingUnit2,StockkeepingUnit2."Replenishment System"::Transfer);
      UpdateSKUTransferFromCode(StockkeepingUnit2,LocationCode,LocationCode2);
    END;

    LOCAL PROCEDURE UpdateSKUTransferFromCode@44(VAR StockkeepingUnit@1000 : Record 5700;LocationCode@1001 : Code[10];LocationCode2@1002 : Code[10]);
    BEGIN
      SelectTransferRoute(LocationCode,LocationCode2);
      StockkeepingUnit.VALIDATE("Transfer-from Code",LocationCode);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProductionForecastEntry@39(VAR ProductionForecastEntry@1001 : Record 99000852;Quantity@1000 : Decimal);
    BEGIN
      ProductionForecastEntry.VALIDATE("Forecast Quantity (Base)",Quantity);
      ProductionForecastEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateProductionForecastWithLocation@58(VAR ProductionForecastEntry@1000 : Record 99000852;Name@1003 : Code[10];Date@1001 : Date;ItemNo@1004 : Code[20];LocationCode@1005 : Code[10];Quantity@1002 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionForecastEntry(ProductionForecastEntry,Name,ItemNo,LocationCode,Date,FALSE);
      UpdateProductionForecastEntry(ProductionForecastEntry,Quantity);
    END;

    LOCAL PROCEDURE CreateProductionForecastSetupWithLocation@24(VAR ProductionForecastEntry@1005 : ARRAY [3] OF Record 99000852;ItemNo@1002 : Code[20];LocationCode@1004 : Code[10];ForecastDate@1001 : Date;MultipleLine@1000 : Boolean);
    VAR
      ProductionForecastName@1003 : Record 99000851;
    BEGIN
      // Using Random Value and Dates based on WORKDATE.
      LibraryManufacturing.CreateProductionForecastName(ProductionForecastName);
      UpdateForecastOnManufacturingSetup(ProductionForecastName.Name);
      CreateAndUpdateProductionForecastWithLocation(
        ProductionForecastEntry[1],ProductionForecastName.Name,ForecastDate,ItemNo,LocationCode,LibraryRandom.RandDec(10,2) +
        100);  // Large Random Quantity Required.
      IF MultipleLine THEN BEGIN
        CreateAndUpdateProductionForecastWithLocation(
          ProductionForecastEntry[2],ProductionForecastName.Name,GetRandomDateUsingWorkDate(1),ItemNo,LocationCode,
          LibraryRandom.RandDec(10,2) + 100);  // Large Random Quantity Required.
        CreateAndUpdateProductionForecastWithLocation(
          ProductionForecastEntry[3],ProductionForecastName.Name,GetRandomDateUsingWorkDate(2),ItemNo,LocationCode,
          LibraryRandom.RandDec(10,2) + 100);  // Large Random Quantity Required.
      END;
    END;

    LOCAL PROCEDURE CreateTransferOrderWithReceiptDate@60(VAR TransferHeader@1004 : Record 5740;ItemNo@1001 : Code[20];TransferFrom@1005 : Code[10];TransferTo@1006 : Code[10];Quantity@1002 : Decimal);
    VAR
      TransferLine@1000 : Record 5741;
      ReceiptDate@1008 : Date;
    BEGIN
      SelectTransferRoute(TransferFrom,TransferTo);
      LibraryWarehouse.CreateTransferHeader(TransferHeader,TransferFrom,TransferTo,LocationInTransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      ReceiptDate := GetRequiredDate(10,0,WORKDATE,1);
      TransferLine.VALIDATE("Receipt Date",ReceiptDate);
      TransferLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectTransferLine@62(VAR TransferLine@1000 : Record 5741;DocumentNo@1001 : Code[20]);
    BEGIN
      TransferLine.SETRANGE("Document No.",DocumentNo);
      TransferLine.FINDFIRST;
    END;

    LOCAL PROCEDURE GetRequiredPeriod@17(Days@1000 : Integer;IncludeAdditionalPeriod@1001 : Integer) : Text[30];
    BEGIN
      EXIT('<' + FORMAT(LibraryRandom.RandInt(Days) + IncludeAdditionalPeriod) + 'D>');
    END;

    LOCAL PROCEDURE UpdateSKUReplenishmentSystem@32(StockkeepingUnit@1000 : Record 5700;ReplenishmentSystem@1001 : Option);
    BEGIN
      StockkeepingUnit.VALIDATE("Replenishment System",ReplenishmentSystem);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateLotForLotSKUPlanningParameters@51(VAR StockkeepingUnit@1000 : Record 5700;ReschedulingPeriod@1001 : Text[30];LotAccumulationPeriod@1003 : Text[30];DampenerPeriod@1005 : Text[30]);
    VAR
      ReschedulingPeriod2@1002 : DateFormula;
      LotAccumulationPeriod2@1004 : DateFormula;
      DampenerPeriod2@1006 : DateFormula;
    BEGIN
      StockkeepingUnit.VALIDATE("Reordering Policy",StockkeepingUnit."Reordering Policy"::"Lot-for-Lot");
      EVALUATE(LotAccumulationPeriod2,LotAccumulationPeriod);
      EVALUATE(ReschedulingPeriod2,ReschedulingPeriod);
      EVALUATE(DampenerPeriod2,DampenerPeriod);
      StockkeepingUnit.VALIDATE("Rescheduling Period",ReschedulingPeriod2);
      StockkeepingUnit.VALIDATE("Dampener Period",DampenerPeriod2);
      StockkeepingUnit.VALIDATE("Lot Accumulation Period",LotAccumulationPeriod2);
      StockkeepingUnit.VALIDATE("Include Inventory",TRUE);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateTransferLinePlanningFlexibilityNone@101(TransferLine@1000 : Record 5741);
    BEGIN
      TransferLine.VALIDATE("Planning Flexibility",TransferLine."Planning Flexibility"::None);
      TransferLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInventoryWithLocationAndBin@36(VAR ItemJournalLine@1006 : Record 83;ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];BinCode@1000 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      CreateItemJournalLine(ItemJournalBatch,ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE SelectTransferRoute@95(TransferFrom@1001 : Code[10];TransferTo@1000 : Code[10]);
    VAR
      TransferRoute@1002 : Record 5742;
    BEGIN
      TransferRoute.SETRANGE("Transfer-from Code",TransferFrom);
      TransferRoute.SETRANGE("Transfer-to Code",TransferTo);

      // If Transfer Not Found then Create it.
      IF NOT TransferRoute.FINDFIRST THEN BEGIN
        LibraryWarehouse.CreateTransferRoute(TransferRoute,TransferFrom,TransferTo);
        TransferRoute.VALIDATE("In-Transit Code",LocationInTransit.Code);
        TransferRoute.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE AreSameMessages@20(Message@1001 : Text[1024];Message2@1000 : Text[1024]) : Boolean;
    BEGIN
      EXIT(STRPOS(Message,Message2) > 0);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithPurchasingCode@68(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];LocationCode@1007 : Code[10];Quantity@1004 : Decimal);
    VAR
      Purchasing@1005 : Record 5721;
    BEGIN
      CreatePurchasingCodeWithDropShipment(Purchasing);
      CreateSalesOrder(SalesHeader,SalesLine,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Purchasing Code",Purchasing.Code);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchasingCodeWithDropShipment@201(VAR Purchasing@1000 : Record 5721);
    BEGIN
      LibraryPurchase.CreatePurchasingCode(Purchasing);
      Purchasing.VALIDATE("Drop Shipment",TRUE);
      Purchasing.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetSalesOrderOnRequisitionWkshtAndCarryOutActionMsg@275(VAR SalesLine@1002 : Record 37;VAR RequisitionLine@1003 : Record 246);
    VAR
      RequisitionWkshName@1000 : Record 245;
      RetrieveDimensionsFrom@1004 : 'Item,Sales Line';
    BEGIN
      CreateRequisitionWorksheetName(RequisitionWkshName);
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);
      LibraryPlanning.GetSalesOrders(SalesLine,RequisitionLine,RetrieveDimensionsFrom::"Sales Line");
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
    END;

    LOCAL PROCEDURE UpdateQuantityOnPurchaseLine@178(ItemNo@1001 : Code[20]);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      SelectPurchaseLine(PurchaseLine,ItemNo);
      PurchaseLine.VALIDATE(Quantity,LibraryRandom.RandDec(10,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinOnPurchaseLine@43(VAR PurchaseLine@1000 : Record 39;LocationCode@1001 : Code[10];BinCode@1002 : Code[20]);
    BEGIN
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Bin Code",BinCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcPlanAndCarryOutActionMessage@94(VAR Item@1004 : Record 27;StartingDate@1002 : Date;EndingDate@1003 : Date);
    VAR
      RequisitionWkshName@1000 : Record 245;
      RequisitionLine@1001 : Record 246;
    BEGIN
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item."No.",Item."No.",StartingDate,EndingDate);
      AcceptActionMessage(RequisitionLine,Item."No.");
      LibraryVariableStorage.Enqueue(NewWorksheetMessage);  // Required inside MessageHandler.
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
    END;

    LOCAL PROCEDURE AcceptActionMessage@42(VAR RequisitionLine@1002 : Record 246;ItemNo@1001 : Code[20]);
    BEGIN
      SelectRequisitionLine(RequisitionLine,ItemNo);
      REPEAT
        RequisitionLine.VALIDATE("Accept Action Message",TRUE);
        RequisitionLine.MODIFY(TRUE);
      UNTIL RequisitionLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@83(VAR PurchaseHeader@1003 : Record 38;VAR PurchaseLine@1000 : Record 39;ItemNo@1002 : Code[20];Quantity@1005 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CarryOutPurchaseOrderForDropShipmentOnReqWksh@295(VAR Item@1003 : Record 27;VAR SalesHeader@1002 : Record 36;VAR SalesLine@1001 : Record 37);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      CreateOrderItem(Item);
      CreateSalesOrderWithPurchasingCode(SalesHeader,SalesLine,Item."No.",LocationSilver.Code,LibraryRandom.RandDec(10,2));
      GetSalesOrderOnRequisitionWkshtAndCarryOutActionMsg(SalesLine,RequisitionLine);  // Drop Shipment On Requisition Line.
    END;

    LOCAL PROCEDURE CreateStockkeepingUnitForMaximumQtyItem@193(VAR Item@1008 : Record 27;VAR ItemVariant@1001 : Record 5401;LocationCode@1006 : Code[10]);
    VAR
      StockkeepingUnit@1003 : Record 5700;
    BEGIN
      CreateMaximumQtyItem(Item,LibraryRandom.RandDec(50,2) + 50);  // Large Quantity required for Maximum Inventory.
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,LocationCode,Item."No.",ItemVariant.Code);
    END;

    LOCAL PROCEDURE CalculatePlanForRequisitionWorksheet@67(VAR RequisitionWkshName@1007 : Record 245;ItemNo@1003 : Code[20];ItemNo2@1006 : Code[20];StartDate@1000 : Date;EndDate@1004 : Date);
    VAR
      ReqWkshTemplate@1002 : Record 244;
      Item@1005 : Record 27;
    BEGIN
      Item.SETFILTER("No.",ItemFilter,ItemNo,ItemNo2);  // Filter Required for two Items.
      SelectRequisitionTemplate(ReqWkshTemplate,ReqWkshTemplate.Type::"Req.");
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      LibraryPlanning.CalculatePlanForReqWksh(Item,ReqWkshTemplate.Name,RequisitionWkshName.Name,StartDate,EndDate);
    END;

    LOCAL PROCEDURE UpdateItemCategoryCode@85(VAR Item@1001 : Record 27);
    VAR
      ItemCategory@1000 : Record 5722;
    BEGIN
      LibraryInventory.CreateItemCategory(ItemCategory);
      Item.VALIDATE("Item Category Code",ItemCategory.Code);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLFLItemWithVariantAndSKU@87(VAR Item@1000 : Record 27;VAR ItemVariant@1001 : Record 5401;VAR StockkeepingUnit@1002 : Record 5700;LocationCode@1003 : Code[10]);
    BEGIN
      CreateLotForLotItem(Item);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,LocationCode,Item."No.",ItemVariant.Code);
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetup@78(VAR OldStockoutWarning@1000 : Boolean;VAR OldCreditWarnings@1002 : Option;NewStockoutWarning@1004 : Boolean;NewCreditWarnings@1005 : Option);
    VAR
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      OldStockoutWarning := SalesReceivablesSetup."Stockout Warning";
      OldCreditWarnings := SalesReceivablesSetup."Credit Warnings";
      SalesReceivablesSetup.VALIDATE("Stockout Warning",NewStockoutWarning);
      SalesReceivablesSetup.VALIDATE("Credit Warnings",NewCreditWarnings);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderFromBlanketOrder@84(ItemNo@1002 : Code[20];QuantityToShip@1003 : Decimal);
    VAR
      SalesOrderHeader@1005 : Record 36;
      SalesHeader@1000 : Record 36;
      SalesLine@1004 : Record 37;
      BlanketSalesOrderToOrder@1001 : Codeunit 87;
    BEGIN
      // Create Blanket Order and create Sales Order from Blanket Order.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Blanket Order",'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2) + 10);  // Large random Quantity required.
      UpdateQuantityToShipOnSalesLine(SalesLine,QuantityToShip);  // Quantity to Ship less than Sales Line Quantity.
      BlanketSalesOrderToOrder.RUN(SalesHeader);
      BlanketSalesOrderToOrder.GetSalesOrderHeader(SalesOrderHeader);
    END;

    LOCAL PROCEDURE CalculateRegenPlanForPlanningWorksheet@80(VAR Item@1001 : Record 27);
    VAR
      EndDate@1000 : Date;
    BEGIN
      EndDate := GetRequiredDate(10,30,WORKDATE,1);  // End Date relative to Workdate.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,EndDate);
    END;

    LOCAL PROCEDURE AssignTrackingAndPostPurchaseWithUpdatedQuantity@96(VAR PurchaseLine@1001 : Record 39;ItemNo@1000 : Code[20]);
    VAR
      PurchaseHeader@1002 : Record 38;
    BEGIN
      UpdateQuantityOnPurchaseLine(ItemNo);
      SelectPurchaseLine(PurchaseLine,ItemNo);
      PurchaseLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingPageHandler.
      PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE AssignTrackingAndPostPurchase@46(VAR PurchaseLine@1000 : Record 39;ItemNo@1001 : Code[20]);
    VAR
      PurchaseHeader@1002 : Record 38;
    BEGIN
      SelectPurchaseLine(PurchaseLine,ItemNo);
      PurchaseLine.OpenItemTrackingLines; // Assign Tracking on Page Handler ItemTrackingPageHandler.
      PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CalcRegenPlanAndCarryOutActionMessage@104(VAR Item@1004 : Record 27);
    VAR
      RequisitionLine@1001 : Record 246;
    BEGIN
      CalculateRegenPlanForPlanningWorksheet(Item);
      AcceptActionMessage(RequisitionLine,Item."No.");
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
    END;

    LOCAL PROCEDURE UpdateSKUSafetyStockQuantity@82(VAR StockkeepingUnit@1000 : Record 5700;SafetyStockQuantity@1001 : Decimal);
    BEGIN
      StockkeepingUnit.VALIDATE("Safety Stock Quantity",SafetyStockQuantity);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemSafetyStockQuantityAndLeadTimeCalculation@77(VAR Item@1000 : Record 27;LeadTimeCalculation@1001 : Text[30]);
    VAR
      LeadTimeCalculation2@1002 : DateFormula;
    BEGIN
      EVALUATE(LeadTimeCalculation2,LeadTimeCalculation);
      Item.VALIDATE("Safety Stock Quantity",LibraryRandom.RandDec(10,2));
      Item.VALIDATE("Lead Time Calculation",LeadTimeCalculation2);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesLinePlannedDeliveryDate@93(VAR SalesLine@1001 : Record 37;PlannedDeliveryDate@1000 : Date);
    BEGIN
      SalesLine.VALIDATE("Planned Delivery Date",PlannedDeliveryDate);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectProdOrderLine@124(VAR ProdOrderLine@1000 : Record 5406;ProdOrderNo@1001 : Code[20];Status@1002 : Option);
    BEGIN
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateProdOrderComponent@114(ProductionOrder@1001 : Record 5405;VAR ProdOrderComponent@1005 : Record 5407;ItemNo@1002 : Code[20]);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      SelectProdOrderLine(ProdOrderLine,ProductionOrder."No.",ProductionOrder.Status);
      LibraryManufacturing.CreateProductionOrderComponent(
        ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.",ProdOrderLine."Line No.");
      ProdOrderComponent.VALIDATE("Item No.",ItemNo);
      ProdOrderComponent.VALIDATE("Quantity per",LibraryRandom.RandDec(5,2));
      ProdOrderComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseWithLocation@117(ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];Quantity@1003 : Decimal);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      CreatePurchaseOrderWithLocationAndVariant(PurchaseHeader,ItemNo,LocationCode,'',Quantity);
      PostPurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateSKUSetupWithTransfer@177(ItemNo@1000 : Code[20];LocationCode@1003 : Code[10];LocationCode2@1004 : Code[10]);
    VAR
      StockkeepingUnit@1001 : Record 5700;
      StockkeepingUnit2@1002 : Record 5700;
    BEGIN
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,LocationCode,ItemNo,'');
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit2,LocationCode2,ItemNo,'');
      UpdateSKUTransferFromCode(StockkeepingUnit2,LocationCode,LocationCode2);
      UpdateSKUReplenishmentSystem(StockkeepingUnit2,StockkeepingUnit2."Replenishment System"::Transfer);
    END;

    LOCAL PROCEDURE OpenOrderPromisingPage@110(SalesHeaderNo@1000 : Code[20]);
    VAR
      SalesOrder@1001 : TestPage 42;
    BEGIN
      SalesOrder.OPENVIEW;
      SalesOrder.FILTER.SETFILTER("No.",SalesHeaderNo);
      SalesOrder.SalesLines.OrderPromising.INVOKE;  // Open OrderPromisingPageHandler.
    END;

    LOCAL PROCEDURE PostPurchaseDocument@183(PurchaseHeader@1000 : Record 38);
    BEGIN
      // Update Vendor Invoice No on Purchase Header.
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");  // Get Latest Instance, Important for Test.
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE SelectReferenceOrderType@153(VAR Item@1000 : Record 27;VAR RequisitionLine@1001 : Record 246) RefOrderType : Integer;
    BEGIN
      IF Item."Replenishment System" = Item."Replenishment System"::Purchase THEN
        RefOrderType := RequisitionLine."Ref. Order Type"::Purchase
      ELSE
        RefOrderType := RequisitionLine."Ref. Order Type"::"Prod. Order";
    END;

    LOCAL PROCEDURE PostCarriedOutPurchaseOrder@220(ItemNo@1000 : Code[20]);
    VAR
      PurchaseLine@1001 : Record 39;
      PurchaseHeader@1002 : Record 38;
    BEGIN
      PurchaseLine.SETRANGE("No.",ItemNo);
      PurchaseLine.FINDFIRST;
      PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchaseLine."Document No.");
      PurchaseHeader.VALIDATE(
        "Vendor Invoice No.",LibraryUtility.GenerateRandomCode(PurchaseHeader.FIELDNO("Vendor Invoice No."),DATABASE::"Purchase Header"));
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE PostTransferHeader@224(TransferLine@1001 : Record 5741;TransferHeader@1002 : Record 5740);
    VAR
      Bin@1000 : Record 7354;
    BEGIN
      Bin.SETRANGE("Location Code",TransferHeader."Transfer-to Code");
      Bin.FINDFIRST;
      TransferLine.VALIDATE("Transfer-To Bin Code",Bin.Code);
      TransferLine.MODIFY(TRUE);
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE PostInventoryPickWhenCalculateCapableToPromiseForSales@235(ReserveFromILE@1006 : Boolean);
    VAR
      Item@1001 : Record 27;
      Bin@1002 : Record 7354;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      ItemJournalLine@1000 : Record 83;
      OriginalRequirePick@1008 : Boolean;
    BEGIN
      // Setup: Create a Item. Update Item inventory with Bin.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1); // Find Bin of Index 1.
      OriginalRequirePick := UpdateLocation(TRUE);
      UpdateInventoryWithLocationAndBin(
        ItemJournalLine,Item."No.",LocationSilver.Code,Bin.Code,LibraryRandom.RandIntInRange(10,20));

      // Create Sales Order with Location. Open Order Promising Lines Page and Invoke Capable to Promise
      // and Accept to create Requisition Worksheet Line by OrderPromisingPageHandler.
      CreateSalesOrderWithLocation(
        SalesHeader,SalesLine,Item."No.",ItemJournalLine.Quantity - LibraryRandom.RandInt(5),LocationSilver.Code);
      IF ReserveFromILE THEN
        SalesLine.ShowReservation; // Partial reserved from ILE.

      // Reserved from Requisition Line.
      UpdateQuantityOnSalesLine(SalesLine,ItemJournalLine.Quantity + LibraryRandom.RandInt(5));
      OpenOrderPromisingPage(SalesLine."Document No.");
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // Exercise: Create Inventory pick from Sales Order.
      LibraryVariableStorage.Enqueue(InventoryPickCreatedMsg); // Required inside MessageHandler.
      CreateAndPostInventoryPickFromSalesOrder(SalesHeader."No.",LocationSilver.Code);

      // Verify: Verify Inventory Pick posted successfully.
      // Verify Reservation Entry is empty when reserved from ILE.
      VerifyWarehouseEntry(Item."No.",LocationSilver.Code,Bin.Code,-ItemJournalLine.Quantity);
      IF ReserveFromILE THEN
        VerifyReservationEntryIsEmpty(Item."No.",DATABASE::"Item Ledger Entry");

      // Tear down.
      UpdateLocation(OriginalRequirePick);
    END;

    LOCAL PROCEDURE FindAndPostTransferHeaderByItemNo@182(VAR TransferHeader@1000 : Record 5740;ItemNo@1001 : Code[20]);
    VAR
      TransferLine@1002 : Record 5741;
    BEGIN
      TransferLine.SETRANGE("Item No.",ItemNo);
      TransferLine.FINDFIRST;
      TransferHeader.SETRANGE("No.",TransferLine."Document No.");
      TransferHeader.FINDFIRST;
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateProdOrderLotForLotItem@326(VAR Item@1000 : Record 27);
    BEGIN
      CreateLotForLotItem(Item);
      UpdateReplenishmentSystemOnItem(Item); // "Replenishment System"::"Prod. Order"
      WITH Item DO BEGIN
        VALIDATE("Order Tracking Policy","Order Tracking Policy"::"Tracking Only");
        VALIDATE("Manufacturing Policy","Manufacturing Policy"::"Make-to-Order");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateSafetyStockBOMItemWithDemand@256(ChildItemNo@1005 : Code[20];SafetyStockQuantity@1000 : Decimal;DemandQuantity@1001 : Decimal;ShipmentDate@1006 : Date;VAR Item@1002 : Record 27);
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      CreateProdOrderLotForLotProductionBOMItem(Item,ChildItemNo);
      UpdateItemIncludeInventoryAndSafetyStockQuantity(Item,TRUE,SafetyStockQuantity);
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",DemandQuantity);
      UpdateShipmentDateOnSalesLine(SalesLine,ShipmentDate);
    END;

    LOCAL PROCEDURE CreateZeroSafetyStockItemWithInventory@265(VAR Item@1000 : Record 27);
    BEGIN
      CreateProdOrderLotForLotItem(Item);
      UpdateItemIncludeInventoryAndSafetyStockQuantity(Item,TRUE,0);
      CreateAndPostPurchaseWithLocation(Item."No.",'',LibraryRandom.RandInt(50)); // blank location
    END;

    LOCAL PROCEDURE CreateProdOrderLotForLotProductionBOMItem@340(VAR Item@1000 : Record 27;ChildItemNo@1001 : Code[20]);
    VAR
      ParentProductionBOMHeader@1002 : Record 99000771;
    BEGIN
      CreateProdOrderLotForLotItem(Item);
      CreateAndCertifyProductionBOM(ParentProductionBOMHeader,ChildItemNo);
      UpdateProductionBOMNoOnItem(Item,ParentProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE UpdateItemIncludeInventoryAndSafetyStockQuantity@333(VAR Item@1000 : Record 27;IncludeInventory@1001 : Boolean;SafetyStockQuantity@1002 : Decimal);
    BEGIN
      WITH Item DO BEGIN
        VALIDATE("Include Inventory",IncludeInventory);
        VALIDATE("Safety Stock Quantity",SafetyStockQuantity);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CalcRegenPlanForPlanWkshWithItemFilterAndPeriod@238(ItemFilter@1000 : Text;FromDate@1002 : Date;ToDate@1003 : Date);
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.SETFILTER("No.",ItemFilter);
      LibraryPlanning.CalcRegenPlanForPlanWkshPlanningParams(Item,FromDate,ToDate,TRUE);
    END;

    LOCAL PROCEDURE GetParentRequisitionLineByNoAndQtyBase@374(ItemNo@1002 : Code[20];Qty@1001 : Decimal;VAR RequisitionLine@1000 : Record 246);
    BEGIN
      WITH RequisitionLine DO BEGIN
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",ItemNo);
        SETRANGE(Quantity,Qty);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FilterChildRequisitionLineByNoAndQty@375(ParentItemNo@1003 : Code[20];ChildItemNo@1002 : Code[20];Qty@1004 : Decimal;VAR ChildRequisitionLine@1001 : Record 246);
    VAR
      ParentRequisitionLine@1000 : Record 246;
    BEGIN
      GetParentRequisitionLineByNoAndQtyBase(ParentItemNo,Qty,ParentRequisitionLine);
      WITH ChildRequisitionLine DO BEGIN
        SETRANGE("Worksheet Template Name",ParentRequisitionLine."Worksheet Template Name");
        SETRANGE("Journal Batch Name",ParentRequisitionLine."Journal Batch Name");
        SETFILTER("Line No.",'<>%1',ParentRequisitionLine."Line No.");
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",ChildItemNo);
        SETRANGE("Ref. Order No.",ParentRequisitionLine."Ref. Order No.");
        SETRANGE(Quantity,ParentRequisitionLine.Quantity);
      END;
    END;

    LOCAL PROCEDURE CreateItemWithDampenerQuantity@239(VAR Item@1000 : Record 27;DampenerQuantity@1001 : Decimal) : Code[20];
    BEGIN
      CreateProdOrderLotForLotItem(Item);
      Item.VALIDATE("Dampener Quantity",DampenerQuantity);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateSalesOrderForItemPlanProdOrderAndReduceQtyOnDampener@243(Item@1000 : Record 27;ShipmentDate@1001 : Date);
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      ProdOrderStatus@1005 : 'Quote,Planned,Firm Planned,Released';
      OrderType@1004 : 'ItemOrder,ProjectOrder';
    BEGIN
      CreateSalesOrderForItemQuantityMoreThenDampener(SalesHeader,SalesLine,Item,ShipmentDate);
      LibraryManufacturing.CreateProductionOrderFromSalesOrder(SalesHeader,ProdOrderStatus::Released,OrderType::ItemOrder);
      SalesLine.VALIDATE(Quantity,SalesLine.Quantity - Item."Dampener Quantity");
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderForItemQuantityMoreThenDampener@251(VAR SalesHeader@1002 : Record 36;VAR SalesLine@1001 : Record 37;Item@1000 : Record 27;ShipmentDate@1003 : Date);
    VAR
      Quantity@1004 : Decimal;
    BEGIN
      Quantity := LibraryRandom.RandInt(20);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",Quantity + Item."Dampener Quantity");
      SalesLine.VALIDATE("Shipment Date",ShipmentDate);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FilterSurplusReservationEntryByItemNo@261(VAR ReservationEntry@1000 : Record 337;ItemNo@1001 : Code[20]);
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE("Reservation Status",ReservationEntry."Reservation Status"::Surplus);
    END;

    LOCAL PROCEDURE DisableManufacturingPlanningWarning@237();
    VAR
      ManufacturingSetup@1000 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Planning Warning",FALSE);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProdOrderLotForLotReserveAlwaysItem@284(VAR Item@1000 : Record 27);
    BEGIN
      CreateProdOrderLotForLotItem(Item);
      Item.VALIDATE(Reserve,Item.Reserve::Always);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderForItemRandomQuantity@245(Item@1000 : Record 27) : Date;
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandInt(2000));
      EXIT(SalesLine."Shipment Date");
    END;

    LOCAL PROCEDURE FindPlanningComponentByItemNoAndCALCResQtys@252(VAR PlanningComponent@1000 : Record 99000829;ItemNo@1001 : Code[20]);
    BEGIN
      PlanningComponent.SETRANGE("Item No.",ItemNo);
      PlanningComponent.FINDFIRST;
      PlanningComponent.CALCFIELDS("Reserved Qty. (Base)","Reserved Quantity");
    END;

    LOCAL PROCEDURE FindReservationReservationEntryByItemNoForPlanningComponent@246(VAR ReservationEntry@1000 : Record 337;ItemNo@1001 : Code[20]);
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE("Reservation Status",ReservationEntry."Reservation Status"::Reservation);
      ReservationEntry.SETRANGE("Source Type",DATABASE::"Planning Component");
      ReservationEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyPlanningComponentsAreEmpty@315(ReqWkshtTemplateName@1000 : Code[10];ReqWkshtName@1002 : Code[10];ReqWkshtLineNo@1003 : Integer);
    VAR
      PlanningComponent@1001 : Record 99000829;
    BEGIN
      PlanningComponent.INIT;
      PlanningComponent.SETRANGE("Worksheet Template Name",ReqWkshtTemplateName);
      PlanningComponent.SETRANGE("Worksheet Batch Name",ReqWkshtName);
      PlanningComponent.SETRANGE("Worksheet Line No.",ReqWkshtLineNo);
      Assert.RecordIsEmpty(PlanningComponent);
    END;

    LOCAL PROCEDURE VerifyRequisitionLineWithDueDateForItem@199(VAR RequisitionLine@1000 : Record 246;ItemNo@1001 : Code[20];RefOrderType@1002 : Option;DueDate@1003 : Date);
    BEGIN
      RequisitionLine.SETRANGE("Due Date",DueDate);
      RequisitionLine.FINDFIRST;
      RequisitionLine.TESTFIELD("No.",ItemNo);
      RequisitionLine.TESTFIELD("Ref. Order Type",RefOrderType);
    END;

    LOCAL PROCEDURE VerifyRequisitionLineQuantityAndActionMessage@187(VAR RequisitionLine@1004 : Record 246;Quantity@1002 : Decimal;OriginalQuantity@1001 : Decimal;ActionMessage@1005 : Option);
    BEGIN
      RequisitionLine.TESTFIELD(Quantity,Quantity);
      RequisitionLine.TESTFIELD("Original Quantity",OriginalQuantity);
      RequisitionLine.TESTFIELD("Action Message",ActionMessage);
    END;

    LOCAL PROCEDURE VerifyRequisitionLineWithItem@109(Item@1009 : Record 27;ActionMessage@1001 : Option;Quantity@1004 : Decimal;OriginalQuantity@1000 : Decimal;LocationCode@1003 : Code[10];VariantCode@1002 : Code[10]);
    VAR
      RequisitionLine@1005 : Record 246;
      RefOrderType@1006 : Option;
    BEGIN
      RefOrderType := SelectReferenceOrderType(Item,RequisitionLine);
      SelectRequisitionLine(RequisitionLine,Item."No.");
      RequisitionLine.TESTFIELD("Variant Code",VariantCode);
      RequisitionLine.TESTFIELD("Unit of Measure Code",Item."Base Unit of Measure");
      RequisitionLine.TESTFIELD("Ref. Order Type",RefOrderType);
      RequisitionLine.TESTFIELD("Location Code",LocationCode);
      VerifyRequisitionLineQuantityAndActionMessage(RequisitionLine,Quantity,OriginalQuantity,ActionMessage);
    END;

    LOCAL PROCEDURE VerifyRequisitionLineWithDueDate@16(VAR Item@1002 : Record 27;ActionMessage@1003 : Option;Quantity@1001 : Decimal;OriginalQuantity@1007 : Decimal;DueDate@1006 : Date);
    VAR
      RequisitionLine@1000 : Record 246;
      RefOrderType@1004 : Option;
    BEGIN
      RefOrderType := SelectReferenceOrderType(Item,RequisitionLine);
      VerifyRequisitionLineWithDueDateForItem(RequisitionLine,Item."No.",RefOrderType,DueDate);
      VerifyRequisitionLineQuantityAndActionMessage(RequisitionLine,Quantity,OriginalQuantity,ActionMessage);
    END;

    LOCAL PROCEDURE VerifyRequisitionLineWithDueDateForTransfer@72(ActionMessage@1003 : Option;Quantity@1001 : Decimal;OriginalQuantity@1007 : Decimal;DueDate@1006 : Date;LocationCode@1008 : Code[10]);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("Due Date",DueDate);
      RequisitionLine.FINDFIRST;
      RequisitionLine.TESTFIELD("Ref. Order Type",RequisitionLine."Ref. Order Type"::Transfer);
      RequisitionLine.TESTFIELD("Location Code",LocationCode);
      VerifyRequisitionLineQuantityAndActionMessage(RequisitionLine,Quantity,OriginalQuantity,ActionMessage);
    END;

    LOCAL PROCEDURE VerifyRequisitionLineForUnitOfMeasure@29(VAR Item@1002 : Record 27;UnitOfMeasureCode@1005 : Code[10];ActionMessage@1003 : Option;Quantity@1001 : Decimal;OriginalQuantity@1007 : Decimal;DueDate@1006 : Date);
    VAR
      RequisitionLine@1000 : Record 246;
      RefOrderType@1004 : Option;
    BEGIN
      RefOrderType := SelectReferenceOrderType(Item,RequisitionLine);
      VerifyRequisitionLineWithDueDateForItem(RequisitionLine,Item."No.",RefOrderType,DueDate);
      VerifyRequisitionLineQuantityAndActionMessage(RequisitionLine,Quantity,OriginalQuantity,ActionMessage);
      RequisitionLine.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
    END;

    LOCAL PROCEDURE VerifyRequisitionLineForLocationAndVariant@75(VAR Item@1007 : Record 27;ActionMessage@1003 : Option;Quantity@1001 : Decimal;OriginalQuantity@1004 : Decimal;DueDate@1006 : Date;LocationCode@1008 : Code[10];VariantCode@1002 : Code[10]);
    VAR
      RequisitionLine@1000 : Record 246;
      RefOrderType@1005 : Option;
    BEGIN
      RefOrderType := SelectReferenceOrderType(Item,RequisitionLine);
      VerifyRequisitionLineWithDueDateForItem(RequisitionLine,Item."No.",RefOrderType,DueDate);
      VerifyRequisitionLineQuantityAndActionMessage(RequisitionLine,Quantity,OriginalQuantity,ActionMessage);
      RequisitionLine.TESTFIELD("Location Code",LocationCode);
      RequisitionLine.TESTFIELD("Variant Code",VariantCode);
    END;

    LOCAL PROCEDURE VerifyRequisitionLineWithVariant@106(ActionMessage@1003 : Option;Quantity@1007 : Decimal;OriginalQuantity@1001 : Decimal;LocationCode@1006 : Code[10];VariantCode@1002 : Code[10]);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("Variant Code",VariantCode);
      RequisitionLine.FINDFIRST;
      RequisitionLine.TESTFIELD("Location Code",LocationCode);
      VerifyRequisitionLineQuantityAndActionMessage(RequisitionLine,Quantity,OriginalQuantity,ActionMessage);
    END;

    LOCAL PROCEDURE VerifyMPSOrderOnRequisitionLine@214(ItemNo@1001 : Code[20];IsMPSOrder@1002 : Boolean);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("No.",ItemNo);
      RequisitionLine.FINDFIRST;
      RequisitionLine.TESTFIELD("MPS Order",IsMPSOrder);
    END;

    LOCAL PROCEDURE VerifyRequisitionLineWithAddedItem@212(RequisitionLine@1003 : Record 246;ItemNo@1001 : Code[20];Qty@1004 : Decimal);
    BEGIN
      RequisitionLine.SETRANGE("No.",ItemNo);
      RequisitionLine.FINDFIRST;
      RequisitionLine.TESTFIELD(Quantity,Qty);
    END;

    LOCAL PROCEDURE VerifyBinContent@164(SalesLine@1004 : Record 37;BinCode@1001 : Code[20]);
    VAR
      BinContent@1000 : Record 7302;
    BEGIN
      BinContent.SETRANGE("Item No.",SalesLine."No.");
      BinContent.SETRANGE("Location Code",SalesLine."Location Code");
      BinContent.FINDFIRST;
      BinContent.TESTFIELD("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE VerifyTransferLine@122(ItemNo@1003 : Code[20];TransferFromCode@1002 : Code[10];Quantity@1001 : Decimal);
    VAR
      TransferLine@1000 : Record 5741;
    BEGIN
      TransferLine.SETRANGE(Status,TransferLine.Status::Open);
      TransferLine.SETRANGE("Item No.",ItemNo);
      TransferLine.FINDFIRST;
      TransferLine.TESTFIELD("Transfer-from Code",TransferFromCode);
      TransferLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyTransferShipment@189(ItemNo@1000 : Code[20];TransferFromCode@1001 : Code[10];TransferToCode@1002 : Code[10]);
    VAR
      TransferShipmentLine@1003 : Record 5745;
    BEGIN
      TransferShipmentLine.SETRANGE("Item No.",ItemNo);
      TransferShipmentLine.FINDFIRST;
      TransferShipmentLine.TESTFIELD("Transfer-from Code",TransferFromCode);
      TransferShipmentLine.TESTFIELD("Transfer-to Code",TransferToCode);
    END;

    LOCAL PROCEDURE VerifyProductionOrderWithRefresh@210(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20]);
    BEGIN
      ProductionOrder.SETRANGE(Status,ProductionOrder.Status::"Firm Planned");
      ProductionOrder.SETRANGE("Source No.",ItemNo);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE); // Calculate Lines, Routings & Component Need are TRUE
    END;

    LOCAL PROCEDURE VerifyItemInventory@228(VAR Item@1000 : Record 27;InventoryQty@1001 : Decimal);
    BEGIN
      Item.CALCFIELDS(Inventory);
      Item.TESTFIELD(Inventory,InventoryQty);
    END;

    LOCAL PROCEDURE VerifyShipAndStatusFieldOnSalesHeader@296(ActualShip@1001 : Boolean;ActualStatus@1005 : Option;ExpectedShip@1003 : Boolean;ExpectedStatus@1004 : Option);
    BEGIN
      Assert.AreEqual(ExpectedShip,ActualShip,ShipFieldErr);
      Assert.AreEqual(ExpectedStatus,ActualStatus,SalesOrderStatusErr);
    END;

    LOCAL PROCEDURE VerifyReceiveAndStatusFieldOnPurchaseHeader@282(ActualReceive@1000 : Boolean;ActualStatus@1006 : Option;ExpectedReceive@1002 : Boolean;ExpectedStatus@1007 : Option);
    BEGIN
      Assert.AreEqual(ExpectedReceive,ActualReceive,ReceiveFieldErr);
      Assert.AreEqual(ExpectedStatus,ActualStatus,PurchaseOrderStatusErr);
    END;

    LOCAL PROCEDURE VerifyWarehouseEntry@230(ItemNo@1003 : Code[20];LocationCode@1004 : Code[10];BinCode@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      WarehouseEntry@1000 : Record 7312;
    BEGIN
      FindWarehouseEntry(WarehouseEntry,ItemNo,LocationCode);
      Assert.AreEqual(BinCode,WarehouseEntry."Bin Code",BinCodeInWarehouseEntryErr);
      Assert.AreEqual(Quantity,WarehouseEntry.Quantity,QuantityInWarehouseEntryErr);
    END;

    LOCAL PROCEDURE VerifyReservationEntryIsEmpty@234(ItemNo@1000 : Code[20];SourceType@1001 : Integer);
    VAR
      ReservationEntry@1002 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Source Type",SourceType);
        Assert.IsTrue(ISEMPTY,ReservationEntryErr);
      END;
    END;

    [RequestPageHandler]
    PROCEDURE CalculatePlanPlanWkshRequestPageHandler@55(VAR CalculatePlanPlanWksh@1000 : TestRequestPage 99001017);
    VAR
      ItemNo@1001 : Variant;
      ItemNo2@1002 : Variant;
    BEGIN
      // Calculate Regenerative Plan using page. Required where Forecast is used.
      LibraryVariableStorage.Dequeue(ItemNo);
      LibraryVariableStorage.Dequeue(ItemNo2);
      CalculatePlanPlanWksh.Item.SETFILTER("No.",STRSUBSTNO(ItemFilter,ItemNo,ItemNo2));
      CalculatePlanPlanWksh.MPS.SETVALUE(TRUE);
      CalculatePlanPlanWksh.StartingDate.SETVALUE(WORKDATE);
      CalculatePlanPlanWksh.EndingDate.SETVALUE(GetRandomDateUsingWorkDate(90));
      CalculatePlanPlanWksh.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@41(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLines."Assign Lot No.".INVOKE;  // Assign Lot No.
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandlerForAssignSN@162(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLines."Assign Serial No.".INVOKE; // Assign Serial No.
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToCreatePageHandler@163(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE AssignItemTrackingAndVerifyTrackingQuantityPageHandler@123(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      AssignTracking@1003 : Variant;
      TrackingQuantity@1001 : Variant;
      AssignTracking2@1006 : Boolean;
    BEGIN
      LibraryVariableStorage.Dequeue(AssignTracking);
      AssignTracking2 := AssignTracking;  // Required for variant to boolean.
      IF AssignTracking2 THEN BEGIN
        ItemTrackingLines."Assign Lot No.".INVOKE;  // Assign Lot No.
        LibraryVariableStorage.Enqueue(AvailabilityWarningConfirmationMessage);  // Required inside ConfirmHandler.
      END ELSE BEGIN
        // Verify Quantity(Base) on Tracking Line.
        ItemTrackingLines.FIRST;
        LibraryVariableStorage.Dequeue(TrackingQuantity);
        ItemTrackingLines."Quantity (Base)".ASSERTEQUALS(TrackingQuantity);
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PlanningErrorLogPageHandler@13(VAR PlanningErrorLog@1000 : TestPage 5430);
    BEGIN
      PlanningErrorLog.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PlanningErrorLogPageHandler2@264(VAR PlanningErrorLog@1000 : TestPage 5430);
    BEGIN
      PlanningErrorLog.LAST;
      REPEAT
        PlanningErrorLog."Item No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      UNTIL NOT PlanningErrorLog.PREVIOUS;
      Assert.AreEqual(0,LibraryVariableStorage.Length,NumberOfErrorsErr);
      PlanningErrorLog.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE OrderPromisingPageHandler@113(VAR OrderPromisingLines@1000 : TestPage 99000959);
    BEGIN
      OrderPromisingLines.CapableToPromise.INVOKE;  // Capable To Promise will generate a new Requisition Line for the demand.
      OrderPromisingLines.AcceptButton.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@11(Message@1000 : Text[1024]);
    VAR
      QueuedMsg@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(QueuedMsg);
      Assert.IsTrue(AreSameMessages(Message,QueuedMsg),Message);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler2@258(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@88(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);
      Assert.IsTrue(AreSameMessages(ConfirmMessage,ExpectedMessage),ConfirmMessage);
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerOnDeleteSalesHeader@181(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationHandler@229(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Auto Reserve".INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [Planning Worksheet] [SCM]
      Test for Planning using Planning Worksheet:
       1. Create Lot for Lot  Item. Create Production Forecast with multiple Entries. Create and Post Item Journal Line. Create Sales Order. Update Quantity To Ship on Sales Line.
          Calculate regenerative Plan with MPS - TRUE and MRP - FALSE for Planning Worksheet and verify Planning Worksheet.
       2. Create Lot for Lot Parent and Child Item. Create And Certify Production BOM. Create Sales Order for Child Item. Calculate regenerative Plan for Parent Item with MPS - TRUE and MRP - FALSE for Planning Worksheet and verify Planning Wksh.
       3. Create Lot for Lot Item with Stockkeeping Units. Create Sales Order. Update Location and Variant Code on Sales Line. Create multiple Purchase Orders with different Location and Variant.
          Calculate Plan for Planning Worksheet multiple Location Filters. Verify Planning Worksheet for Location, Variant, Action Message and Quantitites.
       4. Create Lot for Lot Item with Stockkeeping Units. Create Sales Order. Update Location and Variant Code on Sales Line. Calculate Plan for Planning Worksheet with Location Filter.
          Verify Planning Worksheet for Location, Variant, Action Message and Quantitites.
       5. Create Lot for Lot Item with Stockkeeping Units. Create And Certify Production BOM. Create and Refresh Firm Planned Production Order. Update Variant Code on Production Order Component.
          Calculate Plan for Production Order Component for Planning Worksheet with Location Filter. Verify Planning Worksheet for Location, Variant, Action Message and Quantity.
       6. Create Lot for Lot Item with Stockkeeping Units. Create Sales Order. Update Location Code on Sales Line. Variant Code is not updated. Create Purchase Order. Update Location Code on Purchase Line. Variant Code is not updated.
          Calculate Plan for Planning Worksheet with Location Filter. Verify Planning Worksheet for Location, Variant, Action Message and Quantity.
       7. Create Lot for Lot Item with Stockkeeping Units. Create Sales Order. Update Location Code on Sales Line. Variant Code is not updated. Calculate Plan for Planning Worksheet with Location Filter. Update Variant Code On Planning Component.
          Calculate Plan again for Parent and Child Item for Planning Worksheet with Location Yellow.
       8. Create Lot for Lot Item with Stockkeeping Units. Update Inventory with Negative Adjustment. Calculate Plan for Planning Worksheet with Location Filter. Verify Planning Worksheet for Location, Variant, Action Message and Quantity.
       9. Create Lot for Lot Parent and Child Item. Create And Certify Production BOM. Create Sales Order for Parent Item. Calculate Net Change Plan for Parent Item and Child Item.
          Verify Planning Worksheet for Action Message and Quantity. Verify Action Message, Quantity and Reference Order Type on Planning Worksheet.
      10. Create Lot for Lot Parent and Child Item. Create And Certify Production BOM. Create Sales Order with Parent Item. Calculate Plan for Planning Worksheet with Parent and Child Item.
          Update Quantity on Sales Line. Change Base Unit Of Measure on Child Item. Calculate Net Change Plan for Parent Item and Child Item. Verify Planning Worksheet for Action Message,
          Quantity and Reference Order Type on Planning Worksheet. Verify Unit of Measure is updated on Planning Worksheet for child Item.
      11. Create Lot for Lot Parent and Child Item. Create And Certify Production BOM. Create Sales Order with Parent Item. Calculate Plan for Planning Worksheet with Parent and Child Item.
          Update Location Code on Planning Component. Calculate Net Change Plan for Parent Item and Child Item. Verify Location is updated for Child Item on Requisition Line. Verify Action Message, Quantity and Reference Order Type on Planning Wksh.
      12. Create Lot for Lot Item. Calculate Net Change Plan for Planning Worksheet. Verify that no Requisition line is created for Requisition Worksheet.
      13. Create Lot for Lot Parent and Child Item. Create And Certify Production BOM. Create and Refresh Firm Planned Production Order for Child Item. Calculate Plan for Planning Worksheet with Parent and Child Item.
          Create and Refresh Firm Planned Production Order for Parent Item. Calculate Net Change Plan for Parent Item and Child Item.Verify Item is updated on Requisition Line.
          Verify Action Message, Quantity and Reference Order Type on Planning Worksheet.
      14. Create Lot for Lot Item. Create and Refresh Firm Planned Production Order. Calculate Regenerative Plan for Planning Worksheet. Modify Quantity on Firm Planned Production Order. Calculate Net Change Plan for Planning Worksheet.
          Verify Original Quantity is modified on Planning Worksheet.
      15. Create Lot for Lot Parent and Child Item. Create And Certify Production BOM. Create and Refresh Released Production Order. Calculate Regenerative Plan for Planning Worksheet.
          Create and Post Consumption Journal. Calculate Net Change Plan for Planning Worksheet. Verify Planning Worksheet for Action Message, Quantity and Reference Order Type on Planning Worksheet.
      16. Create Lot for Lot Parent and Child Item. Create And Certify Production BOM. Create and Refresh Released Production Order. Calculate Regenerative Plan for Planning Worksheet.
          Create and Post Output Journal. Calculate Net Change Plan for Planning Worksheet. Verify Planning Worksheet for Action Message, Quantity and Reference Order Type on Planning Worksheet.
      17. Create Lot for Lot Item. Create Routing With Status New and create Released Production Order. Calculate Regenerative Plan for Planning Worksheet.
          Verify that no Requisition line is created for Requisition Worksheet, Since Routing is not Certified.
      18. Create Lot for Lot Item setup. Update Costing Method to Average on Parent and Child Item. Update Inventory for Child Item. Create and refresh Released Production for Parent Item.
          Run Adjust Cost Item Entries report. Create multiple Sales Order for Parent Item. Calculate Plan for Planning Worksheet with Parent and Child Item.
          Verify Planning Worksheet for Action Message, Quantity and Reference Order Type on Planning Worksheet.
      19. Create Lot for Lot Item setup. Update Costing Method to Average on Parent and Child Item. Update Inventory for Child Item. Create and refresh Released Production for Parent Item.
          Run Adjust Cost Item Entries report. Create multiple Sales Order for Parent Item. Calculate Plan and Carry Out for Planning Worksheet with Parent and Child Item.
          Verify Planning Worksheet for Action Message, Quantity and Reference Order Type on Planning Worksheet.
      20. Create Lot for Lot Item setup. Update Costing Method to Average on Parent and Child Item. Update Inventory for Child Item. Create and refresh Released Production for Parent Item.
          Create multiple Sales Order for Parent Item. Calculate Plan for Planning Worksheet with Parent and Child Item. Delete Sales Order and Update Quantity on second
          Sales Order. Calculate Net Change Plan for Parent Item and Child Item. Verify Planning Worksheet for Action Message, Quantity and Reference Order Type on Planning Worksheet.
      21. Create Lot for Lot Item setup. Update Lot specific Tracking and Lot Nos on Child Item. Update Inventory With Lot specific Tracking. Create and Refresh Released Production Order. Open Tracking On Production Order Component.
          Calculate Plan for Planning Worksheet. Delete the Requisition Line created on Planning Worksheet. Verify the Requisition Line is deleted successfully.
      22. Create Order Item. Create Production Forecast. Create Sales Order with multiple lines. Calculate Regenerative Plan with MPS - TRUE and MRP - FALSE for Planning Worksheet. Verify Planning Worksheet for Quantities and Reference Order Type.
      23. Create Order Item. Update Item parameters. Create Production Forecast. Create Sales Order. Calculate Regenerative Plan with MPS - TRUE and MRP - FALSE for Planning Worksheet.
          Verify Planning Worksheet for Quantities and Reference Order Type. Verify Item Sales Unit Of Measure is updated on Requisition Line.
      24. Create Lot for Lot Child Item. Create Lot for Lot Item and Stockkeeping Unit setup. Update Rescheduling Period, Dampener Period, and Lot Accumulation Period -0D on Stockkeeping Units of Parent Item. Update Item inventory.
          Create Production Forecast.Create Transfer Order. Calculate Plan for Planning Worksheet. Verify Planning Worksheet for various Entries.
      25. Create Lot for Lot Child Item. Create Lot for Lot Item and Stockkeeping Unit setup. Update Rescheduling Period, Dampener Period, and Lot Accumulation Period -0D on Stockkeeping Units of Parent Item.
          Create and Refresh Released Production Order. Create Transfer Order. Update Planning  Flexibility on Transfer Line - None. Calculate Plan for Planning Worksheet. Verify Planning Worksheet for various Entries.
      26. Create Lot for Lot Child Item. Create Lot for Lot Item and Stockkeeping Unit setup. Update Rescheduling Period, Dampener Period, and Lot Accumulation Period -0D on Stockkeeping Units of Parent Item.
          Create and Refresh Released Production Order. Create Transfer Order. Calculate Plan for Planning Worksheet. Verify Planning Worksheet for various Entries.
      27. Create Lot for Lot Child Item. Create Lot for Lot Item and Stockkeeping Unit setup. Update Rescheduling Period - 0D, Dampener Period - 0D and Lot Accumulation Period on Stockkeeping Units of Parent Item.
          Update Item inventory. Create Production Forecast with multiple Entries. Calculate Plan for Planning Worksheet. Verify Planning Worksheet for various Entries.
      28. Create Lot for Lot Child Item. Create Lot for Lot Item and Stockkeeping Unit setup. Update Rescheduling Period - 0D, Dampener Period - 0D and Lot Accumulation Period on Stockkeeping Units of Parent Item. Update Item inventory.
          Create Tansfer Order. Update Planning Flexibility - None On Transfer Line. Calculate Plan for Planning Worksheet. Verify Planning Worksheet for various Entries.
      29. Create Lot for Lot Child Item. Create Lot for Lot Item and Stockkeeping Unit setup. Update Rescheduling Period - 0D, Dampener Period - 0D and Lot Accumulation Period on Stockkeeping Units of Parent Item. Update Item inventory.
          Create Tansfer Order. Calculate Plan for Planning Worksheet. Verify Planning Worksheet for various Entries.
      30. Create Maximum Quantity Item. Create Stockkeeping Unit for both Item. Update Inventory With Location and Bin. Create Sales Order for Quantity more than Maximum Inventory.
          Update Quantity to Ship with Quantity equal to Maximum Inventory on Sales Order Line. Post Sales Order. Calculate Plan for Requisition Worksheet. Verify Entries in Requisition Worksheet.
      31. Create Order Item. Create Sales Order with Purchasing Code, Drop Shipment for Sales Line on Requisition Worksheet. Post Sales Order. Update Quantity on Purchase Order Line to which previously created Sales Order is associated.
          Verify Error, that Quantity cannot be changed because the order line is associated with Sales Order.
      32. Create Order Item. Create Sales Order with Purchasing Code, Drop Shipment for Sales Line on Requisition Worksheet. Create Purchase Order with Location and Bin. Post Purchase Order With  Updated Vendor Invoice No. on Purchase Header.
          Verify Bin Code of Purchase Order is updated on Bin Content of Sales Order.
      33. Create Order Item. Update Inventory. Create Sales Order. Calculate Plan for Requisition Worksheet and Carry out Action Message. Create new Sales Order with same Item.
          Run Create Inventory Put -away Pick Movement Report. Verify no Put or Pick movement occurs for Sales Order ,there is nothing to create.
      34. Create FRQ Item with Item Category Code. Calculate Plan for Requisition Worksheet. Verify Item Category of Item is updated on Requisition Line of Requisition Worksheet.
      35. Create Order Item, Create Sales Order from Blanket Order. Calculate Plan for Requisition Worksheet. Verify Requisition Worksheet Action Message and Quantity and Reference Order Type.
      36. Create Maximum Quantity Item. Create Stockkeeping Unit. Update Inventory With Location. Create Purchase Order With Location. Calculate Plan for Requisition Worksheet. Verify Requisition Worksheet for various entries.
      37. Create Lot for Lot Item and Stockkeeping Unit setup. Update Rescheduling Period - 0D, Dampener Period with random value and Lot Accumulation Period -0D on Stockkeeping Unit of Item.
          Create Tansfer Order.Calculate Plan for Planning Worksheet. Verify Planning Worksheet for various Entries.
      38. Create Lot for Lot Item and Stockkeeping Unit setup. Update Rescheduling Period - 0D, Dampener Period with random value and Lot Accumulation Period -0D on Stockkeeping Unit of Item.
          Calculate Plan for Planning Worksheet. Verify Planning Worksheet for various Entries.
      39. Create Lot for Lot Item setup. Update Lot specific Tracking and Lot Nos on Child Item. Update Inventory With Lot specific Tracking. pdate Inventory With Lot specific Tracking.
          Calculate Plan for Planning Worksheet and Carry Out Action Message.Verify the Released Production Order having tracking on its component is deleted successfully.
      40. Create Lot for Lot Item with Safety Stock Quantity. Create Stockkeeping Unit for Item. Calculate Plan for Planning Worksheet. Update Safety Stock Quantity on Stockkeeping Unit. Calculate Plan for Planning Worksheet.
          Verify Safety Stock Quantity of Stockkeeping Unit of Item is updated on Requisition Line for Item.
      41. Create Lot for Lot Item. Update Lot specific Tracking and Lot Nos on Item. Create Sales Order. Assign Lot specific Tracking to Sales Line. Calculate Plan for Planning Worksheet.
          Verify Tracking is also assigned to requisition Line for Item.
      42. Create Lot for Lot Item. Update Lot specific Tracking and Lot Nos on Item. Create Sales Order. Calculate Plan for Planning Worksheet and Carry out Action Message.
          Update Quantity on Purchase Line created after Carry Out. Assign Lot Specific Tracking on Purchase Line. Post Purchase Order with Receive. Calculate Plan for Planning Worksheet.
      43. Create Lot for Lot Item setup. Update Lot specific Tracking and Lot Nos on Child Item. Create Tansfer Order. Open Tracking On Tansfer Line. Calculate Plan for Requisition Worksheet.
          Create Sales Order with Location. Select previously created Transfer Order. Verify the Transfer Order having tracking attached to it, is deleted.
      44. Create Lot for Lot Item. Create Sales Order. Update Planned Delivery date on Sales Line. Open Order Promising Lines Page and Invoke Capable to Promise.Verify Requisition Line with Action Message,
          Quantity and Due Date after Calculating Capable To Promise.
      45. Create Lot for Lot Parent and Child Item. Create and Certify Production BOM. Update Safety Stock Quantity and Lead Time Calculation on Child item. Create and refresh Firm Planned Production Order. Create Production Order Components.
          Calculate Plan for Requisition Worksheet. Verify Planning Worksheet with Action Message, Reference Order Type and Quantity.
      46. Create Lot for Lot Parent and Child Item. Create and Certify Production BOM. Update Safety Stock Quantity and Lead Time Calculation on Child item. Create and refresh Firm Planned Production Order. Create Production Order Components.
          Calculate Plan for Requisition Worksheet. Create Purchase Order for Child Item. Calculate Plan for Requisition Worksheet. Verify Planning Worksheet with Action Message, Reference Order Type and Quantity.
      47. Create Lot for Lot Item. Create Sales Order With Location. Create Purchase Order with different Location than Sales Order. Calculate Plan for Planning Worksheet.
          Verify Planning Worksheet for Location,Quantity, and Action Message when demand and supply have mismatch of Location.
      48. Create Lot for Lot Item. Create Transfer Order. Calculate Plan for Planning Worksheet. Verify Planning Worksheet for Location,Quantity, and Action Message.
      49. Create Lot For Lot Item. Create Purchase Order with Location.Post Purchase Order. Create and Post Transfer Order. Calculate Plan for Planning Worksheet. Verify that no Requisition line is created for Requisition Worksheet.
          Verify that no Requisition line is created for Requisition Worksheet.
      50. Create Lot for Lot Item and Stockkeeping Unit setup. Create Sales Order with Location. Calculate Plan for Planning Worksheet and Carry out Action Message.
          Verify Transfer Order is created after Carry Out with locations that are not Warehouse Locations.
      51. Create Lot for Lot Item and Stockkeeping Unit on Warehouse Locations. Create Sales Order with  Warehouse Location. Calculate Plan for Planning Worksheet and Carry out Action Message.
          Verify Transfer Order is created after Carry Out with Warehouse Locations.
      52. Create Lot for Lot Item and Stockkeeping Unit setup. Create Sales Order with Location. Calculate Plan for Planning Worksheet and Carry out Action Message.Receive purchase and shipment transfer order created.
          Delete sales order and receive the transfer order.
          Verify receive transfer order can be posted successfully.
      53. Create Serial for Serial Item and Stockkeeping Unit setup. Create Sales Order with Location. Calculate Plan for Planning Worksheet and Carry out Action Message.Receive purchase and shipment transfer order created.
          Delete sales order and receive the transfer order.
          Verify receive transfer order can be posted successfully.
      54. Create routing line with comment. Create and release sales order. Calculate Plan for Planning Worksheet and Carry out Action Message.
          Verify production order can be refreshed successfully.
      55. Create routing line with tool. Create and release sales order. Calculate Plan for Planning Worksheet and Carry out Action Message.
          Verify production order can be refreshed successfully.
      56. Create routing line with personnel. Create and release sales order. Calculate Plan for Planning Worksheet and Carry out Action Message.
          Verify production order can be refreshed successfully.
      57. Create routing line with quality measure. Create and release sales order. Calculate Plan for Planning Worksheet and Carry out Action Message.
          Verify production order can be refreshed successfully.
      58. Verify the line added in Planning Component can be added in Planning Worksheet after calculate Net Change Plan successfully.
      59. Create Order Item. Create Sales Order with Location. Calculate Plan for Req. Worksheet and Carry out Action Message. Post Carried Purchase Order. Post Positive Adjust for Item.
          Create two Negetive Adjustment in Item Journal with different Batches with same Qty with Positive Adjust. Post one of them.
          Verify no warrning when it is within Item Availability and check the Inventory after posted.
      60. Create Order Item. Create Sales Order with Location. Calculate Plan for Req. Worksheet and Carry out Action Message. Post Carried Purchase Order. Post Positive Adjust for Item.
          Create two Negetive Adjustment in Item Journal with different Batches with same Qty with Positive Adjust. Post one of them.
          Verify warrning pops up when the it is within Item Availability and check the Inventory after posted.
      61. Create Order Item. Create Sales Order with Drop Shipment. Carry out Purchase Order by Requisition Worksheet.Receive Purchase Order.
          Verify that the values of Ship Field is TRUE and Statues is Released on Sales Header.
      62. Create Order Item. Create Sales Order with Drop Shipment. Carry out Purchase Order by Requisition Worksheet.Ship Sales Order.
          Verify that the values of Receive Field is TRUE and Status is Released on Purchase Header.
      63. Verify that MPS Order is TRUE for MPS Item after Calculating Regenerative Plan from Sales Order with combined MPS/MRP.
      64. Verify that MPS Order is TRUE for MPS Item after Calculating Regenerative Plan from Production Forecast with combined MPS/MRP.
      65. Verify no extra empty line generated before the generated line with Item when re-calc Regenerative Plan in Planning Worksheet.
      66. Verify Inventory Pick can be posted successfully when the Quantity on Pick exists in Inventory,
          the quantity that is out of stock on Sales Order reserved from Requisition Line by Order Promising.
      67. Verify Inventory Pick can be posted successfully when the Quantity on Pick exists in Inventory and is partially reserved from ILE,
          the quantity that is out of stock on Sales Order reserved from Requisition Line by Order Promising.

        Covers Test cases:
       -----------------------------------------------------------------------------------------------------------------
        Test Function                                                                                             TFS ID
       ------------------------------------------------------------------------------------------------------------------
        CalcPlanWithMPSPartialSalesShipUsingForecastOnSameDateLFLItem                                             120990
        CalcPlanWithMPSSalesShipUsingForecastForParentLFLItemOnly                                                 121553

        Covers Test cases:
       -----------------------------------------------------------------------------------------------------------------
        Test Function                                                                                             TFS ID
       ------------------------------------------------------------------------------------------------------------------
        CalcPlanForSalesAndMultiPurchaseWithLocationAndVariant                                                    127964
        CalcPlanForSalesWithLocationAndVariant                                                                    127964
        CalcPlanForNewVariantOnProductionOrderComponent                                                           127964
        CalcPlanForSalesAndPurchaseWithoutVariantForDifferentLocations                                            127964
        CalcPlanForSalesWithLocationAndNewVariantOnPlanningComponent                                              127964
        CalcPlanWithNegativeInventoryWithLocationAndVariant                                                       127964

         Covers Test cases:
       -------------------------------------------------------------------------------------------------------------------
        Test Function                                                                                             TFS ID
       -------------------------------------------------------------------------------------------------------------------
        CalcNetChangePlanWithSalesForLFLItems                                                                      127965
        CalcNetChangePlanWithSalesAndNewUOMForLFLChildItem                                                         127965
        CalcNetChangePlanWithSalesForNewLocationOnPlanningComponent                                                127965
        CalcNetChangePlanWithoutAnyDemandLFLItem                                                                   127965
        CalcNetChangePlanForFirmPlannedProdOrderForLFLParentItem                                                   127965
        CalcNetChangePlanWithNewQuantityOnFirmPlannedProdOrder                                                     127965

        Covers Test cases:
       --------------------------------------------------------------------------------------------------------------------
        Test Function                                                                                               TFS ID
       --------------------------------------------------------------------------------------------------------------------
        CalcNetChangePlanWithConsumptionJournalForLFLItem                                                           127965
        CalcNetChangePlanWithOutputJournalForLFLItem                                                                127965
        CalcRegenPlanWithRoutingStatusNewLFLItem                                                                    127965
        CalcRegenPlanWithMultipleSalesAndProdOrderWithAdjustCostItemEntriesLFLItem                                  127963
        CalcRegenPlanAndCarryOutWithSalesAndProdOrderWithAdjustCostItemEntriesLFLItem                               127963
        CalcNetChangePlanWithMutipleSalesAndProdOrderLFLItem                                                        127963

        Covers Test cases:
       -------------------------------------------------------------------------------------------------------------------
        Test Function                                                                                              TFS ID
       -------------------------------------------------------------------------------------------------------------------
        DeleteRequisitionLineForItemHavingComponentWithLotTracking                                                 143076
        CalcPlanWithMPSWithMultiSalesLineOrderItemUsingForecast                                                    120983
        CalcPlanWithMPSWithSalesLineOrderItemWithNewSalesUOMUsingForecast                                          120984

        Covers Test cases:
       -----------------------------------------------------------------------------------------------------------
        Test Function                                                                                 TFS ID
       -----------------------------------------------------------------------------------------------------------
        CalcPlanWithTransferOrderAndForecastWithReschedulingPeriodLFLItem                             186559
        CalcPlanWithTransferAndProdOrderWithReschedulingPeriodPlanningFlexibilityNoneLFLItem          186562
        CalcPlanWithTransferAndProdOrderWithReschedulingPeriodLFLItem                                 186562
        CalcPlanWithTransferAndForecastWithLotAccumulationPeriodLFLItem                               186566
        CalcPlanWithTransferOrderWithLotAccumulationPeriodPlanningFlexibiltyNoneLFLItem               186566
        CalcPlanWithTransferOrderWithLotAccumulationPeriodLFLItem                                     186568

        Covers Test cases:
       -----------------------------------------------------------------------------------------------------------------
        Test Function                                                                                             TFS ID
       ------------------------------------------------------------------------------------------------------------------
        CalcPlanWithReqWkshWithSalesQuantityGreaterThanMaxInventoryOnLocationMQItem                               127559
        QtyErrorOnPurchaseLineAfterCalcPlanForSalesOrderWithDropShipment                                          127565
        PurchaseBinOnBinContentForSalesAfterCalcPlanOfSalesWithDropShipment                                       127568
        NothingToCreateMsgWhenInvtPutPickMovementAfterCalcPlanReqWkshWithCarryOutOrderItem                        127583

        Covers Test cases:
       -----------------------------------------------------------------------------------------------------------------
        Test Function                                                                                             TFS ID
       ------------------------------------------------------------------------------------------------------------------
        CalcPlanForItemCategoryCodeOnRequisitionLineForFRQItem                                                    127599
        CalPlanForReqWkshForSalesCreatedFromBlanketOrder                                                          127600
        CalcPlanWithReqWkshWithSKUAndPurchaseForMQItem                                                            127605

        Covers Test cases:
       -----------------------------------------------------------------------------------------------------------------
        Test Function                                                                                             TFS ID
       ------------------------------------------------------------------------------------------------------------------
        CalcPlanWithTransferAndDampenerPeriodForLFLItem                                                           189563
        CalcPlanWithForecastAndDampenerPeriodForLFLItem                                                           189564

        Covers Test cases:
       -----------------------------------------------------------------------------------------------------------------
        Test Function                                                                                             TFS ID
       ------------------------------------------------------------------------------------------------------------------
        CalcRegenPlanAndReleasedProdOrderDeletedAfterCarryOutLFLItem                                              142986
        CalcRegenPlanTwiceForSKUSafetyStockQuantityForLFLItem                                                     143067
        CalcRegenPlanForLotSpecificSalesAndTrackingOnRequisitionLineLFLItem                                       143073
        CalcRegenPlanTwiceForNewPurchaseAfterCarryOutLotSpecificTrackingLFLItem                                   143073

        Covers Test cases:
       -----------------------------------------------------------------------------------------------------------------
        Test Function                                                                                             TFS ID
       ------------------------------------------------------------------------------------------------------------------
        CalcRegenPlanTwiceTrackedTransferOrderDeletedAfterCarryOutLFLItem                                         127613
        PlanningLineWhenCalculateCapableToPromiseForSales                                                         127680
        CalcPlanReqWkshWithNewProdOrderComponentForFirmPlannedProdOrderLFLItem                                    143102
        CalcPlanReqWkshTwiceWithNewProdOrderComponentForProdAndPurchaseLFLItem                                    143102

        Covers Test cases:
        --------------------------------------------------------------------------------------------------------------------
        Test Function                                                                                              TFS ID
        --------------------------------------------------------------------------------------------------------------------
        CalcRegenPlanForSupplyDemandMismatchLocationLFLItem                                                         127982
        CalcRegenPlanForTransferOrderItem                                                                           127982
        CalcRegenPlanForPostedPurchaseAndTransferLFLItem                                                            127982
        CalcRegenPlanForSalesWithLocationCarryOutForTransferOrderLFLItem                                            127982
        CalcRegenPlanForSalesWithWarehouseLocationCarryOutForTransferOrderLFLItem                                   127982

        Covers Test cases for Bug ID:6691
        --------------------------------------------------------------------------------------------------------------------
        Test Function                                                                                              TFS ID
        --------------------------------------------------------------------------------------------------------------------
        ItemLotNosOnShippedTransferOrderAfterSalesOrderDeleted                                                      336142

        Covers Test cases for Bug ID:6691
        --------------------------------------------------------------------------------------------------------------------
        Test Function                                                                                              TFS ID
        --------------------------------------------------------------------------------------------------------------------
        ItemSerialNosOnShippedTransferOrderAfterSalesOrderDeleted                                                   336142

        Covers Test cases for Bug ID:N/A
        --------------------------------------------------------------------------------------------------------------------
        Test Function                                                                                              TFS ID
        --------------------------------------------------------------------------------------------------------------------
        RefreshProdOrderAfterDeleteRoutingLineWithComment                                                           47809
        RefreshProdOrderAfterDeleteRoutingLineWithTool                                                              47809
        RefreshProdOrderAfterDeleteRoutingLineWithPersonnel                                                         47809
        RefreshProdOrderAfterDeleteRoutingLineWithQualityMeasure                                                    47809

        Covers Test cases:
        --------------------------------------------------------------------------------------------------------------------
        Test Function                                                                                              TFS ID
        --------------------------------------------------------------------------------------------------------------------
        CalcNetChangePlanAfterInsertOneLineInPlanningComponent                                                      50195

        Covers Test cases:
        --------------------------------------------------------------------------------------------------------------------
        Test Function                                                                                              TFS ID
        --------------------------------------------------------------------------------------------------------------------
        PostItemJournalWithinItemAvailabilityWhenReservationEntryExist                                              52072
        PostItemJournalOutOfItemAvailabilityWhenReservationEntryExist                                               52072

        Covers Test cases:
        --------------------------------------------------------------------------------------------------------------------
        Test Function                                                                                              TFS ID
        --------------------------------------------------------------------------------------------------------------------
        ReceivePurchaseOrderForDropShipment                                                                         343242
        ShipSalesOrderForDropShipment                                                                               343242

        Covers Test cases:
        --------------------------------------------------------------------------------------------------------------------
        Test Function                                                                                              TFS ID
        --------------------------------------------------------------------------------------------------------------------
        CalcRegenPlanFromSalesOrderWithCombinedMPSAndMRP                                                             66711
        CalcRegenPlanFromProdForecastWithCombinedMPSAndMRP                                                           66711

        Covers Test cases:
        --------------------------------------------------------------------------------------------------------------------
        Test Function                                                                                              TFS ID
        --------------------------------------------------------------------------------------------------------------------
        ReCalcRegenPlanAfterDeleteOneRequisitionLineAtFirstCalculation                                             91763
        Covers Test cases:
        --------------------------------------------------------------------------------------------------------------------
        Test Function                                                                                              TFS ID
        --------------------------------------------------------------------------------------------------------------------
        PostInventoryPickWhenCalculateCapableToPromiseForSalesNotReservedFromILE                                   91920
        PostInventoryPickWhenCalculateCapableToPromiseForSalesReservedFromILE                                      91920
    }
    END.
  }
}

