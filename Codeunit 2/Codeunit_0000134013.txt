OBJECT Codeunit 134013 ERM BAT Test for Application
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd;
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1001 : Codeunit 131300;
      LibrarySales@1002 : Codeunit 130509;
      LibraryRandom@1003 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      DocumentType@1004 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';

    [Test]
    PROCEDURE ApplyInvCustLedEntry@1();
    BEGIN
      ApplyCustLedEntry(DocumentType::Payment,DocumentType::Invoice,LibraryRandom.RandDec(100,2));
    END;

    [Test]
    PROCEDURE ApplyCMCustLedEntry@16();
    BEGIN
      ApplyCustLedEntry(DocumentType::Refund,DocumentType::"Credit Memo",-LibraryRandom.RandDec(100,2));
    END;

    [Normal]
    LOCAL PROCEDURE ApplyCustLedEntry@2(ApplyingType@1000 : Option;AppliesToType@1001 : Option;ApplicationAmount@1002 : Decimal);
    VAR
      Customer@1004 : Record 18;
      GenJournalBatch@1005 : Record 232;
      GenJournalLine@1003 : Record 81;
    BEGIN
      // Application using Customer Ledger Entry and verify the same post application.

      // Setup: Setup Data for Apply Customer Ledger Entries.
      // Create and Post General Journal Line for Credit Memo and Refund.
      Initialize;
      LibrarySales.CreateCustomer(Customer);

      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);

      // Use LibraryRandom to select Random Amount.
      CreateGenJnlLine(GenJournalLine,GenJournalBatch,AppliesToType,Customer."No.",ApplicationAmount);
      CreateGenJnlLine(GenJournalLine,GenJournalBatch,ApplyingType,GenJournalLine."Account No.",-GenJournalLine.Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Apply and Post Refund to Credit Memo from Customer Ledger Entry.
      ApplyAndPostCustomerEntry(GenJournalLine."Document No.",GenJournalLine.Amount,ApplyingType);

      // Verification: Verify Customer Ledger Entry.
      VerifyCustLedEntry(ApplyingType,GenJournalLine."Document No.");
      VerifyCustLedEntry(AppliesToType,GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE ApplyInvAppliesToID@4();
    BEGIN
      ApplyAppliesToID(DocumentType::Payment,DocumentType::Invoice,LibraryRandom.RandDec(100,2));
    END;

    [Test]
    PROCEDURE ApplyCMAppliesToID@17();
    BEGIN
      ApplyAppliesToID(DocumentType::Refund,DocumentType::"Credit Memo",-LibraryRandom.RandDec(100,2));
    END;

    [Normal]
    LOCAL PROCEDURE ApplyAppliesToID@9(ApplyingType@1006 : Option;AppliesToType@1005 : Option;ApplicationAmount@1004 : Decimal);
    VAR
      Customer@1002 : Record 18;
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1000 : Record 81;
      CustLedgerEntry@1003 : Record 21;
    BEGIN
      // Application using Applies to ID and verify Customer Ledger Entry post application.

      // Setup: Setup Data for Apply Customer Ledger Entries.
      // Create and Post General Journal Line for Invoice.
      Initialize;
      LibrarySales.CreateCustomer(Customer);

      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);

      // Use LibraryRandom to select Random Amount.
      CreateGenJnlLine(GenJournalLine,GenJournalBatch,AppliesToType,Customer."No.",ApplicationAmount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Create General Journal Line for Payment.
      CreateGenJnlLine(GenJournalLine,GenJournalBatch,ApplyingType,GenJournalLine."Account No.",0);

      // Exercise: Application of Payment Entry to Invoice using Applies to ID.
      // Post General Journal Line.
      ApplyCustLedEntryAppliesToID(GenJournalLine,CustLedgerEntry);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verification: Verify Customer Ledger Entry.
      VerifyCustLedEntry(ApplyingType,GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE ApplyInvAppliesToDoc@6();
    BEGIN
      ApplyAppliesToDoc(DocumentType::Payment,DocumentType::Invoice,LibraryRandom.RandDec(100,2));
    END;

    [Test]
    PROCEDURE ApplyCMAppliesToDoc@11();
    BEGIN
      ApplyAppliesToID(DocumentType::Refund,DocumentType::"Credit Memo",-LibraryRandom.RandDec(100,2));
    END;

    [Normal]
    LOCAL PROCEDURE ApplyAppliesToDoc@7(ApplyingType@1006 : Option;AppliesToType@1005 : Option;ApplicationAmount@1004 : Decimal);
    VAR
      Customer@1002 : Record 18;
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1000 : Record 81;
      CustLedgerEntry@1003 : Record 21;
    BEGIN
      // Application using Applies to Document No. and verify Customer Ledger Entry post application.

      // Setup: Setup Data for Apply Customer Ledger Entries.
      // Create and Post General Journal Line for Invoice.
      Initialize;
      LibrarySales.CreateCustomer(Customer);

      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);

      // Use LibraryRandom to select Random Amount.
      CreateGenJnlLine(GenJournalLine,GenJournalBatch,AppliesToType,Customer."No.",ApplicationAmount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Create General Journal Line for Payment.
      CreateGenJnlLine(GenJournalLine,GenJournalBatch,ApplyingType,GenJournalLine."Account No.",-GenJournalLine.Amount);

      // Exercise: Execute Application of Payment Entry to Invoice using Applies to Document No.
      // Post General Journal Line.
      ApplyCustLedEntryAppliesToDoc(GenJournalLine,CustLedgerEntry,AppliesToType);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verification: Verify Customer Ledger Entry.
      VerifyCustLedEntry(ApplyingType,GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Setup demo data.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateGenJnlLine@5(VAR GenJournalLine@1002 : Record 81;GenJournalBatch@1000 : Record 232;DocumentType@1001 : Option;CustomerNo@1004 : Code[20];Amount@1006 : Decimal);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Customer,CustomerNo,Amount);
    END;

    [Normal]
    LOCAL PROCEDURE ApplyAndPostCustomerEntry@3(DocumentNo@1002 : Code[20];AmountToApply@1003 : Decimal;DocumentType@1001 : Option);
    VAR
      CustLedgerEntry@1000 : Record 21;
      CustLedgerEntry2@1004 : Record 21;
    BEGIN
      // Apply Customer Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);
      LibraryERM.SetApplyCustomerEntry(CustLedgerEntry,AmountToApply);
      CustLedgerEntry2.RESET;
      CustLedgerEntry2.SETRANGE("Document No.",DocumentNo);
      CustLedgerEntry2.SETRANGE("Customer No.",CustLedgerEntry."Customer No.");
      CustLedgerEntry2.FINDSET;
      REPEAT
        CustLedgerEntry2.CALCFIELDS("Remaining Amount");
        CustLedgerEntry2.VALIDATE("Amount to Apply",CustLedgerEntry2."Remaining Amount");
        CustLedgerEntry2.MODIFY(TRUE);
      UNTIL CustLedgerEntry2.NEXT = 0;

      // Set Applies-to ID.
      LibraryERM.SetAppliestoIdCustomer(CustLedgerEntry2);
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry);
    END;

    LOCAL PROCEDURE ApplyCustLedEntryAppliesToID@15(VAR GenJournalLine@1001 : Record 81;VAR CustLedgerEntry@1000 : Record 21);
    BEGIN
      // Apply Customer Entries.
      CustLedgerEntry.SETRANGE("Customer No.",GenJournalLine."Account No.");
      CustLedgerEntry.SETRANGE(Open,TRUE);
      CustLedgerEntry.FINDFIRST;
      CustLedgerEntry.VALIDATE("Applies-to ID",GenJournalLine."Document No.");
      CustLedgerEntry.CALCFIELDS("Remaining Amount");
      CustLedgerEntry.VALIDATE("Amount to Apply",CustLedgerEntry."Remaining Amount");
      CustLedgerEntry.MODIFY(TRUE);
      GenJournalLine.VALIDATE(Amount,-CustLedgerEntry."Amount to Apply");
      GenJournalLine.VALIDATE("Applies-to ID",GenJournalLine."Document No.");
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ApplyCustLedEntryAppliesToDoc@13(VAR GenJournalLine@1002 : Record 81;VAR CustLedgerEntry@1001 : Record 21;ApplietoDocType@1000 : Option);
    BEGIN
      // Apply Customer Entries.
      CustLedgerEntry.SETRANGE("Customer No.",GenJournalLine."Account No.");
      CustLedgerEntry.SETRANGE(Open,TRUE);
      CustLedgerEntry.SETRANGE("Document Type",ApplietoDocType);
      CustLedgerEntry.FINDFIRST;
      GenJournalLine.VALIDATE("Applies-to Doc. Type",ApplietoDocType);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",CustLedgerEntry."Document No.");
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyCustLedEntry@27(DocumentType@1002 : Option;DocumentNo@1001 : Code[20]);
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);

      // Verify Applied Payment Entry .
      CustLedgerEntry.TESTFIELD(Open,FALSE);
      CustLedgerEntry.CALCFIELDS("Remaining Amount");
      CustLedgerEntry.TESTFIELD("Remaining Amount",0);
    END;

    BEGIN
    {
      // [FEATURE] [Application] [Sales]
      1. Test Application of Invoice to a Payment form Customer Ledger Entry.
      2. Test Application of Invoice to a Payment using Applies-to-ID.
      3. Test Application of Invoice to a Payment using Applies-to-Doc.
      4. Test Application of Credit Memo to a Refund form Customer Ledger Entry.
      5. Test Application of Credit Memo to a Refund using Applies-to-ID.
      6. Test Application of Credit Memo to a Refund using Applies-to-Doc.
    }
    END.
  }
}

