OBJECT Codeunit 134074 ERM Record Link Management
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      LibraryUtility@1000 : Codeunit 131000;
      LibrarySales@1002 : Codeunit 130509;
      LibraryPurchase@1006 : Codeunit 130512;
      LibraryService@1007 : Codeunit 131902;
      LibraryInventory@1005 : Codeunit 132201;
      LibraryRandom@1004 : Codeunit 130440;
      RecordLinkCountErr@1003 : TextConst 'ENU=The only one record link expected';
      LibrarySetupStorage@1009 : Codeunit 131009;
      IsInitialized@1008 : Boolean;

    [Test]
    PROCEDURE PostSalesOrderWithNotification@5();
    VAR
      SalesHeader@1000 : Record 36;
      SalesInvoiceHeader@1001 : Record 112;
      SalesShipmentHeader@1002 : Record 110;
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO 375015] Posted Sales Order with notification to a user produces record links without notification flag
      Initialize;

      // [GIVEN] Sales Order with notification note ("Record Link".Notify = TRUE)
      CreateSalesOrder(SalesHeader,SalesHeader."Document Type"::Order);
      SetupNotificationOnRecordLink(SalesHeader,TRUE);

      // [WHEN] Post Sales Order
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Posted Sales Invoice has a note without notification ("Record Link".Notify = FALSE)
      FindSalesInvoiceHeader(SalesInvoiceHeader,SalesHeader);
      VerifyNotificationOnRecordLink(SalesInvoiceHeader,FALSE);
      // [THEN] Posted Sales Shipment has a note without notification ("Record Link".Notify = FALSE)
      FindSalesShipmentHeader(SalesShipmentHeader,SalesHeader);
      VerifyNotificationOnRecordLink(SalesShipmentHeader,FALSE);
    END;

    [Test]
    PROCEDURE PostPurchaseOrderWithNotification@1();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchInvHeader@1001 : Record 122;
      PurchRcptHeader@1002 : Record 120;
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO 375015] Posted Purchase Order with notification to a user produces record link without notification flag
      Initialize;

      // [GIVEN] Purchase Order with notification note ("Record Link".Notify = TRUE)
      CreatePurchaseOrder(PurchaseHeader,PurchaseHeader."Document Type"::Order);
      SetupNotificationOnRecordLink(PurchaseHeader,TRUE);

      // [WHEN] Post Purchase Order
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Posted Purchase Invoice has a note without notification ("Record Link".Notify = FALSE)
      FindPurchaseInvoiceHeader(PurchInvHeader,PurchaseHeader);
      VerifyNotificationOnRecordLink(PurchInvHeader,FALSE);
      // [THEN] Posted Purchase Receipt has a note without notification ("Record Link".Notify = FALSE)
      FindPurchaseReceiptHeader(PurchRcptHeader,PurchaseHeader);
      VerifyNotificationOnRecordLink(PurchRcptHeader,FALSE);
    END;

    [Test]
    PROCEDURE PostServiceOrderWithNotification@2();
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceInvoiceHeader@1001 : Record 5992;
      ServiceShipmentHeader@1004 : Record 5990;
    BEGIN
      // [FEATURE] [Service]
      // [SCENARIO 375015] Posted Service Order with notification to a user produces record link without notification flag
      Initialize;

      // [GIVEN] Service Order with notification note ("Record Link".Notify = TRUE)
      UpdateServiceMgtSetup(TRUE,TRUE);
      CreateServiceOrder(ServiceHeader,ServiceHeader."Document Type"::Order);
      SetupNotificationOnRecordLink(ServiceHeader,TRUE);

      // [WHEN] Post Service Order
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [THEN] Posted Service Invoice has a note without notification ("Record Link".Notify = FALSE)
      FindServiceInvoiceHeader(ServiceInvoiceHeader,ServiceHeader);
      VerifyNotificationOnRecordLink(ServiceInvoiceHeader,FALSE);

      // [THEN] Posted Service Shipment has a note without notification ("Record Link".Notify = FALSE)
      FindServiceShipmentHeader(ServiceShipmentHeader,ServiceHeader);
      VerifyNotificationOnRecordLink(ServiceShipmentHeader,FALSE);
    END;

    [Test]
    PROCEDURE ArchiveSalesOrderWithNotification@20();
    VAR
      SalesHeader@1000 : Record 36;
      SalesHeaderArchive@1001 : Record 5107;
      ArchiveManagement@1003 : Codeunit 5063;
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO 375015] Archived Sales Order with notification to a user produces record links without notification flag
      Initialize;

      // [GIVEN] Sales Order with notification note ("Record Link".Notify = TRUE)
      CreateSalesOrder(SalesHeader,SalesHeader."Document Type"::Order);
      SetupNotificationOnRecordLink(SalesHeader,TRUE);

      // [WHEN] Archive Sales Order
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      ArchiveManagement.StoreSalesDocument(SalesHeader,FALSE);

      // [THEN] Archived Sales Order has a note without notification ("Record Link".Notify = FALSE)
      FindSalesHeaderArchive(SalesHeaderArchive,SalesHeader);
      VerifyNotificationOnRecordLink(SalesHeaderArchive,FALSE);
    END;

    [Test]
    PROCEDURE ArchivePurchaseOrderWithNotification@19();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseHeaderArchive@1004 : Record 5109;
      ArchiveManagement@1003 : Codeunit 5063;
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO 375015] Archived Purchase Order with notification to a user produces record link without notification flag
      Initialize;

      // [GIVEN] Purchase Order with notification note ("Record Link".Notify = TRUE)
      CreatePurchaseOrder(PurchaseHeader,PurchaseHeader."Document Type"::Order);
      SetupNotificationOnRecordLink(PurchaseHeader,TRUE);

      // [WHEN] Archive Purchase Order
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      ArchiveManagement.StorePurchDocument(PurchaseHeader,FALSE);

      // [THEN] Archived Purchase Order has a note without notification ("Record Link".Notify = FALSE)
      FindPurchaseHeaderArchive(PurchaseHeaderArchive,PurchaseHeader);
      VerifyNotificationOnRecordLink(PurchaseHeaderArchive,FALSE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler)]
    PROCEDURE RestoreSalesDocumentFromArchiveWithNotification@18();
    VAR
      SalesHeader@1000 : Record 36;
      SalesHeaderArchive@1001 : Record 5107;
      ArchiveManagement@1002 : Codeunit 5063;
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO 375015] Restored from archive Sales Order with notification to a user produces record link without notification flag
      Initialize;

      // [GIVEN] Sales Order with notification note ("Record Link".Notify = TRUE)
      CreateSalesOrder(SalesHeader,SalesHeader."Document Type"::Order);
      SetupNotificationOnRecordLink(SalesHeader,TRUE);

      // [GIVEN] Archived Sales Order with note having notification flag
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      ArchiveManagement.StoreSalesDocument(SalesHeader,FALSE);
      FindSalesHeaderArchive(SalesHeaderArchive,SalesHeader);
      SetupNotificationOnRecordLink(SalesHeaderArchive,TRUE);
      LibrarySales.ReopenSalesDocument(SalesHeader);

      // [WHEN] Restore Sales Order
      ArchiveManagement.RestoreSalesDocument(SalesHeaderArchive);

      // [THEN] Restored Sales Order has a note without notification ("Record Link".Notify = FALSE)
      SalesHeader.FIND;
      VerifyNotificationOnRecordLink(SalesHeader,FALSE);
    END;

    LOCAL PROCEDURE Initialize@13();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;

      IsInitialized := TRUE;

      LibrarySetupStorage.Save(DATABASE::"Service Mgt. Setup");
    END;

    LOCAL PROCEDURE CreateSalesOrder@24(VAR SalesHeader@1000 : Record 36;DocumentType@1003 : Option);
    VAR
      SalesLine@1001 : Record 37;
      Item@1002 : Record 27;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,LibrarySales.CreateCustomerNo);
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",1);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandInt(10));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@6(VAR PurchaseHeader@1000 : Record 38;DocumentType@1003 : Option);
    VAR
      PurchaseLine@1001 : Record 39;
      Item@1002 : Record 27;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,LibraryPurchase.CreateVendorNo);
      LibraryInventory.CreateItem(Item);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",1);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandInt(10));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceOrder@7(VAR ServiceHeader@1000 : Record 5900;DocumentType@1003 : Option);
    VAR
      ServiceLine@1001 : Record 5902;
      ServiceItem@1002 : Record 5940;
      ServiceItemLine@1004 : Record 5901;
      Item@1005 : Record 27;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,DocumentType,LibrarySales.CreateCustomerNo);
      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      LibraryInventory.CreateItem(Item);
      ServiceItem.VALIDATE("Item No.",Item."No.");
      ServiceItem.MODIFY(TRUE);

      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ServiceItem."Item No.");
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceLine.VALIDATE(Quantity,LibraryRandom.RandInt(10));
      ServiceLine.VALIDATE("Unit Price",LibraryRandom.RandInt(10));
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindSalesInvoiceHeader@9(VAR SalesInvoiceHeader@1000 : Record 112;SalesHeader@1001 : Record 36);
    BEGIN
      SalesInvoiceHeader.SETRANGE("Order No.",SalesHeader."No.");
      SalesInvoiceHeader.SETRANGE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
      SalesInvoiceHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesShipmentHeader@15(VAR SalesShipmentHeader@1000 : Record 110;SalesHeader@1001 : Record 36);
    BEGIN
      SalesShipmentHeader.SETRANGE("Order No.",SalesHeader."No.");
      SalesShipmentHeader.SETRANGE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
      SalesShipmentHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesHeaderArchive@25(VAR SalesHeaderArchive@1000 : Record 5107;SalesHeader@1001 : Record 36);
    BEGIN
      SalesHeaderArchive.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeaderArchive.SETRANGE("No.",SalesHeader."No.");
      SalesHeaderArchive.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseInvoiceHeader@12(VAR PurchInvHeader@1000 : Record 122;PurchaseHeader@1001 : Record 38);
    BEGIN
      PurchInvHeader.SETRANGE("Order No.",PurchaseHeader."No.");
      PurchInvHeader.SETRANGE("Buy-from Vendor No.",PurchaseHeader."Buy-from Vendor No.");
      PurchInvHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseReceiptHeader@16(VAR PurchRcptHeader@1000 : Record 120;PurchaseHeader@1001 : Record 38);
    BEGIN
      PurchRcptHeader.SETRANGE("Order No.",PurchaseHeader."No.");
      PurchRcptHeader.SETRANGE("Buy-from Vendor No.",PurchaseHeader."Buy-from Vendor No.");
      PurchRcptHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseHeaderArchive@26(VAR PurchaseHeaderArchive@1000 : Record 5109;PurchaseHeader@1001 : Record 38);
    BEGIN
      PurchaseHeaderArchive.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseHeaderArchive.SETRANGE("No.",PurchaseHeader."No.");
      PurchaseHeaderArchive.FINDFIRST;
    END;

    LOCAL PROCEDURE FindServiceInvoiceHeader@11(VAR ServiceInvoiceHeader@1000 : Record 5992;ServiceHeader@1001 : Record 5900);
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceInvoiceHeader.SETRANGE("Customer No.",ServiceHeader."Customer No.");
      ServiceInvoiceHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindServiceShipmentHeader@10(VAR ServiceShipmentHeader@1001 : Record 5990;ServiceHeader@1000 : Record 5900);
    BEGIN
      ServiceShipmentHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceShipmentHeader.SETRANGE("Customer No.",ServiceHeader."Customer No.");
      ServiceShipmentHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE SetupNotificationOnRecordLink@3(SourceRecord@1000 : Variant;NewNotification@1003 : Boolean);
    VAR
      RecordLink@1002 : Record 2000000068;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(SourceRecord);
      RecRef.ADDLINK(LibraryUtility.GenerateGUID,LibraryUtility.GenerateGUID);
      RecordLink.SETRANGE("Record ID",RecRef.RECORDID);
      RecordLink.FINDFIRST;
      RecordLink.Notify := NewNotification;
      RecordLink."To User ID" := USERID;
      RecordLink.MODIFY;
    END;

    LOCAL PROCEDURE UpdateServiceMgtSetup@8(CopyCommentsToInvoice@1001 : Boolean;CopyCommentsToShipment@1002 : Boolean);
    VAR
      ServiceMgtSetup@1000 : Record 5911;
    BEGIN
      ServiceMgtSetup.GET;
      ServiceMgtSetup."Copy Comments Order to Invoice" := CopyCommentsToInvoice;
      ServiceMgtSetup."Copy Comments Order to Shpt." := CopyCommentsToShipment;
      ServiceMgtSetup.MODIFY;
    END;

    LOCAL PROCEDURE VerifyNotificationOnRecordLink@4(RecVar@1003 : Variant;ExpectedNotification@1001 : Boolean);
    VAR
      RecordLink@1002 : Record 2000000068;
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.GETTABLE(RecVar);
      RecordLink.SETRANGE("To User ID",USERID);
      RecordLink.SETRANGE("Record ID",RecRef.RECORDID);
      RecordLink.FINDFIRST;

      Assert.AreEqual(1,RecordLink.COUNT,RecordLinkCountErr);
      Assert.AreEqual(ExpectedNotification,RecordLink.Notify,RecordLink.FIELDCAPTION(Notify));
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@33(Message@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@35(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Record Link]
    }
    END.
  }
}

