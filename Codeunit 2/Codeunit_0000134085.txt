OBJECT Codeunit 134085 ERM Apply Adjust For Cust/Vend
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd,
                TableData 25=rimd;
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryERM@1005 : Codeunit 131300;
      LibraryRandom@1002 : Codeunit 130440;
      LibrarySetupStorage@1004 : Codeunit 131009;
      IsInitialized@1000 : Boolean;
      AmountError@1001 : TextConst 'ENU="%1 must be %2 in \\%3 %4=%5."';

    [Test]
    PROCEDURE ACYonGLEntryforRealizedLossCust@12();
    VAR
      CustLedgerEntry@1004 : Record 21;
      GenJournalBatch@1007 : Record 232;
      GenJournalLine@1003 : Record 81;
      AddCurrencyCode@1006 : Code[10];
      CurrencyCode@1005 : Code[10];
    BEGIN
      // [FEATURE] [General Ledger] [ACY] [Application] [Sales]
      // [SCENARIO 361412] "Additional-Currency Amount" is calculated in G/L Entries of the sales application transaction that includes Realized Loss.
      Initialize;

      // [GIVEN] Currency "X" is set as Additional Currency in G/L Setup
      AddCurrencyCode := CreateCurrency;
      LibraryERM.SetAddReportingCurrency(AddCurrencyCode);
      // [GIVEN] Posted Sales Invoice in Currency "Y"
      CurrencyCode := CreateCurrency;
      ClearGeneralJournalLine(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer,
        CreateCustomer,CurrencyCode,LibraryRandom.RandDec(100,2),WORKDATE - 1);
      // [GIVEN] Posted Payment in Currency "Y" on another date with higher exchange rate
      CreateCurrencyExchRate(CurrencyCode,WORKDATE,1.1);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer,
        GenJournalLine."Account No.",CurrencyCode,-GenJournalLine.Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [WHEN] Payment is applied to Invoice
      ApplyAndPostCustomerEntry(
        GenJournalLine."Document No.",GenJournalLine.Amount,GenJournalLine."Document No.",
        CustLedgerEntry."Document Type"::Payment,CustLedgerEntry."Document Type"::Invoice);

      // [THEN] "Additional-Currency Amount" in the G/L Entries of the application transaction is calculated according to exchange rates of Currency "X"
      VerifyACYAmountOnGLEntriesOfLastTransaction(AddCurrencyCode);
    END;

    [Test]
    PROCEDURE ACYonGLEntryforRealizedGainVend@60();
    VAR
      VendLedgerEntry@1006 : Record 25;
      GenJournalBatch@1005 : Record 232;
      GenJournalLine@1004 : Record 81;
      AddCurrencyCode@1003 : Code[10];
      CurrencyCode@1002 : Code[10];
    BEGIN
      // [FEATURE] [General Ledger] [ACY] [Application] [Purchase]
      // [SCENARIO 361412] "Additional-Currency Amount" is calculated in G/L Entries of the purchase application transaction that includes Realized Gain.
      Initialize;

      // [GIVEN] Currency "X" is set as Additional Currency in G/L Setup
      AddCurrencyCode := CreateCurrency;
      LibraryERM.SetAddReportingCurrency(AddCurrencyCode);
      // [GIVEN] Posted Purchase Invoice in Currency "Y"
      CurrencyCode := CreateCurrency;
      ClearGeneralJournalLine(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Vendor,
        CreateVendor,CurrencyCode,-LibraryRandom.RandDec(100,2),WORKDATE - 1);
      // [GIVEN] Posted Payment in Currency "Y" on another date with higher exchange rate
      CreateCurrencyExchRate(CurrencyCode,WORKDATE,1.1);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Vendor,
        GenJournalLine."Account No.",CurrencyCode,-GenJournalLine.Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [WHEN] Payment is applied to Invoice
      ApplyAndPostVendorEntry(
        GenJournalLine."Document No.",GenJournalLine.Amount,GenJournalLine."Document No.",
        VendLedgerEntry."Document Type"::Payment,VendLedgerEntry."Document Type"::Invoice);

      // [THEN] "Additional-Currency Amount" in the G/L Entries of the application transaction is calculated according to exchange rates of Currency "X"
      VerifyACYAmountOnGLEntriesOfLastTransaction(AddCurrencyCode);
    END;

    [Test]
    PROCEDURE ApplyAdjustExchRateHigherCust@2();
    VAR
      DetailedCustLedgEntry@1009 : Record 379;
    BEGIN
      // Create Currency, General Journal Line for Invoice and Payment and Post, Modify Exchange Rate and Apply Posted Entry and Check
      // Realized Gain Entry on Detailed Customer Ledger Entry.
      Initialize;
      ApplyAndAdjustExchRateForCust(LibraryRandom.RandDec(100,2),DetailedCustLedgEntry."Entry Type"::"Realized Gain");
    END;

    [Test]
    PROCEDURE ApplyAdjustExchRateLowerCust@31();
    VAR
      DetailedCustLedgEntry@1008 : Record 379;
    BEGIN
      // Create Currency, General Journal Line for Invoice and Payment and Post, Modify Exchange Rate and Apply Posted Entry and Check
      // Realized Loss Entry on Detailed Customer Ledger Entry.
      Initialize;
      ApplyAndAdjustExchRateForCust(-LibraryRandom.RandDec(100,2),DetailedCustLedgEntry."Entry Type"::"Realized Loss");
    END;

    [Test]
    PROCEDURE ApplyAdjustExchRateHigherVend@22();
    VAR
      DetailedVendorLedgEntry@1007 : Record 380;
    BEGIN
      // Create Currency, General Journal Line for Invoice and Payment and Post, Modify Exchange Rate and Apply Posted Entry and Check
      // Realized Loss Entry on Detailed Vendor Ledger Entry.
      Initialize;
      ApplyAndAdjustExchRateForVend(LibraryRandom.RandDec(100,2),DetailedVendorLedgEntry."Entry Type"::"Realized Loss");
    END;

    [Test]
    PROCEDURE ApplydjustExchRateLowerVend@9();
    VAR
      DetailedVendorLedgEntry@1007 : Record 380;
    BEGIN
      // Create Currency, General Journal Line for Invoice and Payment and Post, Modify Exchange Rate and Apply Posted Entry and Check
      // Realized Gain Entry on Detailed Vendor Ledger Entry.
      Initialize;
      ApplyAndAdjustExchRateForVend(-LibraryRandom.RandDec(100,2),DetailedVendorLedgEntry."Entry Type"::"Realized Gain");
    END;

    [Test]
    PROCEDURE ApplyCustomerLedgerEntry@11();
    VAR
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1003 : Record 81;
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      // Application using Customer Ledger Entry and Verify Applied Entry from Customer Ledger Entry.

      // Setup: Create Customer and Create and Post General Journal Line.
      Initialize;
      ClearGeneralJournalLine(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer,
        CreateCustomer,'',LibraryRandom.RandDec(100,2),WORKDATE);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer,
        GenJournalLine."Account No.",'',-GenJournalLine.Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Apply and Post Invoice to Payment from Customer Ledger Entry.
      ApplyAndPostCustomerEntry(
        GenJournalLine."Document No.",GenJournalLine.Amount,GenJournalLine."Document No.",
        CustLedgerEntry."Document Type"::Payment,CustLedgerEntry."Document Type"::Invoice);

      // Verify: Verify Applied Entry from Customer Ledger Entry.
      VerifyCustomerLedgerEntry(GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE RealizedLossDetailedLedgerVend@15();
    VAR
      DetailedVendorLedgEntry@1002 : Record 380;
    BEGIN
      // Check Detailed Vendor Ledger Entry for Realized Loss Entry after Applying Credit Memo for Vendor.
      Initialize;
      RealizedDetailedLedgerEntry(-LibraryRandom.RandDec(100,2),DetailedVendorLedgEntry."Entry Type"::"Realized Loss");
    END;

    [Test]
    PROCEDURE RealizedGainDetailedLedgerVend@21();
    VAR
      DetailedVendorLedgEntry@1007 : Record 380;
    BEGIN
      // Check Detailed Vendor Ledger Entry for Realized Gain Entry after Applying Credit Memo for Vendor.
      Initialize;
      RealizedDetailedLedgerEntry(LibraryRandom.RandDec(100,2),DetailedVendorLedgEntry."Entry Type"::"Realized Gain");
    END;

    [Test]
    PROCEDURE RealizedLossDetailedLedgerCust@26();
    VAR
      DetailedCustLedgEntry@1000 : Record 379;
    BEGIN
      // Check Detailed Vendor Ledger Entry for Realized Loss Entry after Applying Credit Memo for Customer.
      Initialize;
      RealizedCustDetailedLedger(LibraryRandom.RandDec(100,2),DetailedCustLedgEntry."Entry Type"::"Realized Loss");
    END;

    [Test]
    PROCEDURE RealizedGainDetailedLedgerCust@34();
    VAR
      DetailedCustLedgEntry@1000 : Record 379;
    BEGIN
      // Check Detailed Customer Ledger Entry for Realized Gain Entry after Applying Credit Memo for Customer.
      Initialize;
      RealizedCustDetailedLedger(-LibraryRandom.RandDec(100,2),DetailedCustLedgEntry."Entry Type"::"Realized Gain");
    END;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
    END;

    LOCAL PROCEDURE RealizedCustDetailedLedger@35(ExchangeRateAmount@1006 : Decimal;EntryType@1003 : Option);
    VAR
      CustLedgerEntry@1005 : Record 21;
      GenJournalBatch@1000 : Record 232;
      GenJournalLine@1004 : Record 81;
      TempGenJournalLine@1002 : TEMPORARY Record 81;
      Amount@1001 : Decimal;
      DocumentNo@1007 : Code[20];
    BEGIN
      // Check Detailed Vendor Ledger Entry for Realized Loss Entry after Applying Credit Memo for Customer.
      ClearGeneralJournalLine(GenJournalBatch);
      DocumentNo :=
        RefundCreditMemoGeneralLine(
          TempGenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::Customer,CreateCustomer,
          -LibraryRandom.RandDec(100,2),ExchangeRateAmount);
      Amount := ComputeExhangeRate(TempGenJournalLine."Currency Code",TempGenJournalLine.Amount,ExchangeRateAmount);

      // Exercise: Apply Posted Credit Memo and Post Application.
      ApplyAndPostCustomerEntry(
        TempGenJournalLine."Document No.",TempGenJournalLine.Amount,DocumentNo,
        CustLedgerEntry."Document Type"::Refund,CustLedgerEntry."Document Type"::"Credit Memo");

      // Verify: Verify Detailed Vendor Ledger Entry after Apply Credit Memo.
      VerifyDetailedLedgerEntryCust(TempGenJournalLine."Document No.",-Amount,EntryType);
    END;

    LOCAL PROCEDURE RealizedDetailedLedgerEntry@23(ExchangeRateAmount@1000 : Decimal;EntryType@1001 : Option);
    VAR
      GenJournalBatch@1002 : Record 232;
      GenJournalLine@1005 : Record 81;
      TempGenJournalLine@1004 : TEMPORARY Record 81;
      DocumentNo@1003 : Code[20];
    BEGIN
      // Create Rfund and Credit Memo General Line and Modify Exchange Rate.
      ClearGeneralJournalLine(GenJournalBatch);
      DocumentNo := RefundCreditMemoGeneralLine(
          TempGenJournalLine,GenJournalBatch,GenJournalLine."Account Type"::Vendor,CreateVendor,
          LibraryRandom.RandDec(100,2),ExchangeRateAmount);

      // Apply Vendor Ledger Entry and Verify them.
      ApplyAndVerifyVendorEntry(TempGenJournalLine,ExchangeRateAmount,EntryType,DocumentNo);
    END;

    LOCAL PROCEDURE RefundCreditMemoGeneralLine@32(VAR TempGenJournalLine@1000 : TEMPORARY Record 81;GenJournalBatch@1001 : Record 232;AccountType@1011 : Option;AccountNo@1012 : Code[20];Amount@1013 : Decimal;ExchangeRateAmount@1009 : Decimal) : Code[20];
    VAR
      CurrencyExchangeRate@1005 : Record 330;
      GenJournalLine@1002 : Record 81;
      GenJournalLine2@1006 : Record 81;
      GeneralLineAmount@1003 : Decimal;
    BEGIN
      // Setup: Create and Post General Journal Line for Refund and Credit Memo with Difference Currency Exchange Rate Amount.
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::"Credit Memo",AccountType,AccountNo,
        CreateCurrency,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Create New Exchange Rate and Run Adjust Exchange Rate Report.
      CreateNewExchangeRate(CurrencyExchangeRate,GenJournalLine."Currency Code",ExchangeRateAmount,GenJournalLine."Posting Date");
      LibraryERM.RunAdjustExchangeRatesSimple(
        GenJournalLine."Currency Code",CurrencyExchangeRate."Starting Date",CurrencyExchangeRate."Starting Date");

      GeneralLineAmount := Amount / 2;  // Take partial amount for Refund Entry.
      CreateGeneralJournalLine(
        GenJournalLine2,GenJournalBatch,GenJournalLine."Document Type"::Refund,AccountType,AccountNo,
        GenJournalLine."Currency Code",-GeneralLineAmount,CurrencyExchangeRate."Starting Date");
      SaveGenJnlLineInTempTable(TempGenJournalLine,GenJournalLine2);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE ApplyAndAdjustExchRateForCust@8(ExchRateAmount@1000 : Decimal;EntryType@1001 : Option);
    VAR
      CustLedgerEntry@1006 : Record 21;
      GenJournalLine@1002 : Record 81;
      Amount@1003 : Decimal;
      DocumentNo@1004 : Code[20];
    BEGIN
      // Setup: Create General Line for Invoice and Payment and Post them.
      Amount :=
        CreateGenLineAndModifyExchRate(
          GenJournalLine,DocumentNo,ExchRateAmount,GenJournalLine."Account Type"::Customer,
          CreateCustomer,LibraryRandom.RandDec(100,2));

      // Exercise: Apply Invoice and Post Customer Entry and Run Adjust Exchange Rate Batch.
      ApplyAndPostCustomerEntry(
        GenJournalLine."Document No.",GenJournalLine.Amount,DocumentNo,
        CustLedgerEntry."Document Type"::Payment,CustLedgerEntry."Document Type"::Invoice);
      LibraryERM.RunAdjustExchangeRatesSimple(
        GenJournalLine."Currency Code",GenJournalLine."Posting Date",GenJournalLine."Posting Date");

      // Verify: Verify Detailed Ledger Entry has correct Realized entry.
      VerifyDetailedLedgerEntryCust(GenJournalLine."Document No.",-Amount,EntryType);
    END;

    LOCAL PROCEDURE ApplyAndAdjustExchRateForVend@10(ExchRateAmount@1001 : Decimal;EntryType@1000 : Option);
    VAR
      GenJournalLine@1002 : Record 81;
      Amount@1003 : Decimal;
      DocumentNo@1004 : Code[20];
    BEGIN
      // Setup: Create General Line for Invoice and Payment and Post them.
      Amount :=
        CreateGenLineAndModifyExchRate(
          GenJournalLine,DocumentNo,ExchRateAmount,GenJournalLine."Account Type"::Vendor,
          CreateVendor,-LibraryRandom.RandDec(100,2));

      // Exercise: Apply Invoice and Post Vendor Entry and Run Adjust Exchange Rate Batch.
      ApplyAndPostVendorEntry(GenJournalLine."Document No.",GenJournalLine.Amount,DocumentNo,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Document Type"::Invoice);
      LibraryERM.RunAdjustExchangeRatesSimple(
        GenJournalLine."Currency Code",GenJournalLine."Posting Date",GenJournalLine."Posting Date");

      // Verify: Verify Detailed Vendor Ledger Entry for Realized Loss after Apply Invoice.
      VerifyDetailedLedgerEntryVend(GenJournalLine."Document No.",-Amount,EntryType);
    END;

    LOCAL PROCEDURE CreateGenLineAndModifyExchRate@4(VAR GenJournalLine2@1003 : Record 81;VAR DocumentNo@1001 : Code[20];ExchRateAmt@1009 : Decimal;AccountType@1004 : Option;AccountNo@1010 : Code[20];Amount@1000 : Decimal) : Decimal;
    VAR
      CurrencyExchangeRate@1005 : Record 330;
      GenJournalBatch@1008 : Record 232;
      GenJournalLine@1002 : Record 81;
      CurrencyCode@1007 : Code[10];
    BEGIN
      CurrencyCode := CreateCurrency;
      LibraryERM.SetAddReportingCurrency(CurrencyCode);
      ClearGeneralJournalLine(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Invoice,AccountType,AccountNo,CurrencyCode,Amount,WORKDATE);
      DocumentNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      ModifyExchangeRate(CurrencyExchangeRate,CurrencyCode,ExchRateAmt);
      CreateGeneralJournalLine(
        GenJournalLine2,GenJournalBatch,GenJournalLine2."Document Type"::Payment,AccountType,
        AccountNo,GenJournalLine."Currency Code",-GenJournalLine.Amount / 2,WORKDATE);
      Amount := GenJournalLine2.Amount * ExchRateAmt / CurrencyExchangeRate."Exchange Rate Amount";
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      EXIT(Amount);
    END;

    [Normal]
    LOCAL PROCEDURE ApplyAndPostCustomerEntry@16(DocumentNo@1002 : Code[20];AmountToApply@1003 : Decimal;DocumentNo2@1001 : Code[20];DocumentType@1005 : Option;DocumentType2@1006 : Option);
    VAR
      CustLedgerEntry@1000 : Record 21;
      CustLedgerEntry2@1004 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);
      LibraryERM.SetApplyCustomerEntry(CustLedgerEntry,AmountToApply);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry2,DocumentType2,DocumentNo2);
      CustLedgerEntry2.CALCFIELDS("Remaining Amount");
      CustLedgerEntry2.VALIDATE("Amount to Apply",CustLedgerEntry2."Remaining Amount");
      CustLedgerEntry2.MODIFY(TRUE);
      LibraryERM.SetAppliestoIdCustomer(CustLedgerEntry2);
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry);
    END;

    [Normal]
    LOCAL PROCEDURE ApplyAndPostVendorEntry@1(DocumentNo@1002 : Code[20];AmountToApply@1003 : Decimal;DocumentNo2@1001 : Code[20];DocumentType@1005 : Option;DocumentType2@1006 : Option);
    VAR
      VendorLedgerEntry@1000 : Record 25;
      VendorLedgerEntry2@1004 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,DocumentNo);
      LibraryERM.SetApplyVendorEntry(VendorLedgerEntry,AmountToApply);
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry2,DocumentType2,DocumentNo2);
      VendorLedgerEntry2.CALCFIELDS("Remaining Amount");
      VendorLedgerEntry2.VALIDATE("Amount to Apply",VendorLedgerEntry2."Remaining Amount");
      VendorLedgerEntry2.MODIFY(TRUE);
      LibraryERM.SetAppliestoIdVendor(VendorLedgerEntry2);
      LibraryERM.PostVendLedgerApplication(VendorLedgerEntry);
    END;

    LOCAL PROCEDURE ApplyAndVerifyVendorEntry@24(TempGenJournalLine@1000 : TEMPORARY Record 81;ExchangeRateAmount@1001 : Decimal;EntryType@1002 : Option;DocumentNo@1003 : Code[20]);
    VAR
      VendorLedgerEntry@1004 : Record 25;
      Amount@1005 : Decimal;
    BEGIN
      // Exercise: Apply Posted Credit Memo and Post Application.
      Amount := ComputeExhangeRate(TempGenJournalLine."Currency Code",TempGenJournalLine.Amount,ExchangeRateAmount);
      ApplyAndPostVendorEntry(
        TempGenJournalLine."Document No.",TempGenJournalLine.Amount,DocumentNo,
        VendorLedgerEntry."Document Type"::Refund,VendorLedgerEntry."Document Type"::"Credit Memo");

      // Verify: Verify Detailed Vendor Ledger Entry after Apply Credit Memo.
      VerifyDetailedLedgerEntryVend(TempGenJournalLine."Document No.",-Amount,EntryType);
    END;

    LOCAL PROCEDURE ClearGeneralJournalLine@36(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    LOCAL PROCEDURE CreateCustomer@5() : Code[20];
    VAR
      Customer@1000 : Record 18;
      LibrarySales@1001 : Codeunit 130509;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateVendor@25() : Code[20];
    VAR
      Vendor@1000 : Record 23;
      LibraryPurchase@1001 : Codeunit 130512;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateCurrency@14() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      Currency.VALIDATE("Realized G/L Gains Account",Currency."Realized Gains Acc.");
      Currency.VALIDATE("Residual Gains Account",Currency."Realized Gains Acc.");
      Currency.VALIDATE("Realized G/L Losses Account",Currency."Realized Losses Acc.");
      Currency.VALIDATE("Residual Losses Account",Currency."Realized Losses Acc.");
      Currency.MODIFY(TRUE);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCurrencyExchRate@39(CurrencyCode@1000 : Code[10];OnDate@1002 : Date;Factor@1003 : Decimal);
    VAR
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      WITH CurrencyExchangeRate DO BEGIN
        SETRANGE("Currency Code",CurrencyCode);
        FINDLAST;
        "Starting Date" := OnDate;
        VALIDATE("Exchange Rate Amount","Exchange Rate Amount" * Factor);
        VALIDATE("Adjustment Exch. Rate Amount","Exchange Rate Amount");
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@17(VAR GenJournalLine@1001 : Record 81;GenJournalBatch@1008 : Record 232;DocumentType@1004 : Option;AccountType@1002 : Option;AccountNo@1003 : Code[20];CurrencyCode@1005 : Code[10];Amount@1006 : Decimal;PostingDate@1007 : Date);
    BEGIN
      // Take Random Amount for Invoice on General Journal Line.
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,AccountType,AccountNo,Amount);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ComputeExhangeRate@29(CurrencyCode@1000 : Code[10];Amount@1001 : Decimal;ExchangeRateAmount@1003 : Decimal) : Decimal;
    VAR
      CurrencyExchangeRate@1002 : Record 330;
    BEGIN
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
      EXIT(Amount * ExchangeRateAmount / CurrencyExchangeRate."Exchange Rate Amount");
    END;

    LOCAL PROCEDURE ModifyExchangeRate@30(VAR CurrencyExchangeRate@1000 : Record 330;CurrencyCode@1001 : Code[10];ExchRateAmt@1002 : Decimal);
    BEGIN
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",CurrencyExchangeRate."Relational Exch. Rate Amount" + ExchRateAmt);
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateNewExchangeRate@18(VAR CurrencyExchangeRate@1000 : Record 330;CurrencyCode@1001 : Code[10];ExchRateAmt@1002 : Decimal;StartingDate@1003 : Date);
    VAR
      CurrencyExchangeRate2@1004 : Record 330;
    BEGIN
      CurrencyExchangeRate2.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate2.FINDFIRST;
      LibraryERM.CreateExchRate(CurrencyExchangeRate,CurrencyCode,StartingDate);
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",CurrencyExchangeRate2."Exchange Rate Amount");
      CurrencyExchangeRate.VALIDATE("Adjustment Exch. Rate Amount",CurrencyExchangeRate2."Adjustment Exch. Rate Amount");

      // Relational Exch. Rate Amount and Relational Adjmt Exch Rate Amt always greater than Exchange Rate Amount.
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",CurrencyExchangeRate2."Relational Exch. Rate Amount" + ExchRateAmt);
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate2."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SaveGenJnlLineInTempTable@28(VAR NewGenJournalLine@1001 : Record 81;GenJournalLine@1000 : Record 81);
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
      GenJournalLine.FINDSET;
      REPEAT
        NewGenJournalLine := GenJournalLine;
        NewGenJournalLine.INSERT;
      UNTIL GenJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyACYAmountOnGLEntriesOfLastTransaction@48(AddCurrencyCode@1000 : Code[10]);
    VAR
      GLEntry@1001 : Record 17;
      CurrExchRate@1002 : Record 330;
      ExpectedACYAmount@1003 : Decimal;
    BEGIN
      WITH GLEntry DO BEGIN
        FINDLAST;
        SETRANGE("Transaction No.","Transaction No.");
        FINDSET;
        REPEAT
          ExpectedACYAmount :=
            ROUND(
              CurrExchRate.ExchangeAmtLCYToFCY(
                "Posting Date",AddCurrencyCode,Amount,CurrExchRate.ExchangeRate("Posting Date",AddCurrencyCode)));
          Assert.AreEqual(ExpectedACYAmount,"Additional-Currency Amount",FIELDNAME("Additional-Currency Amount"));
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@27(DocumentNo@1001 : Code[20]);
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Payment,DocumentNo);
      CustLedgerEntry.SETRANGE("Closed by Entry No.",CustLedgerEntry."Entry No.");
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.FINDFIRST;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyDetailedLedgerEntryCust@3(DocumentNo@1000 : Code[20];Amount@1006 : Decimal;EntryType@1001 : Option);
    VAR
      DetailedCustLedgEntry@1002 : Record 379;
      Currency@1005 : Record 4;
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedCustLedgEntry.SETRANGE("Entry Type",EntryType);
      DetailedCustLedgEntry.FINDFIRST;
      Currency.GET(DetailedCustLedgEntry."Currency Code");
      Assert.AreNearlyEqual(
        Amount,DetailedCustLedgEntry."Amount (LCY)",Currency."Amount Rounding Precision",
        STRSUBSTNO(AmountError,DetailedCustLedgEntry.FIELDCAPTION("Amount (LCY)"),Amount,DetailedCustLedgEntry.TABLECAPTION,
          DetailedCustLedgEntry.FIELDCAPTION("Entry No."),DetailedCustLedgEntry."Entry No."));
    END;

    [Normal]
    LOCAL PROCEDURE VerifyDetailedLedgerEntryVend@7(DocumentNo@1000 : Code[20];Amount@1006 : Decimal;EntryType@1001 : Option);
    VAR
      DetailedVendorLedgEntry@1002 : Record 380;
      Currency@1005 : Record 4;
    BEGIN
      DetailedVendorLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedVendorLedgEntry.SETRANGE("Entry Type",EntryType);
      DetailedVendorLedgEntry.FINDFIRST;
      Currency.GET(DetailedVendorLedgEntry."Currency Code");
      Assert.AreNearlyEqual(
        Amount,DetailedVendorLedgEntry."Amount (LCY)",Currency."Amount Rounding Precision",
        STRSUBSTNO(AmountError,DetailedVendorLedgEntry.FIELDCAPTION("Amount (LCY)"),Amount,DetailedVendorLedgEntry.TABLECAPTION,
          DetailedVendorLedgEntry.FIELDCAPTION("Entry No."),DetailedVendorLedgEntry."Entry No."));
    END;

    BEGIN
    {
      // [FEATURE] [Adjust Exchange Rate]
      Unsupported version tags:
      ES: Unable to Execute
      DE: Unable to Execute

      Test Adjust Exchange Rate batch job and Apply Posted Entry for Customer and Vendor.
        1. Create General Journal Line and Apply Invoice, Modify Higher Exchange Rate and Run Adjust Exchange rate
           batch job for Unrealized Gain on Customer.
        2. Create General Journal Line and Apply Invoice, Modify Lower Exchange Rate and Run Adjust Exchange rate
           batch job for Unrealized Loss on Customer.
        3. Create General Journal Line and Apply Invoice, Modify Higher Exchange Rate and Run Adjust Exchange rate
           batch job for Unrealized Loss on Vendor.
        4. Create General Journal Line and Apply Invoice, Modify Lower Exchange Rate and Run Adjust Exchange rate
           batch job for Unrealized Gain on Vendor.
        5. Test Application of Invoice to a Payment from Customer Ledger Entry.
        6. Check Detailed Vendor Ledger Entry for Realized Loss Entry after Applying Credit Memo for Vendor.
        7. Check Detailed Vendor Ledger Entry for Realized Gain Entry after Applying Credit Memo for Vendor.
        8. Check Detailed Vendor Ledger Entry for Realized Loss Entry after Applying Credit Memo for Customer.
        9. Check Detailed Customer Ledger Entry for Realized Gain Entry after Applying Credit Memo for Customer.

        Covers Test Cases: WI - 184866
        ------------------------------------------------------
        Test Function Name                      TFS ID
        ------------------------------------------------------
        ApplyAdjustExchRateHigherCust   123858 to 123862
        ApplyAdjustExchRateLowerCust    123863 to 123865
        ApplyAdjustExchRateHigherVend   123866 to 123870
        ApplydjustExchRateLowerVend     123871 to 123872

        Covers Test Cases: WI - 189179
        ------------------------------------------------------
        Test Function Name                      TFS ID
        ------------------------------------------------------
        ApplyCustomerLedgerEntry    125862,125863,125864

        Covers Test Cases: WI - 233963
        ------------------------------------------------------
        Test Function Name                      TFS ID
        ------------------------------------------------------
        RealizedLossDetailedLedger    123999-124000 and 124002 -124012

        Covers Test Cases: WI - 233965
        ------------------------------------------------------
        Test Function Name                      TFS ID
        ------------------------------------------------------
        RealizedGainDetailedLedger    124021-124027 and 125919-125924

        Covers Test Cases: WI - 234169
        ------------------------------------------------------
        Test Function Name                      TFS ID
        ------------------------------------------------------
        RealizedLossDetailedLedgerCust        125123-125135

        Covers Test Cases: WI - 234171
        ------------------------------------------------------
        Test Function Name                      TFS ID
        ------------------------------------------------------
        RealizedGainDetailedLedgerCust        125143 to 125155
    }
    END.
  }
}

