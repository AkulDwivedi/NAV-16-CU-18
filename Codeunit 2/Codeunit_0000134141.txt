OBJECT Codeunit 134141 ERM Bank Reconciliation
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryVariableStorage@1009 : Codeunit 131004;
      LibraryERM@1003 : Codeunit 131300;
      LibraryUtility@1005 : Codeunit 131000;
      Assert@1002 : Codeunit 130000;
      LibraryFiscalYear@1006 : Codeunit 131302;
      LibraryRandom@1001 : Codeunit 130440;
      WrongAmountErr@1004 : TextConst '@@@={Locked};ENU=%1 must be %2.';
      HasBankEntriesMsg@1000 : TextConst 'ENU=One or more bank account ledger entries in bank account';
      LibraryERMCountryData@1007 : Codeunit 131305;
      LibraryDimension@1011 : Codeunit 131001;
      LibrarySetupStorage@1012 : Codeunit 131009;
      LibrarySales@1013 : Codeunit 130509;
      LibraryPurchase@1014 : Codeunit 130512;
      isInitialized@1008 : Boolean;
      StatementNoEditableErr@1010 : TextConst '@@@=%1 - "Statement No." field caption;ENU=%1 should not be editable.';
      VATEntryErr@1500000 : TextConst 'ENU=There is no VAT Entry within the filter';

    [Test]
    [HandlerFunctions(GenJnlPageHandler)]
    PROCEDURE TransferToGenJnlLineWithBalAcc@20();
    VAR
      GenJournalBatch@1007 : Record 232;
      BankAccReconciliation@1001 : Record 273;
      BankAccReconciliationLine@1002 : Record 274;
      GenJournalLine@1004 : Record 81;
    BEGIN
      Initialize;

      // Setup: Create a bank rec. and add a line to it
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      SetupBankAccReconciliation(BankAccReconciliation,BankAccReconciliationLine);

      // Exercise: Execute Batch Job Transfer to GL Journal
      TransferToGenJnlReport(BankAccReconciliation,GenJournalBatch);

      // Verify: Check that the line was transfered to the GL Journal
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      Assert.IsTrue(GenJournalLine.FINDFIRST,'Failed to find transfered journal line');
      Assert.AreEqual(BankAccReconciliationLine."Statement Amount",GenJournalLine.Amount,
        'Amount on transfered journal line is not correct');
      GenJournalLine.TESTFIELD("Bal. Account Type",GenJournalBatch."Bal. Account Type");
      GenJournalLine.TESTFIELD("Bal. Account No.",GenJournalBatch."Bal. Account No.");
    END;

    [Test]
    [HandlerFunctions(GenJnlPageHandler)]
    PROCEDURE TransferToGenJnlLineWithoutBalAcc@38();
    VAR
      GenJournalBatch@1007 : Record 232;
      BankAccReconciliation@1001 : Record 273;
      BankAccReconciliationLine@1002 : Record 274;
      GenJournalLine@1004 : Record 81;
    BEGIN
      Initialize;

      // Setup: Create a bank rec. and add a line to it
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,LibraryERM.SelectGenJnlTemplate);
      SetupBankAccReconciliation(BankAccReconciliation,BankAccReconciliationLine);

      // Exercise: Execute Batch Job Transfer to GL Journal
      TransferToGenJnlReport(BankAccReconciliation,GenJournalBatch);
      // Verify: Check that the line was transfered to the GL Journal
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      Assert.IsTrue(GenJournalLine.FINDFIRST,'Failed to find transfered journal line');
      Assert.AreEqual(-BankAccReconciliationLine."Statement Amount",GenJournalLine.Amount,
        'Amount on transfered journal line is not correct');
      GenJournalLine.TESTFIELD("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.TESTFIELD("Bal. Account No.",BankAccReconciliation."Bank Account No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE DateCompressCheckLedgerEntries@7();
    VAR
      BankAccount@1003 : Record 270;
      CheckLedgerEntry@1001 : Record 272;
      DeleteCheckLedgerEntries@1000 : Report 1495;
      CurrentYear@1004 : Integer;
    BEGIN
      Initialize;

      // Create check ledger entries
      PostCheck(BankAccount,CreateBankAccount,LibraryRandom.RandInt(1000));

      // Date compress check ledger entries
      // Close fiscal year
      LibraryFiscalYear.CloseFiscalYear;
      CurrentYear := DATE2DMY(WORKDATE,3);

      // Run delete check batch job
      CheckLedgerEntry.SETRANGE("Bank Account No.",BankAccount."No.");
      DeleteCheckLedgerEntries.InitializeRequest(DMY2DATE(1,1,CurrentYear),DMY2DATE(31,12,CurrentYear));
      DeleteCheckLedgerEntries.USEREQUESTPAGE := FALSE;
      DeleteCheckLedgerEntries.SETTABLEVIEW(CheckLedgerEntry);
      DeleteCheckLedgerEntries.RUN;

      // Verify check ledger entries are deleted
      CheckLedgerEntry.RESET;
      CheckLedgerEntry.SETRANGE("Bank Account No.",BankAccount."No.");
      CheckLedgerEntry.SETRANGE("Entry Status",CheckLedgerEntry."Entry Status"::Posted);
      Assert.AreEqual(CheckLedgerEntry.COUNT,0,'Expected no posted check ledger entries to exist');
    END;

    [Test]
    PROCEDURE CheckBankAccReconsiliation@1();
    VAR
      BankAccReconciliation@1000 : Record 273;
      BankAccount@1001 : Record 270;
      DocumentNo@1002 : Code[20];
    BEGIN
      Initialize;

      // Setup
      DocumentNo := PostCheck(BankAccount,CreateBankAccount,LibraryRandom.RandInt(1000));

      // Exercise: Bank Account Reconciliation.
      CreateSuggestedBankReconc(BankAccReconciliation,BankAccount."No.",FALSE);  // FALSE for 'Include Checks'.

      // Post the Bank Account Reconciliation
      LibraryERM.PostBankAccReconciliation(BankAccReconciliation);

      // Verify: Verify Bank Ledger Entries closed
      VerifyBankRecLedgerEntry(BankAccount."No.",DocumentNo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReversalBankAccReconciliation@3();
    VAR
      BankAccReconciliation@1003 : Record 273;
      GenJournalLine@1000 : Record 81;
      GLRegister@1002 : Record 45;
      ReversalEntry@1001 : Record 179;
    BEGIN
      // Create and post General Journal Line using Random Values and Reversal of Bank Ledger Entries for Bank Reconciliation.

      // Setup: Create General Journal Line and Reverse Bank Ledger Entries for Bank Reconciliation.
      Initialize;
      CreateAndPostGenJournalLine(GenJournalLine,CreateBankAccount);
      GLRegister.FINDLAST;
      ReversalEntry.SetHideDialog(TRUE);
      ReversalEntry.ReverseRegister(GLRegister."No.");

      // Exercise: Bank Account Reconciliation.
      CreateSuggestedBankReconc(BankAccReconciliation,GenJournalLine."Bal. Account No.",FALSE);  // FALSE for 'Include Checks'.

      // Post the Bank Account Reconciliation
      LibraryERM.PostBankAccReconciliation(BankAccReconciliation);

      // Verify: Verify Bank Ledger Entry.
      VerifyReversedBankLedgerEntry(GenJournalLine."Bal. Account No.",GenJournalLine."Document No.",GenJournalLine.Amount);
    END;

    [Test]
    PROCEDURE SuggestBankReconcIncludeCheckTrue@11();
    VAR
      BankAccReconciliationLine@1000 : Record 274;
      BankAccount@1005 : Record 270;
    BEGIN
      // Verify Bank Reconciliation Lines for Check Ledger entries ,when Include Check is True on Suggest Bank Account Reconciliation Lines.

      // Setup: Create Bank Account, create Check Ledger Entries.
      Initialize;
      PostCheck(BankAccount,CreateBankAccount,LibraryRandom.RandInt(1000));  // Take random Amount.

      // Exercise and Verification.
      SuggestAndVerifyBankReconcLine(BankAccount,'',BankAccReconciliationLine.Type::"Check Ledger Entry",TRUE);  // '' for DocumentNo, TRUE for 'Include Checks'.
    END;

    [Test]
    PROCEDURE SuggestBankReconcIncludeCheckFalse@30();
    VAR
      BankAccount@1004 : Record 270;
      BankAccReconciliationLine@1000 : Record 274;
      DocumentNo@1001 : Code[20];
    BEGIN
      // Verify Bank Reconciliation Lines for Bank Account ledger entries ,when Include Check is False on Suggest Bank Account Reconciliation Lines.

      // Setup: Create Bank Account, create Check Ledger Entries.
      Initialize;
      DocumentNo := PostCheck(BankAccount,CreateBankAccount,LibraryRandom.RandInt(1000));  // Take random Amount.

      // Exercise and Verification.
      SuggestAndVerifyBankReconcLine(BankAccount,DocumentNo,BankAccReconciliationLine.Type::"Bank Account Ledger Entry",FALSE);  // '' for CheckNo, FALSE for 'Include Checks'.
    END;

    [Test]
    [HandlerFunctions(DeleteStatementConfirmHandler)]
    PROCEDURE DeleteBankStatementConfirmed@13();
    VAR
      BankAccountStatement@1001 : Record 275;
    BEGIN
      // Setup.
      Initialize;
      CreateBankReconciliationWithLedgerEntries(BankAccountStatement);

      // Exercise.
      LibraryVariableStorage.Enqueue(TRUE);
      BankAccountStatement.DELETE(TRUE);

      // Verify.
      ASSERTERROR
        BankAccountStatement.GET(BankAccountStatement."Bank Account No.",
          BankAccountStatement."Statement No.");
      Assert.AssertRecordNotFound;
    END;

    [Test]
    [HandlerFunctions(DeleteStatementConfirmHandler)]
    PROCEDURE DeleteBankStatementNotConfirmed@16();
    VAR
      BankAccountStatement@1001 : Record 275;
    BEGIN
      // Setup.
      Initialize;
      CreateBankReconciliationWithLedgerEntries(BankAccountStatement);

      // Exercise.
      LibraryVariableStorage.Enqueue(FALSE);
      ASSERTERROR BankAccountStatement.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE VerifyTotalOutstandingChecks@19();
    VAR
      BankAccReconciliation@1000 : Record 273;
      BankAccount@1005 : Record 270;
      OutstandingAmt@1001 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      PostCheck(BankAccount,CreateBankAccount,LibraryRandom.RandDec(1000,2));
      CreateSuggestedBankReconc(BankAccReconciliation,BankAccount."No.",TRUE);
      LibraryERM.PostBankAccReconciliation(BankAccReconciliation);

      OutstandingAmt := LibraryRandom.RandDec(1000,2);
      PostCheck(BankAccount,BankAccount."No.",OutstandingAmt);
      CreateSuggestedBankReconc(BankAccReconciliation,BankAccount."No.",TRUE);

      // Exercise.
      BankAccount.CALCFIELDS("Total on Checks");

      // Verify.
      BankAccount.TESTFIELD("Total on Checks",OutstandingAmt);
    END;

    [Test]
    PROCEDURE GetStatementNoFromBankAccount@23();
    VAR
      BankAccReconciliation@1000 : Record 273;
      BankAccount@1001 : Record 270;
    BEGIN
      Initialize;

      // Setup.
      LibraryERM.CreateBankAccount(BankAccount);
      BankAccount."Last Statement No." := '';
      BankAccount.MODIFY;

      // Exercise.
      BankAccReconciliation.INIT;
      BankAccReconciliation.VALIDATE("Statement Type",BankAccReconciliation."Statement Type"::"Bank Reconciliation");
      BankAccReconciliation.VALIDATE("Bank Account No.",BankAccount."No.");
      BankAccReconciliation.INSERT(TRUE);

      // Verify.
      BankAccReconciliation.TESTFIELD("Statement No.",FORMAT(1));
    END;

    [Test]
    PROCEDURE BankAccReconciliationBalanceToReconcile@26();
    VAR
      BankAccReconciliation@1000 : Record 273;
      GenJournalLine@1001 : Record 81;
      BankAccReconciliationPage@1003 : TestPage 379;
      BalanceToReconcile@1004 : Decimal;
      i@1002 : Integer;
    BEGIN
      // [SCENARIO 363054] "Balance to Reconcile" does not include amounts from Posted Bank Reconciliations
      Initialize;

      // [GIVEN] Posted Bank Reconciliation A with Amount X
      CreateAndPostGenJournalLine(GenJournalLine,CreateBankAccount);
      CreateSuggestedBankReconc(BankAccReconciliation,GenJournalLine."Bal. Account No.",FALSE);
      LibraryERM.PostBankAccReconciliation(BankAccReconciliation);

      // [GIVEN] Bank Reconciliation B with Amount Y
      FOR i := 1 TO LibraryRandom.RandInt(5) DO BEGIN
        CreateAndPostGenJournalLine(GenJournalLine,GenJournalLine."Bal. Account No.");
        BalanceToReconcile += GenJournalLine.Amount;
      END;
      CLEAR(BankAccReconciliation);
      CreateSuggestedBankReconc(BankAccReconciliation,GenJournalLine."Bal. Account No.",FALSE);

      // [WHEN] Bank Reconciliation B page is opened
      BankAccReconciliationPage.OPENVIEW;
      BankAccReconciliationPage.GOTORECORD(BankAccReconciliation);

      // [THEN] "Balance To Reconcile" = Y.
      Assert.AreEqual(
        -BalanceToReconcile,
        BankAccReconciliationPage.ApplyBankLedgerEntries.BalanceToReconcile.ASDECIMAL,
        STRSUBSTNO(
          WrongAmountErr,BankAccReconciliationPage.ApplyBankLedgerEntries.BalanceToReconcile.CAPTION,
          -BalanceToReconcile));
    END;

    [Test]
    PROCEDURE ShortcutDimsOnPaymentReconJournalLine@28();
    VAR
      BankAccReconciliationLine@1000 : Record 274;
      DimensionValue@1003 : ARRAY [8] OF Record 349;
      i@1002 : Integer;
    BEGIN
      // [FEATURE] [Dimension] [UT]
      // [SCENARIO 379516] Payment Reconciliation Journal correctly updates shortcut dimensions
      Initialize;
      UpdateGeneralShortcutDimensionSetup;

      // [GIVEN] Dimension 'D' with value 'V'. GLSetup."Shortcut Dimension 1 Code" = 'D'.
      // [GIVEN] Payment Reconciliation Journal Line.
      // [WHEN] Update journal line "Shortcut Dimension 1 Code" = 'V'
      BankAccReconciliationLine.INIT;
      FOR i := 1 TO ARRAYLEN(DimensionValue) DO BEGIN
        LibraryDimension.FindDimensionValue(DimensionValue[i],LibraryERM.GetShortcutDimensionCode(i));
        BankAccReconciliationLine.ValidateShortcutDimCode(i,DimensionValue[i].Code);
      END;

      // [THEN] Journal line Dimension Set Entry ("Dimension Set ID") contains Dimension 'D' with value 'V' record.
      FOR i := 1 TO ARRAYLEN(DimensionValue) DO
        Assert.AreEqual(
          DimensionValue[i].Code,
          GetDimensionValueCodeFromSetEntry(BankAccReconciliationLine."Dimension Set ID",DimensionValue[i]."Dimension Code"),
          DimensionValue[i].FIELDCAPTION(Code));
    END;

    [Test]
    PROCEDURE SourceCodeSetupForReconPmtJnl@29();
    VAR
      SourceCode@1001 : Record 230;
      SourceCodeSetup@1002 : Record 242;
      SourceCodeSetupPage@1000 : TestPage 279;
    BEGIN
      // [FEATURE] [Source Code] [UT] [UI]
      // [SCENARIO 379544] Page field "Payment Reconciliation Journal" is available from "Source Code Setup"
      Initialize;

      // [GIVEN] Open Source Code Setup page
      LibraryERM.CreateSourceCode(SourceCode);
      SourceCodeSetupPage.OPENEDIT;

      // [WHEN] Validate "Payment Reconciliation Journal" = "X"
      SourceCodeSetupPage."Payment Reconciliation Journal".SETVALUE(SourceCode.Code);
      SourceCodeSetupPage.CLOSE;

      // [THEN] Record SourceCodeSetup."Payment Reconciliation Journal" = "X"
      SourceCodeSetup.GET;
      Assert.AreEqual(
        SourceCode.Code,
        SourceCodeSetup."Payment Reconciliation Journal",
        SourceCodeSetup.FIELDCAPTION("Payment Reconciliation Journal"));
    END;

    [Test]
    PROCEDURE VerifyVATEntryAfterPostingBankAccReconLineForGLAccount@33();
    VAR
      BankAccReconciliation@1003 : Record 273;
      BankAccReconciliationLine@1004 : Record 274;
      VATEntry@1000 : Record 254;
      GLAccountNo@1001 : Code[20];
      BankAccountNo@1008 : Code[20];
      VATRate@1011 : Decimal;
    BEGIN
      // [FEATURE] [G/L Account]
      // [SCENARIO 380298] VAT Entry shoud be created after posting Bank Acc. Reconcilation Line with G/L Account with VAT
      Initialize;

      // [GIVEN] G/L Account with VAT = 10%
      GLAccountNo := CreateGLAccountWithVATPostingSetup(VATRate);
      BankAccountNo := LibraryERM.CreateBankAccountNo;

      // [GIVEN] Bank Account Reconciliation for G/L Account with Amount = 100 (including VAT)
      CreateApplyBankAccReconcilationLine(BankAccReconciliation,BankAccReconciliationLine,
        BankAccReconciliationLine."Account Type"::"G/L Account",
        GLAccountNo,LibraryRandom.RandIntInRange(50,100),BankAccountNo);
      BankAccReconciliationLine.TransferRemainingAmountToAccount;

      // [WHEN] Post Bank Acc. Reconcilation Line
      LibraryERM.PostBankAccReconciliation(BankAccReconciliation);

      // [THEN] Known failure: error "There is no VAT Entry within the filter..."
      VATEntry.SETRANGE("Document No.",BankAccReconciliation."Statement No.");
      ASSERTERROR VATEntry.FINDFIRST;
      Assert.ExpectedError(VATEntryErr);
    END;

    [Test]
    PROCEDURE BankAccReconciliationStatementNoIsNotEditable@27();
    VAR
      BankAccReconciliation@1000 : TestPage 379;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381659] "Statement No." should not be editable in Bank Account Reconciliation
      BankAccReconciliation.OPENEDIT;
      Assert.IsFalse(
        BankAccReconciliation.StatementNo.EDITABLE,STRSUBSTNO(StatementNoEditableErr,BankAccReconciliation.StatementNo.CAPTION));
    END;

    [Test]
    PROCEDURE LastStatementOfReconciliationIsUpdatedOnlyOnInsertion@35();
    VAR
      BankAccReconciliation@1000 : Record 273;
      BankAccount@1001 : ARRAY [2] OF Record 270;
    BEGIN
      // [SCENARIO 381659] "Last Statement No." should be updated in Bank Account only on Bank Account Reconciliation insertion

      // [GIVEN] Bank Account Reconciliation "BA"
      BankAccReconciliation.INIT;
      BankAccReconciliation."Statement Type" := BankAccReconciliation."Statement Type"::"Bank Reconciliation";

      // [GIVEN] Bank Account "Bank1" is set for "BA" having "Last Statement No." = 'X01'
      LibraryERM.CreateBankAccount(BankAccount[1]);
      BankAccount[1]."Last Statement No." := 'X01';
      BankAccount[1].MODIFY;
      BankAccReconciliation.VALIDATE("Bank Account No.",BankAccount[1]."No.");

      // [GIVEN] Bank Account "Bank2" is set for "BA" having "Last Statement No." = 'Y01'
      LibraryERM.CreateBankAccount(BankAccount[2]);
      BankAccount[2]."Last Statement No." := 'Y01';
      BankAccount[2].MODIFY;
      BankAccReconciliation.VALIDATE("Bank Account No.",BankAccount[2]."No.");
      BankAccount[2].TESTFIELD("Last Statement No.",'Y01');

      // [WHEN] Bank Account Reconciliation "BA" is inserted with "Statement No." '1'
      BankAccReconciliation.INSERT(TRUE);

      // [THEN] Bank Account "Bank1" has "Last Statement No." = 'X01'
      BankAccount[1].FIND;
      BankAccount[1].TESTFIELD("Last Statement No.",'X01');

      // [THEN] Bank Account "Bank2" has "Last Statement No." = 'Y02'
      BankAccount[2].FIND;
      BankAccount[2].TESTFIELD("Last Statement No.",BankAccReconciliation."Statement No.");
    END;

    [Test]
    PROCEDURE LastStatementOfPaymentApplicationIsUpdatedOnlyOnInsertion@32();
    VAR
      BankAccReconciliation@1000 : Record 273;
      BankAccount@1001 : ARRAY [2] OF Record 270;
    BEGIN
      // [SCENARIO 381659] "Last Payment Statement No." should be updated in Bank Account only on Bank Account Reconciliation insertion

      // [GIVEN] Bank Account Reconciliation "BA"
      BankAccReconciliation.INIT;
      BankAccReconciliation."Statement Type" := BankAccReconciliation."Statement Type"::"Payment Application";

      // [GIVEN] Bank Account "Bank1" is set for "BA" having "Last Payment Statement No." = 'X01'
      LibraryERM.CreateBankAccount(BankAccount[1]);
      BankAccount[1]."Last Payment Statement No." := 'X01';
      BankAccount[1].MODIFY;
      BankAccReconciliation.VALIDATE("Bank Account No.",BankAccount[1]."No.");

      // [GIVEN] Bank Account "Bank2" is set for "BA" having "Last Payment Statement No." = 'Y01'
      LibraryERM.CreateBankAccount(BankAccount[2]);
      BankAccount[2]."Last Payment Statement No." := 'Y01';
      BankAccount[2].MODIFY;
      BankAccReconciliation.VALIDATE("Bank Account No.",BankAccount[2]."No.");
      BankAccount[2].TESTFIELD("Last Payment Statement No.",'Y01');

      // [WHEN] Bank Account Reconciliation "BA" is inserted with "Statement No." '1'
      BankAccReconciliation.INSERT(TRUE);

      // [THEN] Bank Account "Bank1" has "Last Payment Statement No." = 'X01'
      BankAccount[1].FIND;
      BankAccount[1].TESTFIELD("Last Payment Statement No.",'X01');

      // [THEN] Bank Account "Bank2" has "Last Payment Statement No." = 'Y02'
      BankAccount[2].FIND;
      BankAccount[2].TESTFIELD("Last Payment Statement No.",BankAccReconciliation."Statement No.");
    END;

    [Test]
    [HandlerFunctions(GenJnlPageHandler)]
    PROCEDURE TransferToGenJnlLineWithReconcilBankAsBatchBalAcc@41();
    VAR
      GenJournalBatch@1007 : Record 232;
      BankAccReconciliation@1001 : Record 273;
      BankAccReconciliationLine@1002 : Record 274;
      GenJournalLine@1004 : Record 81;
    BEGIN
      // [SCENARIO 201538] The gen. journal line for reconciliation Bank Account is created with a correct sign when transferred from Bank Acc. Reconclication.
      Initialize;

      // [GIVEN] Bank Acc. Reconclication "BR" with Difference "D"
      SetupBankAccReconciliation(BankAccReconciliation,BankAccReconciliationLine);

      // [GIVEN] Gen Journal Batch "JB" for "BR"."Bank Account No." as Bal. Account
      SetupGenJournalBatch(
        GenJournalBatch,GenJournalBatch."Bal. Account Type"::"Bank Account",BankAccReconciliation."Bank Account No.");

      // [WHEN] Transfer to Gen. Journal is invoked from "BR"
      TransferToGenJnlReport(BankAccReconciliation,GenJournalBatch);

      // [THEN] Created Gen. Journal Line with Bal. Account = "BR"."Bal. Account"; Amount = -"D"
      VerifyGenJournalLine(
        GenJournalBatch."Journal Template Name",GenJournalBatch.Name,-BankAccReconciliationLine.Difference,
        GenJournalLine."Bal. Account Type"::"Bank Account",BankAccReconciliation."Bank Account No.");
    END;

    [Test]
    [HandlerFunctions(GenJnlPageHandler)]
    PROCEDURE TransferToGenJnlLineWithNotReconcilBankAsBatchBalAcc@43();
    VAR
      GenJournalBatch@1007 : Record 232;
      BankAccReconciliation@1001 : Record 273;
      BankAccReconciliationLine@1002 : Record 274;
      GenJournalLine@1004 : Record 81;
      BalAccountNo@1000 : Code[20];
    BEGIN
      // [SCENARIO 201538] The gen. journal line for not reconciliation Bank Account is created with a correct sign when transferred from Bank Acc. Reconclication.
      Initialize;

      // [GIVEN] Bank Acc. Reconclication "BR" with Difference "D"
      SetupBankAccReconciliation(BankAccReconciliation,BankAccReconciliationLine);

      // [GIVEN] Bank Account "BA"
      BalAccountNo := LibraryERM.CreateBankAccountNo;
      // [GIVEN] Gen Journal Batch "JB" with Bal. type Bank Account and "JB"."Bal. Account No." = "BA"
      SetupGenJournalBatch(
        GenJournalBatch,GenJournalBatch."Bal. Account Type"::"Bank Account",BalAccountNo);

      // [WHEN] Transfer to Gen. Journal is invoked from "BR"
      TransferToGenJnlReport(BankAccReconciliation,GenJournalBatch);

      // [THEN] Created Gen. Journal Line with Bal. Account = "BA"; Amount = "D"
      VerifyGenJournalLine(
        GenJournalBatch."Journal Template Name",GenJournalBatch.Name,BankAccReconciliationLine.Difference,
        GenJournalLine."Bal. Account Type"::"Bank Account",BalAccountNo);
    END;

    [Test]
    [HandlerFunctions(GenJnlPageHandler)]
    PROCEDURE TransferToGenJnlLineWithGLAsBatchBalAcc@37();
    VAR
      GenJournalBatch@1007 : Record 232;
      BankAccReconciliation@1001 : Record 273;
      BankAccReconciliationLine@1002 : Record 274;
      GenJournalLine@1004 : Record 81;
      BalAccountNo@1000 : Code[20];
    BEGIN
      // [SCENARIO 201538] The gen. journal line for G/L Account is created with a correct sign when transferred from Bank Acc. Reconclication.
      Initialize;

      // [GIVEN] Bank Acc. Reconclication "BR" with Difference "D"
      SetupBankAccReconciliation(BankAccReconciliation,BankAccReconciliationLine);

      // [GIVEN] G/L Account "GLAcc"
      BalAccountNo := LibraryERM.CreateGLAccountNo;
      // [GIVEN] Gen Journal Batch "JB" for "GLAcc" as Bal. Account
      SetupGenJournalBatch(
        GenJournalBatch,GenJournalBatch."Bal. Account Type"::"G/L Account",BalAccountNo);

      // [WHEN] Transfer to Gen. Journal is invoked from "BR"
      TransferToGenJnlReport(BankAccReconciliation,GenJournalBatch);

      // [THEN] Created Gen. Journal Line with Bal. Account = "GLAcc"; Amount = "D"
      VerifyGenJournalLine(
        GenJournalBatch."Journal Template Name",GenJournalBatch.Name,BankAccReconciliationLine.Difference,
        GenJournalLine."Bal. Account Type"::"G/L Account",BalAccountNo);
    END;

    [Test]
    [HandlerFunctions(GenJnlPageHandler)]
    PROCEDURE TransferToGenJnlLineWithEmptyBankAsBatchBalAcc@36();
    VAR
      GenJournalBatch@1007 : Record 232;
      BankAccReconciliation@1001 : Record 273;
      BankAccReconciliationLine@1002 : Record 274;
      GenJournalLine@1004 : Record 81;
    BEGIN
      // [SCENARIO 201538] The gen. journal line for empty Bank Account is created with a correct sign when transferred from Bank Acc. Reconclication.
      Initialize;

      // [GIVEN] Bank Acc. Reconclication "BR" with Difference "D"
      SetupBankAccReconciliation(BankAccReconciliation,BankAccReconciliationLine);

      // [GIVEN] Gen Journal Batch "JB" for empty Bank Account as Bal. Account
      SetupGenJournalBatch(
        GenJournalBatch,GenJournalBatch."Bal. Account Type"::"Bank Account",'');

      // [WHEN] Transfer to Gen. Journal is invoked from "BR"
      TransferToGenJnlReport(BankAccReconciliation,GenJournalBatch);

      // [THEN] Created Gen. Journal Line with Bal. Account = "BR"."Bal. Account"; Amount = -"D"
      VerifyGenJournalLine(
        GenJournalBatch."Journal Template Name",GenJournalBatch.Name,-BankAccReconciliationLine.Difference,
        GenJournalLine."Bal. Account Type"::"Bank Account",BankAccReconciliation."Bank Account No.");
    END;

    [Test]
    [HandlerFunctions(GenJnlPageHandler)]
    PROCEDURE TransferToGenJnlLineWithEmptyGLAsBatchBalAcc@42();
    VAR
      GenJournalBatch@1007 : Record 232;
      BankAccReconciliation@1001 : Record 273;
      BankAccReconciliationLine@1002 : Record 274;
      GenJournalLine@1004 : Record 81;
    BEGIN
      // [SCENARIO 201538] The gen. journal line for empty G/L Account is created with a correct sign when transferred from Bank Acc. Reconclication.
      Initialize;

      // [GIVEN] Bank Acc. Reconclication "BR" with Difference "D"
      SetupBankAccReconciliation(BankAccReconciliation,BankAccReconciliationLine);

      // [GIVEN] Gen Journal Batch "JB" for empty G/L Account as Bal. Account
      SetupGenJournalBatch(
        GenJournalBatch,GenJournalBatch."Bal. Account Type"::"G/L Account",'');

      // [WHEN] Transfer to Gen. Journal is invoked from "BR"
      TransferToGenJnlReport(BankAccReconciliation,GenJournalBatch);

      // [THEN] Created Gen. Journal Line Bal. with Account = "BR"."Bal. Account"; Amount = -"D"
      VerifyGenJournalLine(
        GenJournalBatch."Journal Template Name",GenJournalBatch.Name,-BankAccReconciliationLine.Difference,
        GenJournalLine."Bal. Account Type"::"Bank Account",BankAccReconciliation."Bank Account No.");
    END;

    [Test]
    PROCEDURE VerifySalespersonInDimSetOfBankAccReconLine@45();
    VAR
      Customer@1000 : Record 18;
      SalespersonPurchaser@1001 : Record 13;
      BankAccReconciliationLine@1002 : Record 274;
    BEGIN
      // [FEATURE] [UT] [Customer]
      // [SCENARIO 175792] Salesperson code as default dimension should be in dimension set of Bank Account Reconcilation Line after validation of Customer
      Initialize;

      // [GIVEN] Customer with Salesperson Code as default dimension = "X"
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      Customer."Salesperson Code" := SalespersonPurchaser.Code;
      Customer.MODIFY;
      CreateDefaultDimensionWithSpecCode(SalespersonPurchaser.Code,DATABASE::"Salesperson/Purchaser");

      // [GIVEN] Record of Bank Account Reconcilation Line
      MockBankAccReconLine(BankAccReconciliationLine,BankAccReconciliationLine."Account Type"::Customer);

      // [WHEN] Validate Customer to "Account No." of Bank Account Reconcilation Line
      BankAccReconciliationLine.VALIDATE("Account No.",Customer."No.");

      // [THEN] Dimension set of Bank Account Reconcilation Line contains Salesperson Code = "X"
      VerifyDimSetEntryValue(BankAccReconciliationLine."Dimension Set ID",Customer."Salesperson Code");
    END;

    [Test]
    PROCEDURE VerifyPurchaserInDimSetOfBankAccReconLine@49();
    VAR
      Vendor@1000 : Record 23;
      SalespersonPurchaser@1003 : Record 13;
      BankAccReconciliationLine@1001 : Record 274;
    BEGIN
      // [FEATURE] [UT] [Vendor]
      // [SCENARIO 175792] Purchaser code as default dimension should be in dimension set of Bank Account Reconcilation Line after validation of Vendor
      Initialize;

      // [GIVEN] Vendor with Purhaser Code as default dimension = "X"
      LibraryPurchase.CreateVendor(Vendor);
      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      Vendor."Purchaser Code" := SalespersonPurchaser.Code;
      Vendor.MODIFY;
      CreateDefaultDimensionWithSpecCode(SalespersonPurchaser.Code,DATABASE::"Salesperson/Purchaser");

      // [GIVEN] Record of Bank Account Reconcilation Line
      MockBankAccReconLine(BankAccReconciliationLine,BankAccReconciliationLine."Account Type"::Vendor);

      // [WHEN] Validate Vendor to "Vendor No." of Bank Account Reconcilation Line
      BankAccReconciliationLine.VALIDATE("Account No.",Vendor."No.");

      // [THEN] Dimension set of Bank Account Reconcilation Line contains Purchaser Code = "X"
      VerifyDimSetEntryValue(BankAccReconciliationLine."Dimension Set ID",Vendor."Purchaser Code");
    END;

    LOCAL PROCEDURE Initialize@8();
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;
      LibraryVariableStorage.Clear;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateLocalPostingSetup;
      LibrarySetupStorage.Save(DATABASE::"Source Code Setup");
      isInitialized := TRUE;
    END;

    LOCAL PROCEDURE PostCheck@6(VAR BankAccount@1004 : Record 270;AccountNo@1003 : Code[20];JnlAmount@1002 : Decimal) : Code[20];
    VAR
      GenJournalTemplate@1001 : Record 80;
      GenJournalBatch@1000 : Record 232;
      GenJournalLine@1005 : Record 81;
    BEGIN
      // Create General Journal Template and Batch for posting checks.
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      WITH GenJournalTemplate DO BEGIN
        VALIDATE(Type,Type::Payments);
        VALIDATE(Recurring,FALSE);
        MODIFY(TRUE);
      END;
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      WITH GenJournalBatch DO BEGIN
        VALIDATE("Bal. Account Type","Bal. Account Type"::"Bank Account");
        VALIDATE("Bal. Account No.",CreateBankAccount);
        MODIFY(TRUE);
        BankAccount.GET("Bal. Account No.");
      END;

      // Generate a journal line.
      WITH GenJournalLine DO BEGIN
        LibraryERM.CreateGeneralJnlLine(
          GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
          "Document Type"::Payment,"Account Type"::"Bank Account",
          AccountNo,JnlAmount);
        VALIDATE("Document No.",LibraryUtility.GenerateRandomCode(FIELDNO("Document No."),DATABASE::"Gen. Journal Line"));
        VALIDATE("Currency Code",BankAccount."Currency Code");
        VALIDATE("Bal. Account Type","Bal. Account Type"::"Bank Account");
        VALIDATE("Bal. Account No.",BankAccount."No.");
        VALIDATE("Bank Payment Type","Bank Payment Type"::"Manual Check");
        MODIFY(TRUE);
      END;

      // Post the check.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLine@12(VAR GenJournalLine@1000 : Record 81;BankAccountNo@1003 : Code[20]);
    VAR
      GenJournalBatch@1002 : Record 232;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      GenJournalLine.DELETEALL(TRUE);

      // Use Random because value is not important.
      LibraryERM.CreateGeneralJnlLineWithBalAcc(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,
        GenJournalLine."Bal. Account Type"::"Bank Account",BankAccountNo,-LibraryRandom.RandDec(5,2));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateGLAccountWithVATPostingSetup@52(VAR VATRate@1001 : Decimal) GLAccountNo : Code[20];
    VAR
      VATPostingSetup@1000 : Record 325;
    BEGIN
      VATRate := LibraryRandom.RandIntInRange(2,5);
      LibraryERM.CreateVATPostingSetupWithAccounts(VATPostingSetup,
        VATPostingSetup."VAT Calculation Type"::"Normal VAT",VATRate);
      GLAccountNo := VATPostingSetup."Purchase VAT Account";
      UpdateGLAccountPostingGroups(GLAccountNo,
        VATPostingSetup."VAT Prod. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
    END;

    LOCAL PROCEDURE UpdateGLAccountPostingGroups@55(GLAccountNo@1000 : Code[20];VATProdPostingGroup@1003 : Code[10];VATBusPostingGroup@1004 : Code[10]);
    VAR
      GLAccount@1001 : Record 15;
      GenProductPostingGroup@1002 : Record 251;
    BEGIN
      GLAccount.GET(GLAccountNo);
      LibraryERM.CreateGenProdPostingGroup(GenProductPostingGroup);
      GLAccount."Gen. Posting Type" := GLAccount."Gen. Posting Type"::Purchase;
      GLAccount."Gen. Prod. Posting Group" := GenProductPostingGroup.Code;
      GLAccount."VAT Prod. Posting Group" := VATProdPostingGroup;
      GLAccount."VAT Bus. Posting Group" := VATBusPostingGroup;
      GLAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDefaultDimensionWithSpecCode@50(AccountNo@1000 : Code[20];TableID@1001 : Integer);
    VAR
      Dimension@1002 : Record 348;
      DimensionValue@1003 : Record 349;
      DefaultDimension@1004 : Record 352;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      CreateDimensionValueWithSpecCode(DimensionValue,AccountNo,Dimension.Code);
      LibraryDimension.CreateDefaultDimension(DefaultDimension,TableID,AccountNo,Dimension.Code,DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateDimensionValueWithSpecCode@60(VAR DimensionValue@1000 : Record 349;DimensionValueCode@1001 : Code[20];DimensionCode@1002 : Code[20]);
    BEGIN
      DimensionValue.INIT;
      DimensionValue.VALIDATE("Dimension Code",DimensionCode);
      DimensionValue.VALIDATE(Code,DimensionValueCode);
      DimensionValue.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateBankAccount@15() : Code[20];
    VAR
      BankAccount@1000 : Record 270;
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      BankAccount.VALIDATE("Last Statement No.",FORMAT(LibraryRandom.RandInt(10)));  // Take Random Value.
      BankAccount.MODIFY(TRUE);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE CreateBankReconciliation@21(VAR BankAccReconciliation@1001 : Record 273;BankAccountNo@1000 : Code[20]);
    BEGIN
      LibraryERM.CreateBankAccReconciliation(BankAccReconciliation,BankAccountNo,
        BankAccReconciliation."Statement Type"::"Bank Reconciliation");
      BankAccReconciliation.VALIDATE("Statement Date",WORKDATE);
      BankAccReconciliation.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateBankReconciliationWithLedgerEntries@14(VAR BankAccountStatement@1001 : Record 275);
    VAR
      BankAccReconciliation@1000 : Record 273;
      GenJournalLine@1002 : Record 81;
    BEGIN
      CreateAndPostGenJournalLine(GenJournalLine,CreateBankAccount);
      CreateSuggestedBankReconc(BankAccReconciliation,GenJournalLine."Bal. Account No.",FALSE);
      LibraryERM.PostBankAccReconciliation(BankAccReconciliation);
      BankAccountStatement.GET(BankAccReconciliation."Bank Account No.",BankAccReconciliation."Statement No.");
    END;

    LOCAL PROCEDURE CreateApplyBankAccReconcilationLine@48(VAR BankAccReconciliation@1000 : Record 273;VAR BankAccReconciliationLine@1007 : Record 274;AccountType@1001 : Option;AccountNo@1003 : Code[20];StatementAmount@1004 : Decimal;BankAccountNo@1002 : Code[20]);
    BEGIN
      LibraryERM.CreateBankAccReconciliation(
        BankAccReconciliation,BankAccountNo,BankAccReconciliation."Statement Type"::"Payment Application");
      LibraryERM.CreateBankAccReconciliationLn(BankAccReconciliationLine,BankAccReconciliation);
      BankAccReconciliationLine.VALIDATE("Account Type",AccountType);
      BankAccReconciliationLine.VALIDATE("Account No.",AccountNo);
      BankAccReconciliationLine.VALIDATE("Document No.",
        LibraryUtility.GenerateRandomCode(BankAccReconciliationLine.FIELDNO("Document No."),DATABASE::"Bank Acc. Reconciliation Line"));
      BankAccReconciliationLine.VALIDATE("Statement Amount",StatementAmount);
      BankAccReconciliationLine.VALIDATE("Transaction Date",WORKDATE);
      BankAccReconciliationLine.VALIDATE(Description,AccountNo);
      BankAccReconciliationLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE MockBankAccReconLine@61(VAR BankAccReconciliationLine@1001 : Record 274;AccountType@1002 : Option);
    VAR
      BankAccReconciliation@1000 : Record 273;
    BEGIN
      LibraryERM.CreateBankAccReconciliation(
        BankAccReconciliation,LibraryERM.CreateBankAccountNo,BankAccReconciliation."Statement Type"::"Payment Application");
      LibraryERM.CreateBankAccReconciliationLn(BankAccReconciliationLine,BankAccReconciliation);
      BankAccReconciliationLine.VALIDATE("Account Type",AccountType);
    END;

    LOCAL PROCEDURE CreateSuggestedBankReconc@2(VAR BankAccReconciliation@1000 : Record 273;BankAccountNo@1001 : Code[20];IncludeChecks@1002 : Boolean);
    BEGIN
      CreateBankReconciliation(BankAccReconciliation,BankAccountNo);
      SuggestBankRecLines(BankAccReconciliation,IncludeChecks);

      // Balance Bank Account Reconciliation.
      BankAccReconciliation.VALIDATE("Statement Ending Balance",
        BankAccReconciliation."Balance Last Statement" + BankAccRecSum(BankAccReconciliation));
      BankAccReconciliation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGeneralShortcutDimensionSetup@39();
    VAR
      DimensionValue@1001 : Record 349;
      i@1000 : Integer;
    BEGIN
      FOR i := 1 TO 8 DO BEGIN
        LibraryDimension.CreateDimWithDimValue(DimensionValue);
        LibraryERM.SetShortcutDimensionCode(i,DimensionValue."Dimension Code");
      END;
    END;

    LOCAL PROCEDURE GetDimensionValueCodeFromSetEntry@40(DimensionSetID@1002 : Integer;ShortcutDimensionCode@1000 : Code[20]) : Code[20];
    VAR
      DimensionSetEntry@1001 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Code",ShortcutDimensionCode);
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,DimensionSetID);
      EXIT(DimensionSetEntry."Dimension Value Code");
    END;

    LOCAL PROCEDURE BankAccRecSum@24(BankAccReconciliation@1000 : Record 273) : Decimal;
    VAR
      BankAccReconciliationLine@1001 : Record 274;
    BEGIN
      WITH BankAccReconciliationLine DO BEGIN
        FilterBankRecLines(BankAccReconciliation);
        CALCSUMS("Statement Amount");
        EXIT("Statement Amount");
      END;
    END;

    LOCAL PROCEDURE SuggestBankRecLines@5(VAR BankAccReconciliation@1001 : Record 273;IncludeChecks@1003 : Boolean);
    VAR
      BankAccount@1002 : Record 270;
      SuggestBankAccReconLines@1000 : Report 1496;
    BEGIN
      SuggestBankAccReconLines.SetStmt(BankAccReconciliation);
      SuggestBankAccReconLines.SETTABLEVIEW(BankAccount);
      SuggestBankAccReconLines.InitializeRequest(WORKDATE,WORKDATE,IncludeChecks);
      SuggestBankAccReconLines.USEREQUESTPAGE(FALSE);
      SuggestBankAccReconLines.RUN;
    END;

    LOCAL PROCEDURE SuggestAndVerifyBankReconcLine@10(BankAccount@1000 : Record 270;DocumentNo@1002 : Code[20];Type@1003 : Option;IncludeChecks@1004 : Boolean);
    VAR
      BankAccReconciliation@1006 : Record 273;
    BEGIN
      // Exercise: Suggest lines on Bank Account Reconciliation.
      CreateSuggestedBankReconc(BankAccReconciliation,BankAccount."No.",IncludeChecks);

      // Verify: Verify Check No., type on Bank Account Reconciliation Line.
      BankAccount.CALCFIELDS(Balance);
      VerifyBankAccReconcLine(BankAccount."No.",Type,DocumentNo,BankAccount.Balance);
    END;

    LOCAL PROCEDURE SetupBankAccReconciliation@25(VAR BankAccReconciliation@1001 : Record 273;VAR BankAccReconciliationLine@1000 : Record 274);
    BEGIN
      CreateBankReconciliation(BankAccReconciliation,CreateBankAccount);
      LibraryERM.CreateBankAccReconciliationLn(BankAccReconciliationLine,BankAccReconciliation);
      BankAccReconciliationLine.VALIDATE("Transaction Date",WORKDATE);
      BankAccReconciliationLine.VALIDATE("Document No.",
        LibraryUtility.GenerateRandomCode(BankAccReconciliationLine.FIELDNO("Document No."),DATABASE::"Bank Acc. Reconciliation Line"));
      BankAccReconciliationLine.VALIDATE("Statement Amount",LibraryRandom.RandDec(1000,2));
      BankAccReconciliationLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE TransferToGenJnlReport@34(BankAccReconciliation@1001 : Record 273;GenJournalBatch@1002 : Record 232);
    VAR
      TransBankRecToGenJnl@1000 : Report 1497;
    BEGIN
      TransBankRecToGenJnl.SetBankAccRecon(BankAccReconciliation);
      TransBankRecToGenJnl.InitializeRequest(GenJournalBatch."Journal Template Name",GenJournalBatch.Name);
      TransBankRecToGenJnl.USEREQUESTPAGE := FALSE;
      TransBankRecToGenJnl.RUN;
    END;

    LOCAL PROCEDURE SetupGenJournalBatch@46(VAR GenJournalBatch@1000 : Record 232;BalAccountType@1001 : Option;BankAccountNo@1002 : Code[20]);
    VAR
      GenJournalTemplate@1003 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalBatch.VALIDATE("Bal. Account Type",BalAccountType);
      GenJournalBatch.VALIDATE("Bal. Account No.",BankAccountNo);
      GenJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyReversedBankLedgerEntry@9(BankAccountNo@1004 : Code[20];DocumentNo@1001 : Code[20];Amount@1003 : Decimal);
    VAR
      BankAccountLedgerEntry@1000 : Record 271;
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      BankAccountLedgerEntry.SETRANGE("Bank Account No.",BankAccountNo);
      BankAccountLedgerEntry.SETRANGE("Document No.",DocumentNo);
      BankAccountLedgerEntry.SETRANGE(Reversed,TRUE);
      BankAccountLedgerEntry.SETFILTER("Reversed Entry No.",'<>0');
      BankAccountLedgerEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        Amount,BankAccountLedgerEntry.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(WrongAmountErr,BankAccountLedgerEntry.Amount,Amount));
    END;

    LOCAL PROCEDURE VerifyBankRecLedgerEntry@47(AccountNo@1002 : Code[20];DocumentNo@1000 : Code[20]);
    VAR
      BankAccountLedgerEntry@1001 : Record 271;
    BEGIN
      WITH BankAccountLedgerEntry DO BEGIN
        SETRANGE("Bank Account No.",AccountNo);
        SETRANGE("Document No.",DocumentNo);
        FINDSET;

        REPEAT
          Assert.IsFalse(Open,'Bank ledger entry did not close:');
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyBankAccReconcLine@22(BankAccountNo@1005 : Code[20];Type@1001 : Option;DocumentNo@1003 : Code[20];Amount@1000 : Decimal);
    VAR
      BankAccReconciliationLine@1002 : Record 274;
    BEGIN
      BankAccReconciliationLine.SETRANGE("Bank Account No.",BankAccountNo);
      BankAccReconciliationLine.FINDFIRST;
      BankAccReconciliationLine.TESTFIELD(Type,Type);
      BankAccReconciliationLine.TESTFIELD("Document No.",DocumentNo);
      BankAccReconciliationLine.TESTFIELD("Statement Amount",Amount);
      BankAccReconciliationLine.TESTFIELD("Applied Amount",Amount);
    END;

    LOCAL PROCEDURE VerifyGenJournalLine@31(GenJournalTemplateNo@1001 : Code[50];GenJournalBatchNo@1006 : Code[50];ExpectedAmount@1002 : Decimal;BalAccountType@1003 : Option;BAlAccountNo@1004 : Code[20]);
    VAR
      GenJournalLine@1005 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalTemplateNo);
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatchNo);
      GenJournalLine.FINDFIRST;
      GenJournalLine.TESTFIELD("Bal. Account Type",BalAccountType);
      GenJournalLine.TESTFIELD("Bal. Account No.",BAlAccountNo);
      GenJournalLine.TESTFIELD(Amount,ExpectedAmount);
    END;

    LOCAL PROCEDURE VerifyDimSetEntryValue@44(DimSetID@1000 : Integer;DimValueCode@1001 : Code[20]);
    VAR
      DummyDimensionSetEntry@1002 : Record 480;
    BEGIN
      DummyDimensionSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      DummyDimensionSetEntry.SETRANGE("Dimension Value Code",DimValueCode);
      DummyDimensionSetEntry.FINDFIRST;
      Assert.RecordIsNotEmpty(DummyDimensionSetEntry);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@78(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Handler for confirmation messages, always send positive reply.
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@4(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    [ConfirmHandler]
    PROCEDURE DeleteStatementConfirmHandler@17(Question@1000 : Text[1024];VAR Reply@1003 : Boolean);
    VAR
      Confirm@1004 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Confirm);

      Assert.IsTrue(STRPOS(Question,HasBankEntriesMsg) > 0,'Unexpected message.');
      Reply := Confirm;
    END;

    [PageHandler]
    PROCEDURE GenJnlPageHandler@18(VAR GeneralJournal@1000 : TestPage 39);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Bank Reconciliation]
      Unsupported version tags:
      ES: Unable to Execute

      Test Reversal for Bank Reconciliation.
        1. Test Reverse Bank Ledger Entries for Bank Reconciliation.
        2. Verify Bank Reconciliation Lines for Check Ledger entries ,when Include Check is True on Suggest Bank Account Reconciliation Lines.
        3. Verify Bank Reconciliation Lines for Bank Ledger entries ,when Include Check is False on Suggest Bank Account Reconciliation Lines.

      Covers Test Cases:
        -----------------------------------------------------------
        Test Function Name              TFS ID
        -----------------------------------------------------------
        ReversalBankAccReconciliation   124552,124553,124554,124555

      Covers Test Cases for WI - 326416
        -----------------------------------------------------------------------------------
        Test Function Name                                                           TFS ID
        -----------------------------------------------------------------------------------
        SuggestBankReconcIncludeCheckTrue, SuggestBankReconcIncludeCheckFalse        122942
    }
    END.
  }
}

