OBJECT Codeunit 144030 Reverse Service Tax Errors
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE
          END;

  }
  CODE
  {
    VAR
      Assert@1170000000 : Codeunit 130000;
      LibraryERM@1500005 : Codeunit 131300;
      LibraryPurchase@1500004 : Codeunit 130512;
      LibraryServiceTax@1500001 : Codeunit 143001;
      LibraryUtility@1500003 : Codeunit 131000;
      LibraryRandom@1500002 : Codeunit 130440;
      ReverseServiceTaxHelper@1500010 : Codeunit 143006;
      ServiceTaxType@1500008 : ' ,Standard,GTA';
      BlankOptionFieldErr@1500014 : TextConst 'ENU=%1 must not be   in %2';
      MustBeEqualToErr@1500026 : TextConst 'ENU=%1 must be equal to ''''  in %2';
      MustBeEqualToSpaceErr@1500028 : TextConst 'ENU=%1 must be equal to '' ''  in %2';
      MustHaveValueErr@1500025 : TextConst 'ENU=%1 must have a value in %2';
      MixedGTAErr@1500011 : TextConst 'ENU=You cannot create a document with service tax that has lines of different service tax types.';
      MixedTaxGroupsErr@1500012 : TextConst 'ENU=You cannot create a document with reverse charge service tax that has lines with different Service Tax Group.';
      MixedServiceTaxRegNoErr@1500013 : TextConst 'ENU=You cannot create a document with reverse charge service tax that has lines with different Service Tax Registration No..';
      PotMismatchErr@1500017 : TextConst 'ENU=You cannot apply a document with PoT to a document without PoT.';
      UnexpectedErrorMessage@1500016 : TextConst 'ENU=Unexpected error message: %1';
      isInitialized@1500007 : Boolean;
      SplitRevChargeAndPOTError@1500020 : TextConst 'ENU=You must set the %1 field to Yes when the service tax reverse charge is different from 100 percent.';
      TypeOfDocument@1500021 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
      ApplyToNonServTaxDocErr@1500000 : TextConst 'ENU=You cannot apply a document with service tax to a document without service tax.';
      ReverseChargeWithPoTErr@1500023 : TextConst 'ENU=Service group %1 is used in one or more of the lines. You must set the %2 field to No when the service tax reverse charge is 100 percent.';
      ApplyToNotServTaxDocErr@1500006 : TextConst 'ENU=You cannot apply a document with service tax to a document without service tax.';
      ConsignmentErr@1500018 : TextConst 'ENU=Consignment Note No. must have a value in';

    [Test]
    PROCEDURE JnlGTAAndBlankConsignmentErr@1500010();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      CreateJournalLine(GenJournalLine,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Service Type (Rev. Chrg.)"::Inward,ServiceTaxType::GTA);
      GenJournalLine.VALIDATE("Consignment Note No.",'');
      GenJournalLine.MODIFY(TRUE);

      // Exercise & Verify:
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);
      VerifyExpectedErrorMessage(ConsignmentErr);
    END;

    [Test]
    PROCEDURE JnlRevChrgAndBlankConsignment@1500020();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      CreateJournalLine(GenJournalLine,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Service Type (Rev. Chrg.)"::Inward,ServiceTaxType::Standard);
      GenJournalLine.VALIDATE("Consignment Note No.",'');
      GenJournalLine.MODIFY(TRUE);

      // Exercise & Verify:
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    [Test]
    PROCEDURE JnlInvBlankSrvTypeErr@1500026();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      CreateJournalLine(GenJournalLine,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Service Type (Rev. Chrg.)"::" ",ServiceTaxType::Standard);

      // Exercise & Verify:
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);
      VerifyExpectedErrorMessage(
        STRSUBSTNO(BlankOptionFieldErr,GenJournalLine.FIELDCAPTION("Service Type (Rev. Chrg.)"),GenJournalLine.TABLENAME))
    END;

    [Test]
    PROCEDURE JnlCrMBlankSrvTypeErr@1500031();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      CreateJournalLine(GenJournalLine,GenJournalLine."Document Type"::"Credit Memo",
        GenJournalLine."Service Type (Rev. Chrg.)"::" ",ServiceTaxType::Standard);

      // Exercise & Verify:
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);
      VerifyExpectedErrorMessage(
        STRSUBSTNO(BlankOptionFieldErr,GenJournalLine.FIELDCAPTION("Service Type (Rev. Chrg.)"),GenJournalLine.TABLENAME))
    END;

    [Test]
    PROCEDURE JnlAdvPmtBlankSrvTypeErr@1500049();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      ReverseServiceTaxHelper.CreateAdvancePayment(GenJournalLine,GenJournalLine."Document Type"::Payment,FALSE,
        GenJournalLine."Service Type (Rev. Chrg.)"::" ",ServiceTaxType::Standard,100);

      // Exercise & Verify:
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);
      VerifyExpectedErrorMessage(
        STRSUBSTNO(BlankOptionFieldErr,GenJournalLine.FIELDCAPTION("Service Type (Rev. Chrg.)"),GenJournalLine.TABLENAME))
    END;

    [Test]
    PROCEDURE JnlInvNotBlankSrvTypeErr@1500024();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      CreateJournalLine(GenJournalLine,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Service Type (Rev. Chrg.)"::Inward,ServiceTaxType::" ");

      // Exercise & Verify:
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);
      VerifyExpectedErrorMessage(
        STRSUBSTNO(MustBeEqualToSpaceErr,GenJournalLine.FIELDCAPTION("Service Type (Rev. Chrg.)"),GenJournalLine.TABLENAME))
    END;

    [Test]
    PROCEDURE JnlAdvPmtNotBlankSrvTypeErr@1500054();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      ReverseServiceTaxHelper.CreateAdvancePayment(GenJournalLine,GenJournalLine."Document Type"::Payment,TRUE,
        GenJournalLine."Service Type (Rev. Chrg.)"::Inward,ServiceTaxType::" ",0);

      // Exercise & Verify:
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);
      VerifyExpectedErrorMessage(
        STRSUBSTNO(MustBeEqualToSpaceErr,GenJournalLine.FIELDCAPTION("Service Type (Rev. Chrg.)"),GenJournalLine.TABLENAME))
    END;

    [Test]
    PROCEDURE InvoiceMixedGTAAndRevChargeErr@1500014();
    VAR
      PurchaseHeader@1500002 : Record 38;
    BEGIN
      Initialize;

      CreateInvoiceMixedSrvTaxRegNo(PurchaseHeader,ServiceTaxType::GTA,ServiceTaxType::Standard);

      // Exercise & Verify:
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
      Assert.ExpectedError(MixedGTAErr);
    END;

    [Test]
    PROCEDURE InvoiceMixedGTAAndPoTErr@1500016();
    VAR
      PurchaseHeader@1500002 : Record 38;
    BEGIN
      Initialize;

      CreateInvoiceMixedSrvTaxRegNo(PurchaseHeader,ServiceTaxType::GTA,ServiceTaxType::" ");

      // Exercise & Verify:
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
      Assert.ExpectedError(MixedGTAErr);
    END;

    [Test]
    PROCEDURE InvoiceMixedRevChargeAndPoTErr@1500001();
    VAR
      PurchaseHeader@1500002 : Record 38;
    BEGIN
      Initialize;

      CreateInvoiceMixedSrvTaxRegNo(PurchaseHeader,ServiceTaxType::" ",ServiceTaxType::Standard);

      // Exercise & Verify:
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
      Assert.ExpectedError(MixedGTAErr);
    END;

    [Test]
    PROCEDURE InvoiveRevChrgMixedSrvTaxGrErr@1500002();
    VAR
      PurchaseHeader@1500002 : Record 38;
    BEGIN
      Initialize;

      CreateInvoiceMixedSrvTaxGroups(PurchaseHeader,ServiceTaxType::Standard);

      // Exercise & Verify:
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
      Assert.ExpectedError(MixedTaxGroupsErr);
    END;

    [Test]
    PROCEDURE InvoiceRevChrgMixedSrvRegNoErr@1500012();
    VAR
      PurchaseHeader@1500002 : Record 38;
    BEGIN
      Initialize;

      CreateInvoiceMixedSrvTaxRegNo(PurchaseHeader,ServiceTaxType::Standard,ServiceTaxType::Standard);

      // Exercise & Verify:
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
      Assert.ExpectedError(MixedServiceTaxRegNoErr);
    END;

    [Test]
    PROCEDURE InvGTAAndBlankConsignmentErr@1500003();
    VAR
      PurchaseHeader@1500002 : Record 38;
    BEGIN
      Initialize;

      CreateBasicInvoice(PurchaseHeader,PurchaseHeader."Service Type (Rev. Chrg.)"::Inward,ServiceTaxType::GTA);
      PurchaseHeader.VALIDATE("Consignment Note No.",'');
      PurchaseHeader.MODIFY(TRUE);

      // Exercise & Verify:
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
      VerifyExpectedErrorMessage(ConsignmentErr);
    END;

    [Test]
    PROCEDURE InvRevChrgAndBlankConsignment@1500013();
    VAR
      PurchaseHeader@1500002 : Record 38;
    BEGIN
      Initialize;

      CreateBasicInvoice(PurchaseHeader,PurchaseHeader."Service Type (Rev. Chrg.)"::Inward,ServiceTaxType::Standard);
      PurchaseHeader.VALIDATE("Consignment Note No.",'');
      PurchaseHeader.MODIFY(TRUE);

      // Exercise & Verify:
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
    END;

    [Test]
    PROCEDURE InvRevChrgBlankSrvTypeErr@1500018();
    VAR
      PurchaseHeader@1500002 : Record 38;
    BEGIN
      Initialize;

      CreateBasicInvoice(PurchaseHeader,PurchaseHeader."Service Type (Rev. Chrg.)"::" ",ServiceTaxType::Standard);

      // Exercise & Verify:
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
      VerifyExpectedErrorMessage(
        STRSUBSTNO(BlankOptionFieldErr,PurchaseHeader.FIELDCAPTION("Service Type (Rev. Chrg.)"),PurchaseHeader.TABLENAME))
    END;

    [Test]
    PROCEDURE AdvPayInvPostPoTMismatch1@1500060();
    BEGIN
      AdvPayInvPostPoTMismatch(FALSE,TRUE,ServiceTaxType::" ");
    END;

    [Test]
    PROCEDURE AdvPayInvPostPoTMismatch2@1500011();
    BEGIN
      AdvPayInvPostPoTMismatch(TRUE,FALSE,ServiceTaxType::" ");
    END;

    [Test]
    PROCEDURE AdvPayInvPostPoTMismatch3@1500037();
    BEGIN
      AdvPayInvPostPoTMismatch(FALSE,TRUE,ServiceTaxType::Standard);
    END;

    [Test]
    PROCEDURE AdvPayInvPostNoStructureNoPoT@1500041();
    BEGIN
      AdvPayInvPostNoStructure(FALSE);
    END;

    [Test]
    PROCEDURE AdvPayInvPostNoStructurePoT@1500039();
    BEGIN
      AdvPayInvPostNoStructure(TRUE);
    END;

    LOCAL PROCEDURE AdvPayInvPostNoStructure@1500023(PoT@1500000 : Boolean);
    VAR
      GenJournalLine@1500001 : Record 81;
      PurchaseHeader@1500021 : Record 38;
      PurchaseLine@1500003 : Record 39;
    BEGIN
      Initialize;

      ReverseServiceTaxHelper.CreateAndPostAdvancePayment(
        GenJournalLine,
        PoT,
        GenJournalLine."Service Type (Rev. Chrg.)"::" ",
        ServiceTaxType::" ",0);

      ReverseServiceTaxHelper.CreateDocAndApplyAdvPayment(
        PurchaseHeader,
        PurchaseLine,
        GenJournalLine,
        GenJournalLine."Document Type"::Invoice,
        ServiceTaxType::" ",0,
        PoT,
        GenJournalLine.Amount);

      PurchaseHeader.VALIDATE(Structure,'');
      PurchaseHeader.VALIDATE(PoT,PoT); // Because PoT is reset when changing Structure
      PurchaseHeader.MODIFY(TRUE);

      ASSERTERROR ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);
      // Renew the record, to avoid the error: "Another user has modified the record [..]"
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      PurchaseHeader.DELETE;
      Assert.ExpectedError(ApplyToNotServTaxDocErr);
    END;

    LOCAL PROCEDURE AdvPayInvPostPoTMismatch@1500005(PaymentPoT@1500005 : Boolean;InvoicePoT@1500006 : Boolean;ServiceTaxType@1500000 : ' ,Standard,GTA');
    VAR
      GenJournalLine@1500001 : Record 81;
      PurchaseHeader@1500021 : Record 38;
      PurchaseLine@1500003 : Record 39;
      ServiceType@1500002 : Option;
    BEGIN
      Initialize;

      ServiceType := ReverseServiceTaxHelper.GetReverseChargeServType(ServiceTaxType);

      // Create and post Advance Payment
      ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLine,PaymentPoT,ServiceType,ServiceTaxType,100);

      // Create a purchase invoice having the same amount
      ReverseServiceTaxHelper.CreateDocAndApplyAdvPayment(PurchaseHeader,PurchaseLine,
        GenJournalLine,GenJournalLine."Document Type"::Invoice,ServiceTaxType,100,InvoicePoT,GenJournalLine.Amount);

      // When posting, throw an error message because the PoT on the purchase doesn't match the PoT on the invoice
      ASSERTERROR ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);
      IF ServiceTaxType <> ServiceTaxType::" " THEN
        Assert.ExpectedError(
          STRSUBSTNO(ReverseChargeWithPoTErr,GenJournalLine."Service Tax Group Code",GenJournalLine.FIELDCAPTION(PoT)))
      ELSE
        Assert.ExpectedError(PotMismatchErr);
    END;

    [Test]
    PROCEDURE PostPaymentWithServiceTaxRegNo@1500056();
    BEGIN
      PostGenJnlWithServTaxRegNo(TypeOfDocument::Payment);
    END;

    [Test]
    PROCEDURE PostRefundWithServiceTaxRegNo@1500069();
    BEGIN
      PostGenJnlWithServTaxRegNo(TypeOfDocument::Refund);
    END;

    [Test]
    PROCEDURE PostAdvPmtWithoutServTaxRegNo@1500077();
    BEGIN
      PostAdvDocWithoutServTaxRegNo(TypeOfDocument::Payment);
    END;

    [Test]
    PROCEDURE PostAdvRefWithoutServTaxRegNo@1500075();
    BEGIN
      PostAdvDocWithoutServTaxRegNo(TypeOfDocument::Refund);
    END;

    [Test]
    PROCEDURE PostPaymentWithECCNo@1500053();
    VAR
      GenJournalLine@1500002 : Record 81;
    BEGIN
      // Setup
      CreateGeneralJournal(GenJournalLine,GenJournalLine."Document Type"::Payment);

      // Exercise
      GenJournalLine.VALIDATE("E.C.C. No.",CreateECCNo);
      GenJournalLine.MODIFY(TRUE);

      // Setting an "E.C.C. No." trigers to pay the Excise Tax from the PLA account. Excise Tax payment is out scope of verification here,
      // so the alternate verification is to post a payment without Errors when only E.C.C. No. is selected.
      ReverseServiceTaxHelper.RunGenJnlPostLine(GenJournalLine);
    END;

    [Test]
    PROCEDURE PostPmtWithSrvTaxSetupAndECCNo@1500015();
    VAR
      GenJournalLine@1500001 : Record 81;
      ServiceTaxGroup@1500000 : Record 16471;
    BEGIN
      // Setup
      CreateGeneralJournal(GenJournalLine,GenJournalLine."Document Type"::Payment);

      // Exercise
      GenJournalLine.VALIDATE("E.C.C. No.",CreateECCNo);
      GenJournalLine.VALIDATE("Service Tax Registration No.",ReverseServiceTaxHelper.CreateServTaxRegNo);
      LibraryServiceTax.CreateServiceTaxGroup(ServiceTaxGroup);
      GenJournalLine.VALIDATE("Service Tax Group Code",ServiceTaxGroup.Code);
      GenJournalLine.MODIFY(TRUE);

      // Setting an "E.C.C. No." trigers to pay the Excise Tax from the PLA account.
      // Setting "Service Tax Registration No." and "Service Tax Group Code" allows to take Service Tax Credit in Excise Tax payment.
      // Excise Tax payment is out scope of verification here,
      // so the alternate verification is to post a payment without Errors when "E.C.C. No." and Service Tax Setup is selected.
      ReverseServiceTaxHelper.RunGenJnlPostLine(GenJournalLine);
    END;

    [Test]
    PROCEDURE PostPaymentWithServTaxGrpCode@1500025();
    BEGIN
      PostGenJnlWithServTaxGroupCode(TypeOfDocument::Payment);
    END;

    [Test]
    PROCEDURE PostRefundWithServTaxGrpCode@1500058();
    BEGIN
      PostGenJnlWithServTaxGroupCode(TypeOfDocument::Refund);
    END;

    [Test]
    PROCEDURE PostAdvPmtNoServTaxGroupCode@1500033();
    BEGIN
      PostAdvDocWithoutSrvTaxGrpCode(TypeOfDocument::Payment);
    END;

    [Test]
    PROCEDURE PostAdvRefNoServTaxGroupCode@1500068();
    BEGIN
      PostAdvDocWithoutSrvTaxGrpCode(TypeOfDocument::Refund);
    END;

    [Test]
    PROCEDURE SplitInvoiceNonPoT@1500017();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      PostDocNonPot(PurchaseHeader."Document Type"::Invoice,ServiceTaxType::Standard);
    END;

    [Test]
    PROCEDURE SplitOrderNonPoT@1500008();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      PostDocNonPot(PurchaseHeader."Document Type"::Order,ServiceTaxType::Standard);
    END;

    [Test]
    PROCEDURE SplitInvoiceJnlNonPoT@1500019();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      PostDocFromJournal(GenJournalLine,GenJournalLine."Document Type"::Invoice,ServiceTaxType::Standard);
    END;

    [Test]
    PROCEDURE SplitAdvPaymentJnlNonPoT@1500006();
    VAR
      GenJournalLine@1500000 : Record 81;
      ServiceType@1500001 : Option;
    BEGIN
      // Setup
      Initialize;

      // Exercise
      ServiceType := ReverseServiceTaxHelper.GetReverseChargeServType(ServiceTaxType::Standard);
      ASSERTERROR
        ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLine,FALSE,ServiceType,ServiceTaxType::Standard,60);
      Assert.ExpectedError(STRSUBSTNO(SplitRevChargeAndPOTError,GenJournalLine.FIELDCAPTION(PoT)));
    END;

    [Test]
    PROCEDURE SplitAdvRefundJnlNonPoT@1500004();
    VAR
      GenJournalLine@1500000 : Record 81;
      ServiceType@1500001 : Option;
    BEGIN
      // Setup
      Initialize;

      // Exercise
      ServiceType := ReverseServiceTaxHelper.GetReverseChargeServType(ServiceTaxType::Standard);
      ReverseServiceTaxHelper.CreateAdvancePayment(GenJournalLine,GenJournalLine."Document Type"::Refund,
        FALSE,ServiceType,ServiceTaxType::Standard,60);
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);
      Assert.ExpectedError(STRSUBSTNO(SplitRevChargeAndPOTError,GenJournalLine.FIELDCAPTION(PoT)));
    END;

    [Test]
    PROCEDURE ApplyNormalRefundToAdvPmtErr@1500007();
    VAR
      GenJournalLine@1500000 : Record 81;
      RefundGenJournalLine@1500001 : Record 81;
    BEGIN
      ReverseServiceTaxHelper.CreateAdvancePayment(GenJournalLine,GenJournalLine."Document Type"::Payment,FALSE,
        GenJournalLine."Service Type (Rev. Chrg.)"::" ",ServiceTaxType::" ",0);
      RefundGenJournalLine := GenJournalLine;
      ReverseServiceTaxHelper.RunGenJnlPostLine(GenJournalLine);

      ConvertPaymentToRefund(RefundGenJournalLine);
      ConvertAdvPmtToNormalPmt(RefundGenJournalLine);

      ASSERTERROR ReverseServiceTaxHelper.RunGenJnlPostLine(RefundGenJournalLine);
      Assert.ExpectedError(ApplyToNonServTaxDocErr);
    END;

    [Test]
    PROCEDURE ApplyAdvRefundToNormalPmtErr@1500009();
    VAR
      GenJournalLine@1500000 : Record 81;
      RefundGenJournalLine@1500001 : Record 81;
    BEGIN
      ReverseServiceTaxHelper.CreateAdvancePayment(GenJournalLine,GenJournalLine."Document Type"::Payment,FALSE,
        GenJournalLine."Service Type (Rev. Chrg.)"::" ",ServiceTaxType::" ",0);
      RefundGenJournalLine := GenJournalLine;
      ConvertAdvPmtToNormalPmt(GenJournalLine);
      ReverseServiceTaxHelper.RunGenJnlPostLine(GenJournalLine);

      ConvertPaymentToRefund(RefundGenJournalLine);

      ASSERTERROR ReverseServiceTaxHelper.RunGenJnlPostLine(RefundGenJournalLine);
      Assert.ExpectedError(ApplyToNonServTaxDocErr);
    END;

    LOCAL PROCEDURE ConvertPaymentToRefund@1500042(VAR GenJournalLine@1500000 : Record 81);
    BEGIN
      GenJournalLine."Line No." += 10000;
      GenJournalLine."Applies-to Doc. Type" := GenJournalLine."Document Type"::Payment;
      GenJournalLine."Applies-to Doc. No." := GenJournalLine."Document No.";
      GenJournalLine.VALIDATE("Document Type",GenJournalLine."Document Type"::Refund);
      GenJournalLine."Document No." := 'R' + GenJournalLine."Document No.";
      GenJournalLine.VALIDATE(Amount,-GenJournalLine.Amount);
    END;

    LOCAL PROCEDURE ConvertAdvPmtToNormalPmt@1500050(VAR GenJournalLine@1500000 : Record 81);
    BEGIN
      GenJournalLine.VALIDATE("Serv. Tax on Advance Payment",FALSE);
      GenJournalLine.VALIDATE("Service Tax Registration No.",'');
      GenJournalLine.VALIDATE("Service Tax Group Code",'');
    END;

    LOCAL PROCEDURE Initialize@1500000();
    BEGIN
      LibraryRandom.SetSeed(1);

      IF isInitialized THEN
        EXIT;

      LibraryServiceTax.CreateServiceTaxReturnPeriod;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      COMMIT;

      isInitialized := TRUE;
    END;

    LOCAL PROCEDURE CreateJournalLine@1500022(VAR GenJournalLine@1500000 : Record 81;DocumentType@1500008 : Option;ReverseChargeServiceType@1500007 : Option;ReverseChargeType@1500001 : Option);
    VAR
      GenJournalBatch@1500004 : Record 232;
    BEGIN
      ReverseServiceTaxHelper.CreateGenJournalBatch(GenJournalBatch);
      ReverseServiceTaxHelper.CreateJnlLineWithServiceTax(GenJournalLine,GenJournalBatch,
        DocumentType,ReverseChargeServiceType,ReverseChargeType,100);
    END;

    LOCAL PROCEDURE CreateInvoiceMixedSrvTaxGroups@1500035(VAR PurchaseHeader@1500001 : Record 38;ReverseChargeType@1500000 : Option);
    VAR
      ServiceTaxGroup1@1500002 : Record 16471;
      ServiceTaxGroup2@1500003 : Record 16471;
      ServiceTaxRegNo@1500004 : Record 16475;
    BEGIN
      ReverseServiceTaxHelper.CreateServiceTaxGroupSetup(ServiceTaxGroup1);
      ReverseServiceTaxHelper.CreateServiceTaxGroupSetup(ServiceTaxGroup2);
      LibraryServiceTax.CreateServiceTaxRegistrationNo(ServiceTaxRegNo);

      CreateInvoiceWithMixedLines(PurchaseHeader,ReverseChargeType,ReverseChargeType,
        ServiceTaxGroup1.Code,ServiceTaxGroup2.Code,ServiceTaxRegNo.Code,ServiceTaxRegNo.Code);
    END;

    LOCAL PROCEDURE CreateInvoiceMixedSrvTaxRegNo@1500036(VAR PurchaseHeader@1500001 : Record 38;ReverseChargeType1@1500000 : Option;ReverseChargeType2@1500003 : Option);
    VAR
      ServiceTaxGroup@1500002 : Record 16471;
      ServiceTaxRegNo1@1500004 : Record 16475;
      ServiceTaxRegNo2@1500005 : Record 16475;
    BEGIN
      ReverseServiceTaxHelper.CreateServiceTaxGroupSetup(ServiceTaxGroup);
      LibraryServiceTax.CreateServiceTaxRegistrationNo(ServiceTaxRegNo1);
      LibraryServiceTax.CreateServiceTaxRegistrationNo(ServiceTaxRegNo2);

      CreateInvoiceWithMixedLines(PurchaseHeader,ReverseChargeType1,ReverseChargeType2,
        ServiceTaxGroup.Code,ServiceTaxGroup.Code,ServiceTaxRegNo1.Code,ServiceTaxRegNo2.Code);
    END;

    LOCAL PROCEDURE CreateInvoiceWithMixedLines@1500032(VAR PurchaseHeader@1500006 : Record 38;ReverseChargeType1@1500005 : Option;ReverseChargeType2@1500004 : Option;ServiceTaxGroup1@1500003 : Code[10];ServiceTaxGroup2@1500002 : Code[10];ServiceTaxRegNo1@1500001 : Code[10];ServiceTaxRegNo2@1500000 : Code[10]);
    VAR
      PurchaseLine@1500008 : Record 39;
    BEGIN
      ReverseServiceTaxHelper.CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,
        PurchaseHeader."Service Type (Rev. Chrg.)"::Inward,FALSE);

      ReverseServiceTaxHelper.CreatePurchaseLine(PurchaseLine,PurchaseHeader,ServiceTaxGroup1,ServiceTaxRegNo1,ReverseChargeType1,100);
      ReverseServiceTaxHelper.CreatePurchaseLine(PurchaseLine,PurchaseHeader,ServiceTaxGroup2,ServiceTaxRegNo2,ReverseChargeType2,100);
    END;

    LOCAL PROCEDURE CreateBasicInvoice@1500043(VAR PurchaseHeader@1500000 : Record 38;GTAServiceType@1500001 : Option;ReverseChargeType@1500002 : Option);
    VAR
      CompanyInfo@1500003 : Record 79;
      PurchaseLine@1500004 : Record 39;
      ServiceTaxGroup@1500005 : Record 16471;
    BEGIN
      CompanyInfo.GET;
      ReverseServiceTaxHelper.CreateServiceTaxGroupSetup(ServiceTaxGroup);
      ReverseServiceTaxHelper.CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,GTAServiceType,FALSE);
      ReverseServiceTaxHelper.CreatePurchaseLine(PurchaseLine,PurchaseHeader,
        ServiceTaxGroup.Code,CompanyInfo."Service Tax Registration No.",ReverseChargeType,100);
    END;

    LOCAL PROCEDURE PostAdvDocWithoutServTaxRegNo@1500047(DocumentType@1500003 : Option);
    VAR
      GenJournalLine@1500002 : Record 81;
    BEGIN
      CreateGeneralJournal(GenJournalLine,DocumentType);
      GenJournalLine.VALIDATE("Serv. Tax on Advance Payment",TRUE);
      GenJournalLine.MODIFY(TRUE);

      ASSERTERROR ReverseServiceTaxHelper.RunGenJnlPostLine(GenJournalLine);
      Assert.ExpectedError(STRSUBSTNO(MustHaveValueErr,
          GenJournalLine.FIELDCAPTION("Service Tax Registration No."),
          GenJournalLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE PostGenJnlWithServTaxRegNo@1500065(DocumentType@1500003 : Option);
    VAR
      GenJournalLine@1500002 : Record 81;
    BEGIN
      CreateGeneralJournal(GenJournalLine,DocumentType);
      GenJournalLine.VALIDATE("Service Tax Registration No.",ReverseServiceTaxHelper.CreateServTaxRegNo);
      GenJournalLine.MODIFY(TRUE);

      ASSERTERROR ReverseServiceTaxHelper.RunGenJnlPostLine(GenJournalLine);
      Assert.ExpectedError(STRSUBSTNO(MustBeEqualToErr,
          GenJournalLine.FIELDCAPTION("Service Tax Registration No."),
          GenJournalLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE PostAdvDocWithoutSrvTaxGrpCode@1500046(DocumentType@1500003 : Option);
    VAR
      GenJournalLine@1500002 : Record 81;
    BEGIN
      CreateGeneralJournal(GenJournalLine,DocumentType);
      GenJournalLine.VALIDATE("Serv. Tax on Advance Payment",TRUE);
      GenJournalLine.VALIDATE("Service Tax Registration No.",ReverseServiceTaxHelper.CreateServTaxRegNo);
      GenJournalLine.MODIFY(TRUE);

      ASSERTERROR ReverseServiceTaxHelper.RunGenJnlPostLine(GenJournalLine);
      Assert.ExpectedError(STRSUBSTNO(MustHaveValueErr,
          GenJournalLine.FIELDCAPTION("Service Tax Group Code"),
          GenJournalLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE PostGenJnlWithServTaxGroupCode@1500061(DocumentTyp@1500000 : Option);
    VAR
      GenJournalLine@1500002 : Record 81;
      ServiceTaxGroup@1500001 : Record 16471;
    BEGIN
      CreateGeneralJournal(GenJournalLine,GenJournalLine."Document Type"::Refund);
      GenJournalLine.VALIDATE("Service Tax Registration No.",'');
      LibraryServiceTax.CreateServiceTaxGroup(ServiceTaxGroup);
      GenJournalLine.VALIDATE("Service Tax Group Code",ServiceTaxGroup.Code);
      GenJournalLine.MODIFY(TRUE);

      ASSERTERROR ReverseServiceTaxHelper.RunGenJnlPostLine(GenJournalLine);
      Assert.ExpectedError(STRSUBSTNO(MustBeEqualToErr,
          GenJournalLine.FIELDCAPTION("Service Tax Group Code"),
          GenJournalLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE PostDocNonPot@1500027(DocumentType@1500000 : Option;ReverseChargeType@1500001 : Option);
    VAR
      PurchaseHeader@1500009 : Record 38;
      PurchaseLine@1500008 : Record 39;
    BEGIN
      Initialize;

      // Post Purchase Invoice
      ReverseServiceTaxHelper.CreatePurchaseDoc(PurchaseHeader,PurchaseLine,DocumentType,ReverseChargeType,
        LibraryRandom.RandInt(99),FALSE);
      ASSERTERROR ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);
      Assert.ExpectedError(STRSUBSTNO(SplitRevChargeAndPOTError,PurchaseHeader.FIELDCAPTION(PoT)));
    END;

    LOCAL PROCEDURE PostDocFromJournal@1500021(VAR GenJournalLine@1500005 : Record 81;DocumentType@1500004 : Option;ReverseChargeType@1500003 : Option);
    VAR
      GenJournalBatch@1500000 : Record 232;
    BEGIN
      Initialize;

      ReverseServiceTaxHelper.CreateGenJournalBatch(GenJournalBatch);
      ReverseServiceTaxHelper.CreateJnlLineWithServiceTax(GenJournalLine,GenJournalBatch,DocumentType,
        ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeType),ReverseChargeType,
        LibraryRandom.RandInt(99));
      GenJournalLine.VALIDATE(PoT,FALSE);
      GenJournalLine.MODIFY(TRUE);
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);
      Assert.ExpectedError(STRSUBSTNO(SplitRevChargeAndPOTError,GenJournalLine.FIELDCAPTION(PoT)));
    END;

    LOCAL PROCEDURE VerifyExpectedErrorMessage@1500045(ExpectedErrorMessage@1500000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ExpectedErrorMessage) > 0,STRSUBSTNO(UnexpectedErrorMessage,GETLASTERRORTEXT));
      CLEARLASTERROR;
    END;

    LOCAL PROCEDURE CreateGeneralJournal@1500028(VAR GenJournalLine@1500000 : Record 81;DocumentType@1500003 : Option);
    BEGIN
      ReverseServiceTaxHelper.CreatePayment(GenJournalLine,ReverseServiceTaxHelper.CreateVendor,
        ReverseServiceTaxHelper.GetAmountSignInJournalLine(DocumentType) * LibraryRandom.RandDec(10000,2),
        WORKDATE,DocumentType);
    END;

    LOCAL PROCEDURE CreateECCNo@1500040() : Code[20];
    VAR
      ECCNosRec@1500000 : Record 13708;
    BEGIN
      WITH ECCNosRec DO BEGIN
        INIT;
        VALIDATE(Code,LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::"E.C.C. Nos."));
        VALIDATE(Description,Code);
        VALIDATE("Type of Unit","Type of Unit"::" ");
        INSERT(TRUE)
      END;
      EXIT(ECCNosRec.Code);
    END;

    BEGIN
    END.
  }
}

