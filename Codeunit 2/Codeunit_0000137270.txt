OBJECT Codeunit 137270 SCM Reservation III
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1023 : Codeunit 131300;
      LibraryInventory@1003 : Codeunit 132201;
      LibraryItemTracking@1010 : Codeunit 130502;
      LibraryPurchase@1002 : Codeunit 130512;
      LibraryPlanning@1020 : Codeunit 132203;
      LibrarySales@1011 : Codeunit 130509;
      LibraryUtility@1006 : Codeunit 131000;
      LibraryVariableStorage@1012 : Codeunit 131004;
      LibraryWarehouse@1024 : Codeunit 132204;
      LibraryPatterns@1026 : Codeunit 132212;
      LibraryRandom@1000 : Codeunit 130440;
      Assert@1005 : Codeunit 130000;
      ItemTrackingLinesControl@1029 : 'CallingFromPO,CallingFromTO';
      isInitialized@1001 : Boolean;
      AvailabilityError@1007 : TextConst 'ENU=There is nothing available to reserve.';
      BinCodeError@1004 : TextConst 'ENU=Bin Code must have a value in Warehouse Activity Line';
      BinContentError@1015 : TextConst 'ENU=The field Bin Code of table Warehouse Activity Line contains a value';
      LocationCodeError@1017 : TextConst 'ENU=You are not allowed to use location code %1.';
      NothingToPostError@1019 : TextConst 'ENU=There is nothing to post.';
      OrderTrackingMessage@1021 : TextConst 'ENU=There are no order tracking entries for this line.';
      PickActivityMessage@1016 : TextConst 'ENU=Pick activity no. %1 has been created.';
      PlaceBinCodeError@1013 : TextConst 'ENU=The Place bin code must be different from the Take bin code on location';
      PutAwayActivityMessage@1018 : TextConst 'ENU=Put-away activity no. %1 has been created.';
      SourceDocumentError@1039 : TextConst 'ENU=The Source Document is not defined.';
      WhseRequestError@1014 : TextConst 'ENU=The Warehouse Request does not exist.';
      QuantityHandledError@1022 : TextConst 'ENU=''Quantity Handled (Base) must be equal to ''0''  in Tracking Specification';
      CurrencyCodeMessage@1025 : TextConst 'ENU=the existing sales lines will be deleted and new sales lines based on the new information on the header will be created.';
      LotNoTC324960Tok@1027 : TextConst '@@@={Locked};ENU=L1';
      AvailabilityWarningsMsg@1032 : TextConst 'ENU=There are availability warnings on one or more lines';
      AvailabilityWarningsQst@1034 : TextConst 'ENU=There are availability warnings on one or more lines?';
      InvalidControlErr@1030 : TextConst 'ENU=This is not a valid control option for the Item Tracking Lines handler.';

    [Test]
    [HandlerFunctions(ConfirmHandler,ItemTrackingLinesModalPageHandler)]
    PROCEDURE VerifyQtyOnWhsePickWithItemTracking@37();
    VAR
      Item@1000 : Record 27;
      PurchHeader@1006 : Record 38;
      PurchLine1@1007 : Record 39;
      PurchLine2@1008 : Record 39;
      PurchLine3@1009 : Record 39;
      WhseReceiptHeader@1010 : Record 7316;
      TransferHeader@1013 : Record 5740;
      TransferLine@1014 : Record 5741;
      WhseActivityLine@1019 : Record 5767;
      BaseUOMCode@1001 : Code[10];
      AltUOMCode1@1002 : Code[10];
      AltUOMCode2@1003 : Code[10];
      VendorNo@1012 : Code[20];
      SimpleLocationCode@1011 : Code[10];
      InTransitLocationCode@1005 : Code[10];
      FullWMSLocationCode@1004 : Code[10];
    BEGIN
      // RFH 324960
      Initialize;

      // Setup
      SetupVendorAndLocations(SimpleLocationCode,InTransitLocationCode,FullWMSLocationCode,VendorNo);

      // Create an item with three UOMs (Base UOM: x, Alt. UOM 1 = 10.8x, Alt. UOM2 = 0.45x) and enable lot whse tracking on it
      CreateItemWithAdditionalUOMs(Item,BaseUOMCode,AltUOMCode1,10.8,AltUOMCode2,0.45);
      Item.VALIDATE(Reserve,Item.Reserve::Always);
      Item.MODIFY(TRUE);
      EnableLotWhseTrackingOnItem(Item."No.");

      // Purchase the item using the alternative UOMs
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Order,VendorNo);
      CreatePurchaseLineUsingUOM(PurchLine1,PurchHeader,FullWMSLocationCode,Item."No.",AltUOMCode2,4);
      CreatePurchaseLineUsingUOM(PurchLine2,PurchHeader,FullWMSLocationCode,Item."No.",AltUOMCode2,4);
      CreatePurchaseLineUsingUOM(PurchLine3,PurchHeader,FullWMSLocationCode,Item."No.",AltUOMCode1,10);

      // For each line, open Item Tracking Lines and assign same Lot No. 'L1'
      AssignLotNoOnPurchaseLine(PurchLine1);
      AssignLotNoOnPurchaseLine(PurchLine2);
      AssignLotNoOnPurchaseLine(PurchLine3);

      // Release Purch. Order, create Warehouse Receipt, post as received and register Whse Put-Away
      LibraryPurchase.ReleasePurchaseDocument(PurchHeader);
      CreateWhseReceipt(PurchHeader);
      PostWhseReceipt(WhseReceiptHeader,FullWMSLocationCode);
      RegisterWhsePutAway(PurchHeader."No.");

      // Create Transfer Order from Full WMS location to simplest location
      PrepareTransferOrder(TransferHeader,TransferLine,FullWMSLocationCode,SimpleLocationCode,
        InTransitLocationCode,Item."No.",10,AltUOMCode1);

      // Exercise: Open Item Tracking Lines and assign lot no's using greater quantities each time
      // The quantities are chosen to create a rounding issue with the alternative UOM (3.3333)
      AssignLotNoOnTransferLine(TransferLine,36);
      AssignLotNoOnTransferLine(TransferLine,72);
      AssignLotNoOnTransferLine(TransferLine,108);

      // Release Transfer Order and create Warehouse Shipment.
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
      CreateWhseShipmentFromTO(TransferHeader);

      // Create Warehouse Pick using Warehouse Shipment
      CreateWhsePick(FullWMSLocationCode);

      // Verify: originally, there was a rounding issue:
      // Qty was 9.99999 instead of 10
      // Qty (base) was 107.99999 instead of 108
      WhseActivityLine.SETRANGE("Item No.",Item."No.");
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::Pick);
      WhseActivityLine.FINDSET;
      REPEAT
        Assert.AreEqual(108,WhseActivityLine."Qty. (Base)",'Quantity (Base UOM) value in Pick line does not match expectations');
        Assert.AreEqual(10,WhseActivityLine.Quantity,
          'Quantity (alternative UOM) value in Pick line does not match expectations')
      UNTIL WhseActivityLine.NEXT = 0
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,ItemTrackingSummaryPageHandler,ItemTrackingListPageHandler,ConfirmHandler,ReservationFromCurrentLineHandler)]
    PROCEDURE WhseShptWithITAndReserv@133();
    VAR
      SalesLine@1007 : Record 37;
    BEGIN
      // Verify Warehouse Shipment using Reservation and Item Tracking.

      // Setup: Create Sales Order using Item Tracking and Reservation.
      Initialize;
      CreateAndReserveSalesOrder(SalesLine);

      // Exercise:
      CreateWarehouseShipment(SalesLine."Document No.");

      // Verify: Verify Warehouse Shipment Line before Posting Warehouse Shipment.
      VerifyWarehouseShipmentLine(SalesLine."No.",SalesLine."Document No.",SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,ItemTrackingSummaryPageHandler,ConfirmHandler,ItemTrackingListPageHandler,ReservationFromCurrentLineHandler)]
    PROCEDURE PickActivityUsingSalesOrderWithReservAndIT@153();
    VAR
      SalesLine@1007 : Record 37;
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      // Verify Pick Activity Line using Sales Order and Item Journal Line with Item Tracking.

      // Setup: Create Sales Order using Item Tracking and Reservation.
      Initialize;
      CreateAndReserveSalesOrder(SalesLine);

      // Exercise: Create Pick.
      CreatePick(SalesLine."Location Code",SalesLine."Document No.");

      // Verify: Verify Warehouse Activity Line.
      VerifyWhseActivityLine(
        WarehouseActivityLine."Activity Type"::Pick,SalesLine."Document No.",SalesLine."No.",SalesLine."Location Code",
        SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemChargeAssignmentSalesPageHandler,SalesShipmentLinePageHandler)]
    PROCEDURE SalesOrderPostWithItemChrgAssgnt@192();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      SalesInvoiceLine@1006 : Record 113;
      DocumentNo@1005 : Code[20];
      ItemChargeAssignmentOption@1003 : 'AssignmentOnly,GetShipmentLine';
    BEGIN
      // Verify Sales Invoice Line for Item Charge using Sales Order with Item Charge Assignment.

      // Setup: Create Sales Order with Item Charge and Assignment Item Charge.
      CreateSalesOrderAndAssignItemCharge(SalesLine);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesLine."Document No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      LibrarySales.ReopenSalesDocument(SalesHeader);
      DeleteSalesLine(SalesLine."Document No.");
      LibraryVariableStorage.Enqueue(ItemChargeAssignmentOption::GetShipmentLine);  // Enqueue value for ItemChargeAssignmentSalesPageHandler.
      SalesLine.ShowItemChargeAssgnt;

      // Exercise.
      DocumentNo := PostSalesOrder(SalesLine."Document Type",SalesLine."Document No.");

      // Verify: Verify Posted Invoice for Charge Item.
      SalesInvoiceLine.SETRANGE("Document No.",DocumentNo);
      SalesInvoiceLine.SETRANGE(Type,SalesInvoiceLine.Type::"Charge (Item)");
      SalesInvoiceLine.FINDFIRST;
      SalesInvoiceLine.TESTFIELD("No.",SalesInvoiceLine."No.");
      SalesInvoiceLine.TESTFIELD(Quantity,SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,ItemTrackingSummaryPageHandler,ConfirmHandler,ItemTrackingListPageHandler,ReservationFromCurrentLineHandler)]
    PROCEDURE PickWkshUsingSalesOrderWithReserv@90();
    VAR
      PurchaseLine@1003 : Record 39;
      WhseWorksheetLine@1012 : Record 7326;
    BEGIN
      // Verify Warehouse Worksheet Line using Purchase and Sales Order with Reservation and Item Tracking.

      // Setup.
      Initialize;

      // Exercise: Create Location, Purchase and Sales Order with Item Tracking, Create and Register Warehouse Activity.
      RegisterWhseActivityAndCreateWkshLine(PurchaseLine);

      // Verify: Verify Warehouse Worksheet Line.
      FindWhseWkshLine(WhseWorksheetLine,PurchaseLine."No.",PurchaseLine."Location Code");
      WhseWorksheetLine.TESTFIELD("Qty. to Handle",PurchaseLine.Quantity);
      WhseWorksheetLine.TESTFIELD("Qty. Outstanding",PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,ItemTrackingSummaryPageHandler,ConfirmHandler,ItemTrackingListPageHandler,ReservationFromCurrentLineHandler)]
    PROCEDURE ErrorWithPickWkshUsingCreatePick@197();
    VAR
      PurchaseLine@1003 : Record 39;
      WhseWorksheetLine@1012 : Record 7326;
    BEGIN
      // Verify Create Pick from Worksheet error.

      // Setup: Create Location, Purchase and Sales Order with Item Tracking, Create and Register Warehouse Activity.
      Initialize;
      RegisterWhseActivityAndCreateWkshLine(PurchaseLine);

      // Exercise: Create Worksheet Line.
      FindWhseWkshLine(WhseWorksheetLine,PurchaseLine."No.",PurchaseLine."Location Code");
      ASSERTERROR LibraryWarehouse.CreatePickFromPickWorksheet(
          WhseWorksheetLine,WhseWorksheetLine."Line No.",WhseWorksheetLine."Worksheet Template Name",WhseWorksheetLine.Name,
          PurchaseLine."Location Code",'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);

      // Verify: Verify Create Pick from Worksheet error.
      Assert.ExpectedError(SourceDocumentError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingListPageHandler,EnterQuantitytoCreatePageHandler,AvailConfirmHandler,ReservationFromCurrentLineHandler)]
    PROCEDURE AvailabilityErrorUsingSalesOrderReserv@120();
    VAR
      Location@1000 : Record 14;
      SalesLine@1007 : Record 37;
      TrackingOption@1001 : 'AssignSerialNo,SelectEntries';
    BEGIN
      // Verify Availability error with Sales Order Reservation.

      // Setup: Create Sales Order with Item Tracking.
      Initialize;
      CreateWarehouseLocation(Location);
      CreateSalesDocument(
        SalesLine,SalesLine.Type::Item,CreateAndModifyTrackedItem(FALSE,FALSE,TRUE),Location.Code,LibraryRandom.RandInt(10));
      UpdateSalesLineUnitPrice(SalesLine,LibraryRandom.RandDec(10,2));  // Using Random value for Unit Price.
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      SalesLine.OpenItemTrackingLines;

      // Exercise.
      ASSERTERROR SalesLine.ShowReservation;

      // Verify: Verify Availability error with Sales Order Reservation.
      Assert.ExpectedError(AvailabilityError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,ItemTrackingSummaryPageHandler,ConfirmHandler,ItemTrackingListPageHandler,ReservationFromCurrentLineHandler)]
    PROCEDURE ErrorWithRegisterPickUsingBlankBin@173();
    VAR
      SalesLine@1007 : Record 37;
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      // Verify error while Registering Pick without Bin Code.

      // Setup: Create Item Journal Line with Item Tracking Code, Create and Release a Sales Order with Item Tracking and Reservation.
      Initialize;
      CreateAndReserveSalesOrder(SalesLine);
      CreatePick(SalesLine."Location Code",SalesLine."Document No.");

      // Exercise: Register Pick without Bin Code.
      ASSERTERROR RegisterWarehouseActivity(SalesLine."Document No.",WarehouseActivityHeader.Type::Pick,SalesLine."Location Code");

      // Verify: Verify error while Registering Pick without Bin Code.
      Assert.ExpectedError(BinCodeError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,ItemTrackingSummaryPageHandler,ConfirmHandler,ItemTrackingListPageHandler,ReservationFromCurrentLineHandler)]
    PROCEDURE BinCodeErrorUsingCreatePick@69();
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      // Verify error while validation blank Bin Code on Warehouse Activity Line with Action Type 'Place'.

      // Setup: Create Item Journal Line with Item Tracking Code, Create and Release a Sales Order with Item Tracking.
      Initialize;
      ErrorUsingCreatePick(WarehouseActivityLine."Action Type"::Place,'',PlaceBinCodeError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,ItemTrackingSummaryPageHandler,ConfirmHandler,ItemTrackingListPageHandler,ReservationFromCurrentLineHandler)]
    PROCEDURE BinContentErrorUsingWhseActivityLine@182();
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      // Verify error while validation Bin Code on Warehouse Activity Line with Action Type 'Take'.

      // Setup: Create Item Journal Line with Item Tracking Code, Create and Release a Sales Order with Item Tracking.
      Initialize;
      ErrorUsingCreatePick(WarehouseActivityLine."Action Type"::Take,LibraryUtility.GenerateGUID,BinContentError);
    END;

    LOCAL PROCEDURE ErrorUsingCreatePick@35(ActionType@1000 : Option;BinCode@1002 : Code[20];ExpectedError@1003 : Text[1024]);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      // Create Item Journal Line with Item Tracking Code, Create and Release a Sales Order with Item Tracking.
      CreateAndFindWhseActivityLine(WarehouseActivityLine,ActionType);

      // Exercise: Modify Pick Bin Code.
      ASSERTERROR WarehouseActivityLine.VALIDATE("Bin Code",BinCode);

      // Verify: Verify error while modifying Bin Code on created Pick for Action Type 'Place'.
      Assert.ExpectedError(ExpectedError);
    END;

    [Test]
    PROCEDURE ErrorWithCreateInvtPutAwayPickUsingSalesOrder@79();
    VAR
      Location@1000 : Record 14;
      SalesLine@1007 : Record 37;
      WarehouseRequest@1002 : Record 5765;
    BEGIN
      // Verify Warehouse Request error using Sales Order while creating Inventory Put Away Pick.

      // Setup: Create Sales Order with Item Tracking.
      Initialize;
      CreateWarehouseLocation(Location);
      CreateSalesDocument(SalesLine,SalesLine.Type::Item,CreateItem,Location.Code,LibraryRandom.RandInt(10));

      // Exercise.
      ASSERTERROR LibraryWarehouse.CreateInvtPutAwayPick(WarehouseRequest,TRUE,TRUE,FALSE);

      // Verify: Verify Availability error with Sales Order Reservation.
      Assert.ExpectedError(WhseRequestError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerForItemNo,AvailConfirmHandler)]
    PROCEDURE ItemOnEnterQuantityToCreatePage@147();
    VAR
      Location@1000 : Record 14;
      SalesLine@1004 : Record 37;
      TrackingOption@1001 : 'AssignSerialNo,SelectEntries';
    BEGIN
      // Verify Item No. On Enter Quantity to Create page.

      // Setup: Create Sales Order and assign Item Tracking.
      Initialize;
      CreateWarehouseLocation(Location);
      CreateSalesDocument(
        SalesLine,SalesLine.Type::Item,CreateAndModifyTrackedItem(FALSE,FALSE,TRUE),Location.Code,LibraryRandom.RandInt(10));
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(SalesLine."No.");  // Enqueue value for EnterQuantityToCreatePageHandlerForItemNo.

      // Exercise.
      SalesLine.OpenItemTrackingLines;

      // Verify: Verify Item No. On Enter Quantity to Create page, verification done in 'EnterQuantityToCreatePageHandlerForItemNo' page handler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,ItemTrackingSummaryPageHandler,ItemTrackingListPageHandler,MessageHandler,ReservationFromCurrentLineHandler,ConfirmHandler,PickSelectionPageHandler,CreatePickPageHandler)]
    PROCEDURE CreatePickFromPickWkshUsingIT@75();
    VAR
      PurchaseLine@1004 : Record 39;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseSetup@1000 : Record 5769;
      NoSeriesManagement@1006 : Codeunit 396;
      DocumentNo@1005 : Code[20];
      PickNo@1002 : Code[20];
    BEGIN
      // Verify Pick Lines created after Get Warehouse Documents.

      // Setup: Create and post Warehouse Receipt, create Warehouse Shipment and create Pick from Pick Worksheet after Get Warehouse Documents.
      Initialize;
      WarehouseSetup.GET;
      DocumentNo := PostWhseRcptAndCreateWhseShpt(PurchaseLine);
      GetWhseDocFromPickWksh;
      COMMIT;
      PickNo := NoSeriesManagement.GetNextNo(WarehouseSetup."Whse. Pick Nos.",WORKDATE,FALSE);
      LibraryVariableStorage.Enqueue(STRSUBSTNO(PickActivityMessage,PickNo));  // Enqueue for Message Handler.

      // Exercise.
      CreatePickFromPickWkshPage(PurchaseLine."No.");

      // Verify: Verify Pick Lines create after Get Warehouse Documents.
      VerifyWhseActivityLine(
        WarehouseActivityLine."Activity Type"::Pick,DocumentNo,PurchaseLine."No.",PurchaseLine."Location Code",PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,ItemTrackingSummaryPageHandler,ItemTrackingListPageHandler,ReservationFromCurrentLineHandler,ConfirmHandler,PickSelectionPageHandler)]
    PROCEDURE GetWhseDocFromPickWkshUsingIT@101();
    VAR
      PurchaseLine@1001 : Record 39;
      DocumentNo@1003 : Code[20];
    BEGIN
      // Verify Pick Worksheet created after Get Warehouse Documents.

      // Setup: Create and post Warehouse Receipt and create Warehouse Shipment.
      Initialize;
      DocumentNo := PostWhseRcptAndCreateWhseShpt(PurchaseLine);

      // Exercise: Get Warehouse Documents from Pick Worksheet.
      GetWhseDocFromPickWksh;

      // Verify: Verify Pick Worksheet after Get Warehouse Documents.
      VerifyWkshLine(PurchaseLine."No.",PurchaseLine.Quantity,DocumentNo,PurchaseLine."Location Code");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler)]
    PROCEDURE PutAwayUsingWhseRcptWithIT@28();
    VAR
      Location@1006 : Record 14;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      WarehouseActivityLine@1009 : Record 5767;
      WarehouseReceiptLine@1000 : Record 7317;
    BEGIN
      // Verify Warehouse Activity Line for Put Away after post Warehouse Receipt.

      // Setup: Create Location, create and release Purchase Order with Item Tracking and create Warehouse Receipt.
      Initialize;
      CreateWarehouseLocation(Location);
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,CreateAndModifyTrackedItem(FALSE,FALSE,TRUE),Location.Code);  // Using Random Quantity.
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);

      // Exercise:.
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");

      // Verify: Verify Warehouse Activity Line for Put Away after post Warehouse Receipt.
      VerifyWhseActivityLine(
        WarehouseActivityLine."Activity Type"::"Put-away",PurchaseLine."Document No.",PurchaseLine."No.",
        PurchaseLine."Location Code",PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,PutAwaySelectionPageHandler)]
    PROCEDURE PutAwayWkshUsingGetWhseDoc@76();
    VAR
      Location@1006 : Record 14;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      WarehouseReceiptLine@1000 : Record 7317;
      PutAwayWorksheet@1001 : TestPage 7352;
    BEGIN
      // Verify Put Away Worksheet Line using Get Warehouse Documents.

      // Setup: Create Location, create and release Purchase Order with Item Tracking, create and post Warehouse Receipt.
      Initialize;
      CreateWarehouseLocation(Location);
      Location.VALIDATE("Use Put-away Worksheet",TRUE);
      Location.MODIFY(TRUE);
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,CreateAndModifyTrackedItem(FALSE,FALSE,TRUE),Location.Code);  // Using Random Quantity.
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      PutAwayWorksheet.OPENEDIT;

      // Exercise: Get Warehouse Documents from Put Away Worksheet.
      PutAwayWorksheet.GetWarehouseDocuments.INVOKE;

      // Verify: Verify Put Away Worksheet Line using Get Warehouse Documents.
      PutAwayWorksheet.OK.INVOKE;
      VerifyWkshLine(PurchaseLine."No.",PurchaseLine.Quantity,PurchaseHeader."No.",PurchaseLine."Location Code");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,ItemTrackingSummaryPageHandler,ItemTrackingListPageHandler,ReservationFromCurrentLineHandler,ConfirmHandler)]
    PROCEDURE ErrorWithLocationUsingWhseShpt@12();
    VAR
      Location@1004 : Record 14;
      SalesLine@1002 : Record 37;
      WarehouseShipmentHeader@1005 : Record 7320;
    BEGIN
      // Verify error while validation Location Code on the Warehouse Shipment Header.

      // Setup: Create Location, Sales Order with Reservation and create Warehouse Shipment Header.
      Initialize;
      CreateWarehouseLocation(Location);
      CreateAndReserveSalesOrder(SalesLine);
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);

      // Exercise.
      ASSERTERROR WarehouseShipmentHeader.VALIDATE("Location Code",Location.Code);

      // Verify: Verify error while validation Location Code on the Warehouse Shipment Header.
      Assert.ExpectedError(STRSUBSTNO(LocationCodeError,Location.Code));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,ItemTrackingSummaryPageHandler,ItemTrackingListPageHandler,ReservationFromCurrentLineHandler,ConfirmHandler)]
    PROCEDURE GetSourceDocFromWhseShpt@139();
    VAR
      PurchaseLine@1009 : Record 39;
      SalesLine@1002 : Record 37;
      WarehouseShipmentHeader@1005 : Record 7320;
      WarehouseSourceFilter@1006 : Record 5771;
      WarehouseShipmentLine@1007 : Record 7321;
      DocumentNo@1012 : Code[20];
    BEGIN
      // Verify Warehouse Shipment Lines created through Get Source Documents.

      // Setup: Create Location, create and release Purchase Order with Item Tracking, create Warehouse Receipt, create Sales Order and create Warehouse Shipment Header.
      Initialize;
      CreateAndPostWhseReceipt(PurchaseLine);
      DocumentNo := CreateWhseShptWithIT(SalesLine,PurchaseLine);
      WarehouseShipmentHeader.GET(DocumentNo);

      // Exercise.
      LibraryWarehouse.GetSourceDocumentsShipment(WarehouseShipmentHeader,WarehouseSourceFilter,PurchaseLine."Location Code");

      // Verify: Verify Warehouse Shipment Lines created through Get Source Documents.
      FindWhseShptLine(WarehouseShipmentLine,SalesLine."Document No.",SalesLine."Location Code");
      WarehouseShipmentLine.TESTFIELD("Item No.",SalesLine."No.");
      WarehouseShipmentLine.TESTFIELD(Quantity,SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,ItemTrackingSummaryPageHandler,ItemTrackingListPageHandler,ReservationFromCurrentLineHandler,ConfirmHandler)]
    PROCEDURE CreatePickUsingGetSourceDocOnWhseShpt@40();
    VAR
      PurchaseLine@1009 : Record 39;
      SalesLine@1002 : Record 37;
      WarehouseShipmentHeader@1005 : Record 7320;
      WarehouseActivityHeader@1011 : Record 5766;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseSourceFilter@1006 : Record 5771;
      DocumentNo@1000 : Code[20];
    BEGIN
      // Verify Warehouse Activity Line created through Get Source Documents.

      // Setup: Create Location, create and release Purchase Order with Item Tracking, create Warehouse Receipt, create Sales Order and create Warehouse Shipment Header.
      Initialize;
      CreateAndPostWhseReceipt(PurchaseLine);
      RegisterWarehouseActivity(PurchaseLine."Document No.",WarehouseActivityHeader.Type::"Put-away",PurchaseLine."Location Code");
      DocumentNo := CreateWhseShptWithIT(SalesLine,PurchaseLine);
      WarehouseShipmentHeader.GET(DocumentNo);
      LibraryWarehouse.GetSourceDocumentsShipment(WarehouseShipmentHeader,WarehouseSourceFilter,PurchaseLine."Location Code");
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);

      // Exercise.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify Warehouse Activity line.
      VerifyWhseActivityLine(
        WarehouseActivityLine."Activity Type"::Pick,SalesLine."Document No.",SalesLine."No.",SalesLine."Location Code",
        SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,ItemTrackingSummaryPageHandler,ItemTrackingListPageHandler,ReservationFromCurrentLineHandler,WhseSourceCreateDocumentReportHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE CreatePickFromWhseInternalPick@212();
    VAR
      SalesLine@1008 : Record 37;
      WarehouseSetup@1012 : Record 5769;
      WarehouseActivityLine@1006 : Record 5767;
      NoSeriesManagement@1011 : Codeunit 396;
      PickNo@1010 : Code[20];
      No@1013 : Code[20];
    BEGIN
      // Verify that Bin Code must be blank on Warehouse Activity Line's Action Type 'Take'.

      // Setup: Create Sales Order with Item Tracking and Reservation, find Zone, find Bin, create Warehouse Internal Pick.
      Initialize;
      WarehouseSetup.GET;
      No := CreateWhseInternalPickLine(SalesLine);
      PickNo := NoSeriesManagement.GetNextNo(WarehouseSetup."Whse. Pick Nos.",WORKDATE,FALSE);
      LibraryVariableStorage.Enqueue(STRSUBSTNO(PickActivityMessage,PickNo));  // Enqueue for Message Handler.

      // Exercise: Create Pick from Warehouse Internal Pick page.
      CreatePickFromWhseInternalPickPage(SalesLine."Location Code");

      // Verify: Verify that Bin Code must be blank on Warehouse Activity Line's Action Type 'Take'.
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,SalesLine."Location Code",No,
        WarehouseActivityLine."Action Type"::Take);
      WarehouseActivityLine.TESTFIELD("Bin Code",'');
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,ItemTrackingSummaryPageHandler,ItemTrackingListPageHandler,ReservationFromCurrentLineHandler,ConfirmHandler)]
    PROCEDURE WhseInternalPickUsingSalesOrder@144();
    VAR
      SalesLine@1008 : Record 37;
      WhseInternalPickLine@1001 : Record 7334;
    BEGIN
      // Verify values on Warehouse Internal Pick Line.

      // Setup: Create Sales Order with Item Tracking and Reservation, find Zone, find Bin, create Warehouse Internal Pick.
      Initialize;

      // Exercise.
      CreateWhseInternalPickLine(SalesLine);

      // Verify: Verify values on Warehouse Internal Pick Line.
      WhseInternalPickLine.SETRANGE("Location Code",SalesLine."Location Code");
      WhseInternalPickLine.FINDFIRST;
      WhseInternalPickLine.TESTFIELD("Item No.",SalesLine."No.");
      WhseInternalPickLine.TESTFIELD("Qty. Outstanding",SalesLine.Quantity);
      WhseInternalPickLine.TESTFIELD("Pick Qty.",0);  // Here taken zero for Pick Qty. Pick Activity is not created.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,ItemTrackingSummaryPageHandler,ItemTrackingListPageHandler,ReservationFromCurrentLineHandler,WhseSourceCreateDocumentReportHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE CreatePutAwayFromWhseInternalPutAway@29();
    VAR
      SalesLine@1008 : Record 37;
      WarehouseSetup@1012 : Record 5769;
      WarehouseActivityLine@1006 : Record 5767;
      NoSeriesManagement@1001 : Codeunit 396;
      PutAwayNo@1010 : Code[20];
      BinCode@1000 : Code[20];
    BEGIN
      // Verify that Bin Code must not be blank on Warehouse Activity Line's Action Type 'Take'.

      // Setup: Create Sales Order with Item Tracking and Reservation, find Zone, find Bin, create Warehouse Internal Put Away.
      Initialize;
      BinCode := CreateWhseInternalPutAwayLine(SalesLine);
      WarehouseSetup.GET;
      PutAwayNo := NoSeriesManagement.GetNextNo(WarehouseSetup."Whse. Put-away Nos.",WORKDATE,FALSE);
      LibraryVariableStorage.Enqueue(STRSUBSTNO(PutAwayActivityMessage,PutAwayNo));  // Enqueue for Message Handler.

      // Exercise: Create Put Away from Warehouse Internal Put Away.
      CreatePutAwayFromWhseInternalPutAwayPage(SalesLine."Location Code");

      // Verify: Verify that Bin Code must not be blank on Warehouse Activity Line's Action Type 'Take'.
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",SalesLine."Location Code",'',
        WarehouseActivityLine."Action Type"::Take);
      WarehouseActivityLine.TESTFIELD("Source No.",'');
      WarehouseActivityLine.TESTFIELD("Bin Code",BinCode);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,ItemTrackingSummaryPageHandler,ItemTrackingListPageHandler,ReservationFromCurrentLineHandler,ConfirmHandler)]
    PROCEDURE WhseInternalPutAwayUsingSalesOrder@26();
    VAR
      SalesLine@1008 : Record 37;
      WhseInternalPutAwayLine@1010 : Record 7332;
    BEGIN
      // Verify values on Warehouse Internal Put Away Line.

      // Setup: Create Sales Order with Item Tracking and Reservation, find Zone, find Bin, create Warehouse Internal Put Away.
      Initialize;

      // Exercise.
      CreateWhseInternalPutAwayLine(SalesLine);

      // Verify: Verify values on Warehouse Internal Put Away Line.
      WhseInternalPutAwayLine.SETRANGE("Location Code",SalesLine."Location Code");
      WhseInternalPutAwayLine.FINDFIRST;
      WhseInternalPutAwayLine.TESTFIELD("Item No.",SalesLine."No.");
      WhseInternalPutAwayLine.TESTFIELD("Qty. Outstanding",SalesLine.Quantity);
      WhseInternalPutAwayLine.TESTFIELD("Qty. Put Away",0);  // Here taken zero for Pick Qty. Pick Activity is not created.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE WhseEntryAfterRegisterWhseItemJournal@113();
    VAR
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      // Verify values on Warehouse Entry after Registering Whse. Journal Line.

      // Setup: Create and Register Warehouse Journal Line.
      Initialize;
      CreateAndRegisterWhseItemJnlLine(WarehouseJournalLine);

      // Verify: Verify Serial No and Quantity on Warehouse Entry after Registering Whse. Journal Line.
      VerifyWarehouseEntries(WarehouseJournalLine."Item No.",WarehouseJournalLine."Location Code",1);  // Verify Serial Quantity.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE ItemJnlLineAfterCalcWhseAdjmt@195();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1009 : Record 83;
      ItemJournalBatch@1006 : Record 233;
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      // Verify that Item Journal Line must be generated after Calculate Whse. Adjustment.

      // Setup: Create and Register Warehouse Journal Line.
      Initialize;
      CreateAndRegisterWhseItemJnlLine(WarehouseJournalLine);
      Item.GET(WarehouseJournalLine."Item No.");

      // Exercise: Calculate Warehouse Adjustment on Item Journal Line.
      CalculateWhseAdjustment(ItemJournalBatch,Item,WarehouseJournalLine."Item No.",TRUE);

      // Verify: Verify that Item Journal Line must be generated after Calculate Whse. Adjustment.
      ItemJournalLine.SETRANGE("Item No.",WarehouseJournalLine."Item No.");
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.TESTFIELD("Location Code",WarehouseJournalLine."Location Code");
      ItemJournalLine.TESTFIELD(Quantity,WarehouseJournalLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE ItemLedgerEntryAfterCalcWhseAdjmt@105();
    VAR
      Item@1000 : Record 27;
      ItemJournalBatch@1006 : Record 233;
      ItemLedgerEntry@1010 : Record 32;
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      // Verify that Item Journal Line must be generated after Calculate Whse. Adjustment.

      // Setup: Create and Register Warehouse Journal Line.
      Initialize;
      CreateAndRegisterWhseItemJnlLine(WarehouseJournalLine);
      Item.GET(WarehouseJournalLine."Item No.");
      CalculateWhseAdjustment(ItemJournalBatch,Item,WarehouseJournalLine."Item No.",TRUE);

      // Exercise.
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // Verify: Verify Item Ledger Entry after Calculate Whse. Adjustment and post Item Journal Line.
      ItemLedgerEntry.SETRANGE("Item No.",WarehouseJournalLine."Item No.");
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD("Location Code",WarehouseJournalLine."Location Code");
      ItemLedgerEntry.TESTFIELD(Quantity,WarehouseJournalLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler,ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,ItemTrackingListPageHandler,ConfirmHandler,ReservationPageHandler)]
    PROCEDURE CreatePickAfterCalcWhseAdjmt@180();
    VAR
      Item@1002 : Record 27;
      ItemJournalBatch@1000 : Record 233;
      SalesLine@1011 : Record 37;
      WarehouseActivityLine@1014 : Record 5767;
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      // Verify Warehouse Activity line for Pick.

      // Setup: Create and Register Warehouse Activity line, Calculate Adjustment, Post Item Journal Line, create and release Sales Order.
      Initialize;
      CreateAndRegisterWhseItemJnlLine(WarehouseJournalLine);
      Item.GET(WarehouseJournalLine."Item No.");
      CalculateWhseAdjustment(ItemJournalBatch,Item,WarehouseJournalLine."Item No.",TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      CreateAndReleaseSalesOrderWithITAndReserv(
        SalesLine,WarehouseJournalLine."Item No.",WarehouseJournalLine."Location Code",WarehouseJournalLine.Quantity);

      // Exercise.
      CreatePick(SalesLine."Location Code",SalesLine."Document No.");

      // Verify: Verify Warehouse Activity line for Pick.
      VerifyWhseActivityLine(
        WarehouseActivityLine."Activity Type"::Pick,SalesLine."Document No.",SalesLine."No.",SalesLine."Location Code",
        SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler,ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,ItemTrackingListPageHandler,ConfirmHandler,ReservationPageHandler)]
    PROCEDURE CreatePickUsingGetSourceDoc@14();
    VAR
      SalesLine@1011 : Record 37;
      WarehouseActivityLine@1014 : Record 5767;
    BEGIN
      // Verify Warehouse Activity line for Pick using Get Source Documents from Warehouse Shipment.

      // Setup: Create and Register Warehouse Activity line, Calculate Adjustment, Post Item Journal Line, create and release Sales Order.
      Initialize;
      CreatePickUsingGetSourceDocWithWhseJournal(SalesLine);

      // Verify: Verify Warehouse Activity line for Pick using Get Source Documents from Warehouse Shipment.
      VerifyWhseActivityLine(
        WarehouseActivityLine."Activity Type"::Pick,SalesLine."Document No.",SalesLine."No.",SalesLine."Location Code",
        SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler,ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,ItemTrackingListPageHandler,ConfirmHandler,ReservationPageHandler)]
    PROCEDURE ErrorWithPostShptUsingCreatePick@92();
    VAR
      SalesLine@1011 : Record 37;
      WarehouseShipmentHeader@1003 : Record 7320;
      DocumentNo@1005 : Code[20];
    BEGIN
      // Verify error message while posting Warehouse Shipment without Registering Pick.

      // Setup: Create and Register Warehouse Activity line, Calculate Adjustment, Post Item Journal Line, create and release Sales Order.
      Initialize;
      DocumentNo := CreatePickUsingGetSourceDocWithWhseJournal(SalesLine);

      // Exercise.
      WarehouseShipmentHeader.GET(DocumentNo);
      ASSERTERROR LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify: Verify error message while posing Warehouse Shipment without Registering Pick.
      Assert.ExpectedError(NothingToPostError);
    END;

    [Test]
    PROCEDURE ItemInvtAfterPostRcpt@20();
    VAR
      Item@1014 : Record 27;
      ItemJournalLine@1011 : Record 83;
      PurchaseLine@1003 : Record 39;
      InventoryQuantity@1015 : Decimal;
    BEGIN
      // Verify that Item Inventory must be equal to combined Quantity on Item Journal and Purchase Line.

      // Setup: Create and post a Item Journal Line, create and post a Warehouse Receipt Line.
      Initialize;
      CreateAndPosteItenJnlLine(ItemJournalLine);
      CreateAndPostWhseRcpt(PurchaseLine,ItemJournalLine."Item No.",ItemJournalLine."Location Code");
      InventoryQuantity := ItemJournalLine.Quantity + PurchaseLine.Quantity;

      // Exercise.
      Item.GET(PurchaseLine."No.");
      Item.CALCFIELDS(Inventory);

      // Verify: Verify that Item Inventory must be equal to combined Quantity on Item Journal and Purchase Line.
      Item.TESTFIELD(Inventory,InventoryQuantity);
    END;

    [Test]
    PROCEDURE CreatePickUsingItemJnlLineAndSalesOrder@45();
    VAR
      ItemJournalLine@1011 : Record 83;
      PurchaseLine@1003 : Record 39;
      SalesHeader@1000 : Record 36;
      SalesLine@1007 : Record 37;
      WarehouseActivityLine@1017 : Record 5767;
      InventoryQuantity@1015 : Decimal;
    BEGIN
      // Verify Warehouse Activity Line after creating Pick.

      // Setup: Create and post a Item Journal Line, create and post a Warehouse Receipt Line.
      Initialize;
      CreateAndPosteItenJnlLine(ItemJournalLine);
      CreateAndPostWhseRcpt(PurchaseLine,ItemJournalLine."Item No.",ItemJournalLine."Location Code");
      InventoryQuantity := ItemJournalLine.Quantity + PurchaseLine.Quantity;
      CreateSalesDocument(SalesLine,SalesLine.Type::Item,PurchaseLine."No.",ItemJournalLine."Location Code",InventoryQuantity);
      UpdateSalesLineUnitPrice(SalesLine,LibraryRandom.RandDec(10,2));  // Using Random value for Unit Price.
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // Exercise.
      CreatePick(SalesLine."Location Code",SalesLine."Document No.");

      // Verify: Verify Warehouse Activity Line Quanity for Pick.
      VerifyWhseActivityLine(
        WarehouseActivityLine."Activity Type"::Pick,SalesLine."Document No.",SalesLine."No.",SalesLine."Location Code",
        InventoryQuantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,ItemTrackingSummaryPageHandler,ItemTrackingListPageHandler,MessageHandler,ReservationFromCurrentLineHandler,ConfirmHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrackingMessageAfterWhseRcpt@222();
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify Message 'There are no order tracking entries for this line. must be come after opening Order Tracking Page', verification done in MessageHandler.

      // Setup: Create and post Warehouse Receipt, create Sales Order with Reservation, creare Warehouse Shipment and Create Pick.
      Initialize;
      CreatePOAndWhseRcptUsingReqLine(PurchaseLine);

      // Exercise.
      RunOrderTracking(PurchaseLine);

      // Verify: Verify Message 'There are no order tracking entries for this line. must be come after opening Order Tracking Page', verification done in MessageHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,ItemTrackingSummaryPageHandler,ItemTrackingListPageHandler,MessageHandler,ReservationFromCurrentLineHandler,ConfirmHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrackingMessageAfterRegisterPick@194();
    VAR
      WarehouseActivityHeader@1007 : Record 5766;
      PurchaseLine@1000 : Record 39;
      DocumentNo@1013 : Code[20];
    BEGIN
      // Verify Message 'There are no order tracking entries for this line. must be come while opening Order Tracking Page' after Registering Pick, verification done in MessageHandler.

      // Setup: Create and post Warehouse Receipt, create Sales Order with Reservation, creare Warehouse Shipment, Create and Register Pick.
      Initialize;
      DocumentNo := CreatePOAndWhseRcptUsingReqLine(PurchaseLine);
      RegisterWarehouseActivity(DocumentNo,WarehouseActivityHeader.Type::Pick,PurchaseLine."Location Code");

      // Exercise.
      RunOrderTracking(PurchaseLine);

      // Verify: Verify Message 'There are no order tracking entries for this line. must be come after opening Order Tracking Page', verification done in MessageHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ReservMenuHandler,ReservationFromCurrentLineHandler)]
    PROCEDURE ErrorWithReservUsingTransferOrder@31();
    VAR
      Location@1004 : Record 14;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      TransferHeader@1003 : Record 5740;
      TrackingOption@1002 : 'AssignSerialNo,SelectEntries,AssignLotNo,SetValues';
    BEGIN
      // Verify error while assigning Reservation on Transfer Line.

      // Setup: Create Location, create Purchase Order with Item Tracking.
      Initialize;
      CreateWarehouseLocation(Location);
      CreatePurchaseOrder(PurchaseLine,Location.Code,CreateAndModifyTrackedItem(FALSE,FALSE,TRUE));
      LibraryVariableStorage.Enqueue(TrackingOption::AssignLotNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      PurchaseLine.OpenItemTrackingLines;
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");

      // Exercise.
      ASSERTERROR CreateTransferOrder(TransferHeader,PurchaseLine."Location Code",PurchaseLine."No.",PurchaseLine.Quantity);

      // Verify: Verify error while assigning Reservation on Transfer Line.
      Assert.ExpectedError(AvailabilityError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ReservMenuHandler,ReservationFromCurrentLineHandler)]
    PROCEDURE ITErrorOnPurchOrderUsingTransferOrder@257();
    VAR
      Location@1004 : Record 14;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      TransferHeader@1003 : Record 5740;
      TrackingOption@1002 : 'AssignSerialNo,SelectEntries,AssignLotNo,SetValues';
    BEGIN
      // Verify error while reassigning Item Tracking values on Purchase Line.

      // Setup: Create Location, create and post Purchase Order with Item Tracking, create Transfer Order with Item Tracking.
      Initialize;
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      CreatePurchaseOrder(PurchaseLine,Location.Code,CreateAndModifyTrackedItem(FALSE,TRUE,FALSE));
      LibraryVariableStorage.Enqueue(TrackingOption::SetValues);  // Enqueue value for ItemTrackingLinesPageHandler.
      PurchaseLine.OpenItemTrackingLines;
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      CreateTransferOrder(TransferHeader,PurchaseLine."Location Code",PurchaseLine."No.",PurchaseLine.Quantity);
      PurchaseLine.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.",PurchaseLine."Line No.");
      LibraryVariableStorage.Enqueue(TrackingOption::SetValues);  // Enqueue value for ItemTrackingLinesPageHandler.

      // Exercise.
      ASSERTERROR PurchaseLine.OpenItemTrackingLines;

      // Verify: Verify error while reassigning Item Tracking values on Purchase Line.
      Assert.ExpectedError(QuantityHandledError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,ReservMenuHandler,ReservationFromCurrentLineHandler)]
    PROCEDURE ILEAfterPostTransferOrderWithIT@108();
    VAR
      ItemLedgerEntry@1007 : Record 32;
      Location@1004 : Record 14;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      TransferHeader@1003 : Record 5740;
      TransferLine@1005 : Record 5741;
      TrackingOption@1002 : 'AssignSerialNo,SelectEntries,AssignLotNo,SetValues';
      Direction@1006 : 'Outbound,Inbound';
    BEGIN
      // Verify Item Ledger Entry after Posting Transfer Order with Item Tracking and Reservation.

      // Setup: Create Location, create Purchase Order with Item Tracking, create Transfer Order with Item Tracking.
      Initialize;
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      CreatePurchaseOrder(PurchaseLine,Location.Code,CreateAndModifyTrackedItem(FALSE,TRUE,FALSE));
      LibraryVariableStorage.Enqueue(TrackingOption::SetValues);  // Enqueue value for ItemTrackingLinesPageHandler.
      PurchaseLine.OpenItemTrackingLines;
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      CreateTransferOrder(TransferHeader,PurchaseLine."Location Code",PurchaseLine."No.",PurchaseLine.Quantity);
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);  // Enqueue value for ItemTrackingLinesPageHandler.
      TransferLine.SETRANGE("Document No.",TransferHeader."No.");
      TransferLine.FINDFIRST;
      TransferLine.OpenItemTrackingLines(Direction::Outbound);

      // Exercise.
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,TRUE);

      // Verify: Verify Item Ledger Entry after Posting Transfer Order with Item Tracking and Reservation.
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Transfer);
      ItemLedgerEntry.SETRANGE("Item No.",TransferLine."Item No.");
      ItemLedgerEntry.SETRANGE("Location Code",TransferLine."Transfer-to Code");
      ItemLedgerEntry.SETRANGE(Open,TRUE);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD(Quantity,TransferLine.Quantity / 2);  // Divided by 2 because half value is assigned in Item tracking and posted.
      ItemLedgerEntry.TESTFIELD("Invoiced Quantity",TransferLine.Quantity / 2);  // Divided by 2 because half value is assigned in Item tracking and posted.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantitytoCreatePageHandler,ItemTrackingSummaryPageHandler,ItemTrackingListPageHandler,ReservationFromCurrentLineHandler,ConfirmHandler)]
    PROCEDURE ErrorWithReCreateWhseShptFromPO@327();
    VAR
      PurchaseLine@1009 : Record 39;
      SalesLine@1002 : Record 37;
      WarehouseShipmentHeader@1005 : Record 7320;
      WarehouseActivityHeader@1003 : Record 5766;
      WarehouseSourceFilter@1001 : Record 5771;
      DocumentNo@1000 : Code[20];
    BEGIN
      // Verify error message while posting Warehouse Shipment.

      // Setup: Create Warehouse Receipt, create Warehouse Shipment and release.
      Initialize;
      CreateAndPostWhseReceipt(PurchaseLine);
      RegisterWarehouseActivity(PurchaseLine."Document No.",WarehouseActivityHeader.Type::"Put-away",PurchaseLine."Location Code");
      DocumentNo := CreateWhseShptWithIT(SalesLine,PurchaseLine);
      WarehouseShipmentHeader.GET(DocumentNo);
      LibraryWarehouse.GetSourceDocumentsShipment(WarehouseShipmentHeader,WarehouseSourceFilter,PurchaseLine."Location Code");
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);

      // Exercise.
      ASSERTERROR LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,TRUE);

      // Verify: Verify error message while posting Warehouse Shipment.
      Assert.ExpectedError(NothingToPostError);
    END;

    [Test]
    [HandlerFunctions(ReservationFromCurrentLineHandler)]
    PROCEDURE ReservEntryUsingSalesOrderWithShptDate@354();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1002 : Record 37;
      ReservationEntry@1000 : Record 337;
    BEGIN
      // Verify Reservation Entry values after modifying the Shipment Date on Sales Line.

      // Setup: Create and post Purchase Order, create Sales Order and reserve Sales Line.
      Initialize;
      ReservOnSalesOrderUsingPO(SalesLine);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesLine."Document No.");

      // Exercise: Modify Shipment Date on Sales Header.
      SalesHeader.VALIDATE("Shipment Date",CALCDATE('<1D>',WORKDATE));
      SalesHeader.MODIFY(TRUE);

      // Verify: Verify Reservation Entry values after modifying the Shipment Date on Sales Line.
      ReservationEntry.SETRANGE("Item No.",SalesLine."No.");
      ReservationEntry.FINDFIRST;
      ReservationEntry.TESTFIELD(Quantity,-SalesLine.Quantity);
      ReservationEntry.TESTFIELD("Qty. to Handle (Base)",-SalesLine.Quantity);
      ReservationEntry.TESTFIELD("Shipment Date",SalesHeader."Shipment Date");
    END;

    [Test]
    [HandlerFunctions(ReservationFromCurrentLineHandler,ConfirmHandler)]
    PROCEDURE CurrencyErrorWithSalesOrder@430();
    VAR
      Currency@1007 : Record 4;
      SalesHeader@1004 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      // Verify message 'the existing sales lines will be deleted...', verification done in Confirm Handler.

      // Setup: Create Location, create and release Purchase Order with Item Tracking, create Warehouse Receipt, create Sales Order and create Warehouse Shipment Header.
      Initialize;
      LibraryERM.FindCurrency(Currency);
      ReservOnSalesOrderUsingPO(SalesLine);
      SalesHeader.GET(SalesLine."Document Type"::Order,SalesLine."Document No.");
      LibraryVariableStorage.Enqueue(CurrencyCodeMessage);  // Enqueue value for ItemTrackingLinesPageHandler.

      // Exercise: Modify Currency Code on Sales Header.
      SalesHeader.VALIDATE("Currency Code",Currency.Code);
      SalesHeader.MODIFY(TRUE);

      // Verify: Verify message 'the existing sales lines will be deleted...', verification done in Confirm Handler.
    END;

    [Normal]
    LOCAL PROCEDURE SetupVendorAndLocations@57(VAR SimpleLocationCode@1000 : Code[10];VAR InTransitLocationCode@1001 : Code[10];VAR FullWMSLocationCode@1002 : Code[10];VAR VendorNo@1006 : Code[20]);
    VAR
      SimpleLocation@1003 : Record 14;
      InTransitLocation@1004 : Record 14;
      FullWMSLocation@1005 : Record 14;
      Vendor@1007 : Record 23;
      WarehouseEmployee@1008 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateLocation(SimpleLocation);

      LibraryWarehouse.CreateLocation(InTransitLocation);
      InTransitLocation.VALIDATE("Use As In-Transit",TRUE);
      InTransitLocation.MODIFY(TRUE);

      LibraryWarehouse.CreateFullWMSLocation(FullWMSLocation,10);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,FullWMSLocation.Code,TRUE);

      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Location Code",FullWMSLocation.Code);
      Vendor.MODIFY(TRUE);

      SimpleLocationCode := SimpleLocation.Code;
      InTransitLocationCode := InTransitLocation.Code;
      FullWMSLocationCode := FullWMSLocation.Code;
      VendorNo := Vendor."No.";
    END;

    [Normal]
    LOCAL PROCEDURE CreateItemWithAdditionalUOMs@23(VAR Item@1000 : Record 27;VAR BaseUOMCode@1005 : Code[10];VAR AltUOMCode1@1001 : Code[10];QtyPerAltUOM1@1002 : Decimal;VAR AltUOMCode2@1003 : Code[10];QtyPerAltUOM2@1004 : Decimal);
    VAR
      AdditionalItemUOM1@1006 : Record 5404;
      AdditionalItemUOM2@1007 : Record 5404;
    BEGIN
      LibraryPatterns.MAKEItemSimple(Item,Item."Costing Method"::Standard,LibraryRandom.RandDec(10,2));
      LibraryPatterns.MAKEAdditionalItemUOM(AdditionalItemUOM1,Item."No.",QtyPerAltUOM1);
      LibraryPatterns.MAKEAdditionalItemUOM(AdditionalItemUOM2,Item."No.",QtyPerAltUOM2);

      BaseUOMCode := Item."Base Unit of Measure";
      AltUOMCode1 := AdditionalItemUOM1.Code;
      AltUOMCode2 := AdditionalItemUOM2.Code;
    END;

    [Normal]
    LOCAL PROCEDURE EnableLotWhseTrackingOnItem@46(ItemNo@1001 : Code[20]);
    VAR
      Item@1002 : Record 27;
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      Item.GET(ItemNo);

      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",TRUE);
      ItemTrackingCode.MODIFY(TRUE);

      Item.VALIDATE("Item Tracking Code",ItemTrackingCode.Code);
      Item.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreatePurchaseLineUsingUOM@78(VAR PurchLine@1000 : Record 39;VAR PurchHeader@1001 : Record 38;LocationCode@1005 : Code[10];ItemNo@1002 : Code[20];UOMCode@1004 : Code[10];Quantity@1003 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchLine,PurchHeader,PurchLine.Type::Item,ItemNo,Quantity);

      PurchLine.VALIDATE("Unit of Measure Code",UOMCode);
      PurchLine.VALIDATE("Location Code",LocationCode);
      PurchLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE AssignLotNoOnPurchaseLine@83(VAR PurchaseLine@1000 : Record 39);
    VAR
      ListLength@1001 : Integer;
    BEGIN
      // This function assumes that an availability warning confirm dialog may be shown to the user
      // However, depending on the state of the database, this might not occur
      // Check whether all enqueued elements have been used to avoid dangling elements in the list
      ListLength := LibraryVariableStorage.Length;

      LibraryVariableStorage.Enqueue(ItemTrackingLinesControl::CallingFromPO);
      LibraryVariableStorage.Enqueue(AvailabilityWarningsMsg);
      PurchaseLine.OpenItemTrackingLines;

      IF LibraryVariableStorage.Length > ListLength THEN
        IF CONFIRM(AvailabilityWarningsQst) THEN;
    END;

    [Normal]
    LOCAL PROCEDURE CreateWhseReceipt@88(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
    END;

    [Normal]
    LOCAL PROCEDURE PostWhseReceipt@89(VAR WhseReceiptHeader@1000 : Record 7316;LocationCode@1001 : Code[10]);
    BEGIN
      WhseReceiptHeader.SETRANGE("Location Code",LocationCode);
      WhseReceiptHeader.FINDFIRST;
      LibraryWarehouse.PostWhseReceipt(WhseReceiptHeader);
    END;

    [Normal]
    LOCAL PROCEDURE RegisterWhsePutAway@77(SourceNo@1000 : Code[20]);
    VAR
      WhseActivityHeader@1002 : Record 5766;
      WhseActivityLine@1001 : Record 5767;
    BEGIN
      // Find Whse activity no.
      WhseActivityLine.SETRANGE("Source No.",SourceNo);
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityHeader.Type::"Put-away");
      WhseActivityLine.FINDFIRST;

      WhseActivityHeader.GET(WhseActivityHeader.Type::"Put-away",WhseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WhseActivityHeader);
    END;

    [Normal]
    LOCAL PROCEDURE AssignLotNoOnTransferLine@94(VAR TransferLine@1000 : Record 5741;Qty@1001 : Decimal);
    VAR
      Direction@1002 : 'Outbound,Inbound';
    BEGIN
      LibraryVariableStorage.Enqueue(ItemTrackingLinesControl::CallingFromTO);
      LibraryVariableStorage.Enqueue(Qty);

      TransferLine.OpenItemTrackingLines(Direction::Outbound);
    END;

    [Normal]
    LOCAL PROCEDURE CreateWhseShipmentFromTO@96(VAR TransferHeader@1000 : Record 5740);
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);
    END;

    [Normal]
    LOCAL PROCEDURE CreateWhsePick@97(LocationCode@1001 : Code[10]);
    VAR
      WhseShipmentHeader@1000 : Record 7320;
      WhseActivityHeader@1002 : Record 5766;
    BEGIN
      WhseShipmentHeader.SETRANGE("Location Code",LocationCode);
      WhseShipmentHeader.FINDFIRST;
      LibraryWarehouse.CreateWhsePick(WhseShipmentHeader);

      WhseActivityHeader.SETRANGE(Type,WhseActivityHeader.Type::Pick);
      WhseActivityHeader.SETRANGE("Location Code",LocationCode);
      WhseActivityHeader.FINDFIRST;
      LibraryWarehouse.AutoFillQtyInventoryActivity(WhseActivityHeader);
    END;

    [Normal]
    LOCAL PROCEDURE PrepareTransferOrder@93(VAR TransferHeader@1000 : Record 5740;VAR TransferLine@1008 : Record 5741;FromLocationCode@1001 : Code[10];ToLocationCode@1002 : Code[10];InTransitCode@1003 : Code[10];ItemNo@1004 : Code[20];Quantity@1005 : Decimal;UOMCode@1006 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocationCode,InTransitCode);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      TransferLine.VALIDATE("Unit of Measure Code",UOMCode);
      TransferLine.MODIFY(TRUE);
    END;

    [Test]
    [HandlerFunctions(ReservationHandler,AvailableToReserveHandler)]
    PROCEDURE ReservedQuantityInDifferentUnitOfMeasure@43();
    VAR
      Location@1005 : Record 14;
      Item@1011 : Record 27;
      PurchHeader@1010 : Record 38;
      PurchLine1@1009 : Record 39;
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      BaseUOMCode@1002 : Code[10];
      AltUOMCode1@1001 : Code[10];
      AltUOMCode2@1000 : Code[10];
      QtyPer1@1003 : Decimal;
      QtyPer2@1004 : Decimal;
      QtyPurch@1008 : Decimal;
      QtySale@1012 : Decimal;
    BEGIN
      // [FEATURE] [Reservation] [Unit of Measure]
      // [SCENARIO 140608] Reserved Quantity should be calculated correct when reserving SO in different UoM then PO
      Initialize;

      // [GIVEN] Item with two nonbasic UoM: "A" with Qty Per= "0.1" and "B" with Qty Per = "100"
      QtyPer1 := LibraryRandom.RandDec(10,2);
      QtyPer2 := LibraryRandom.RandDecInRange(10,100,2);
      CreateItemWithAdditionalUOMs(Item,BaseUOMCode,AltUOMCode1,QtyPer1,AltUOMCode2,QtyPer2);
      Item.VALIDATE(Reserve,Item.Reserve::Always);
      Item.MODIFY(TRUE);

      // [GIVEN] Purchase Order for Item in UoM = "X" of Quantity = "500"
      QtyPurch := QtyPer1 * LibraryRandom.RandDec(10,2);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Order,'');
      CreatePurchaseLineUsingUOM(PurchLine1,PurchHeader,Location.Code,Item."No.",AltUOMCode1,QtyPurch);

      // [GIVEN] Sales Line for Item in UoM = "Y" of Quantity "1"
      QtySale := LibraryRandom.RandDecInRange(100,1000,2);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesLine."Document Type"::Order,CreateCustomer);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",QtySale);
      WITH SalesLine DO BEGIN
        VALIDATE("Location Code",Location.Code);
        VALIDATE("Unit of Measure Code",AltUOMCode2);
        VALIDATE("Planned Delivery Date",CALCDATE('<1M>',SalesHeader."Posting Date"));
        MODIFY(TRUE);
      END;

      // [WHEN] Reserve Item from Purchase Order
      SalesLine.ShowReservation;

      // [THEN] Sales Line has fully reserved Quantity "0.5" of PO in UoM "Y"
      SalesLine.FIND;
      SalesLine.CALCFIELDS("Reserved Quantity");
      SalesLine.TESTFIELD("Reserved Quantity",ROUND(QtyPurch * QtyPer1 / QtyPer2,0.00001));
    END;

    LOCAL PROCEDURE Initialize@9();
    VAR
      InventorySetup@1000 : Record 313;
      LibraryERMCountryData@1010 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryInventory.NoSeriesSetup(InventorySetup);
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CalcRegenPlanAndCarryOutActionMsg@229(LocationCode@1001 : Code[10];ItemNo@1003 : Code[20]) : Code[20];
    VAR
      RequisitionLine@1002 : Record 246;
      Item@1000 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,CALCDATE('<CY>',WORKDATE));  // Dates based on WORKDATE.
      FindRequisitionLine(RequisitionLine,ItemNo,LocationCode);
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
      EXIT(RequisitionLine."Ref. Order No.");
    END;

    LOCAL PROCEDURE CalculateWhseAdjustment@135(VAR ItemJournalBatch@1003 : Record 233;Item@1004 : Record 27;ItemNo@1001 : Code[20];NoSeries@1002 : Boolean);
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      Item.GET(ItemNo);
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
      IF NoSeries THEN BEGIN
        ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
        ItemJournalBatch.MODIFY(TRUE);
      END;
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
    END;

    LOCAL PROCEDURE CreateAndFindWhseActivityLine@7(VAR WarehouseActivityLine@1000 : Record 5767;ActionType@1001 : Option);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      CreateAndReserveSalesOrder(SalesLine);
      CreatePick(SalesLine."Location Code",SalesLine."Document No.");
      WarehouseActivityLine.SETRANGE("Source No.",SalesLine."Document No.");
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateAndPostWhseReceipt@32(VAR PurchaseLine@1001 : Record 39);
    VAR
      Location@1003 : Record 14;
      PurchaseHeader@1002 : Record 38;
      WarehouseReceiptLine@1000 : Record 7317;
    BEGIN
      CreateWarehouseLocation(Location);
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,CreateAndModifyTrackedItem(FALSE,FALSE,TRUE),Location.Code);  // Using Random Quantity.
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithITAndReserv@1(VAR SalesLine@1003 : Record 37;No@1006 : Code[20];LocationCode@1005 : Code[10];Quantity@1004 : Decimal);
    VAR
      SalesHeader@1002 : Record 36;
      TrackingOption@1000 : 'AssignSerialNo,SelectEntries';
    BEGIN
      CreateSalesDocument(SalesLine,SalesLine.Type::Item,No,LocationCode,Quantity);
      UpdateSalesLineUnitPrice(SalesLine,LibraryRandom.RandDec(10,2));  // Using Random value for Unit Price.
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);  // Enqueue value for ItemTrackingLinesPageHandler.
      SalesLine.OpenItemTrackingLines;
      LibraryVariableStorage.Enqueue(LibraryInventory.GetReservConfirmText);  // Enqueue values for Confirm Handlers.
      SalesLine.ShowReservation;
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseWhseShptFromSalesOrder@137(VAR WarehouseShipmentHeader@1002 : Record 7320;SalesLine@1001 : Record 37;DocumentNo@1003 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
      WarehouseShipmentLine@1004 : Record 7321;
    BEGIN
      SalesHeader.GET(SalesLine."Document Type",DocumentNo);
      CreateWarehouseShipment(SalesHeader."No.");
      FindWhseShptLine(WarehouseShipmentLine,SalesHeader."No.",SalesLine."Location Code");
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@49(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1004 : Record 39;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    VAR
      TrackingOption@1005 : 'AssignSerialNo,SelectEntries';
    BEGIN
      CreatePurchaseOrder(PurchaseLine,LocationCode,ItemNo);
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      PurchaseLine.OpenItemTrackingLines;
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndRegisterWhseItemJnlLine@132(VAR WarehouseJournalLine@1007 : Record 7311);
    VAR
      WarehouseJournalTemplate@1006 : Record 7309;
      WarehouseJournalBatch@1005 : Record 7310;
      Location@1003 : Record 14;
      TrackingOption@1000 : 'AssignSerialNo,SelectEntries';
    BEGIN
      CreateWarehouseLocation(Location);
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Item);
      LibraryWarehouse.SelectWhseJournalBatchName(
        WarehouseJournalBatch,WarehouseJournalTemplate.Type,WarehouseJournalTemplate.Name,Location.Code);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Location.Code,'',
        Location."Cross-Dock Bin Code",WarehouseJournalLine."Entry Type"::"Positive Adjmt.",
        CreateAndModifyTrackedItem(TRUE,FALSE,TRUE),1);  // Using 1 for Quantity because value is important for the case.
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      WarehouseJournalLine.OpenItemTrackingLines;
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",Location.Code,TRUE);
    END;

    LOCAL PROCEDURE CreateAndRegisterWhseItemJnlLineWithoutItemTracking@17(VAR WarehouseJournalLine@1007 : Record 7311;LocationCode@1008 : Code[10];BinCode@1004 : Code[20];ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      WarehouseJournalTemplate@1006 : Record 7309;
      WarehouseJournalBatch@1005 : Record 7310;
    BEGIN
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Item);
      LibraryWarehouse.SelectWhseJournalBatchName(
        WarehouseJournalBatch,WarehouseJournalTemplate.Type,WarehouseJournalTemplate.Name,LocationCode);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationCode,'',
        BinCode,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",
        ItemNo,Quantity);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",LocationCode,TRUE);
    END;

    LOCAL PROCEDURE CreateAndModifyTrackedItem@80(SNWarehouseTracking@1002 : Boolean;LotSpecific@1003 : Boolean;SerialSpecific@1004 : Boolean) : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateTrackedItem(
        Item,LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,
        CreateItemTrackingCode(LotSpecific,SerialSpecific,SNWarehouseTracking));
      Item.VALIDATE("Costing Method",Item."Costing Method"::Average);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateAndPostItemJnlLineWithIT@47(VAR ItemJournalLine@1000 : Record 83);
    VAR
      ItemJournalBatch@1002 : Record 233;
      Location@1001 : Record 14;
    BEGIN
      SelectAndClearItemJournalBatch(ItemJournalBatch);
      CreateWarehouseLocation(Location);
      CreateItemJnlLineWithTrackedItem(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,CreateAndModifyTrackedItem(FALSE,FALSE,TRUE),
        Location.Code);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateAndPosteItenJnlLine@27(VAR ItemJournalLine@1002 : Record 83);
    VAR
      ItemJournalBatch@1003 : Record 233;
      Location@1005 : Record 14;
    BEGIN
      SelectAndClearItemJournalBatch(ItemJournalBatch);
      CreateWarehouseLocation(Location);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",CreateItem,LibraryRandom.RandInt(10));  // Using Random value for Quantity.
      ModifyItemJnlLine(ItemJournalLine,Location.Code,LibraryRandom.RandDec(10,2));  // Using Random value for Unit Amount.
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateAndPostWhseRcpt@82(VAR PurchaseLine@1011 : Record 39;ItemNo@1018 : Code[20];LocationCode@1019 : Code[10]);
    VAR
      PurchaseHeader@1001 : Record 38;
      WarehouseReceiptLine@1004 : Record 7317;
    BEGIN
      CreatePurchaseOrder(PurchaseLine,LocationCode,ItemNo);
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndReserveSalesOrder@2(VAR SalesLine@1002 : Record 37);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CreateAndPostItemJnlLineWithIT(ItemJournalLine);
      CreateAndReleaseSalesOrderWithITAndReserv(
        SalesLine,ItemJournalLine."Item No.",ItemJournalLine."Location Code",LibraryRandom.RandInt(10));  // Using Random Quantity.
    END;

    LOCAL PROCEDURE CreateCustomer@13() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateWarehouseLocation@48(VAR Location@1000 : Record 14);
    VAR
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      LibraryWarehouse.CreateFullWMSLocation(Location,2);  // Value used for number of bin per zone.
      Location.VALIDATE("Require Receive",TRUE);
      Location.VALIDATE("Always Create Pick Line",TRUE);
      Location.MODIFY(TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,TRUE);
    END;

    LOCAL PROCEDURE CreateItem@15() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(100,1));  // Using Random value for Unit Price.
      Item.VALIDATE("Last Direct Cost",Item."Unit Price");
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemJnlLineWithTrackedItem@68(VAR ItemJournalLine@1002 : Record 83;JournalTemplateName@1000 : Code[10];JournalBatchName@1001 : Code[10];ItemNo@1003 : Code[20];LocationCode@1005 : Code[10]);
    VAR
      TrackingOption@1004 : 'AssignSerialNo,SelectEntries';
    BEGIN
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,JournalTemplateName,JournalBatchName,ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,
        LibraryRandom.RandInt(10 + 10));  // Using Random value for Quantity.
      ModifyItemJnlLine(ItemJournalLine,LocationCode,LibraryRandom.RandDec(10,2));  // Using Random value for Unit Amount.
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      ItemJournalLine.OpenItemTrackingLines(TRUE);
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@140(LotSpecific@1001 : Boolean;SerialSpecific@1002 : Boolean;SNWarehouseTracking@1003 : Boolean) : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,SerialSpecific,LotSpecific);
      ItemTrackingCode.VALIDATE("SN Warehouse Tracking",SNWarehouseTracking);
      ItemTrackingCode.MODIFY(TRUE);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreatePick@164(LocationCode@1001 : Code[10];DocumentNo@1002 : Code[20]) : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
      WarehouseShipmentHeader@1003 : Record 7320;
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type"::Order,DocumentNo);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      WarehouseShipmentHeader.SETRANGE("Location Code",LocationCode);
      WarehouseShipmentHeader.FINDFIRST;
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
      EXIT(WarehouseShipmentHeader."No.");
    END;

    LOCAL PROCEDURE CreatePickFromPickWkshPage@3(No@1001 : Code[20]);
    VAR
      PickWorksheet@1000 : TestPage 7345;
    BEGIN
      PickWorksheet.OPENEDIT;
      PickWorksheet.FILTER.SETFILTER("Item No.",No);
      PickWorksheet.CreatePick.INVOKE;
      PickWorksheet.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreatePickFromWhseInternalPickPage@50(LocationCode@1001 : Code[10]);
    VAR
      WhseInternalPick@1000 : TestPage 7357;
    BEGIN
      WhseInternalPick.OPENEDIT;
      WhseInternalPick.FILTER.SETFILTER("Location Code",LocationCode);
      WhseInternalPick.CreatePick.INVOKE;
      WhseInternalPick.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreatePickUsingGetSourceDocWithWhseJournal@121(VAR SalesLine@1004 : Record 37) : Code[20];
    VAR
      Item@1006 : Record 27;
      ItemJournalBatch@1005 : Record 233;
      WarehouseJournalLine@1002 : Record 7311;
      WarehouseSourceFilter@1001 : Record 5771;
      WarehouseShipmentHeader@1000 : Record 7320;
    BEGIN
      CreateAndRegisterWhseItemJnlLine(WarehouseJournalLine);
      Item.GET(WarehouseJournalLine."Item No.");
      CalculateWhseAdjustment(ItemJournalBatch,Item,WarehouseJournalLine."Item No.",TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      CreateAndReleaseSalesOrderWithITAndReserv(
        SalesLine,WarehouseJournalLine."Item No.",WarehouseJournalLine."Location Code",WarehouseJournalLine.Quantity);

      // Create Warehouse Shipment Header, Get Source Document, Release the Warehouse Shipment and create Pick.
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      LibraryWarehouse.GetSourceDocumentsShipment(WarehouseShipmentHeader,WarehouseSourceFilter,SalesLine."Location Code");
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
      EXIT(WarehouseShipmentHeader."No.");
    END;

    LOCAL PROCEDURE CreatePutAwayFromWhseInternalPutAwayPage@65(LocationCode@1001 : Code[10]);
    VAR
      WhseInternalPutAway@1000 : TestPage 7354;
    BEGIN
      WhseInternalPutAway.OPENEDIT;
      WhseInternalPutAway.FILTER.SETFILTER("Location Code",LocationCode);
      WhseInternalPutAway.CreatePutAway.INVOKE;
      WhseInternalPutAway.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@62(VAR PurchaseLine@1000 : Record 39;LocationCode@1002 : Code[10];ItemNo@1003 : Code[20]);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandInt(10));  // Taking Random value for Quantity.
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10,2));  // Using Random value for Direct Unit Cost.
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePOAndWhseRcptUsingReqLine@220(VAR PurchaseLine@1006 : Record 39) : Code[20];
    VAR
      PurchaseHeader@1011 : Record 38;
      SalesLine@1010 : Record 37;
      RequisitionLine@1005 : Record 246;
      Vendor@1004 : Record 23;
      WarehouseActivityHeader@1000 : Record 5766;
      TemplateType@1003 : 'Planning';
    BEGIN
      // Create and post Warehouse Receipt, create Sales Order with Reservation, creare Warehouse Shipment and Create Pick.
      CreateAndPostWhseReceipt(PurchaseLine);
      RegisterWarehouseActivity(PurchaseLine."Document No.",WarehouseActivityHeader.Type::"Put-away",PurchaseLine."Location Code");
      CreateAndReleaseSalesOrderWithITAndReserv(SalesLine,PurchaseLine."No.",PurchaseLine."Location Code",PurchaseLine.Quantity);
      CreatePick(SalesLine."Location Code",SalesLine."Document No.");

      // Create Vendor for Vendor Number on Requisition Line, create Requisition Line and Calculate Regenerative Plan and Carry Out Action Message.
      LibraryPurchase.CreateVendor(Vendor);
      CreateReqisitiontLine(
        RequisitionLine,TemplateType::Planning,PurchaseLine."No.",PurchaseLine."Location Code",Vendor."No.",PurchaseLine.Quantity,
        WORKDATE);
      CalcRegenPlanAndCarryOutActionMsg(PurchaseLine."Location Code",PurchaseLine."No.");

      // Open Purchase Order created after Carry Out Action Message, Release Purchase Order and Create Warehouse Receipt.
      PurchaseHeader.SETRANGE("Buy-from Vendor No.",RequisitionLine."Vendor No.");
      PurchaseHeader.FINDFIRST;
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      EXIT(SalesLine."Document No.");
    END;

    LOCAL PROCEDURE CreateReqisitiontLine@228(VAR RequisitionLine@1001 : Record 246;TemplateType@1004 : Option;No@1002 : Code[20];LocationCode@1006 : Code[10];VendorNo@1007 : Code[20];Quantity@1003 : Integer;DueDate@1005 : Date);
    VAR
      RequisitionWkshName@1000 : Record 245;
    BEGIN
      FindWorksheetTemplate(RequisitionWkshName,TemplateType);
      RequisitionLine.DELETEALL(TRUE);
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);
      RequisitionLine.VALIDATE(Type,RequisitionLine.Type::Item);
      RequisitionLine.VALIDATE("No.",No);
      RequisitionLine.VALIDATE("Location Code",LocationCode);
      RequisitionLine.VALIDATE("Vendor No.",VendorNo);
      RequisitionLine.VALIDATE(Quantity,Quantity);
      RequisitionLine.VALIDATE("Due Date",DueDate);  // Required Due Date less Prod. Order Date.
      RequisitionLine.VALIDATE("Action Message",RequisitionLine."Action Message"::New);
      RequisitionLine.VALIDATE("Starting Date",CALCDATE('<-1D>',DueDate));  // Take 1 because Starting Date and Ending Date should be just less than 1day of Due Date.
      RequisitionLine.VALIDATE("Ending Date",RequisitionLine."Starting Date");
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDocument@6(VAR SalesLine@1001 : Record 37;Type@1000 : Option;No@1004 : Code[20];LocationCode@1007 : Code[10];Quantity@1002 : Decimal);
    VAR
      SalesHeader@1006 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesLine."Document Type"::Order,CreateCustomer);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,Type,No,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderAndAssignItemCharge@22(VAR SalesLine2@1000 : Record 37);
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      ItemChargeAssignmentOption@1005 : 'AssignmentOnly,GetShipmentLine';
    BEGIN
      CreateSalesDocument(
        SalesLine2,SalesLine.Type::"Charge (Item)",LibraryInventory.CreateItemChargeNo,'',1);
      UpdateSalesLineUnitPrice(SalesLine2,LibraryRandom.RandDec(100,2));  // Using Random value for Unit Price.

      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesLine2."Document No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));  // Using Random value for Quantity.
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));  // Using Random value for Quantity.

      LibraryVariableStorage.Enqueue(ItemChargeAssignmentOption::AssignmentOnly);  // Enqueue value for ItemChargeAssignmentSalesPageHandler.
      SalesLine2.ShowItemChargeAssgnt;
      SalesLine.VALIDATE("Qty. to Ship",0);  // Set Quantity to Ship 0 for Item Line.
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTransferOrder@61(VAR TransferHeader@1003 : Record 5740;LocationCode@1004 : Code[10];ItemNo@1012 : Code[20];Quantity@1007 : Decimal);
    VAR
      Location@1000 : Record 14;
      Location2@1008 : Record 14;
      TransferLine@1001 : Record 5741;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      LibraryWarehouse.CreateInTransitLocation(Location2);
      LibraryWarehouse.CreateTransferHeader(TransferHeader,LocationCode,Location.Code,Location2.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      LibraryVariableStorage.Enqueue(1);  // Enqueue option value for ReservMenuHandler.
      TransferLine.ShowReservation;
    END;

    LOCAL PROCEDURE CreateWhseShptWithIT@70(VAR SalesLine@1001 : Record 37;PurchaseLine@1002 : Record 39) : Code[20];
    VAR
      WarehouseShipmentHeader@1000 : Record 7320;
    BEGIN
      CreateAndReleaseSalesOrderWithITAndReserv(
        SalesLine,PurchaseLine."No.",PurchaseLine."Location Code",LibraryRandom.RandInt(10));  // Using Random value for Quantity.
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader.VALIDATE("Location Code",PurchaseLine."Location Code");
      WarehouseShipmentHeader.MODIFY(TRUE);
      EXIT(WarehouseShipmentHeader."No.");
    END;

    LOCAL PROCEDURE CreateWhseWkshName@73(VAR WhseWorksheetName@1002 : Record 7327;LocationCode@1001 : Code[10];Type@1003 : Option);
    VAR
      WhseWorksheetTemplate@1000 : Record 7328;
    BEGIN
      WhseWorksheetTemplate.SETRANGE(Type,Type);
      WhseWorksheetTemplate.FINDFIRST;
      LibraryWarehouse.CreateWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
    END;

    LOCAL PROCEDURE CreateWarehouseShipment@39(DocumentNo@1002 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type"::Order,DocumentNo);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
    END;

    LOCAL PROCEDURE CreateWhseInternalPickHeader@156(VAR WhseInternalPickHeader@1000 : Record 7333;LocationCode@1003 : Code[10];ToZoneCode@1001 : Code[10];ToBinCode@1002 : Code[20]);
    BEGIN
      LibraryWarehouse.CreateWhseInternalPickHeader(WhseInternalPickHeader,LocationCode);
      WhseInternalPickHeader.VALIDATE("To Zone Code",ToZoneCode);
      WhseInternalPickHeader.VALIDATE("To Bin Code",ToBinCode);
      WhseInternalPickHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWhseInternalPutawayHeader@161(VAR WhseInternalPutAwayHeader@1000 : Record 7331;LocationCode@1003 : Code[10];FromZonecode@1001 : Code[10];FromBinCode@1002 : Code[20]);
    BEGIN
      LibraryWarehouse.CreateWhseInternalPutawayHdr(WhseInternalPutAwayHeader,LocationCode);
      WhseInternalPutAwayHeader.VALIDATE("From Zone Code",FromZonecode);
      WhseInternalPutAwayHeader.VALIDATE("From Bin Code",FromBinCode);
      WhseInternalPutAwayHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWhseInternalPickLine@159(VAR SalesLine@1008 : Record 37) : Code[20];
    VAR
      Bin@1004 : Record 7354;
      WhseInternalPickHeader@1003 : Record 7333;
      WhseInternalPickLine@1002 : Record 7334;
      Zone@1001 : Record 7300;
      WhseInternalPickRelease@1000 : Codeunit 7315;
    BEGIN
      // Create and reserve a Sales Order, find Zone, find Bin, create Warehouse Internal Pick and Release.
      CreateAndReserveSalesOrder(SalesLine);
      FindZone(Zone,SalesLine."Location Code");
      LibraryWarehouse.FindBin(Bin,SalesLine."Location Code",Zone.Code,2);  // Find Bin for Zone with Bin Index 2.
      CreateWhseInternalPickHeader(WhseInternalPickHeader,SalesLine."Location Code",Zone.Code,Bin.Code);
      LibraryWarehouse.CreateWhseInternalPickLine(WhseInternalPickHeader,WhseInternalPickLine,SalesLine."No.",SalesLine.Quantity);
      WhseInternalPickRelease.Release(WhseInternalPickHeader);
      EXIT(WhseInternalPickHeader."No.");
    END;

    LOCAL PROCEDURE CreateWhseInternalPutAwayLine@112(VAR SalesLine@1011 : Record 37) : Code[20];
    VAR
      Bin@1007 : Record 7354;
      WhseInternalPutAwayHeader@1006 : Record 7331;
      WhseInternalPutAwayLine@1005 : Record 7332;
      Zone@1000 : Record 7300;
      WarehouseJournalLine@1001 : Record 7311;
      WhseIntPutAwayRelease@1004 : Codeunit 7316;
    BEGIN
      // Create Sales Order with Item Tracking and Reservation, find Zone, find Bin, create Warehouse Internal Put Away and Release.
      CreateAndReserveSalesOrder(SalesLine);
      FindZone(Zone,SalesLine."Location Code");
      LibraryWarehouse.FindBin(Bin,SalesLine."Location Code",Zone.Code,2);  // Find Bin for Zone with Bin Index 2.

      // Add this line due to one bug fixed in TFS49498.
      // Item should in Bin code so that put-away can be created from internal put-away from page.
      CreateAndRegisterWhseItemJnlLineWithoutItemTracking(WarehouseJournalLine,SalesLine."Location Code",Bin.Code,SalesLine."No.",
        LibraryRandom.RandInt(10) + 10); // Quantity should be greater than 10.

      CreateWhseInternalPutawayHeader(WhseInternalPutAwayHeader,SalesLine."Location Code",Zone.Code,Bin.Code);
      LibraryWarehouse.CreateWhseInternalPutawayLine(
        WhseInternalPutAwayHeader,WhseInternalPutAwayLine,SalesLine."No.",SalesLine.Quantity);
      WhseIntPutAwayRelease.Release(WhseInternalPutAwayHeader);
      EXIT(Bin.Code);
    END;

    LOCAL PROCEDURE DeleteSalesLine@10(DocumentNo@1000 : Code[20]);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDLAST;  // Using Findlast to delete the last line of Sales Order because value is not important for the test.
      SalesLine.DELETE(TRUE);
    END;

    LOCAL PROCEDURE FindRequisitionLine@227(VAR RequisitionLine@1000 : Record 246;No@1001 : Code[20];LocationCode@1002 : Code[10]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.SETRANGE("Location Code",LocationCode);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWorksheetTemplate@226(VAR RequisitionWkshName@1000 : Record 245;TemplateType@1001 : Option);
    BEGIN
      RequisitionWkshName.SETRANGE("Template Type",TemplateType);
      RequisitionWkshName.SETRANGE(Recurring,FALSE);
      RequisitionWkshName.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWhseShptLine@18(VAR WarehouseShipmentLine@1001 : Record 7321;SourceNo@1000 : Code[20];LocationCode@1003 : Code[10]);
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Document",WarehouseShipmentLine."Source Document"::"Sales Order");
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.SETRANGE("Location Code",LocationCode);
      WarehouseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityNo@60(VAR WarehouseActivityLine@1000 : Record 5767;SourceNo@1002 : Code[20];ActivityType@1003 : Option;LocationCode@1005 : Code[10];ActionType@1001 : Option) : Code[20];
    BEGIN
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Location Code",LocationCode);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.FINDLAST;  // Using Findlast to take value from last line of Activity Type.
      EXIT(WarehouseActivityLine."No.");
    END;

    LOCAL PROCEDURE FindWarehouseReceiptNo@59(SourceDocument@1002 : Option;SourceNo@1003 : Code[20]) : Code[20];
    VAR
      WarehouseReceiptLine@1004 : Record 7317;
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
      EXIT(WarehouseReceiptLine."No.");
    END;

    LOCAL PROCEDURE FindWhseActivityLine@54(VAR WarehouseActivityLine@1001 : Record 5767;ActivityType@1000 : Option;LocationCode@1002 : Code[10];SourceNo@1003 : Code[20];ActionType@1004 : Option);
    BEGIN
      FindWarehouseActivityNo(WarehouseActivityLine,SourceNo,ActivityType,LocationCode,ActionType);
      WarehouseActivityLine.FINDSET;
    END;

    LOCAL PROCEDURE FindWhseWkshLine@184(VAR WhseWorksheetLine@1000 : Record 7326;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    BEGIN
      WhseWorksheetLine.SETRANGE("Item No.",ItemNo);
      WhseWorksheetLine.SETRANGE("Location Code",LocationCode);
      WhseWorksheetLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindZone@145(VAR Zone@1001 : Record 7300;LocationCode@1000 : Code[20]);
    BEGIN
      Zone.SETRANGE("Location Code",LocationCode);
      Zone.FINDFIRST;
    END;

    LOCAL PROCEDURE GetWhseDocFromPickWksh@38();
    VAR
      PickWorksheet@1000 : TestPage 7345;
    BEGIN
      PickWorksheet.OPENEDIT;
      PickWorksheet."Get Warehouse Documents".INVOKE;
      PickWorksheet.OK.INVOKE;
    END;

    LOCAL PROCEDURE ModifyItemJnlLine@74(VAR ItemJournalLine@1020 : Record 83;LocationCode@1000 : Code[10];UnitAmount@1001 : Decimal);
    BEGIN
      ItemJournalLine.VALIDATE("Unit Amount",UnitAmount);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostWhseRcptAndCreateWhseShpt@134(VAR PurchaseLine@1000 : Record 39) : Code[20];
    VAR
      SalesLine@1001 : Record 37;
      WarehouseShipmentHeader@1002 : Record 7320;
      WarehouseActivityHeader@1007 : Record 5766;
    BEGIN
      // Create and post Warehouse Receipt, create Sales Order with Reservation and creare Warehouse Shipment.
      CreateAndPostWhseReceipt(PurchaseLine);
      RegisterWarehouseActivity(PurchaseLine."Document No.",WarehouseActivityHeader.Type::"Put-away",PurchaseLine."Location Code");
      CreateAndReleaseSalesOrderWithITAndReserv(SalesLine,PurchaseLine."No.",PurchaseLine."Location Code",PurchaseLine.Quantity);
      CreateAndReleaseWhseShptFromSalesOrder(WarehouseShipmentHeader,SalesLine,SalesLine."Document No.");
      EXIT(SalesLine."Document No.");
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@53(SourceDocument@1000 : Option;SourceNo@1001 : Code[20]);
    VAR
      WarehouseReceiptHeader@1002 : Record 7316;
    BEGIN
      WarehouseReceiptHeader.GET(FindWarehouseReceiptNo(SourceDocument,SourceNo));
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE PostSalesOrder@67(DocumentType@1002 : Option;No@1001 : Code[20]) : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.GET(DocumentType,No);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE ReservOnSalesOrderUsingPO@484(VAR SalesLine@1000 : Record 37);
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      CreatePurchaseOrder(PurchaseLine,'',CreateItem);
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      CreateSalesDocument(SalesLine,SalesLine.Type::Item,PurchaseLine."No.",'',PurchaseLine.Quantity);
      SalesLine.ShowReservation;
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@51(SourceNo@1002 : Code[20];ActivityType@1000 : Option;LocationCode@1001 : Code[10]);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      WarehouseActivityHeader.SETRANGE(
        "No.",
        FindWarehouseActivityNo(WarehouseActivityLine,SourceNo,ActivityType,LocationCode,WarehouseActivityLine."Action Type"::Place));
      WarehouseActivityHeader.FINDFIRST;
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE RegisterWhseActivityAndCreateWkshLine@16(VAR PurchaseLine@1003 : Record 39);
    VAR
      WhseWorksheetLine@1012 : Record 7326;
      WhseWorksheetTemplate@1001 : Record 7328;
      WhseWorksheetName@1000 : Record 7327;
    BEGIN
      // Create Location, Purchase and Sales Order with Item Tracking, Create and Register Warehouse Activity.
      PostWhseRcptAndCreateWhseShpt(PurchaseLine);
      CreateWhseWkshName(WhseWorksheetName,PurchaseLine."Location Code",WhseWorksheetTemplate.Type::Pick);
      LibraryWarehouse.CreateWhseWorksheetLine(
        WhseWorksheetLine,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,PurchaseLine."Location Code",
        WhseWorksheetTemplate.Type::Pick);
      WhseWorksheetLine.VALIDATE("Item No.",PurchaseLine."No.");
      WhseWorksheetLine.VALIDATE(Quantity,PurchaseLine.Quantity);
      WhseWorksheetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunOrderTracking@249(PurchaseLine@1001 : Record 39);
    VAR
      OrderTracking@1000 : Page 99000822;
    BEGIN
      LibraryVariableStorage.Enqueue(OrderTrackingMessage);  // Enqueue for Message Handler.
      OrderTracking.SetPurchLine(PurchaseLine);
      OrderTracking.RUNMODAL;
    END;

    LOCAL PROCEDURE SelectAndClearItemJournalBatch@25(VAR ItemJournalBatch@1001 : Record 233);
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalBatch."Template Type"::Item,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE UpdateSalesLineUnitPrice@8(VAR SalesLine@1000 : Record 37;UnitPrice@1001 : Decimal);
    BEGIN
      SalesLine.VALIDATE("Unit Price",UnitPrice);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyWarehouseEntries@30(ItemNo@1000 : Code[20];LocationCode@1005 : Code[10];Quantity@1004 : Decimal);
    VAR
      WarehouseEntry@1002 : Record 7312;
    BEGIN
      WarehouseEntry.SETRANGE("Entry Type",WarehouseEntry."Entry Type"::"Positive Adjmt.");
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      WarehouseEntry.SETRANGE("Location Code",LocationCode);
      WarehouseEntry.FINDFIRST;
      WarehouseEntry.TESTFIELD(Quantity,Quantity);
      WarehouseEntry.TESTFIELD("Qty. (Base)",Quantity);
    END;

    LOCAL PROCEDURE VerifyWhseActivityLine@72(ActivityType@1001 : Option;SourceNo@1002 : Code[20];ItemNo@1003 : Code[20];LocationCode@1005 : Code[10];Quantity@1004 : Decimal);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWhseActivityLine(WarehouseActivityLine,ActivityType,LocationCode,SourceNo,WarehouseActivityLine."Action Type"::Place);
      WarehouseActivityLine.TESTFIELD("Item No.",ItemNo);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
      WarehouseActivityLine.TESTFIELD("Qty. to Handle",Quantity);
    END;

    LOCAL PROCEDURE VerifyWkshLine@95(ItemNo@1003 : Code[20];Quantity@1004 : Decimal;SourceNo@1005 : Code[20];LocationCode@1001 : Code[10]);
    VAR
      WhseWorksheetLine@1000 : Record 7326;
    BEGIN
      FindWhseWkshLine(WhseWorksheetLine,ItemNo,LocationCode);
      WhseWorksheetLine.TESTFIELD(Quantity,Quantity);
      WhseWorksheetLine.TESTFIELD("Qty. to Handle",Quantity);
      WhseWorksheetLine.TESTFIELD("Source No.",SourceNo);
    END;

    LOCAL PROCEDURE VerifyWarehouseShipmentLine@42(ItemNo@1000 : Code[20];SourceNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      WarehouseShipmentLine@1004 : Record 7321;
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.SETRANGE("Item No.",ItemNo);
      WarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentLine.TESTFIELD(Quantity,Quantity);
      WarehouseShipmentLine.TESTFIELD("Qty. Outstanding (Base)",Quantity);
    END;

    [RequestPageHandler]
    PROCEDURE WhseSourceCreateDocumentReportHandler@111(VAR WhseSourceCreateDocument@1000 : TestRequestPage 7305);
    BEGIN
      WhseSourceCreateDocument.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantitytoCreatePageHandler@52(VAR EnterQuantitytoCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantitytoCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreatePageHandlerForItemNo@36(VAR EnterQuantitytoCreate@1000 : TestPage 6513);
    VAR
      ItemNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ItemNo);
      EnterQuantitytoCreate.ItemNo.ASSERTEQUALS(ItemNo);
      EnterQuantitytoCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemChargeAssignmentSalesPageHandler@5(VAR ItemChargeAssignmentSales@1000 : TestPage 5814);
    VAR
      OptionValue@1001 : Variant;
      OptionString@1002 : 'AssignmentOnly,GetShipmentLine';
      ItemChargeAssignmentOption@1003 : Option;
    BEGIN
      LibraryVariableStorage.Dequeue(OptionValue);  // Dequeue variable.
      ItemChargeAssignmentOption := OptionValue;  // To convert Variant into Option.
      CASE ItemChargeAssignmentOption OF
        OptionString::AssignmentOnly:
          BEGIN
            ItemChargeAssignmentSales.FIRST;
            REPEAT
              ItemChargeAssignmentSales."Qty. to Assign".SETVALUE(1);  // Added Qty. to Assign as 1 for Item Charge.
            UNTIL NOT ItemChargeAssignmentSales.NEXT;
          END;
        OptionString::GetShipmentLine:
          BEGIN
            ItemChargeAssignmentSales.GetShipmentLines.INVOKE;
            ItemChargeAssignmentSales."Qty. to Assign".SETVALUE(1);  // Added Qty. to Assign as 1 for Item Charge.
            ItemChargeAssignmentSales.RemAmountToAssign.SETVALUE(0);
          END;
      END;
      ItemChargeAssignmentSales.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@4(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      OptionValue@1004 : Variant;
      OptionString@1005 : 'AssignSerialNo,SelectEntries,AssignLotNo,SetValues';
      TrackingOption@1006 : Option;
      TrackingQuantity@1001 : Decimal;
    BEGIN
      LibraryVariableStorage.Dequeue(OptionValue);  // Dequeue variable.
      TrackingOption := OptionValue;  // To convert Variant into Option.
      CASE TrackingOption OF
        OptionString::AssignSerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;
        OptionString::AssignLotNo:
          ItemTrackingLines."Assign Lot No.".INVOKE;
        OptionString::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
        OptionString::SetValues:
          BEGIN
            TrackingQuantity := ItemTrackingLines.Quantity3.ASDECIMAL;
            ItemTrackingLines."Lot No.".SETVALUE(LibraryUtility.GenerateGUID);
            ItemTrackingLines."Quantity (Base)".SETVALUE(TrackingQuantity / 2);  // Using half value to assign the Quantity equally in both the ITem Tracking Line.
            ItemTrackingLines.NEXT;
            ItemTrackingLines."Lot No.".SETVALUE(LibraryUtility.GenerateGUID);
            ItemTrackingLines."Quantity (Base)".SETVALUE(TrackingQuantity / 2);  // Using half value to assign the Quantity equally in both the ITem Tracking Line.
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@98(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingListPageHandler@71(VAR ItemTrackingList@1000 : TestPage 6507);
    BEGIN
      ItemTrackingList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE OrderTrackingPageHandler@19(VAR OrderTracking@1000 : TestPage 99000822);
    BEGIN
      OrderTracking.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationFromCurrentLineHandler@66(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Reserve from Current Line".INVOKE;
      Reservation.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@242(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation.OK.INVOKE;
    END;

    [StrMenuHandler]
    PROCEDURE ReservMenuHandler@91(Option@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    VAR
      OptionCount@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(OptionCount);  // Dequeue variable.
      Choice := OptionCount;
    END;

    [ModalPageHandler]
    PROCEDURE SalesShipmentLinePageHandler@21(VAR SalesShipmentLines@1000 : TestPage 5824);
    BEGIN
      SalesShipmentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE WhseItemTrackingLinesPageHandler@33(VAR WhseItemTrackingLines@1000 : TestPage 6550);
    VAR
      OptionValue@1004 : Variant;
      OptionString@1005 : 'AssignSerialNo,SelectEntries';
      TrackingOption@1006 : Option;
    BEGIN
      LibraryVariableStorage.Dequeue(OptionValue);  // Dequeue variable.
      TrackingOption := OptionValue;  // To convert Variant into Option.
      CASE TrackingOption OF
        OptionString::AssignSerialNo:
          BEGIN
            WhseItemTrackingLines."Serial No.".SETVALUE(LibraryUtility.GenerateGUID);
            WhseItemTrackingLines.Quantity.SETVALUE(1);  // Using 1 because value is important.
          END;
      END;
      WhseItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PickSelectionPageHandler@146(VAR PickSelection@1000 : TestPage 7343);
    BEGIN
      PickSelection.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PutAwaySelectionPageHandler@86(VAR PutAwaySelection@1000 : TestPage 7334);
    BEGIN
      PutAwaySelection.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CreatePickPageHandler@11(VAR CreatePick@1000 : TestRequestPage 5754);
    BEGIN
      CreatePick.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@138(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue variable.
      Assert.IsTrue(STRPOS(ConfirmMessage,ExpectedMessage) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@100(Message@1000 : Text[1024]);
    VAR
      ExpectedMessage@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue variable.
      Assert.IsTrue(STRPOS(Message,ExpectedMessage) > 0,Message);
    END;

    [ConfirmHandler]
    PROCEDURE AvailConfirmHandler@34(Question@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesModalPageHandler@24(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      Control@1004 : Variant;
      QtyVar@1001 : Variant;
      QtyDec@1003 : Decimal;
      Option@1005 : 'CallingFromPO,CallingFromTO';
      QtyTxt@1002 : Text;
    BEGIN
      LibraryVariableStorage.Dequeue(Control);
      Option := Control;

      CASE Option OF
        ItemTrackingLinesControl::CallingFromPO:
          BEGIN
            // Assign Lot No. to the yet untracked quantity
            QtyTxt := ItemTrackingLines.Quantity3.VALUE;
            EVALUATE(QtyDec,QtyTxt);
            ItemTrackingLines."Lot No.".SETVALUE(LotNoTC324960Tok);
            ItemTrackingLines."Quantity (Base)".SETVALUE(QtyDec);
            ItemTrackingLines.OK.INVOKE;
          END;
        ItemTrackingLinesControl::CallingFromTO:
          BEGIN
            // Set quantity and Lot No. to track
            LibraryVariableStorage.Dequeue(QtyVar);
            ItemTrackingLines."Quantity (Base)".SETVALUE(QtyVar);
            ItemTrackingLines."Lot No.".SETVALUE(LotNoTC324960Tok);
            ItemTrackingLines.OK.INVOKE;
          END;
        ELSE
          ERROR(InvalidControlErr);
      END;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationHandler@81(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation.AvailableToReserve.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE AvailableToReserveHandler@41(VAR AvailablePurchaseLines@1000 : TestPage 501);
    BEGIN
      AvailablePurchaseLines.Reserve.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [Reservation] [SCM]
      Test Cases for Inventory Costing:
       1. Verify Warehouse Shipment using Reservation and Item Tracking.
       2. Verify Pick Activity Line using Sales Order and Item Journal Line with Item Tracking.
       3. Verify Sales Invoice Line for Item Charge using Sales Order with Item Charge Assignment.
       4. Verify Warehouse Worksheet Line using Purchase and Sales Order with Reservation and Item Tracking.
       5. Verify Create Pick from Worksheet error.
       6. Verify Availability error with Sales Order Reservation.
       7. Verify error while Registering Pick without Bin Code.
       8. Verify error while validation blank Bin Code on Warehouse Activity Line with Action Type 'Place'.
       9. Verify error while validation Bin Code on Warehouse Activity Line with Action Type 'Take'.
      10. Verify Warehouse Request error using Sales Order while creating Inventory Put Away Pick.
      11. Verify Item No. On Enter Quantity to Create page.
      12. Verify Pick Lines created after Get Warehouse Documents.
      13. Verify Pick Worksheet created after Get Warehouse Documents.
      14. Verify Warehouse Activity Line for Put Away after post Warehouse Receipt.
      15. Verify Put Away Worksheet Line using Get Warehouse Documents.
      16. Verify error while validation Location Code on the Warehouse Shipment Header.
      17. Verify Warehouse Shipment Lines created through Get Source Documents.
      18. Verify Warehouse Activity Line created through Get Source Documents.
      19. Verify that Bin Code must be blank on Warehouse Activity Line's Action Type 'Take'.
      20. Verify values on Warehouse Internal Pick Line.
      21. Verify that Bin Code must not be blank on Warehouse Activity Line's Action Type 'Take'.
      22. Verify values on Warehouse Internal Put Away Line.
      23. Verify values on Warehouse Entry after Registering Whse. Journal Line.
      24. Verify that Item Journal Line must be generated after Calculate Whse. Adjustment.
      25. Verify Item Ledger Entry after Calculate Whse. Adjustment and post Item Journal Line.
      26. Verify Warehouse Activity line for Pick.
      27. Verify Warehouse Activity line for Pick using Get Source Documents from Warehouse Shipment.
      28. Verify error message while posting Warehouse Shipment without Registering Pick.
      29. Verify that Item Inventory must be equal to combined Quantity on Item Journal and Purchase Line.
      30. Verify Warehouse Activity Line after creating Pick.
      31. Verify Message 'There are no order tracking entries for this line. must be come after opening Order Tracking Page', verification done in MessageHandler.
      32. Verify Message 'There are no order tracking entries for this line. must be come while opening Order Tracking Page' after Registering Pick, verification done in MessageHandler.
      33. Verify error while assigning Reservation on Transfer Line.
      34. Verify error while reassigning Item Tracking values on Purchase Line.
      35. Verify Item Ledger Entry after Posting Transfer Order with Item Tracking and Reservation.
      36. Verify error message while posting Warehouse Shipment.
      37. Verify Reservation Entry values after modifying the Shipment Date on Sales Line.
      38. Verify message 'the existing sales lines will be deleted...', verification done in Confirm Handler.

       Covers Test cases: for WI - 298803
       --------------------------------------------------------------------------------------------------------------------------------------------------------
       Test Function Name                                                                                                                                TFS ID
       --------------------------------------------------------------------------------------------------------------------------------------------------------
       WhseShptWithITAndReserv, ErrorWithCreatePickUsingSalesOrderWithReserv, SalesOrderPostWithItemChrgAssgnt                                            21721
       PickWkshUsingSalesOrderWithReserv, ErrorWithPickWkshUsingCreatePick, AvailabilityErrorUsingSalesOrderReserv, ErrorWithRegisterPickUsingBlankBin

       Covers Test cases: for WI - 298196
       --------------------------------------------------------------------------------------------------------------------------------------------------------
       Test Function Name                                                                                                                                TFS ID
       --------------------------------------------------------------------------------------------------------------------------------------------------------
       BinCodeErrorUsingCreatePick, BinContentErrorUsingWhseActivityLine                                                                                 122964
       ErrorwithCreateInvtPutAwayPickUsingSalesOrder                                                                                                     122968
       ItemOnEnterQuantityToCreatePage                                                                                                                   122969

       Covers Test cases: for WI - 298804
       --------------------------------------------------------------------------------------------------------------------------------------------------------
       Test Function Name                                                                                                                                TFS ID
       --------------------------------------------------------------------------------------------------------------------------------------------------------
       CreatePickFromPickWkshUsingIT, GetWhseDocFromPickWkshUsingITAndReserv, PutAwayUsingWhseRcptWithIT, PutAwayWkshUsingGetWhseDoc                     21721
       ErrorWithLocationUsingWhseShpt, GetSourceDocFromWhseShpt, CreatePickUsingGetSourceDocOnWhseShpt

       Covers Test cases: for WI - 301142
       --------------------------------------------------------------------------------------------------------------------------------------------------------
       Test Function Name                                                                                                                                TFS ID
       --------------------------------------------------------------------------------------------------------------------------------------------------------
       CreatePickFromWhseInternalPick, WhseInternalPickUsingSalesOrder, CreatePutAwayFromWhseInternalPutAway, WhseInternalPutAwayUsingSalesOrder
       WhseEntryAfterRegisterWhseItemJournal, ItemJnlLineAfterCalcWhseAdjmt, ItemLedgerEntryAfterCalcWhseAdjmt, CreatePickAfterCalcWhseAdjmt             21721
       CreatePickUsingGetSourceDoc, ErrorWithPostShptUsingCreatePick

       Covers Test cases: for WI - 298198
       --------------------------------------------------------------------------------------------------------------------------------------------------------
       Test Function Name                                                                                                                                TFS ID
       --------------------------------------------------------------------------------------------------------------------------------------------------------
       ItemInvtAfterPostRcpt, CreatePickUsingItemJnlLineAndSalesOrder                                                                                    142978
       OrderTrackingMessageAfterWhseRcpt, OrderTrackingMessageAfterRegisterPick                                                                          142980
       ErrorWithReservUsingTransferOrder, ITErrorOnPurchOrderUsingTransferOrder, ILEAfterPostTransferOrderWithIT                                         142981
       ErrorWithReCreateWhseShptFromPO                                                                                                                   142983
       ReservEntryUsingSalesOrderWithShptDate                                                                                                            142984
       CurrencyErrorWithSalesOrder                                                                                                                       142985
    }
    END.
  }
}

