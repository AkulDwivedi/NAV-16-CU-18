OBJECT Codeunit 144032 Reverse Serv Tax Adv. Payments
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1500006 : Codeunit 130000;
      LibraryUtility@1500008 : Codeunit 131000;
      LibraryERM@1500012 : Codeunit 131300;
      LibraryServiceTax@1500007 : Codeunit 143001;
      LibraryRandom@1500003 : Codeunit 130440;
      ReverseServiceTaxHelper@1500002 : Codeunit 143006;
      ServiceTaxVerify@1500015 : Codeunit 143004;
      ServiceTaxReportHelper@1500018 : Codeunit 143007;
      PurchaseDocumentType@1500004 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';
      ReverseChargeType@1500000 : ' ,Standard,GTA';
      isInitialized@1500001 : Boolean;
      ApplyToPoTUsedCreditErr@1500013 : TextConst 'ENU=You cannot apply the document %1 because the Service Tax credit has already been utilized against the tax payment.';
      BlankOptionFieldErr@1500011 : TextConst 'ENU=%1 must not be   in %2';
      RevAndPotTogetherErr@1500005 : TextConst 'ENU=You must set the %1 field to No when the service tax reverse charge is 100 percent.';
      ServiceTaxGroupCodeErr@1500009 : TextConst 'ENU=You cannot apply the documents, because they have different Service Tax Group Codes.';
      ServiceTaxRegNoErr@1500010 : TextConst 'ENU=You cannot apply the documents, because they have different Service Tax Registration Nos.';

    [Test]
    PROCEDURE AdPmtInvDocOnlAppDiffServGrpEr@1500003();
    VAR
      GenJournalLine@1500000 : Record 81;
      PurchaseHeader@1500002 : Record 38;
      PurchaseLine@1500003 : Record 39;
    BEGIN
      Initialize;

      // Post Advance Payment
      ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLine,FALSE,
        ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeType::Standard),ReverseChargeType::Standard,100);

      // Create a purchase document with different Service Tax Group Code
      ReverseServiceTaxHelper.AlterServiceTaxGrpInJnlLine(GenJournalLine);

      // Try to apply and post
      ReverseServiceTaxHelper.CreateDocAndApplyAdvPayment(PurchaseHeader,PurchaseLine,GenJournalLine,
        PurchaseDocumentType::Invoice,ReverseChargeType::Standard,100,FALSE,GenJournalLine.Amount);
      ASSERTERROR ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);
      Assert.ExpectedError(ServiceTaxGroupCodeErr);
    END;

    [Test]
    PROCEDURE AdPmtInvDocOnlAppDiffSRegNoErr@1500010();
    VAR
      GenJournalLine@1500003 : Record 81;
      PurchaseHeader@1500001 : Record 38;
      PurchaseLine@1500000 : Record 39;
    BEGIN
      Initialize;

      // Post Advance Payment
      ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLine,FALSE,
        ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeType::Standard),ReverseChargeType::Standard,100);

      // Create a purchase document with different Service Tax Registration No.
      ReverseServiceTaxHelper.AlterServiceTaxRegNoInJnlLine(GenJournalLine);

      // Try to apply and post
      ReverseServiceTaxHelper.CreateDocAndApplyAdvPayment(PurchaseHeader,PurchaseLine,GenJournalLine,
        PurchaseDocumentType::Invoice,ReverseChargeType::Standard,100,FALSE,GenJournalLine.Amount);
      ASSERTERROR ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);
      Assert.ExpectedError(ServiceTaxRegNoErr);
    END;

    [Test]
    PROCEDURE AdPmtInvJnOnlAppDiffServGrpErr@1500017();
    VAR
      GenJournalLinePayment@1500001 : Record 81;
      GenJournalLineInvoice@1500000 : Record 81;
    BEGIN
      Initialize;

      // Setup
      ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLinePayment,FALSE,
        ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeType::Standard),ReverseChargeType::Standard,100);

      // Create invoice from journal with different Service Tax Group Code
      ReverseServiceTaxHelper.AlterServiceTaxGrpInJnlLine(GenJournalLinePayment);

      // Try to apply and post
      ASSERTERROR
        PostDocFromGenJournal(GenJournalLineInvoice."Document Type"::Invoice,GenJournalLinePayment,GenJournalLineInvoice,
          GenJournalLinePayment.Amount,FALSE);
      Assert.ExpectedError(ServiceTaxGroupCodeErr);
    END;

    [Test]
    PROCEDURE AdPmtInvJnOnlAppDiffSRegNoErr@1500012();
    VAR
      GenJournalLinePayment@1500002 : Record 81;
      GenJournalLineInvoice@1500001 : Record 81;
    BEGIN
      Initialize;

      // Setup
      ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLinePayment,FALSE,
        ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeType::Standard),ReverseChargeType::Standard,100);

      // Create invoice from journal with different Service Tax Registration No.
      ReverseServiceTaxHelper.AlterServiceTaxRegNoInJnlLine(GenJournalLinePayment);

      // Try to apply and post
      ASSERTERROR
        PostDocFromGenJournal(GenJournalLineInvoice."Document Type"::Invoice,GenJournalLinePayment,GenJournalLineInvoice,
          GenJournalLinePayment.Amount,FALSE);
      Assert.ExpectedError(ServiceTaxRegNoErr);
    END;

    [Test]
    PROCEDURE AdvPmtInvPostRevChrg@1500077();
    VAR
      AdvPmtGenJnlLine@1500002 : Record 81;
      InvoiceGenJnlLine@1500001 : Record 81;
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      ApplyPostAdvPaymentToDoc(ReverseChargeType::Standard,FALSE,PurchaseDocumentType::Invoice,AdvPmtGenJnlLine,InvoiceGenJnlLine);

      VerifyPostedAppAdvPmtToInv(
        AdvPmtGenJnlLine,InvoiceGenJnlLine,InvoiceGenJnlLine."Service Tax Base Amount (LCY)",InvoiceGenJnlLine."Service Tax Amount",
        LastTransactionNo,ReverseChargeType::Standard);
    END;

    [Test]
    PROCEDURE AdvPmtInvPostPoT@1500002();
    VAR
      AdvPmtGenJnlLine@1500001 : Record 81;
      InvoiceGenJnlLine@1500000 : Record 81;
      LastTransactionNo@1500002 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      ApplyPostAdvPaymentToDoc(ReverseChargeType::" ",TRUE,PurchaseDocumentType::Invoice,AdvPmtGenJnlLine,InvoiceGenJnlLine);

      VerifyPostedAppAdvPmtToInv(
        AdvPmtGenJnlLine,InvoiceGenJnlLine,InvoiceGenJnlLine."Service Tax Base Amount (LCY)",InvoiceGenJnlLine."Service Tax Amount",
        LastTransactionNo,ReverseChargeType::" ");
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE UnapplyAdvPmtPaidInvPoT@1500081();
    VAR
      AdvPmtGenJnlLine@1500001 : Record 81;
      InvoiceGenJnlLine@1500000 : Record 81;
      ServiceTaxEntryDetails@1500003 : Record 16474;
      LastTransactionNo@1500002 : Integer;
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;

      ApplyPostAdvPaymentToDoc(ReverseChargeType::" ",TRUE,PurchaseDocumentType::Invoice,AdvPmtGenJnlLine,InvoiceGenJnlLine);
      ReverseServiceTaxHelper.UseCreditToPayForSalesDoc(InvoiceGenJnlLine."Document No.",ServiceTaxEntryDetails);

      ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(InvoiceGenJnlLine."Document No.");

      ServiceTaxVerify.InitialRemainingCredit(LastTransactionNo + 1,LastTransactionNo + 3);
      ServiceTaxVerify.DocHasClosedRemCredit(AdvPmtGenJnlLine."Document No.");
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE BlockApplyAdvPmtInvUsedCrPoT@1500082();
    VAR
      AdvPmtGenJnlLine@1500001 : Record 81;
      InvoiceGenJnlLine@1500000 : Record 81;
      ServiceTaxEntryDetails@1500003 : Record 16474;
      PoT@1500002 : Boolean;
    BEGIN
      Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;

      PoT := TRUE;
      ReverseServiceTaxHelper.CreateAdvancePayment(AdvPmtGenJnlLine,AdvPmtGenJnlLine."Document Type"::Payment,PoT,0,0,0);

      PostPurchDocEqualToAdvPmt(AdvPmtGenJnlLine,ReverseChargeType::" ",PoT,PurchaseDocumentType::Invoice,InvoiceGenJnlLine);
      ReverseServiceTaxHelper.UseCreditToPayForSalesDoc(InvoiceGenJnlLine."Document No.",ServiceTaxEntryDetails);

      LibraryERM.PostGeneralJnlLine(AdvPmtGenJnlLine);

      ASSERTERROR
        ReverseServiceTaxHelper.ApplyAndPostVendorEntry(
          InvoiceGenJnlLine."Document Type"::Invoice,InvoiceGenJnlLine."Document No.",
          AdvPmtGenJnlLine."Document Type"::Payment,AdvPmtGenJnlLine."Document No.");

      Assert.ExpectedError(STRSUBSTNO(ApplyToPoTUsedCreditErr,InvoiceGenJnlLine."Document No."));
    END;

    [Test]
    PROCEDURE AdvPmtOrdPostRevChrg@1500080();
    VAR
      AdvPmtGenJnlLine@1500001 : Record 81;
      InvoiceGenJnlLine@1500000 : Record 81;
      LastTransactionNo@1500002 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      ApplyPostAdvPaymentToDoc(ReverseChargeType::Standard,FALSE,PurchaseDocumentType::Order,AdvPmtGenJnlLine,InvoiceGenJnlLine);

      VerifyPostedAppAdvPmtToInv(
        AdvPmtGenJnlLine,InvoiceGenJnlLine,InvoiceGenJnlLine."Service Tax Base Amount (LCY)",InvoiceGenJnlLine."Service Tax Amount",
        LastTransactionNo,ReverseChargeType::Standard);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE UnapplyAdvPmtPaidInvRC@1500085();
    VAR
      AdvPmtGenJnlLine@1500001 : Record 81;
      InvoiceGenJnlLine@1500000 : Record 81;
      LastTransactionNo@1500002 : Integer;
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;

      ApplyPostAdvPaymentToDoc(ReverseChargeType::Standard,FALSE,PurchaseDocumentType::Invoice,AdvPmtGenJnlLine,InvoiceGenJnlLine);
      ReverseServiceTaxHelper.PayServiceTax(
        InvoiceGenJnlLine."Service Tax Registration No.",InvoiceGenJnlLine."Service Tax Group Code",TRUE);

      ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(InvoiceGenJnlLine."Document No.");

      ServiceTaxVerify.STEntryDetailsRemRevChrgCredit(LastTransactionNo,0);
    END;

    [Test]
    PROCEDURE AdvPmtOrdPostPoT@1500083();
    VAR
      AdvPmtGenJnlLine@1500001 : Record 81;
      InvoiceGenJnlLine@1500000 : Record 81;
      LastTransactionNo@1500002 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      ApplyPostAdvPaymentToDoc(ReverseChargeType::" ",TRUE,PurchaseDocumentType::Order,AdvPmtGenJnlLine,InvoiceGenJnlLine);

      VerifyPostedAppAdvPmtToInv(
        AdvPmtGenJnlLine,InvoiceGenJnlLine,InvoiceGenJnlLine."Service Tax Base Amount (LCY)",InvoiceGenJnlLine."Service Tax Amount",
        LastTransactionNo,ReverseChargeType::" ");
    END;

    [Test]
    PROCEDURE AdvPmtPostNoPoT@1500041();
    BEGIN
      PostAndVerifyAdvancePayment(ReverseChargeType::" ",FALSE);
    END;

    [Test]
    PROCEDURE AdvPmtPostRevChrg@1500036();
    BEGIN
      PostAndVerifyAdvancePayment(ReverseChargeType::Standard,FALSE);
    END;

    [Test]
    PROCEDURE AdvPmtPostPoTRevChrg@1500022();
    VAR
      GenJournalLine@1500001 : Record 81;
      TypeOfReverseCharge@1500000 : Option;
    BEGIN
      TypeOfReverseCharge := ReverseChargeType::Standard;
      ASSERTERROR
        ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLine,TRUE,
          ReverseServiceTaxHelper.GetReverseChargeServType(TypeOfReverseCharge),TypeOfReverseCharge,100);
      Assert.ExpectedError(STRSUBSTNO(RevAndPotTogetherErr,GenJournalLine.FIELDCAPTION(PoT)));

      // Tear Down
      ReverseServiceTaxHelper.SetupCompanyInfo;
    END;

    [Test]
    PROCEDURE AdvPmtPostPoT@1500005();
    BEGIN
      PostAndVerifyAdvancePayment(ReverseChargeType::" ",TRUE);
    END;

    [Test]
    PROCEDURE AdvPmtPostPoTFwdCalc@1500079();
    VAR
      GenJournalLine@1500000 : Record 81;
      TypeOfReverseCharge@1500001 : Option;
      PoT@1500002 : Boolean;
    BEGIN
      Initialize;
      TypeOfReverseCharge := ReverseChargeType::" ";
      PoT := TRUE;

      // Post advance payment
      PostAdvancePaymentFwdCalc(GenJournalLine,TypeOfReverseCharge,PoT);

      // Verify
      ServiceTaxVerify.PostedAdvPayment(GenJournalLine,TypeOfReverseCharge,PoT);
    END;

    [Test]
    PROCEDURE AdvPmtRefOnlAppDiffServGrpErr@1500004();
    VAR
      GenJournalLinePayment@1500000 : Record 81;
      GenJournalLineRefund@1500001 : Record 81;
    BEGIN
      // Post Advance Payment
      ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLinePayment,FALSE,
        ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeType::Standard),ReverseChargeType::Standard,100);

      // Create refund with different Service Tax Group Code
      ReverseServiceTaxHelper.AlterServiceTaxGrpInJnlLine(GenJournalLinePayment);

      // Try to apply refund to payment and post
      ASSERTERROR
        PostDocFromGenJournal(GenJournalLineRefund."Document Type"::Refund,GenJournalLinePayment,GenJournalLineRefund,
          GenJournalLinePayment.Amount,TRUE);
      Assert.ExpectedError(ServiceTaxGroupCodeErr);

      // Tear Down
      ReverseServiceTaxHelper.SetupCompanyInfo;
    END;

    [Test]
    PROCEDURE AdvPmtRefOnlAppDiffSRegNoErr@1500068();
    VAR
      GenJournalLinePayment@1500000 : Record 81;
      GenJournalLineRefund@1500001 : Record 81;
    BEGIN
      // Post Advance Payment
      ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLinePayment,FALSE,
        ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeType::Standard),ReverseChargeType::Standard,100);

      // Create refund with different Service Tax Registration No.
      ReverseServiceTaxHelper.AlterServiceTaxRegNoInJnlLine(GenJournalLinePayment);

      // Try to apply refund to payment and post
      ASSERTERROR
        PostDocFromGenJournal(GenJournalLineRefund."Document Type"::Refund,GenJournalLinePayment,GenJournalLineRefund,
          GenJournalLinePayment.Amount,TRUE);
      Assert.ExpectedError(ServiceTaxRegNoErr);
    END;

    [Test]
    PROCEDURE AdvPmtServTypeMandatoryRevChrg@1500019();
    VAR
      GenJournalLine@1500001 : Record 81;
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      Initialize;

      ASSERTERROR
        ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLine,FALSE,
          PurchaseHeader."Service Type (Rev. Chrg.)"::" ",ReverseChargeType::Standard,100);
      Assert.ExpectedError(
        STRSUBSTNO(BlankOptionFieldErr,GenJournalLine.FIELDCAPTION("Service Type (Rev. Chrg.)"),GenJournalLine.TABLENAME));
    END;

    [Test]
    PROCEDURE ApplyAdvPmtToInvoiceNoPoT@1500006();
    VAR
      GenJournalLine@1500001 : Record 81;
      ServiceTaxSetup@1500014 : Record 16472;
      BaseAmount@1500004 : Decimal;
      TaxAmount@1500002 : Decimal;
      LastTransactionNo@1500007 : Integer;
      SBCAmount@1500000 : Decimal;
      KKCAmount@1500003 : Decimal;
    BEGIN
      // Setup
      LastTransactionNo := Initialize;

      // Exercise
      ApplyAdvPmtToInvoice(GenJournalLine,BaseAmount,TaxAmount,SBCAmount,KKCAmount,
        GenJournalLine."Document Type"::Invoice,ReverseChargeType::" ",FALSE);

      // Verify
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ServiceTaxVerify.AdvPaymentOnlineAppGLBalance(ReverseChargeType,ServiceTaxSetup,TaxAmount,FALSE);
      ServiceTaxVerify.AdvPaymentOnlineAppSBCKKCGLBalance(ReverseChargeType,ServiceTaxSetup,SBCAmount,KKCAmount,FALSE);

      // Service Tax Entries
      ServiceTaxVerify.STEntriesAppln(LastTransactionNo,GenJournalLine,BaseAmount,ReverseChargeType::" ");
    END;

    [Test]
    PROCEDURE InvAmtLessThanAdvPmtRevChrg@1500024();
    VAR
      PurchaseHeader@1500005 : Record 38;
    BEGIN
      PurcDocAmtLessThanAdvPmt(PurchaseHeader."Document Type"::Invoice,ReverseChargeType::Standard,FALSE);
    END;

    [Test]
    PROCEDURE InvPostAmtMoreThanAdvPmt@1500032();
    VAR
      PurchaseHeader@1500005 : Record 38;
    BEGIN
      PostPrchDocAmtMoreThanAdvPmt(PurchaseHeader."Document Type"::Invoice,ReverseChargeType::" ",FALSE);
    END;

    [Test]
    PROCEDURE InvPostAmtMoreThanAdvPmtPOT@1500039();
    VAR
      PurchaseHeader@1500005 : Record 38;
    BEGIN
      PostPrchDocAmtMoreThanAdvPmt(PurchaseHeader."Document Type"::Invoice,ReverseChargeType::" ",TRUE);
    END;

    [Test]
    PROCEDURE InvPostAmtMoreThanAdvPRevChrg@1500047();
    VAR
      PurchaseHeader@1500021 : Record 38;
    BEGIN
      PostPrchDocAmtMoreThanAdvPmt(PurchaseHeader."Document Type"::Invoice,ReverseChargeType::Standard,FALSE);
    END;

    [Test]
    PROCEDURE InvServTaxAmtLessThanAdvPmt@1500121();
    VAR
      PurchaseHeader@1500021 : Record 38;
    BEGIN
      PurcDocAmtLessThanAdvPmt(PurchaseHeader."Document Type"::Invoice,ReverseChargeType::" ",FALSE);
    END;

    [Test]
    PROCEDURE InvServTaxAmtLessThanAdvPmtPot@1500119();
    VAR
      PurchaseHeader@1500005 : Record 38;
    BEGIN
      PurcDocAmtLessThanAdvPmt(PurchaseHeader."Document Type"::Invoice,ReverseChargeType::" ",TRUE);
    END;

    [Test]
    PROCEDURE OrdAmtLessThanAdvPmtRevChrg@1500056();
    VAR
      PurchaseHeader@1500021 : Record 38;
    BEGIN
      PurcDocAmtLessThanAdvPmt(PurchaseHeader."Document Type"::Order,ReverseChargeType::Standard,FALSE);
    END;

    [Test]
    PROCEDURE OrdPostAmtMoreThanAdvPmt@1500033();
    VAR
      PurchaseHeader@1500005 : Record 38;
    BEGIN
      PostPrchDocAmtMoreThanAdvPmt(PurchaseHeader."Document Type"::Order,ReverseChargeType::" ",FALSE);
    END;

    [Test]
    PROCEDURE OrdPostAmtMoreThanAdvPmtPOT@1500223();
    VAR
      PurchaseHeader@1500005 : Record 38;
    BEGIN
      PostPrchDocAmtMoreThanAdvPmt(PurchaseHeader."Document Type"::Order,ReverseChargeType::" ",TRUE);
    END;

    [Test]
    PROCEDURE OrdPostAmtMoreThanAdvPmtRevChr@1500225();
    VAR
      PurchaseHeader@1500021 : Record 38;
    BEGIN
      PostPrchDocAmtMoreThanAdvPmt(PurchaseHeader."Document Type"::Order,ReverseChargeType::Standard,FALSE);
    END;

    [Test]
    PROCEDURE OrdServTaxAmtLessThanAdvPmt@1500042();
    VAR
      PurchaseHeader@1500021 : Record 38;
    BEGIN
      PurcDocAmtLessThanAdvPmt(PurchaseHeader."Document Type"::Order,ReverseChargeType::" ",FALSE);
    END;

    [Test]
    PROCEDURE OrdServTaxAmtLessThanAdvPmtPoT@1500040();
    VAR
      PurchaseHeader@1500005 : Record 38;
    BEGIN
      PurcDocAmtLessThanAdvPmt(PurchaseHeader."Document Type"::Order,ReverseChargeType::" ",TRUE);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE PayServTaxAfterApplyInvRevIn@1500031();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      PaySrvTaxAfterApplyAdvPmt(PurchaseHeader."Service Type (Rev. Chrg.)"::Inward);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE PayServTaxAfterApplyInvRevOut@1500029();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      PaySrvTaxAfterApplyAdvPmt(PurchaseHeader."Service Type (Rev. Chrg.)"::Outward);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE PayServTaxBeforeApplyInvRevIn@1500016();
    VAR
      PurchaseHeader@1500000 : Record 38;
      ServiceTaxSetup@1500002 : Record 16472;
      ExpectedTaxAmount@1500001 : Decimal;
    BEGIN
      PaySrvTaxBeforeApplyAdvPmt(PurchaseHeader."Service Type (Rev. Chrg.)"::Inward,ServiceTaxSetup,ExpectedTaxAmount);
      ServiceTaxVerify.STRecAccBalance(ServiceTaxSetup,ExpectedTaxAmount);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE PayServTaxBeforeApplyInvRevOut@1500014();
    VAR
      PurchaseHeader@1500000 : Record 38;
      ServiceTaxSetup@1500002 : Record 16472;
      ExpectedTaxAmount@1500001 : Decimal;
    BEGIN
      PaySrvTaxBeforeApplyAdvPmt(PurchaseHeader."Service Type (Rev. Chrg.)"::Outward,ServiceTaxSetup,ExpectedTaxAmount);
      ServiceTaxVerify.STExpenseAccBalance(ServiceTaxSetup,ExpectedTaxAmount);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE PaySTAfterAplInvTakeSalesCrRC@1500015();
    VAR
      PurchaseHeader@1500018 : Record 38;
      GenJournalLine@1500000 : Record 81;
      ServiceTaxSetup@1500015 : Record 16472;
      PostedAdvancePaymentDocNo@1500021 : Code[20];
      PostedPayRCToGovDocNo@1500020 : Code[20];
      PostedPurchInvoiceDocNo@1500019 : Code[20];
      PostedSalesInvoiceDocNo@1500016 : Code[20];
      BaseAmount@1500012 : Decimal;
      TaxAmount@1500011 : Decimal;
      DocumentType@1500009 : Option;
      SrvTypeRevChrg@1500008 : Option;
      ReverseChargeTypeParam@1500001 : Option;
      LastTransactionNo@1500002 : Integer;
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;

      // Setup
      DocumentType := PurchaseHeader."Document Type"::Invoice;
      SrvTypeRevChrg := PurchaseHeader."Service Type (Rev. Chrg.)"::Inward;
      ReverseChargeTypeParam := ReverseChargeType::Standard;

      AdvPmtRCApplyAdvPmtToInvPayST(PostedAdvancePaymentDocNo,PostedPayRCToGovDocNo,PostedPurchInvoiceDocNo,
        ServiceTaxSetup,BaseAmount,TaxAmount,
        DocumentType,SrvTypeRevChrg,ReverseChargeTypeParam,GenJournalLine);

      // Exercise
      PostSlsInvPaySTUseCrAvailable(PostedSalesInvoiceDocNo,PostedAdvancePaymentDocNo);

      // Verify:
      ServiceTaxVerify.STEntriesAfterTakeSalesCredit(LastTransactionNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE PaySTBeforeAplInvTakeSalesCrRC@1500013();
    VAR
      PurchaseHeader@1500005 : Record 38;
      GenJournalLine@1500003 : Record 81;
      ServiceTaxSetup@1500004 : Record 16472;
      PostedAdvancePaymentDocNo@1500020 : Code[20];
      PostedPayRCToGovDocNo@1500019 : Code[20];
      PostedPurchInvoiceDocNo@1500007 : Code[20];
      PostedSalesInvoiceDocNo@1500002 : Code[20];
      BaseAmount@1500001 : Decimal;
      TaxAmount@1500000 : Decimal;
      DocumentType@1500011 : Option;
      SrvTypeRevChrg@1500010 : Option;
      LastTransactionNo@1500006 : Integer;
      ReverseChargeTypeParam@1500009 : Option;
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;

      // Setup
      DocumentType := PurchaseHeader."Document Type"::Invoice;
      SrvTypeRevChrg := PurchaseHeader."Service Type (Rev. Chrg.)"::Inward;
      ReverseChargeTypeParam := ReverseChargeType::Standard;

      AdvPmtRCPaySTApplyAdvPmtToInv(PostedAdvancePaymentDocNo,PostedPayRCToGovDocNo,PostedPurchInvoiceDocNo,
        ServiceTaxSetup,BaseAmount,TaxAmount,
        DocumentType,SrvTypeRevChrg,ReverseChargeTypeParam,GenJournalLine);

      // Exercise
      PostSlsInvPaySTUseCrAvailable(PostedSalesInvoiceDocNo,PostedAdvancePaymentDocNo);

      // Verify:
      ServiceTaxVerify.STEntriesAfterTakeSalesCredit(LastTransactionNo);
    END;

    [Test]
    PROCEDURE PostAdvPayGenJnlInvRevChrg@1500000();
    BEGIN
      PostAdvPmtGenJnlDoc(ReverseChargeType::Standard,FALSE);
    END;

    [Test]
    PROCEDURE PostNonPoTAdvPayGenJnlInv@1500059();
    BEGIN
      PostAdvPmtGenJnlDoc(ReverseChargeType::" ",FALSE);
    END;

    [Test]
    PROCEDURE PostInvWithRemAmtPoT@1500058();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      PostPrchDocRemAmtAdvPmt(PurchaseHeader."Document Type"::Invoice,ReverseChargeType::" ",TRUE);
    END;

    [Test]
    PROCEDURE PostInvWithRemAmtRevChrg@1500063();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      PostPrchDocRemAmtAdvPmt(PurchaseHeader."Document Type"::Invoice,ReverseChargeType::Standard,FALSE);
    END;

    [Test]
    PROCEDURE PostOrdRemAmtAdvPmtPoT@1500007();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      PostPrchDocRemAmtAdvPmt(PurchaseHeader."Document Type"::Order,ReverseChargeType::" ",TRUE);
    END;

    [Test]
    PROCEDURE PostOrdRemAmtAdvPmtRevChrg@1500064();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      PostPrchDocRemAmtAdvPmt(PurchaseHeader."Document Type"::Order,ReverseChargeType::Standard,FALSE);
    END;

    [Test]
    PROCEDURE PostPoTAdvPayGenJnlInv@1500008();
    BEGIN
      PostAdvPmtGenJnlDoc(ReverseChargeType::" ",TRUE);
    END;

    [Test]
    PROCEDURE PostRefundNonPoTRevChrg@1500103();
    BEGIN
      PostAndVerifyRefundOnAdvPmt(ReverseChargeType::Standard,FALSE);
    END;

    [Test]
    PROCEDURE PostRefundPoT@1500104();
    BEGIN
      PostAndVerifyRefundOnAdvPmt(ReverseChargeType::" ",TRUE);
    END;

    [Test]
    [HandlerFunctions(STaxCreditRegisterReportHandler)]
    PROCEDURE RepSTaxCreditRegisterAdvPmtInv@1501187();
    VAR
      AdvPmtGenJnlLine@1500002 : Record 81;
      InvoiceGenJnlLine@1500001 : Record 81;
    BEGIN
      InitializeReportTest;
      ApplyPostAdvPaymentToDoc(ReverseChargeType::" ",TRUE,PurchaseDocumentType::Invoice,AdvPmtGenJnlLine,InvoiceGenJnlLine);
      ServiceTaxReportHelper.RunReportServiceTaxCreditRegister(InvoiceGenJnlLine,FALSE);
      ServiceTaxReportHelper.LoadDataSetFile;
      ServiceTaxReportHelper.AssertRowCount(1);
      ServiceTaxReportHelper.VerifyServTaxCreditRegisterApplication(InvoiceGenJnlLine."Service Tax Amount");
    END;

    [Test]
    [HandlerFunctions(STaxCreditRegisterReportHandler)]
    PROCEDURE RepSTaxCreditRegisterAdvPmtPartialInv@1500391();
    VAR
      PaymentJournalLine@1500001 : Record 81;
      PurchaseHeader@1500021 : Record 38;
      ServiceTaxSetup@1500003 : Record 16472;
      GLAccountNo@1500011 : Code[20];
      InvoiceBaseAmount@1500006 : Decimal;
      InvoiceTaxAmount@1500005 : Decimal;
      PaymentBaseAmount@1500004 : Decimal;
      PaymentTaxAmount@1500007 : Decimal;
      SBCAmount@1500000 : Decimal;
      KKCAmount@1500002 : Decimal;
      SBCPayAmount@1500009 : Decimal;
      KKCPayAmount@1500008 : Decimal;
    BEGIN
      InitializeReportTest;
      PaymentJournalLine.PoT := TRUE;
      ApplyBiggerDocToAdvPmt(
        PaymentJournalLine,PurchaseHeader."Document Type"::Invoice,ReverseChargeType::" ",
        GLAccountNo,InvoiceBaseAmount,InvoiceTaxAmount,PaymentBaseAmount,PaymentTaxAmount);

      ServiceTaxReportHelper.RunReportServiceTaxCreditRegister(PaymentJournalLine,TRUE);

      // Verify
      ServiceTaxReportHelper.LoadDataSetFile;
      ServiceTaxReportHelper.AssertRowCount(4);
      ServiceTaxReportHelper.VerifyServTaxCreditRegisterApplication(InvoiceTaxAmount);
      ServiceTaxSetup.FindOnDate(PaymentJournalLine."Service Tax Group Code",PaymentJournalLine."Posting Date");
      SBCAmount := ReverseServiceTaxHelper.CalculateSBC(InvoiceBaseAmount,ServiceTaxSetup);
      KKCAmount := ReverseServiceTaxHelper.CalculateKKCess(InvoiceBaseAmount,ServiceTaxSetup);
      SBCPayAmount := ReverseServiceTaxHelper.CalculateSBC(PaymentBaseAmount,ServiceTaxSetup);
      KKCPayAmount := ReverseServiceTaxHelper.CalculateKKCess(PaymentBaseAmount,ServiceTaxSetup);

      ServiceTaxReportHelper.VerifyServTaxCreditRegisterAdvPmtInvCreditAvailed(
        InvoiceBaseAmount + SBCAmount + KKCAmount,InvoiceTaxAmount,
        PaymentBaseAmount + SBCPayAmount + KKCPayAmount,PaymentTaxAmount);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler,STaxCreditRegisterReportHandler)]
    PROCEDURE RepSTaxCreditRegisterAdvPmtInvPmtPayToGov@1500095();
    VAR
      AdvPmtGenJnlLine@1500002 : Record 81;
      PaymentBaseAmount@1500005 : Decimal;
      InvoiceBaseAmount@1500004 : Decimal;
      InvoiceTaxAmount@1500003 : Decimal;
      PaymentTaxAmount@1500000 : Decimal;
    BEGIN
      InitializeReportTest;
      PostApplyAdvPmtInvPmt(AdvPmtGenJnlLine,PaymentBaseAmount,PaymentTaxAmount,InvoiceBaseAmount,InvoiceTaxAmount);

      ServiceTaxReportHelper.RunReportServiceTaxCreditRegister(AdvPmtGenJnlLine,TRUE);

      ServiceTaxReportHelper.LoadDataSetFile;
      ServiceTaxReportHelper.AssertRowCount(3);
      ServiceTaxReportHelper.VerifyServTaxCreditRegisterApplication(InvoiceTaxAmount);
      PaymentBaseAmount -= PaymentTaxAmount;
      ServiceTaxReportHelper.VerifyServTaxCreditRegisterCreditAvailedRow(PaymentBaseAmount,PaymentTaxAmount);
      InvoiceBaseAmount -= InvoiceTaxAmount;
      ServiceTaxReportHelper.VerifyServTaxCreditRegisterCreditAvailedRow(
        InvoiceBaseAmount - PaymentBaseAmount,InvoiceTaxAmount - PaymentTaxAmount);
    END;

    [Test]
    [HandlerFunctions(STaxCreditRegisterReportHandler)]
    PROCEDURE RepSTaxCreditRegisterServTaxRegistrationNo@1500097();
    VAR
      PaymentJournalLine@1500001 : Record 81;
      PurchaseHeader@1500021 : Record 38;
      Vendor@1500000 : Record 23;
      GLAccountNo@1500011 : Code[20];
      InvoiceBaseAmount@1500006 : Decimal;
      InvoiceTaxAmount@1500005 : Decimal;
      PaymentBaseAmount@1500004 : Decimal;
      PaymentTaxAmount@1500007 : Decimal;
    BEGIN
      InitializeReportTest;

      PaymentJournalLine.PoT := TRUE;
      ApplyBiggerDocToAdvPmt(
        PaymentJournalLine,PurchaseHeader."Document Type"::Invoice,ReverseChargeType::" ",
        GLAccountNo,InvoiceBaseAmount,InvoiceTaxAmount,PaymentBaseAmount,PaymentTaxAmount);

      Vendor.GET(PaymentJournalLine."Account No.");
      Vendor."Service Tax Registration No." :=
        LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("Service Tax Registration No."),DATABASE::Vendor);
      Vendor.MODIFY;
      COMMIT;

      ServiceTaxReportHelper.RunReportServiceTaxCreditRegister(PaymentJournalLine,TRUE);

      // Verify
      ServiceTaxReportHelper.LoadDataSetFile;
      ServiceTaxReportHelper.VerifyServTaxCreditRegisterServTaxRegNo(Vendor."Service Tax Registration No.");
    END;

    [Test]
    PROCEDURE ReverseAdvPmtNoPoT@1500078();
    VAR
      GenJournalLine@1500001 : Record 81;
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostAdvancePayment(GenJournalLine,ReverseChargeType::" ",FALSE);

      ReverseServiceTaxHelper.ReverseDocument(GenJournalLine."Document No.");

      ServiceTaxVerify.ReversedDocument(GenJournalLine."Document No.",LastTransactionNo);
    END;

    [Test]
    [HandlerFunctions(ServTaxRegisterReportHandler)]
    PROCEDURE ServTaxRegisterForBigInvAndAdvPmt@1500091();
    VAR
      GenJournalLine@1500009 : Record 81;
      PurchaseHeader@1500012 : Record 38;
      GLAccountNo@1500006 : Code[20];
      InvoiceBaseAmount@1500005 : Decimal;
      InvoiceTaxAmount@1500004 : Decimal;
      PaymentBaseAmount@1500003 : Decimal;
      PaymentTaxAmount@1500002 : Decimal;
      PostedDocNo@1500000 : Code[20];
    BEGIN
      Initialize;

      GenJournalLine.PoT := TRUE;
      PostedDocNo :=
        ApplyBiggerDocToAdvPmt(
          GenJournalLine,PurchaseHeader."Document Type"::Invoice,ReverseChargeType::" ",
          GLAccountNo,InvoiceBaseAmount,InvoiceTaxAmount,PaymentBaseAmount,PaymentTaxAmount);

      ServiceTaxReportHelper.RunReportServiceTaxRegister(GenJournalLine);

      ServiceTaxReportHelper.VerifyServTaxRegisterInvAppliedToAdvPmtPoT(
        GenJournalLine,PostedDocNo,InvoiceBaseAmount,InvoiceTaxAmount,PaymentBaseAmount,PaymentTaxAmount)
    END;

    [Test]
    PROCEDURE UnapplyAdvPmtFromInvoiceNoPoT@1500044();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyAdvPmtFromInvoice(PurchaseHeader."Document Type"::Invoice,ReverseChargeType::" ",FALSE);
    END;

    [Test]
    PROCEDURE UnapplyAdvPmtFromInvoicePoT@1500052();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyAdvPmtFromInvoice(PurchaseHeader."Document Type"::Invoice,ReverseChargeType::" ",TRUE);
    END;

    [Test]
    PROCEDURE UnapplyAdvPmtFromInvoiceRevCh@1500054();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyAdvPmtFromInvoice(PurchaseHeader."Document Type"::Invoice,ReverseChargeType::Standard,FALSE);
    END;

    [Test]
    PROCEDURE UnapplyAdvPmtFromOrderNonPoT@1500055();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyAdvPmtFromInvoice(PurchaseHeader."Document Type"::Order,ReverseChargeType::" ",FALSE);
    END;

    [Test]
    PROCEDURE UnapplyPartialAppAdvPmtNoPoT@1500049();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyPurcDocAmtLessThanAdPmt(PurchaseHeader."Document Type"::Invoice,ReverseChargeType::" ",FALSE);
    END;

    [Test]
    PROCEDURE UnapplyPartialAppAdvPmtPoT@1500048();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyPurcDocAmtLessThanAdPmt(PurchaseHeader."Document Type"::Invoice,ReverseChargeType::" ",TRUE);
    END;

    [Test]
    PROCEDURE UnapplyPartialAppAdvPmtRevCh@1500038();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyPurcDocAmtLessThanAdPmt(PurchaseHeader."Document Type"::Invoice,ReverseChargeType::Standard,FALSE);
    END;

    [Test]
    PROCEDURE UnapplyRefundFromAdvPmtRevChrg@1500065();
    BEGIN
      ASSERTERROR UnapplyRefundFromAdvPmt(ReverseChargeType::Standard,FALSE);
    END;

    [Test]
    PROCEDURE UnapplyRefundFromAdvPmtPoT@1500061();
    BEGIN
      UnapplyRefundFromAdvPmt(ReverseChargeType::" ",TRUE);
    END;

    [Test]
    PROCEDURE UnapplyRefundFromAdvPmtNonPoT@1500066();
    BEGIN
      UnapplyRefundFromAdvPmt(ReverseChargeType::" ",FALSE);
    END;

    [Test]
    PROCEDURE UnapplyRemainingAmountNoPoT@1500026();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyRemainingAmount(PurchaseHeader."Document Type"::Invoice,ReverseChargeType::" ",FALSE);
    END;

    [Test]
    PROCEDURE UnapplyRemainingAmountPoT@1500051();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyRemainingAmount(PurchaseHeader."Document Type"::Invoice,ReverseChargeType::" ",TRUE);
    END;

    [Test]
    PROCEDURE UnapplyRemainingAmountRevChrg@1500062();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      UnapplyRemainingAmount(PurchaseHeader."Document Type"::Invoice,ReverseChargeType::Standard,FALSE);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler,InputServiceDetailsReportHandler)]
    PROCEDURE InputServiceDetailsPostPrchDocAmtMoreThanAdvPmt@1500187();
    VAR
      PmtGenJournalLine@1500001 : Record 81;
      PurchaseHeader@1500021 : Record 38;
      ServiceTaxSetup@1500014 : Record 16472;
      GLAccountNo@1500017 : Code[20];
      PostedDocNo@1500000 : Code[20];
      PmtDocNo@1500008 : Code[20];
      PaymentBaseAmount@1500004 : Decimal;
      InvoiceBaseAmount@1500006 : Decimal;
      InvoiceTaxAmount@1500005 : Decimal;
      PaymentTaxAmount@1500007 : Decimal;
      RemainingAmt@1500002 : Decimal;
    BEGIN
      InitializeReportTest;
      PmtGenJournalLine.PoT := FALSE;
      LibraryServiceTax.SetServiceTaxRounding;
      PostedDocNo :=
        ApplyBiggerDocToAdvPmt(
          PmtGenJournalLine,PurchaseHeader."Document Type"::Invoice,ReverseChargeType::Standard,
          GLAccountNo,InvoiceBaseAmount,InvoiceTaxAmount,PaymentBaseAmount,PaymentTaxAmount);

      RemainingAmt := PaymentBaseAmount * 2;
      PmtDocNo :=
        ReverseServiceTaxHelper.PostPayment(
          PmtGenJournalLine."Account No.",RemainingAmt,PmtGenJournalLine."Posting Date",PmtGenJournalLine."Document Type"::Payment);
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(
        PurchaseHeader."Document Type"::Invoice,PostedDocNo,PmtGenJournalLine."Document Type"::Payment,PmtDocNo);
      ReverseServiceTaxHelper.PayServiceTax(
        PmtGenJournalLine."Service Tax Registration No.",PmtGenJournalLine."Service Tax Group Code",TRUE);

      COMMIT;
      ServiceTaxReportHelper.RunReportInputServiceDetails(PmtGenJournalLine);

      ServiceTaxSetup.FindOnDate(PmtGenJournalLine."Service Tax Group Code",PmtGenJournalLine."Posting Date");
      ServiceTaxReportHelper.VerifyInputServiceDetails(
        PaymentBaseAmount,RemainingAmt,PmtGenJournalLine."Document No.",PostedDocNo,ServiceTaxSetup);
    END;

    LOCAL PROCEDURE Initialize@1500001() : Integer;
    BEGIN
      LibraryRandom.SetSeed(1);

      IF isInitialized THEN
        EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);

      LibraryServiceTax.CreateServiceTaxReturnPeriod;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      COMMIT;

      isInitialized := TRUE;

      EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);
    END;

    LOCAL PROCEDURE InitializeReportTest@1500098();
    BEGIN
      isInitialized := FALSE;
      Initialize;
    END;

    LOCAL PROCEDURE AdvPmtRCApplyAdvPmtToInvPayST@1500023(VAR PostedAdvancePaymentDocNo@1500008 : Code[20];VAR PostedPayRCToGovDocNo@1500007 : Code[20];VAR PostedPurchInvoiceDocNo@1500006 : Code[20];VAR ServiceTaxSetup@1500005 : Record 16472;VAR BaseAmount@1500004 : Decimal;VAR TaxAmount@1500003 : Decimal;DocumentType@1500002 : Option;SrvTypeRevChrg@1500001 : Option;ReverseChargeTypeParam@1500000 : Option;VAR GenJournalLine@1500009 : Record 81);
    VAR
      PurchaseHeader@1500012 : Record 38;
      PurchaseLine@1500011 : Record 39;
    BEGIN
      Initialize;

      ReverseServiceTaxHelper.CreateAdvancePayment(GenJournalLine,GenJournalLine."Document Type"::Payment,
        FALSE,SrvTypeRevChrg,ReverseChargeTypeParam,100);
      PostedAdvancePaymentDocNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      ReverseServiceTaxHelper.CreateDocAndApplyAdvPayment(PurchaseHeader,PurchaseLine,GenJournalLine,DocumentType,
        ReverseChargeTypeParam,100,FALSE,GenJournalLine.Amount);
      PostedPurchInvoiceDocNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ReverseServiceTaxHelper.GetBaseAndTaxAmountFromAdvPmt(
        BaseAmount,TaxAmount,ServiceTaxSetup,GenJournalLine.Amount,ReverseChargeTypeParam,100);

      PostedPayRCToGovDocNo := ReverseServiceTaxHelper.PayServiceTax(GenJournalLine."Service Tax Registration No.",
          GenJournalLine."Service Tax Group Code",TRUE);
    END;

    LOCAL PROCEDURE AdvPmtRCPaySTApplyAdvPmtToInv@1500021(VAR PostedAdvancePaymentDocNo@1500015 : Code[20];VAR PostedPayRCToGovDocNo@1500011 : Code[20];VAR PostedPurchInvoiceDocNo@1500003 : Code[20];VAR ServiceTaxSetup@1500012 : Record 16472;VAR BaseAmount@1500013 : Decimal;VAR TaxAmount@1500014 : Decimal;DocumentType@1500002 : Option;SrvTypeRevChrg@1500001 : Option;ReverseChargeTypeParam@1500000 : Option;VAR GenJournalLine@1500004 : Record 81);
    VAR
      PurchaseHeader@1500010 : Record 38;
      PurchaseLine@1500009 : Record 39;
    BEGIN
      ReverseServiceTaxHelper.CreateAdvancePayment(GenJournalLine,GenJournalLine."Document Type"::Payment,
        FALSE,SrvTypeRevChrg,ReverseChargeTypeParam,100);
      PostedAdvancePaymentDocNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      PostedPayRCToGovDocNo := ReverseServiceTaxHelper.PayServiceTax(GenJournalLine."Service Tax Registration No.",
          GenJournalLine."Service Tax Group Code",TRUE);

      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ReverseServiceTaxHelper.GetBaseAndTaxAmountFromAdvPmt(
        BaseAmount,TaxAmount,ServiceTaxSetup,GenJournalLine.Amount,ReverseChargeTypeParam,100);

      ReverseServiceTaxHelper.CreateDocAndApplyAdvPayment(PurchaseHeader,PurchaseLine,GenJournalLine,DocumentType,
        ReverseChargeTypeParam,100,FALSE,GenJournalLine.Amount);
      PostedPurchInvoiceDocNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);
    END;

    LOCAL PROCEDURE ApplyAdvPmtToInvoice@1500030(VAR GenJournalLine@1500001 : Record 81;VAR BaseAmount@1500002 : Decimal;VAR TaxAmount@1500010 : Decimal;VAR SBCAmount@1500007 : Decimal;VAR KKCAmount@1500009 : Decimal;DocumentType@1500000 : Option;RevChargeType@1500006 : Option;PoT@1500005 : Boolean) : Code[20];
    VAR
      PurchaseHeader@1500021 : Record 38;
      PurchaseLine@1500003 : Record 39;
      ServiceTaxSetup@1500004 : Record 16472;
      ReverseChargePercentage@1500008 : Integer;
    BEGIN
      IF RevChargeType = ReverseChargeType::Standard THEN
        ReverseChargePercentage := 100;

      ReverseServiceTaxHelper.CreateAndPostAdvancePayment(
        GenJournalLine,PoT,ReverseServiceTaxHelper.GetReverseChargeServType(RevChargeType),RevChargeType,ReverseChargePercentage);

      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");

      BaseAmount := GenJournalLine."Service Tax Base Amount (LCY)";
      TaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(BaseAmount,ServiceTaxSetup);
      SBCAmount := ReverseServiceTaxHelper.CalculateSBC(BaseAmount,ServiceTaxSetup);
      KKCAmount := ReverseServiceTaxHelper.CalculateKKCess(BaseAmount,ServiceTaxSetup);

      ReverseServiceTaxHelper.CreateDocAndApplyAdvPayment(PurchaseHeader,PurchaseLine,GenJournalLine,
        DocumentType,RevChargeType,ReverseChargePercentage,PoT,BaseAmount);

      EXIT(ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader));
    END;

    LOCAL PROCEDURE ApplyBiggerDocToAdvPmt@1500087(VAR GenJournalLine@1500007 : Record 81;DocumentType@1500002 : Option;RevChargeType@1500001 : Option;VAR GLAccountNo@1500010 : Code[20];VAR InvoiceBaseAmount@1500008 : Decimal;VAR InvoiceTaxAmount@1500006 : Decimal;VAR PaymentBaseAmount@1500009 : Decimal;VAR PaymentTaxAmount@1500000 : Decimal) : Code[20];
    VAR
      PurchaseHeader@1500005 : Record 38;
      PurchaseLine@1500004 : Record 39;
      ServiceTaxSetup@1500003 : Record 16472;
    BEGIN
      // create and post advance payment
      ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLine,GenJournalLine.PoT,
        ReverseServiceTaxHelper.GetReverseChargeServType(RevChargeType),RevChargeType,100);

      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ReverseServiceTaxHelper.GetBaseAndTaxAmountFromAdvPmt(
        PaymentBaseAmount,PaymentTaxAmount,ServiceTaxSetup,GenJournalLine.Amount,RevChargeType,100);
      InvoiceBaseAmount := PaymentBaseAmount * 3;
      InvoiceTaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(InvoiceBaseAmount,ServiceTaxSetup);

      // create invoice and apply payment
      ReverseServiceTaxHelper.CreateDocAndApplyAdvPayment(PurchaseHeader,PurchaseLine,GenJournalLine,DocumentType,
        RevChargeType,100,GenJournalLine.PoT,InvoiceBaseAmount);

      GLAccountNo := PurchaseLine."No.";
      EXIT(ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader));
    END;

    LOCAL PROCEDURE ApplyPostAdvPaymentToDoc@1500060(TypeOfReverseCharge@1500002 : Option;PoT@1500007 : Boolean;DocumentType@1500014 : Option;VAR GenJournalLine@1500008 : Record 81;VAR PurchaseGenJnlLine@1500005 : Record 81);
    BEGIN
      PostAdvancePayment(GenJournalLine,TypeOfReverseCharge,PoT);

      PostPurchDocAppliesToAdvPmt(GenJournalLine,TypeOfReverseCharge,PoT,DocumentType,PurchaseGenJnlLine);
    END;

    LOCAL PROCEDURE PaySrvTaxAfterApplyAdvPmt@1500053(SrvTypeRevChrg@1500002 : Option);
    VAR
      PurchaseHeader@1500003 : Record 38;
      GenJournalLine@1500005 : Record 81;
      ServiceTaxSetup@1500008 : Record 16472;
      PostedAdvancePaymentDocNo@1500013 : Code[20];
      PostedPayRCToGovDocNo@1500011 : Code[20];
      PostedPurchInvoiceDocNo@1500012 : Code[20];
      BaseAmount@1500009 : Decimal;
      TaxAmount@1500006 : Decimal;
      DocumentType@1500000 : Option;
      ReverseChargeTypeParam@1500001 : Option;
      LastTransactionNo@1500004 : Integer;
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;

      DocumentType := PurchaseHeader."Document Type"::Invoice;
      ReverseChargeTypeParam := ReverseChargeType::Standard;
      AdvPmtRCApplyAdvPmtToInvPayST(PostedAdvancePaymentDocNo,PostedPayRCToGovDocNo,PostedPurchInvoiceDocNo,
        ServiceTaxSetup,BaseAmount,TaxAmount,
        DocumentType,SrvTypeRevChrg,ReverseChargeTypeParam,GenJournalLine);

      // Verify
      VerifyGLEntriesForPayToGov(GenJournalLine,PostedPayRCToGovDocNo);
      ServiceTaxVerify.STEntriesFullPurchFlow(LastTransactionNo,GenJournalLine,BaseAmount,ReverseChargeTypeParam);
    END;

    LOCAL PROCEDURE PaySrvTaxBeforeApplyAdvPmt@1500099(SrvTypeRevChrg@1500002 : Option;VAR ServiceTaxSetup@1500006 : Record 16472;VAR ExpectedTaxAmount@1500010 : Decimal);
    VAR
      PurchaseHeader@1500003 : Record 38;
      GenJournalLine@1500012 : Record 81;
      PostedAdvancePaymentDocNo@1500009 : Code[20];
      PostedPayRCToGovDocNo@1500007 : Code[20];
      PostedPurchInvoiceDocNo@1500004 : Code[20];
      BaseAmount@1500005 : Decimal;
      DocumentType@1500000 : Option;
      ReverseChargeTypeParam@1500001 : Option;
      LastTransactionNo@1500008 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      DocumentType := PurchaseHeader."Document Type"::Invoice;
      ReverseChargeTypeParam := ReverseChargeType::Standard;
      AdvPmtRCPaySTApplyAdvPmtToInv(PostedAdvancePaymentDocNo,PostedPayRCToGovDocNo,PostedPurchInvoiceDocNo,
        ServiceTaxSetup,BaseAmount,ExpectedTaxAmount,
        DocumentType,SrvTypeRevChrg,ReverseChargeTypeParam,GenJournalLine);

      // Verify
      VerifyGLEntriesForPayToGov(GenJournalLine,PostedPayRCToGovDocNo);
      ServiceTaxVerify.STEntriesFullPurchFlow(LastTransactionNo,GenJournalLine,BaseAmount,ReverseChargeTypeParam);
    END;

    LOCAL PROCEDURE PostAndVerifyAdvancePayment@1500084(TypeOfReverseCharge@1500000 : Option;PoT@1500007 : Boolean);
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      Initialize;

      // Post advance payment
      PostAdvancePayment(GenJournalLine,TypeOfReverseCharge,PoT);

      // Verify
      IF PoT THEN
        ServiceTaxVerify.PostedAdvPaymentBackCalc(GenJournalLine,TypeOfReverseCharge,PoT)
      ELSE
        ServiceTaxVerify.PostedAdvPayment(GenJournalLine,TypeOfReverseCharge,PoT);
    END;

    LOCAL PROCEDURE PostAdvancePayment@1500071(VAR GenJournalLine@1500001 : Record 81;TypeOfReverseCharge@1500000 : Option;PoT@1500007 : Boolean) : Code[20];
    BEGIN
      EXIT(
        ReverseServiceTaxHelper.CreateAndPostAdvancePayment(GenJournalLine,PoT,
          ReverseServiceTaxHelper.GetReverseChargeServType(TypeOfReverseCharge),TypeOfReverseCharge,100));
    END;

    LOCAL PROCEDURE PostAdvancePaymentFwdCalc@1500086(VAR GenJournalLine@1500001 : Record 81;TypeOfReverseCharge@1500000 : Option;PoT@1500007 : Boolean);
    BEGIN
      ReverseServiceTaxHelper.CreateAdvancePayment(
        GenJournalLine,GenJournalLine."Document Type"::Payment,PoT,
        ReverseServiceTaxHelper.GetReverseChargeServType(TypeOfReverseCharge),
        TypeOfReverseCharge,100);

      // When setting the Service Tax Base Amount (instead of setting the amount), the posting should work the same way.
      ReverseServiceTaxHelper.InvokeForwardStaxCalculation(GenJournalLine);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE PostAdvPmtGenJnlDoc@1500018(ReverseChargeTypeParam@1500000 : Option;PoT@1500001 : Boolean);
    VAR
      AdvancePaymentGenJnlLine@1500002 : Record 81;
      InvoiceGenJnlLine@1500003 : Record 81;
      ServiceTaxSetup@1500006 : Record 16472;
      BaseAmount@1500012 : Decimal;
      TaxAmount@1500011 : Decimal;
      LastTransactionNo@1500004 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      // Setup
      PostAdvancePayment(AdvancePaymentGenJnlLine,ReverseChargeTypeParam,PoT);

      // Exercise
      ServiceTaxSetup.FindOnDate(AdvancePaymentGenJnlLine."Service Tax Group Code",AdvancePaymentGenJnlLine."Posting Date");
      ReverseServiceTaxHelper.GetBaseAndTaxAmountFromAdvPmt(
        BaseAmount,TaxAmount,ServiceTaxSetup,AdvancePaymentGenJnlLine.Amount,ReverseChargeTypeParam,100);
      PostDocFromGenJournal(
        AdvancePaymentGenJnlLine."Document Type"::Invoice,AdvancePaymentGenJnlLine,InvoiceGenJnlLine,BaseAmount,FALSE);

      // Verify
      VerifyPostedAppAdvPmtToInv(
        AdvancePaymentGenJnlLine,InvoiceGenJnlLine,BaseAmount,TaxAmount,LastTransactionNo,ReverseChargeTypeParam);
    END;

    LOCAL PROCEDURE PostApplyAdvPmtInvPmt@1500094(VAR AdvPmtJournalLine@1500001 : Record 81;VAR PaymentBaseAmount@1500007 : Decimal;VAR PaymentTaxAmount@1500002 : Decimal;VAR InvoiceBaseAmount@1500006 : Decimal;VAR InvoiceTaxAmount@1500005 : Decimal);
    VAR
      PurchaseHeader@1500021 : Record 38;
      GLAccountNo@1500017 : Code[20];
      PostedDocNo@1500000 : Code[20];
      PmtDocNo@1500008 : Code[20];
    BEGIN
      Initialize;

      AdvPmtJournalLine.PoT := FALSE;
      PostedDocNo :=
        ApplyBiggerDocToAdvPmt(
          AdvPmtJournalLine,PurchaseHeader."Document Type"::Invoice,ReverseChargeType::Standard,
          GLAccountNo,InvoiceBaseAmount,InvoiceTaxAmount,PaymentBaseAmount,PaymentTaxAmount);

      PmtDocNo :=
        ReverseServiceTaxHelper.PostPayment(
          AdvPmtJournalLine."Account No.",PaymentBaseAmount * 2,AdvPmtJournalLine."Posting Date",
          AdvPmtJournalLine."Document Type"::Payment);
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(
        PurchaseHeader."Document Type"::Invoice,PostedDocNo,AdvPmtJournalLine."Document Type"::Payment,PmtDocNo);
      ReverseServiceTaxHelper.PayServiceTax(
        AdvPmtJournalLine."Service Tax Registration No.",AdvPmtJournalLine."Service Tax Group Code",TRUE);
      COMMIT;
    END;

    LOCAL PROCEDURE PostDocFromGenJournal@1500046(DocumentType@1500004 : Option;GenJournalLine1@1500000 : Record 81;VAR GenJournalLine2@1500001 : Record 81;BaseAmount@1500003 : Decimal;ServTaxOnAdvPayment@1500005 : Boolean);
    VAR
      GenJournalBatch@1500002 : Record 232;
    BEGIN
      ReverseServiceTaxHelper.CreateGenJournalBatch(GenJournalBatch);
      WITH GenJournalLine1 DO BEGIN
        ReverseServiceTaxHelper.CreateJnlLineWithSTNoSetup(GenJournalLine2,GenJournalBatch,DocumentType,
          "Service Type (Rev. Chrg.)","Account No.",-BaseAmount,"Posting Date","Service Tax Registration No.",
          "Service Tax Group Code");
        GenJournalLine2.VALIDATE(PoT,PoT);
        GenJournalLine2.VALIDATE("Applies-to Doc. Type","Document Type");
        GenJournalLine2.VALIDATE("Applies-to Doc. No.","Document No.");
        GenJournalLine2.VALIDATE("Serv. Tax on Advance Payment",ServTaxOnAdvPayment);
      END;
      GenJournalLine2.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
    END;

    LOCAL PROCEDURE PostPurcDocAmtLessThanAdvPmt@1500035(VAR GenJournalLine@1500001 : Record 81;VAR PurchaseHeader@1500003 : Record 38;VAR PurchaseLine@1500006 : Record 39;VAR PaymentBaseAmount@1500005 : Decimal;VAR PaymentTaxAmount@1500004 : Decimal;VAR InvoiceBaseAmount@1500002 : Decimal;VAR InvoiceTaxAmount@1500000 : Decimal;DocumentType@1500013 : Option;RevChargeType@1500012 : Option;PoT@1500010 : Boolean) : Code[20];
    VAR
      ServiceTaxSetup@1500014 : Record 16472;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ReverseServiceTaxHelper.GetBaseAndTaxAmountFromAdvPmt(
        PaymentBaseAmount,PaymentTaxAmount,ServiceTaxSetup,GenJournalLine.Amount,RevChargeType,100);

      // calculate tax and base amount for invoice
      ReverseServiceTaxHelper.GetBaseAndTaxAmountFromAdvPmt(InvoiceBaseAmount,InvoiceTaxAmount,
        ServiceTaxSetup,ReverseServiceTaxHelper.RoundAmount(PaymentBaseAmount / 3),RevChargeType,100);

      // create invoice and apply payment
      ReverseServiceTaxHelper.CreateDocAndApplyAdvPayment(PurchaseHeader,PurchaseLine,GenJournalLine,
        DocumentType,RevChargeType,100,PoT,InvoiceBaseAmount);

      // Exercise
      EXIT(ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader));
    END;

    LOCAL PROCEDURE PostPrchDocAmtMoreThanAdvPmt@1500090(DocumentType@1500013 : Option;RevChargeType@1500012 : Option;PoT@1500010 : Boolean);
    VAR
      GenJournalLine@1500001 : Record 81;
      ServiceTaxSetup@1500014 : Record 16472;
      PostedDocNo@1500000 : Code[20];
      GLAccountNo@1500003 : Code[20];
      PaymentBaseAmount@1500004 : Decimal;
      InvoiceBaseAmount@1500006 : Decimal;
      InvoiceTaxAmount@1500005 : Decimal;
      PaymentTaxAmount@1500007 : Decimal;
      LastTransactionNo@1500002 : Integer;
      SBCAmount@1500008 : Decimal;
      KKCAmount@1500009 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;

      GenJournalLine.PoT := PoT;
      PostedDocNo :=
        ApplyBiggerDocToAdvPmt(
          GenJournalLine,DocumentType,RevChargeType,
          GLAccountNo,InvoiceBaseAmount,InvoiceTaxAmount,PaymentBaseAmount,PaymentTaxAmount);

      // Verify
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      IF RevChargeType = ReverseChargeType::" " THEN
        IF NOT PoT THEN BEGIN
          VerifySTEntriesNoPoTPartialApp(LastTransactionNo,GenJournalLine,PaymentBaseAmount,InvoiceBaseAmount);
          ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,PaymentTaxAmount,InvoiceTaxAmount - PaymentTaxAmount,0,0);
        END ELSE BEGIN
          ServiceTaxVerify.STEntriesFullPurchFlow(LastTransactionNo,GenJournalLine,InvoiceBaseAmount,RevChargeType);
          ServiceTaxVerify.GLBalanceReceivablesOnly(ServiceTaxSetup,InvoiceTaxAmount);
        END
      ELSE BEGIN
        VerifySTEntriesRevCPartialApp(LastTransactionNo,GenJournalLine,PaymentBaseAmount,InvoiceBaseAmount);
        ServiceTaxVerify.STRecInterimAccBalance(ServiceTaxSetup,InvoiceTaxAmount);
        ServiceTaxVerify.STPayInterimAccBalance(ServiceTaxSetup,PaymentTaxAmount - InvoiceTaxAmount);
      END;

      // vendor ledger entry
      ServiceTaxVerify.VendorLedgerEntryOpen(GenJournalLine."Document No.",FALSE);

      // vendor and services
      KKCAmount := ReverseServiceTaxHelper.CalculateSBC(InvoiceBaseAmount,ServiceTaxSetup);
      SBCAmount := ReverseServiceTaxHelper.CalculateKKCess(InvoiceBaseAmount,ServiceTaxSetup);
      ServiceTaxVerify.VendorAndServicesEntries(PostedDocNo,GenJournalLine."Account No.",
        GLAccountNo,TRUE,InvoiceBaseAmount,InvoiceTaxAmount + KKCAmount + SBCAmount,RevChargeType,TRUE);
    END;

    LOCAL PROCEDURE PostPurchDocAppliesToAdvPmt@1500057(GenJournalLine@1500001 : Record 81;TypeOfReverseCharge@1500004 : Option;PoT@1500003 : Boolean;DocumentType@1500002 : Option;VAR PurchaseGenJnlLine@1500000 : Record 81);
    VAR
      PurchaseHeader@1500010 : Record 38;
      PurchaseLine@1500009 : Record 39;
      ServiceTaxSetup@1500008 : Record 16472;
      TaxAmount@1500007 : Decimal;
      BaseAmount@1500006 : Decimal;
      PostedPurchaseDocumentNo@1500005 : Code[20];
      SBCAmount@1500011 : Decimal;
      KKCAmount@1500012 : Decimal;
    BEGIN
      // Create a purchase document, apply the advance payment
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ReverseServiceTaxHelper.GetBaseAndTaxAmountFromAdvPmt(
        BaseAmount,TaxAmount,ServiceTaxSetup,GenJournalLine.Amount,TypeOfReverseCharge,100);
      SBCAmount := ReverseServiceTaxHelper.CalculateSBC(BaseAmount,ServiceTaxSetup);
      KKCAmount := ReverseServiceTaxHelper.CalculateKKCess(BaseAmount,ServiceTaxSetup);
      ReverseServiceTaxHelper.CreateDocAndApplyAdvPayment(PurchaseHeader,PurchaseLine,GenJournalLine,
        DocumentType,TypeOfReverseCharge,100,PoT,BaseAmount);

      // Exercise: Post the purchase document
      PostedPurchaseDocumentNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      // values for verification
      ReverseServiceTaxHelper.ConvertDocToJnlLine(PurchaseHeader,PurchaseLine,PostedPurchaseDocumentNo,PurchaseGenJnlLine);
      PurchaseGenJnlLine."Service Tax Base Amount (LCY)" := BaseAmount;
      PurchaseGenJnlLine."Service Tax Amount" := TaxAmount;
      PurchaseGenJnlLine."Service Tax SBC Amount" := SBCAmount;
      PurchaseGenJnlLine."KK Cess Amount" := KKCAmount;
    END;

    LOCAL PROCEDURE PostPurchDocEqualToAdvPmt@1500076(GenJournalLine@1500001 : Record 81;TypeOfReverseCharge@1500004 : Option;PoT@1500003 : Boolean;DocumentType@1500002 : Option;VAR PurchaseGenJnlLine@1500000 : Record 81);
    VAR
      PurchaseHeader@1500010 : Record 38;
      PurchaseLine@1500009 : Record 39;
      ServiceTaxSetup@1500008 : Record 16472;
      TaxAmount@1500007 : Decimal;
      BaseAmount@1500006 : Decimal;
      PostedPurchaseDocumentNo@1500005 : Code[20];
    BEGIN
      // Post a purchase document, based on the advance payment
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ReverseServiceTaxHelper.GetBaseAndTaxAmountFromAdvPmt(
        BaseAmount,TaxAmount,ServiceTaxSetup,GenJournalLine.Amount,TypeOfReverseCharge,100);

      ReverseServiceTaxHelper.CreatePurchaseDocForAdvPayment(
        PurchaseHeader,PurchaseLine,GenJournalLine,DocumentType,TypeOfReverseCharge,100,PoT,BaseAmount);

      // Exercise: Post the purchase document
      PostedPurchaseDocumentNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      // values for verification
      ReverseServiceTaxHelper.ConvertDocToJnlLine(PurchaseHeader,PurchaseLine,PostedPurchaseDocumentNo,PurchaseGenJnlLine);
      PurchaseGenJnlLine."Service Tax Base Amount (LCY)" := BaseAmount;
      PurchaseGenJnlLine."Service Tax Amount" := TaxAmount;
    END;

    LOCAL PROCEDURE PostPrchDocRemAmtAdvPmt@1500043(DocumentType@1500002 : Option;RevChargeType@1500006 : Option;PoT@1500004 : Boolean);
    VAR
      GenJournalLine@1500007 : Record 81;
      PurchaseHeader1@1500005 : Record 38;
      PurchaseLine1@1500008 : Record 39;
      PurchaseHeader2@1500014 : Record 38;
      PurchaseLine2@1500013 : Record 39;
      ServiceTaxSetup@1500003 : Record 16472;
      PostedDocNo1@1500001 : Code[20];
      PostedDocNo2@1500015 : Code[20];
      InvoiceBaseAmount@1500017 : Decimal;
      RemainingAmount@1500000 : Decimal;
      PaymentBaseAmount@1500011 : Decimal;
      PaymentTaxAmount@1500012 : Decimal;
      TaxAmount@1500016 : Decimal;
      LastTransactionNo@1500018 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      // Setup

      // advance payment
      ReverseServiceTaxHelper.CreateAdvancePayment(GenJournalLine,GenJournalLine."Document Type"::Payment,
        PoT,ReverseServiceTaxHelper.GetReverseChargeServType(RevChargeType),RevChargeType,100);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // get base and tax amounts
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      PaymentBaseAmount := GenJournalLine."Service Tax Base Amount (LCY)";
      PaymentTaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(PaymentBaseAmount,ServiceTaxSetup);
      // first invoice
      InvoiceBaseAmount := ReverseServiceTaxHelper.RoundAmount(PaymentBaseAmount / 3);
      ReverseServiceTaxHelper.CreateDocAndApplyAdvPayment(PurchaseHeader1,PurchaseLine1,GenJournalLine,DocumentType,RevChargeType,100,
        PoT,InvoiceBaseAmount);

      PostedDocNo1 := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader1);

      RemainingAmount := PaymentBaseAmount - InvoiceBaseAmount;

      // second invoice
      ReverseServiceTaxHelper.CreateDocAndApplyAdvPayment(PurchaseHeader2,PurchaseLine2,GenJournalLine,DocumentType,
        ReverseChargeType,100,PoT,RemainingAmount);

      // Exercise
      PostedDocNo2 := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader2);

      // Verify
      ServiceTaxVerify.STEntriesAppln(LastTransactionNo,GenJournalLine,PaymentBaseAmount,RevChargeType);

      // Vendors, Domestic
      ServiceTaxVerify.VendorLedgerEntryOpen(GenJournalLine."Document No.",FALSE);
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedDocNo1,FALSE);
      ServiceTaxVerify.VendorLedgerEntryRemAmt(PostedDocNo2,0); // May be remaining amount = Service Tax Rounding Precision

      IF RevChargeType <> ReverseChargeType::" " THEN
        TaxAmount := PaymentTaxAmount
      ELSE
        TaxAmount := 0;
      ServiceTaxVerify.AdvPaymentOnlineAppGLBalance(RevChargeType,ServiceTaxSetup,TaxAmount,PoT);
    END;

    LOCAL PROCEDURE PostAndVerifyRefundOnAdvPmt@1500050(RevChargeType@1500012 : Option;PoT@1500011 : Boolean);
    VAR
      AdvPmtGenJnlLine@1500002 : Record 81;
      RefundGenJnlLine@1500001 : Record 81;
      LastTransactionNo@1500004 : Integer;
    BEGIN
      LastTransactionNo := Initialize;
      PostRefundOnAdvPmt(AdvPmtGenJnlLine,RefundGenJnlLine,RevChargeType,PoT);
      VerifyRefundOnAdvPmt(AdvPmtGenJnlLine,RefundGenJnlLine,LastTransactionNo);
    END;

    LOCAL PROCEDURE PostRefundOnAdvPmt@1500088(VAR AdvPmtGenJnlLine@1500002 : Record 81;VAR RefundGenJnlLine@1500001 : Record 81;RevChargeType@1500012 : Option;PoT@1500011 : Boolean);
    VAR
      ServiceTaxSetup@1500014 : Record 16472;
      BaseAmount@1500006 : Decimal;
      TaxAmount@1500007 : Decimal;
      RefundAmount@1500000 : Decimal;
    BEGIN
      // create and post advance payment
      ReverseServiceTaxHelper.CreateAdvancePayment(AdvPmtGenJnlLine,AdvPmtGenJnlLine."Document Type"::Payment,PoT,
        ReverseServiceTaxHelper.GetReverseChargeServType(RevChargeType),RevChargeType,100);
      LibraryERM.PostGeneralJnlLine(AdvPmtGenJnlLine);

      ServiceTaxSetup.FindOnDate(AdvPmtGenJnlLine."Service Tax Group Code",AdvPmtGenJnlLine."Posting Date");
      ReverseServiceTaxHelper.GetBaseAndTaxAmountFromAdvPmt(
        BaseAmount,TaxAmount,ServiceTaxSetup,AdvPmtGenJnlLine.Amount,RevChargeType,100);

      // Exercise
      // create refund and apply payment
      IF RevChargeType <> ReverseChargeType::" " THEN
        RefundAmount := BaseAmount
      ELSE
        RefundAmount := AdvPmtGenJnlLine.Amount;
      PostDocFromGenJournal(RefundGenJnlLine."Document Type"::Refund,AdvPmtGenJnlLine,RefundGenJnlLine,RefundAmount,TRUE);
    END;

    LOCAL PROCEDURE PostSlsInvPaySTUseCrAvailable@1500028(VAR PostedSalesInvoiceDocNo@1500001 : Code[20];PostedAdvancePaymentDocNo@1500000 : Code[20]);
    VAR
      ServiceTaxEntryDetails@1500002 : Record 16474;
    BEGIN
      // Post Sales Document and take credit
      ReverseServiceTaxHelper.GetServiceTaxEntryDetail(ServiceTaxEntryDetails,PostedAdvancePaymentDocNo);
      PostedSalesInvoiceDocNo := ReverseServiceTaxHelper.PostEqualAmountSalesDoc(ServiceTaxEntryDetails);
      LibraryServiceTax.PayServiceTax(ServiceTaxEntryDetails."Service Tax Registration No.",
        ServiceTaxEntryDetails."Service Tax Group Code",FALSE);
    END;

    LOCAL PROCEDURE PurcDocAmtLessThanAdvPmt@1500108(DocumentType@1500013 : Option;RevChargeType@1500012 : Option;PoT@1500010 : Boolean);
    VAR
      GenJournalLine@1500001 : Record 81;
      PurchaseHeader@1500009 : Record 38;
      PurchaseLine@1500003 : Record 39;
      ServiceTaxSetup@1500014 : Record 16472;
      PaymentBaseAmount@1500005 : Decimal;
      TaxAmount@1500004 : Decimal;
      InvoiceBaseAmount@1500007 : Decimal;
      PostedDocNo@1500000 : Code[20];
      PaymentTaxAmount@1500006 : Decimal;
      InvoiceTaxAmount@1500002 : Decimal;
      LastTransactionNo@1500008 : Integer;
      InvoiceKKCAmount@1500017 : Decimal;
      InvoiceSBCAmount@1500015 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;

      // create and post advance payment
      PostAdvancePayment(GenJournalLine,RevChargeType,PoT);

      // Exercise
      PostedDocNo :=
        PostPurcDocAmtLessThanAdvPmt(
          GenJournalLine,PurchaseHeader,PurchaseLine,PaymentBaseAmount,PaymentTaxAmount,
          InvoiceBaseAmount,InvoiceTaxAmount,DocumentType,RevChargeType,PoT);

      // Verify
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      InvoiceSBCAmount := ReverseServiceTaxHelper.CalculateSBC(InvoiceBaseAmount,ServiceTaxSetup);
      InvoiceKKCAmount := ReverseServiceTaxHelper.CalculateKKCess(InvoiceBaseAmount,ServiceTaxSetup);

      // Verify
      IF RevChargeType = ReverseChargeType::" " THEN
        IF NOT PoT THEN BEGIN
          VerifySTEntriesNoPoTPartialApp(LastTransactionNo,GenJournalLine,PaymentBaseAmount,InvoiceBaseAmount);
          TaxAmount := InvoiceTaxAmount;
        END ELSE BEGIN
          ServiceTaxVerify.STEntriesFullPurchFlow(LastTransactionNo,GenJournalLine,PaymentBaseAmount,RevChargeType);
          TaxAmount := InvoiceTaxAmount - PaymentTaxAmount;
        END
      ELSE BEGIN
        VerifySTEntriesRevCPartialApp(LastTransactionNo,GenJournalLine,PaymentBaseAmount,InvoiceBaseAmount);
        TaxAmount := PaymentTaxAmount;
      END;
      ServiceTaxVerify.VendorAndServicesEntries(PostedDocNo,GenJournalLine."Account No.",
        PurchaseLine."No.",FALSE,InvoiceBaseAmount,InvoiceTaxAmount + InvoiceSBCAmount + InvoiceKKCAmount,RevChargeType,TRUE);
      ServiceTaxVerify.AdvPaymentOnlineAppGLBalance(RevChargeType,ServiceTaxSetup,TaxAmount,PoT);
    END;

    LOCAL PROCEDURE UnapplyAdvPmtFromInvoice@1500027(DocumentType@1500008 : Option;RevChargeType@1500006 : Option;PoT@1500005 : Boolean);
    VAR
      PaymentGenJournalLine@1500001 : Record 81;
      BaseAmount@1500004 : Decimal;
      TaxAmount@1500002 : Decimal;
      ApplyTransactionNo@1500000 : Integer;
      LastTransactionNo@1500003 : Integer;
      PostedPurchaseDocNo@1500007 : Code[20];
      SBCAmount@1500010 : Decimal;
      KKCAmount@1500009 : Decimal;
    BEGIN
      // Setup
      LastTransactionNo := Initialize;
      PostedPurchaseDocNo :=
        ApplyAdvPmtToInvoice(
          PaymentGenJournalLine,BaseAmount,TaxAmount,SBCAmount,KKCAmount,
          DocumentType,RevChargeType,PoT);
      ApplyTransactionNo := ReverseServiceTaxHelper.GetLastTransactionNo;

      // Exercise
      ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(PaymentGenJournalLine."Document No.");

      // Verify
      VerifyUnapply(PaymentGenJournalLine,BaseAmount,TaxAmount,
        ApplyTransactionNo,LastTransactionNo,RevChargeType,PostedPurchaseDocNo,PoT);

      VerifyUnapplySBCKKC(PaymentGenJournalLine,SBCAmount,KKCAmount,RevChargeType,PoT);
    END;

    LOCAL PROCEDURE UnapplyPurcDocAmtLessThanAdPmt@1500025(DocumentType@1500013 : Option;RevChargeType@1500012 : Option;PoT@1500010 : Boolean);
    VAR
      PaymentGenJournalLine@1500001 : Record 81;
      PurchaseHeader@1500009 : Record 38;
      PurchaseLine@1500003 : Record 39;
      PaymentBaseAmount@1500005 : Decimal;
      InvoiceBaseAmount@1500007 : Decimal;
      PaymentTaxAmount@1500006 : Decimal;
      InvoiceTaxAmount@1500002 : Decimal;
      ApplyTransactionNo@1500000 : Integer;
      LastTransactionNo@1500011 : Integer;
      PostedPurchaseDocNo@1500008 : Code[20];
    BEGIN
      LastTransactionNo := Initialize;

      // Setup
      PostAdvancePayment(PaymentGenJournalLine,RevChargeType,PoT);
      PostedPurchaseDocNo :=
        PostPurcDocAmtLessThanAdvPmt(
          PaymentGenJournalLine,PurchaseHeader,PurchaseLine,PaymentBaseAmount,PaymentTaxAmount,
          InvoiceBaseAmount,InvoiceTaxAmount,DocumentType,RevChargeType,PoT);

      ApplyTransactionNo := ReverseServiceTaxHelper.GetLastTransactionNo;

      // Exercise
      ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(PaymentGenJournalLine."Document No.");

      // Verify
      VerifyUnapplyOfPartialAmount(PaymentGenJournalLine,PaymentBaseAmount,InvoiceBaseAmount,ApplyTransactionNo,
        LastTransactionNo,DocumentType,RevChargeType,PostedPurchaseDocNo,PoT);
    END;

    LOCAL PROCEDURE UnapplyRefundFromAdvPmt@1500067(RevChargeType@1500012 : Option;PoT@1500011 : Boolean);
    VAR
      AdvPmtGenJnlLine@1500001 : Record 81;
      RefundGenJnlLine@1500000 : Record 81;
      ServiceTaxSetup@1500006 : Record 16472;
      PaymentBaseAmount@1500004 : Decimal;
      PaymentTaxAmount@1500003 : Decimal;
      ApplyTransactionNo@1500002 : Integer;
      LastTransactionNo@1500005 : Integer;
    BEGIN
      // setup
      LastTransactionNo := Initialize;
      PostRefundOnAdvPmt(AdvPmtGenJnlLine,RefundGenJnlLine,RevChargeType,PoT);
      ApplyTransactionNo := ReverseServiceTaxHelper.GetLastTransactionNo;

      // exercise
      ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(RefundGenJnlLine."Document No.");

      // verify
      ServiceTaxSetup.FindOnDate(AdvPmtGenJnlLine."Service Tax Group Code",AdvPmtGenJnlLine."Posting Date");
      ReverseServiceTaxHelper.GetBaseAndTaxAmountFromAdvPmt(
        PaymentBaseAmount,PaymentTaxAmount,ServiceTaxSetup,AdvPmtGenJnlLine.Amount,RevChargeType,100);

      VerifyUnapplyOfRefund(
        AdvPmtGenJnlLine,ApplyTransactionNo,LastTransactionNo,RefundGenJnlLine."Document No.");
    END;

    LOCAL PROCEDURE UnapplyRemainingAmount@1500037(DocumentType@1500013 : Option;RevChargeType@1500012 : Option;PoT@1500010 : Boolean);
    VAR
      PaymentGenJournalLine@1500001 : Record 81;
      PurchaseHeader@1500011 : Record 38;
      PurchaseLine@1500003 : Record 39;
      RemainingAmtPurchaseLine@1500005 : Record 39;
      RemainingAmtPurchaseHeader@1500008 : Record 38;
      ServiceTaxSetup@1500020 : Record 16472;
      InvoiceBaseAmount@1500007 : Decimal;
      InvoiceTaxAmount@1500000 : Decimal;
      PaymentBaseAmount@1500002 : Decimal;
      PaymentTaxAmount@1500006 : Decimal;
      RemainingAmount@1500004 : Decimal;
      ApplyTransactionNo@1500014 : Integer;
      LastTransactionNo@1500015 : Integer;
      PostedPurchaseDocNo@1500009 : Code[20];
      InvoiceKKCAmount@1500017 : Decimal;
      PaymentKKCAmount@1500016 : Decimal;
      InvoiceSBCAmount@1500019 : Decimal;
      PaymentSBCAmount@1500018 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;

      // Setup

      // Advance payment
      PostAdvancePayment(PaymentGenJournalLine,RevChargeType,PoT);

      // First partial invoice
      PostPurcDocAmtLessThanAdvPmt(
        PaymentGenJournalLine,PurchaseHeader,PurchaseLine,PaymentBaseAmount,PaymentTaxAmount,
        InvoiceBaseAmount,InvoiceTaxAmount,DocumentType,RevChargeType,PoT);

      ServiceTaxSetup.FindOnDate(PaymentGenJournalLine."Service Tax Group Code",PaymentGenJournalLine."Posting Date");
      PaymentSBCAmount := ReverseServiceTaxHelper.CalculateSBC(PaymentBaseAmount,ServiceTaxSetup);
      PaymentKKCAmount := ReverseServiceTaxHelper.CalculateKKCess(PaymentBaseAmount,ServiceTaxSetup);
      InvoiceSBCAmount := ReverseServiceTaxHelper.CalculateSBC(InvoiceBaseAmount,ServiceTaxSetup);
      InvoiceKKCAmount := ReverseServiceTaxHelper.CalculateKKCess(InvoiceBaseAmount,ServiceTaxSetup);

      ApplyTransactionNo := ReverseServiceTaxHelper.GetLastTransactionNo;

      // Second invoice with the remaining amount
      RemainingAmount := PaymentBaseAmount - InvoiceBaseAmount;
      ReverseServiceTaxHelper.CreateDocAndApplyAdvPayment(
        RemainingAmtPurchaseHeader,RemainingAmtPurchaseLine,PaymentGenJournalLine,DocumentType,
        ReverseChargeType,100,PoT,RemainingAmount);
      PostedPurchaseDocNo := ReverseServiceTaxHelper.PostPurchaseDoc(RemainingAmtPurchaseHeader);

      // Exercise - unapply the second invoice
      ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(PostedPurchaseDocNo);

      // Verify
      IF PoT THEN
        ServiceTaxVerify.InitialRemainingCredit(ApplyTransactionNo,ApplyTransactionNo + 2);
      VerifyUnapplyOfRemainingAmount(
        PaymentGenJournalLine,PaymentTaxAmount,InvoiceTaxAmount,LastTransactionNo,RevChargeType,PostedPurchaseDocNo,PoT);
      VerifyUnapplyOfSBCKKCRemainingAmount(
        PaymentGenJournalLine,PaymentSBCAmount,InvoiceSBCAmount,PaymentKKCAmount,InvoiceKKCAmount,
        LastTransactionNo,RevChargeType,PoT);
    END;

    LOCAL PROCEDURE VerifyRefundOnAdvPmt@1500034(AdvPmtGenJnlLine@1500012 : Record 81;RefundGenJnlLine@1500011 : Record 81;LastTransactionNo@1500002 : Integer);
    VAR
      ServiceTaxSetup@1500000 : Record 16472;
    BEGIN
      ServiceTaxSetup.FindOnDate(AdvPmtGenJnlLine."Service Tax Group Code",AdvPmtGenJnlLine."Posting Date");
      ServiceTaxVerify.STEntriesCanceledDocument(LastTransactionNo);
      ServiceTaxVerify.VendorLedgerEntryOpen(AdvPmtGenJnlLine."Document No.",FALSE);
      ServiceTaxVerify.VendorLedgerEntryOpen(RefundGenJnlLine."Document No.",FALSE);
      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,0,0,0,0);
    END;

    LOCAL PROCEDURE VerifyGLEntriesForPayToGov@1500009(GenJournalLine@1500000 : Record 81;PostedPaymentDocNo@1500004 : Code[20]);
    VAR
      ServiceTaxSetup@1500003 : Record 16472;
      BaseAmount@1500001 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",
        GenJournalLine."Posting Date");
      ServiceTaxVerify.GLEntriesForSTPmtEntries(GenJournalLine.Amount,GenJournalLine."Document Type",
        BaseAmount,ServiceTaxSetup,PostedPaymentDocNo,GenJournalLine."Service Type (Rev. Chrg.)");
    END;

    LOCAL PROCEDURE VerifySTEntriesNoPoTPartialApp@1500011(LastTransactionNo@1500000 : Integer;PmtGenJnlLine@1500001 : Record 81;PmtBaseAmount@1500002 : Decimal;InvBaseAmount@1500004 : Decimal);
    VAR
      ExpectedServTaxEntry@1500006 : Record 16473;
      ExpectedServTaxEntryDetails@1500003 : Record 16474;
    BEGIN
      ReverseServiceTaxHelper.FillExpectedAmntsSTEntry(PmtGenJnlLine,PmtBaseAmount + InvBaseAmount,ExpectedServTaxEntry);
      ServiceTaxVerify.STEntryBalances(LastTransactionNo,ExpectedServTaxEntry);

      IF PmtBaseAmount < InvBaseAmount THEN
        ReverseServiceTaxHelper.FillExpectedAmntsSTEntry(PmtGenJnlLine,PmtBaseAmount,ExpectedServTaxEntry)
      ELSE
        ReverseServiceTaxHelper.FillExpectedAmntsSTEntry(PmtGenJnlLine,InvBaseAmount,ExpectedServTaxEntry);

      ReverseServiceTaxHelper.FillExpectedAmntsFullPurchFlow(ExpectedServTaxEntryDetails,ExpectedServTaxEntry);
      ServiceTaxVerify.STEntryDtlsBalancesAndStatuses(LastTransactionNo,ExpectedServTaxEntryDetails);
    END;

    LOCAL PROCEDURE VerifySTEntriesRevCPartialApp@1500020(LastTransactionNo@1500000 : Integer;PmtGenJnlLine@1500001 : Record 81;PmtBaseAmount@1500002 : Decimal;InvBaseAmount@1500004 : Decimal);
    VAR
      ExpectedServTaxEntry@1500006 : Record 16473;
      ExpectedServTaxEntryDetails@1500003 : Record 16474;
      BaseAmount@1500005 : Decimal;
    BEGIN
      IF PmtBaseAmount > InvBaseAmount THEN
        BaseAmount := PmtBaseAmount
      ELSE
        BaseAmount := InvBaseAmount;

      ReverseServiceTaxHelper.FillExpectedAmntsSTEntry(PmtGenJnlLine,BaseAmount,ExpectedServTaxEntry);

      ServiceTaxVerify.STEntryBalances(LastTransactionNo,ExpectedServTaxEntry);

      IF PmtBaseAmount < InvBaseAmount THEN
        ReverseServiceTaxHelper.FillExpectedAmntsSTEntry(PmtGenJnlLine,PmtBaseAmount,ExpectedServTaxEntry);

      ReverseServiceTaxHelper.FillExpectedAmntsRevChrgAppln(ExpectedServTaxEntryDetails,ExpectedServTaxEntry);

      ServiceTaxVerify.STEntryDtlsBalancesAndStatuses(LastTransactionNo,ExpectedServTaxEntryDetails);
    END;

    LOCAL PROCEDURE VerifyPostedAppAdvPmtToInv@1500045(AdvancePaymentGenJnlLine@1500005 : Record 81;InvoiceGenJnlLine@1500001 : Record 81;BaseAmount@1500002 : Decimal;ServiceTaxAmount@1500004 : Decimal;LastTransactionNo@1500000 : Integer;ReverseChargeTypeParam@1500003 : Option);
    VAR
      ServiceTaxSetup@1500006 : Record 16472;
    BEGIN
      ServiceTaxSetup.FindOnDate(AdvancePaymentGenJnlLine."Service Tax Group Code",AdvancePaymentGenJnlLine."Posting Date");

      ServiceTaxVerify.STEntriesAppln(LastTransactionNo,AdvancePaymentGenJnlLine,BaseAmount,ReverseChargeTypeParam);

      ServiceTaxVerify.VendorLedgerEntryOpen(InvoiceGenJnlLine."Document No.",FALSE);
      ServiceTaxVerify.VendorLedgerEntryOpen(AdvancePaymentGenJnlLine."Document No.",FALSE);

      IF ReverseChargeTypeParam = ReverseChargeType::" " THEN
        ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,ServiceTaxAmount,0,0,0)
      ELSE
        ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,0,ServiceTaxAmount,-ServiceTaxAmount,0);
    END;

    LOCAL PROCEDURE VerifyUnapply@1500070(PaymentGenJournalLine@1500008 : Record 81;PaymentBaseAmount@1500009 : Decimal;PaymentTaxAmount@1500007 : Decimal;ApplyTransactionNo@1500005 : Integer;LastTransactionNo@1500004 : Integer;RevChargeType@1500001 : Option;PostedPurchaseDocNo@1500003 : Code[20];PoT@1500000 : Boolean);
    VAR
      ServiceTaxSetup@1500006 : Record 16472;
    BEGIN
      ServiceTaxVerify.UnappliedAdvSTEntryDetBalances(
        PaymentBaseAmount,PaymentGenJournalLine."Document Type",LastTransactionNo,PaymentGenJournalLine."Service Tax Group Code",
        PaymentGenJournalLine."Posting Date",RevChargeType,PoT);

      ServiceTaxVerify.VendorLedgerEntryOpen(PostedPurchaseDocNo,TRUE);
      ServiceTaxVerify.VendorLedgerEntryOpen(PaymentGenJournalLine."Document No.",TRUE);
      ServiceTaxSetup.FindOnDate(PaymentGenJournalLine."Service Tax Group Code",PaymentGenJournalLine."Posting Date");
      ServiceTaxVerify.PostedAdvPmtAndInvGLBalance(ServiceTaxSetup,RevChargeType,PoT,PaymentTaxAmount);
      ServiceTaxVerify.UnappliedSTEntryDetails(ApplyTransactionNo);
    END;

    LOCAL PROCEDURE VerifyUnapplySBCKKC@1500096(PaymentGenJournalLine@1500005 : Record 81;PaymentSBCAmount@1500002 : Decimal;PaymentKKCAmount@1500004 : Decimal;RevChargeType@1500001 : Option;PoT@1500000 : Boolean);
    VAR
      ServiceTaxSetup@1500006 : Record 16472;
    BEGIN
      ServiceTaxSetup.FindOnDate(PaymentGenJournalLine."Service Tax Group Code",PaymentGenJournalLine."Posting Date");
      ServiceTaxVerify.PostedSBCKKCAdvPmtAndInvGLBalance(ServiceTaxSetup,RevChargeType,PoT,PaymentSBCAmount,PaymentKKCAmount);
    END;

    LOCAL PROCEDURE VerifyUnapplyOfPartialAmount@1500074(PaymentGenJournalLine@1500008 : Record 81;PaymentBaseAmount@1500009 : Decimal;InvoiceBaseAmount@1500010 : Decimal;ApplyTransactionNo@1500005 : Integer;LastTransactionNo@1500004 : Integer;DocumentType@1500002 : Option;RevChargeType@1500001 : Option;PostedPurchaseDocNo@1500003 : Code[20];PoT@1500000 : Boolean);
    VAR
      ServiceTaxSetup@1500006 : Record 16472;
    BEGIN
      ServiceTaxVerify.UnappAdvPmtPartialSTEntrDetBal(
        PaymentBaseAmount,InvoiceBaseAmount,DocumentType,LastTransactionNo,
        PaymentGenJournalLine."Service Tax Group Code",PaymentGenJournalLine."Posting Date",RevChargeType,PoT);
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedPurchaseDocNo,TRUE);
      ServiceTaxVerify.VendorLedgerEntryOpen(PaymentGenJournalLine."Document No.",TRUE);

      ServiceTaxSetup.FindOnDate(PaymentGenJournalLine."Service Tax Group Code",PaymentGenJournalLine."Posting Date");
      ServiceTaxVerify.PostedAdvPmtAndInvGLBalPartial(
        ServiceTaxSetup,RevChargeType,DocumentType,PoT,PaymentBaseAmount,InvoiceBaseAmount);

      ServiceTaxVerify.UnappliedSTEntryDetails(ApplyTransactionNo);
    END;

    LOCAL PROCEDURE VerifyUnapplyOfRefund@1500075(PaymentGenJournalLine@1500008 : Record 81;ApplyTransactionNo@1500005 : Integer;LastTransactionNo@1500004 : Integer;PostedPurchaseDocNo@1500003 : Code[20]);
    VAR
      ServiceTaxSetup@1500006 : Record 16472;
    BEGIN
      ServiceTaxVerify.UnappAdvRefundSTEntryDetBal(LastTransactionNo);
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedPurchaseDocNo,TRUE);
      ServiceTaxVerify.VendorLedgerEntryOpen(PaymentGenJournalLine."Document No.",TRUE);
      ServiceTaxSetup.FindOnDate(PaymentGenJournalLine."Service Tax Group Code",PaymentGenJournalLine."Posting Date");
      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,0,0,0,0);
      ServiceTaxVerify.SBCGLAccountsBalance(ServiceTaxSetup,0,0,0,0);
      ServiceTaxVerify.KKCGLAccountsBalance(ServiceTaxSetup,0,0,0,0);
      ServiceTaxVerify.UnappliedSTEntryDetails(ApplyTransactionNo);
    END;

    LOCAL PROCEDURE VerifyUnapplyOfRemainingAmount@1500069(PaymentGenJournalLine@1500008 : Record 81;AdvPaymentTaxAmount@1500007 : Decimal;FirstInvoiceTaxAmount@1500009 : Decimal;LastTransactionNo@1500004 : Integer;RevChargeType@1500001 : Option;PostedPurchaseDocNo@1500003 : Code[20];PoT@1500000 : Boolean);
    VAR
      ServiceTaxSetup@1500006 : Record 16472;
    BEGIN
      ServiceTaxVerify.UnappAdvPmtRemainSTEntryDetBal(
        AdvPaymentTaxAmount,FirstInvoiceTaxAmount,LastTransactionNo,RevChargeType,PoT);
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedPurchaseDocNo,TRUE);
      ServiceTaxVerify.VendorLedgerEntryOpen(PaymentGenJournalLine."Document No.",TRUE);
      ServiceTaxSetup.FindOnDate(PaymentGenJournalLine."Service Tax Group Code",PaymentGenJournalLine."Posting Date");
      ServiceTaxVerify.UnappAdvPmtRemainingGLBalances(ServiceTaxSetup,RevChargeType,PoT,AdvPaymentTaxAmount,FirstInvoiceTaxAmount);
    END;

    LOCAL PROCEDURE VerifyUnapplyOfSBCKKCRemainingAmount@1500093(PaymentGenJournalLine@1500005 : Record 81;AdvPaymentSBCAmount@1500007 : Decimal;FirstInvoiceSBCAmount@1500009 : Decimal;AdvPaymentKKCAmount@1500004 : Decimal;FirstInvoiceKKCAmount@1500003 : Decimal;LastTransactionNo@1500002 : Integer;RevChargeType@1500001 : Option;PoT@1500000 : Boolean);
    VAR
      ServiceTaxSetup@1500006 : Record 16472;
    BEGIN
      ServiceTaxVerify.UnappAdvPmtRemainSBCKKCEntryDetBal(AdvPaymentSBCAmount,FirstInvoiceSBCAmount,
        AdvPaymentKKCAmount,FirstInvoiceKKCAmount,LastTransactionNo,RevChargeType,PoT);
      ServiceTaxSetup.FindOnDate(PaymentGenJournalLine."Service Tax Group Code",PaymentGenJournalLine."Posting Date");
      ServiceTaxVerify.UnappAdvPmtRemainingGLSBCKKCBalances(ServiceTaxSetup,RevChargeType,PoT,AdvPaymentSBCAmount,
        FirstInvoiceSBCAmount,AdvPaymentKKCAmount,FirstInvoiceKKCAmount);
    END;

    [ModalPageHandler]
    PROCEDURE PayServiceTaxHandler@1500073(VAR PayServiceTax@1500000 : TestPage 16477);
    BEGIN
      LibraryServiceTax.SetValuesForPaymentUseCreditAvailable(PayServiceTax);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500072(Message@1500000 : Text[1024]);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE STaxCreditRegisterReportHandler@1500174(VAR ServTaxCreditRegister@1500000 : TestRequestPage 16592);
    BEGIN
      ServiceTaxReportHelper.ServTaxCreditRegisterReportHandler(ServTaxCreditRegister);
    END;

    [RequestPageHandler]
    PROCEDURE ServTaxRegisterReportHandler@1500092(VAR ServiceTaxRegister@1500000 : TestRequestPage 16473);
    BEGIN
      ServiceTaxReportHelper.ServTaxRegisterReportHandler(ServiceTaxRegister);
    END;

    [RequestPageHandler]
    PROCEDURE InputServiceDetailsReportHandler@1500089(VAR InputServiceDetails@1500000 : TestRequestPage 16474);
    BEGIN
      ServiceTaxReportHelper.InputServiceDetailsReportHandler(InputServiceDetails);
    END;

    BEGIN
    END.
  }
}

