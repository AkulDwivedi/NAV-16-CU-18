OBJECT Codeunit 134556 ERM CF GL Budget
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryRandom@1003 : Codeunit 130440;
      Assert@1002 : Codeunit 130000;
      LibraryERM@1004 : Codeunit 131300;
      LibraryCashFlow@1001 : Codeunit 131331;
      LibraryDimension@1005 : Codeunit 131001;

    [Test]
    PROCEDURE GLBudgetIntegrationBeginTotal@24();
    VAR
      GLAccount@1001 : Record 15;
      CashFlowAccount@1000 : Record 841;
    BEGIN
      GLBudgetIntegration(GLAccount."Account Type"::"Begin-Total",CashFlowAccount."G/L Integration"::Budget);
    END;

    [Test]
    PROCEDURE GLBudgetIntegrationEndTotal@25();
    VAR
      GLAccount@1001 : Record 15;
      CashFlowAccount@1000 : Record 841;
    BEGIN
      // Integration on End-Total accounts should fail the test
      ASSERTERROR GLBudgetIntegration(GLAccount."Account Type"::"End-Total",CashFlowAccount."G/L Integration"::Budget);
      // Assert.ExpectedError('There is no CashFlowForecast Ledger Entry within the filter.');
    END;

    [Test]
    PROCEDURE GLBudgetIntegrationBudget@48();
    VAR
      GLAccount@1001 : Record 15;
      CashFlowAccount@1000 : Record 841;
    BEGIN
      GLBudgetIntegration(GLAccount."Account Type"::Posting,CashFlowAccount."G/L Integration"::Budget);
    END;

    [Test]
    PROCEDURE GLBudgetIntegrationBalance@51();
    VAR
      GLAccount@1001 : Record 15;
      CashFlowAccount@1000 : Record 841;
    BEGIN
      // Integration with balance sheet should fail the test
      ASSERTERROR GLBudgetIntegration(GLAccount."Account Type"::Posting,CashFlowAccount."G/L Integration"::Balance);
      // Assert.ExpectedError('There is no CashFlowForecast Ledger Entry within the filter.');
    END;

    [Test]
    PROCEDURE GLBudgetIntegrationBoth@50();
    VAR
      GLAccount@1001 : Record 15;
      CashFlowAccount@1000 : Record 841;
    BEGIN
      GLBudgetIntegration(GLAccount."Account Type"::Posting,CashFlowAccount."G/L Integration"::Both);
    END;

    [Test]
    PROCEDURE GLBudgetIntegrationBlank@5();
    VAR
      GLAccount@1001 : Record 15;
      CashFlowAccount@1000 : Record 841;
    BEGIN
      // No integration should fail the test
      ASSERTERROR GLBudgetIntegration(GLAccount."Account Type"::Posting,CashFlowAccount."G/L Integration"::" ");
      // Assert.ExpectedError('There is no CashFlowForecast Ledger Entry within the filter.');
    END;

    LOCAL PROCEDURE GLBudgetIntegration@7(GLAccountType@1010 : Option;Integration@1009 : Option);
    VAR
      CashFlowForecast@1004 : Record 840;
      CashFlowAccount@1000 : Record 841;
      TempCashFlowForecastEntry@1008 : TEMPORARY Record 847;
      GLAccount@1001 : Record 15;
      GLBudgetName@1002 : Record 95;
      GLBudgetEntry@1003 : Record 96;
      FromDate@1006 : Date;
      ToDate@1007 : Date;
    BEGIN
      // Setup
      FromDate := DMY2DATE(1,1,DATE2DMY(WORKDATE,3));
      ToDate := DMY2DATE(31,12,DATE2DMY(WORKDATE,3));

      LibraryCashFlow.FindCashFlowAccount(CashFlowAccount);
      FindGLAccount(GLAccount,GLAccountType);
      LinkCFAccount(CashFlowAccount,GLAccount,Integration);
      // End-Total accounts posts to Begin-Total counterparts
      IF GLAccount."Account Type" = GLAccount."Account Type"::"End-Total" THEN
        FindBeginAccount(GLAccount);

      LibraryERM.CreateGLBudgetName(GLBudgetName);
      LibraryERM.CreateGLBudgetEntry(GLBudgetEntry,WORKDATE,GLAccount."No.",GLBudgetName.Name);
      GLBudgetEntry.VALIDATE("Dimension Set ID",CreateDimensionSetID);
      GLBudgetEntry.VALIDATE(Amount,LibraryRandom.RandDec(1000,2));
      GLBudgetEntry.MODIFY(TRUE);
      StoreCashFlowBudgetEntry(TempCashFlowForecastEntry,GLBudgetEntry);
      LibraryCashFlow.CreateCashFlowCard(CashFlowForecast);
      CashFlowForecast.VALIDATE("G/L Budget From",FromDate);
      CashFlowForecast.VALIDATE("G/L Budget To",ToDate);
      CashFlowForecast.MODIFY(TRUE);
      LibraryCashFlow.ClearJournal;

      // Exercise
      LibraryCashFlow.FillBudgetJournal(FALSE,CashFlowForecast."No.",GLBudgetName.Name);
      LibraryCashFlow.PostJournal;

      // Verify
      VerifyCashFlowLedgerEntries(TempCashFlowForecastEntry,CashFlowForecast);
    END;

    [Test]
    PROCEDURE GLBalanceIntegrationBeginTotal@64();
    VAR
      GLAccount@1001 : Record 15;
      CashFlowAccount@1000 : Record 841;
    BEGIN
      // Integration on Begin-Total should fail the test
      ASSERTERROR GLBalanceIntegration(GLAccount."Account Type"::"Begin-Total",CashFlowAccount."G/L Integration"::Balance);
      // Assert.ExpectedError('There is no CashFlowForecast Ledger Entry within the filter.');
    END;

    [Test]
    PROCEDURE GLBalanceIntegrationEndTotal@65();
    VAR
      GLAccount@1001 : Record 15;
      CashFlowAccount@1000 : Record 841;
    BEGIN
      GLBalanceIntegration(GLAccount."Account Type"::"End-Total",CashFlowAccount."G/L Integration"::Balance);
    END;

    [Test]
    PROCEDURE GLBalanceIntegrationBudget@57();
    VAR
      GLAccount@1001 : Record 15;
      CashFlowAccount@1000 : Record 841;
    BEGIN
      // Integration with budget should fail the test
      ASSERTERROR GLBalanceIntegration(GLAccount."Account Type"::Posting,CashFlowAccount."G/L Integration"::Budget);
      // Assert.ExpectedError('There is no CashFlowForecast Ledger Entry within the filter.');
    END;

    [Test]
    PROCEDURE GLBalanceIntegrationBalance@36();
    VAR
      GLAccount@1001 : Record 15;
      CashFlowAccount@1000 : Record 841;
    BEGIN
      GLBalanceIntegration(GLAccount."Account Type"::Posting,CashFlowAccount."G/L Integration"::Balance);
    END;

    [Test]
    PROCEDURE GLBalanceIntegrationBoth@58();
    VAR
      GLAccount@1001 : Record 15;
      CashFlowAccount@1000 : Record 841;
    BEGIN
      GLBalanceIntegration(GLAccount."Account Type"::Posting,CashFlowAccount."G/L Integration"::Both);
    END;

    [Test]
    PROCEDURE GLBalanceIntegrationNone@60();
    VAR
      GLAccount@1001 : Record 15;
      CashFlowAccount@1000 : Record 841;
    BEGIN
      // No integration should fail the test
      ASSERTERROR GLBalanceIntegration(GLAccount."Account Type"::Posting,CashFlowAccount."G/L Integration"::" ");
      // Assert.ExpectedError('There is no CashFlowForecast Ledger Entry within the filter.');
    END;

    LOCAL PROCEDURE GLBalanceIntegration@33(GLAccountType@1010 : Option;Integration@1009 : Option);
    VAR
      CashFlowForecast@1004 : Record 840;
      CashFlowAccount@1000 : Record 841;
      TempCashFlowForecastEntry@1008 : TEMPORARY Record 847;
      GLAccount@1001 : Record 15;
      ConsiderSource@1002 : ARRAY [11] OF Boolean;
    BEGIN
      // Setup
      ClearCFAccountLinks;
      LibraryCashFlow.FindCashFlowAccount(CashFlowAccount);
      CreateGLAccountWithBalance(GLAccount,GLAccountType);
      LinkCFAccount(CashFlowAccount,GLAccount,Integration);

      StoreCashFlowBalanceEntry(TempCashFlowForecastEntry,GLAccount);
      LibraryCashFlow.CreateCashFlowCard(CashFlowForecast);
      LibraryCashFlow.ClearJournal;

      // Exercise
      ConsiderSource[CashFlowForecast."Source Type Filter"::"Liquid Funds"] := TRUE;
      LibraryCashFlow.FillJournal(ConsiderSource,CashFlowForecast."No.",FALSE);
      LibraryCashFlow.PostJournal;

      // Verify
      VerifyCashFlowLedgerEntries(TempCashFlowForecastEntry,CashFlowForecast);
    END;

    LOCAL PROCEDURE StoreCashFlowBudgetEntry@9(VAR CashFlowForecastEntry@1000 : Record 847;GLBudgetEntry@1001 : Record 96);
    BEGIN
      WITH CashFlowForecastEntry DO BEGIN
        "Amount (LCY)" := -GLBudgetEntry.Amount;
        "Dimension Set ID" := GLBudgetEntry."Dimension Set ID";
        "Cash Flow Date" := GLBudgetEntry.Date;
        INSERT(FALSE);
      END;
    END;

    LOCAL PROCEDURE StoreCashFlowBalanceEntry@42(VAR CashFlowForecastEntry@1000 : Record 847;GLAccount@1001 : Record 15);
    BEGIN
      WITH CashFlowForecastEntry DO BEGIN
        GLAccount.CALCFIELDS(Balance);
        "Amount (LCY)" := GLAccount.Balance;
        "Dimension Set ID" := 0; // GLAccount."Dimension Set ID";
        "Cash Flow Date" := WORKDATE;
        INSERT(FALSE);
      END;
    END;

    LOCAL PROCEDURE FindGLAccount@59(VAR GLAccount@1000 : Record 15;AccountType@1001 : Option);
    BEGIN
      // Filter G/L Account so that errors are not generated due to mandatory fields.
      GLAccount.SETRANGE(Blocked,FALSE);
      GLAccount.SETRANGE("Account Type",AccountType);
      GLAccount.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateGLAccountWithBalance@61(VAR GLAccount@1000 : Record 15;AccountType@1001 : Option);
    VAR
      BeginTotalAccNo@1004 : Code[20];
    BEGIN
      CASE AccountType OF
        GLAccount."Account Type"::"Begin-Total":
          GLAccount.GET(CreateGLAccWithType(GLAccount."Account Type"::"Begin-Total"));
        GLAccount."Account Type"::Posting:
          GLAccount.GET(CreatePostGLAccount);
        GLAccount."Account Type"::"End-Total":
          BEGIN
            BeginTotalAccNo := CreateGLAccWithType(GLAccount."Account Type"::"Begin-Total");
            CreatePostGLAccount;
            GLAccount.GET(CreateGLAccWithType(GLAccount."Account Type"::"End-Total"));
            GLAccount.VALIDATE(
              Totaling,STRSUBSTNO('%1..%2',BeginTotalAccNo,GLAccount."No."));
            GLAccount.MODIFY(TRUE);
          END;
      END;
    END;

    LOCAL PROCEDURE CreatePostGLAccount@27() : Code[20];
    VAR
      GLAccount@1000 : Record 15;
      GenJnlLine@1001 : Record 81;
      GenJnlBatch@1002 : Record 232;
    BEGIN
      WITH GenJnlLine DO BEGIN
        LibraryERM.FindGLAccount(GLAccount);
        InitGenJnlLine(GenJnlLine);
        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
        LibraryERM.ClearGenJournalLines(GenJnlBatch);
        LibraryERM.CreateGeneralJnlLine(
          GenJnlLine,"Journal Template Name","Journal Batch Name",
          0,"Account Type"::"G/L Account",CreateGLAccWithType(GLAccount."Account Type"::Posting),1);
        VALIDATE("Bal. Account Type","Bal. Account Type"::"G/L Account");
        VALIDATE("Bal. Account No.",GLAccount."No.");
        MODIFY(TRUE);
        LibraryERM.PostGeneralJnlLine(GenJnlLine);
        EXIT("Account No.");
      END;
    END;

    LOCAL PROCEDURE CreateGLAccWithType@6(AccountType@1001 : Option) : Code[20];
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Account Type",AccountType);
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE InitGenJnlLine@17(VAR GenJnlLine@1000 : Record 81);
    VAR
      GenJnlTemplate@1001 : Record 80;
      GenJnlBatch@1002 : Record 232;
    BEGIN
      GenJnlTemplate.SETRANGE(Type,GenJnlTemplate.Type::General); // required for NL
      LibraryERM.FindGenJournalTemplate(GenJnlTemplate);
      LibraryERM.FindGenJournalBatch(GenJnlBatch,GenJnlTemplate.Name);
      GenJnlLine."Journal Template Name" := GenJnlBatch."Journal Template Name";
      GenJnlLine."Journal Batch Name" := GenJnlBatch.Name;
    END;

    LOCAL PROCEDURE FindBeginAccount@4(VAR GLAccount@1000 : Record 15);
    VAR
      GLAccount2@1001 : Record 15;
    BEGIN
      // Returns the matching Begin-Total account to an End-Total account
      GLAccount2.GET(GLAccount."No.");
      WITH GLAccount2 DO
        REPEAT
          NEXT(-1);
        UNTIL (Indentation = GLAccount.Indentation) AND ("Account Type" = "Account Type"::"Begin-Total");

      GLAccount.GET(GLAccount2."No.");
    END;

    LOCAL PROCEDURE ClearCFAccountLinks@39();
    VAR
      CFAccount@1001 : Record 841;
    BEGIN
      CFAccount.MODIFYALL("G/L Account Filter",'');
      CFAccount.MODIFYALL("G/L Integration",CFAccount."G/L Integration"::" ");
    END;

    LOCAL PROCEDURE LinkCFAccount@3(VAR CFAccount@1000 : Record 841;VAR GLAccount@1001 : Record 15;LinkType@1002 : Option);
    BEGIN
      CFAccount.VALIDATE("G/L Account Filter",GLAccount."No.");
      CFAccount.VALIDATE("G/L Integration",LinkType);
      CFAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDimensionSetID@18() : Integer;
    VAR
      Dimension@1000 : Record 348;
      DimensionValue@1001 : Record 349;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      EXIT(LibraryDimension.CreateDimSet(0,Dimension.Code,DimensionValue.Code));
    END;

    LOCAL PROCEDURE VerifyCashFlowLedgerEntries@13(VAR CashFlowForecastEntry@1000 : Record 847;CashFlowForecast@1002 : Record 840);
    VAR
      CashFlowForecastEntry2@1001 : Record 847;
    BEGIN
      CashFlowForecastEntry2.SETRANGE("Cash Flow Forecast No.",CashFlowForecast."No.");
      CashFlowForecastEntry2.FINDSET;
      CashFlowForecastEntry.FINDSET;
      Assert.AreEqual(CashFlowForecastEntry.COUNT,CashFlowForecastEntry2.COUNT,'Unexpected number of cash flow ledger entries');

      WITH CashFlowForecastEntry2 DO
        REPEAT
          CashFlowForecastEntry.SETRANGE("Amount (LCY)","Amount (LCY)");
          CashFlowForecastEntry.SETRANGE("Dimension Set ID","Dimension Set ID");
          CashFlowForecastEntry.SETRANGE("Cash Flow Date","Cash Flow Date");
          Assert.IsTrue(CashFlowForecastEntry.FINDFIRST,'Did not find expected cash flow ledger entry');
        UNTIL NEXT = 0;
    END;

    BEGIN
    {
      // [FEATURE] [Cash Flow] [G/L Integration]
    }
    END.
  }
}

