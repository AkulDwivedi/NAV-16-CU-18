OBJECT Codeunit 134231 ERM Bank Account
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryUtility@1002 : Codeunit 131000;
      LibraryVariableStorage@1004 : Codeunit 131004;
      Assert@1003 : Codeunit 130000;
      LibraryPurchase@1007 : Codeunit 130512;
      LibrarySales@1006 : Codeunit 130509;
      WrongIBANErr@1005 : TextConst 'ENU=Wrong number in the field IBAN.';
      BankAccDeleteErr@1009 : TextConst 'ENU=You cannot delete this bank account because there are one or more open ledger entries associated with the bank account.';

    [Test]
    PROCEDURE CRUDBankAccount@2();
    VAR
      BankAccount@1000 : Record 270;
      AccountNo@1001 : Code[20];
      AccountName@1002 : Text[50];
    BEGIN
      Initialize;
      // Create a new bank account
      EVALUATE(AccountNo,LibraryUtility.GenerateRandomCode(BankAccount.FIELDNO("No."),DATABASE::"Bank Account"));
      EVALUATE(AccountName,LibraryUtility.GenerateRandomCode(BankAccount.FIELDNO(Name),DATABASE::"Bank Account"));

      WITH BankAccount DO BEGIN
        "No." := AccountNo;
        IBAN := FindIBAN;  // Value important for IT.
        INSERT(TRUE);
      END;

      // Verify it exists
      Assert.IsTrue(BankAccount.GET(AccountNo),'Failed to find newly created bank account');

      // Update the bank account
      BankAccount.VALIDATE(Name,AccountName);
      BankAccount.MODIFY(TRUE);

      // Verify it got changed
      Assert.AreEqual(BankAccount.Name,AccountName,'Bank account information did not get updated');

      // Delete the bank account
      BankAccount.GET(AccountNo);
      BankAccount.DELETE(TRUE);

      // Verify it no longer exists
      Assert.IsFalse(BankAccount.GET(AccountNo),'Bank account still exists after deletion');
    END;

    [Test]
    [HandlerFunctions(IBANConfirmHandler)]
    PROCEDURE CheckBankAccIBANConfirmYes@1();
    BEGIN
      // Purpose of the test is to modify IBAN field of table Bank Account and confirm Yes.
      AssignBankAccIBANnumber(TRUE);
    END;

    [Test]
    [HandlerFunctions(IBANConfirmHandler)]
    PROCEDURE CheckBankAccIBANConfirmNo@9();
    BEGIN
      // Purpose of the test is to modify IBAN field of table Bank Account and confirm No.
      AssignBankAccIBANnumber(FALSE);
    END;

    [Test]
    [HandlerFunctions(IBANConfirmHandler)]
    PROCEDURE CheckVendBankAccIBANConfirmYes@7();
    BEGIN
      // Purpose of the test is to modify IBAN field of table Vendor Bank Account and confirm Yes.
      AssignVendBankAccIBANnumber(TRUE);
    END;

    [Test]
    [HandlerFunctions(IBANConfirmHandler)]
    PROCEDURE CheckVendBankAccIBANConfirmNo@6();
    BEGIN
      // Purpose of the test is to modify IBAN field of table Vendor Bank Account and confirm No.
      AssignVendBankAccIBANnumber(FALSE);
    END;

    [Test]
    PROCEDURE DeleteVendBankAccWithAssociatedOpenEntry@3();
    VAR
      Vendor@1000 : Record 23;
      VendorBankAccount@1003 : Record 288;
    BEGIN
      // [FEATURE] [UT] [Purchase]
      // [SCENARIO 378203] Vendor Bank Account cannot be deleted when it has associated open entries
      Initialize;

      // [GIVEN] Vendor with Vendor Bank Account "X"
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreateVendorBankAccount(VendorBankAccount,Vendor."No.");

      // [GIVEN] Opened Vendor Ledger Entry with "Recipient Bank Account" = "X"
      CreateVendLedgEntry(VendorBankAccount,TRUE);

      // [WHEN] Delete Vendor Bank Account "X"
      ASSERTERROR VendorBankAccount.DELETE(TRUE);

      // [THEN] Error Message: You cannot delete this bank account because there are one or more open entries associated with it.
      Assert.ExpectedError(BankAccDeleteErr);
    END;

    [Test]
    PROCEDURE DeleteCustBankAccWithAssociatedOpenEntry@35();
    VAR
      Customer@1000 : Record 18;
      CustomerBankAccount@1003 : Record 287;
    BEGIN
      // [FEATURE] [UT] [Sales]
      // [SCENARIO 378203] Customer Bank Account cannot be deleted when it has associated open entries
      Initialize;

      // [GIVEN] Customer with Customer Bank Account "X"
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateCustomerBankAccount(CustomerBankAccount,Customer."No.");

      // [GIVEN] Opened Customer Ledger Entry with "Recipient Bank Account" = "X"
      CreateCustLedgEntry(CustomerBankAccount,TRUE);

      // [WHEN] Delete Customer Bank Account "X"
      ASSERTERROR CustomerBankAccount.DELETE(TRUE);

      // [THEN] Error Message: You cannot delete this bank account because there are one or more open entries associated with it.
      Assert.ExpectedError(BankAccDeleteErr);
    END;

    [Test]
    PROCEDURE DeleteVendBankAccWithAssociatedClosedEntry@12();
    VAR
      Vendor@1000 : Record 23;
      VendorBankAccount@1003 : Record 288;
      VendorLedgerEntry@1002 : Record 25;
      VendorBankAccountCode@1001 : Code[10];
    BEGIN
      // [FEATURE] [UT] [Purchase]
      // [SCENARIO 378203] Vendor Bank Account can be deleted when it has associated closed entries
      Initialize;

      // [GIVEN] Vendor with Vendor Bank Account "X"
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreateVendorBankAccount(VendorBankAccount,Vendor."No.");
      VendorBankAccountCode := VendorBankAccount.Code;

      // [GIVEN] Closed Vendor Ledger Entry with "Recipient Bank Account" = "X"
      CreateVendLedgEntry(VendorBankAccount,FALSE);

      // [WHEN] Delete Vendor Bank Account "X"
      VendorBankAccount.DELETE(TRUE);

      // [THEN] Closed entries are not deleted
      VendorLedgerEntry.INIT;
      VendorLedgerEntry.SETRANGE("Vendor No.",Vendor."No.");
      VendorLedgerEntry.SETRANGE("Recipient Bank Account",VendorBankAccountCode);
      VendorLedgerEntry.SETRANGE(Open,FALSE);
      Assert.RecordIsNotEmpty(VendorLedgerEntry);
    END;

    [Test]
    PROCEDURE DeleteCustBankAccWithAssociatedClosedEntry@11();
    VAR
      Customer@1000 : Record 18;
      CustomerBankAccount@1003 : Record 287;
      CustLedgerEntry@1002 : Record 21;
      CustomerBankAccountCode@1001 : Code[10];
    BEGIN
      // [FEATURE] [UT] [Sales]
      // [SCENARIO 378203] Customer Bank Account can be deleted when it has associated closed entries
      Initialize;

      // [GIVEN] Customer with Customer Bank Account "X"
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateCustomerBankAccount(CustomerBankAccount,Customer."No.");
      CustomerBankAccountCode := CustomerBankAccount.Code;

      // [GIVEN] Closed Customer Ledger Entry with "Recipient Bank Account" = "X"
      CreateCustLedgEntry(CustomerBankAccount,FALSE);

      // [WHEN] Delete Customer Bank Account "X"
      CustomerBankAccount.DELETE(TRUE);

      // [THEN] Closed entries are not deleted
      CustLedgerEntry.INIT;
      CustLedgerEntry.SETRANGE("Customer No.",Customer."No.");
      CustLedgerEntry.SETRANGE("Recipient Bank Account",CustomerBankAccountCode);
      CustLedgerEntry.SETRANGE(Open,FALSE);
      Assert.RecordIsNotEmpty(CustLedgerEntry);
    END;

    LOCAL PROCEDURE Initialize@14();
    BEGIN
      LibraryVariableStorage.Clear;
    END;

    LOCAL PROCEDURE FindIBAN@15() : Code[50];
    VAR
      CompanyInformation@1000 : Record 79;
    BEGIN
      CompanyInformation.GET;
      EXIT(CompanyInformation.IBAN);
    END;

    LOCAL PROCEDURE AssignBankAccIBANnumber@5(ConfirmReply@1000 : Boolean);
    VAR
      BankAccount@1002 : Record 270;
      IBANNumber@1001 : Code[50];
      OldIBAN@1003 : Code[50];
    BEGIN
      BankAccount.INIT;
      OldIBAN := BankAccount.IBAN;
      LibraryVariableStorage.Enqueue(ConfirmReply);
      IBANNumber := LibraryUtility.GenerateGUID;

      IF ConfirmReply THEN
        BankAccount.VALIDATE(IBAN,IBANNumber)
      ELSE BEGIN
        ASSERTERROR BankAccount.VALIDATE(IBAN,IBANNumber);
        IBANNumber := OldIBAN;
      END;

      VerifyIBAN(BankAccount.IBAN,IBANNumber)
    END;

    LOCAL PROCEDURE AssignVendBankAccIBANnumber@10(ConfirmReply@1000 : Boolean);
    VAR
      VendBankAccount@1002 : Record 288;
      IBANNumber@1001 : Code[50];
      OldIBAN@1003 : Code[50];
    BEGIN
      VendBankAccount.INIT;
      OldIBAN := VendBankAccount.IBAN;
      LibraryVariableStorage.Enqueue(ConfirmReply);
      IBANNumber := LibraryUtility.GenerateGUID;

      IF ConfirmReply THEN
        VendBankAccount.VALIDATE(IBAN,IBANNumber)
      ELSE BEGIN
        ASSERTERROR VendBankAccount.VALIDATE(IBAN,IBANNumber);
        IBANNumber := OldIBAN;
      END;

      VerifyIBAN(VendBankAccount.IBAN,IBANNumber)
    END;

    LOCAL PROCEDURE CreateVendLedgEntry@21(VendorBankAccount@1000 : Record 288;IsOpen@1003 : Boolean);
    VAR
      VendLedgEntry@1001 : Record 25;
      RecRef@1002 : RecordRef;
    BEGIN
      WITH VendLedgEntry DO BEGIN
        INIT;
        RecRef.GETTABLE(VendLedgEntry);
        "Entry No." := LibraryUtility.GetNewLineNo(RecRef,FIELDNO("Entry No."));
        "Vendor No." := VendorBankAccount."Vendor No.";
        "Recipient Bank Account" := VendorBankAccount.Code;
        Open := IsOpen;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateCustLedgEntry@36(CustomerBankAccount@1000 : Record 287;IsOpen@1003 : Boolean);
    VAR
      CustLedgEntry@1001 : Record 21;
      RecRef@1002 : RecordRef;
    BEGIN
      WITH CustLedgEntry DO BEGIN
        INIT;
        RecRef.GETTABLE(CustLedgEntry);
        "Entry No." := LibraryUtility.GetNewLineNo(RecRef,FIELDNO("Entry No."));
        "Customer No." := CustomerBankAccount."Customer No.";
        "Recipient Bank Account" := CustomerBankAccount.Code;
        Open := IsOpen;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE VerifyIBAN@8(CurrentIBAN@1000 : Code[50];CheckIBAN@1001 : Code[50]);
    BEGIN
      Assert.AreEqual(CurrentIBAN,CheckIBAN,WrongIBANErr);
    END;

    [ConfirmHandler]
    PROCEDURE IBANConfirmHandler@4(Message@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := LibraryVariableStorage.DequeueBoolean;
    END;

    BEGIN
    {
      // [FEATURE] [Bank Account] [UT]
      1. Test creates Bank Account, modifies it and deletes.
      2. Test IBAN field is set with new number after confirming that new number is not valid and should be
         changed though.
      3. Test IBAN field is not changed after not confirming that new number is not valid and should be
         changed though.

      Covers Test Cases for WI - 66574
        -----------------------------------------------------------------------------------------------------
        Test Function Name                                                                          TFS ID
        -----------------------------------------------------------------------------------------------------
        CheckBankAccIBANConfirmYes,CheckBankAccIBANConfirmNo
        CheckVendBankAccIBANConfirmYes,CheckVendBankAccIBANConfirmNo                                66574
    }
    END.
  }
}

