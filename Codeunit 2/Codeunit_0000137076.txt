OBJECT Codeunit 137076 SCM Manuf Calendars
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            Initialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryVariableStorage@1018 : Codeunit 131004;
      LibraryManufacturing@1008 : Codeunit 132202;
      LibraryUtility@1006 : Codeunit 131000;
      LibraryPatterns@1009 : Codeunit 132212;
      LibraryRandom@1000 : Codeunit 130440;
      Assert@1012 : Codeunit 130000;
      CalendarMgt@1004 : Codeunit 99000755;
      Initialized@1001 : Boolean;
      CaptionError@1003 : TextConst 'ENU=Caption must be the same.';
      CalcTimeDeltaErr@1002 : TextConst 'ENU=Wrong CalcTimeDelta() result';
      CalcTimeSubtractErr@1005 : TextConst 'ENU=Wrong CalcTimeSubtract() result';
      MaxDateErr@1007 : TextConst 'ENU=Wrong Max Date value';
      WrongFieldValueErr@1010 : TextConst 'ENU=Wrong value of the field %1 in table %2';
      WrongNoOfLinesErr@1011 : TextConst 'ENU=Wrong number of lines in table %1';
      AbsenceEntryNotUpdatedErr@1013 : TextConst 'ENU=Absence entry must be updated.';
      WrongAbsenceEntryUpdatedErr@1014 : TextConst 'ENU=Absence entry must be skipped, as it has "Updated" flag set.';

    [Test]
    [HandlerFunctions(WorkCenterCalendarMatrixPageHandler)]
    PROCEDURE WorkCenterCalendarWithPeriodTypeDay@59();
    VAR
      PeriodType@1003 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      WorkCenterCalendarWithPeriodType(PeriodType::Day,GetMonth(1,-1),GetMonth(1,1));  // Calendar Month range required: -1M to 1M.
    END;

    [Test]
    [HandlerFunctions(WorkCenterCalendarMatrixPageHandler)]
    PROCEDURE WorkCenterCalendarWithPeriodTypeWeek@60();
    VAR
      PeriodType@1003 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      WorkCenterCalendarWithPeriodType(PeriodType::Week,GetMonth(1,-1),GetMonth(1,1));  // Calendar Month range required: -1M to 1M.
    END;

    [Test]
    [HandlerFunctions(WorkCenterCalendarMatrixPageHandler)]
    PROCEDURE WorkCenterCalendarWithPeriodTypeMonth@62();
    VAR
      PeriodType@1003 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      WorkCenterCalendarWithPeriodType(PeriodType::Month,GetMonth(1,-1),GetMonth(1,1));  // Calendar Month range required: -1M to 1M.
    END;

    [Test]
    [HandlerFunctions(WorkCenterCalendarMatrixPageHandler)]
    PROCEDURE WorkCenterCalendarWithPeriodTypeQuarter@65();
    VAR
      PeriodType@1003 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      WorkCenterCalendarWithPeriodType(PeriodType::Quarter,GetMonth(3,-1),GetMonth(3,1));  // Calendar Month range required: -3M to 3M.
    END;

    [Test]
    [HandlerFunctions(WorkCenterCalendarMatrixPageHandler)]
    PROCEDURE WorkCenterCalendarWithPeriodTypeYear@66();
    VAR
      PeriodType@1003 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      WorkCenterCalendarWithPeriodType(PeriodType::Year,GetYear(1,-1),GetYear(1,1));  // Calendar Year range required: -1Y to 1Y.
    END;

    [Test]
    [HandlerFunctions(WorkCenterCalendarMatrixPageHandler)]
    PROCEDURE WorkCenterCalendarWithPeriodTypeAccountingPeriod@67();
    VAR
      PeriodType@1003 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      WorkCenterCalendarWithPeriodType(PeriodType::"Accounting Period",GetYear(2,-1),GetYear(2,1));  // Calendar Year range required: -2Y to 2Y.
    END;

    LOCAL PROCEDURE WorkCenterCalendarWithPeriodType@25(PeriodType@1014 : Option;StartingDate@1002 : Date;EndingDate@1003 : Date);
    VAR
      WorkCenter@1000 : Record 99000754;
      MatrixRecords@1012 : ARRAY [32] OF Record 2000000007;
      MatrixManagement@1011 : Codeunit 9200;
      WorkCenterCalendar@1001 : TestPage 99000769;
      MatrixColumnCaptions@1009 : ARRAY [32] OF Text[200];
      ColumnSet@1008 : Text[100];
      SetPosition@1007 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';
      PrimaryKeyFirstRecordInCurrentSet@1006 : Text[100];
      CurrentSetLength@1005 : Integer;
    BEGIN
      // Create Work Center.
      CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenter,StartingDate,EndingDate);

      // Open Work Center Calendar. Update Period Type.
      OpenWorkCenterCalendarPage(WorkCenterCalendar,WorkCenter."No.",PeriodType);

      // Using Matrix Management to Generate Period Matrix Data.
      MatrixManagement.GeneratePeriodMatrixData(
        SetPosition,ARRAYLEN(MatrixRecords),FALSE,PeriodType,'',PrimaryKeyFirstRecordInCurrentSet,MatrixColumnCaptions,ColumnSet,
        CurrentSetLength,MatrixRecords);

      // Enqueue Values for Page Handler - WorkCenterCalendarMatrixPageHandler.
      LibraryVariableStorage.Enqueue(WorkCenter."No.");
      LibraryVariableStorage.Enqueue(MatrixColumnCaptions[1]);
      LibraryVariableStorage.Enqueue(MatrixColumnCaptions[2]);
      DateFilterOnWorkCenter(WorkCenter,MatrixRecords[1]);
      LibraryVariableStorage.Enqueue(WorkCenter."Capacity (Effective)");
      DateFilterOnWorkCenter(WorkCenter,MatrixRecords[2]);
      LibraryVariableStorage.Enqueue(WorkCenter."Capacity (Effective)");

      // Exercise and Verify: Open Show Matrix and Verify Column Captions and Matrix value on Work Center Calendar Matrix Page on Page Handler WorkCenterCalendarMatrixPage.
      WorkCenterCalendar.ShowMatrix.INVOKE;

      // Tear Down.
      CleanupCalendarEntry(WorkCenter."No.");
    END;

    [Test]
    [HandlerFunctions(WorkCenterGroupCalendarMatrixPageHandler)]
    PROCEDURE WorkCenterGroupCalendarWithPeriodTypeDayAndCapacityUOMMinutes@128();
    VAR
      CapacityUnitOfMeasure@1000 : Record 99000780;
      PeriodType@1001 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      WorkCenterGroupCalendarWithPeriodTypeAndCapacityUOM(
        PeriodType::Day,CapacityUnitOfMeasure.Type::Minutes,GetMonth(1,-1),GetMonth(1,1));  // Calendar Month range required: -1M to 1M.
    END;

    [Test]
    [HandlerFunctions(WorkCenterGroupCalendarMatrixPageHandler)]
    PROCEDURE WorkCenterGroupCalendarWithPeriodTypeDayAndCapacityUOMHours@73();
    VAR
      CapacityUnitOfMeasure@1000 : Record 99000780;
      PeriodType@1001 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      WorkCenterGroupCalendarWithPeriodTypeAndCapacityUOM(
        PeriodType::Day,CapacityUnitOfMeasure.Type::Hours,GetMonth(1,-1),GetMonth(1,1));  // Calendar Month range required: -1M to 1M.
    END;

    [Test]
    [HandlerFunctions(WorkCenterGroupCalendarMatrixPageHandler)]
    PROCEDURE WorkCenterGroupCalendarWithPeriodTypeWeekAndCapacityUOMMinutes@127();
    VAR
      CapacityUnitOfMeasure@1000 : Record 99000780;
      PeriodType@1001 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      WorkCenterGroupCalendarWithPeriodTypeAndCapacityUOM(
        PeriodType::Week,CapacityUnitOfMeasure.Type::Minutes,GetMonth(1,-1),GetMonth(1,1));  // Calendar Month range required: -1M to 1M.
    END;

    [Test]
    [HandlerFunctions(WorkCenterGroupCalendarMatrixPageHandler)]
    PROCEDURE WorkCenterGroupCalendarWithPeriodTypeMonthAndCapacityUOMMinutes@126();
    VAR
      CapacityUnitOfMeasure@1000 : Record 99000780;
      PeriodType@1001 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      WorkCenterGroupCalendarWithPeriodTypeAndCapacityUOM(
        PeriodType::Month,CapacityUnitOfMeasure.Type::Minutes,GetMonth(1,-1),GetMonth(1,1));  // Calendar Month range required: -1M to 1M.
    END;

    [Test]
    [HandlerFunctions(WorkCenterGroupCalendarMatrixPageHandler)]
    PROCEDURE WorkCenterGroupCalendarWithPeriodTypeQuarterAndCapacityUOMMinutes@123();
    VAR
      CapacityUnitOfMeasure@1000 : Record 99000780;
      PeriodType@1001 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      WorkCenterGroupCalendarWithPeriodTypeAndCapacityUOM(
        PeriodType::Quarter,CapacityUnitOfMeasure.Type::Minutes,GetMonth(3,-1),GetMonth(3,1)); // Calendar Month range required: -3M to 3M.
    END;

    [Test]
    [HandlerFunctions(WorkCenterGroupCalendarMatrixPageHandler)]
    PROCEDURE WorkCenterGroupCalendarWithPeriodTypeYearAndCapacityUOMMinutes@122();
    VAR
      CapacityUnitOfMeasure@1000 : Record 99000780;
      PeriodType@1001 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      WorkCenterGroupCalendarWithPeriodTypeAndCapacityUOM(
        PeriodType::Year,CapacityUnitOfMeasure.Type::Minutes,GetYear(1,-1),GetYear(1,1));  // Calendar Year range required: -1Y to 1Y.
    END;

    [Test]
    [HandlerFunctions(WorkCenterGroupCalendarMatrixPageHandler)]
    PROCEDURE WorkCenterGroupCalendarWithPeriodTypeAccountingPeriodAndCapacityUOMMinutes@120();
    VAR
      CapacityUnitOfMeasure@1000 : Record 99000780;
      PeriodType@1001 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      WorkCenterGroupCalendarWithPeriodTypeAndCapacityUOM(
        PeriodType::"Accounting Period",CapacityUnitOfMeasure.Type::Minutes,GetYear(2,-1),GetYear(2,1));  // Calendar Year range required: -2Y to 2Y.
    END;

    LOCAL PROCEDURE WorkCenterGroupCalendarWithPeriodTypeAndCapacityUOM@118(PeriodType@1014 : Option;Type@1002 : Option;StartingDate@1001 : Date;EndingDate@1010 : Date);
    VAR
      WorkCenter@1000 : Record 99000754;
      MatrixRecords@1012 : ARRAY [32] OF Record 2000000007;
      CapacityUnitOfMeasure@1003 : Record 99000780;
      MatrixManagement@1004 : Codeunit 9200;
      WorkCtrGroupCalendar@1015 : TestPage 99000771;
      MatrixColumnCaptions@1009 : ARRAY [32] OF Text[200];
      ColumnSet@1008 : Text[100];
      SetPosition@1007 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';
      PrimaryKeyFirstRecordInCurrentSet@1006 : Text[100];
      CurrentSetLength@1005 : Integer;
    BEGIN
      // Create Work Center.
      CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenter,StartingDate,EndingDate);

      // Open Work Center Group Calendar. Update Period Type and Capacity Unit of Measure.
      FindCapacityUnitOfMeasure(CapacityUnitOfMeasure,Type);
      OpenWorkCenterGroupCalendarPage(WorkCtrGroupCalendar,WorkCenter."Work Center Group Code",PeriodType,CapacityUnitOfMeasure.Code);

      // Using Matrix Management to Generate Period Matrix Data.
      MatrixManagement.GeneratePeriodMatrixData(
        SetPosition,ARRAYLEN(MatrixRecords),FALSE,PeriodType,'',PrimaryKeyFirstRecordInCurrentSet,MatrixColumnCaptions,ColumnSet,
        CurrentSetLength,MatrixRecords);

      // Enqueue Values for Page Handler - WorkCenterGroupCalendarMatrixPageHandler.
      LibraryVariableStorage.Enqueue(WorkCenter."Work Center Group Code");
      LibraryVariableStorage.Enqueue(MatrixColumnCaptions[1]);
      LibraryVariableStorage.Enqueue(MatrixColumnCaptions[2]);
      LibraryVariableStorage.Enqueue(
        CalculateCapacityEffective(WorkCenter."Work Center Group Code",MatrixRecords[1],CapacityUnitOfMeasure.Code));
      LibraryVariableStorage.Enqueue(
        CalculateCapacityEffective(WorkCenter."Work Center Group Code",MatrixRecords[2],CapacityUnitOfMeasure.Code));

      // Exercise and Verify: Open Show Matrix and Verify Column Captions and Matrix value on Work Center Group Calendar Matrix Page on Page Handler WorkCenterGroupCalendarMatrixPageHandler.
      WorkCtrGroupCalendar.ShowMatrix.INVOKE;

      // Tear Down.
      CleanupCalendarEntry(WorkCenter."No.");
    END;

    [Test]
    [HandlerFunctions(MachineCenterCalendarMatrixPageHandler)]
    PROCEDURE MachineCenterCalendarWithPeriodTypeDay@32();
    VAR
      PeriodType@1011 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      MachineCenterCalendarWithPeriodType(PeriodType::Day,GetMonth(1,-1),GetMonth(1,1));  // Calendar Month range required: -1M to 1M.
    END;

    [Test]
    [HandlerFunctions(MachineCenterCalendarMatrixPageHandler)]
    PROCEDURE MachineCenterCalendarWithPeriodTypeWeek@77();
    VAR
      PeriodType@1011 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      MachineCenterCalendarWithPeriodType(PeriodType::Week,GetMonth(1,-1),GetMonth(1,1));  // Calendar Month range required: -1M to 1M.
    END;

    [Test]
    [HandlerFunctions(MachineCenterCalendarMatrixPageHandler)]
    PROCEDURE MachineCenterCalendarWithPeriodTypeMonth@78();
    VAR
      PeriodType@1011 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      MachineCenterCalendarWithPeriodType(PeriodType::Month,GetMonth(1,-1),GetMonth(1,1));  // Calendar Month range required: -1M to 1M.
    END;

    [Test]
    [HandlerFunctions(MachineCenterCalendarMatrixPageHandler)]
    PROCEDURE MachineCenterCalendarWithPeriodTypeQuarter@79();
    VAR
      PeriodType@1011 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      MachineCenterCalendarWithPeriodType(PeriodType::Quarter,GetMonth(3,-1),GetMonth(3,1));  // Calendar Month range required: -3M to 3M.
    END;

    [Test]
    [HandlerFunctions(MachineCenterCalendarMatrixPageHandler)]
    PROCEDURE MachineCenterCalendarWithPeriodTypeYear@83();
    VAR
      PeriodType@1011 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      MachineCenterCalendarWithPeriodType(PeriodType::Year,GetYear(1,-1),GetYear(1,1));  // Calendar Year range required: -1Y to 1Y.
    END;

    [Test]
    [HandlerFunctions(MachineCenterCalendarMatrixPageHandler)]
    PROCEDURE MachineCenterCalendarWithPeriodTypeAccountingPeriod@82();
    VAR
      PeriodType@1011 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      // Setup.
      Initialize;
      MachineCenterCalendarWithPeriodType(PeriodType::"Accounting Period",GetYear(2,-1),GetYear(2,1));  // Calendar Year range required: -2Y to 2Y.
    END;

    LOCAL PROCEDURE MachineCenterCalendarWithPeriodType@81(PeriodType@1011 : Option;StartingDate@1007 : Date;EndingDate@1009 : Date);
    VAR
      MachineCenter@1001 : Record 99000758;
      MatrixRecords@1010 : ARRAY [32] OF Record 2000000007;
      MatrixManagement@1008 : Codeunit 9200;
      MachineCenterCalendar@1012 : TestPage 99000770;
      MatrixColumnCaptions@1006 : ARRAY [32] OF Text[200];
      ColumnSet@1005 : Text[100];
      SetPosition@1004 : 'Initial,Previous,Same,Next,PreviousColumn,NextColumn';
      PrimaryKeyFirstRecordInCurrentSet@1003 : Text[100];
      CurrentSetLength@1002 : Integer;
    BEGIN
      // Create Work Center and Machine Center.
      CreateMachineCenterWithHolidays(MachineCenter,LibraryRandom.RandDec(10,1),100,StartingDate,EndingDate);

      // Open Machine Center Calendar. Update Period Type.
      OpenMachineCenterCalendarPage(MachineCenterCalendar,MachineCenter."No.",PeriodType);

      // Using Matrix Management to Generate Period Matrix Data.
      MatrixManagement.GeneratePeriodMatrixData(
        SetPosition,ARRAYLEN(MatrixRecords),FALSE,PeriodType,'',PrimaryKeyFirstRecordInCurrentSet,MatrixColumnCaptions,ColumnSet,
        CurrentSetLength,MatrixRecords);

      // Enqueue Values for Page Handler - MachineCenterCalendarMatrixPageHandler.
      LibraryVariableStorage.Enqueue(MachineCenter."No.");
      LibraryVariableStorage.Enqueue(MatrixColumnCaptions[1]);
      LibraryVariableStorage.Enqueue(MatrixColumnCaptions[2]);
      DateFilterOnMachineCenter(MachineCenter,MatrixRecords[1]);
      LibraryVariableStorage.Enqueue(MachineCenter."Capacity (Effective)");
      DateFilterOnMachineCenter(MachineCenter,MatrixRecords[2]);
      LibraryVariableStorage.Enqueue(MachineCenter."Capacity (Effective)");

      // Exercise and Verify: Open Show Matrix and Verify Column Captions and Matrix value on Machine Center Calendar Matrix Page on Page Handler MachineCenterCalendarMatrixPageHandler.
      MachineCenterCalendar.ShowMatrix.INVOKE;

      // Tear Down.
      CleanupCalendarEntry(MachineCenter."Work Center No.");
    END;

    [Test]
    PROCEDURE CalcTimeDelta_UT1@1();
    VAR
      Time@1003 : Time;
      Hour@1000 : Integer;
      Min@1001 : Integer;
      Sec@1002 : Integer;
    BEGIN
      // Test Time Delta in case of the same Start, End time values
      Initialize;
      Hour := LibraryRandom.RandIntInRange(0,23);
      Min := LibraryRandom.RandIntInRange(0,59);
      Sec := LibraryRandom.RandIntInRange(0,59);

      Time := CreateTime(Hour,Min,Sec);

      VerifyTimeDeltaAndSubtract(Time,Time,0);
    END;

    [Test]
    PROCEDURE CalcTimeDelta_UT2@3();
    VAR
      Time@1003 : ARRAY [2] OF Time;
      Hour@1002 : ARRAY [2] OF Integer;
      Min@1001 : Integer;
      Sec@1000 : Integer;
      i@1004 : Integer;
    BEGIN
      // Test Time Delta in case of integer number of Hours
      Initialize;
      Hour[1] := LibraryRandom.RandIntInRange(13,22);
      Hour[2] := LibraryRandom.RandIntInRange(0,12);
      Min := LibraryRandom.RandIntInRange(0,59);
      Sec := LibraryRandom.RandIntInRange(0,59);

      FOR i := 1 TO 2 DO
        Time[i] := CreateTime(Hour[i],Min,Sec);

      VerifyTimeDeltaAndSubtract(Time[1],Time[2],(Hour[1] - Hour[2]) * 60 * 60 * 1000);
    END;

    [Test]
    PROCEDURE CalcTimeDelta_UT3@5();
    VAR
      Time@1004 : ARRAY [2] OF Time;
      Hour@1003 : ARRAY [2] OF Integer;
      Min@1002 : Integer;
      Sec@1001 : Integer;
      i@1000 : Integer;
    BEGIN
      // Test Time Delta in case of non 23:59:59 EndingTime
      Initialize;
      Hour[1] := LibraryRandom.RandIntInRange(13,22);
      Hour[2] := LibraryRandom.RandIntInRange(0,12);
      FOR i := 1 TO 2 DO BEGIN
        Min := LibraryRandom.RandIntInRange(0,59);
        Sec := LibraryRandom.RandIntInRange(0,59);
        Time[i] := CreateTime(Hour[i],Min,Sec);
      END;

      VerifyTimeDeltaAndSubtract(Time[1],Time[2],Time[1] - Time[2]);
    END;

    [Test]
    PROCEDURE CalcTimeDelta_UT4@7();
    VAR
      Time@1003 : ARRAY [2] OF Time;
      Hour@1002 : Integer;
      Min@1001 : Integer;
      Sec@1000 : Integer;
    BEGIN
      // Test Time Delta in case of 23:59:59 EndingTime
      Initialize;
      Hour := LibraryRandom.RandIntInRange(0,22);
      Min := LibraryRandom.RandIntInRange(0,59);
      Sec := LibraryRandom.RandIntInRange(0,59);

      Time[1] := CreateTime(23,59,59);
      Time[2] := CreateTime(Hour,Min,Sec);

      VerifyTimeDeltaAndSubtract(Time[1],Time[2],Time[1] - Time[2] + 1000);
    END;

    [Test]
    PROCEDURE CalcTimeDelta_UT5@13();
    VAR
      Time@1003 : ARRAY [2] OF Time;
      Hour@1002 : Integer;
      Min@1001 : Integer;
      Sec@1000 : Integer;
    BEGIN
      // Test Time Delta in case of 23:59:59:001 EndingTime
      Initialize;
      Hour := LibraryRandom.RandIntInRange(0,22);
      Min := LibraryRandom.RandIntInRange(0,59);
      Sec := LibraryRandom.RandIntInRange(0,59);

      Time[1] := 235959.001T;
      Time[2] := CreateTime(Hour,Min,Sec);

      VerifyTimeDeltaAndSubtract(Time[1],Time[2],Time[1] - Time[2]);
    END;

    [Test]
    PROCEDURE CalcTimeDelta_UT6@8();
    VAR
      Time@1003 : Time;
    BEGIN
      // Test Time Delta in case of the same Start, End 23:59:59 Time value
      Initialize;
      Time := CreateTime(23,59,59);

      VerifyTimeDeltaAndSubtract(Time,Time,0);
    END;

    [Test]
    PROCEDURE CheckMaxDate_UT@9();
    BEGIN
      // Verify MaxDate value
      Assert.AreEqual(30129999D,CalendarMgt.GetMaxDate,MaxDateErr);
    END;

    [Test]
    PROCEDURE PS29218_CalculateCapacityLoadWithReducedEfficiency@12();
    VAR
      MachineCenter@1001 : Record 99000758;
      RoutingHeader@1003 : Record 99000763;
      RoutingLine@1004 : Record 99000764;
      Item@1006 : Record 27;
      ProductionOrder@1007 : Record 5405;
      ProdOrderDueDate@1000 : Date;
    BEGIN
      Initialize;

      ProdOrderDueDate := CALCDATE('<CW>',WORKDATE);
      CreateMachineCenterWithHolidays(MachineCenter,1,75,CALCDATE('<-1W>',ProdOrderDueDate),ProdOrderDueDate);
      CreateRouting(RoutingHeader,RoutingLine,MachineCenter."No.",1,1,24,13);
      UpdateRoutingTimesUOM(RoutingLine);
      CertifyRouting(RoutingHeader);
      CreateItemWithRouting(Item,RoutingHeader."No.");

      LibraryPatterns.MAKEProductionOrder(ProductionOrder,ProductionOrder.Status::"Firm Planned",Item,'','',10,ProdOrderDueDate);

      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);

      VerifyProductionOrder(ProductionOrder);
    END;

    [Test]
    [HandlerFunctions(AbsencePageHandler)]
    PROCEDURE TFS360551_UpdateActionUpdatesAbsenceEntry@24();
    VAR
      MachineCenter@1002 : Record 99000758;
      CalendarAbsenceEntry@1001 : Record 99000760;
    BEGIN
      // Verify that the selected absence entry is updated when "Update" action is run in the Absence page
      Initialize;
      CreateMachineCenterWithoutHolidays(MachineCenter,LibraryRandom.RandIntInRange(3,10),100,WORKDATE,WORKDATE);
      CreateAndUpdateMachineCenterAbsence(CalendarAbsenceEntry,MachineCenter."No.",MachineCenter.Capacity - 1,0,1);
      CreateMachineCenterAbsence(CalendarAbsenceEntry,MachineCenter."No.",MachineCenter.Capacity,0,2);

      RunUpdateAbsenceAction(CalendarAbsenceEntry);

      CalendarAbsenceEntry.FIND;
      Assert.IsTrue(CalendarAbsenceEntry.Updated,AbsenceEntryNotUpdatedErr);
    END;

    [Test]
    [HandlerFunctions(AbsencePageHandler)]
    PROCEDURE TFS360551_UpdateActionSkipsUpdatedAbsenceEntry@57();
    VAR
      MachineCenter@1002 : Record 99000758;
      CalendarAbsenceEntry@1001 : Record 99000760;
      CalendarAbsenceEntryToUpdate@1004 : Record 99000760;
      CalendarEntry@1005 : Record 99000757;
    BEGIN
      // Verify that the selected entry having "Updated" status set, is not updated when the "Update" action is run
      Initialize;
      CreateMachineCenterWithoutHolidays(MachineCenter,LibraryRandom.RandIntInRange(3,10),100,WORKDATE,WORKDATE);
      CreateAndUpdateMachineCenterAbsence(CalendarAbsenceEntryToUpdate,MachineCenter."No.",MachineCenter.Capacity - 1,0,1);
      CreateAndUpdateMachineCenterAbsence(CalendarAbsenceEntry,MachineCenter."No.",MachineCenter.Capacity,0,2);

      RunUpdateAbsenceAction(CalendarAbsenceEntryToUpdate);

      FindCalendarEntry(CalendarEntry,CalendarAbsenceEntry);
      Assert.AreEqual(CalendarEntry."Absence Capacity",CalendarAbsenceEntry.Capacity,WrongAbsenceEntryUpdatedErr);
    END;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      IF Initialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      COMMIT;

      Initialized := TRUE
    END;

    LOCAL PROCEDURE CalcTimeShift@74(BaseTime@1000 : Time;ShiftHours@1001 : Decimal) : Time;
    BEGIN
      EXIT(BaseTime + HoursToMilliseconds(ShiftHours));
    END;

    LOCAL PROCEDURE CertifyRouting@30(VAR RoutingHeader@1000 : Record 99000763);
    BEGIN
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAbsenceEntry@71(VAR CalendarAbsenceEntry@1006 : Record 99000760;MachineCenterNo@1001 : Code[20];AbsentCapacity@1002 : Decimal;AbsenceDate@1003 : Date;StartingTime@1004 : Time;EndingTime@1005 : Time);
    BEGIN
      WITH CalendarAbsenceEntry DO BEGIN
        INIT;
        VALIDATE("Capacity Type","Capacity Type"::"Machine Center");
        VALIDATE("No.",MachineCenterNo);
        VALIDATE(Date,AbsenceDate);
        VALIDATE("Starting Time",StartingTime);
        VALIDATE("Ending Time",EndingTime);
        VALIDATE(Capacity,AbsentCapacity);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateAndUpdateMachineCenterAbsence@50(VAR CalendarAbsenceEntry@1000 : Record 99000760;MachineCenterNo@1001 : Code[20];AbsenceCapacity@1002 : Decimal;AbsenceTimeStartShift@1003 : Decimal;AbsenceTimeEndShift@1004 : Decimal);
    VAR
      CalendarAbsenceMgt@1005 : Codeunit 99000759;
    BEGIN
      CreateMachineCenterAbsence(CalendarAbsenceEntry,MachineCenterNo,AbsenceCapacity,AbsenceTimeStartShift,AbsenceTimeEndShift);
      CalendarAbsenceMgt.UpdateAbsence(CalendarAbsenceEntry);
    END;

    LOCAL PROCEDURE CreateItemWithRouting@34(VAR Item@1000 : Record 27;RoutingNo@1001 : Code[20]);
    BEGIN
      LibraryPatterns.MAKEItemSimple(Item,Item."Costing Method"::Standard,LibraryPatterns.RandCost(Item));
      Item.VALIDATE("Routing No.",RoutingNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMachineCenterAbsence@18(VAR CalAbsenceEntry@1005 : Record 99000760;MachineCenterNo@1000 : Code[20];AbsentCapacity@1003 : Decimal;AbsenceTimeStartShift@1001 : Decimal;AbsenceTimeEndShift@1002 : Decimal);
    VAR
      WorkStartingTime@1004 : Time;
    BEGIN
      WorkStartingTime := GetWorkStartingTime(MachineCenterNo);
      CreateAbsenceEntry(
        CalAbsenceEntry,MachineCenterNo,AbsentCapacity,WORKDATE,CalcTimeShift(WorkStartingTime,AbsenceTimeStartShift),
        CalcTimeShift(WorkStartingTime,AbsenceTimeEndShift));
    END;

    LOCAL PROCEDURE CreateMachineCenterCalculateCalendar@40(VAR MachineCenter@1004 : Record 99000758;WorkCenterNo@1005 : Code[20];MachCenterCapacity@1003 : Decimal;MachCenterEfficiency@1002 : Decimal;StartingDate@1001 : Date;EndingDate@1000 : Date);
    BEGIN
      LibraryManufacturing.CreateMachineCenter(MachineCenter,WorkCenterNo,MachCenterCapacity);
      MachineCenter.VALIDATE(Efficiency,MachCenterEfficiency);
      MachineCenter.MODIFY(TRUE);
      LibraryManufacturing.CalculateMachCenterCalendar(MachineCenter,StartingDate,EndingDate);
    END;

    LOCAL PROCEDURE CreateMachineCenterWithHolidays@19(VAR MachineCenter@1001 : Record 99000758;MachCenterCapacity@1005 : Decimal;MachCenterEfficiency@1002 : Decimal;StartingDate@1003 : Date;EndingDate@1004 : Date);
    VAR
      WorkCenter@1000 : Record 99000754;
    BEGIN
      CreateWorkCenter(WorkCenter);
      CreateMachineCenterCalculateCalendar(
        MachineCenter,WorkCenter."No.",MachCenterCapacity,MachCenterEfficiency,StartingDate,EndingDate);
    END;

    LOCAL PROCEDURE CreateMachineCenterWithoutHolidays@38(VAR MachineCenter@1004 : Record 99000758;MachCenterCapacity@1003 : Decimal;MachCenterEfficiency@1002 : Decimal;StartingDate@1001 : Date;EndingDate@1000 : Date);
    VAR
      WorkCenter@1005 : Record 99000754;
    BEGIN
      CreateWorkCenterWithoutHolidays(WorkCenter);
      CreateMachineCenterCalculateCalendar(
        MachineCenter,WorkCenter."No.",MachCenterCapacity,MachCenterEfficiency,StartingDate,EndingDate);
    END;

    LOCAL PROCEDURE CreateRouting@28(VAR RoutingHeader@1000 : Record 99000763;VAR RoutingLine@1005 : Record 99000764;MachineCenterNo@1006 : Code[20];SetupTime@1001 : Decimal;RunTime@1002 : Decimal;WaitTime@1003 : Decimal;MoveTime@1004 : Decimal);
    BEGIN
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'',LibraryUtility.GenerateRandomCode(RoutingLine.FIELDNO("Operation No."),DATABASE::"Routing Line"),
        RoutingLine.Type::"Machine Center",MachineCenterNo);

      RoutingLine.VALIDATE("Setup Time",SetupTime);
      RoutingLine.VALIDATE("Run Time",RunTime);
      RoutingLine.VALIDATE("Wait Time",WaitTime);
      RoutingLine.VALIDATE("Move Time",MoveTime);
      RoutingLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWorkCenter@53(VAR WorkCenter@1004 : Record 99000754);
    BEGIN
      LibraryManufacturing.CreateWorkCenter(WorkCenter);
    END;

    LOCAL PROCEDURE CreateWorkCenterWithoutHolidays@16(VAR WorkCenter@1000 : Record 99000754);
    VAR
      ShopCalendarWorkingDays@1001 : Record 99000752;
    BEGIN
      CreateWorkCenter(WorkCenter);
      WITH ShopCalendarWorkingDays DO BEGIN
        SETRANGE("Shop Calendar Code",WorkCenter."Shop Calendar Code");
        FINDFIRST;

        LibraryManufacturing.CreateShopCalendarWorkingDays(
          ShopCalendarWorkingDays,"Shop Calendar Code",Day::Saturday,"Work Shift Code","Starting Time","Ending Time");
        LibraryManufacturing.CreateShopCalendarWorkingDays(
          ShopCalendarWorkingDays,"Shop Calendar Code",Day::Sunday,"Work Shift Code","Starting Time","Ending Time");
      END;
    END;

    LOCAL PROCEDURE CreateTime@44(Hour@1001 : Integer;Min@1002 : Integer;Sec@1003 : Integer) Result : Time;
    BEGIN
      EVALUATE(
        Result,
        FORMAT(Hour,0,'<Integer,2><Filler Character,0>') +
        FORMAT(Min,0,'<Integer,2><Filler Character,0>') +
        FORMAT(Sec,0,'<Integer,2><Filler Character,0>'));
    END;

    LOCAL PROCEDURE DateFilterOnWorkCenter@17(VAR WorkCenter@1001 : Record 99000754;MatrixRecords@1000 : Record 2000000007);
    BEGIN
      IF MatrixRecords."Period Start" = MatrixRecords."Period End" THEN
        WorkCenter.SETRANGE("Date Filter",MatrixRecords."Period Start")
      ELSE
        WorkCenter.SETRANGE("Date Filter",MatrixRecords."Period Start",MatrixRecords."Period End");
      WorkCenter.CALCFIELDS("Capacity (Effective)");
    END;

    LOCAL PROCEDURE DateFilterOnMachineCenter@42(VAR MachineCenter@1001 : Record 99000758;MatrixRecords@1000 : Record 2000000007);
    BEGIN
      IF MatrixRecords."Period Start" = MatrixRecords."Period End" THEN
        MachineCenter.SETRANGE("Date Filter",MatrixRecords."Period Start")
      ELSE
        MachineCenter.SETRANGE("Date Filter",MatrixRecords."Period Start",MatrixRecords."Period End");
      MachineCenter.CALCFIELDS("Capacity (Effective)");
    END;

    LOCAL PROCEDURE CalculateCapacityEffective@23(WorkCenterGroupCode@1006 : Code[10];MatrixRecords@1005 : Record 2000000007;CapacityUnitOfMeasureCode@1003 : Code[10]) CapacityEffective : Decimal;
    VAR
      WorkCenter@1000 : Record 99000754;
      CalendarManagement@1001 : Codeunit 99000755;
    BEGIN
      WorkCenter.SETRANGE("Work Center Group Code",WorkCenterGroupCode);
      WorkCenter.FINDSET;
      REPEAT
        DateFilterOnWorkCenter(WorkCenter,MatrixRecords);
        CapacityEffective +=
          WorkCenter."Capacity (Effective)" *
          CalendarManagement.TimeFactor(WorkCenter."Unit of Measure Code") / CalendarManagement.TimeFactor(CapacityUnitOfMeasureCode);
      UNTIL WorkCenter.NEXT = 0;
    END;

    LOCAL PROCEDURE EnqueueAbsenceEntry@63(CalendarAbsenceEntry@1000 : Record 99000760);
    BEGIN
      LibraryVariableStorage.Enqueue(CalendarAbsenceEntry."No.");
      LibraryVariableStorage.Enqueue(CalendarAbsenceEntry.Date);
      LibraryVariableStorage.Enqueue(CalendarAbsenceEntry."Starting Time");
      LibraryVariableStorage.Enqueue(CalendarAbsenceEntry."Ending Time");
    END;

    LOCAL PROCEDURE FindCalendarEntry@58(VAR CalendarEntry@1000 : Record 99000757;CalendarAbsenceEntry@1001 : Record 99000760);
    BEGIN
      WITH CalendarEntry DO BEGIN
        SETRANGE("Capacity Type","Capacity Type"::"Machine Center");
        SETRANGE("No.",CalendarAbsenceEntry."No.");
        SETRANGE(Date,CalendarAbsenceEntry.Date);
        SETRANGE("Starting Time",CalendarAbsenceEntry."Starting Time");
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindCapacityUnitOfMeasure@20(VAR CapacityUnitOfMeasure@1000 : Record 99000780;Type@1001 : Option);
    BEGIN
      CapacityUnitOfMeasure.SETRANGE(Type,Type);
      CapacityUnitOfMeasure.FINDFIRST;
    END;

    LOCAL PROCEDURE FindFirstWorkDay@33(VAR ShopCalendarWorkingDays@1000 : Record 99000752;MachineCenterNo@1001 : Code[20]);
    BEGIN
      WITH ShopCalendarWorkingDays DO BEGIN
        SETRANGE("Shop Calendar Code",GetMachineCenterShopCalendar(MachineCenterNo));
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE GetMachineCenterShopCalendar@39(MachineCenterNo@1000 : Code[20]) : Code[10];
    VAR
      MachineCenter@1002 : Record 99000758;
      WorkCenter@1001 : Record 99000754;
    BEGIN
      MachineCenter.GET(MachineCenterNo);
      WorkCenter.GET(MachineCenter."Work Center No.");
      EXIT(WorkCenter."Shop Calendar Code");
    END;

    LOCAL PROCEDURE GetMonth@2(Month@1001 : Integer;SignFactor@1000 : Integer) NewDate : Date;
    BEGIN
      NewDate := CALCDATE('<' + FORMAT(SignFactor * Month) + 'M>',WORKDATE);
    END;

    LOCAL PROCEDURE GetYear@4(Year@1001 : Integer;SignFactor@1000 : Integer) NewDate : Date;
    BEGIN
      NewDate := CALCDATE('<' + FORMAT(SignFactor * Year) + 'Y>',WORKDATE);
    END;

    LOCAL PROCEDURE GetWorkStartingTime@37(MachineCenterNo@1000 : Code[20]) : Time;
    VAR
      ShopCalendarWorkingDays@1003 : Record 99000752;
    BEGIN
      FindFirstWorkDay(ShopCalendarWorkingDays,MachineCenterNo);
      EXIT(ShopCalendarWorkingDays."Starting Time");
    END;

    LOCAL PROCEDURE HoursToMilliseconds@47(Hours@1000 : Decimal) : Decimal;
    BEGIN
      EXIT(Hours * 60 * 60 * 1000);
    END;

    LOCAL PROCEDURE RunUpdateAbsenceAction@61(CalendarAbsenceEntry@1001 : Record 99000760);
    VAR
      MachineCenterPage@1000 : TestPage 99000760;
    BEGIN
      MachineCenterPage.OPENVIEW;
      MachineCenterPage.GOTOKEY(CalendarAbsenceEntry."No.");

      EnqueueAbsenceEntry(CalendarAbsenceEntry);
      MachineCenterPage."Page Capacity Absence".INVOKE;
    END;

    LOCAL PROCEDURE CleanupCalendarEntry@14(WorkCenterNo@1000 : Code[20]);
    VAR
      CalendarEntry@1001 : Record 99000757;
    BEGIN
      CalendarEntry.SETFILTER("Work Center No.",WorkCenterNo);
      CalendarEntry.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE VerifyProductionOrder@51(VAR ProductionOrder@1000 : Record 5405);
    BEGIN
      VerifyProdOrderStartingTime(ProductionOrder);
      VerifyProdOrderLine(ProductionOrder);
      VerifyProdOrderRouting(ProductionOrder);
      VerifyProdOrderCapacityNeed(ProductionOrder);
    END;

    LOCAL PROCEDURE VerifyProdOrderStartingTime@52(ProductionOrder@1000 : Record 5405);
    BEGIN
      WITH ProductionOrder DO
        Assert.AreEqual(090700T,"Starting Time",STRSUBSTNO(WrongFieldValueErr,FIELDNAME("Starting Time"),TABLENAME));
    END;

    LOCAL PROCEDURE VerifyProdOrderLine@54(ProductionOrder@1000 : Record 5405);
    VAR
      ProdOrderLine@1001 : Record 5406;
    BEGIN
      WITH ProdOrderLine DO BEGIN
        SETRANGE(Status,ProductionOrder.Status);
        SETRANGE("Prod. Order No.",ProductionOrder."No.");
        Assert.AreEqual(1,COUNT,STRSUBSTNO(WrongNoOfLinesErr,TABLENAME));

        FINDFIRST;
        Assert.AreEqual(CALCDATE('<-2D>',"Due Date"),"Ending Date",STRSUBSTNO(WrongFieldValueErr,FIELDNAME("Ending Date"),TABLENAME));
        Assert.AreEqual(160000T,"Ending Time",STRSUBSTNO(WrongFieldValueErr,FIELDNAME("Ending Time"),TABLENAME));
        Assert.AreEqual(
          CALCDATE('<-4D>',"Due Date"),"Starting Date",STRSUBSTNO(WrongFieldValueErr,FIELDNAME("Starting Date"),TABLENAME));
        Assert.AreEqual(090700T,"Starting Time",STRSUBSTNO(WrongFieldValueErr,FIELDNAME("Starting Time"),TABLENAME));
      END;
    END;

    LOCAL PROCEDURE VerifyProdOrderRouting@55(ProductionOrder@1000 : Record 5405);
    VAR
      ProdOrderRoutingLine@1001 : Record 5409;
    BEGIN
      WITH ProdOrderRoutingLine DO BEGIN
        SETRANGE(Status,ProductionOrder.Status);
        SETRANGE("Prod. Order No.",ProductionOrder."No.");
        FINDFIRST;
        Assert.AreEqual(
          CALCDATE('<-2D>',ProductionOrder."Due Date"),
          "Ending Date",STRSUBSTNO(WrongFieldValueErr,FIELDNAME("Ending Date"),TABLENAME));
        Assert.AreEqual(160000T,"Ending Time",STRSUBSTNO(WrongFieldValueErr,FIELDNAME("Ending Time"),TABLENAME));
        Assert.AreEqual(
          CALCDATE('<-4D>',ProductionOrder."Due Date"),
          "Starting Date",STRSUBSTNO(WrongFieldValueErr,FIELDNAME("Starting Date"),TABLENAME));
        Assert.AreEqual(090700T,"Starting Time",STRSUBSTNO(WrongFieldValueErr,FIELDNAME("Starting Time"),TABLENAME));
      END;
    END;

    LOCAL PROCEDURE VerifyProdOrderCapacityNeed@56(ProductionOrder@1000 : Record 5405);
    VAR
      ProdOrderCapacityNeed@1001 : Record 5410;
    BEGIN
      WITH ProdOrderCapacityNeed DO BEGIN
        SETCURRENTKEY(Status,"Prod. Order No.","Routing Reference No.","Operation No.",Date,"Starting Time");
        SETRANGE(Status,ProductionOrder.Status);
        SETRANGE("Prod. Order No.",ProductionOrder."No.");
        Assert.AreEqual(3,COUNT,STRSUBSTNO(WrongNoOfLinesErr,TABLENAME));

        FINDSET;
        // Total time required for machine center setup is 60 minutes * 100 / 75 = 80 min. (as MC efficiency is 75%)
        VerifyCapacityLine(090700T,102700T,"Time Type"::Setup,60,ProdOrderCapacityNeed);
        NEXT;
        // Total run time is 60 min. * 10 pcs * 100 / 75 (75% efficiency) = 800 min.
        // Allocated time is 600 minutes, as it does not include efficiency multiplicator
        // Effective run time is 800 minutes
        VerifyCapacityLine(102700T,160000T,"Time Type"::Run,249.75,ProdOrderCapacityNeed);
        NEXT;
        // All times are backward calculated starting from the shift ending time
        // Move time - 13 minutes: 15:47 - 16:00 (efficiency multiplicator is not applied to move time and wait time)
        // Production takes 2 days:
        // Second day: 7 hours 47 minutes (whole work shift time) 08:00 - 15:47, actual allocated time is 467 * 75 / 100 = 350.25 min
        // First day: 5 hours 33 minutes 10:27 - 16:00 (till the end of the shift), allocated time is 333 * 75 / 100 = 249.75 min
        VerifyCapacityLine(080000T,154700T,"Time Type"::Run,350.25,ProdOrderCapacityNeed);
      END;
    END;

    LOCAL PROCEDURE VerifyCapacityLine@11(ExpStartingTime@1000 : Time;ExpEndingTime@1001 : Time;ExpTimeType@1003 : Option;ExpAllocatedTime@1002 : Decimal;ProdOrderCapacityNeed@1004 : Record 5410);
    BEGIN
      WITH ProdOrderCapacityNeed DO BEGIN
        Assert.AreEqual(ExpStartingTime,"Starting Time",STRSUBSTNO(WrongFieldValueErr,FIELDNAME("Starting Time"),TABLENAME));
        Assert.AreEqual(ExpEndingTime,"Ending Time",STRSUBSTNO(WrongFieldValueErr,FIELDNAME("Ending Time"),TABLENAME));
        Assert.AreEqual(ExpTimeType,"Time Type",STRSUBSTNO(WrongFieldValueErr,FIELDNAME("Time Type"),TABLENAME));
        Assert.AreEqual(ExpAllocatedTime,"Allocated Time",STRSUBSTNO(WrongFieldValueErr,FIELDNAME("Allocated Time"),TABLENAME));
      END;
    END;

    LOCAL PROCEDURE VerifyTimeDeltaAndSubtract@10(Time1@1001 : Time;Time2@1002 : Time;Expected@1000 : Integer);
    BEGIN
      Assert.AreEqual(Expected,CalendarMgt.CalcTimeDelta(Time1,Time2),CalcTimeDeltaErr);
      Assert.AreEqual(Expected,CalendarMgt.CalcTimeSubtract(Time1,Time2 - 000000T) - 000000T,CalcTimeSubtractErr);
    END;

    LOCAL PROCEDURE OpenWorkCenterCalendarPage@15(VAR WorkCenterCalendar@1002 : TestPage 99000769;No@1001 : Code[20];PeriodType@1003 : Option);
    VAR
      WorkCenterCard@1000 : TestPage 99000754;
    BEGIN
      // Open Work Center Page and Open Work Center Calendar. Update Period Type.
      WorkCenterCard.OPENEDIT;
      WorkCenterCard.FILTER.SETFILTER("No.",No);
      WorkCenterCalendar.TRAP;
      WorkCenterCard."Page Work Center Calendar".INVOKE;
      WorkCenterCalendar.PeriodType.SETVALUE(PeriodType);
    END;

    LOCAL PROCEDURE OpenWorkCenterGroupCalendarPage@69(VAR WorkCtrGroupCalendar@1002 : TestPage 99000771;WorkCenterGroupCode@1001 : Code[20];PeriodType@1003 : Option;CapacityUOM@1005 : Code[10]);
    VAR
      WorkCenterGroups@1000 : TestPage 99000758;
    BEGIN
      // Open Work Center Group Page and Open Work Center Group Calendar. Update Period Type and Capacity Unit of Measure.
      WorkCenterGroups.OPENEDIT;
      WorkCenterGroups.FILTER.SETFILTER(Code,WorkCenterGroupCode);
      WorkCtrGroupCalendar.TRAP;
      WorkCenterGroups."Page Work Ctr. Group Calendar".INVOKE;
      WorkCtrGroupCalendar.PeriodType.SETVALUE(PeriodType);
      WorkCtrGroupCalendar.CapacityUoM.SETVALUE(CapacityUOM);
    END;

    LOCAL PROCEDURE OpenMachineCenterCalendarPage@91(VAR MachineCenterCalendar@1000 : TestPage 99000770;No@1002 : Code[20];PeriodType@1003 : Option);
    VAR
      MachineCenterCard@1001 : TestPage 99000760;
    BEGIN
      // Open Machine Center Page and Open Machine Center Calendar. Update Period Type.
      MachineCenterCard.OPENEDIT;
      MachineCenterCard.FILTER.SETFILTER("No.",No);
      MachineCenterCalendar.TRAP;
      MachineCenterCard."Page Machine Center Calendar".INVOKE;
      MachineCenterCalendar.PeriodType.SETVALUE(PeriodType);
    END;

    LOCAL PROCEDURE UpdateRoutingTimesUOM@29(VAR RoutingLine@1000 : Record 99000764);
    VAR
      CapacityUnitOfMeasure@1001 : Record 99000780;
    BEGIN
      FindCapacityUnitOfMeasure(CapacityUnitOfMeasure,CapacityUnitOfMeasure.Type::Hours);
      RoutingLine.VALIDATE("Setup Time Unit of Meas. Code",CapacityUnitOfMeasure.Code);
      RoutingLine.VALIDATE("Run Time Unit of Meas. Code",CapacityUnitOfMeasure.Code);
      RoutingLine.VALIDATE("Wait Time Unit of Meas. Code",CapacityUnitOfMeasure.Code);
      RoutingLine.MODIFY(TRUE);
    END;

    [ModalPageHandler]
    PROCEDURE WorkCenterCalendarMatrixPageHandler@31(VAR WorkCenterCalendarMatrix@1000 : TestPage 9291);
    BEGIN
      // Verify Work Center Calendar Matrix Page.
      WorkCenterCalendarMatrix.FILTER.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      Assert.AreEqual(LibraryVariableStorage.DequeueText,WorkCenterCalendarMatrix.Field1.CAPTION,CaptionError);
      Assert.AreEqual(LibraryVariableStorage.DequeueText,WorkCenterCalendarMatrix.Field2.CAPTION,CaptionError);
      WorkCenterCalendarMatrix.Field1.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      WorkCenterCalendarMatrix.Field2.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
    END;

    [ModalPageHandler]
    PROCEDURE WorkCenterGroupCalendarMatrixPageHandler@98(VAR WorkCtrGrpCalendarMatrix@1000 : TestPage 9295);
    BEGIN
      // Verify Work Center Group Calendar Matrix Page.
      WorkCtrGrpCalendarMatrix.FILTER.SETFILTER(Code,LibraryVariableStorage.DequeueText);
      Assert.AreEqual(LibraryVariableStorage.DequeueText,WorkCtrGrpCalendarMatrix.Field1.CAPTION,CaptionError);
      Assert.AreEqual(LibraryVariableStorage.DequeueText,WorkCtrGrpCalendarMatrix.Field2.CAPTION,CaptionError);
      WorkCtrGrpCalendarMatrix.Field1.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      WorkCtrGrpCalendarMatrix.Field2.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
    END;

    [ModalPageHandler]
    PROCEDURE MachineCenterCalendarMatrixPageHandler@26(VAR MachineCenterCalendarMatrix@1000 : TestPage 9293);
    BEGIN
      // Verify Machine Center Calendar Matrix Page.
      MachineCenterCalendarMatrix.FILTER.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      Assert.AreEqual(LibraryVariableStorage.DequeueText,MachineCenterCalendarMatrix.Field1.CAPTION,CaptionError);
      Assert.AreEqual(LibraryVariableStorage.DequeueText,MachineCenterCalendarMatrix.Field2.CAPTION,CaptionError);
      MachineCenterCalendarMatrix.Field1.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      MachineCenterCalendarMatrix.Field2.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
    END;

    [PageHandler]
    PROCEDURE AbsencePageHandler@36(VAR AbsencePage@1000 : TestPage 99000772);
    VAR
      QueuedVar@1001 : Variant;
      MachineCenterNo@1002 : Code[20];
      AbsenceDate@1003 : Date;
      AbsenceStartingTime@1004 : Time;
      AbsenceEndingTime@1005 : Time;
    BEGIN
      LibraryVariableStorage.Dequeue(QueuedVar);
      MachineCenterNo := QueuedVar;
      AbsenceDate := LibraryVariableStorage.DequeueDate;
      AbsenceStartingTime := LibraryVariableStorage.DequeueTime;
      AbsenceEndingTime := LibraryVariableStorage.DequeueTime;

      AbsencePage.GOTOKEY(1,MachineCenterNo,AbsenceDate,AbsenceStartingTime,AbsenceEndingTime);
      AbsencePage.Update.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Manufacturing] [SCM]
      Tests for Production Orders:

      1. Verify Work Center Calendar Matrix Page when View by as Day.
      2. Verify Work Center Calendar Matrix Page when View by as Week.
      3. Verify Work Center Calendar Matrix Page when View by as Month.
      4. Verify Work Center Calendar Matrix Page when View by as Quarter.
      5. Verify Work Center Calendar Matrix Page when View by as Year.
      6. Verify Work Center Calendar Matrix Page when View by as Accounting Period.
      7. Verify Work Center Group Calendar Matrix Page when View by as Day and Capacity UOM as Minutes.
      8. Verify Work Center Group Calendar Matrix Page when View by as Day and Capacity UOM as Hours.
      9. Verify Work Center Group Calendar Matrix Page when View by as Week and Capacity UOM as Minutes.
      10. Verify Work Center Group Calendar Matrix Page when View by as Month and Capacity UOM as Minutes.
      11. Verify Work Center Group Calendar Matrix Page when View by as Quarter and Capacity UOM as Minutes.
      12. Verify Work Center Group Calendar Matrix Page when View by as Year and Capacity UOM as Minutes.
      13. Verify Work Center Group Calendar Matrix Page when View by as Accounting Period and Capacity UOM as Minutes.
      14. Verify Machine Center Calendar Matrix Page when View by as Day.
      15. Verify Machine Center Calendar Matrix Page when View by as Week.
      16. Verify Machine Center Calendar Matrix Page when View by as Month.
      17. Verify Machine Center Calendar Matrix Page when View by as Quarter.
      18. Verify Machine Center Calendar Matrix Page when View by as Year.
      19. Verify Machine Center Calendar Matrix Page when View by as Accounting Period.
      20. Test Time Delta in case of the same Start, End time values
      21. Test Time Delta in case of integer number of Hours
      22. Test Time Delta in case of non 23:59:59 EndingTime
      23. Test Time Delta in case of 23:59:59 EndingTime
      24. Test Time Delta in case of 23:59:59:001 EndingTime
      25. Test Time Delta in case of the same Start, End 23:59:59 Time value
      26. Check MaxDate value
      27. Verify capacity load and production order time calculation with a machine center having efficiency less than 100%
      28. Verify that the selected absence entry is updated when "Update" action is run in the Absence page
      29. Verify that the selected entry having "Updated" status set, is not updated when the "Update" action is run

      Covers Test cases : 294792,295210
      ----------------------------------------------------------------------------------------
       Test Function                                                                   TFS ID
      ----------------------------------------------------------------------------------------
        WorkCenterCalendarWithPeriodTypeDay                                            128894
        WorkCenterCalendarWithPeriodTypeWeek                                           128894
        WorkCenterCalendarWithPeriodTypeMonth                                          128894
        WorkCenterCalendarWithPeriodTypeQuarter                                        128894
        WorkCenterCalendarWithPeriodTypeYear                                           128894
        WorkCenterCalendarWithPeriodTypeAccountingPeriod                               128894
        WorkCenterGroupCalendarWithPeriodTypeDayAndCapacityUOMMinutes                  128896
        WorkCenterGroupCalendarWithPeriodTypeDayAndCapacityUOMHours                    128896
        WorkCenterGroupCalendarWithPeriodTypeWeekAndCapacityUOMMinutes                 128896
        WorkCenterGroupCalendarWithPeriodTypeMonthAndCapacityUOMMinutes                128896
        WorkCenterGroupCalendarWithPeriodTypeQuarterAndCapacityUOMMinutes              128896
        WorkCenterGroupCalendarWithPeriodTypeYearAndCapacityUOMMinutes                 128896
        WorkCenterGroupCalendarWithPeriodTypeAccountingPeriodAndCapacityUOMMinutes     128896

      Covers Test cases : 297435
      ----------------------------------------------------------------------------------------
       Test Function                                                                   TFS ID
      ----------------------------------------------------------------------------------------
        MachineCenterCalendarWithPeriodTypeDay                                         128895
        MachineCenterCalendarWithPeriodTypeWeek                                        128895
        MachineCenterCalendarWithPeriodTypeMonth                                       128895
        MachineCenterCalendarWithPeriodTypeQuarter                                     128895
        MachineCenterCalendarWithPeriodTypeYear                                        128895
        MachineCenterCalendarWithPeriodTypeAccountingPeriod                            128895

        CalcTimeDelta_UT1,
        CalcTimeDelta_UT2,
        CalcTimeDelta_UT3,
        CalcTimeDelta_UT4,
        CalcTimeDelta_UT5,
        CalcTimeDelta_UT6                                                              103110
        CheckMaxDate_UT                                                                103371

      ----------------------------------------------------------------------------------------
       Test Function                                                                   PS ID
      ----------------------------------------------------------------------------------------
        PS29218_CalculateCapacityLoadWithReducedEfficiency                             29218

      ----------------------------------------------------------------------------------------
       Test Function                                                                   TFS ID
      ----------------------------------------------------------------------------------------
        TFS360551_UpdateActionUpdatesAbsenceEntry                                      360551
        TFS360551_UpdateActionSkipsUpdatedAbsenceEntry                                 360551
    }
    END.
  }
}

