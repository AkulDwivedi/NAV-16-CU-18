OBJECT Codeunit 136145 Service Contracts II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1004 : Codeunit 130000;
      LibraryService@1010 : Codeunit 131902;
      LibrarySales@1009 : Codeunit 130509;
      LibraryRandom@1000 : Codeunit 130440;
      LibraryVariableStorage@1011 : Codeunit 131004;
      LibraryERM@1002 : Codeunit 131300;
      IsInitialized@1001 : Boolean;
      AmountError@1003 : TextConst '@@@="%1=Field name,%2=Field value,%3=Table name,%4=Field name,%5=Field value,%6=Field value";ENU="%1 must be equal to ''%2''  in %3: %4=%5. Current value is ''%6''."';
      NoOfLinesError@1005 : TextConst '@@@="%1=Table name";ENU=No. of lines in %1 must be %2.';
      NewServiceItemLineError@1006 : TextConst 'ENU=You cannot add a new Service Item Line because the service contract has expired. Renew the Expiration Date on the service contract.';
      LineNotCreatedErr@1007 : TextConst 'ENU=Service item line is not created.';
      CreateInvoiceMsg@1017 : TextConst 'ENU=Do you want to create an invoice for the period';
      CreateServiceOrderBatchErr@1016 : TextConst 'ENU=New Service Order must be created.';
      UnexpectedConfirmTextErr@1014 : TextConst 'ENU=Unexpected confirmation text.';
      CreateContrUsingTemplateQst@1026 : TextConst 'ENU=Do you want to create the contract using a contract template?';
      SignServContractQst@1027 : TextConst '@@@="%1 = Contract No.";ENU=Do you want to sign service contract %1?';
      NewLinesAddedConfirmQst@1018 : TextConst 'ENU=New lines have been added to this contract.\Would you like to continue?';

    [Test]
    [HandlerFunctions(ServiceContractTemplateListHandler,CreateContractServiceOrdersRequestPageHandler,CreateContractInvoicesRequestPageHandler,YesConfirmHandler,MessageHandler)]
    PROCEDURE ServiceInvoiceUpdationFromServiceContract@126();
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceLine@1001 : Record 5902;
      ServiceInvoice@1002 : TestPage 5933;
      UnitPrice@1007 : Decimal;
    BEGIN
      // Check updated Unit Price for posted Service Invoice Line created using CreateContractInvoices Batch Job.

      // 1. Setup: Create and Sign Service Contract, Create Service Order for Contract and Post it, Create Service Invoice for Contract and update Unit Price on Line.
      Initialize;
      CreateServiceContract(ServiceContractHeader,CreateCustomer(FALSE),STRSUBSTNO('<%1Y>',LibraryRandom.RandInt(5)),1);
      LibraryVariableStorage.Enqueue(ServiceContractHeader."Contract No.");
      SignContract(ServiceContractHeader);
      RunCreateContractServiceOrders;
      UpdateAndPostServiceOrder(ServiceContractHeader."Contract No.");

      LibraryVariableStorage.Enqueue(CALCDATE(ServiceContractHeader."Service Period",WORKDATE));
      LibraryVariableStorage.Enqueue(ServiceContractHeader."Contract No.");
      RunCreateContractInvoices;
      FindServiceLine(ServiceLine,ServiceContractHeader."Contract No.");
      UnitPrice := ServiceLine."Unit Price";

      // 2. Exercise: Post Service Invoice using Page.
      ServiceInvoice.OPENEDIT;
      ServiceInvoice.FILTER.SETFILTER("No.",ServiceLine."Document No.");
      ServiceInvoice.Post.INVOKE;

      // 3. Verify: Verify Unit Price in Service Ledger Entries.
      VerifyServiceLedgerEntry(ServiceContractHeader."Contract No.",-UnitPrice);
    END;

    [Test]
    [HandlerFunctions(NoConfirmHandler)]
    PROCEDURE UnChangedNextPlannedServiceDateOnContract@2();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceContract@1001 : TestPage 6050;
    BEGIN
      // Check Default Next Planned Service Date on Service Contract Line.

      // 1. Setup.
      Initialize;
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,CreateCustomer(FALSE));

      // 2. Exercise: Open Service Contract Page because some code is written on Page.
      ServiceContract.OPENEDIT;
      ServiceContract.FILTER.SETFILTER("Contract No.",ServiceContractHeader."Contract No.");

      // 3. Verify: Verify Next Planned Service Date.
      ServiceContract.ServContractLines."Next Planned Service Date".ASSERTEQUALS(WORKDATE);
    END;

    [Test]
    [HandlerFunctions(NoConfirmHandler)]
    PROCEDURE ChangedNextPlannedServiceDateOnContract@1();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceContract@1001 : TestPage 6050;
      FirstServiceDate@1002 : Date;
      ServicePeriod@1003 : DateFormula;
    BEGIN
      // Check Next Planned Service Date and Service Period on Service Contract Line after updating them on Service Contract Header.

      // 1. Setup: Take Random First Service Date and Service Period. Update Service Contract Header.
      Initialize;
      FirstServiceDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'M>',WORKDATE);
      EVALUATE(ServicePeriod,'<' + FORMAT(LibraryRandom.RandInt(10)) + 'M>');
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,CreateCustomer(FALSE));
      ServiceContractHeader.VALIDATE("Service Period",ServicePeriod);
      ServiceContractHeader.VALIDATE("First Service Date",FirstServiceDate);
      ServiceContractHeader.MODIFY(TRUE);

      // 2. Exercise: Open Service Contract Page. Using page because there is no data available on Service Contract Line Record when Line is not created.
      ServiceContract.OPENEDIT;
      ServiceContract.FILTER.SETFILTER("Contract No.",ServiceContractHeader."Contract No.");

      // 3. Verify: Verify Service Period and Next Planned Service Date.
      ServiceContract.ServContractLines."Service Period".ASSERTEQUALS(ServicePeriod);
      ServiceContract.ServContractLines."Next Planned Service Date".ASSERTEQUALS(FirstServiceDate);
    END;

    [Test]
    [HandlerFunctions(ServiceContractTemplateListHandler,YesConfirmHandler,MessageHandler)]
    PROCEDURE ContractInvoiceWithDifferentPrepaidAndNonPrepaidAccounts@5();
    VAR
      ServiceContractAccountGroup@1000 : Record 5973;
    BEGIN
      // Check Moved From Prepaid Account field in Service Ledger Entries after posting Service Invoice with Service Contracts Account Group having different Accounts.

      // 1. Setup: Create and Sign Service Contract, Create Service Invoice and Post it.
      Initialize;
      LibraryService.CreateServiceContractAcctGrp(ServiceContractAccountGroup);
      PostServiceInvoiceAndVerifyPrepaidAccount(ServiceContractAccountGroup.Code);
    END;

    [Test]
    [HandlerFunctions(ServiceContractTemplateListHandler,YesConfirmHandler,MessageHandler)]
    PROCEDURE ContractInvoiceWithSamePrepaidAndNonPrepaidAccounts@13();
    BEGIN
      // Check Moved From Prepaid Account field in Service Ledger Entries after posting Service Invoice with Service Contracts Account Group having similar Accounts.

      // 1. Setup: Create and Sign Service Contract, Create Service Invoice and Post it.
      Initialize;
      PostServiceInvoiceAndVerifyPrepaidAccount(CreateAndUpdateServiceContractAccountGroup);
    END;

    [Test]
    [HandlerFunctions(ServiceContractTemplateListHandler,YesConfirmHandler,MessageHandler)]
    PROCEDURE ContractCrMemoWithDifferentPrepaidAndNonPrepaidAccounts@32();
    VAR
      ServiceContractAccountGroup@1000 : Record 5973;
    BEGIN
      // Check Moved From Prepaid Account field in Service Ledger Entries after posting Service Credit Memo with Service Contracts Account Group having different Accounts.

      // Create Service Contract Account Group, Create and Sign Service Contract, Find Service Invoice and Post it, Create Service Credit Memo and Post.
      Initialize;
      LibraryService.CreateServiceContractAcctGrp(ServiceContractAccountGroup);
      CreditMemoWithServiceContractAccountGroup(ServiceContractAccountGroup.Code);
    END;

    [Test]
    [HandlerFunctions(ServiceContractTemplateListHandler,YesConfirmHandler,MessageHandler)]
    PROCEDURE ContractCrMemoWithSamePrepaidAndNonPrepaidAccounts@9();
    BEGIN
      // Check Moved From Prepaid Account field in Service Ledger Entries after posting Service Credit Memo with Service Contracts Account Group having similar Accounts.

      // Create and Sign Service Contract, Find Service Invoice and Post it, Create Service Credit Memo and Post.
      Initialize;
      CreditMemoWithServiceContractAccountGroup(CreateAndUpdateServiceContractAccountGroup);
    END;

    [Test]
    [HandlerFunctions(SelectServiceContractTemplateListHandler,CreateContractInvoicesRequestPageHandler,YesConfirmHandler,MessageHandler)]
    PROCEDURE ServiceLedgerEntryForServiceContractWithExpirationDate@7();
    VAR
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractTemplate@1000 : Record 5968;
      ServiceLedgerEntry@1001 : Record 5907;
      OldWorkDate@1004 : Date;
      InvoiceDate@1005 : Date;
    BEGIN
      // Test Amount on Service Ledger Entries for a Service Contract with Expiration Date and is created using the Service Contract Template on which Invoice Period is set to one Year.

      // 1. Setup: Create Service Contract Template, create and sign Service Contract.
      Initialize;
      OldWorkDate := WORKDATE;
      InvoiceDate := SetNewWorkDate;

      CreateServiceContractTemplate(ServiceContractTemplate,TRUE);
      LibraryVariableStorage.Enqueue(ServiceContractTemplate."No.");
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,CreateCustomer(FALSE));
      EVALUATE(ServiceContractHeader."Service Period",STRSUBSTNO('<%1Y>',LibraryRandom.RandInt(5)));
      CreateContractWithLine(
        ServiceContractHeader,ServiceContractTemplate."Serv. Contract Acc. Gr. Code",InvoiceDate,
        ServiceContractHeader."Service Period");
      SignContract(ServiceContractHeader);
      LibraryVariableStorage.Enqueue(InvoiceDate);
      LibraryVariableStorage.Enqueue(ServiceContractHeader."Contract No.");

      // 2. Exercise: Create Service Invoice using CreateContractInvoices Batch Job.
      RunCreateContractInvoices;

      // 3. Verify: Verify Amount in Service Ledger Entries.
      FindServiceLedgerEntries(ServiceLedgerEntry,ServiceContractHeader."Contract No.");
      Assert.AreEqual(12,ServiceLedgerEntry.COUNT,STRSUBSTNO(NoOfLinesError,ServiceLedgerEntry.TABLECAPTION,1));  // Service Ledger Entries must be 12 due to Yearly Invoice Period on Contract.
      VerifyServiceLedgerEntry(ServiceContractHeader."Contract No.",-ROUND(ServiceContractHeader."Annual Amount" / 12));  // Devide by 12 since the Invoice Period is Yearly.

      // 4. Tear Down: Reset the WORKDATE to original WORKDATE.
      WORKDATE := OldWorkDate;
    END;

    [Test]
    [HandlerFunctions(ServiceContractTemplateListHandler,YesConfirmHandler,MessageHandler)]
    PROCEDURE ServiceItemLineOnExpiredServiceContract@6();
    VAR
      ServiceContractAccountGroup@1000 : Record 5973;
      ServiceContractHeader@1001 : Record 5965;
      ServiceContractLine@1003 : Record 5964;
      LockOpenServContract@1004 : Codeunit 5943;
    BEGIN
      // Verify Program does not allow to add new Service Item line on Service Contract which is already expired.

      // 1. Setup: Create and sign Service Contract with Expiration Date. Open the Service Contract again.
      Initialize;
      LibraryService.FindContractAccountGroup(ServiceContractAccountGroup);
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,CreateCustomer(FALSE));
      EVALUATE(ServiceContractHeader."Service Period",STRSUBSTNO('<%1Y>',LibraryRandom.RandInt(5)));
      CreateContractWithLine(
        ServiceContractHeader,ServiceContractAccountGroup.Code,CALCDATE('<CY>',WORKDATE),ServiceContractHeader."Service Period");
      SignContract(ServiceContractHeader);
      ServiceContractHeader.FIND;
      LockOpenServContract.OpenServContract(ServiceContractHeader);
      ServiceContractHeader.FIND;
      SetExpirationDateLessThanLastInvoiceDate(ServiceContractHeader);

      // 2. Exercise: Add another Service Item line in the Service Contract.
      ASSERTERROR CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,0D);  // Passing 0D for blank Contract Expiration Date.

      // 3. Verify: Verify error message which shows that Program does not allow to add new Service Item line on Service Contract which is already expired.
      Assert.ExpectedError(NewServiceItemLineError);
    END;

    [Test]
    [HandlerFunctions(SelectServiceContractTemplateListHandler,CreateContractInvoicesRequestPageHandler,YesConfirmHandler,MessageHandler)]
    PROCEDURE AmountOnServiceInvoiceLineCreatedFromContract@14();
    VAR
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractTemplate@1000 : Record 5968;
      ServiceLine@1001 : Record 5902;
      OldWorkDate@1004 : Date;
      InvoiceDate@1005 : Date;
      Amount@1007 : Decimal;
    BEGIN
      // Test Amount on Service Invoice created from Service Contract with Invoice Period as Year and Prepaid False.

      // 1. Setup: Create Service Contract Template, create and sign Service Contract.
      Initialize;
      OldWorkDate := WORKDATE;
      InvoiceDate := SetNewWorkDate;
      CreateServiceContractTemplate(ServiceContractTemplate,FALSE);
      LibraryVariableStorage.Enqueue(ServiceContractTemplate."No.");
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,CreateCustomer(FALSE));
      EVALUATE(ServiceContractHeader."Service Period",STRSUBSTNO('<%1Y>',LibraryRandom.RandInt(5)));
      CreateContractWithLine(
        ServiceContractHeader,ServiceContractTemplate."Serv. Contract Acc. Gr. Code",InvoiceDate,
        ServiceContractHeader."Service Period");
      Amount := FindServiceContractLineAmount(ServiceContractHeader);
      SignContract(ServiceContractHeader);
      LibraryVariableStorage.Enqueue(InvoiceDate);
      LibraryVariableStorage.Enqueue(ServiceContractHeader."Contract No.");

      // 2. Exercise.
      RunCreateContractInvoices;

      // 3. Verify: Verify Amount in created Service Invoice.
      FindServiceLine(ServiceLine,ServiceContractHeader."Contract No.");
      ServiceLine.TESTFIELD(Amount,Amount);

      // 4. Tear Down: Reset the WORKDATE to original WORKDATE.
      WORKDATE := OldWorkDate;
    END;

    [Test]
    [HandlerFunctions(SelectServiceContractTemplateListHandler,CreateContractInvoicesRequestPageHandler,YesConfirmHandler,MessageHandler)]
    PROCEDURE AmountOnPostedServiceLineCreatedFromContract@77();
    VAR
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractTemplate@1000 : Record 5968;
      OldWorkDate@1004 : Date;
      InvoiceDate@1003 : Date;
      Amount@1007 : Decimal;
    BEGIN
      // Test Amount on Posted Service Invoice created from Service Contract with Invoice Period as Year and Prepaid False.

      // 1. Setup: Create and Sign Service Contract for Invoice Period Year, Create Contract Invoice from Service Contract.
      Initialize;
      OldWorkDate := WORKDATE;
      InvoiceDate := SetNewWorkDate;
      CreateServiceContractTemplate(ServiceContractTemplate,FALSE);
      LibraryVariableStorage.Enqueue(ServiceContractTemplate."No.");
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,CreateCustomer(FALSE));
      EVALUATE(ServiceContractHeader."Service Period",STRSUBSTNO('<%1Y>',LibraryRandom.RandInt(5)));
      CreateContractWithLine(
        ServiceContractHeader,ServiceContractTemplate."Serv. Contract Acc. Gr. Code",InvoiceDate,
        ServiceContractHeader."Service Period");
      Amount := FindServiceContractLineAmount(ServiceContractHeader);
      SignContract(ServiceContractHeader);
      LibraryVariableStorage.Enqueue(InvoiceDate);
      LibraryVariableStorage.Enqueue(ServiceContractHeader."Contract No.");
      RunCreateContractInvoices;

      // 2. Exercise: Post the service Invoice that is created from Create Contract Invoice Batch Job.
      FindAndPostServiceInvoice(ServiceContractHeader."Contract No.");

      // 3. Verify: Verify Amount in Posted Service Invoice.
      VerifyServiceInvoiceLineAmount(ServiceContractHeader."Contract No.",Amount);

      // 4. Tear Down: Reset the WORKDATE to original WORKDATE.
      WORKDATE := OldWorkDate;
    END;

    [Test]
    [HandlerFunctions(SelectServiceContractTemplateListHandler,YesConfirmHandler)]
    PROCEDURE AddServiceContractLineWithEmptyContractHeaderExpiratoinDate@17();
    VAR
      ServiceContractHeader@1001 : Record 5965;
      ServiceContractTemplate@1000 : Record 5968;
      ServiceContractLine@1002 : Record 5964;
    BEGIN
      // Verify that service contract line can be added in case of empty expiration date

      // 1. Setup: Create Service Contract.
      Initialize;
      CreateServiceContractTemplate(ServiceContractTemplate,FALSE);
      LibraryVariableStorage.Enqueue(''); // empty service contract template
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,CreateCustomer(FALSE));
      ServiceContractHeader."Last Invoice Date" := WORKDATE; // to cause expiration date analysis
      ServiceContractHeader.MODIFY;

      // 2. Exercise: add service contract line
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,0D);

      // 3. Verify: line is created
      Assert.IsTrue(ServiceContractLine.FIND,LineNotCreatedErr);
    END;

    [Test]
    [HandlerFunctions(ConditionalConfirmHandler,ServiceContractTemplateListHandler2,ConfirmCreateContractServiceOrdersRequestPageHandler,MessageHandler)]
    PROCEDURE CreateServiceOrderFromServiceContractWithTwoLines@60();
    VAR
      ServiceContractNo@1002 : Code[20];
      ServiceContractLine1No@1000 : Integer;
      ServiceContractLine2No@1001 : Integer;
      NextPlannedServiceDate1@1003 : Date;
      NextPlannedServiceDate2@1004 : Date;
    BEGIN
      // [SCENARIO 360643] Create service order from second line of Service Contract after creating order from first line.
      Initialize;
      // [GIVEN] Create Service Contract with two line are having different Next Planned Service Date.
      CreateServiceContractWithTwoLines(ServiceContractNo,ServiceContractLine1No,ServiceContractLine2No,
        NextPlannedServiceDate1,NextPlannedServiceDate2);
      // [GIVEN] Create Service Order from first line.
      RunCreateContractServiceOrdersWithDates(NextPlannedServiceDate1,
        LibraryRandom.RandDateFrom(NextPlannedServiceDate1,10));
      // [WHEN] Create Service Order from second line.
      RunCreateContractServiceOrdersWithDates(NextPlannedServiceDate2,
        LibraryRandom.RandDateFrom(NextPlannedServiceDate2,10));
      // [THEN] Must be created new Service order from second line of Service Contract.
      // [THEN] Field Response Date of Service Item Line must be correctly calculated.
      VerifyCreatedServiceOrder(ServiceContractNo,ServiceContractLine1No,ServiceContractLine2No);
    END;

    [Test]
    [HandlerFunctions(SelectServiceContractTemplateListHandler,CreateContractInvoicesRequestPageHandler,YesConfirmHandler,MessageHandler)]
    PROCEDURE CreateContractInvWhenExpirationDateBeforeNextInvDate@89();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceItemNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Invoice] [Contract Expiration Date] [Create Service Invoice]
      // [SCENARIO 374724] Service Ledger Entry is not created for Contract Invoice Line when Expiration Date is before Next Invoice Date

      Initialize;
      // [GIVEN] Signed Service Contract with two lines ("Service Item No." = "A" and "B")
      LibraryVariableStorage.Enqueue(''); // empty service contract template
      CreateServiceContract(ServiceContractHeader,CreateCustomer(FALSE),'<1M>',2);
      SignContract(ServiceContractHeader);
      // [GIVEN] Expiration date in Service Contract Line with "Service Item No." = "A" is the day before Next Invoice Date = "X"
      ServiceItemNo :=
        ChangeExpirationDateOnContractLine(ServiceContractHeader,ServiceContractHeader."Next Invoice Date");

      // [WHEN] Run Create Contract Invoices batch job for Posting Date = "X"
      RunCreateContractInvoices;

      // [THEN] Service Ledger Entry for "Service Item No." = "A" and "Posting Date" = "X" is not created
      VerifyServiceLedgEntryDoesNotExist(
        ServiceContractHeader."Contract No.",ServiceItemNo,ServiceContractHeader."Next Invoice Date");
    END;

    [Test]
    [HandlerFunctions(SelectServiceContractTemplateListHandler,CreateContractInvoicesRequestPageHandler,YesConfirmHandler,MessageHandler)]
    PROCEDURE CreateNonPreparedContractInvWhenExpirationDateBeforeNextInvPeriodStart@28();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceItemNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Invoice] [Contract Expiration Date]
      // [SCENARIO 375363] Service Ledger Entry is not created for Non Prepaid Contract Invoice Line when Expiration Date is before Next Invoice Period Start

      Initialize;
      // [GIVEN] Signed Non Prepaid Service Contract with two lines ("Service Item No." = "A" and "B")
      LibraryVariableStorage.Enqueue(CreateNonPrepaidServTemplateWithMonthInvPeriod);
      CreateServiceContract(ServiceContractHeader,CreateCustomer(FALSE),'<1M>',2);
      SignContract(ServiceContractHeader);

      // [GIVEN] Service Contract Line, where "Service Item No." = "A", "Expiration Date" = 23.01, "Next Invoice Period Start " = 24.01
      ServiceItemNo :=
        ChangeExpirationDateOnContractLine(ServiceContractHeader,ServiceContractHeader."Next Invoice Period Start");

      // [WHEN] Run Create Contract Invoices batch job for Posting Date = "X"
      RunCreateContractInvoices;

      // [THEN] Service Ledger Entry for "Service Item No." = "A" and "Posting Date" = 24.01 is not created
      VerifyServiceLedgEntryDoesNotExist(
        ServiceContractHeader."Contract No.",ServiceItemNo,ServiceContractHeader."Next Invoice Period Start");
    END;

    [Test]
    [HandlerFunctions(MultipleDialogsConfirmHandler,SelectServiceContractTemplateListHandler,CreateContractInvoicesRequestPageHandler,MessageHandler)]
    PROCEDURE InvoicePartialNonPrepaidServLine@29();
    VAR
      ServContractHeader@1000 : Record 5965;
      ServContractLine@1001 : Record 5964;
      SavedWorkDate@1003 : Date;
      InvoiceDate@1002 : Date;
    BEGIN
      // [FEATURE] [Service Invoice] [Non-Prepaid Contract]
      // [SCENARIO 375877] Service Line created when invoice Non-Prepaid Contract with new Service Contract Line where "Starting Date" after "Next Invoice Period Start"
      // SCENARIO 376625 - Description line should show partial period

      // [GIVEN] Signed Non-Prepaid Service Contract with single line and Service Invoice for Period "X" - "Next Invoice Period Start"
      // [GIVEN] New Service Line where "Starting Date" after "Next Invoice Period Start" added after reopening Service Contract
      // [GIVEN] Locked Service Contract without additional service invoice and shifting "Next Invoice Period"
      Initialize;
      ScenarioWithNewServLineWhenStartingDateAfterNextInvPeriodStart(
        ServContractHeader,ServContractLine,SavedWorkDate,FALSE,0D,InvoiceDate);

      // [WHEN] Run Create Service Contract Invoices until the "Next Invoice Period End"
      RunCreateContractInvoices;

      // [THEN] Service Invoice created for new Service Line with non-zero amount
      VerifyServContractLineExistInServInvoice(
        ServContractHeader."Contract No.",ServContractLine."Service Item No.",
        GetServContractGLAcc(ServContractHeader."Serv. Contract Acc. Gr. Code",FALSE),InvoiceDate,
        STRSUBSTNO('%1 - %2',ServContractLine."Starting Date",ServContractHeader."Next Invoice Period End"));

      // Tear Down: Reset the WORKDATE to original WORKDATE.
      WORKDATE := SavedWorkDate;
    END;

    [Test]
    [HandlerFunctions(MultipleDialogsConfirmHandler,SelectServiceContractTemplateListHandler,CreateContractInvoicesRequestPageHandler,MessageHandler)]
    PROCEDURE InvoicePartialPrepaidServLine@130();
    VAR
      ServContractHeader@1004 : Record 5965;
      ServContractLine@1003 : Record 5964;
      ServContractManagement@1005 : Codeunit 5940;
      SavedWorkDate@1000 : Date;
      InvoiceDate@1001 : Date;
      ExpectedAmount@1002 : Decimal;
    BEGIN
      // [FEATURE] [Service Invoice] [Prepaid Contract]
      // [SCENARIO 376109] New prepaid service contract line with "Starting Date" after "Next Invoice Period Start" should split by periods when posting
      // Based on SCENARIO 375878 - Service Line created when invoice Prepaid Contract with new Service Contract Line where "Starting Date" after "Next Invoice Period Start"

      // [GIVEN] Signed Prepaid Service Contract (Inv. Period = Year) with single line and Service Invoice for Period "X" with "Next Invoice Period Start"  = 01.01.15 (Annual amount = 100)
      // [GIVEN] New Service Line where "Starting Date" = 05.01.15 added after reopening Service Contract (Line amount for partial period = 95)
      // [GIVEN] Locked Service Contract without additional service invoice and shifting "Next Invoice Period"
      Initialize;
      ScenarioWithNewServLineWhenStartingDateAfterNextInvPeriodStart(
        ServContractHeader,ServContractLine,SavedWorkDate,TRUE,0D,InvoiceDate);

      ExpectedAmount :=
        ROUND(
          ServContractManagement.CalcContractLineAmount(
            ServContractLine."Line Amount",ServContractLine."Starting Date",ServContractHeader."Next Invoice Period End"));

      // [WHEN] Run Create Service Contract Invoices until the "Next Invoice Period End"
      RunCreateContractInvoices;

      // [THEN] 12 service lines created with total amount = 95
      VerifyServContractLineAmountSplitByPeriod(
        ServContractHeader."Contract No.",ServContractLine."Service Item No.",
        GetServContractGLAcc(ServContractHeader."Serv. Contract Acc. Gr. Code",TRUE),InvoiceDate,12,ExpectedAmount);

      // Tear Down: Reset the WORKDATE to original WORKDATE.
      WORKDATE := SavedWorkDate;
    END;

    [Test]
    [HandlerFunctions(MultipleDialogsConfirmHandler,SelectServiceContractTemplateListHandler,CreateContractInvoicesRequestPageHandler,MessageHandler)]
    PROCEDURE InvoicePartialPrepaidServLineWithExpDateSamePeriod@35();
    VAR
      ServContractHeader@1004 : Record 5965;
      ServContractLine@1003 : Record 5964;
      ServContractManagement@1002 : Codeunit 5940;
      SavedWorkDate@1001 : Date;
      InvoiceDate@1005 : Date;
      ExpectedAmount@1000 : Decimal;
    BEGIN
      // [FEATURE] [Service Invoice] [Prepaid Contract] [Service Contract Expiration Date]
      // [SCENARIO 376109] New prepaid service contract line with "Starting Date" after "Next Invoice Period Start" and "Contract Expiration Date" in the same period should be posted as one partial period

      // [GIVEN] Signed Prepaid Service Contract (Inv. Period = Year) with single line and Service Invoice for Period "X" with "Next Invoice Period Start"  = 01.01.15 (Annual amount = 100)
      // [GIVEN] New Service Line where "Starting Date" = 05.01.15 and "Expiration Date" = 27.01.15 added after reopening Service Contract (Line amount for partial period = 5)
      // [GIVEN] Locked Service Contract without additional service invoice and shifting "Next Invoice Period"
      Initialize;
      ScenarioWithNewServLineWhenStartingDateAfterNextInvPeriodStart(
        ServContractHeader,ServContractLine,SavedWorkDate,TRUE,CALCDATE('<CM+1M-3D>',WORKDATE),InvoiceDate);

      ExpectedAmount :=
        ROUND(
          ServContractManagement.CalcContractLineAmount(
            ServContractLine."Line Amount",ServContractLine."Starting Date",ServContractLine."Contract Expiration Date"));

      // [WHEN] Run Create Service Contract Invoices until the "Contract Expiration Date"
      RunCreateContractInvoices;

      // [THEN] 1 service line created with total amount = 5
      VerifyServContractLineAmountSplitByPeriod(
        ServContractHeader."Contract No.",ServContractLine."Service Item No.",
        GetServContractGLAcc(ServContractHeader."Serv. Contract Acc. Gr. Code",TRUE),InvoiceDate,1,ExpectedAmount);

      // Tear Down: Reset the WORKDATE to original WORKDATE.
      WORKDATE := SavedWorkDate;
    END;

    [Test]
    [HandlerFunctions(ServiceContractTemplateListHandler,YesConfirmHandler,MessageHandler)]
    PROCEDURE ServiceInvoiceFromContractForCustomerPricesInclVAT@39();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceHeader@1002 : Record 5900;
    BEGIN
      // [FEATURE] [Invoice] [Prices Incl. VAT]
      // [SCENARIO 377774] Service Invoice created from Service Contract has "Prices Incl. VAT" = FALSE for Customer with "Prices Incl. VAT" = TRUE
      Initialize;

      // [GIVEN] Service Contract for Customer with "Prices Incl. VAT" = TRUE. Period Amount = "A".
      // [WHEN] Create Service Invoice from Service Contract
      SignContractAndCreateServiceInvoice(ServiceContractHeader,TRUE);

      // [THEN] Service Invoice has "Prices Incl. VAT" = FALSE, Amount = "A"
      VerifyServiceDocAmount(ServiceHeader."Document Type"::Invoice,ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(ServiceContractTemplateListHandler,YesConfirmHandler,MessageHandler)]
    PROCEDURE ServiceInvoiceFromContractForCustomerPricesExclVAT@76();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceHeader@1002 : Record 5900;
    BEGIN
      // [FEATURE] [Invoice] [Prices Excl. VAT]
      // [SCENARIO 377774] Service Invoice created from Service Contract has "Prices Incl. VAT" = FALSE for Customer with "Prices Incl. VAT" = FALSE
      Initialize;

      // [GIVEN] Service Contract for Customer with "Prices Incl. VAT" = FALSE. Period Amount = "A".
      // [WHEN] Create Service Invoice from Service Contract
      SignContractAndCreateServiceInvoice(ServiceContractHeader,FALSE);

      // [THEN] Created Service Invoice has "Prices Incl. VAT" = FALSE, Amount = "A"
      VerifyServiceDocAmount(ServiceHeader."Document Type"::Invoice,ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(ServiceContractTemplateListHandler,YesConfirmHandler,MessageHandler)]
    PROCEDURE PostedServiceInvoiceFromContractForCustomerPricesInclVAT@83();
    VAR
      ServiceContractHeader@1000 : Record 5965;
    BEGIN
      // [FEATURE] [Invoice] [Prices Incl. VAT]
      // [SCENARIO 377774] Posted Service Invoice created from Service Contract has "Prices Incl. VAT" = FALSE for Customer with "Prices Incl. VAT" = TRUE
      Initialize;

      // [GIVEN] Service Contract for Customer with "Prices Incl. VAT" = TRUE. Period Amount = "A".
      // [GIVEN] Service Invoice created from Service Contract
      // [WHEN] Post Service Invoice
      SignContractAndPostServiceInvoice(ServiceContractHeader,TRUE);

      // [THEN] Posted Service Invoice has "Prices Incl. VAT" = FALSE, Amount = "A"
      // [THEN] Service Ledger Entry "Usage" Amount = "A"
      VerifyPostedServiceInvoiceAmount(ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(ServiceContractTemplateListHandler,YesConfirmHandler,MessageHandler)]
    PROCEDURE PostedServiceInvoiceFromContractForCustomerPricesExclVAT@81();
    VAR
      ServiceContractHeader@1000 : Record 5965;
    BEGIN
      // [FEATURE] [Invoice] [Prices Excl. VAT]
      // [SCENARIO 377774] Posted Service Invoice created from Service Contract has "Prices Incl. VAT" = FALSE for Customer with "Prices Incl. VAT" = FALSE
      Initialize;

      // [GIVEN] Service Contract for Customer with "Prices Incl. VAT" = FALSE. Period Amount = "A".
      // [GIVEN] Service Invoice created from Service Contract
      // [WHEN] Post Service Invoice
      SignContractAndPostServiceInvoice(ServiceContractHeader,FALSE);

      // [THEN] Posted Service Invoice has "Prices Incl. VAT" = FALSE, Amount = "A"
      // [THEN] Service Ledger Entry "Usage" Amount = "A"
      VerifyPostedServiceInvoiceAmount(ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(ServiceContractTemplateListHandler,YesConfirmHandler,MessageHandler)]
    PROCEDURE ServiceCrMemoFromContractForCustomerPricesInclVAT@97();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceHeader@1002 : Record 5900;
    BEGIN
      // [FEATURE] [Credit Memo] [Prices Incl. VAT]
      // [SCENARIO 377774] Service Credit Memo created from Service Contract has "Prices Incl. VAT" = FALSE for Customer with "Prices Incl. VAT" = TRUE
      Initialize;

      // [GIVEN] Service Contract for Customer with "Prices Incl. VAT" = TRUE. Period Amount = "A".
      // [GIVEN] Posted Service Invoice from Service Contract
      // [WHEN] Create Service Credit Memo from Service Contract
      SignContractAndPostServiceInvoice(ServiceContractHeader,TRUE);
      CreateServiceCreditMemo(ServiceHeader,ServiceContractHeader);

      // [THEN] Created Service Credit Memo has "Prices Incl. VAT" = FALSE, Amount = "A"
      VerifyServiceDocAmount(ServiceHeader."Document Type"::"Credit Memo",ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(ServiceContractTemplateListHandler,YesConfirmHandler,MessageHandler)]
    PROCEDURE ServiceCrMemoFromContractForCustomerPricesExcllVAT@131();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceHeader@1002 : Record 5900;
    BEGIN
      // [FEATURE] [Credit Memo] [Prices Excl. VAT]
      // [SCENARIO 377774] Service Credit Memo created from Service Contract has "Prices Incl. VAT" = FALSE for Customer with "Prices Incl. VAT" = FALSE
      Initialize;

      // [GIVEN] Service Contract for Customer with "Prices Incl. VAT" = FALSE. Period Amount = "A".
      // [GIVEN] Posted Service Invoice from Service Contract
      // [WHEN] Create Service Credit Memo from Service Contract
      SignContractAndPostServiceInvoice(ServiceContractHeader,FALSE);
      CreateServiceCreditMemo(ServiceHeader,ServiceContractHeader);

      // [THEN] Created Service Credit Memo has "Prices Incl. VAT" = FALSE, Amount = "A"
      VerifyServiceDocAmount(ServiceHeader."Document Type"::"Credit Memo",ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(ServiceContractTemplateListHandler,YesConfirmHandler,MessageHandler)]
    PROCEDURE PostedServiceCrMemoFromContractForCustomerPricesInclVAT@133();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceHeader@1002 : Record 5900;
    BEGIN
      // [FEATURE] [Credit Memo] [Prices Incl. VAT]
      // [SCENARIO 377774] Posted Service Credit Memo created from Service Contract has "Prices Incl. VAT" = FALSE for Customer with "Prices Incl. VAT" = TRUE
      Initialize;

      // [GIVEN] Service Contract for Customer with "Prices Incl. VAT" = TRUE. Period Amount = "A".
      // [GIVEN] Posted Service Invoice from Service Contract
      // [GIVEN] Create Service Credit Memo from Service Contract
      // [WHEN] Post Service Credit Memo
      SignContractAndPostServiceInvoice(ServiceContractHeader,TRUE);
      CreateServiceCreditMemo(ServiceHeader,ServiceContractHeader);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [THEN] Posted Service Credit Memo has "Prices Incl. VAT" = FALSE, Amount = "A"
      // [THEN] Service Ledger Entry "Usage" Amount = -"A"
      VerifyPostedServiceCrMemoAmount(ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(ServiceContractTemplateListHandler,YesConfirmHandler,MessageHandler)]
    PROCEDURE PostedServiceCrMemoFromContractForCustomerPricesExclVAT@138();
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceHeader@1002 : Record 5900;
    BEGIN
      // [FEATURE] [Credit Memo] [Prices Excl. VAT]
      // [SCENARIO 377774] Posted Service Credit Memo created from Service Contract has "Prices Incl. VAT" = FALSE for Customer with "Prices Incl. VAT" = FALSE
      Initialize;

      // [GIVEN] Service Contract for Customer with "Prices Incl. VAT" = FALSE. Period Amount = "A".
      // [GIVEN] Posted Service Invoice from Service Contract
      // [GIVEN] Create Service Credit Memo from Service Contract
      // [WHEN] Post Service Credit Memo
      SignContractAndPostServiceInvoice(ServiceContractHeader,FALSE);
      CreateServiceCreditMemo(ServiceHeader,ServiceContractHeader);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [THEN] Posted Service Credit Memo has "Prices Incl. VAT" = FALSE, Amount = "A"
      // [THEN] Service Ledger Entry "Usage" Amount = -"A"
      VerifyPostedServiceCrMemoAmount(ServiceContractHeader."Contract No.");
    END;

    [Test]
    [HandlerFunctions(MultipleDialogsConfirmHandler,SelectServiceContractTemplateListHandler,CreateContractInvoicesRequestPageHandler,MessageHandler)]
    PROCEDURE MultipleServLinesGeneratedWhenSignAlreadySignedContractWithNewLine@56();
    VAR
      ServContractHeader@1003 : Record 5965;
      ServContractLine@1002 : Record 5964;
      ServContractManagement@1006 : Codeunit 5940;
      ExpectedAmount@1005 : Decimal;
      SavedWorkDate@1000 : Date;
    BEGIN
      // [SCENARIO 379870] New prepaid service contract line with "Starting Date" after "Next Invoice Period Start" should split by periods when sign contract

      Initialize;
      // [GIVEN] Signed Service Contract with single line. Invoice Period = Year. Starting Year = 2017
      // [GIVEN] Posted Service Invoice for 2017 year. Next Invoice Period is 2018 year

      SavedWorkDate := WORKDATE;
      ScenarioWithSignedAndInvoicedServiceContract(ServContractHeader);

      // [GIVEN] New Service Contract Line added with Starting Date = 01.01.2017, Amount = 100
      AddNewLineInServiceContractWithSpecificStartingDate(ServContractHeader,ServContractLine,0D);
      ExpectedAmount :=
        ROUND(
          ServContractManagement.CalcContractLineAmount(
            ServContractLine."Line Amount",ServContractLine."Starting Date",ServContractHeader."Last Invoice Period End"));

      LibraryVariableStorage.Enqueue(SignServContractQst);
      LibraryVariableStorage.Enqueue(NewLinesAddedConfirmQst);
      LibraryVariableStorage.Enqueue(CreateInvoiceMsg);

      // [WHEN] Sign Service Contract with new line added
      SignContract(ServContractHeader);

      // [THEN] Posted Service Invoice created with 12 lines (one line = one month) and Total Amount = 100
      VerifyServContractLineAmountSplitByPeriod(
        ServContractHeader."Contract No.",ServContractLine."Service Item No.",
        GetServContractGLAcc(ServContractHeader."Serv. Contract Acc. Gr. Code",TRUE),WORKDATE,12,ExpectedAmount);

      // Tear down
      WORKDATE := SavedWorkDate;
    END;

    [Test]
    [HandlerFunctions(MultipleDialogsConfirmHandler,SelectServiceContractTemplateListHandler,CreateContractInvoicesRequestPageHandler,MessageHandler)]
    PROCEDURE NoRoundingVarianceOnMultipleServiceInvoiceWithFCYPrepaidContract@326();
    VAR
      ServContractHeader@1001 : Record 5965;
      ServContractLine@1004 : Record 5964;
      SavedWorkDate@1000 : Date;
      CustomExchRate@1002 : Decimal;
    BEGIN
      // [FEATURE] [FCY] [Rounding]
      // [SCENARIO 379879] Total amount is correct without rounding variance in Service Invoice with multiple lines for Prepaid Service Contract

      Initialize;
      SavedWorkDate := WORKDATE;

      // [GIVEN] Prepaid Service Contract with FCY. Exchange Rate equal 1/7.95
      CustomExchRate := 1 / 7.95;
      CreateServiceContractHeaderWithCurrency(
        ServContractHeader,LibrarySales.CreateCustomerNo,
        LibraryERM.CreateCurrencyWithExchangeRate(WORKDATE,CustomExchRate,CustomExchRate));

      // [GIVEN] Service Contract Line has amount 39750
      CreateContractLineWithSpecficiAmount(ServContractLine,ServContractHeader,39750);
      UpdateServContractHeader(ServContractHeader);
      LibraryVariableStorage.Enqueue(SignServContractQst);
      LibraryVariableStorage.Enqueue(CreateInvoiceMsg);
      SignContract(ServContractHeader);

      WORKDATE := ServContractHeader."Next Invoice Period Start";
      LibraryVariableStorage.Enqueue(ServContractHeader."Next Invoice Period Start");
      LibraryVariableStorage.Enqueue(ServContractHeader."Contract No.");

      // [WHEN] Create Service Invoice
      RunCreateContractInvoices;

      // [THEN] Total amount of multiple Service Lines is 5000 (39750 * 1/7.95)
      VerifyServContractLineAmountSplitByPeriod(
        ServContractHeader."Contract No.",ServContractLine."Service Item No.",
        GetServContractGLAcc(ServContractHeader."Serv. Contract Acc. Gr. Code",TRUE),WORKDATE,12,5000);

      // Tear down
      WORKDATE := SavedWorkDate;
    END;

    LOCAL PROCEDURE Initialize@47();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      IF IsInitialized THEN
        EXIT;

      // Setup demonstration data
      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;

      IsInitialized := TRUE;
    END;

    LOCAL PROCEDURE CreateAndUpdateServiceContractAccountGroup@16() : Code[10];
    VAR
      ServiceContractAccountGroup@1000 : Record 5973;
    BEGIN
      LibraryService.CreateServiceContractAcctGrp(ServiceContractAccountGroup);
      ServiceContractAccountGroup.VALIDATE("Prepaid Contract Acc.",ServiceContractAccountGroup."Non-Prepaid Contract Acc.");  // To take similar Account as Non-Prepaid Contract Acc.
      ServiceContractAccountGroup.MODIFY(TRUE);
      EXIT(ServiceContractAccountGroup.Code);
    END;

    LOCAL PROCEDURE CreateContractWithLine@8(VAR ServiceContractHeader@1003 : Record 5965;ServiceContractAccountGroupCode@1002 : Code[10];ContractExpirationDate@1001 : Date;PriceUpdatePeriod@1004 : DateFormula);
    VAR
      ServiceContractLine@1000 : Record 5964;
    BEGIN
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ContractExpirationDate);
      ServiceContractHeader.CALCFIELDS("Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Serv. Contract Acc. Gr. Code",ServiceContractAccountGroupCode);
      ServiceContractHeader.VALIDATE("Annual Amount",ServiceContractHeader."Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Starting Date",WORKDATE);
      ServiceContractHeader.VALIDATE("Price Update Period",PriceUpdatePeriod);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceContract@41(VAR ServiceContractHeader@1003 : Record 5965;CustomerNo@1005 : Code[20];ServicePeriod@1000 : Text;NoOfLines@1002 : Integer);
    VAR
      ServiceContractAccountGroup@1001 : Record 5973;
      i@1004 : Integer;
    BEGIN
      CreateServiceContractHeader(ServiceContractHeader,CustomerNo,ServicePeriod);
      LibraryService.FindContractAccountGroup(ServiceContractAccountGroup);
      FOR i := 1 TO NoOfLines DO
        CreateContractWithLine(
          ServiceContractHeader,ServiceContractAccountGroup.Code,0D,ServiceContractHeader."Service Period");  // Passing 0D for blank Contract Expiration Date.
    END;

    LOCAL PROCEDURE CreateServiceContractHeader@57(VAR ServiceContractHeader@1001 : Record 5965;CustomerNo@1000 : Code[20];ServicePeriod@1002 : Text);
    BEGIN
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,CustomerNo);
      EVALUATE(ServiceContractHeader."Service Period",ServicePeriod);
    END;

    LOCAL PROCEDURE CreateServiceContractHeaderWithCurrency@59(VAR ServiceContractHeader@1001 : Record 5965;CustomerNo@1003 : Code[20];CurrencyCode@1002 : Code[10]);
    VAR
      ServiceContractTemplate@1004 : Record 5968;
    BEGIN
      // Pass confirmation dialog message to ConfirmHandler and Template No. in SelectServiceContractTemplateListHandler
      LibraryVariableStorage.Enqueue(CreateContrUsingTemplateQst);
      LibraryVariableStorage.Enqueue(CreateServiceContractTemplate(ServiceContractTemplate,TRUE));

      CreateServiceContractHeader(ServiceContractHeader,CustomerNo,'<1Y>');
      ServiceContractHeader.VALIDATE("Currency Code",CurrencyCode);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceContractLine@46(VAR ServiceContractLine@1002 : Record 5964;ServiceContractHeader@1000 : Record 5965;ContractExpirationDate@1003 : Date);
    VAR
      ServiceItem@1001 : Record 5940;
    BEGIN
      LibraryService.CreateServiceItem(ServiceItem,ServiceContractHeader."Customer No.");
      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");
      ServiceContractLine.VALIDATE("Line Cost",10000 * LibraryRandom.RandInt(10));  // Use Random because value is not important.
      ServiceContractLine.VALIDATE("Line Value",10000 * LibraryRandom.RandInt(10));  // Use Random because value is not important.
      ServiceContractLine.VALIDATE("Service Period",ServiceContractHeader."Service Period");
      ServiceContractLine.VALIDATE("Contract Expiration Date",ContractExpirationDate);
      ServiceContractLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceContractTemplate@26(VAR ServiceContractTemplate@1001 : Record 5968;Prepaid@1002 : Boolean) : Code[20];
    VAR
      DefaultServicePeriod@1000 : DateFormula;
    BEGIN
      EVALUATE(DefaultServicePeriod,'<1M>');  // Use 1 for monthly Service Period.
      LibraryService.CreateServiceContractTemplate(ServiceContractTemplate,DefaultServicePeriod);
      ServiceContractTemplate.VALIDATE("Invoice Period",ServiceContractTemplate."Invoice Period"::Year);
      ServiceContractTemplate.VALIDATE(Prepaid,Prepaid);
      ServiceContractTemplate.VALIDATE("Combine Invoices",TRUE);
      ServiceContractTemplate.MODIFY(TRUE);
      EXIT(ServiceContractTemplate."No.");
    END;

    LOCAL PROCEDURE CreateContractLineWithSpecficiAmount@62(VAR ServiceContractLine@1001 : Record 5964;ServiceContractHeader@1000 : Record 5965;LineValue@1003 : Decimal);
    VAR
      ServiceItem@1002 : Record 5940;
    BEGIN
      LibraryService.CreateServiceItem(ServiceItem,ServiceContractHeader."Customer No.");
      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");
      ServiceContractLine.VALIDATE("Line Value",LineValue);
      ServiceContractLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceLineForServiceOrder@166(VAR ServiceHeader@1001 : Record 5900;ContractNo@1005 : Code[20]);
    VAR
      Resource@1000 : Record 156;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1003 : Record 5902;
      LibraryResource@1004 : Codeunit 130511;
    BEGIN
      LibraryResource.FindResource(Resource);
      FindServiceDocumentHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ContractNo);
      ServiceItemLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceItemLine.FINDFIRST;

      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Resource,Resource."No.");
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceLine.VALIDATE(Quantity,LibraryRandom.RandDec(10,2));  // Take Random Quantity.
      ServiceLine.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));  // Take Random Unit Price.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreditMemoWithServiceContractAccountGroup@69(ServiceContractAccountGroupCode@1010 : Code[10]);
    VAR
      ServiceContractHeader@1003 : Record 5965;
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // 1. Setup: Create and Sign Service Contract and Post Service Invoice created after signing the Contract, Create Credit Memo from Contract.
      SignContractAndPostServiceInvoiceWithAccGrCode(ServiceContractHeader,FALSE,ServiceContractAccountGroupCode);
      CreateServiceCreditMemo(ServiceHeader,ServiceContractHeader);

      // 2. Exercise: Post Service Credit Memo created from Service Contract.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify that Moved From Prepaid Account Field is carrying TRUE.
      VerifyServiceLedgerEntries(ServiceContractHeader."Contract No.");
    END;

    LOCAL PROCEDURE CreateServiceCreditMemo@99(VAR ServiceHeader@1002 : Record 5900;ServiceContractHeader@1001 : Record 5965);
    VAR
      ServiceContractLine@1003 : Record 5964;
      ServContractManagement@1000 : Codeunit 5940;
    BEGIN
      FindServiceContractLine(ServiceContractLine,ServiceContractHeader);
      ServiceHeader.GET(
        ServiceHeader."Document Type"::"Credit Memo",
        ServContractManagement.CreateContractLineCreditMemo(ServiceContractLine,FALSE)); // Passing False to avoid Deletion of Service Contract Line.
    END;

    LOCAL PROCEDURE CreateNonPrepaidServTemplateWithMonthInvPeriod@80() : Code[20];
    VAR
      ServiceContractTemplate@1000 : Record 5968;
    BEGIN
      CreateServiceContractTemplate(ServiceContractTemplate,FALSE);
      ServiceContractTemplate.VALIDATE("Invoice Period",ServiceContractTemplate."Invoice Period"::Month);
      ServiceContractTemplate.MODIFY(TRUE);
      EXIT(ServiceContractTemplate."No.");
    END;

    LOCAL PROCEDURE FindAndPostServiceInvoice@34(ContractNo@1000 : Code[20]);
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      FindServiceDocumentHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,ContractNo);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
    END;

    LOCAL PROCEDURE CreateCustomer@91(NewPricesInclVAT@1000 : Boolean) : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      WITH Customer DO BEGIN
        VALIDATE("Prices Including VAT",NewPricesInclVAT);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE FilterServiceLedgEntry@30(VAR ServiceLedgerEntry@1001 : Record 5907;ServiceContractNo@1000 : Code[20]);
    BEGIN
      ServiceLedgerEntry.SETRANGE("Service Contract No.",ServiceContractNo);
      ServiceLedgerEntry.SETRANGE(Type,ServiceLedgerEntry.Type::"Service Contract");
      ServiceLedgerEntry.SETRANGE("No.",ServiceContractNo);
    END;

    LOCAL PROCEDURE FindServiceLedgerEntries@4(VAR ServiceLedgerEntry@1000 : Record 5907;ServiceContractNo@1001 : Code[20]);
    BEGIN
      FilterServiceLedgEntry(ServiceLedgerEntry,ServiceContractNo);
      ServiceLedgerEntry.FINDSET;
    END;

    LOCAL PROCEDURE FindServiceContractLine@44(VAR ServiceContractLine@1001 : Record 5964;ServiceContractHeader@1003 : Record 5965);
    BEGIN
      ServiceContractLine.SETRANGE("Contract Type",ServiceContractHeader."Contract Type");
      ServiceContractLine.SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
      ServiceContractLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindServiceContractLineAmount@45(ServiceContractHeader@1000 : Record 5965) : Decimal;
    VAR
      ServiceContractLine@1001 : Record 5964;
    BEGIN
      FindServiceContractLine(ServiceContractLine,ServiceContractHeader);
      EXIT(ServiceContractLine."Line Amount");
    END;

    LOCAL PROCEDURE FindServiceDocumentHeader@10(VAR ServiceHeader@1003 : Record 5900;DocumentType@1000 : Option;ContractNo@1001 : Code[20]);
    BEGIN
      ServiceHeader.SETRANGE("Document Type",DocumentType);
      ServiceHeader.SETRANGE("Contract No.",ContractNo);
      ServiceHeader.FINDLAST;
    END;

    LOCAL PROCEDURE FindServiceLine@105(VAR ServiceLine@1000 : Record 5902;ContractNo@1001 : Code[20]);
    VAR
      ServiceHeader@1002 : Record 5900;
    BEGIN
      FindServiceDocumentHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,ContractNo);
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.SETFILTER(Type,'<>''''');
      ServiceLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindServiceInvoiceHeader@85(VAR ServiceInvoiceHeader@1000 : Record 5992;ContractNo@1001 : Code[20]);
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Contract No.",ContractNo);
      ServiceInvoiceHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindServiceCrMemoHeader@135(VAR ServiceCrMemoHeader@1000 : Record 5994;ContractNo@1001 : Code[20]);
    BEGIN
      ServiceCrMemoHeader.SETRANGE("Contract No.",ContractNo);
      ServiceCrMemoHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE PostServiceInvoiceAndVerifyPrepaidAccount@51(ServiceContractAccountGroupCode@1000 : Code[10]);
    VAR
      ServiceContractHeader@1003 : Record 5965;
    BEGIN
      // 2. Exercise: Create and Sign Contract and Post Service Invoice created after signing Service Contract.
      SignContractAndPostServiceInvoiceWithAccGrCode(ServiceContractHeader,FALSE,ServiceContractAccountGroupCode);

      // 3. Verify: Verify that Moved From Prepaid Account Field is carrying TRUE.
      VerifyServiceLedgerEntries(ServiceContractHeader."Contract No.");
    END;

    LOCAL PROCEDURE RunCreateContractInvoices@111();
    VAR
      CreateContractInvoices@1000 : Report 6030;
    BEGIN
      COMMIT;  // Required to avoid Test Failure.
      CLEAR(CreateContractInvoices);
      CreateContractInvoices.RUN;
    END;

    LOCAL PROCEDURE RunCreateContractServiceOrders@108();
    VAR
      CreateContractServiceOrders@1000 : Report 6036;
    BEGIN
      COMMIT;  // Required to avoid Test Failure.
      CLEAR(CreateContractServiceOrders);
      CreateContractServiceOrders.RUN;
    END;

    LOCAL PROCEDURE RunCreateContractServiceOrdersWithDates@21(StartDate@1001 : Date;EndDate@1002 : Date);
    VAR
      CreateContractServiceOrders@1000 : Report 6036;
      CreateServOrders@1003 : 'Create Service Order,Print Only';
    BEGIN
      COMMIT;  // Required to avoid Test Failure.
      CLEAR(CreateContractServiceOrders);
      CreateContractServiceOrders.InitializeRequest(StartDate,EndDate,CreateServOrders::"Create Service Order");
      CreateContractServiceOrders.RUN;
    END;

    LOCAL PROCEDURE SetNewWorkDate@15() NewDate : Date;
    BEGIN
      WORKDATE := CALCDATE('<-CY>',WORKDATE);  // Set WORKDATE to the First Date of Current Year.
      NewDate := CALCDATE('<CY>',WORKDATE);  // Assign Last Date of Current Year in global variable.
    END;

    LOCAL PROCEDURE SignContract@54(VAR ServiceContractHeader@1001 : Record 5965);
    VAR
      SignServContractDoc@1000 : Codeunit 5944;
    BEGIN
      SignServContractDoc.SignContract(ServiceContractHeader);
    END;

    LOCAL PROCEDURE SignContractAndCreateServiceInvoice@63(VAR ServiceContractHeader@1000 : Record 5965;CustomerPricesInclVAT@1001 : Boolean);
    VAR
      ServiceContractAccountGroup@1003 : Record 5973;
    BEGIN
      LibraryService.CreateServiceContractAcctGrp(ServiceContractAccountGroup);
      SignContractAndCreateServiceInvoiceWithAccGrCode(ServiceContractHeader,CustomerPricesInclVAT,ServiceContractAccountGroup.Code);
    END;

    LOCAL PROCEDURE SignContractAndCreateServiceInvoiceWithAccGrCode@123(VAR ServiceContractHeader@1000 : Record 5965;CustomerPricesInclVAT@1003 : Boolean;ServiceContractAccountGroupCode@1002 : Code[10]);
    BEGIN
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,CreateCustomer(CustomerPricesInclVAT));
      EVALUATE(ServiceContractHeader."Service Period",STRSUBSTNO('<%1Y>',LibraryRandom.RandInt(5)));
      CreateContractWithLine(ServiceContractHeader,ServiceContractAccountGroupCode,WORKDATE,ServiceContractHeader."Service Period");
      SignContract(ServiceContractHeader);
    END;

    LOCAL PROCEDURE SignContractAndPostServiceInvoice@27(VAR ServiceContractHeader@1000 : Record 5965;CustomerPricesInclVAT@1003 : Boolean);
    BEGIN
      SignContractAndCreateServiceInvoice(ServiceContractHeader,CustomerPricesInclVAT);
      FindAndPostServiceInvoice(ServiceContractHeader."Contract No.");
    END;

    LOCAL PROCEDURE SignContractAndPostServiceInvoiceWithAccGrCode@125(VAR ServiceContractHeader@1000 : Record 5965;CustomerPricesInclVAT@1003 : Boolean;ServiceContractAccountGroupCode@1002 : Code[10]);
    BEGIN
      SignContractAndCreateServiceInvoiceWithAccGrCode(
        ServiceContractHeader,CustomerPricesInclVAT,ServiceContractAccountGroupCode);
      FindAndPostServiceInvoice(ServiceContractHeader."Contract No.");
    END;

    LOCAL PROCEDURE UpdateAndPostServiceOrder@23(ContractNo@1001 : Code[20]);
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      CreateServiceLineForServiceOrder(ServiceHeader,ContractNo);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
    END;

    LOCAL PROCEDURE UpdateTemplateNoOnServiceContract@24(VAR ServiceContractTemplateList@1000 : TestPage 6056;No@1001 : Text);
    BEGIN
      ServiceContractTemplateList.FILTER.SETFILTER("No.",No);
      ServiceContractTemplateList.OK.INVOKE;
    END;

    LOCAL PROCEDURE UpdateAnnualAmountInServiceContract@36(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      WITH ServiceContractHeader DO BEGIN
        CALCFIELDS("Calcd. Annual Amount");
        VALIDATE("Annual Amount","Calcd. Annual Amount");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateServContractHeader@64(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      UpdateAnnualAmountInServiceContract(ServiceContractHeader);
      ServiceContractHeader.VALIDATE("Starting Date",WORKDATE);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceContractWithTwoLines@19(VAR ServiceContractNo@1004 : Code[20];VAR ServiceContractLine1No@1002 : Integer;VAR ServiceContractLine2No@1003 : Integer;VAR NextPlannedServiceDate1@1005 : Date;VAR NextPlannedServiceDate2@1006 : Date);
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServicePeriod@1007 : DateFormula;
    BEGIN
      GetDatesForServiceContractsLine(NextPlannedServiceDate1,NextPlannedServiceDate2);
      EVALUATE(ServicePeriod,'<' + FORMAT(LibraryRandom.RandInt(10)) + 'M>');
      WITH ServiceContractHeader DO BEGIN
        LibraryService.CreateServiceContractHeader(ServiceContractHeader,"Contract Type"::Contract,CreateCustomer(FALSE));
        VALIDATE("Service Period",ServicePeriod);
        MODIFY(TRUE);
        ServiceContractLine1No :=
          CreateServiceContractLineWithNextPlannedServiceDate(ServiceContractHeader,NextPlannedServiceDate1);
        ServiceContractLine2No :=
          CreateServiceContractLineWithNextPlannedServiceDate(ServiceContractHeader,NextPlannedServiceDate2);
        SignContract(ServiceContractHeader);
        ServiceContractNo := "Contract No.";
      END;
    END;

    LOCAL PROCEDURE CreateServiceContractLineWithNextPlannedServiceDate@22(ServiceContractHeader@1000 : Record 5965;NextPlannedServiceDate@1003 : Date) : Integer;
    VAR
      ServiceItem@1002 : Record 5940;
      ServiceContractLine@1001 : Record 5964;
    BEGIN
      LibraryService.CreateServiceItem(ServiceItem,ServiceContractHeader."Customer No.");
      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");
      WITH ServiceContractLine DO BEGIN
        VALIDATE("Next Planned Service Date",NextPlannedServiceDate);
        VALIDATE("Line Value",LibraryRandom.RandDec(100,2));
        VALIDATE("Line Amount","Line Value");
        VALIDATE("Service Period",ServiceContractHeader."Service Period");
        MODIFY(TRUE);
      END;
      UpdateAnnualAmountInServiceContract(ServiceContractHeader);
      EXIT(ServiceContractLine."Line No.");
    END;

    LOCAL PROCEDURE AddNewLineInServiceContractWithSpecificStartingDate@71(VAR ServContractHeader@1000 : Record 5965;VAR ServContractLine@1001 : Record 5964;ContractExpirationDate@1002 : Date);
    VAR
      LockOpenServContract@1003 : Codeunit 5943;
    BEGIN
      ServContractHeader.FIND;
      LockOpenServContract.OpenServContract(ServContractHeader);
      CreateServiceContractLine(ServContractLine,ServContractHeader,0D);
      ServContractLine.VALIDATE("Starting Date",WORKDATE);
      ServContractLine.VALIDATE("Next Planned Service Date",ServContractLine."Starting Date");
      ServContractLine.VALIDATE("Contract Expiration Date",ContractExpirationDate);
      ServContractLine.MODIFY(TRUE);
      ServContractHeader.FIND;
      UpdateAnnualAmountInServiceContract(ServContractHeader);
    END;

    LOCAL PROCEDURE ScenarioWithNewServLineWhenStartingDateAfterNextInvPeriodStart@37(VAR ServContractHeader@1002 : Record 5965;VAR ServContractLine@1001 : Record 5964;VAR SavedWorkDate@1000 : Date;Prepaid@1006 : Boolean;ContractExpirationDate@1007 : Date;VAR InvoiceDate@1017 : Date);
    VAR
      ServiceContractTemplate@1005 : Record 5968;
      LockOpenServContract@1003 : Codeunit 5943;
    BEGIN
      SavedWorkDate := WORKDATE;
      LibraryVariableStorage.Enqueue(CreateContrUsingTemplateQst);
      LibraryVariableStorage.Enqueue(
        CreateServiceContractTemplate(ServiceContractTemplate,Prepaid));

      CreateServiceContract(ServContractHeader,CreateCustomer(FALSE),'<2Y>',2);
      LibraryVariableStorage.Enqueue(SignServContractQst);
      LibraryVariableStorage.Enqueue(CreateInvoiceMsg);
      SignContract(ServContractHeader);

      WORKDATE := ServContractHeader."Next Invoice Period Start" + 1;
      AddNewLineInServiceContractWithSpecificStartingDate(ServContractHeader,ServContractLine,ContractExpirationDate);
      LibraryVariableStorage.Enqueue(NewLinesAddedConfirmQst);

      LockOpenServContract.LockServContract(ServContractHeader);
      WORKDATE := ServContractHeader."Next Invoice Period End";
      InvoiceDate := WORKDATE;
      LibraryVariableStorage.Enqueue(InvoiceDate);
      LibraryVariableStorage.Enqueue(ServContractHeader."Contract No.");
    END;

    LOCAL PROCEDURE ScenarioWithSignedAndInvoicedServiceContract@110(VAR ServContractHeader@1001 : Record 5965);
    VAR
      ServiceContractTemplate@1002 : Record 5968;
    BEGIN
      LibraryVariableStorage.Enqueue(CreateContrUsingTemplateQst);
      LibraryVariableStorage.Enqueue(
        CreateServiceContractTemplate(ServiceContractTemplate,TRUE));
      CreateServiceContract(ServContractHeader,CreateCustomer(FALSE),'<2Y>',2);
      LibraryVariableStorage.Enqueue(SignServContractQst);
      LibraryVariableStorage.Enqueue(CreateInvoiceMsg);
      SignContract(ServContractHeader);
      ServContractHeader.FIND;
      WORKDATE := ServContractHeader."Next Invoice Period Start" + 1;
      LibraryVariableStorage.Enqueue(ServContractHeader."Next Invoice Period Start");
      LibraryVariableStorage.Enqueue(ServContractHeader."Contract No.");
      RunCreateContractInvoices;
    END;

    LOCAL PROCEDURE FindServiceItemLine@31(VAR ServiceItemLine@1002 : Record 5901;ServiceContractLineNo@1000 : Integer;ServiceContractNo@1001 : Code[20]);
    BEGIN
      WITH ServiceItemLine DO BEGIN
        SETRANGE("Contract Line No.",ServiceContractLineNo);
        SETRANGE("Contract No.",ServiceContractNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FilterServiceLine@73(VAR ServiceLine@1004 : Record 5902;ContractNo@1003 : Code[20];GLAccNo@1001 : Code[20];PostingDate@1000 : Date);
    VAR
      ServiceHeader@1007 : Record 5900;
    BEGIN
      ServiceHeader.SETRANGE("Posting Date",PostingDate);
      FindServiceDocumentHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,ContractNo);
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.SETRANGE(Type,ServiceLine.Type::"G/L Account");
      ServiceLine.SETRANGE("No.",GLAccNo);
    END;

    LOCAL PROCEDURE SetExpirationDateLessThanLastInvoiceDate@49(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader."Expiration Date" := ServiceContractHeader."Last Invoice Date" - 1;
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetDatesForServiceContractsLine@33(VAR NextPlannedServiceDate1@1000 : Date;VAR NextPlannedServiceDate2@1001 : Date);
    BEGIN
      NextPlannedServiceDate1 := CALCDATE('<+' + FORMAT(LibraryRandom.RandInt(3)) + 'M>',WORKDATE);
      NextPlannedServiceDate2 := CALCDATE('<+' + FORMAT(LibraryRandom.RandInt(3)) + 'M>',NextPlannedServiceDate1);
    END;

    LOCAL PROCEDURE GetServContractGLAcc@65(ServContractAccountGroupCode@1000 : Code[10];Prepaid@1002 : Boolean) : Code[20];
    VAR
      ServiceContractAccountGroup@1001 : Record 5973;
    BEGIN
      ServiceContractAccountGroup.GET(ServContractAccountGroupCode);
      IF Prepaid THEN
        EXIT(ServiceContractAccountGroup."Prepaid Contract Acc.");
      EXIT(ServiceContractAccountGroup."Non-Prepaid Contract Acc.");
    END;

    LOCAL PROCEDURE GetServiceLedgerEntryPosAmount@53(ContractNo@1001 : Code[20];EntryType@1002 : Option) : Decimal;
    VAR
      ServiceLedgerEntry@1000 : Record 5907;
    BEGIN
      WITH ServiceLedgerEntry DO BEGIN
        SETRANGE("Service Contract No.",ContractNo);
        SETRANGE("Entry Type",EntryType);
        SETFILTER(Amount,'>%1',0);
        FINDFIRST;
        EXIT(Amount);
      END;
    END;

    LOCAL PROCEDURE GetServiceLedgerEntryNegAmount@75(ContractNo@1001 : Code[20];EntryType@1002 : Option) : Decimal;
    VAR
      ServiceLedgerEntry@1000 : Record 5907;
    BEGIN
      WITH ServiceLedgerEntry DO BEGIN
        SETRANGE("Service Contract No.",ContractNo);
        SETRANGE("Entry Type",EntryType);
        SETFILTER(Amount,'<%1',0);
        FINDFIRST;
        EXIT(Amount);
      END;
    END;

    LOCAL PROCEDURE GetServiceDocAmount@87(ServiceHeader@1003 : Record 5900) : Decimal;
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      WITH ServiceLine DO BEGIN
        SETRANGE("Document Type",ServiceHeader."Document Type");
        SETRANGE("Document No.",ServiceHeader."No.");
        CALCSUMS(Amount);
        EXIT(Amount);
      END;
    END;

    LOCAL PROCEDURE GetPostedServiceInvoiceAmount@55(ContractNo@1003 : Code[20]) : Decimal;
    VAR
      ServiceInvoiceHeader@1001 : Record 5992;
      ServiceInvoiceLine@1000 : Record 5993;
    BEGIN
      FindServiceInvoiceHeader(ServiceInvoiceHeader,ContractNo);
      WITH ServiceInvoiceLine DO BEGIN
        SETRANGE("Document No.",ServiceInvoiceHeader."No.");
        CALCSUMS(Amount);
        EXIT(Amount);
      END;
    END;

    LOCAL PROCEDURE GetPostedServiceCrMemoAmount@58(ContractNo@1003 : Code[20]) : Decimal;
    VAR
      ServiceCrMemoHeader@1001 : Record 5994;
      ServiceCrMemoLine@1000 : Record 5995;
    BEGIN
      FindServiceCrMemoHeader(ServiceCrMemoHeader,ContractNo);
      WITH ServiceCrMemoLine DO BEGIN
        SETRANGE("Document No.",ServiceCrMemoHeader."No.");
        CALCSUMS(Amount);
        EXIT(Amount);
      END;
    END;

    LOCAL PROCEDURE ChangeExpirationDateOnContractLine@82(VAR ServiceContractHeader@1000 : Record 5965;NextInvDate@1001 : Date) : Code[20];
    VAR
      ServiceContractLine@1003 : Record 5964;
      LockOpenServContract@1002 : Codeunit 5943;
    BEGIN
      ServiceContractHeader.FIND;
      LockOpenServContract.OpenServContract(ServiceContractHeader);
      FindServiceContractLine(ServiceContractLine,ServiceContractHeader);
      ServiceContractLine.VALIDATE("Contract Expiration Date",NextInvDate - 1);
      ServiceContractLine.MODIFY(TRUE);
      ServiceContractHeader.FIND;
      LockOpenServContract.LockServContract(ServiceContractHeader);
      LibraryVariableStorage.Enqueue(CALCDATE(ServiceContractHeader."Service Period",NextInvDate));
      LibraryVariableStorage.Enqueue(ServiceContractHeader."Contract No.");
      EXIT(ServiceContractLine."Service Item No.");
    END;

    LOCAL PROCEDURE VerifyServiceInvoiceLineAmount@96(ContractNo@1000 : Code[20];Amount@1001 : Decimal);
    VAR
      ServiceInvoiceLine@1002 : Record 5993;
    BEGIN
      ServiceInvoiceLine.SETRANGE("Contract No.",ContractNo);
      ServiceInvoiceLine.FINDFIRST;
      ServiceInvoiceLine.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyServiceLedgerEntries@38(ServiceContractNo@1001 : Code[20]);
    VAR
      ServiceLedgerEntry@1000 : Record 5907;
    BEGIN
      ServiceLedgerEntry.SETRANGE("Service Contract No.",ServiceContractNo);
      ServiceLedgerEntry.FINDSET;
      REPEAT
        ServiceLedgerEntry.TESTFIELD("Moved from Prepaid Acc.",TRUE);
      UNTIL ServiceLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceLedgerEntry@88(ServiceContractNo@1000 : Code[20];AmountLCY@1003 : Decimal);
    VAR
      ServiceLedgerEntry@1001 : Record 5907;
      LibraryERM@1004 : Codeunit 131300;
    BEGIN
      FindServiceLedgerEntries(ServiceLedgerEntry,ServiceContractNo);
      REPEAT
        Assert.AreNearlyEqual(
          AmountLCY,ServiceLedgerEntry."Amount (LCY)",LibraryERM.GetAmountRoundingPrecision,
          STRSUBSTNO(
            AmountError,ServiceLedgerEntry.FIELDCAPTION("Amount (LCY)"),AmountLCY,ServiceLedgerEntry.TABLECAPTION,
            ServiceLedgerEntry.FIELDCAPTION("Entry No."),ServiceLedgerEntry."Entry No.",ServiceLedgerEntry."Amount (LCY)"));
      UNTIL ServiceLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceLedgEntryDoesNotExist@43(ServiceContractNo@1000 : Code[20];ServiceItemNo@1001 : Code[20];PostingDate@1003 : Date);
    VAR
      ServiceLedgerEntry@1002 : Record 5907;
    BEGIN
      FilterServiceLedgEntry(ServiceLedgerEntry,ServiceContractNo);
      ServiceLedgerEntry.SETRANGE("Service Item No. (Serviced)",ServiceItemNo);
      ServiceLedgerEntry.SETFILTER("Posting Date",'%1..',PostingDate);
      Assert.RecordIsEmpty(ServiceLedgerEntry);
    END;

    LOCAL PROCEDURE VerifyCreatedServiceOrder@50(ServiceContractNo@1004 : Code[20];ServiceContractLine1No@1003 : Integer;ServiceContractLine2No@1002 : Integer);
    VAR
      ServiceItemLine1@1000 : Record 5901;
      ServiceItemLine2@1001 : Record 5901;
    BEGIN
      FindServiceItemLine(ServiceItemLine1,ServiceContractLine1No,ServiceContractNo);
      FindServiceItemLine(ServiceItemLine2,ServiceContractLine2No,ServiceContractNo);
      Assert.AreNotEqual(ServiceItemLine1."Document No.",ServiceItemLine2."Document No.",CreateServiceOrderBatchErr);
    END;

    LOCAL PROCEDURE VerifyServContractLineExistInServInvoice@42(ContractNo@1000 : Code[20];ServItemNo@1001 : Code[20];GLAccNo@1002 : Code[20];PostingDate@1003 : Date;ExpectedDescription@1005 : Text);
    VAR
      ServiceLine@1007 : Record 5902;
      ServLedgerEntry@1004 : Record 5907;
    BEGIN
      FilterServiceLine(ServiceLine,ContractNo,GLAccNo,PostingDate);
      ServLedgerEntry.SETRANGE("Service Item No. (Serviced)",ServItemNo);
      FindServiceLedgerEntries(ServLedgerEntry,ContractNo);
      ServiceLine.SETRANGE("Appl.-to Service Entry",ServLedgerEntry."Entry No.");
      ServiceLine.FINDFIRST;
      ServiceLine.TESTFIELD(Description,ExpectedDescription);
      Assert.AreNotEqual(0,ServiceLine.Amount,ServiceLine.FIELDCAPTION(Amount));
    END;

    LOCAL PROCEDURE VerifyServContractLineAmountSplitByPeriod@40(ContractNo@1003 : Code[20];ServItemNo@1002 : Code[20];GLAccNo@1001 : Code[20];PostingDate@1000 : Date;NoOfLines@1004 : Integer;ExpectedAmount@1005 : Decimal);
    VAR
      ServiceLine@1006 : Record 5902;
      ServLedgerEntry@1007 : Record 5907;
      FromServLedgEntryNo@1008 : Integer;
    BEGIN
      FilterServiceLine(ServiceLine,ContractNo,GLAccNo,PostingDate);
      ServLedgerEntry.SETRANGE("Service Item No. (Serviced)",ServItemNo);
      FindServiceLedgerEntries(ServLedgerEntry,ContractNo);
      FromServLedgEntryNo := ServLedgerEntry."Entry No.";
      ServLedgerEntry.FINDLAST;
      ServiceLine.SETRANGE("Appl.-to Service Entry",FromServLedgEntryNo,ServLedgerEntry."Entry No.");
      Assert.RecordCount(ServiceLine,NoOfLines);
      ServiceLine.CALCSUMS(Amount);
      ServiceLine.TESTFIELD(Amount,ExpectedAmount);
    END;

    LOCAL PROCEDURE VerifyServiceDocAmount@48(DocumentType@1004 : Option;ContractNo@1001 : Code[20]);
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1003 : Record 5902;
      ServiceLedgerEntry@1002 : Record 5907;
    BEGIN
      FindServiceDocumentHeader(ServiceHeader,DocumentType,ContractNo);
      Assert.IsFalse(ServiceHeader."Prices Including VAT",ServiceHeader.FIELDCAPTION("Prices Including VAT"));
      Assert.AreEqual(
        -GetServiceLedgerEntryNegAmount(ContractNo,ServiceLedgerEntry."Entry Type"::Sale),
        GetServiceDocAmount(ServiceHeader),ServiceLine.FIELDCAPTION(Amount));
    END;

    LOCAL PROCEDURE VerifyPostedServiceInvoiceAmount@74(ContractNo@1001 : Code[20]);
    VAR
      ServiceInvoiceHeader@1000 : Record 5992;
      ServiceInvoiceLine@1004 : Record 5993;
      ServiceLedgerEntry@1002 : Record 5907;
      Amount@1003 : Decimal;
    BEGIN
      FindServiceInvoiceHeader(ServiceInvoiceHeader,ContractNo);
      Assert.IsFalse(ServiceInvoiceHeader."Prices Including VAT",ServiceInvoiceHeader.FIELDCAPTION("Prices Including VAT"));
      Amount := -GetServiceLedgerEntryNegAmount(ContractNo,ServiceLedgerEntry."Entry Type"::Sale);
      Assert.AreEqual(
        Amount,GetPostedServiceInvoiceAmount(ContractNo),ServiceInvoiceLine.FIELDCAPTION(Amount));
      Assert.AreEqual(
        Amount,
        GetServiceLedgerEntryPosAmount(ContractNo,ServiceLedgerEntry."Entry Type"::Usage),
        ServiceLedgerEntry.FIELDCAPTION(Amount));
    END;

    LOCAL PROCEDURE VerifyPostedServiceCrMemoAmount@84(ContractNo@1001 : Code[20]);
    VAR
      ServiceCrMemoHeader@1000 : Record 5994;
      ServiceCrMemoLine@1003 : Record 5995;
      ServiceLedgerEntry@1002 : Record 5907;
      Amount@1004 : Decimal;
    BEGIN
      FindServiceCrMemoHeader(ServiceCrMemoHeader,ContractNo);
      Assert.IsFalse(ServiceCrMemoHeader."Prices Including VAT",ServiceCrMemoHeader.FIELDCAPTION("Prices Including VAT"));
      Amount := -GetServiceLedgerEntryNegAmount(ContractNo,ServiceLedgerEntry."Entry Type"::Sale);
      Assert.AreEqual(
        Amount,GetPostedServiceCrMemoAmount(ContractNo),ServiceCrMemoLine.FIELDCAPTION(Amount));
      Assert.AreEqual(
        -GetServiceLedgerEntryPosAmount(ContractNo,ServiceLedgerEntry."Entry Type"::Sale),
        GetServiceLedgerEntryNegAmount(ContractNo,ServiceLedgerEntry."Entry Type"::Usage),
        ServiceLedgerEntry.FIELDCAPTION(Amount));
    END;

    [RequestPageHandler]
    PROCEDURE CreateContractInvoicesRequestPageHandler@116(VAR CreateContractInvoices@1000 : TestRequestPage 6030);
    VAR
      InvoiceDate@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(InvoiceDate);
      CreateContractInvoices.PostingDate.SETVALUE(FORMAT(InvoiceDate));
      CreateContractInvoices.InvoiceToDate.SETVALUE(FORMAT(InvoiceDate));
      CreateContractInvoices.CreateInvoices.SETVALUE(FORMAT(CreateContractInvoices.CreateInvoices.GETOPTION(1)));  // Passing 1 for First Option.
      CreateContractInvoices."Service Contract Header".SETFILTER("Contract No.",LibraryVariableStorage.DequeueText);
      CreateContractInvoices.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CreateContractServiceOrdersRequestPageHandler@144(VAR CreateContractServiceOrders@1000 : TestRequestPage 6036);
    BEGIN
      CreateContractServiceOrders.StartingDate.SETVALUE(FORMAT(WORKDATE));
      CreateContractServiceOrders.EndingDate.SETVALUE(FORMAT(WORKDATE));
      CreateContractServiceOrders.CreateServiceOrders.SETVALUE(FORMAT(CreateContractServiceOrders.CreateServiceOrders.GETOPTION(1)));  // Passing 1 for First Option.
      CreateContractServiceOrders."Service Contract Header".SETFILTER("Contract No.",LibraryVariableStorage.DequeueText);
      CreateContractServiceOrders.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE ConfirmCreateContractServiceOrdersRequestPageHandler@25(VAR CreateContractServiceOrders@1000 : TestRequestPage 6036);
    BEGIN
      CreateContractServiceOrders.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ServiceContractTemplateListHandler@12(VAR ServiceContractTemplateList@1001 : TestPage 6056);
    VAR
      ServiceContractTemplate@1002 : Record 5968;
    BEGIN
      ServiceContractTemplate.SETRANGE("Invoice after Service",TRUE);
      ServiceContractTemplate.FINDFIRST;
      UpdateTemplateNoOnServiceContract(ServiceContractTemplateList,ServiceContractTemplate."No.");
    END;

    [ModalPageHandler]
    PROCEDURE ServiceContractTemplateListHandler2@61(VAR ServiceContractTemplateList@1001 : TestPage 6056);
    BEGIN
      ServiceContractTemplateList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SelectServiceContractTemplateListHandler@20(VAR ServiceContractTemplateList@1001 : TestPage 6056);
    BEGIN
      UpdateTemplateNoOnServiceContract(ServiceContractTemplateList,LibraryVariableStorage.DequeueText);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@11(MessageTest@1000 : Text[1024]);
    BEGIN
    END;

    [ConfirmHandler]
    PROCEDURE YesConfirmHandler@18(Message@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConditionalConfirmHandler@79(Message@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := STRPOS(Message,CreateInvoiceMsg) = 0;
    END;

    [ConfirmHandler]
    PROCEDURE NoConfirmHandler@3(Message@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [ConfirmHandler]
    PROCEDURE MultipleDialogsConfirmHandler@52(Question@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      // There should be no additonal confirm handler with CreateInvoiceMsg. If confirmation window opens then handler failes on the following assert

      Assert.AreNotEqual(0,STRPOS(Question,LibraryVariableStorage.DequeueText),UnexpectedConfirmTextErr);
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Service Contract] [Service]

      Test related to Service Contract.
        1. Test Service Ledger Entry for updated Unit Price of posted Service Invoice created using CreateContractInvoices Batch Job.
        2. Test Default Next Planned Service Date on Service Contract Line.
        3. Test Next Planned Service Date and Service Period on Service Contract Line after updating them on Service Contract Header.
        4. Test "Moved From Prepaid Account" field in Service Ledger Entries after posting Service Invoice with Service Contracts Account Group having different Accounts.
        5. Test "Moved From Prepaid Account" field in Service Ledger Entries after posting Service Invoice with Service Contracts Account Group having similar Accounts.
        6. Test "Moved From Prepaid Account" field in Service Ledger Entries after posting Service Credit Memo with Service Contracts Account Group having different Accounts.
        7. Test "Moved From Prepaid Account" field in Service Ledger Entries after posting Service Credit Memo with Service Contracts Account Group having similar Accounts.
        8. Test Service Ledger Entries for a Service Contract with Expiration Date.
        9. Verify Program does not allow to add new line on Service Contract which is already expired.
       10. Test Amount on Service Invoice created from Service Contract with Invoice Period as Year and Prepaid False.
       11. Test Amount on Posted Service Invoice created from Service Contract with Invoice Period as Year and Prepaid False.
       12. Verify that service contract line can be added in case of empty expiration date

      TFS_TS_ID = 274948
      --------------------------------------------------------------------------------
      Test Function Name                                                 TFS ID
      --------------------------------------------------------------------------------
      ServiceInvoiceUpdationFromServiceContract                          202807

      TFS_TS_ID = 274950
      ------------------------------------------------------------------------------------------------
      Test Function Name                                                                    TFS ID
      ------------------------------------------------------------------------------------------------
      UnChangedNextPlannedServiceDateOnContract, ChangedNextPlannedServiceDateOnContract    260267

      TFS_TS_ID = 280990
      ------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                              TFS ID
      ------------------------------------------------------------------------------------------------------------------------
      ContractInvoiceWithDifferentPrepaidAndNonPrepaidAccounts, ContractInvoiceWithSamePrepaidAndNonPrepaidAccounts
      ContractCrMemoWithDifferentPrepaidAndNonPrepaidAccounts, ContractCrMemoWithSamePrepaidAndNonPrepaidAccounts     271045

      TFS_TS_ID = 281988
      --------------------------------------------------------------------------------
      Test Function Name                                                 TFS ID
      --------------------------------------------------------------------------------
      ServiceLedgerEntryForServiceContractWithExpirationDate             281386
      ServiceItemLineOnExpiredServiceContract                            281475

      TFS_TS_ID = 285364
      --------------------------------------------------------------------------------------------------------
      Test Function Name                                                                              TFS ID
      --------------------------------------------------------------------------------------------------------
      AmountOnServiceInvoiceLineCreatedFromContract, AmountOnPostedServiceLineCreatedFromContract     281898

      AddServiceContractLineWithEmptyContractHeaderExpiratoinDate       354317
    }
    END.
  }
}

