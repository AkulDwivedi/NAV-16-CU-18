OBJECT Codeunit 137055 SCM Warehouse Pick
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      WarehouseJournalBatch@1013 : Record 7310;
      WarehouseJournalTemplate@1014 : Record 7309;
      ItemJournalTemplate@1000 : Record 82;
      ItemJournalBatch@1006 : Record 233;
      LocationWhite@1008 : Record 14;
      LocationBlue@1015 : Record 14;
      LocationYellow@1018 : Record 14;
      LocationOrange@1016 : Record 14;
      LibraryInventory@1002 : Codeunit 132201;
      LibrarySales@1020 : Codeunit 130509;
      LibraryUtility@1005 : Codeunit 131000;
      LibraryWarehouse@1009 : Codeunit 132204;
      LibraryPurchase@1017 : Codeunit 130512;
      LibraryManufacturing@1003 : Codeunit 132202;
      LibraryRandom@1001 : Codeunit 130440;
      Assert@1011 : Codeunit 130000;
      LibraryVariableStorage@1007 : Codeunit 131004;
      GlobalItemNo@1019 : Code[20];
      isInitialized@1004 : Boolean;
      LocationError@1022 : TextConst 'ENU=You cannot delete %1 because there are one or more ledger entries on this location.';
      ValidationError@1025 : TextConst 'ENU=Validation error for Field: %1';
      TransferMustBeShippedErr@1021 : TextConst 'ENU=Transfer order must be shipped.';
      QtyMismErr@1010 : TextConst '@@@=%1, %2 - Tables Names.;ENU=Quantities mismatched for %1 and %2.';
      ActionTypeMustNotBeEditableErr@1027 : TextConst 'ENU="""Action Type"" control must not be editable"';
      UnitOfMeasureCodeMustNotBeEditableErr@1028 : TextConst 'ENU="""Unit of Measure Code"" control must not be editable"';

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE PickFromWarehouseShipmentForAlwaysPickLineTrue@2();
    VAR
      Item@1004 : Record 27;
      Zone@1013 : Record 7300;
      Zone2@1012 : Record 7300;
      Bin@1011 : Record 7354;
      Bin2@1008 : Record 7354;
      SalesHeader@1003 : Record 36;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item, Create Partial Put Away and create Partial Pick from Warehouse Shipment for Sales Order.
      Initialize;
      UpdateLocationForAlwaysCreatePickLine(LocationWhite,TRUE);  // Make Always  Pick line True is Checked on White Location.
      Quantity := 100 + LibraryRandom.RandDec(100,2);  // Quantity for large value.
      CreateItemAndUpdateInventoryWithZone(Item,Zone,Bin,Quantity);
      CreateItemAndUpdateInventoryWithZone(Item,Zone2,Bin2,Quantity);

      CreatePutAwayForPurchaseOrder(LocationWhite.Code,Item."No.",Quantity / 4);  // Partial Put Away.
      CreateReleaseAndReserveSalesOrder(SalesHeader,LocationWhite.Code,Item."No.",Quantity / 2 ,TRUE);  // Reserve -True and Reservation on Page handler.

      // Exercise: Create Pick For Warehouse Shipment From Sales Order.
      CreateWhseShipmentAndPick(SalesHeader);

      // Verify:  Verify Pick has been created.
      VerifyPick(SalesHeader."No.",Item."No.",LocationWhite.Code,Quantity / 2);  // Partial Pick.

      // Teardown: Make Always True Pick line is Unchecked on White Location.
      UpdateLocationForAlwaysCreatePickLine(LocationWhite,FALSE);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE PickForAlwaysPickLineTrueWithNewQtyOnActivityLine@80();
    VAR
      Item@1009 : Record 27;
      Zone@1018 : Record 7300;
      Zone2@1017 : Record 7300;
      Bin@1016 : Record 7354;
      Bin2@1014 : Record 7354;
      WarehouseActivityLine@1004 : Record 5767;
      SalesHeader@1003 : Record 36;
      SalesHeader2@1010 : Record 36;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup : Create Item, Create Partial Put Away, Create Partial Pick from Warehouse Shipment for Sales Order and register Pick.
      Initialize;
      UpdateLocationForAlwaysCreatePickLine(LocationWhite,TRUE);  // Make Always True Pick line is Checked on White Location.
      Quantity := 100 + LibraryRandom.RandDec(100,2);  // Quantity for large value.
      CreateItemAndUpdateInventoryWithZone(Item,Zone,Bin,Quantity);
      CreateItemAndUpdateInventoryWithZone(Item,Zone2,Bin2,Quantity);
      CreatePutAwayForPurchaseOrder(LocationWhite.Code,Item."No.",Quantity / 2);  // Partial Quantity.
      CreateReleaseAndReserveSalesOrder(SalesHeader,LocationWhite.Code,Item."No.",Quantity / 4 ,TRUE);  // Reserve -True and Reservation on Page handler.
      CreateWhseShipmentAndPick(SalesHeader);
      UpdateBinOnActivityLine(WarehouseActivityLine,SalesHeader."No.",Bin.Code,WarehouseActivityLine."Action Type"::Take);

      UpdateQuantityToHandleOnActivityLine(WarehouseActivityLine,SalesHeader."No.",LocationWhite.Code,Quantity / 4);  // Update Quantity on Activity Line.
      RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
      CreateSalesOrder(SalesHeader2,LocationWhite.Code,Item."No.",Quantity / 4);  // Partial Quantity.
      CreateSalesLine(SalesHeader2,Item."No.",LocationWhite.Code,Quantity / 2);  // Partial Quantity.
      LibrarySales.ReleaseSalesDocument(SalesHeader2);

      // Exercise: Create Pick From Warehouse Shipment For Sales Order Of two Lines.
      CreateWhseShipmentAndPick(SalesHeader2);

      // Verify: Verify Two Picks Created For two Lines.
      VerifyPick(SalesHeader2."No.",Item."No.",LocationWhite.Code,Quantity / 4);
      VerifyPick(SalesHeader2."No.",Item."No.",LocationWhite.Code,Quantity / 2);

      // Teardown: Make Always True Pick line is Unchecked on white Location.
      UpdateLocationForAlwaysCreatePickLine(LocationWhite,FALSE);
    END;

    [Test]
    PROCEDURE MultiplePicksFromWarehouseShipmentReducedQty@50();
    VAR
      Item@1000 : Record 27;
      Zone@1020 : Record 7300;
      Bin@1018 : Record 7354;
      PurchaseHeader@1002 : Record 38;
      SalesHeader@1004 : Record 36;
      SalesHeader2@1005 : Record 36;
      WarehouseShipmentHeader@1007 : Record 7320;
      WarehouseActivityLine@1008 : Record 5767;
      WarehouseActivityLine2@1024 : Record 5767;
      SalesHeader3@1013 : Record 36;
      Quantity@1001 : Decimal;
      ExpectedQuantity@1017 : Decimal;
    BEGIN
      // Setup : Create Item, Create and Release Purchase Order, Create and Post Warehouse Receipt From Purchase order, Register Warehouse receipt,
      // Create multiple Partial Picks from Warehouse Shipment for Sales Order, Register Pick and update Quantity to Handle on Activity Line.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := 100 + LibraryRandom.RandDec(100,2);  // Quantity for large value.
      FindZone(Zone,LocationWhite.Code);
      LibraryWarehouse.FindBin(Bin,LocationWhite.Code,Zone.Code,3);  // Find Bin for Zone for Index 3.
      UpdateInventoryUsingWhseAdjustmentPerZone(Item,LocationWhite.Code,Zone.Code,Bin.Code,Quantity);  // For large Quantity.

      CreateAndReleasePurchaseOrder(PurchaseHeader,LocationWhite.Code,Item."No.",Quantity - 1);  // Partial Put Away.
      CreateAndPostWhseReceiptFromPO(PurchaseHeader);
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");

      CreateReleaseAndReserveSalesOrder(SalesHeader,LocationWhite.Code,Item."No.",Quantity / 4,FALSE);  // Reserve -False.
      CreateWhseShipmentAndPick(SalesHeader);
      RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,SalesHeader."No.");
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      CreateReleaseAndReserveSalesOrder(SalesHeader2,LocationWhite.Code,Item."No.",Quantity / 4,FALSE);  // Reserve -False.
      CreateWhseShipmentAndPick(SalesHeader2);
      UpdateQuantityToHandleOnActivityLine(WarehouseActivityLine2,SalesHeader2."No.",LocationWhite.Code,Quantity / 4);  // Update Quantity on Activity Line.
      RegisterWarehouseActivity(SalesHeader2."No.",WarehouseActivityLine2."Activity Type"::Pick);

      CreateReleaseAndReserveSalesOrder(SalesHeader3,LocationWhite.Code,Item."No.",Quantity / 4,FALSE);  // Reserve -False.

      // Exercise: Create Pick From Warehouse Shipment For Sales Order.
      CreateWhseShipmentAndPick(SalesHeader3);

      // Verify: Verify Pick has been created for Remaining Quantity Available only.
      ExpectedQuantity := Quantity - (Quantity / 4 + Quantity / 4 + Quantity / 4);  // Quantity calculated for Remaining Pick.
      VerifyRemainingQunatityOnPick(SalesHeader3."No.",Item."No.",LocationWhite.Code,ExpectedQuantity);
    END;

    [Test]
    [HandlerFunctions(PhysInvtItemSelectionPageHandler,CalculatePhysInvtCountingPageHandler)]
    PROCEDURE CalculateCountingPeriodForItem@30();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1004 : Record 83;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create Item with Physical Inventory Counting Period, create and post Purchase order, create blank Item Journal Line.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);  // Using Random value.
      UpdateItemForPhysicalInventoryCountingPeriod(Item);
      CreateAndPostPurchaseOrder(Item."No.",Quantity);
      GlobalItemNo := Item."No.";  // Asssign value to global variable.

      // Create Blank Item Journal Line.
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",'',0.0);
      COMMIT;

      // Exercise: Calculate Counting Period.
      LibraryInventory.CalculateCountingPeriod(ItemJournalLine);

      // Verify: Verify calculated Quantity for Item in Item Journal Line.
      VerifyItemJournalLine(GlobalItemNo,Quantity);
    END;

    [Test]
    PROCEDURE WarehouseShipmentWithMoreThanInventory@17();
    VAR
      Item@1003 : Record 27;
      SalesHeader@1000 : Record 36;
      WarehouseShipmentLine@1002 : Record 7321;
      Quantity@1005 : Decimal;
    BEGIN
      // Setup: Create Item, Update inventory, Create Sales Order and release Sales Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);
      LibraryInventory.CreateItem(Item);
      UpdateItemInventory(Item."No.",LocationYellow.Code,'',Quantity);
      CreateSalesOrder(SalesHeader,LocationYellow.Code,Item."No.",Quantity + 100);  // Quantity more than available in Inventory.
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // Exercise: Create Whse Shipment from Sales Order.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // Verify: Verify the values on Whse Shipment created.
      FilterWarehouseShipmentLine(WarehouseShipmentLine,SalesHeader."No.");
      WarehouseShipmentLine.FINDFIRST;
      VerifyWarehouseShipmentLine(WarehouseShipmentLine,Item."No.",Quantity + 100);
    END;

    [Test]
    PROCEDURE DeleteLocationWithOpenInventory@63();
    VAR
      Item@1002 : Record 27;
    BEGIN
      // Setup: Create Item, update Inventory for Item.
      Initialize;
      LibraryInventory.CreateItem(Item);
      UpdateItemInventory(Item."No.",LocationBlue.Code,'',LibraryRandom.RandDec(100,2));

      // Exercise: Delete Location.
      ASSERTERROR LocationBlue.DELETE(TRUE);

      // Verify: Verify that Location cannot be deleted if it has already open Item Ledger Entry.
      Assert.ExpectedError(STRSUBSTNO(LocationError,LocationBlue.Code));
    END;

    [Test]
    PROCEDURE WhseInternalMovementWithMoreThanBinQuantity@32();
    VAR
      Item@1000 : Record 27;
      Bin@1002 : Record 7354;
      InternalMovementHeader@1004 : Record 7346;
      InternalMovementLine@1005 : Record 7347;
      InternalMovement@1006 : TestPage 7399;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create Item, update inventory, create an Internal Movement.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      LibraryWarehouse.FindBin(Bin,LocationOrange.Code,'',2);
      UpdateItemInventory(Item."No.",LocationOrange.Code,Bin.Code,Quantity);
      CreateInternalMovement(InternalMovementHeader,LocationOrange.Code,Item."No.",Bin.Code,Quantity);
      OpenInternalMovementPage(InternalMovement,InternalMovementHeader."No.");

      // Exercise: Create Internal Movement Line for more than Quantity available in Inventory for Bin.
      ASSERTERROR InternalMovement.InternalMovementLines.Quantity.SETVALUE(Quantity + 100);

      // Verify: Verify the error for the available Quantity.
      Assert.ExpectedError(STRSUBSTNO(ValidationError,InternalMovementLine.FIELDCAPTION(Quantity)));
    END;

    [Test]
    PROCEDURE ItemJournalLineAfterWhseAdjustmentForMultipleItems@1();
    VAR
      Item@1000 : Record 27;
      Item2@1004 : Record 27;
      Zone@1001 : Record 7300;
      Bin@1002 : Record 7354;
    BEGIN
      // Setup: Create multiple Items.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);

      // Create Warehouse Journal Lines and Calculate Warehouse Adjustment for both Items.
      FindZone(Zone,LocationWhite.Code);
      LibraryWarehouse.FindBin(Bin,LocationWhite.Code,Zone.Code,2);  // Value required for Bin on the selected Zone.
      CreateWhseJournal(Item,LocationWhite.Code,Zone.Code,Bin.Code);
      CreateWhseJournal(Item2,LocationWhite.Code,Zone.Code,Bin.Code);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationWhite.Code,TRUE);
      CalculateWhseAdjustmentForMultipleItems(ItemJournalBatch,Item."No.",Item2."No.");

      // Exercise: Post Item Journal Line For first Item only.
      PostItemJournalLine(Item."No.",LocationWhite.Code);

      // Verify: Verify after posting of first Item, second Item is still present on same Item Journal Worksheet.
      VerifyItemJournalLineBatchAndTemplateForItem(
        Item2."No.",LocationWhite.Code,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    [Test]
    [HandlerFunctions(CreateWhsePutAwayPickHandler,MessageHandler)]
    PROCEDURE PickFromTransferOrderContainingEmptyLineCanBePosted@3();
    VAR
      Item@1001 : Record 27;
      PickLocation@1000 : Record 14;
      InTransitLocation@1005 : Record 14;
      TransferHeader@1003 : Record 5740;
      WhseActivLine@1007 : Record 5767;
      Quantity@1002 : Decimal;
    BEGIN
      // [FEATURE] [Transfer] [Inventory Pick]
      // [SCENARIO 362740] Inventory pick created from a transfer order containing a comment line (line without item no.) can be posted

      Initialize;

      LibraryInventory.CreateItem(Item);
      // [GIVEN] Location "L" with "Require Pick" = TRUE
      LibraryWarehouse.CreateLocationWMS(PickLocation,FALSE,FALSE,TRUE,FALSE,FALSE);
      LibraryWarehouse.CreateInTransitLocation(InTransitLocation);
      Quantity := LibraryRandom.RandDec(100,2);
      UpdateItemInventory(Item."No.",PickLocation.Code,'',Quantity);

      // [GIVEN] Transfer order, transfer from location "L", one line with item, another one - comment only
      CreateTransferOrderWithEmptyLine(TransferHeader,PickLocation.Code,LocationBlue.Code,InTransitLocation.Code,Item."No.",Quantity);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);

      // [GIVEN] Create inventory pick from transfer
      COMMIT;
      TransferHeader.CreateInvtPutAwayPick;

      FindWhseActivityLine(
        WhseActivLine,WhseActivLine."Activity Type"::"Invt. Pick",WhseActivLine."Action Type"::" ",
        PickLocation.Code,TransferHeader."No.");
      WhseActivLine.VALIDATE("Qty. to Handle",Quantity);
      WhseActivLine.MODIFY(TRUE);

      // [WHEN] Post inventory pick
      PostInventoryActivity(WhseActivLine."Activity Type",WhseActivLine."No.");

      // [THEN] Inventory pick is successfully posted
      VerifyTransferShipmentPosted(TransferHeader."No.",Item."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,WhseSourceCreateDocumentOKHandler)]
    PROCEDURE WhseActivityPickLocationNotRequirePickProductionOrder@254();
    VAR
      Location@1000 : Record 14;
      ProductionOrder@1006 : Record 5405;
      WarehouseActivityLine@1007 : Record 5767;
    BEGIN
      // [FEATURE] [Production Order]
      // [SCENARIO 380898] For Production Order it's possible to create pick even if Location."Require Pick" is FALSE.
      Initialize;

      // [GIVEN] Location "L" with bins and "Require Pick" disabled.
      CreateLocationNotRequirePick(Location);

      // [GIVEN] Refreshed Production Order.
      CreateRefreshedProductionOrder(ProductionOrder,Location);

      // [WHEN] Create Pick
      ProductionOrder.CreatePick(USERID,0,FALSE,FALSE,FALSE);

      // [THEN] Corresponded Whse. Activity Line is created.
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,
        WarehouseActivityLine."Action Type"::Place,Location.Code,ProductionOrder."No.");

      Assert.AreEqual(
        ProductionOrder.Quantity,WarehouseActivityLine.Quantity,
        STRSUBSTNO(QtyMismErr,ProductionOrder.TABLENAME,WarehouseActivityLine.TABLENAME));
    END;

    [Test]
    [HandlerFunctions(WhseChangeUnitOfMeasureRequestPageHandler)]
    PROCEDURE ActionTypeNotEditableInChangeUoMRequestPage@49();
    VAR
      Item@1000 : Record 27;
      Zone@1001 : Record 7300;
      Bin@1002 : Record 7354;
      SalesHeader@1003 : Record 36;
      WarehouseActivityLine@1004 : Record 5767;
      Qty@1005 : Decimal;
    BEGIN
      // [FEATURE] [Change Unit Of Measure]
      // [SCENARIO 202744] Fields "Action Type" and "Unit Of Measure Code" in the request page of the report 7314 "Whse. Change Unit of Measure" should not be editable

      Initialize;

      // [GIVEN] Post some stock of item "I" on a location "L" with "Directed Put-away and Pick" enabled
      LibraryInventory.CreateItem(Item);
      FindZone(Zone,LocationWhite.Code);
      LibraryWarehouse.CreateBin(Bin,LocationWhite.Code,'',Zone.Code,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE));
      Qty := LibraryRandom.RandDec(100,2);
      UpdateInventoryUsingWhseAdjustmentPerZone(Item,LocationWhite.Code,Zone.Code,Bin.Code,Qty);
      // [GIVEN] Create a sales order for item "I" on location "L". Create warehouse shipment, then pick
      CreateReleaseAndReserveSalesOrder(SalesHeader,Bin."Location Code",Item."No.",Qty,FALSE);
      CreateWhseShipmentAndPick(SalesHeader);

      WITH WarehouseActivityLine DO
        FindWhseActivityLine(WarehouseActivityLine,"Activity Type"::Pick,"Action Type"::Take,LocationWhite.Code,SalesHeader."No.");

      // [WHEN] Run "Change Unit Of Measure" on the pick document
      LibraryWarehouse.ChangeUnitOfMeasure(WarehouseActivityLine);

      // [THEN] "Action Type" and "Quantity to Handle" are not editable
      // Verified in WhseChangeUnitOfMeasureRequestPageHandler
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      WarehouseActivityLine@1001 : Record 5767;
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      WarehouseActivityLine.DELETEALL;
      CLEAR(GlobalItemNo);
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateVATData;
      NoSeriesSetup;
      CreateLocationSetup;
      ItemJournalSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      PurchasesPayablesSetup@1005 : Record 312;
      SalesSetup@1004 : Record 311;
      WarehouseSetup@1002 : Record 5769;
    BEGIN
      LibraryWarehouse.NoSeriesSetup(WarehouseSetup);

      SalesSetup.GET;
      SalesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.VALIDATE("Posted Shipment Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Receipt Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@75();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationSetup@92();
    VAR
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      CreateFullWarehouseSetup(LocationWhite);  // Location: White.
      LibraryWarehouse.CreateLocationWMS(LocationBlue,FALSE,FALSE,FALSE,FALSE,FALSE);  // Location: Blue.
      LibraryWarehouse.CreateLocationWMS(LocationYellow,FALSE,FALSE,TRUE,FALSE,TRUE);  // Location: Yellow. Require Shipment TRUE and Require Pick TRUE.
      LibraryWarehouse.CreateLocationWMS(LocationOrange,TRUE,TRUE,TRUE,TRUE,TRUE);  // Location: Orange. Bin Mandatory True.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationWhite.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationOrange.Code,TRUE);

      LibraryWarehouse.CreateNumberOfBins(LocationOrange.Code,'','',LibraryRandom.RandInt(5) + 3,FALSE);  // Value Required.
    END;

    LOCAL PROCEDURE CreateLocationNotRequirePick@238(VAR Location@1000 : Record 14);
    VAR
      WarehouseEmployee@1002 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.VALIDATE("Require Receive",TRUE);
      Location.VALIDATE("Require Shipment",TRUE);
      Location.VALIDATE("Require Pick",FALSE);
      Location.MODIFY(TRUE);

      Location.VALIDATE("Open Shop Floor Bin Code",CreateBinCode(Location.Code));
      Location.VALIDATE("To-Production Bin Code",CreateBinCode(Location.Code));
      Location.VALIDATE("From-Production Bin Code",CreateBinCode(Location.Code));
      Location.VALIDATE("Receipt Bin Code",CreateBinCode(Location.Code));
      Location.VALIDATE("Shipment Bin Code",CreateBinCode(Location.Code));

      Location.MODIFY(TRUE);

      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
    END;

    LOCAL PROCEDURE CreateBinCode@111(LocationCode@1000 : Code[10]) : Code[20];
    VAR
      Bin@1001 : Record 7354;
    BEGIN
      LibraryWarehouse.CreateBin(Bin,LocationCode,LibraryUtility.GenerateGUID,'','');
      EXIT(Bin.Code);
    END;

    [Normal]
    LOCAL PROCEDURE CreateFullWarehouseSetup@60(VAR Location@1000 : Record 14);
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,2);  // Value used for number of bin per zone.
    END;

    LOCAL PROCEDURE UpdateLocationForAlwaysCreatePickLine@14(VAR Location@1200 : Record 14;AlwaysCreatePickLine@1000 : Boolean);
    BEGIN
      Location.VALIDATE("Always Create Pick Line",AlwaysCreatePickLine);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInventoryUsingWhseAdjustmentPerZone@94(Item@1002 : Record 27;LocationCode@1000 : Code[10];ZoneCode@1004 : Code[10];BinCode@1007 : Code[20];Quantity@1003 : Decimal);
    VAR
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      WarehouseJournalSetup(LocationCode);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationCode,ZoneCode,BinCode,
        WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);
      CalculateAndPostWhseAdjustment(Item,LocationCode);
    END;

    LOCAL PROCEDURE CreateItemAndUpdateInventoryWithZone@19(VAR Item@1000 : Record 27;VAR Zone@1001 : Record 7300;VAR Bin@1003 : Record 7354;Quantity@1006 : Decimal);
    BEGIN
      LibraryInventory.CreateItem(Item);
      FindZone(Zone,LocationWhite.Code);
      LibraryWarehouse.FindBin(Bin,LocationWhite.Code,Zone.Code,2);  // Find Bin of Index 2 in the Zone.
      UpdateInventoryUsingWhseAdjustmentPerZone(Item,LocationWhite.Code,Zone.Code,Bin.Code,Quantity);  // For large Quantity.
    END;

    LOCAL PROCEDURE WarehouseJournalSetup@114(LocationCode@1000 : Code[10]);
    BEGIN
      CLEAR(WarehouseJournalTemplate);
      WarehouseJournalTemplate.INIT;
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Item);
      WarehouseJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalTemplate.MODIFY(TRUE);

      CLEAR(WarehouseJournalBatch);
      WarehouseJournalBatch.INIT;
      LibraryWarehouse.SelectWhseJournalBatchName(
        WarehouseJournalBatch,WarehouseJournalTemplate.Type,WarehouseJournalTemplate.Name,LocationCode);
      WarehouseJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateEmptyTransferLine@16(TransferHeader@1000 : Record 5740);
    VAR
      TransferLine@1001 : Record 5741;
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(TransferLine);
      WITH TransferLine DO BEGIN
        VALIDATE("Document No.",TransferHeader."No.");
        VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,FIELDNO("Line No.")));
        VALIDATE(Description,LibraryUtility.GenerateGUID);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@27(VAR PurchaseHeader@1006 : Record 38;LocationCode@1003 : Code[10];ItemNo@1004 : Code[20];Quantity@1000 : Decimal);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchaseDocumentWithItem(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,'',ItemNo,Quantity,LocationCode,0D);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@105(VAR PurchaseHeader@1002 : Record 38;LocationCode@1003 : Code[10];ItemNo@1004 : Code[20];Quantity@1000 : Decimal);
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,LocationCode,ItemNo,Quantity);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndPostWhseReceiptFromPO@116(VAR PurchaseHeader@1000 : Record 38);
    VAR
      WarehouseReceiptLine@1001 : Record 7317;
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrder@76(ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,'',ItemNo,Quantity);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreatePutAwayForPurchaseOrder@11(LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      CreateAndReleasePurchaseOrder(PurchaseHeader,LocationCode,ItemNo,Quantity);
      CreateAndPostWhseReceiptFromPO(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateSalesOrder@22(VAR SalesHeader@1001 : Record 36;LocationCode@1002 : Code[10];ItemNo@1004 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      // Random values used are not important for test.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      CreateSalesLine(SalesHeader,ItemNo,LocationCode,Quantity)
    END;

    LOCAL PROCEDURE CreateSalesLine@37(SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20];LocationCode@1004 : Code[10];Quantity@1003 : Decimal);
    VAR
      SalesLine@1175 : Record 37;
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReleaseAndReserveSalesOrder@53(VAR SalesHeader@1004 : Record 36;LocationCode@1140 : Code[10];ItemNo@1001 : Code[20];Quantity@1000 : Decimal;Reserve@1005 : Boolean);
    BEGIN
      CreateSalesOrder(SalesHeader,LocationCode,ItemNo,Quantity);
      IF Reserve THEN
        ReserveFromSalesOrder(SalesHeader."No.");
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateTransferOrderWithEmptyLine@7(VAR TransferHeader@1000 : Record 5740;FromLocationCode@1001 : Code[10];ToLocationCode@1002 : Code[10];InTransitLocationCode@1003 : Code[10];ItemNo@1004 : Code[20];Quantity@1005 : Decimal);
    VAR
      TransferLine@1006 : Record 5741;
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocationCode,InTransitLocationCode);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      CreateEmptyTransferLine(TransferHeader);
    END;

    LOCAL PROCEDURE CreateRefreshedProductionOrder@263(VAR ProductionOrder@1003 : Record 5405;Location@1004 : Record 14);
    VAR
      ParentItem@1005 : Record 27;
      ChildItem@1019 : Record 27;
      ProductionBOMHeader@1015 : Record 99000771;
      Quantity@1000 : Decimal;
    BEGIN
      LibraryInventory.CreateItem(ParentItem);
      LibraryInventory.CreateItem(ChildItem);
      Quantity := LibraryRandom.RandInt(10);
      UpdateItemInventory(ChildItem."No.",Location.Code,Location."Receipt Bin Code",Quantity);

      LibraryManufacturing.CreateCertifiedProductionBOM(ProductionBOMHeader,ChildItem."No.",Quantity);
      ParentItem.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      ParentItem.MODIFY(TRUE);
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder."Source Type"::Item,ParentItem."No.",Location.Code,Quantity);
    END;

    LOCAL PROCEDURE CreateAndRefreshProdOrder@29(VAR ProductionOrder@1000 : Record 5405;SourceType@1006 : Option;SourceNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1005 : Decimal);
    BEGIN
      CreateProdOrder(ProductionOrder,ProductionOrder.Status::Released,SourceType,SourceNo,LocationCode,Quantity);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateProdOrder@33(VAR ProductionOrder@1000 : Record 5405;Status@1004 : Option;SourceType@1006 : Option;SourceNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1005 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,SourceType,SourceNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FilterOnWhseActivityLine@21(SourceNo@1004 : Code[20];ActionType@1001 : Option);
    VAR
      WarehouseActivityLine@1003 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWhseActivityLine@74(VAR WarehouseActivityLine@1001 : Record 5767;ActivityType@1000 : Option;ActionType@1004 : Option;LocationCode@1002 : Code[10];SourceNo@1003 : Code[20]);
    BEGIN
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.SETRANGE("Location Code",LocationCode);
      WarehouseActivityLine.SETRANGE("No.",FindWarehouseActivityNo(SourceNo,ActivityType));
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.FINDSET;
    END;

    LOCAL PROCEDURE ReserveFromSalesOrder@9(No@1000 : Code[20]);
    VAR
      SalesOrder@1001 : TestPage 42;
    BEGIN
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",No);
      SalesOrder.SalesLines.Reserve.INVOKE;  // Open Page - Reservation on ReservationPageHandler.
      SalesOrder.CLOSE;
    END;

    LOCAL PROCEDURE FilterWarehouseShipmentLine@102(VAR WarehouseShipmentLine@1000 : Record 7321;SourceNo@1001 : Code[20]);
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Document",WarehouseShipmentLine."Source Document"::"Sales Order");
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.SETRANGE("Source Type",DATABASE::"Sales Line");
    END;

    LOCAL PROCEDURE FindWarehouseShipmentHeader@107(VAR WarehouseShipmentHeader@1000 : Record 7320;SourceNo@1002 : Code[20]);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      FilterWarehouseShipmentLine(WarehouseShipmentLine,SourceNo);
      WarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@5(SourceDocument@1000 : Option;SourceNo@1001 : Code[20]);
    VAR
      WarehouseReceiptHeader@1002 : Record 7316;
    BEGIN
      WarehouseReceiptHeader.GET(FindWarehouseReceiptNo(SourceDocument,SourceNo));
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE FindWarehouseActivityNo@8(SourceNo@1002 : Code[20];ActivityType@1003 : Option) : Code[20];
    VAR
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.FINDFIRST;
      EXIT(WarehouseActivityLine."No.");
    END;

    LOCAL PROCEDURE FindWarehouseReceiptNo@56(SourceDocument@1002 : Option;SourceNo@1003 : Code[20]) : Code[20];
    VAR
      WarehouseReceiptLine@1004 : Record 7317;
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
      EXIT(WarehouseReceiptLine."No.");
    END;

    LOCAL PROCEDURE FindZone@52(VAR Zone@1001 : Record 7300;LocationCode@1000 : Code[10]);
    BEGIN
      Zone.SETRANGE("Location Code",LocationCode);
      Zone.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateQuantityToHandleOnActivityLine@151(VAR WarehouseActivityLine@1000 : Record 5767;SourceNo@1003 : Code[20];LocationCode@1500 : Code[10];QtyToHandle@1004 : Decimal);
    BEGIN
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take,LocationCode,
        SourceNo);
      REPEAT
        WarehouseActivityLine.VALIDATE("Qty. to Handle",QtyToHandle);
        WarehouseActivityLine.MODIFY(TRUE);
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateItemInventory@6(ItemNo@1003 : Code[20];LocationCode@1002 : Code[10];BinCode@1004 : Code[20];Quantity@1000 : Decimal);
    VAR
      ItemJournalLine@1001 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateItemForPhysicalInventoryCountingPeriod@68(VAR Item@1000 : Record 27);
    VAR
      PhysInvtCountingPeriod@1001 : Record 7381;
    BEGIN
      LibraryInventory.CreatePhysicalInventoryCountingPeriod(PhysInvtCountingPeriod);
      Item.VALIDATE("Phys Invt Counting Period Code",PhysInvtCountingPeriod.Code);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalculateAndPostWhseAdjustment@18(Item@1000 : Record 27;LocationCode@1001 : Code[10]);
    BEGIN
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationCode,TRUE);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateBinOnActivityLine@55(VAR WarehouseActivityLine@1000 : Record 5767;SourceNo@1001 : Code[20];BinCode@1002 : Code[20];ActionType@1003 : Option);
    BEGIN
      FindWhseActivityLine(WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,ActionType,LocationWhite.Code,SourceNo);
      WarehouseActivityLine.VALIDATE("Bin Code",BinCode);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE RegisterWarehouseActivity@46(SourceNo@1002 : Code[20];Type@1000 : Option);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
    BEGIN
      WarehouseActivityHeader.SETRANGE(Type,Type);
      WarehouseActivityHeader.SETRANGE("No.",FindWarehouseActivityNo(SourceNo,Type));
      WarehouseActivityHeader.FINDFIRST;
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE OpenInternalMovementPage@51(VAR InternalMovement@1000 : TestPage 7399;No@1001 : Code[20]);
    BEGIN
      InternalMovement.OPENEDIT;
      InternalMovement.FILTER.SETFILTER("No.",No);
    END;

    LOCAL PROCEDURE CreateWhseShipmentAndPick@36(VAR SalesHeader@1000 : Record 36);
    VAR
      WarehouseShipmentHeader@1001 : Record 7320;
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,SalesHeader."No.");
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateInternalMovement@88(VAR InternalMovementHeader@1000 : Record 7346;LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];BinCode@1004 : Code[20];Quantity@1005 : Decimal);
    VAR
      InternalMovementLine@1001 : Record 7347;
    BEGIN
      LibraryWarehouse.CreateInternalMovementHeader(InternalMovementHeader,LocationCode,'');
      LibraryWarehouse.CreateInternalMovementLine(InternalMovementHeader,InternalMovementLine ,ItemNo,BinCode,'',Quantity);
    END;

    LOCAL PROCEDURE SelectItemJournalLineForLocation@39(VAR ItemJournalLine@1000 : Record 83;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    BEGIN
      ItemJournalLine.SETRANGE("Item No.",ItemNo);
      ItemJournalLine.SETRANGE("Location Code",LocationCode);
      ItemJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE PostInventoryActivity@12(ActivityType@1001 : Option;ActivityNo@1002 : Code[20]);
    VAR
      WhseActivHeader@1000 : Record 5766;
    BEGIN
      WhseActivHeader.GET(ActivityType,ActivityNo);
      LibraryWarehouse.PostInventoryActivity(WhseActivHeader,FALSE);
    END;

    LOCAL PROCEDURE PostItemJournalLine@38(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10]);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      SelectItemJournalLineForLocation(ItemJournalLine,ItemNo,LocationCode);
      CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post Batch",ItemJournalLine);
    END;

    LOCAL PROCEDURE CreateWhseJournal@24(Item@1004 : Record 27;LocationCode@1003 : Code[10];ZoneCode@1002 : Code[10];BinCode@1001 : Code[20]);
    VAR
      WarehouseJournalLine@1000 : Record 7311;
    BEGIN
      WarehouseJournalSetup(LocationCode);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationCode,ZoneCode,BinCode,
        WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE CalculateWhseAdjustmentForMultipleItems@25(ItemJournalBatch@1003 : Record 233;ItemNo@1001 : Code[20];ItemNo2@1002 : Code[20]);
    VAR
      Item@1000 : Record 27;
    BEGIN
      Item.SETFILTER("No.",'%1|%2',ItemNo,ItemNo2);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
    END;

    LOCAL PROCEDURE VerifyPick@15(SourceNo@1000 : Code[20];ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1004 : Decimal);
    VAR
      WarehouseActivityLine@1003 : Record 5767;
    BEGIN
      FilterOnWhseActivityLine(SourceNo,WarehouseActivityLine."Action Type"::Take);
      WarehouseActivityLine.SETRANGE(Quantity,Quantity);
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityLine.TESTFIELD("Item No.",ItemNo);
      WarehouseActivityLine.TESTFIELD("Location Code",LocationCode);
    END;

    LOCAL PROCEDURE VerifyRemainingQunatityOnPick@70(SourceNo@1004 : Code[20];ItemNo@1003 : Code[20];LocationCode@1002 : Code[10];Quantity@1001 : Decimal);
    VAR
      WarehouseActivityLine@1005 : Record 5767;
    BEGIN
      FilterOnWhseActivityLine(SourceNo,WarehouseActivityLine."Action Type"::Take);
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityLine.TESTFIELD("Item No.",ItemNo);
      WarehouseActivityLine.TESTFIELD("Location Code",LocationCode);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyItemJournalLine@47(ItemNo@1002 : Code[20];Quantity@1000 : Decimal);
    VAR
      ItemJournalLine@1001 : Record 83;
    BEGIN
      ItemJournalLine.SETRANGE("Item No.",ItemNo);
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.TESTFIELD("Entry Type",ItemJournalLine."Entry Type"::"Positive Adjmt.");
      ItemJournalLine.TESTFIELD("Qty. (Calculated)",Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseShipmentLine@85(WarehouseShipmentLine@1000 : Record 7321;ItemNo@1001 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      WarehouseShipmentLine.TESTFIELD("Item No.",ItemNo);
      WarehouseShipmentLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyItemJournalLineBatchAndTemplateForItem@72(ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];JournalTemplateName@1003 : Code[10];JournalBatchName@1004 : Code[10]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      ItemJournalLine.SETRANGE("Item No.",ItemNo);
      ItemJournalLine.SETRANGE("Location Code",LocationCode);
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.TESTFIELD("Journal Template Name",JournalTemplateName);
      ItemJournalLine.TESTFIELD("Journal Batch Name",JournalBatchName);
    END;

    LOCAL PROCEDURE VerifyTransferShipmentPosted@28(TransferOrderNo@1000 : Code[20];ItemNo@1002 : Code[20];ExpectedQuantity@1003 : Decimal);
    VAR
      TransferLine@1001 : Record 5741;
    BEGIN
      WITH TransferLine DO BEGIN
        SETRANGE("Document No.",TransferOrderNo);
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        Assert.AreEqual(ExpectedQuantity,"Quantity Shipped",TransferMustBeShippedErr);
      END;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@13(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Reserve from Current Line".INVOKE; // Reserve Current line.
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@59(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE PhysInvtItemSelectionPageHandler@35(VAR PhysInvtItemSelection@1000 : TestPage 7380);
    BEGIN
      PhysInvtItemSelection.FILTER.SETFILTER("Item No.",GlobalItemNo);
      PhysInvtItemSelection.OK.INVOKE;  // Open Report- Calculate Phys.Invt. Counting on CalculatePhysInvtCountingPageHandler.
    END;

    [RequestPageHandler]
    PROCEDURE CalculatePhysInvtCountingPageHandler@61(VAR CalculatePhysInvtCounting@1000 : TestRequestPage 7380);
    BEGIN
      CalculatePhysInvtCounting.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CreateWhsePutAwayPickHandler@23(VAR CreateWhsePutAwayPick@1000 : TestRequestPage 7323);
    BEGIN
      CreateWhsePutAwayPick.CInvtPick.SETVALUE(TRUE);
      CreateWhsePutAwayPick.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE WhseSourceCreateDocumentOKHandler@65(VAR WhseSourceCreateDocument@1000 : TestRequestPage 7305);
    BEGIN
      WhseSourceCreateDocument.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE WhseChangeUnitOfMeasureRequestPageHandler@45(VAR WhseChangeUnitofMeasure@1001 : TestRequestPage 7314);
    BEGIN
      Assert.IsFalse(WhseChangeUnitofMeasure.Control1.EDITABLE,ActionTypeMustNotBeEditableErr);
      Assert.IsFalse(WhseChangeUnitofMeasure.Control3.EDITABLE,UnitOfMeasureCodeMustNotBeEditableErr);

      WhseChangeUnitofMeasure.Cancel.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [Pick] [SCM]
      Test SCM Warehouse.
       1. Create Pick from Warhouse Shipment when Quantity is reserved, Always Create Pick Line is True.
       2. Create Pick from Warhouse Shipment when Quantity is reserved, and Quantity to Handle is updated on Activity Line.
       3. Create multiple Picks from Warehouse Shipment for reduced quantity.
       4. Test to calculate Physical Inventory Counting Period for Batch Report and verify Item Journal Line.
       5. Test to verify creating Warehouse Shipment from Sales Order with Quantity more than inventory.
       6. Verify that Location cannot be deleted if Quantity for the item on Physical inventory on that Location is not Zero.
       7. Verify that Internal Movement for more than available Quantity in Bin cannot be created.
       8. Verify that after posting of first Item after Calculate Warehouse Adjustments on both Items, second Item is still present on same Item Journal Worksheet.

        Covers Test Cases for WI -  268036
        ----------------------------------------------------------------------------------------
        Test Function Name                                                     TFS ID
        ----------------------------------------------------------------------------------------
        PickFromWarehouseShipmentAlwaysPickLineTrue                           164063
        PickForAlwaysPickLineTrueWithNewQtyOnActivityLine                     164063
        MultiplePicksFromWarehouseShipmentReducedQty                          164060

        Covers Test Cases for WI - 272646
        ----------------------------------------------------------------------------------------
        Test Function Name                                                     TFS ID
        ----------------------------------------------------------------------------------------
        CalculateCountingPeriodForItem                                         129136
        WarehouseShipmentWithMoreThanInventory                                 143087
        DeleteLocationWithOpenInventory                                        233824
        WhseInternalMovementWithMoreThanBinQuantity                            184963

        Covers Test Cases:
        ----------------------------------------------------------------------------------------
        Test Function Name                                                     TFS ID
        ----------------------------------------------------------------------------------------
        ItemJournalLineAfterWhseAdjustmentForMultipleItems                     270573
    }
    END.
  }
}

