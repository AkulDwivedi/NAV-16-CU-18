OBJECT Codeunit 134227 ERM PostRecurringJournal
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1008 : Codeunit 130000;
      LibraryRandom@1000 : Codeunit 130440;
      LibraryERM@1001 : Codeunit 131300;
      ErrorMustMatchErr@1006 : TextConst 'ENU=Error must match.';
      IncorrectPostingPreviewErr@1004 : TextConst 'ENU=Incorrect number of entries in posting preview.';
      PostingErr@1005 : TextConst '@@@="%1=Amount Field,%2=Table,%3=Journal Template Name Field,%4=Journal Template Name Field Value,%5=Journal Batch Name Field,%6=Journal Batch Name Field Value,%7=Line No. Field,%8=Line No. Field Value";ENU="%1 must have a value in %2: %3=%4, %5=%6, %7=%8. It cannot be zero or empty."';
      NoOfLinesErr@1007 : TextConst 'ENU=Incorrect number of lines found in GL Entry.';
      DocumentDateErr@1010 : TextConst '@@@="%1 = Document Date Field Caption,%2 = Posting Date Field Caption,%3 = GL Entry Table Caption";ENU=%1 must be equal to %2 in %3.';
      LibraryUtility@1002 : Codeunit 131000;
      SuccessPostingMsg@1003 : TextConst 'ENU=The journal lines were successfully posted.';
      LibraryVariableStorage@1009 : Codeunit 131004;
      SkippedLineMsg@1011 : TextConst 'ENU=One or more lines has not been posted because the amount is zero.';
      LibraryDocumentApprovals@1013 : Codeunit 131352;
      LibrarySetupStorage@1012 : Codeunit 131009;

    [Test]
    PROCEDURE TestPostRecurringJournal@8();
    VAR
      GenJournalLine@1009 : Record 81;
      RecurringFrequency@1001 : ARRAY [6] OF DateFormula;
      NoOfLines@1000 : Integer;
    BEGIN
      // Check No. of lines in G/L Entry after posting Recurring Journal with allocation.

      // Setup: Create Recurring Journal Lines.
      NoOfLines := CreateRecurringJournalLine(GenJournalLine,RecurringFrequency);

      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify the number of lines generated in GL Entry table after posting.
      VerifyNoOfLineInGLEntry(GenJournalLine."Journal Batch Name",2 * NoOfLines);
    END;

    [Test]
    PROCEDURE PostingDateOnRecurringJournal@1();
    VAR
      GenJournalLine@1001 : Record 81;
      RecurringFrequency@1005 : ARRAY [6] OF DateFormula;
      PostingDate@1004 : ARRAY [6] OF Date;
      NoOfLines@1002 : Integer;
      Counter@1000 : Integer;
      Loop@1003 : Integer;
    BEGIN
      // Check posting Date on Recurring Journal Lines after posting.

      // Setup: Create Recurring Journal Lines.
      NoOfLines := CreateRecurringJournalLine(GenJournalLine,RecurringFrequency);
      FOR Counter := 1 TO NoOfLines DO
        PostingDate[Counter] := CALCDATE(RecurringFrequency[Counter],GenJournalLine."Posting Date");

      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Posting Date on Recurring Journal Lines.
      FindGeneralJournalLine(GenJournalLine);
      REPEAT
        Loop += 1;
        GenJournalLine.TESTFIELD("Posting Date",PostingDate[Loop]);
      UNTIL (GenJournalLine.NEXT = 0);
    END;

    [Test]
    PROCEDURE ErrorOnRecurringJournal@2();
    VAR
      GenJournalLine@1003 : Record 81;
      GLAccount@1008 : Record 15;
      GenJournalBatch@1006 : Record 232;
      Assert@1000 : Codeunit 130000;
    BEGIN
      // Check error on Recurring Journal Lines after posting with zero Amount.

      // Setup: Create Recurring General Journal Line with Zero Amount.
      CreateTemplateAndBatch(GenJournalBatch);
      LibraryERM.FindGLAccount(GLAccount);
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GenJournalLine."Recurring Method"::"F  Fixed",0,GLAccount."No.");

      // Exercise.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Posting Error on Recurring Journal.
      Assert.AreEqual(
        STRSUBSTNO(PostingErr,GenJournalLine.FIELDCAPTION(Amount),GenJournalLine.TABLECAPTION,
          GenJournalLine.FIELDCAPTION("Journal Template Name"),GenJournalLine."Journal Template Name",
          GenJournalLine.FIELDCAPTION("Journal Batch Name"),GenJournalLine."Journal Batch Name",
          GenJournalLine.FIELDCAPTION("Line No."),GenJournalLine."Line No."),GETLASTERRORTEXT,ErrorMustMatchErr);
    END;

    [Test]
    PROCEDURE PostRecurringJournalWithExpirDateLessPostDate@15();
    VAR
      GenJournalLine@1003 : Record 81;
      GLAccount@1008 : Record 15;
      GenJournalBatch@1006 : Record 232;
    BEGIN
      // [FEATURE] [Expiration Date]
      // [SCENARIO 363410] Recurring journal line with "Expiration Date" less than Posting Date should be posted on "Posting Date"

      // [GIVEN] Recurring Journal Line
      CreateTemplateAndBatch(GenJournalBatch);
      LibraryERM.CreateGLAccount(GLAccount);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Recurring Method"::"F  Fixed",
        LibraryRandom.RandDec(100,2),GLAccount."No.");

      // [GIVEN] "Posting Date" = "X", "X" < "Expiration Date"
      GenJournalLine.VALIDATE("Expiration Date",LibraryRandom.RandDate(-10));
      GenJournalLine.VALIDATE(
        "Posting Date",GenJournalLine."Expiration Date" - LibraryRandom.RandInt(10));
      GenJournalLine.MODIFY(TRUE);
      // [GIVEN] Allocation Line for Recurring Journal Line
      CreateAllocationLine(GenJournalLine);

      // [WHEN] Post recurring journal
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] 2 G/L Entries are created
      VerifyNoOfLineInGLEntry(GenJournalLine."Journal Batch Name",2);
    END;

    [Test]
    PROCEDURE PostRecurringJournalWithExpirDateMorePostDate@24();
    VAR
      GenJournalLine@1003 : Record 81;
      GLAccount@1008 : Record 15;
      GenJournalBatch@1006 : Record 232;
    BEGIN
      // [FEATURE] [Expiration Date]
      // [SCENARIO 363410] Recurring journal line with "Expiration Date" more than Posting Date should not be posted to G/L

      // [GIVEN] Recurring Journal Line
      CreateTemplateAndBatch(GenJournalBatch);
      LibraryERM.CreateGLAccount(GLAccount);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Recurring Method"::"F  Fixed",
        LibraryRandom.RandDec(100,2),GLAccount."No.");

      // [GIVEN] "Posting Date" = "X", "X" > "Expiration Date"
      GenJournalLine.VALIDATE("Posting Date",LibraryRandom.RandDate(10));
      GenJournalLine.VALIDATE(
        "Expiration Date",GenJournalLine."Posting Date" - LibraryRandom.RandInt(10));
      GenJournalLine.MODIFY(TRUE);
      // [GIVEN] Allocation Line for Recurring Journal Line
      CreateAllocationLine(GenJournalLine);

      // [WHEN] Post recurring journal.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] No G/L Entries are created
      VerifyNoOfLineInGLEntry(GenJournalLine."Journal Batch Name",0);
    END;

    [Test]
    PROCEDURE PostMultipleRecurringJournalLines@10();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check the posting of Recurring General Journal with Multiple line with same Document No. is possible and also check No. of lines in G/L Entry after posting.

      // Exercise: Create multiple Recurring Journal Lines with same Document No. and with random values.
      CreateAndPostGeneralJournalLineWithRecurringMethod(GenJournalLine,GenJournalLine."Recurring Method"::"F  Fixed");

      // Verify: Verify the number of lines generated in GL Entry table after posting.
      VerifyNoOfLineInGLEntry(GenJournalLine."Journal Batch Name",GenJournalLine.COUNT);
    END;

    [Test]
    PROCEDURE DocumentDateAfterPostingRecurringJournalLines@12();
    VAR
      GenJournalLine@1004 : Record 81;
    BEGIN
      // Check the Document Date on G/L Entry after Posting Recurring General Journal with Recurring Method "RF Reversing Fixed" and Multiple lines.

      // Exercise: Create multiple Recurring Journal Lines with same Document No. and with random values.
      CreateAndPostGeneralJournalLineWithRecurringMethod(GenJournalLine,GenJournalLine."Recurring Method"::"RF Reversing Fixed");

      // Verify: Verify Document Date on number of lines generated in GL Entry table after posting.
      VerifyDocumentDateOnGLEntry(GenJournalLine."Journal Batch Name",GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE PostMultipleRecurringJournalExpiredLine@16();
    VAR
      GenJournalLine@1003 : Record 81;
      GenJournalBatch@1006 : Record 232;
      DocumentNo@1004 : ARRAY [3] OF Code[20];
      PostingDate@1005 : Date;
    BEGIN
      // [FEATURE] [Expiration Date]
      // [SCENARIO 375144] Recurring Journal skip lines while posting if they are expired.

      // [GIVEN] General Journal Batch.
      CreateTemplateAndBatch(GenJournalBatch);

      // [GIVEN] Recurring Journal with 3 lines: "Posting Date" is more, less and equal to "Expiration Date"
      PostingDate := LibraryRandom.RandDate(-10);
      DocumentNo[1] := CreateRecurringJnlLine(
          GenJournalLine,GenJournalBatch,PostingDate,PostingDate);
      DocumentNo[2] := CreateRecurringJnlLine(
          GenJournalLine,GenJournalBatch,PostingDate,PostingDate - 1);
      DocumentNo[3] := CreateRecurringJnlLine(
          GenJournalLine,GenJournalBatch,PostingDate - 1,PostingDate + 1);

      // [WHEN] Post recurring journal.
      CreateAllocationLine(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Only G/L Entries for line 1 and line 3 are created.
      VerifyGLEntriesWithExpiredDate(DocumentNo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,SuccessMessageHandler)]
    PROCEDURE PostRecurringJnlWithFiltering@7();
    VAR
      GenJournalLine@1000 : Record 81;
      GLAccount@1003 : Record 15;
      GenJournalBatch@1002 : Record 232;
      GenJournalTemplate@1006 : Record 80;
      RecurringGeneralJournal@1004 : TestPage 283;
      Amount@1005 : Decimal;
      DocumentNo@1001 : Code[20];
    BEGIN
      // [SCENARIO 377115] If not all lines of Recurring General Journal's Batch are shown after applying a filter, then in case of posting, only shown entries must be posted

      DocumentNo := LibraryUtility.GenerateGUID;
      FindGLAccount(GLAccount);
      LibraryERM.FindRecurringTemplateName(GenJournalTemplate);
      GenJournalBatch.SETRANGE("Journal Template Name",GenJournalTemplate.Name);
      GenJournalBatch.FINDFIRST;

      // [GIVEN] The 1st Line of Batch having "Amount" = 100 and G/L Account
      Amount := LibraryRandom.RandDec(100,2);
      CreateJournalLineWithSimilarDocNo(
        GenJournalLine,GenJournalBatch,GenJournalLine."Recurring Method"::"F  Fixed",Amount,GLAccount."No.",DocumentNo);

      // [GIVEN] The 2nd Line of Batch having "Amount" = -100 and G/L Account
      CreateJournalLineWithSimilarDocNo(
        GenJournalLine,GenJournalBatch,GenJournalLine."Recurring Method"::"F  Fixed",-Amount,GLAccount."No.",DocumentNo);

      // [GIVEN] The 3rd Line of Batch having "Amount" = 0 and G/L Account
      CreateJournalLineWithSimilarDocNo(
        GenJournalLine,GenJournalBatch,GenJournalLine."Recurring Method"::"F  Fixed",0,GLAccount."No.",DocumentNo);

      // [GIVEN] "Amount <> 0" filter applied to Journal
      RecurringGeneralJournal.OPENEDIT;
      RecurringGeneralJournal.FILTER.SETFILTER(Amount,'<>0');

      // [WHEN] Posting Batch
      RecurringGeneralJournal.Post.INVOKE;

      // [THEN] The 1st and the 2nd lines were successfully posted
      // Checked in Message Handler
      RecurringGeneralJournal.CLOSE;

      // [THEN] Posting Date is changed in posted entries only
      GenJournalLine.RESET;
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalTemplate.Name);
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      GenJournalLine.FINDSET;

      REPEAT
        IF GenJournalLine.Amount = 0 THEN
          Assert.AreEqual(WORKDATE,GenJournalLine."Posting Date",'')
        ELSE
          Assert.AreEqual(
            CALCDATE(GenJournalLine."Recurring Frequency",WORKDATE),
            GenJournalLine."Posting Date",'');
      UNTIL GenJournalLine.NEXT = 0;
    END;

    [Test]
    PROCEDURE PreviewRecurringJnlWithFiltering@17();
    VAR
      GenJournalLine@1005 : Record 81;
      GLAccount@1004 : Record 15;
      GenJournalBatch@1003 : Record 232;
      GenJournalTemplate@1007 : Record 80;
      RecurringGeneralJournal@1002 : TestPage 283;
      GLPostingPreview@1006 : TestPage 115;
      Amount@1001 : Decimal;
      DocumentNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Preview Posting]
      // [SCENARIO 377115] If not all lines of Recurring General Journal's Batch are shown after applying a filter, then in case of posting, only shown entries must be posted

      DocumentNo := LibraryUtility.GenerateGUID;
      FindGLAccount(GLAccount);
      LibraryERM.FindRecurringTemplateName(GenJournalTemplate);
      GenJournalBatch.SETRANGE("Journal Template Name",GenJournalTemplate.Name);
      GenJournalBatch.FINDFIRST;

      // [GIVEN] The 1st Line of Batch having "Amount" = 100 and G/L Account
      Amount := LibraryRandom.RandDec(100,2);
      CreateJournalLineWithSimilarDocNo(
        GenJournalLine,GenJournalBatch,GenJournalLine."Recurring Method"::"F  Fixed",Amount,GLAccount."No.",DocumentNo);

      // [GIVEN] The 2nd Line of Batch having "Amount" = -100 and G/L Account
      CreateJournalLineWithSimilarDocNo(
        GenJournalLine,GenJournalBatch,GenJournalLine."Recurring Method"::"F  Fixed",-Amount,GLAccount."No.",DocumentNo);

      // [GIVEN] The 3rd Line of Batch having "Amount" = 0 and G/L Account
      CreateJournalLineWithSimilarDocNo(
        GenJournalLine,GenJournalBatch,GenJournalLine."Recurring Method"::"F  Fixed",0,GLAccount."No.",DocumentNo);

      // [GIVEN] "Amount <> 0" filter applied to Journal
      RecurringGeneralJournal.OPENEDIT;
      RecurringGeneralJournal.FILTER.SETFILTER(Amount,'<>0');

      // [WHEN] Preview Posting Batch
      GLPostingPreview.TRAP;
      RecurringGeneralJournal.Preview.INVOKE;

      // [THEN] Posting Preview is shown
      Assert.AreEqual(2,GLPostingPreview."No. of Records".ASINTEGER,IncorrectPostingPreviewErr);

      ASSERTERROR ERROR(''); // Rollback previewing inconsistencies
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler)]
    PROCEDURE PostRecurringJournalFromMultipleBatches@37();
    VAR
      GenJnlTemplate@1002 : Record 80;
      GenJnlBatch@1001 : Record 232;
      GenJnlLine@1000 : Record 81;
      i@1003 : Integer;
    BEGIN
      // [SCENARIO 377795] Recurring journal Lines should be posted from multiple Recurring General Journal Batches

      // [GIVEN] Recurring General Journal Template
      // [GIVEN] Recurring General Journal Line with "Posting Date" = "X"
      CreateRecurringTemplateWithoutForceDocBalance(GenJnlTemplate);
      FOR i := 1 TO 2 DO BEGIN
        LibraryERM.CreateRecurringBatchName(GenJnlBatch,GenJnlTemplate.Name);
        GenJnlBatch.SETRECFILTER;
        CreateBalancedRecurringJnlLines(GenJnlLine,GenJnlBatch);
      END;
      COMMIT;
      GenJnlBatch.SETRANGE(Name);

      // [WHEN] Pos Recurring General Journal Line from Recurring General Journal Batch
      CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-B.Post",GenJnlBatch);

      // [THEN] G/L Entry is created with "Posting Date" = "X"
      GenJnlBatch.FINDSET;
      FOR i := 1 TO 2 DO BEGIN
        VerifyGLEntryExists(GenJnlBatch.Name,WORKDATE);
        GenJnlBatch.NEXT;
      END;
    END;

    [Test]
    [HandlerFunctions(GenJnlTemplateModalPageHandler,ConfirmHandlerYes,MessageHandler)]
    PROCEDURE PostRecurringJournalFromBlankLine@20();
    VAR
      GenJnlTemplate@1002 : Record 80;
      GenJnlBatch@1001 : Record 232;
      GenJnlLine@1000 : Record 81;
      RecurringGeneralJournal@1003 : TestPage 283;
    BEGIN
      // [SCENARIO 379482] Recurring journal line is posted if focus is set on blank line in the same batch

      // [GIVEN] Recurring General Journal Line
      CreateRecurringTemplateWithoutForceDocBalance(GenJnlTemplate);
      LibraryERM.CreateRecurringBatchName(GenJnlBatch,GenJnlTemplate.Name);
      GenJnlBatch.SETRECFILTER;
      CreateBalancedRecurringJnlLines(GenJnlLine,GenJnlBatch);
      COMMIT;
      LibraryVariableStorage.Enqueue(GenJnlBatch."Journal Template Name");

      // [GIVEN] Recurring Journal is opened and focus set on blank line
      RecurringGeneralJournal.OPENEDIT;
      RecurringGeneralJournal.CurrentJnlBatchName.SETVALUE(GenJnlBatch.Name);
      RecurringGeneralJournal.LAST;
      RecurringGeneralJournal.NEXT;

      // [WHEN] Press "Post" on Recurring Journal page
      RecurringGeneralJournal.Post.INVOKE;

      // [THEN] G/L Entry is created
      VerifyGLEntryExists(GenJnlBatch.Name,WORKDATE);
    END;

    [Test]
    [HandlerFunctions(ZeroAmountLinePostingSkipMessageHandler)]
    PROCEDURE PostRecurringJournalWithZeroAmountLine@22();
    VAR
      GenJournalBatch@1003 : Record 232;
      GenJournalLine@1001 : Record 81;
      GLAccountA@1000 : Record 15;
      GLAccountB@1004 : Record 15;
      GLEntry@1002 : Record 17;
    BEGIN
      // [SCENARIO 381263] It is possible to post recurring journal having zero amounts in linem, but lines with zero amounts are skipped
      // [GIVEN] "G/L Account" "GL-A" with balance 100
      // [GIVEN] "G/L Account" "GL-B" with balance 0
      // [GIVEN] Recurring Journal Line[1] where "Account No." = "GL-A", Amount = 0, "Reccuring Method" = "B  Balance", "Recurring Frequency" = 1M, "Posting Date" = 01/01/2017
      // [GIVEN] Recurring Journal Line[2] where "Account No." = "GL-B", Amount = 0 and "Reccuring Method" = "B  Balance", "Recurring Frequency" = 1M, "Posting Date" = 01/01/2017
      FindGLAccount(GLAccountA);
      GLAccountA.VALIDATE(Balance,100);
      GLAccountA.MODIFY(TRUE);
      CreateTemplateAndBatch(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Recurring Method"::"B  Balance",
        0,GLAccountA."No.");
      GLAccountB.COPY(GLAccountA);
      GLAccountB."No." := LibraryUtility.GenerateGUID;
      GLAccountB.Balance := 0;
      GLAccountB.INSERT;
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Recurring Method"::"B  Balance",
        0,GLAccountB."No.");

      // [GIVEN] Allocations set for both lines
      CreateAllocationLine(GenJournalLine);

      // [WHEN] Post recurring journal
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Recurring Journal Line[1] has been posted
      // [THEN] Recurring Journal Line[2] has not been posted
      // [THEN] Message "At least one line has not been posted because of zero amount" has been shown
      // message verified in ZeroAmountLinePostingSkipMessageHandler
      GLEntry.INIT;
      GLEntry.SETRANGE("G/L Account No.",GLAccountA."No.");
      Assert.RecordIsNotEmpty(GLEntry);
      GLEntry.SETRANGE("G/L Account No.",GLAccountB."No.");
      Assert.RecordIsEmpty(GLEntry);

      // [THEN] Recurring Journal Line[1]."Posting Date" = 01/02/2017 (1st February 2017)
      // [THEN] Recurring Journal Line[2]."Posting Date" = 01/02/2017 (1st February 2017)
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      GenJournalLine.FINDFIRST;
      GenJournalLine.TESTFIELD("Posting Date",CALCDATE(GenJournalLine."Recurring Frequency",WORKDATE));
      GenJournalLine.NEXT;
      GenJournalLine.TESTFIELD("Posting Date",CALCDATE(GenJournalLine."Recurring Frequency",WORKDATE));
    END;

    [Test]
    PROCEDURE UT_GenJournalLineNeedCheckZeroAmountPositiveCustomer@23();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381263] NeedCheckZeroAmount function returns TRUE when "Account No" <> <blank>, "Account Type" = Customer, "Is System Created Entry" = FALSE and "Allow Zero-Amount Posting" = FALSE
      GenJournalLine.INIT;
      UpdateGenJournalLine(GenJournalLine,LibraryUtility.GenerateGUID,FALSE,FALSE,GenJournalLine."Account Type"::Customer);
      Assert.IsTrue(GenJournalLine.NeedCheckZeroAmount,'');
    END;

    [Test]
    PROCEDURE UT_GenJournalLineNeedCheckZeroAmountPositiveVendor@50();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381263] NeedCheckZeroAmount function returns TRUE when "Account No" <> <blank>, "Account Type" = Vendor, "Is System Created Entry" = FALSE and "Allow Zero-Amount Posting" = FALSE
      GenJournalLine.INIT;
      UpdateGenJournalLine(GenJournalLine,LibraryUtility.GenerateGUID,FALSE,FALSE,GenJournalLine."Account Type"::Vendor);
      Assert.IsTrue(GenJournalLine.NeedCheckZeroAmount,'');
    END;

    [Test]
    PROCEDURE UT_GenJournalLineNeedCheckZeroAmountPositiveBankAccount@53();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381263] NeedCheckZeroAmount function returns TRUE when "Account No" <> <blank>, "Account Type" = "Bank Account", "Is System Created Entry" = FALSE and "Allow Zero-Amount Posting" = FALSE
      GenJournalLine.INIT;
      UpdateGenJournalLine(GenJournalLine,LibraryUtility.GenerateGUID,FALSE,FALSE,GenJournalLine."Account Type"::"Bank Account");
      Assert.IsTrue(GenJournalLine.NeedCheckZeroAmount,'');
    END;

    [Test]
    PROCEDURE UT_GenJournalLineNeedCheckZeroAmountPositiveICPartner@52();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381263] NeedCheckZeroAmount function returns TRUE when "Account No" <> <blank>, "Account Type" = "IC Partner", "Is System Created Entry" = FALSE and "Allow Zero-Amount Posting" = FALSE
      GenJournalLine.INIT;
      UpdateGenJournalLine(GenJournalLine,LibraryUtility.GenerateGUID,FALSE,FALSE,GenJournalLine."Account Type"::"IC Partner");
      Assert.IsTrue(GenJournalLine.NeedCheckZeroAmount,'');
    END;

    [Test]
    PROCEDURE UT_GenJournalLineNeedCheckZeroAmountPositiveGLAccount@51();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381263] NeedCheckZeroAmount function returns TRUE when "Account No" <> <blank>, "Account Type" = "G/L Account", "Is System Created Entry" = FALSE and "Allow Zero-Amount Posting" = FALSE
      GenJournalLine.INIT;
      UpdateGenJournalLine(GenJournalLine,LibraryUtility.GenerateGUID,FALSE,FALSE,GenJournalLine."Account Type"::"G/L Account");
      Assert.IsTrue(GenJournalLine.NeedCheckZeroAmount,'');
    END;

    [Test]
    PROCEDURE UT_GenJournalLineNeedCheckZeroAmountNegativeBlankAccountNo@28();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381263] NeedCheckZeroAmount function returns FALSE when "Account No" = <blank>, "Account Type" = Customer, "Is System Created Entry" = FALSE and "Allow Zero-Amount Posting" = FALSE
      GenJournalLine.INIT;
      UpdateGenJournalLine(GenJournalLine,'',FALSE,FALSE,GenJournalLine."Account Type"::Customer);
      Assert.IsFalse(GenJournalLine.NeedCheckZeroAmount,'');
    END;

    [Test]
    PROCEDURE UT_GenJournalLineNeedCheckZeroAmountNegativeSystemEnrty@49();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381263] NeedCheckZeroAmount function returns FALSE when "Account No" <> <blank>, "Account Type" = Customer, "Is System Created Entry" = TRUE and "Allow Zero-Amount Posting" = FALSE
      GenJournalLine.INIT;
      UpdateGenJournalLine(GenJournalLine,LibraryUtility.GenerateGUID,TRUE,FALSE,GenJournalLine."Account Type"::Customer);
      Assert.IsFalse(GenJournalLine.NeedCheckZeroAmount,'');
    END;

    [Test]
    PROCEDURE UT_GenJournalLineNeedCheckZeroAmountNegativeAllowZeroPosting@48();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381263] NeedCheckZeroAmount function returns FALSE when "Account No" <> <blank>, "Account Type" = Customer, "Is System Created Entry" = FALSE and "Allow Zero-Amount Posting" = TRUE
      GenJournalLine.INIT;
      UpdateGenJournalLine(GenJournalLine,LibraryUtility.GenerateGUID,FALSE,TRUE,GenJournalLine."Account Type"::Customer);
      Assert.IsFalse(GenJournalLine.NeedCheckZeroAmount,'');
    END;

    [Test]
    PROCEDURE UT_GenJournalLineNeedCheckZeroAmountNegativeFixedAccountType@47();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381263] NeedCheckZeroAmount function returns FALSE when "Account No" <> <blank>, "Account Type" = "Fixed Asset", "Is System Created Entry" = FALSE and "Allow Zero-Amount Posting" = FALSE
      GenJournalLine.INIT;
      UpdateGenJournalLine(GenJournalLine,LibraryUtility.GenerateGUID,FALSE,FALSE,GenJournalLine."Account Type"::"Fixed Asset");
      Assert.IsFalse(GenJournalLine.NeedCheckZeroAmount,'');
    END;

    [Test]
    PROCEDURE UT_GenJournalLineIsRecurringPostive@35();
    VAR
      GenJournalLine@1000 : Record 81;
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381263] IsReccuring function returns TRUE when Reccuring = TRUE in template of general journal line
      LibraryERM.CreateRecurringTemplateName(GenJournalTemplate);
      GenJournalLine.INIT;
      GenJournalLine."Journal Template Name" := GenJournalTemplate.Name;
      Assert.IsTrue(GenJournalLine.IsRecurring,'');
    END;

    [Test]
    PROCEDURE UT_GenJournalLineIsRecurringNegativeIsReccuringField@36();
    VAR
      GenJournalLine@1000 : Record 81;
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381263] IsReccuring function returns FALSE when Reccuring = FALSE in template of general journal line
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.TESTFIELD(Recurring,FALSE);
      GenJournalLine.INIT;
      GenJournalLine."Journal Template Name" := GenJournalTemplate.Name;
      Assert.IsFalse(GenJournalLine.IsRecurring,'');
    END;

    [Test]
    PROCEDURE UT_GenJournalLineIsRecurringNegativeBlankTemplateField@38();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381263] IsReccuring function returns TRUE when template is not set in general journal line
      GenJournalLine.INIT;
      Assert.IsFalse(GenJournalLine.IsRecurring,'');
    END;

    [Test]
    PROCEDURE PostMultipleRecurringJournalLineUserSetupNotAllowedPostingPeriod@67();
    VAR
      GenJournalLine@1003 : Record 81;
      GenJournalBatch@1006 : Record 232;
      UserSetup@1000 : Record 91;
      DocumentNo@1004 : ARRAY [3] OF Code[20];
      AllowedDate@1005 : Date;
    BEGIN
      // [FEATURE] [Posting Date] [Allowed Posting Period]
      // [SCENARIO 221154] Lines with posting date outside User Setup allowed posting period are not posted in Recurring Journal

      // [GIVEN] General Journal Batch.
      CreateTemplateAndBatch(GenJournalBatch);

      // [GIVEN] Date when posting is allowed "D"
      AllowedDate := LibraryRandom.RandDate(-10);

      // [GIVEN] Admin User with "D" as allowed posting period
      CreateUserSetupWithAllowedPostingPeriod(UserSetup,AllowedDate,AllowedDate,TRUE);

      // [GIVEN] Recurring Journal with 3 lines: "Posting Date" is more, less and equal to "DPA", "Expiration Date" is always more than "Posting Date"
      DocumentNo[1] := CreateRecurringJnlLine(
          GenJournalLine,GenJournalBatch,AllowedDate + 1,AllowedDate + 2);
      DocumentNo[2] := CreateRecurringJnlLine(
          GenJournalLine,GenJournalBatch,AllowedDate,AllowedDate + 2);
      DocumentNo[3] := CreateRecurringJnlLine(
          GenJournalLine,GenJournalBatch,AllowedDate - 1,AllowedDate + 2);

      // [WHEN] Post Recurring Journal
      CreateAllocationLine(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Only G/L Entry for line 2 is created
      VerifyGLEntriesWithNotAllowedPostingDate(DocumentNo);

      // Tear down
      UserSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE PostMultipleRecurringJournalLineGLSetupNotAllowedPostingPeriod@79();
    VAR
      GenJournalLine@1003 : Record 81;
      GenJournalBatch@1006 : Record 232;
      DocumentNo@1004 : ARRAY [3] OF Code[20];
      AllowedDate@1005 : Date;
    BEGIN
      // [FEATURE] [Posting Date] [Allowed Posting Period]
      // [SCENARIO 221154] Lines with posting date outside GL Setup allowed posting period are not posted in Recurring Journal
      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");

      // [GIVEN] General Journal Batch
      CreateTemplateAndBatch(GenJournalBatch);

      // [GIVEN] Date when posting is allowed "D"
      AllowedDate := LibraryRandom.RandDate(-10);

      // [GIVEN] Admin User with "D" as allowed posting period
      CreateGLSetupWithAllowedPostingPeriod(AllowedDate,AllowedDate);

      // [GIVEN] Recurring Journal with 3 lines: "Posting Date" is more, less and equal to "DPA", "Expiration Date" is always more than "Posting Date"
      DocumentNo[1] := CreateRecurringJnlLine(
          GenJournalLine,GenJournalBatch,AllowedDate + 1,AllowedDate + 2);
      DocumentNo[2] := CreateRecurringJnlLine(
          GenJournalLine,GenJournalBatch,AllowedDate,AllowedDate + 2);
      DocumentNo[3] := CreateRecurringJnlLine(
          GenJournalLine,GenJournalBatch,AllowedDate - 1,AllowedDate + 2);

      // [WHEN] Post Recurring Journal
      CreateAllocationLine(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Only G/L Entry for line 2 is created
      VerifyGLEntriesWithNotAllowedPostingDate(DocumentNo);

      // Tear down
      LibrarySetupStorage.Restore;
    END;

    LOCAL PROCEDURE CreateAndPostGeneralJournalLineWithRecurringMethod@6(VAR GenJournalLine@1000 : Record 81;RecurringMethod@1001 : Option);
    VAR
      GLAccount@1004 : Record 15;
      GenJournalBatch@1003 : Record 232;
      DocumentNo@1002 : Code[20];
      Counter@1005 : Integer;
    BEGIN
      DocumentNo := LibraryUtility.GenerateGUID;
      CreateTemplateAndBatch(GenJournalBatch);
      FindGLAccount(GLAccount);
      FOR Counter := 1 TO LibraryRandom.RandIntInRange(2,5) DO BEGIN
        CreateJournalLineWithSimilarDocNo(
          GenJournalLine,GenJournalBatch,RecurringMethod,LibraryRandom.RandDec(100,2),GLAccount."No.",DocumentNo);
        CreateJournalLineWithSimilarDocNo(
          GenJournalLine,GenJournalBatch,RecurringMethod,-GenJournalLine.Amount,GLAccount."No.",DocumentNo);
      END;
      FindGeneralJournalLine(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateRecurringTemplateWithoutForceDocBalance@21(VAR GenJnlTemplate@1000 : Record 80);
    BEGIN
      LibraryERM.CreateRecurringTemplateName(GenJnlTemplate);
      GenJnlTemplate.VALIDATE("Force Doc. Balance",FALSE);
      GenJnlTemplate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRecurringJournalLine@5(VAR GenJournalLine@1000 : Record 81;VAR RecurringFrequency@1005 : ARRAY [6] OF DateFormula) : Integer;
    VAR
      GLAccount@1007 : Record 15;
      GenJournalBatch@1001 : Record 232;
      Counter@1003 : Integer;
      NoOfLines@1002 : Integer;
    BEGIN
      // Use Random Number Generator to generate the No. of lines.
      NoOfLines := 2 * LibraryRandom.RandInt(3);

      // Find G/L Account without VAT.
      FindGLAccount(GLAccount);

      // Create Recurring Journal Lines with Allocation and with random values.
      CreateTemplateAndBatch(GenJournalBatch);
      FOR Counter := 1 TO NoOfLines DO BEGIN
        CreateGeneralJournalLine(
          GenJournalLine,GenJournalBatch,GenJournalLine."Recurring Method"::"F  Fixed",LibraryRandom.RandDec(100,2),
          GLAccount."No.");
        GLAccount.NEXT;
        RecurringFrequency[Counter] := GenJournalLine."Recurring Frequency";
      END;
      CreateAllocationLine(GenJournalLine);
      EXIT(NoOfLines);
    END;

    LOCAL PROCEDURE CreateRecurringJnlLine@19(VAR GenJournalLine@1000 : Record 81;GenJournalBatch@1001 : Record 232;PostingDate@1002 : Date;ExpirationDate@1003 : Date) : Code[20];
    BEGIN
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Recurring Method"::"F  Fixed",
        LibraryRandom.RandDec(100,2),LibraryERM.CreateGLAccountNo);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Expiration Date",ExpirationDate);
      GenJournalLine.MODIFY(TRUE);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE CreateBalancedRecurringJnlLines@27(VAR GenJnlLine@1000 : Record 81;GenJnlBatch@1001 : Record 232);
    VAR
      InitialAmount@1002 : Decimal;
    BEGIN
      CreateRecurringJnlLine(GenJnlLine,GenJnlBatch,WORKDATE,WORKDATE);
      InitialAmount := GenJnlLine.Amount;
      CreateRecurringJnlLine(GenJnlLine,GenJnlBatch,WORKDATE,WORKDATE);
      GenJnlLine.VALIDATE(Amount,-InitialAmount);
      GenJnlLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAllocationLine@3(GenJournalLine@1000 : Record 81);
    VAR
      GenJnlAllocation@1001 : Record 221;
      GLAccount@1006 : Record 15;
    BEGIN
      // Create GL Account to use in General Journal Allocation Lines.
      LibraryERM.CreateGLAccount(GLAccount);
      FindGeneralJournalLine(GenJournalLine);

      // Create Allocation Line for each Recurring Journal Line.
      REPEAT
        LibraryERM.CreateGenJnlAllocation(
          GenJnlAllocation,GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",GenJournalLine."Line No.");
        GenJnlAllocation.VALIDATE("Account No.",GLAccount."No.");
        GenJnlAllocation.VALIDATE("Allocation %",100);  // Using complete allocation for the Allocation Line.
        GenJnlAllocation.MODIFY(TRUE);
      UNTIL GenJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@14(VAR GenJournalLine@1009 : Record 81;GenJournalBatch@1001 : Record 232;RecurringMethod@1003 : Option;Amount@1000 : Decimal;AccountNo@1005 : Code[20]);
    VAR
      RecurringFrequency@1002 : DateFormula;
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",AccountNo,Amount);
      GenJournalLine.VALIDATE("Recurring Method",RecurringMethod);
      EVALUATE(RecurringFrequency,'<' + FORMAT(LibraryRandom.RandInt(10)) + 'M >');  // Use Random value for Recurring Frequency.
      GenJournalLine.VALIDATE("Recurring Frequency",RecurringFrequency);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJournalLineWithSimilarDocNo@11(VAR GenJournalLine@1009 : Record 81;GenJournalBatch@1001 : Record 232;RecurringMethod@1003 : Option;Amount@1000 : Decimal;AccountNo@1005 : Code[20];DocumentNo@1002 : Code[20]);
    BEGIN
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,RecurringMethod,Amount,AccountNo);
      GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTemplateAndBatch@4(VAR GenJournalBatch@1003 : Record 232);
    VAR
      GenJournalTemplate@1000 : Record 80;
    BEGIN
      LibraryERM.FindRecurringTemplateName(GenJournalTemplate);
      LibraryERM.CreateRecurringBatchName(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateUserSetupWithAllowedPostingPeriod@58(VAR UserSetup@1000 : Record 91;AllowedPostingFrom@1001 : Date;AllowedPostingTo@1002 : Date;IsAdministrator@1003 : Boolean);
    BEGIN
      LibraryDocumentApprovals.CreateUserSetup(UserSetup,USERID,'');
      WITH UserSetup DO BEGIN
        VALIDATE("Allow Posting From",AllowedPostingFrom);
        VALIDATE("Allow Posting To",AllowedPostingTo);
        VALIDATE("Approval Administrator",IsAdministrator);
        MODIFY(TRUE)
      END;
    END;

    LOCAL PROCEDURE CreateGLSetupWithAllowedPostingPeriod@81(AllowedPostingFrom@1001 : Date;AllowedPostingTo@1002 : Date);
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      WITH GLSetup DO BEGIN
        FINDFIRST;
        VALIDATE("Allow Posting From",AllowedPostingFrom);
        VALIDATE("Allow Posting To",AllowedPostingTo);
        MODIFY(TRUE)
      END;
    END;

    LOCAL PROCEDURE UpdateGenJournalLine@42(VAR GenJournalLine@1000 : Record 81;AccountNo@1001 : Code[20];IsSystemEntry@1002 : Boolean;AllowZeroPosting@1003 : Boolean;AccountType@1004 : Option);
    BEGIN
      GenJournalLine."Account No." := AccountNo;
      GenJournalLine."System-Created Entry" := IsSystemEntry;
      GenJournalLine."Allow Zero-Amount Posting" := AllowZeroPosting;
      GenJournalLine."Account Type" := AccountType;
    END;

    LOCAL PROCEDURE FindGLAccount@25(VAR GLAccount@1000 : Record 15);
    BEGIN
      GLAccount.SETRANGE("VAT Prod. Posting Group",'');
      LibraryERM.FindDirectPostingGLAccount(GLAccount);
    END;

    LOCAL PROCEDURE FindGeneralJournalLine@13(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
      GenJournalLine.FINDSET;
    END;

    LOCAL PROCEDURE VerifyNoOfLineInGLEntry@9(JournalBatchName@1001 : Code[10];NoOfLines@1002 : Integer);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Journal Batch Name",JournalBatchName);
      Assert.AreEqual(GLEntry.COUNT,NoOfLines,NoOfLinesErr);
    END;

    LOCAL PROCEDURE VerifyDocumentDateOnGLEntry@26(JournalBatchName@1001 : Code[10];DocumentNo@1003 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Journal Batch Name",JournalBatchName);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETFILTER("Document Date",'<>%1',GLEntry."Posting Date");
      IF NOT GLEntry.ISEMPTY THEN
        ERROR(
          STRSUBSTNO(DocumentDateErr,GLEntry.FIELDCAPTION("Document Date"),GLEntry.FIELDCAPTION("Posting Date"),GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyGLEntryExists@132(JournalBatchName@1001 : Code[10];PostingDate@1003 : Date);
    VAR
      DummyGLEntry@1000 : Record 17;
    BEGIN
      DummyGLEntry.SETRANGE("Journal Batch Name",JournalBatchName);
      DummyGLEntry.SETRANGE("Posting Date",PostingDate);
      Assert.RecordIsNotEmpty(DummyGLEntry);
    END;

    LOCAL PROCEDURE VerifyGLEntriesWithExpiredDate@31(DocumentNo@1000 : ARRAY [3] OF Code[20]);
    VAR
      GLEntry@1001 : Record 17;
    BEGIN
      GLEntry.INIT;
      GLEntry.SETRANGE("External Document No.",DocumentNo[1]);
      Assert.RecordIsNotEmpty(GLEntry);
      GLEntry.SETRANGE("External Document No.",DocumentNo[2]);
      Assert.RecordIsEmpty(GLEntry);
      GLEntry.SETRANGE("External Document No.",DocumentNo[3]);
      Assert.RecordIsNotEmpty(GLEntry);
    END;

    LOCAL PROCEDURE VerifyGLEntriesWithNotAllowedPostingDate@64(DocumentNo@1000 : ARRAY [3] OF Code[20]);
    VAR
      DummyGLEntry@1001 : Record 17;
    BEGIN
      DummyGLEntry.SETRANGE("External Document No.",DocumentNo[1]);
      Assert.RecordIsEmpty(DummyGLEntry);
      DummyGLEntry.SETRANGE("External Document No.",DocumentNo[2]);
      Assert.RecordIsNotEmpty(DummyGLEntry);
      DummyGLEntry.SETRANGE("External Document No.",DocumentNo[3]);
      Assert.RecordIsEmpty(DummyGLEntry);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@32(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE SuccessMessageHandler@33(Msg@1000 : Text[1024]);
    BEGIN
      Assert.ExpectedMessage(SuccessPostingMsg,Msg);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@18(Question@1000 : Text);
    BEGIN
    END;

    [MessageHandler]
    PROCEDURE ZeroAmountLinePostingSkipMessageHandler@29(MessageText@1000 : Text);
    BEGIN
      Assert.ExpectedMessage(SkippedLineMsg,MessageText);
    END;

    [ModalPageHandler]
    PROCEDURE GenJnlTemplateModalPageHandler@34(VAR GeneralJournalTemplateList@1000 : TestPage 250);
    BEGIN
      GeneralJournalTemplateList.FILTER.SETFILTER(Name,LibraryVariableStorage.DequeueText);
      GeneralJournalTemplateList.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Recurring Journal]

      Unsupported version tags:
      NA: Unable to Execute

      Test Recurring Journal.
        1. Check No. of lines in G/L Entry after posting Recurring Journal with allocation.
        2. Check posting Date on Recurring Journal Lines after posting.
        3. Check error on Recurring Journal Lines after posting with zero amount.
        4. Check the posting of Recurring General Journal with Multiple line with same Document No. is possible and also check No. of lines in G/L Entry after posting.
        5. Check the Document Date on G/L Entry after Posting Recurring General Journal with Recurring Method "RF Reversing Fixed" and Multiple lines.

      Covers Test Cases:
        ---------------------------------------------
        Test Function Name             TFS ID
        ---------------------------------------------
        TestPostRecurringJournal       111511

      Covers Test Cases: 253633
        ---------------------------------------------
        Test Function Name             TFS ID
        ---------------------------------------------
        PostingDateOnRecurringJournal  243998

      Covers Test Cases: 259526
        ---------------------------------------------
        Test Function Name             TFS ID
        ---------------------------------------------
        ErrorOnRecurringJournal        253116

      Covers Test Cases: 277341
        ---------------------------------------------
        Test Function Name                     TFS ID
        ---------------------------------------------
        PostMultipleRecurringJournalLines      275643

      Covers Test Cases for Bug ID: 314879
        ---------------------------------------------------------------
        Test Function Name                                   TFS ID
        ---------------------------------------------------------------
        DocumentDateAfterPostingRecurringJournalLines        311921
    }
    END.
  }
}

