OBJECT Codeunit 137297 SCM Inventory Misc. V
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1006 : Codeunit 130000;
      LibraryCosting@1007 : Codeunit 132200;
      LibraryERM@1004 : Codeunit 131300;
      LibraryERMCountryData@1023 : Codeunit 131305;
      LibraryInventory@1003 : Codeunit 132201;
      LibraryManufacturing@1015 : Codeunit 132202;
      LibraryPurchase@1005 : Codeunit 130512;
      LibraryPlanning@1002 : Codeunit 132203;
      LibrarySales@1018 : Codeunit 130509;
      LibraryUtility@1011 : Codeunit 131000;
      LibraryWarehouse@1009 : Codeunit 132204;
      LibraryVariableStorage@1010 : Codeunit 131004;
      LibraryRandom@1001 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      PickRequestLocationCode@1013 : Code[10];
      PickRequestDocumentNo@1016 : Code[20];
      PickWorkSheetQtyError@1008 : TextConst 'ENU=%1 in Pick Worksheet line did not match quantity in Prod. Order for Component %2.';

    [Test]
    [HandlerFunctions(PickSelectionPageHandler)]
    PROCEDURE PickReqAvailableAfterPostConsumpJnl@29();
    VAR
      Item@1002 : Record 27;
      NewComponentItem@1001 : Record 27;
      ProductionOrder@1000 : Record 5405;
      ProdOrderComponent@1004 : Record 5407;
      Bin@1006 : ARRAY [2] OF Record 7354;
      WhseWorksheetLine@1005 : Record 7326;
    BEGIN
      // Verify Picking Request is being available on Pick Worksheet for new Component line when  Production Order Component has been consumed, the Remaining Qty for all Lines will be 0.

      // Setup
      Initialize;
      CreateWarehouseLocation(Bin);
      CreateItemWithInventory(Item,Bin[1]."Location Code",Bin[1].Code);

      SetupProductionOrder(ProductionOrder,Bin[2],Item."No.");
      CreateAndRegisterPick(ProductionOrder."No.",Bin[2]."Location Code");
      CreateAndPostConsumptionJournal(ProductionOrder,Item."No.");

      CreateItemWithInventory(NewComponentItem,Bin[1]."Location Code",Bin[1].Code);
      CreateProdOrderComponent(ProductionOrder,ProdOrderComponent,Bin[2].Code,NewComponentItem."No.");

      // Exercise
      CreatePickWorksheetLine(WhseWorksheetLine,ProductionOrder."No.",Bin[2]."Location Code");

      // Verify
      WhseWorksheetLine.SETRANGE("Item No.",NewComponentItem."No.");
      WhseWorksheetLine.FINDFIRST;
      Assert.AreEqual(ProdOrderComponent.Quantity,WhseWorksheetLine.Quantity,
        STRSUBSTNO(PickWorkSheetQtyError,WhseWorksheetLine.FIELDCAPTION(Quantity),NewComponentItem."No."));
      Assert.AreEqual(ProdOrderComponent.Quantity,WhseWorksheetLine."Qty. to Handle",
        STRSUBSTNO(PickWorkSheetQtyError,WhseWorksheetLine.FIELDCAPTION("Qty. to Handle"),NewComponentItem."No."));
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler)]
    PROCEDURE ValueEntryAfterInventoryRemainsZero@45();
    VAR
      InventorySetup@1000 : Record 313;
      SalesReceivablesSetup@1001 : Record 311;
      Item@1002 : Record 27;
      PurchaseLine@1003 : Record 39;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      ValueEntry@1008 : Record 5802;
      DocumentNo@1006 : Code[20];
      PstdPurchInvNo@1010 : Code[20];
    BEGIN
      // Verify Value Entries for an Item which have zero Inventory after run the Adjust Cost Item Entries.

      // Setup: Update Inventory Setup and Sales Receivable Setup.
      Initialize;
      InventorySetup.GET;
      LibraryInventory.UpdateInventorySetup(
        InventorySetup,TRUE,InventorySetup."Expected Cost Posting to G/L",InventorySetup."Automatic Cost Adjustment",
        InventorySetup."Average Cost Calc. Type",InventorySetup."Average Cost Period"::Month);
      SalesReceivablesSetup.GET;
      UpdateSalesReceivableSetup(TRUE);

      // Create and post Purchase Order, create and post Sales Order.
      PstdPurchInvNo :=
        CreateAndPostPurchaseOrder(
          PurchaseLine,CreateAndModifyItem('',Item."Flushing Method"::Backward,Item."Replenishment System"::Purchase),TRUE);
      CreateSalesDocument(SalesLine,SalesLine."Document Type"::Order,PurchaseLine."No.",'',PurchaseLine.Quantity);
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      Item.GET(PurchaseLine."No.");

      // Exercise: Run adjust Cost Item Entries.
      LibraryCosting.AdjustCostItemEntries(PurchaseLine."No.",'');

      // Verify: Verify Value Entries for an Item which have zero Inventory.
      FindValueEntry(ValueEntry,ValueEntry."Item Ledger Entry Type"::Sale,DocumentNo);
      ValueEntry.TESTFIELD("Cost Amount (Actual)",Item."Last Direct Cost" * -SalesLine.Quantity);
      FindValueEntry(ValueEntry,ValueEntry."Item Ledger Entry Type"::Purchase,PstdPurchInvNo);
      ValueEntry.TESTFIELD("Cost Amount (Actual)",Item."Last Direct Cost" * PurchaseLine.Quantity);

      // Teardown:
      LibraryInventory.UpdateInventorySetup(
        InventorySetup,InventorySetup."Automatic Cost Posting",InventorySetup."Expected Cost Posting to G/L",
        InventorySetup."Automatic Cost Adjustment",InventorySetup."Average Cost Calc. Type",InventorySetup."Average Cost Period");
      UpdateSalesReceivableSetup(SalesReceivablesSetup."Exact Cost Reversing Mandatory");
    END;

    [Test]
    PROCEDURE UnitCostLCYOnPurchOrderWithCurrency@49();
    VAR
      Item@1002 : Record 27;
      ProductionOrder@1003 : Record 5405;
      PurchaseLine@1005 : Record 39;
      CurrencyExchangeRate@1007 : Record 330;
      WorkCenter@1000 : Record 99000754;
    BEGIN
      // Verify Unit Cost(LCY) on Purchase Line when Subcontracting Purchase Order is created with Foreign Currency.

      // Setup: Create Work Center, create and refresh Production Order.
      Initialize;
      WorkCenter.GET(CreateWorkCenter);
      UpdateRoutingOnItem(Item,WorkCenter."No.");
      CreateAndRefreshProdOrder(ProductionOrder,Item."No.",'',LibraryRandom.RandDec(10,2));  // Take random Quantity.

      // Exercise: Carry Out Action Message on SubContract Worksheet.
      CarryOutAMSubcontractWksh(WorkCenter."No.",Item."No.");

      // Verify: Verify Unit Cost(LCY) on Purchase Line when Subcontracting Purchase Order is created with Foreign Currency.
      FindPurchaseLine(PurchaseLine,Item."No.");
      FindCurrencyExchangeRate(CurrencyExchangeRate,PurchaseLine."Currency Code");
      PurchaseLine.TESTFIELD(
        "Unit Cost (LCY)",
        PurchaseLine."Direct Unit Cost" *
        CurrencyExchangeRate."Relational Exch. Rate Amount" / CurrencyExchangeRate."Exchange Rate Amount");
    END;

    [Test]
    PROCEDURE CapacityLedgerEntryAfterPostPurchOrder@55();
    VAR
      Item@1002 : Record 27;
      ProductionOrder@1003 : Record 5405;
      PurchaseLine@1005 : Record 39;
      CurrencyExchangeRate@1007 : Record 330;
      CapacityLedgerEntry@1010 : Record 5832;
      WorkCenter@1000 : Record 99000754;
      ProductionLine@1500000 : Record 5406;
      ProdcutionComp@1500001 : Record 5407;
    BEGIN
      // Verify Capacity Ledger Entries when Subcontracting Purchase Order is created and posted with Foreign Currency.

      // Setup: Create Work Center, create and refresh Production Order and Carry Out Action Message on SubContract Worksheet.
      Initialize;
      WorkCenter.GET(CreateWorkCenter);
      UpdateRoutingOnItem(Item,WorkCenter."No.");
      CreateAndRefreshProdOrder(ProductionOrder,Item."No.",'',LibraryRandom.RandDec(10,2));  // Take random Quantity.
      ProductionLine.SETRANGE(Status,ProductionOrder.Status);
      ProductionLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProductionLine.FINDFIRST;
      LibraryManufacturing.CreateProductionOrderComponent(
        ProdcutionComp,ProductionOrder.Status,ProductionOrder."No.",ProductionLine."Line No.");
      ProdcutionComp.VALIDATE("Item No.",Item."No.");
      ProdcutionComp.MODIFY(TRUE);
      CarryOutAMSubcontractWksh(WorkCenter."No.",Item."No.");

      // Exercise: Post Purchase Order.
      FindPurchLineAndPostPurchOrder(PurchaseLine,Item."No.");

      // Verify: Verify Capacity Ledger Entries when Subcontracting Purchase Order is posted with Foreign Currency.
      FindCurrencyExchangeRate(CurrencyExchangeRate,PurchaseLine."Currency Code");
      FindCapacityLedgerEntry(CapacityLedgerEntry,ProductionOrder."No.");
      CapacityLedgerEntry.CALCFIELDS("Direct Cost");
      CapacityLedgerEntry.TESTFIELD(
        "Direct Cost",
        ROUND(
          PurchaseLine."Direct Unit Cost" *
          PurchaseLine.Quantity * CurrencyExchangeRate."Relational Exch. Rate Amount" / CurrencyExchangeRate."Exchange Rate Amount"));
    END;

    [Test]
    PROCEDURE UpdateItemJnlDescAfterDeleteVariant@56();
    VAR
      ItemVariant@1000 : Record 5401;
      Item@1001 : Record 27;
      ItemJournalLine@1002 : Record 83;
    BEGIN
      // Verify Item Journal Line Description is updated after deleting Variant Code.

      // Setup: Create Item, create Item Variant.
      Initialize;
      Item.GET(CreateItem);
      CreateAndModifyItemVariant(ItemVariant,Item."No.");
      CreateItemJournalLine(ItemJournalLine,ItemVariant."Item No.",ItemVariant.Code,'','');

      // Exercise: Delete Variant code on Item Journal Line.
      UpdateVariantOnItemJnlLine(ItemJournalLine);

      // Verify: Verify Item Journal Line Description is updated.
      ItemJournalLine.TESTFIELD(Description,Item.Description);
    END;

    [Test]
    PROCEDURE StartDateAfterUpdateSendAheadQty@60();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
      ProductionOrder@1003 : Record 5405;
      RoutingHeader@1004 : Record 99000763;
      ProdOrderLine@1007 : Record 5406;
      WorkCenter@1006 : Record 99000754;
      ProdOrderRoutingLine@1011 : Record 5409;
      CalculatedTime@1012 : Time;
      CalculatedTime2@1015 : Time;
      Difference@1014 : Integer;
    BEGIN
      // Verify Starting Date on Production Order Routing when Send-Ahead Quantity is updated.

      // Setup: Create Item, create and certify Production BOM.
      Initialize;
      Item.GET(CreateAndModifyItem('',Item."Flushing Method"::Backward,Item."Replenishment System"::Purchase)); // Component Item
      Item2.GET(CreateAndModifyItem('',Item2."Flushing Method"::Backward,Item2."Replenishment System"::"Prod. Order")); // Component Item
      CreateAndCertifyProductionBOM(ProductionBOMHeader,Item."Base Unit of Measure",Item2."No.",'');

      // Create Routing with Work Center and Machine Center.
      WorkCenter.GET(CreateWorkCenter);
      RoutingHeader.GET(CreateRoutingSetup(WorkCenter."No.",''));
      CreateMachineCenter(RoutingHeader,WorkCenter."No.");

      // Update Item with Prodouction BOM No. and Routing No.
      Item.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      Item.VALIDATE("Routing No.",RoutingHeader."No.");
      Item.MODIFY(TRUE);

      // Create and refresh Released Production Order.
      CreateAndRefreshProdOrder(ProductionOrder,Item."No.",'',LibraryRandom.RandInt(5));  // Take random Quantity.
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;
      FindProdOrderRountingLine(ProdOrderRoutingLine,ProductionOrder."No.",ProdOrderRoutingLine.Type::"Work Center");
      Difference := ProdOrderRoutingLine."Setup Time" + (ProductionOrder.Quantity * ProdOrderRoutingLine."Run Time") ;
      CalculatedTime := DT2TIME(ProdOrderRoutingLine."Starting Date-Time");
      CalculatedTime2 := CalculatedTime + Difference * 60000;

      // Exercise.
      FindAndUpdateProdOrderRoutingLine(ProdOrderRoutingLine,ProductionOrder."No.");

      // Verify: Verify Starting Date on Production Order Routing when Send-Ahead Quantity is updated.
      FindProdOrderRountingLine(ProdOrderRoutingLine,ProductionOrder."No.",ProdOrderRoutingLine.Type::"Machine Center");
      ProdOrderRoutingLine.TESTFIELD("Starting Date-Time",CREATEDATETIME(ProdOrderLine."Starting Date",CalculatedTime2));
    END;

    LOCAL PROCEDURE Initialize@4();
    BEGIN
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateWorkCenter@168() : Code[20];
    VAR
      Currency@1002 : Record 4;
      WorkCenter@1001 : Record 99000754;
    BEGIN
      Currency.GET(CreateCurrency);
      LibraryManufacturing.CreateWorkCenterWithCalendar(WorkCenter);
      WorkCenter.VALIDATE("Subcontractor No.",CreateAndModifyVendor(Currency.Code));
      WorkCenter.MODIFY(TRUE);
      EXIT(WorkCenter."No.");
    END;

    LOCAL PROCEDURE UpdateRoutingOnItem@64(VAR Item@1000 : Record 27;WorkCenterNo@1001 : Code[20]);
    BEGIN
      Item.GET(CreateAndModifyItem('',Item."Flushing Method"::Manual,Item."Replenishment System"::Purchase));
      Item.VALIDATE("Routing No.",CreateRoutingSetup(WorkCenterNo,''));
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@77(VAR ProductionBOMHeader@1000 : Record 99000771;BaseUnitOfMeasure@1003 : Code[10];No@1004 : Code[20];RoutingLinkCode@1001 : Code[10]);
    VAR
      ProductionBOMLine@1002 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,BaseUnitOfMeasure);
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,No,1);  // Use blank value for Version Code and 1 for Quantity per.
      ProductionBOMLine.VALIDATE("Routing Link Code",RoutingLinkCode);
      ProductionBOMLine.MODIFY(TRUE);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndModifyItemVariant@68(VAR ItemVariant@1000 : Record 5401;ItemNo@1001 : Code[20]);
    BEGIN
      LibraryInventory.CreateItemVariant(ItemVariant,ItemNo);
      ItemVariant.VALIDATE(Description,LibraryUtility.GenerateGUID);
      ItemVariant.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithInventory@2(VAR Item@1000 : Record 27;LocationCode@1001 : Code[10];BinCode@1002 : Code[10]);
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      Item.GET(CreateAndModifyItem('',Item."Flushing Method"::Manual,Item."Replenishment System"::Purchase));
      UpdateInventoryPostingSetup(LocationCode,Item."Inventory Posting Group");
      CreateItemJournalLine(ItemJournalLine,Item."No.",'',LocationCode,BinCode);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateAndRefreshProdOrder@43(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,FALSE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndRegisterPick@53(SourceNo@1000 : Code[20];LocationCode@1003 : Code[10]);
    VAR
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
      WhseWorksheetLine@1005 : Record 7326;
    BEGIN
      CreatePickWorksheetLine(WhseWorksheetLine,SourceNo,LocationCode);

      LibraryWarehouse.CreatePickFromPickWorksheet(
        WhseWorksheetLine,WhseWorksheetLine."Line No.",WhseWorksheetLine."Worksheet Template Name",WhseWorksheetLine.Name,
        LocationCode,'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);

      WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.AutoFillQtyInventoryActivity(WarehouseActivityHeader);
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE CreatePickWorksheetLine@16(VAR WhseWorksheetLine@1005 : Record 7326;SourceNo@1004 : Code[20];LocationCode@1002 : Code[10]);
    VAR
      WhseWorksheetTemplate@1001 : Record 7328;
      WhseWorksheetName@1000 : Record 7327;
      GetSourceDocOutbound@1003 : Codeunit 5752;
    BEGIN
      WhseWorksheetTemplate.SETRANGE(Type,WhseWorksheetTemplate.Type::Pick);
      WhseWorksheetTemplate.FINDFIRST;
      LibraryWarehouse.CreateWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
      PickRequestDocumentNo := SourceNo;
      PickRequestLocationCode := LocationCode;
      GetSourceDocOutbound.GetSingleWhsePickDoc(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationCode);

      WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWorksheetName."Worksheet Template Name");
      WhseWorksheetLine.SETRANGE(Name,WhseWorksheetName.Name);
      WhseWorksheetLine.SETRANGE("Location Code",LocationCode);
      WhseWorksheetLine.FINDSET;
    END;

    LOCAL PROCEDURE CreateAndPostConsumptionJournal@38(ProductionOrder@1001 : Record 5405;ItemNo@1000 : Code[20]);
    VAR
      ItemJournalLine@1004 : Record 83;
      ItemJournalBatch@1003 : Record 233;
      ItemJournalTemplate@1002 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Consumption);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);

      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Consumption,ItemNo,
        ProductionOrder.Quantity);
      ItemJournalLine.VALIDATE("Order No.",ProductionOrder."No.");
      ItemJournalLine.VALIDATE("Location Code",ProductionOrder."Location Code");
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateAndUpdateProductionBOM@36(VAR ParentItem@1006 : Record 27;ChildItemNo@1000 : Code[20]);
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
    BEGIN
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ParentItem."Base Unit of Measure",ChildItemNo,'');
      UpdateItem(ParentItem,ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateProdOrderComponent@97(ProductionOrder@1002 : Record 5405;VAR ProdOrderComponent@1004 : Record 5407;BinCode@1003 : Code[20];ItemNo@1000 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateProductionOrderComponent(
        ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.",
        FindProductionOrderLine(ProductionOrder."No.",ProductionOrder.Status));
      ProdOrderComponent.VALIDATE("Item No.",ItemNo);
      ProdOrderComponent.VALIDATE("Quantity per",LibraryRandom.RandInt(5));
      ProdOrderComponent.VALIDATE("Location Code",ProductionOrder."Location Code");
      ProdOrderComponent.VALIDATE("Bin Code",BinCode);
      ProdOrderComponent.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(ProductionOrder."No.");
    END;

    LOCAL PROCEDURE CreateItem@22() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandInt(10));
      Item.VALIDATE("Unit Cost",LibraryRandom.RandInt(10));
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemJournalLine@23(VAR ItemJournalLine@1000 : Record 83;ItemNo@1003 : Code[20];VariantCode@1002 : Code[10];LocationCode@1004 : Code[10];BinCode@1005 : Code[20]);
    VAR
      ItemJournalBatch@1001 : Record 233;
    BEGIN
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Item);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,10 + LibraryRandom.RandInt(10)); // Use random Quantity.
      ItemJournalLine.VALIDATE("Unit Cost",LibraryRandom.RandDec(10,2)); // Using Random value for Unit Cost.
      ItemJournalLine.VALIDATE("Variant Code",VariantCode);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCurrency@99() : Code[10];
    VAR
      Currency@1000 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrder@46(VAR PurchaseLine@1000 : Record 39;ItemNo@1002 : Code[20];Invoice@1004 : Boolean) : Code[20];
    BEGIN
      CreatePurchaseDocument(
        PurchaseLine,PurchaseLine."Document Type"::Order,ItemNo,'',CreateVendor,LibraryRandom.RandInt(10),WORKDATE);
      EXIT(PostPurchaseDocument(PurchaseLine,Invoice));
    END;

    LOCAL PROCEDURE CreateMachineCenter@84(RoutingHeader@1000 : Record 99000763;WorkCenterNo@1002 : Code[20]);
    VAR
      MachineCenter@1001 : Record 99000758;
      RoutingLine@1003 : Record 99000764;
    BEGIN
      UpdateRoutingHeaderStatus(RoutingHeader,RoutingHeader.Status::New);
      LibraryManufacturing.CreateMachineCenterWithCalendar(MachineCenter,WorkCenterNo,LibraryRandom.RandInt(5));
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'',LibraryUtility.GenerateGUID,RoutingLine.Type::"Machine Center",MachineCenter."No.");
      RoutingLine.VALIDATE("Setup Time",LibraryRandom.RandInt(5));
      RoutingLine.VALIDATE("Run Time",LibraryRandom.RandInt(5));
      RoutingLine.VALIDATE("Concurrent Capacities",1);
      RoutingLine.MODIFY(TRUE);

      UpdateRoutingHeaderStatus(RoutingHeader,RoutingHeader.Status::Certified);
    END;

    LOCAL PROCEDURE CarryOutAMSubcontractWksh@50(No@1002 : Code[20];ItemNo@1003 : Code[20]);
    VAR
      GeneralPostingSetup@1006 : Record 252;
      WorkCenter@1001 : Record 99000754;
      RequisitionLine@1000 : Record 246;
      VATPostingSetup@1004 : Record 325;
      Vendor@1005 : Record 23;
    BEGIN
      LibraryERM.FindGeneralPostingSetupInvtFull(GeneralPostingSetup);
      WorkCenter.SETRANGE("No.",No);
      LibraryManufacturing.CalculateSubcontractOrder(WorkCenter);
      RequisitionLine.SETRANGE("No.",ItemNo);
      RequisitionLine.FINDFIRST;
      RequisitionLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10,2));  // take random Direct Cost.
      RequisitionLine.VALIDATE("Gen. Business Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      RequisitionLine.MODIFY(TRUE);
      Vendor.GET(RequisitionLine."Vendor No.");
      LibraryPurchase.CreateSetupForSubContracting(Vendor);
      VATPostingSetup.SETRANGE("VAT Bus. Posting Group",Vendor."VAT Bus. Posting Group");
      VATPostingSetup.SETRANGE("VAT Prod. Posting Group",'');
      IF NOT VATPostingSetup.FINDFIRST THEN
        LibraryERM.CreateVATPostingSetup(VATPostingSetup,Vendor."VAT Bus. Posting Group",'');
      LibraryPlanning.CarryOutAMSubcontractWksh(RequisitionLine);
    END;

    LOCAL PROCEDURE CreateAndModifyItem@26(VendorNo@1001 : Code[20];FlushingMethod@1003 : Option;ReplenishmentSystem@1002 : Option) : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      Item.GET(CreateItem);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.VALIDATE("Vendor No.",VendorNo);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Flushing Method",FlushingMethod);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateAndModifyVendor@12(CurrencyCode@1001 : Code[10]) : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      Vendor.GET(CreateVendor);
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@65(VAR PurchaseLine@1000 : Record 39;DocumentType@1004 : Option;ItemNo@1003 : Code[20];VariantCode@1001 : Code[10];VendorNo@1006 : Code[20];Quantity@1007 : Decimal;OrderDate@1008 : Date);
    VAR
      PurchaseHeader@1002 : Record 38;
      GLAccount@1011 : Record 15;
      GeneralPostingSetup@1012 : Record 252;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      PurchaseHeader.VALIDATE("Order Date",OrderDate);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Variant Code",VariantCode);
      PurchaseLine.MODIFY(TRUE);

      // Update 'Invt. Accrual Acc. (Interim)' in General Posting Setup.
      LibraryERM.FindGLAccount(GLAccount);
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      GeneralPostingSetup.VALIDATE("Invt. Accrual Acc. (Interim)",GLAccount."No.");
      GeneralPostingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingLine@165(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;CenterNo@1002 : Code[20]);
    VAR
      OperationNo@1001 : Code[10];
    BEGIN
      // Random value used so that the Next Operation No is greater than the previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));
      LibraryManufacturing.CreateRoutingLineSetup(
        RoutingLine,RoutingHeader,CenterNo,OperationNo,LibraryRandom.RandInt(5),LibraryRandom.RandInt(5));
    END;

    LOCAL PROCEDURE CreateRoutingSetup@166(WorkCenterNo@1001 : Code[20];RoutingLinkCode@1000 : Code[10]) : Code[20];
    VAR
      RoutingHeader@1002 : Record 99000763;
      RoutingLine@1004 : Record 99000764;
    BEGIN
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,WorkCenterNo);
      RoutingLine.VALIDATE("Routing Link Code",RoutingLinkCode);
      RoutingLine.MODIFY(TRUE);
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
      EXIT(RoutingHeader."No.");
    END;

    LOCAL PROCEDURE CreateSalesDocument@87(VAR SalesLine@1003 : Record 37;DocumentType@1007 : Option;ItemNo@1004 : Code[20];VariantCode@1002 : Code[10];Quantity@1001 : Decimal);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandInt(10));  // Take random for Unit Price.
      SalesLine.VALIDATE("Variant Code",VariantCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendor@11() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateWarehouseLocation@44(VAR Bin@1002 : ARRAY [2] OF Record 7354) : Code[10];
    VAR
      Location@1000 : Record 14;
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateLocation(Location);

      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.VALIDATE("Require Put-away",TRUE);
      Location.VALIDATE("Require Pick",TRUE);
      Location.VALIDATE("Require Receive",TRUE);
      Location.VALIDATE("Require Shipment",TRUE);
      Location.MODIFY(TRUE);

      LibraryWarehouse.CreateBin(Bin[1],Location.Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin[1].FIELDNO(Code),DATABASE::Bin),1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin[1].FIELDNO(Code))),'','');
      LibraryWarehouse.CreateBin(Bin[2],Location.Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin[2].FIELDNO(Code),DATABASE::Bin),1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin[2].FIELDNO(Code))),'','');
      WarehouseEmployee.DELETEALL(TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,TRUE);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE UpdateInventoryPostingSetup@10(LocationCode@1004 : Code[10];InventoryPostingGroupCode@1003 : Code[10]);
    VAR
      InventoryPostingSetup@1000 : Record 5813;
      RefInventoryPostingSetup@1001 : Record 5813;
    BEGIN
      RefInventoryPostingSetup.SETFILTER("Inventory Account",'<>%1','');
      RefInventoryPostingSetup.SETFILTER("WIP Account",'<>%1','');
      RefInventoryPostingSetup.FINDFIRST;
      InventoryPostingSetup.INIT;
      InventoryPostingSetup.VALIDATE("Location Code",LocationCode);
      InventoryPostingSetup.VALIDATE("Invt. Posting Group Code",InventoryPostingGroupCode);
      IF NOT InventoryPostingSetup.INSERT(TRUE) THEN;
      InventoryPostingSetup."Inventory Account" := RefInventoryPostingSetup."Inventory Account";
      InventoryPostingSetup."WIP Account" := RefInventoryPostingSetup."WIP Account";
      InventoryPostingSetup.MODIFY;
    END;

    LOCAL PROCEDURE FindAndUpdateProdOrderRoutingLine@111(VAR ProdOrderRoutingLine@1001 : Record 5409;ProdOrderNo@1000 : Code[20]);
    BEGIN
      FindProdOrderRountingLine(ProdOrderRoutingLine,ProdOrderNo,ProdOrderRoutingLine.Type::"Machine Center");
      ProdOrderRoutingLine.VALIDATE("Send-Ahead Quantity",LibraryRandom.RandInt(10));  // Take random to update Quantity.
    END;

    LOCAL PROCEDURE FindPurchLineAndPostPurchOrder@91(VAR PurchaseLine@1000 : Record 39;ItemNo@1001 : Code[20]);
    VAR
      PurchaseHeader@1002 : Record 38;
      GeneralPostingSetup@1003 : Record 252;
    BEGIN
      FindPurchaseLine(PurchaseLine,ItemNo);
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      PurchaseHeader.MODIFY(TRUE);
      IF NOT GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group") THEN
        LibraryERM.CreateGeneralPostingSetup(
          GeneralPostingSetup,PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE FindCurrencyExchangeRate@81(VAR CurrencyExchangeRate@1000 : Record 330;CurrencyCode@1001 : Code[10]);
    BEGIN
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
    END;

    LOCAL PROCEDURE FindCapacityLedgerEntry@59(VAR CapacityLedgerEntry@1000 : Record 5832;OrderNo@1001 : Code[20]);
    BEGIN
      CapacityLedgerEntry.SETRANGE("Order Type",CapacityLedgerEntry."Order Type"::Production);
      CapacityLedgerEntry.SETRANGE("Order No.",OrderNo);
      CapacityLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseLine@80(VAR PurchaseLine@1000 : Record 39;No@1001 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("No.",No);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindProductionOrderLine@37(ProdOrderNo@1000 : Code[20];Status@1001 : Option) : Integer;
    VAR
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderLine.FINDFIRST;
      EXIT(ProdOrderLine."Line No.");
    END;

    LOCAL PROCEDURE FindProdOrderRountingLine@89(VAR ProdOrderRoutingLine@1002 : Record 5409;ProdOrderNo@1000 : Code[20];Type@1001 : Option);
    BEGIN
      ProdOrderRoutingLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderRoutingLine.SETRANGE(Type,Type);
      ProdOrderRoutingLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindLastOperationNo@170(RoutingNo@1000 : Code[20]) : Code[10];
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      IF RoutingLine.FINDLAST THEN
        EXIT(RoutingLine."Operation No.");
      EXIT('');
    END;

    LOCAL PROCEDURE FindValueEntry@52(VAR ValueEntry@1000 : Record 5802;ItemLedgerEntryType@1002 : Option;DocumentNo@1001 : Code[20]);
    BEGIN
      ValueEntry.SETRANGE("Item Ledger Entry Type",ItemLedgerEntryType);
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE PostPurchaseDocument@63(PurchaseLine@1000 : Record 39;Invoice@1002 : Boolean) : Code[20];
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,Invoice));
    END;

    LOCAL PROCEDURE SelectAndClearItemJournalBatch@95(VAR ItemJournalBatch@1000 : Record 233;TemplateType@1002 : Option);
    VAR
      ItemJournalTemplate@1001 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,TemplateType);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE SetupProductionOrder@51(VAR ProductionOrder@1002 : Record 5405;Bin@1007 : Record 7354;ItemNo@1000 : Code[20]);
    VAR
      Item@1003 : Record 27;
      ProdOrderComponent@1001 : Record 5407;
    BEGIN
      Item.GET(CreateAndModifyItem('',Item."Flushing Method"::Manual,Item."Replenishment System"::"Prod. Order"));
      UpdateInventoryPostingSetup(Bin."Location Code",Item."Inventory Posting Group");
      CreateAndUpdateProductionBOM(Item,ItemNo);
      CreateAndRefreshProdOrder(ProductionOrder,Item."No.",Bin."Location Code",1);  // Taken 1 for Quantity as value is important.
      ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderComponent.MODIFYALL("Bin Code",Bin.Code);
    END;

    LOCAL PROCEDURE UpdateItem@13(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRoutingHeaderStatus@90(VAR RoutingHeader@1000 : Record 99000763;Status@1001 : Option);
    BEGIN
      RoutingHeader.VALIDATE(Status,Status);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesReceivableSetup@48(ExactCostReversingMandatory@1001 : Boolean);
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Exact Cost Reversing Mandatory",ExactCostReversingMandatory);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVariantOnItemJnlLine@72(VAR ItemJournalLine@1000 : Record 83);
    BEGIN
      ItemJournalLine.VALIDATE("Variant Code",'');
      ItemJournalLine.MODIFY(TRUE);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@25(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@21(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE PickSelectionPageHandler@1(VAR PickSelection@1000 : Page 7343;VAR Response@1001 : Action);
    VAR
      WhsePickRequest@1002 : Record 7325;
    BEGIN
      WhsePickRequest.SETRANGE("Location Code",PickRequestLocationCode);
      WhsePickRequest.SETRANGE("Document No.",PickRequestDocumentNo);
      WhsePickRequest.FINDFIRST;
      PickSelection.SETRECORD(WhsePickRequest);
      Response := ACTION::LookupOK;
    END;

    BEGIN
    {
      // [FEATURE] [SCM]
      Unsupported version tags:
      NO: Unable to Execute (TFS ID: 48599)

      1. Verify Picking Request is being available on Pick Worksheet for new Component linewhen  Prod. Order Components has been consumed, the Remaining Qty for all Lines will be Zero.
      2. Verify Value Entries for an Item which have zero quantity after run the Adjust Cost Item Entries.
      3. Verify Unit Cost(LCY) on Purchase Line when Subcontracting Purchase Order is created with Foreign Currency.
      4. Verify Capacity Ledger Entries when Subcontracting Purchase Order is created and posted with Foreign Currency.
      5. Verify error message while changing Item Costing Method using Apply Template when Item Ledger Entries exists.
      6. Verify Item Journal Line Description is updated after deleting Variant Code.
      7. Verify that if Prod. Order Components has been consumed, the Remaining Qty for all Lines will be 0 and a Picking Request is being available on Pick Worksheet for new Component line if added.

      Covers Test cases: for WI - 315355
      ------------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                                 TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------------
      PickReqAvailableAfterPostConsumpJnl                                                                                                287476
      ValueEntryAfterInventoryRemainsZero                                                                                                275363
      UnitCostLCYOnPurchOrderWithCurrency, CapacityLedgerEntryAfterPostPurchOrder                                                        264147

      Covers Test cases: for WI - 315128
      ------------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                                 TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------------
      UpdateItemJnlDescAfterDeleteVariant                                                                                                270910
      StartDateAfterUpdateSendAheadQty                                                                                                   263746
    }
    END.
  }
}

