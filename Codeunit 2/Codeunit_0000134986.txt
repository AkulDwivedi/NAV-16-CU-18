OBJECT Codeunit 134986 ERM Financial Reports II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1006 : Codeunit 131300;
      LibraryRandom@1003 : Codeunit 130440;
      Assert@1001 : Codeunit 130000;
      LibrarySales@1014 : Codeunit 130509;
      ValidationErr@1005 : TextConst 'ENU=%1 must be %2 in Report.';
      WarningMsg@1007 : TextConst 'ENU=Statement Ending Balance is not equal to Total Balance.';
      HeaderDimensionTxt@1009 : TextConst 'ENU=%1 - %2';
      PostingGroupErr@1010 : TextConst 'ENU=The Customer Posting Group does not exist.';
      NoSeriesGapWarningMsg@1012 : TextConst 'ENU=There is a gap in the number series.';
      PostingDateWarningMsg@1011 : TextConst 'ENU=The documents are not listed according to Posting Date because they were not entered in that order.';
      NoSeriesWarningMsg@1013 : TextConst 'ENU=No number series has been used for the following entries:';
      NoSeriesInformationMsg@1015 : TextConst '@@@="%1=Field Value;%2=Field Value;";ENU=The number series %1 %2 has been used for the following entries:';
      TotalTxt@1017 : TextConst 'ENU=Total %1';
      AddnlFeeLabelTxt@1018 : TextConst 'ENU=Additional Fee';
      AmtInclVATLabelTxt@1019 : TextConst 'ENU=Amount Including VAT';
      VATBaseLabelTxt@1020 : TextConst 'ENU=VAT Base';
      VATAmtSpecLabelTxt@1021 : TextConst 'ENU=VAT Amount Specification';
      VATAmtSpecLCYLbl@1016 : TextConst 'ENU=VAT Amount Specification in GBP';
      VATAmtLbl@1024 : TextConst 'ENU=VAT Amount';
      CustomerNotFoundErr@1022 : TextConst 'ENU=%1 must be specified.';
      ErrorMsg@1025 : TextConst 'ENU=Specify a filter for the Date Filter field in the G/L Account table.';
      ValidateErr@1023 : TextConst 'ENU=Error must be Same.';
      LibraryVariableStorage@1027 : Codeunit 131004;
      LibraryReportDataset@1028 : Codeunit 131007;
      RowNotFoundErr@1031 : TextConst 'ENU=There is no dataset row corresponding to Element Name %1 with value %2.';
      ValueNotFoundErr@1029 : TextConst 'ENU=Value %1 not found in report.';
      IncorrectValueMsg@1030 : TextConst 'ENU=Value for field %1 is incorrect.';
      EmptyDatasetErr@1000 : TextConst 'ENU=Dataset does not contain any rows.';
      BlankLinesQtyErr@1002 : TextConst 'ENU=Wrong blank lines quantity in dataset.';
      AdjustExchangeErr@1004 : TextConst 'ENU=Bank Account Ledger Entry should exist.';
      LibraryUTUtility@1008 : Codeunit 131008;
      ReminderReportLastLineErr@1032 : TextConst 'ENU=Last non-empty Reminder report line should be "Please remit your payment..."';
      LibraryJournals@1033 : Codeunit 131306;
      OriginalWorkdate@1040 : Date;
      GenJnlTemplateNameTok@1034 : TextConst 'ENU=JnlTemplateName_GenJnlBatch';
      GenJnlBatchNameTok@1035 : TextConst 'ENU=JnlName_GenJnlBatch';
      WarningCaptionTok@1036 : TextConst 'ENU=WarningCaption';
      ErrorTextNumberTok@1037 : TextConst 'ENU=ErrorTextNumber';
      WarningErrorErr@1038 : TextConst 'ENU=Warning and error text should be empty.';
      LineNoTok@1039 : TextConst 'ENU=LineNo_GenJnlLine';

    [Test]
    [HandlerFunctions(RHBankaccRecon)]
    PROCEDURE BankAccReconTestReport@5();
    VAR
      GenJournalLine@1006 : Record 81;
      StatementNo@1001 : Code[20];
    BEGIN
      // Test Bank Account Reconciliation Test Report.

      // Setup.
      Initialize;
      CreateAndPostBankAccountEntry(GenJournalLine);
      StatementNo := CreateBankAccReconciliation(GenJournalLine."Bal. Account No.");

      // Exercise: Save Bank Reconciliation Test Report.
      LibraryVariableStorage.Enqueue(GenJournalLine."Bal. Account No.");
      LibraryVariableStorage.Enqueue(StatementNo);

      COMMIT;
      REPORT.RUN(REPORT::"Bank Acc. Recon. - Test");

      // Verify.
      VerifyBankAccReconTest(GenJournalLine);
    END;

    [Test]
    [HandlerFunctions(RHBankAccountCheckDetails)]
    PROCEDURE BankAccountCheckDetailsReport@1();
    VAR
      GenJournalLine@1001 : Record 81;
    BEGIN
      // Test Bank Account Check Details Report.

      // Setup.
      Initialize;
      CreateAndPostBankAccountEntry(GenJournalLine);

      // Exercise: Save Bank Account Check Details Report.
      LibraryVariableStorage.Enqueue(GenJournalLine."Bal. Account No.");

      COMMIT;
      REPORT.RUN(REPORT::"Bank Account - Check Details");

      // Verify.
      VerifyBankAccountCheckDetails(GenJournalLine);
    END;

    [Test]
    [HandlerFunctions(RHReminderTest)]
    PROCEDURE ReminderTestError@9();
    VAR
      ReminderHeader@1007 : Record 295;
    BEGIN
      // Check Error Message while Saving Reminder Test Report.

      // Setup.
      Initialize;
      LibraryERM.CreateReminderHeader(ReminderHeader);

      // Exercise: Save Reminder Test Report without any option.
      LibraryVariableStorage.Enqueue(ReminderHeader."No.");
      LibraryVariableStorage.Enqueue(FALSE);

      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Reminder - Test");

      // Verify: Verify Error Message.
      Assert.ExpectedError(PostingGroupErr);
    END;

    [Test]
    [HandlerFunctions(RHReminderTest)]
    PROCEDURE ReminderTest@7();
    VAR
      GenJournalLine@1002 : Record 81;
      ReminderNo@1003 : Code[20];
    BEGIN
      // Check Reminder Test Report.

      // Setup. Create Reminder for Customer. Take Random Invoice Amount.
      Initialize;
      CreateAndPostGenJournalLine(GenJournalLine,CreateCustomer,LibraryRandom.RandDec(1000,2));
      ReminderNo := CreateReminderWithGivenDocNo(GenJournalLine."Document No.",GenJournalLine."Account No.");

      // Exercise: Save Reminder Test Report with Show Dimensions FALSE.
      LibraryVariableStorage.Enqueue(ReminderNo);
      LibraryVariableStorage.Enqueue(FALSE);

      COMMIT;
      REPORT.RUN(REPORT::"Reminder - Test");

      // Verify.
      VerifyReminderTest(GenJournalLine,ReminderNo);
    END;

    [Test]
    [HandlerFunctions(RHReminderTest)]
    PROCEDURE ReminderTestWithDimension@10();
    VAR
      GenJournalLine@1008 : Record 81;
      DimensionValue@1009 : Record 349;
      ReminderNo@1003 : Code[20];
    BEGIN
      // Check Reminder Test Report with Show Dimensions Option.

      // Setup. Create Reminder for Customer with Dimensions attached. Take Random Invoice Amount.
      Initialize;
      CreateAndPostGenJournalLine(GenJournalLine,CreateCustomerWithDimension(DimensionValue),LibraryRandom.RandDec(1000,2));
      ReminderNo := CreateReminderWithGivenDocNo(GenJournalLine."Document No.",GenJournalLine."Account No.");

      // Exercise: Save Reminder Test Report with Show Dimensions TRUE.
      LibraryVariableStorage.Enqueue(ReminderNo);
      LibraryVariableStorage.Enqueue(TRUE);

      COMMIT;
      REPORT.RUN(REPORT::"Reminder - Test");

      // Verify.
      VerifyDimensionsOnReport(DimensionValue);
    END;

    [Test]
    [HandlerFunctions(RHReminderNos)]
    PROCEDURE ReminderNos@20();
    VAR
      GenJournalLine@1009 : Record 81;
      ReminderNo@1003 : Code[20];
      IssuedReminderNo@1006 : Code[20];
    BEGIN
      // Check Reminder Nos. Report.

      // Setup: Make Invoice Entry for Customer with Random Amount. Create and Issue Reminder for the posted entry.
      Initialize;
      CreateAndPostGenJournalLine(GenJournalLine,CreateCustomer,LibraryRandom.RandDec(1000,2));
      ReminderNo := CreateReminderWithGivenDocNo(GenJournalLine."Document No.",GenJournalLine."Account No.");
      IssuedReminderNo := IssueReminderAndGetIssuedNo(ReminderNo);

      // Exercise.
      RunReportReminderNos(IssuedReminderNo,IssuedReminderNo);

      // Verify.
      VerifyReminderNos(IssuedReminderNo);
    END;

    [Test]
    [HandlerFunctions(RHReminderNos)]
    PROCEDURE ReminderNosPostingDateWarning@31();
    VAR
      GenJournalLine@1000 : Record 81;
      ReminderNo@1001 : Code[20];
      IssuedReminderNo@1002 : Code[20];
      IssuedReminderNo2@1003 : Code[20];
    BEGIN
      // Check Posting Date Warning on Reminder Nos. Report.

      // Setup: Make Invoice Entry for Customer. Post another Entry on earlier Posting Date for Customer. Take Random Date and Amount.
      Initialize;
      CreateAndPostGenJournalLine(GenJournalLine,CreateCustomer,LibraryRandom.RandDec(1000,2));
      ReminderNo := CreateReminderWithGivenDocNo(GenJournalLine."Document No.",GenJournalLine."Account No.");
      IssuedReminderNo := IssueReminderAndGetIssuedNo(ReminderNo);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",GenJournalLine."Document Type",
        GenJournalLine."Account Type"::Customer,GenJournalLine."Account No.",GenJournalLine.Amount);
      GenJournalLine.VALIDATE("Posting Date",CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE));
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      ReminderNo := CreateReminderWithGivenDocNo(GenJournalLine."Document No.",GenJournalLine."Account No.");
      IssuedReminderNo2 := IssueReminderAndGetIssuedNo(ReminderNo);

      // Exercise.
      RunReportReminderNos(IssuedReminderNo,IssuedReminderNo2);

      // Verify: Verify Posting Date Warning on Report.
      VerifyWarningOnReport(IssuedReminderNo2,'Issued_Reminder_Header_No_',PostingDateWarningMsg);
    END;

    [Test]
    [HandlerFunctions(RHReminderNos)]
    PROCEDURE ReminderNosNoSeriesWarning@22();
    VAR
      GenJournalLine@1009 : Record 81;
      ReminderNo@1003 : Code[20];
    BEGIN
      // Check No. Series Warning on Reminder Nos. Report.

      // Setup: Create Reminder with No No. Series for Customer. Take Random Invoice Amount.
      Initialize;
      CreateAndPostGenJournalLine(GenJournalLine,CreateCustomer,LibraryRandom.RandDec(1000,2));
      ReminderNo := CreateReminderWithGivenDocNo(GenJournalLine."Document No.",GenJournalLine."Account No.");
      UpdateNoSeriesAndIssueReminder(ReminderNo);

      // Exercise.
      RunReportReminderNos(ReminderNo,ReminderNo);

      // Verify: Verify No. Series Warning on Report.
      VerifyWarningOnReport(ReminderNo,'Issued_Reminder_Header_No_',NoSeriesWarningMsg);
    END;

    [Test]
    [HandlerFunctions(RHReminderNos)]
    PROCEDURE ReminderNosNoSeriesGapWarning@12();
    VAR
      GenJournalLine@1009 : Record 81;
      ReminderNo@1003 : Code[20];
      IssuedReminderNo@1006 : Code[20];
    BEGIN
      // Check No. Series Gap Warning on Reminder Nos. Report.

      // Setup: Create two Reminders with different Issuing No. Series. Take Random Invoice Amount.
      Initialize;
      CreateAndPostGenJournalLine(GenJournalLine,CreateCustomer,LibraryRandom.RandDec(1000,2));
      ReminderNo := CreateReminderWithGivenDocNo(GenJournalLine."Document No.",GenJournalLine."Account No.");
      IssuedReminderNo := IssueReminderAndGetIssuedNo(ReminderNo);
      CreateAndPostGenJournalLine(GenJournalLine,GenJournalLine."Account No.",LibraryRandom.RandDec(1000,2));
      ReminderNo := CreateReminderWithGivenDocNo(GenJournalLine."Document No.",GenJournalLine."Account No.");
      UpdateAndIssueReminder(ReminderNo);

      // Exercise.
      RunReportReminderNos(IssuedReminderNo,ReminderNo);

      // Verify: Verify No. Series Gap Warning on Reminder Nos. Report.
      VerifyWarningOnReport(IssuedReminderNo,'Issued_Reminder_Header_No_',NoSeriesGapWarningMsg);
    END;

    [Test]
    [HandlerFunctions(RHFinanceChargeMemoNos)]
    PROCEDURE FinChargeMemoNos@29();
    VAR
      GenJournalLine@1001 : Record 81;
      FinChargeMemoNo@1002 : Code[20];
      IssuedFinChargeMemoNo@1003 : Code[20];
    BEGIN
      // Check Finance Charge Memo Nos. Report.

      // Setup: Create and Issue Finance Charge Memo. Take Random value for Invoice Amount.
      Initialize;
      CreateAndPostGenJournalLine(GenJournalLine,CreateCustomer,LibraryRandom.RandDec(1000,2));
      FinChargeMemoNo := CreateSuggestFinanceChargeMemo(GenJournalLine."Account No.",GenJournalLine."Document No.");
      IssuedFinChargeMemoNo := IssueAndGetFinChargeMemoNo(FinChargeMemoNo);

      // Exercise.
      RunReportFinanceChargeMemoNos(IssuedFinChargeMemoNo,IssuedFinChargeMemoNo);

      // Verify.
      VerifyFinanceChargeMemoNos(IssuedFinChargeMemoNo);
    END;

    [Test]
    [HandlerFunctions(RHFinanceChargeMemoNos)]
    PROCEDURE FinChargeMemoNosPostingDate@39();
    VAR
      GenJournalLine@1001 : Record 81;
      FinChargeMemoNo@1002 : Code[20];
      IssuedFinChargeMemoNo@1000 : Code[20];
      IssuedFinChargeMemoNo2@1003 : Code[20];
    BEGIN
      // Check Posting Date Warning on Finance Charge Memo Nos. Report.

      // Setup: Create and Issue two Finance Charge Memos on different Document Dates. Take last Document Date earlier than
      // Previous Document Date using Random. Take Random value for Invoice Amount.
      Initialize;
      CreateAndPostGenJournalLine(GenJournalLine,CreateCustomer,LibraryRandom.RandDec(1000,2));
      FinChargeMemoNo := CreateSuggestFinanceChargeMemo(GenJournalLine."Account No.",GenJournalLine."Document No.");
      IssuedFinChargeMemoNo := IssueAndGetFinChargeMemoNo(FinChargeMemoNo);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",GenJournalLine."Document Type",
        GenJournalLine."Account Type"::Customer,CreateCustomer,GenJournalLine.Amount);
      GenJournalLine.VALIDATE("Posting Date",CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE));
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      FinChargeMemoNo := CreateSuggestFinanceChargeMemo(GenJournalLine."Account No.",GenJournalLine."Document No.");
      IssuedFinChargeMemoNo2 := IssueAndGetFinChargeMemoNo(FinChargeMemoNo);

      // Exercise.
      RunReportFinanceChargeMemoNos(IssuedFinChargeMemoNo,IssuedFinChargeMemoNo2);

      // Verify: Verify Posting Date Warning on Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number_',FORMAT(PostingDateWarningMsg));
    END;

    [Test]
    [HandlerFunctions(RHFinanceChargeMemoNos)]
    PROCEDURE FinChargeMemoNosNoSeries@38();
    VAR
      GenJournalLine@1001 : Record 81;
      FinChargeMemoNo@1002 : Code[20];
      IssuedFinChargeMemoNo@1000 : Code[20];
    BEGIN
      // Check No. Series Warning on Finance Charge Memo Nos. Report.

      // Setup: Create and Issue Finance Charge Memo for a Customer with Blank No. Series. Use Random value for Invoice Amount.
      Initialize;
      CreateAndPostGenJournalLine(GenJournalLine,CreateCustomer,LibraryRandom.RandDec(1000,2));
      FinChargeMemoNo := CreateSuggestFinanceChargeMemo(GenJournalLine."Account No.",GenJournalLine."Document No.");
      IssuedFinChargeMemoNo := UpdateNoSeriesInFinChargeMemo(FinChargeMemoNo);

      // Exercise.
      RunReportFinanceChargeMemoNos(IssuedFinChargeMemoNo,IssuedFinChargeMemoNo);

      // Verify: Verify No. Series warning on Finance Charge Memo Nos. Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number_',FORMAT(NoSeriesWarningMsg));
    END;

    [Test]
    [HandlerFunctions(RHFinanceChargeMemoNos)]
    PROCEDURE FinChargeMemoNosNoSeriesGap@26();
    VAR
      GenJournalLine@1000 : Record 81;
      FinChargeMemoNo@1001 : Code[20];
      IssuedFinChargeMemoNo@1002 : Code[20];
    BEGIN
      // Check No. Series Gap Warning on Finance Charge Memo Nos. Report.

      // Setup: Create and Issue Two Finance Charge Memo with different Issuing No. Series. Take Random value for Invoice Amount.
      Initialize;
      CreateAndPostGenJournalLine(GenJournalLine,CreateCustomer,LibraryRandom.RandDec(1000,2));
      FinChargeMemoNo := CreateSuggestFinanceChargeMemo(GenJournalLine."Account No.",GenJournalLine."Document No.");
      IssuedFinChargeMemoNo := IssueAndGetFinChargeMemoNo(FinChargeMemoNo);

      CreateAndPostGenJournalLine(GenJournalLine,CreateCustomer,LibraryRandom.RandDec(1000,2));
      FinChargeMemoNo := CreateSuggestFinanceChargeMemo(GenJournalLine."Account No.",GenJournalLine."Document No.");
      UpdateIssuingNoSeries(FinChargeMemoNo);

      // Exercise:
      RunReportFinanceChargeMemoNos(IssuedFinChargeMemoNo,FinChargeMemoNo);

      // Verify: Verify No. Series Gap Warning on Finance Charge Memo Nos. Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number_',FORMAT(NoSeriesGapWarningMsg));
    END;

    [Test]
    [HandlerFunctions(RHFinanceChargeMemo)]
    PROCEDURE FinanceChargeMemo@42();
    VAR
      GenJournalLine@1001 : Record 81;
      IssuedFinChargeMemoNo@1000 : Code[20];
      FinChargeMemoNo@1002 : Code[20];
    BEGIN
      // Check Finance Charge Memo Report.

      // Setup: Create and Issue Finance Charge Memo for a Customer. Take Random value for Invoice Amount.
      Initialize;
      CreateAndPostGenJournalLine(GenJournalLine,CreateCustomer,LibraryRandom.RandDec(1000,2));
      FinChargeMemoNo := CreateSuggestFinanceChargeMemo(GenJournalLine."Account No.",GenJournalLine."Document No.");
      IssuedFinChargeMemoNo := IssueAndGetFinChargeMemoNo(FinChargeMemoNo);

      // Exercise: Save Finance Charge Memo Report with Show Internal Information and Interaction Log as FALSE.
      RunReportFinanceChargeMemo(IssuedFinChargeMemoNo,FALSE,FALSE);

      // Verify.
      VerifyFinanceChargeMemo(IssuedFinChargeMemoNo);
    END;

    [Test]
    [HandlerFunctions(RHFinanceChargeMemo)]
    PROCEDURE FinanceChargeMemoInternalInfo@47();
    VAR
      GenJournalLine@1001 : Record 81;
      DimensionValue@1004 : Record 349;
      FinChargeMemoNo@1002 : Code[20];
      IssuedFinChargeMemoNo@1003 : Code[20];
    BEGIN
      // Check Dimension Values on saved Finance Charge Memo Report with Show Internal Information TRUE.

      // Setup: Create and Issue Finance Charge Memo for a Customer. Take Random value for Invoice Amount.
      Initialize;
      CreateAndPostGenJournalLine(GenJournalLine,CreateCustomerWithDimension(DimensionValue),LibraryRandom.RandDec(1000,2));
      FinChargeMemoNo := CreateSuggestFinanceChargeMemo(GenJournalLine."Account No.",GenJournalLine."Document No.");
      IssuedFinChargeMemoNo := IssueAndGetFinChargeMemoNo(FinChargeMemoNo);

      // Exercise: Save Finance Charge Memo Report with Show Internal Information as TRUE.
      RunReportFinanceChargeMemo(IssuedFinChargeMemoNo,TRUE,FALSE);

      // Verify:
      VerifyDimensionsOnReport(DimensionValue);
    END;

    [Test]
    [HandlerFunctions(RHFinanceChargeMemo)]
    PROCEDURE FinanceChargeMemoLogEntry@46();
    VAR
      GenJournalLine@1001 : Record 81;
      InteractionLogEntry@1004 : Record 5065;
      FinChargeMemoNo@1002 : Code[20];
      IssuedFinChargeMemoNo@1003 : Code[20];
    BEGIN
      // Check Interaction Log Entry for saved Finance Charge Memo Report with Interaction Log TRUE.

      // Setup: Create and Issue Finance Charge Memo for a Customer. Take Random value for Invoice Amount.
      Initialize;
      CreateAndPostGenJournalLine(GenJournalLine,CreateCustomer,LibraryRandom.RandDec(1000,2));
      FinChargeMemoNo := CreateSuggestFinanceChargeMemo(GenJournalLine."Account No.",GenJournalLine."Document No.");
      IssuedFinChargeMemoNo := IssueAndGetFinChargeMemoNo(FinChargeMemoNo);

      // Exercise: Save Finance Charge Memo Report with Interaction Log as TRUE.
      RunReportFinanceChargeMemo(IssuedFinChargeMemoNo,FALSE,TRUE);

      // Verify.
      VerifyInteractionLogEntry(InteractionLogEntry."Document Type"::"Sales Finance Charge Memo",IssuedFinChargeMemoNo);
    END;

    [Test]
    [HandlerFunctions(RHFinanceChargeMemoTest)]
    PROCEDURE FinanceChargeMemoTest@52();
    VAR
      GenJournalLine@1000 : Record 81;
      FinChargeMemoNo@1002 : Code[20];
    BEGIN
      // Check Finance Charge Memo Test Report.

      // Setup: Create Finance Charge Memo for Customer. Take Random value for Invoice Amount.
      Initialize;
      CreateAndPostGenJournalLine(GenJournalLine,CreateCustomer,LibraryRandom.RandDec(1000,2));
      FinChargeMemoNo := CreateSuggestFinanceChargeMemo(GenJournalLine."Account No.",GenJournalLine."Document No.");

      // Exercise: Save Finance Charge Memo Test Report with Show Dimensions False.
      RunReportFinanceChargeMemoTest(FinChargeMemoNo,FALSE);

      // Verify.
      VerifyFinanceChargeMemoTest(GenJournalLine,FinChargeMemoNo);
    END;

    [Test]
    [HandlerFunctions(RHFinanceChargeMemoTest)]
    PROCEDURE FinanceChargeMemoTestDimension@49();
    VAR
      DimensionValue@1004 : Record 349;
      GenJournalLine@1000 : Record 81;
      FinChargeMemoNo@1002 : Code[20];
    BEGIN
      // Check Finance Charge Memo Test Report with Show Dimensions TRUE.

      // Setup: Suggest Finance Charge Memo for a Customer having Dimension attached. Take Random Invoice Amount.
      Initialize;
      CreateAndPostGenJournalLine(GenJournalLine,CreateCustomerWithDimension(DimensionValue),LibraryRandom.RandDec(1000,2));
      FinChargeMemoNo := CreateSuggestFinanceChargeMemo(GenJournalLine."Account No.",GenJournalLine."Document No.");

      // Exercise: Save Finance Charge Memo Test Report with Show Dimensions TRUE.
      RunReportFinanceChargeMemoTest(FinChargeMemoNo,TRUE);

      // Verify.
      VerifyDimensionsOnReport(DimensionValue);
    END;

    [Test]
    [HandlerFunctions(RHFinanceChargeMemoTest)]
    PROCEDURE FinanceChargeMemoTestWarnings@56();
    VAR
      FinanceChargeMemoHeader@1001 : Record 302;
    BEGIN
      // Check Warnings on Finance Charge Memo Test Report when Customer No. is not present on created Finance Charge Memo.

      // Setup: Create Finance Charge Memo Header with No Customer Attached.
      Initialize;
      LibraryERM.CreateFinanceChargeMemoHeader(FinanceChargeMemoHeader,'');

      // Exercise: Save Finance Charge Memo Test Report with Show Dimensions FALSE.
      RunReportFinanceChargeMemoTest(FinanceChargeMemoHeader."No.",FALSE);

      // Verify: Verify Warnings on Finance Charge Memo Test Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number_',
        STRSUBSTNO(CustomerNotFoundErr,FinanceChargeMemoHeader.FIELDCAPTION("Customer No.")));
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number_',
        STRSUBSTNO(CustomerNotFoundErr,FinanceChargeMemoHeader.FIELDCAPTION("Customer Posting Group")));
    END;

    [Test]
    [HandlerFunctions(RHReceivablesPayables)]
    PROCEDURE ReceivablesPayables@6();
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      PeriodLength@1002 : DateFormula;
    BEGIN
      // Verify Customer Balance, Vendor Balance and Net Change Column values.

      // Setup.
      Initialize;
      EVALUATE(PeriodLength,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>');

      // Exercise: Save Report Receivables Payables.
      RunReportReceivablesPayables(WORKDATE,LibraryRandom.RandInt(5),PeriodLength);

      // Verify: Verify Receivables Payables different Amounts.
      GeneralLedgerSetup.FINDFIRST;
      GeneralLedgerSetup.CALCFIELDS("Cust. Balances Due","Vendor Balances Due");
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('CustBalancesDue_GLSetup',GeneralLedgerSetup."Cust. Balances Due");
      LibraryReportDataset.AssertElementWithValueExists('VenBalancesDue_GLSetup',GeneralLedgerSetup."Vendor Balances Due");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(EmptyDatasetErr);
      GeneralLedgerSetup.SETRANGE("Date Filter",0D,WORKDATE - 1);
      GeneralLedgerSetup.CALCFIELDS("Cust. Balances Due","Vendor Balances Due");
      LibraryReportDataset.AssertCurrentRowValue('BeforeCustBalanceLCY',GeneralLedgerSetup."Cust. Balances Due");
      LibraryReportDataset.AssertCurrentRowValue('BeforeVendorBalanceLCY',GeneralLedgerSetup."Vendor Balances Due");
    END;

    [Test]
    [HandlerFunctions(RHGeneralJournalTest)]
    PROCEDURE GeneralJournalTest@82();
    VAR
      GenJournalLine@1006 : Record 81;
    BEGIN
      // Check General Journal Test Report without Dimension.

      // Setup.
      Initialize;
      CreatePaymentGenLine(GenJournalLine);

      // Exercise: Save General Journal Test Report without Dimension.
      RunReportGeneralJournalTest(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",FALSE);

      // Verify: Verify General Journal Test Report without Dimension.
      VerifyGeneralJournalTest(GenJournalLine);
    END;

    [Test]
    [HandlerFunctions(RHGeneralJournalTest)]
    PROCEDURE GeneralJournalTestDimension@81();
    VAR
      DimensionValue@1008 : Record 349;
      GenJournalLine@1006 : Record 81;
    BEGIN
      // Check General Journal Test Report with Dimension.

      // Setup: Create General Journal Line with Dimension.
      Initialize;
      CreatePaymentGenLine(GenJournalLine);

      // 1 is required to Set Proper General Journal Line Dimension.
      DimensionValue.SETRANGE("Global Dimension No.",1);
      DimensionValue.FINDFIRST;
      GenJournalLine.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);
      GenJournalLine.MODIFY(TRUE);

      // Exercise: Save General Journal Test Report with Dimension.
      RunReportGeneralJournalTest(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",TRUE);

      // Verify: Verify General Journal Test Report with Dimension.
      VerifyGeneralJournalTest(GenJournalLine);
      LibraryReportDataset.Reset;
      LibraryReportDataset.SetRange('DimensionsCaption','Dimensions');
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'DimensionsCaption','Dimensions'));
      LibraryReportDataset.AssertCurrentRowValue(
        'DimText',STRSUBSTNO(HeaderDimensionTxt,DimensionValue."Dimension Code",DimensionValue.Code));
    END;

    [Test]
    [HandlerFunctions(RHTrialBalancePreviousYear)]
    PROCEDURE TrialBalPreviousYearNoOption@80();
    BEGIN
      // Check Trial Balance Previous Year Report without any option selected.

      // Setup.
      Initialize;

      // Exercise.
      ASSERTERROR RunReportTrialBalancePreviousYear('',0D);

      // Verify: Verify Error Raised during Save the Report.
      Assert.AreEqual(STRSUBSTNO(ErrorMsg),GETLASTERRORTEXT,ValidateErr);
    END;

    [Test]
    [HandlerFunctions(RHTrialBalancePreviousYear)]
    PROCEDURE TrialBalPreviousYearGLAcc@79();
    VAR
      GLAccount@1005 : Record 15;
      GenJournalLine@1006 : Record 81;
      FiscalYearStartDate@1004 : Date;
      FiscalYearEndDate@1007 : Date;
      LastYearStartDate@1009 : Date;
      LastYearEndDate@1010 : Date;
      FiscalYearBalance@1011 : Decimal;
      FiscalYearNetChange@1012 : Decimal;
      NetChangeIncreasePct@1015 : Decimal;
      BalanceIncreasePct@1016 : Decimal;
    BEGIN
      // Check Trial Balance Previous Year for GL Account.

      // Setup.
      Initialize;
      WORKDATE := CALCDATE('<+1Y>',WORKDATE);
      PostGenLinesCustomPostingDate(GenJournalLine);

      // Exercise: Save Trial Balance Previous Year Report.
      RunReportTrialBalancePreviousYear(GenJournalLine."Account No.",WORKDATE);

      // Below Customized Formula is required as per Report Requirement.
      FindGLAccount(GLAccount,GenJournalLine."Account No.",WORKDATE,WORKDATE);
      FiscalYearStartDate := GLAccount.GETRANGEMIN("Date Filter");
      FiscalYearEndDate := GLAccount.GETRANGEMAX("Date Filter");
      LastYearStartDate := CALCDATE('<-1Y>',NORMALDATE(FiscalYearStartDate) + 1) - 1;
      LastYearEndDate := CALCDATE('<-1Y>',NORMALDATE(FiscalYearEndDate) + 1) - 1;
      IF FiscalYearStartDate <> NORMALDATE(FiscalYearStartDate) THEN
        LastYearStartDate := CLOSINGDATE(LastYearStartDate);
      IF FiscalYearEndDate <> NORMALDATE(FiscalYearEndDate) THEN
        LastYearEndDate := CLOSINGDATE(LastYearEndDate);

      FindGLAccount(GLAccount,GenJournalLine."Account No.",FiscalYearStartDate,FiscalYearEndDate);
      GLAccount.CALCFIELDS("Net Change","Balance at Date");
      FiscalYearBalance := GLAccount."Balance at Date";
      FiscalYearNetChange := GLAccount."Net Change";
      FindGLAccount(GLAccount,GenJournalLine."Account No.",LastYearStartDate,LastYearEndDate);
      GLAccount.CALCFIELDS("Net Change","Balance at Date");
      NetChangeIncreasePct := ROUND(FiscalYearNetChange / GLAccount."Net Change" * 100,0.1);
      BalanceIncreasePct := ROUND(FiscalYearBalance / GLAccount."Balance at Date" * 100,0.1);

      // Verify: Verify Saved Report Data.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_GLAccount',GenJournalLine."Account No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'No_GLAccount',GenJournalLine."Account No."));
      LibraryReportDataset.AssertCurrentRowValue('FiscalYearNetChange',FiscalYearNetChange);
      LibraryReportDataset.AssertCurrentRowValue('NetChangeIncreasePct',NetChangeIncreasePct);
      LibraryReportDataset.AssertCurrentRowValue('LastYearNetChange',GLAccount."Net Change");
      LibraryReportDataset.AssertCurrentRowValue('BalanceIncreasePct',BalanceIncreasePct);
      LibraryReportDataset.AssertCurrentRowValue('LastYearBalance',GLAccount."Balance at Date");
    END;

    [Test]
    [HandlerFunctions(RHTrialBalancePreviousYear)]
    PROCEDURE TrialBalancePreviousYear_GLAccountWithBlankLines_BlankLinesExistsInDataset@87();
    BEGIN
      VerifyTrialBalancePreviousYearReportWithBlankLines(LibraryRandom.RandInt(5) + 1);
    END;

    [Test]
    [HandlerFunctions(RHTrialBalancePreviousYear)]
    PROCEDURE TrialBalancePreviousYear_GLAccountWithBlankLine_OnlyOneBlankLineExistsInDataset@119();
    BEGIN
      VerifyTrialBalancePreviousYearReportWithBlankLines(1);
    END;

    [Test]
    [HandlerFunctions(RHTrialBalancePreviousYear)]
    PROCEDURE TrialBalancePreviousYear_GLAccountWithNoBlankLines_NoBlankLinesExistsInDataset@120();
    BEGIN
      VerifyTrialBalancePreviousYearReportWithBlankLines(0);
    END;

    [Test]
    [HandlerFunctions(RHGeneralJournalTest)]
    PROCEDURE GeneralJournalTestWithCustomerInvoice@44();
    VAR
      GLAccount@1002 : Record 15;
      GenJournalLine@1006 : Record 81;
      GenJournalBatch@1000 : Record 232;
    BEGIN
      // Check General Journal Test Report for Reconciliation related values.

      // Setup: Create Gen. Journal Line for Customer with Random Amount.
      Initialize;
      ClearGeneralJournalLines(GenJournalBatch);
      GLAccount.GET(GenJournalBatch."Bal. Account No.");
      GLAccount.VALIDATE("Reconciliation Account",TRUE);
      GLAccount.MODIFY(TRUE);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,CreateCustomer,LibraryRandom.RandDec(1000,2));

      // Exercise: Save General Journal Test Report without Dimension.
      RunReportGeneralJournalTest(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",FALSE);

      // Verify: Verify General Journal Test Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Gen__Journal_Line__Bal__Account_No__',GenJournalLine."Bal. Account No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'Gen__Journal_Line__Bal__Account_No__',GenJournalLine."Bal. Account No."));
      LibraryReportDataset.AssertCurrentRowValue('Gen__Journal_Line_Amount',GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(RHReminder)]
    PROCEDURE ReminderReport@65();
    VAR
      GenJournalLine@1009 : Record 81;
      ReminderNo@1003 : Code[20];
      IssuedReminderNo@1006 : Code[20];
    BEGIN
      // Check Reminder Report.

      // Setup: Create and post General Journal Line, Create and Issue Reminder.
      Initialize;
      CreateAndPostGenJournalLine(GenJournalLine,CreateCustomer,LibraryRandom.RandDec(1000,2));  // Using Random value for Amount.
      ReminderNo := CreateReminderWithGivenDocNo(GenJournalLine."Document No.",GenJournalLine."Account No.");
      IssuedReminderNo := IssueReminderAndGetIssuedNo(ReminderNo);

      // Exercise.
      RunReportReminder(IssuedReminderNo);

      // Verify.
      VerifyReminderReport(IssuedReminderNo);
    END;

    [Test]
    PROCEDURE InterestAmountOnReminderStatistics@3();
    VAR
      ReminderHeader@1015 : Record 295;
      VATPostingSetup@1000 : Record 325;
      ReminderStatisticsPage@1016 : TestPage 437;
    BEGIN
      // Verify interest amount on Reminder Statistics Page.

      // Setup: Create Reminder.
      Initialize;
      CreateReminderWithInterestAmount(ReminderHeader,VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT");

      // Excercise: Open the Statistics Page.
      OpenReminderStatisticsPage(ReminderStatisticsPage,ReminderHeader."No.");

      // Verify: Verifying interest amount on Reminder Statistics Page.
      ReminderStatisticsPage.Interest.ASSERTEQUALS(ReminderHeader."Interest Amount");
    END;

    [Test]
    [HandlerFunctions(RHReminderTest)]
    PROCEDURE InterestAmountOnTestReminderReport@67();
    VAR
      VATPostingSetup@1000 : Record 325;
    BEGIN
      // Verify interest amount on Reminder Test Report.
      VerifyInterestAmountOnReminderTestReport(VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT");
    END;

    [Test]
    PROCEDURE InterestAmountOnIssuedReminderStatistics@93();
    VAR
      IssuedReminderHeader@1005 : Record 297;
      VATPostingSetup@1000 : Record 325;
      IssuedReminderStatistics@1004 : TestPage 441;
    BEGIN
      // Verify interest amount on Issued Reminder Statistics Page.

      // Setup: Create Issued Reminder.
      Initialize;
      CreateIssuedReminderWithInterestAmount(IssuedReminderHeader,VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT");

      // Excercise: Open the Statistics Page.
      OpenIssuedReminderStatisticsPage(IssuedReminderStatistics,IssuedReminderHeader."No.");

      // Verify: Verifying interest amount on Issued Reminder Statistics Page.
      IssuedReminderStatistics.Interest.ASSERTEQUALS(IssuedReminderHeader."Interest Amount");
    END;

    [Test]
    [HandlerFunctions(RHReminder)]
    PROCEDURE InterestAmountOnReminderReport@106();
    VAR
      VATPostingSetup@1001 : Record 325;
    BEGIN
      // Verify interest amount on Reminder Report.

      VerifyInterestAmountOnReminderReport(VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT");
    END;

    [Test]
    [HandlerFunctions(RHReminderTest)]
    PROCEDURE InterestAmountOnTestReminderReportForNormalVAT@111();
    VAR
      VATPostingSetup@1000 : Record 325;
    BEGIN
      // Verify interest amount on Reminder Test Report.
      VerifyInterestAmountOnReminderTestReport(VATPostingSetup."VAT Calculation Type"::"Normal VAT");
    END;

    [Test]
    [HandlerFunctions(RHReminder)]
    PROCEDURE InterestAmountOnreminderReportForNormalVAT@131();
    VAR
      VATPostingSetup@1000 : Record 325;
    BEGIN
      // Verify interest amount on Reminder Report.

      VerifyInterestAmountOnReminderReport(VATPostingSetup."VAT Calculation Type"::"Normal VAT");
    END;

    [Test]
    [HandlerFunctions(AdjustExchangeRateReportReqPageHandler)]
    PROCEDURE CheckAdjustExchangeRatesReport@99();
    VAR
      GenJournalLine@1008 : Record 81;
      BankAccountNo@1002 : Code[20];
      CurrencyCode@1001 : Code[10];
    BEGIN
      // Verify Adjust Exchange Rates Report with Bank Account Ledger Entry created and Check Adjustment Ledger Entry created.

      // 1. Setup: Create Bank Account with Currency & post Ledger Entry with General Journal Line.
      Initialize;
      CurrencyCode := CreateCurrencyWithMultipleExchangeRates;
      BankAccountNo := CreateBankAccountWithDimension(CurrencyCode);
      CreateAndPostGenJournalLineWithCurrency(GenJournalLine,BankAccountNo,CurrencyCode);
      LibraryVariableStorage.Enqueue(CurrencyCode);

      // 2. Exercise: Running the Adjust Exchange Rates Report.
      REPORT.RUN(REPORT::"Adjust Exchange Rates");

      // 3. Verify: Check whether Adjustment Entry is created after Running the Adjust Exchange Rates Report.
      VerifyBankLedgerEntryExist(BankAccountNo);
    END;

    [Test]
    [HandlerFunctions(RHReminder)]
    PROCEDURE ReminderReportDoesntShowNotDueDocsWhenRunWithoutShowNotDue@116();
    VAR
      GenJournalLine@1000 : Record 81;
      CustomerNo@1001 : Code[20];
      ReminderNo@1002 : Code[20];
      IssuedReminderNo@1003 : Code[20];
    BEGIN
      // [SCENARIO 122513] Reminder Report doesn't print Not Due documents when run with "Show Not Due Amounts" = FALSE
      Initialize;
      CustomerNo := CreateCustomer;

      // [GIVEN] Posted invoice with "Posting Date" = WORKDATE + 2 Month
      CreateAndPostGenJournalLineWithDate(GenJournalLine,CALCDATE('<2M>',WORKDATE),CustomerNo,LibraryRandom.RandDec(1000,2));  // Using Random value for Amount.

      // [GIVEN] Posted invoice with "Posting Date" = WORKDATE
      CreateAndPostGenJournalLineWithDate(GenJournalLine,WORKDATE,CustomerNo,LibraryRandom.RandDec(1000,2));  // Using Random value for Amount.

      // [GIVEN] Issued reminder with WORKDATE
      ReminderNo := CreateReminderWithGivenCust(CustomerNo);
      IssuedReminderNo := IssueReminderAndGetIssuedNo(ReminderNo);

      // [WHEN] Run Reminder report with "Show Not Due Amounts" = FALSE
      RunReportReminder(IssuedReminderNo);

      // [THEN] Last non-empty report line = "Please remit your payment..."
      VerifyReminderReportLastLineIsPleaseRemitYourPayment(GenJournalLine.Amount,CustomerNo,IssuedReminderNo);
    END;

    [Test]
    [HandlerFunctions(RHGenJournalTest)]
    PROCEDURE FilteringBatchesInGenJournalTestReport@114();
    VAR
      GenJournalLine@1002 : Record 81;
      FirstGenJournalBatchName@1000 : Code[10];
      SecondGenJournalBatchName@1001 : Code[10];
      GenJournalTemplateName@1003 : Code[10];
    BEGIN
      // [SCENARIO 377820] Gen. Journal Test Report should showing batches for only one template
      Initialize;

      // [GIVEN] Gen. Journal Template = "X" has Gen. Journal Batch = "X1" and Gen. Journal Batch = "X2" with Gen. Journal Lines
      CreateGenJnlBatchesWithLines(GenJournalTemplateName,FirstGenJournalBatchName,SecondGenJournalBatchName);

      // [GIVEN] Gen. Journal Template = "Y" has Gen. Journal Batch = "Y1" with Gen. Journal Lines
      LibraryJournals.CreateGenJournalLineWithBatch(GenJournalLine,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Customer,LibrarySales.CreateCustomerNo,LibraryRandom.RandInt(1000));
      COMMIT;

      // [WHEN] Invoke Test Report from Gen. Journal Batches window for Gen. journal template "X"
      RunTestReportFromGenJournalBatchesWindow(GenJournalTemplateName);

      // [THEN] Report dataset contains record from batches "X1" and "X2"
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('Gen__Journal_Line_Journal_Template_Name',GenJournalTemplateName);
      LibraryReportDataset.AssertElementWithValueExists('Gen__Journal_Line_Journal_Batch_Name',FirstGenJournalBatchName);
      LibraryReportDataset.AssertElementWithValueExists('Gen__Journal_Line_Journal_Batch_Name',SecondGenJournalBatchName);

      // [THEN] Report dataset doesn't contain record from batch "Y1"
      LibraryReportDataset.AssertElementWithValueNotExist(GenJnlTemplateNameTok,GenJournalLine."Journal Template Name");
      LibraryReportDataset.AssertElementWithValueNotExist(GenJnlBatchNameTok,GenJournalLine."Journal Batch Name");
    END;

    [Test]
    [HandlerFunctions(RHGeneralJournalTest)]
    PROCEDURE CheckWarningCustomerBlockedShip@126();
    VAR
      Customer@1000 : Record 18;
      GenJournalLine@1001 : Record 81;
    BEGIN
      // [SCENARIO 377906] Gen. Journal Test Report shouldn't show warning for Gen. Journal Line of Customer with Blocked = Ship
      Initialize;

      // [GIVEN] Customer - "C" with Blocked = Ship
      LibrarySales.CreateCustomer(Customer);
      Customer.Blocked := Customer.Blocked::Ship;
      Customer.MODIFY;

      // [GIVEN] Gen. Journal Line with customer = "C", Document type = Invoice
      LibraryJournals.CreateGenJournalLineWithBatch(GenJournalLine,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,Customer."No.",LibraryRandom.RandInt(100));

      // [WHEN] Invoke Test Report
      RunReportGeneralJournalTest(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",FALSE);

      // [THEN] Report dataset doesn't contain warning for gen. journal line
      // [THEN] Report dataset doesn't contain error text for gen. journal line
      VerifyEmptyValueOfField(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",GenJournalLine."Line No.");
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      CLEAR(LibraryVariableStorage);
      LibraryVariableStorage.Clear;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IF OriginalWorkdate = 0D THEN
        OriginalWorkdate := WORKDATE;
      WORKDATE := OriginalWorkdate;
    END;

    LOCAL PROCEDURE CalculateFinanceChargeMemoDate@33(DocumentNo@1001 : Code[20];Code@1000 : Code[10]) DocumentDate : Date;
    VAR
      CustLedgerEntry@1002 : Record 21;
      FinanceChargeTerms@1003 : Record 5;
    BEGIN
      FinanceChargeTerms.GET(Code);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,DocumentNo);
      DocumentDate := CALCDATE('<1D>',CALCDATE(FinanceChargeTerms."Due Date Calculation",CustLedgerEntry."Due Date"));
    END;

    LOCAL PROCEDURE ClearGeneralJournalLines@83(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    LOCAL PROCEDURE CreateAndPostBankAccountEntry@13(VAR GenJournalLine@1005 : Record 81);
    VAR
      GenJournalBatch@1000 : Record 232;
    BEGIN
      // Create and Post Bank Account Entry with a Random Amount.
      ClearGeneralJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::"Bank Account",CreateBankAccount,LibraryRandom.RandDec(1000,2));
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",CreateBankAccount);
      GenJournalLine.VALIDATE("Bank Payment Type",GenJournalLine."Bank Payment Type"::"Manual Check");
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLine@23(VAR GenJournalLine@1000 : Record 81;CustomerNo@1002 : Code[20];Amount@1003 : Decimal);
    VAR
      GenJournalBatch@1001 : Record 232;
    BEGIN
      ClearGeneralJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,CustomerNo,Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLineWithCurrency@103(VAR GenJournalLine@1003 : Record 81;BankAccountNo@1004 : Code[20];CurrencyCode@1002 : Code[10]);
    VAR
      GenJournalBatch@1001 : Record 232;
      GLAccount@1000 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      ClearGeneralJournalLines(GenJournalBatch);
      WITH GenJournalLine DO BEGIN
        LibraryERM.CreateGeneralJnlLine(
          GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,"Document Type"::" ",
          "Account Type"::"G/L Account",GLAccount."No.",LibraryRandom.RandDec(100,2));
        VALIDATE("Bal. Account Type","Bal. Account Type"::"Bank Account");
        VALIDATE("Bal. Account No.",BankAccountNo);
        VALIDATE("Currency Code",CurrencyCode);
        MODIFY(TRUE);
      END;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLineWithDate@117(VAR GenJournalLine@1001 : Record 81;PostingDate@1002 : Date;CustomerNo@1003 : Code[20];Amount@1004 : Decimal);
    VAR
      GenJournalBatch@1000 : Record 232;
    BEGIN
      ClearGeneralJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,CustomerNo,Amount);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreatePaymentGenLine@84(VAR GenJournalLine@1000 : Record 81);
    VAR
      GLAccount@1002 : Record 15;
      GenJournalBatch@1001 : Record 232;
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);
      ClearGeneralJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",LibraryRandom.RandDec(1000,2));
    END;

    LOCAL PROCEDURE CreateBankAccount@15() : Code[20];
    VAR
      BankAccount@1000 : Record 270;
      BankAccountPostingGroup@1001 : Record 277;
    BEGIN
      // Create Bank Account with Random Last Statement No.
      LibraryERM.CreateBankAccount(BankAccount);
      BankAccountPostingGroup.FINDFIRST;
      BankAccount.VALIDATE("Bank Acc. Posting Group",BankAccountPostingGroup.Code);
      BankAccount.VALIDATE("Last Statement No.",FORMAT(LibraryRandom.RandInt(10)));
      BankAccount.MODIFY(TRUE);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE CreateBankAccountWithDimension@101(CurrencyCode@1000 : Code[10]) : Code[20];
    VAR
      BankAccountNo@1001 : Code[20];
    BEGIN
      BankAccountNo := CreateBankAccountWithCurrency(CurrencyCode);
      UpdateBankAccountDimension(BankAccountNo);
      EXIT(BankAccountNo);
    END;

    LOCAL PROCEDURE CreateBankAccountWithCurrency@105(CurrencyCode@1002 : Code[10]) : Code[20];
    VAR
      BankAccount@1000 : Record 270;
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      BankAccount.VALIDATE("Currency Code",CurrencyCode);
      BankAccount.MODIFY(TRUE);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE CreateBankRecon@21(VAR BankAccReconciliation@1001 : Record 273;BankAccountNo@1000 : Code[20]);
    BEGIN
      LibraryERM.CreateBankAccReconciliation(BankAccReconciliation,BankAccountNo,
        BankAccReconciliation."Statement Type"::"Bank Reconciliation");
      BankAccReconciliation.VALIDATE("Statement Date",WORKDATE);
      BankAccReconciliation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomer@2() : Code[20];
    VAR
      Customer@1000 : Record 18;
      ReminderLevel@1001 : Record 293;
    BEGIN
      ReminderLevel.SETFILTER("Additional Fee (LCY)",'<>%1',0);
      ReminderLevel.FINDFIRST;
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Reminder Terms Code",ReminderLevel."Reminder Terms Code");
      Customer.VALIDATE("Fin. Charge Terms Code",CreateFinanceChargeTerms);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateItem@66(VATProdPostingGrp@1002 : Code[10]) : Code[20];
    VAR
      Item@1001 : Record 27;
      LibraryInventory@1000 : Codeunit 132201;
    BEGIN
      WITH Item DO BEGIN
        LibraryInventory.CreateItem(Item);
        VALIDATE("VAT Prod. Posting Group",VATProdPostingGrp);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateReminderTerm@130(VAR ReminderTerms@1000 : Record 292);
    VAR
      ReminderLevel@1001 : Record 293;
    BEGIN
      LibraryERM.CreateReminderTerms(ReminderTerms);
      LibraryERM.CreateReminderLevel(ReminderLevel,ReminderTerms.Code);
      ReminderLevel.VALIDATE("Calculate Interest",TRUE);
      ReminderLevel.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithReminderSetup@133(VATBusPostingGroupCode@1004 : Code[10]) : Code[20];
    VAR
      Customer@1000 : Record 18;
      ReminderTerms@1002 : Record 292;
    BEGIN
      CreateReminderTerm(ReminderTerms);
      WITH Customer DO BEGIN
        LibrarySales.CreateCustomer(Customer);
        VALIDATE("Reminder Terms Code",ReminderTerms.Code);
        VALIDATE("Fin. Charge Terms Code",CreateFinanceChargeTerms);
        VALIDATE("VAT Bus. Posting Group",VATBusPostingGroupCode);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateCurrencyWithMultipleExchangeRates@100() : Code[10];
    VAR
      Currency@1000 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      CreateAndUpdateCurrencyExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocument@137(VATCalculationType@1001 : Option) : Code[20];
    VAR
      SalesLine@1002 : Record 37;
      SalesHeader@1000 : Record 36;
      VATPostingSetup@1005 : Record 325;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATCalculationType);
      WITH SalesHeader DO BEGIN
        LibrarySales.CreateSalesHeader(
          SalesHeader,"Document Type"::Invoice,
          CreateCustomerWithReminderSetup(VATPostingSetup."VAT Bus. Posting Group"));
        LibrarySales.CreateSalesLine(
          SalesLine,SalesHeader,SalesLine.Type::Item,
          CreateItem(VATPostingSetup."VAT Prod. Posting Group"),
          LibraryRandom.RandDec(10,2));
        SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
        SalesLine.MODIFY(TRUE);
      END;
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateCustomerWithDimension@72(VAR DimensionValue@1001 : Record 349) : Code[20];
    VAR
      Dimension@1003 : Record 348;
      DefaultDimension@1000 : Record 352;
      LibraryDimension@1002 : Codeunit 131001;
    BEGIN
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionCustomer(
        DefaultDimension,CreateCustomer,DimensionValue."Dimension Code",DimensionValue.Code);
      EXIT(DefaultDimension."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithCurrencyCode@150() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      WITH Customer DO BEGIN
        GET(CreateCustomer);
        VALIDATE("Currency Code",LibraryERM.CreateCurrencyWithRandomExchRates);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateFinanceChargeTerms@45() : Code[10];
    VAR
      FinanceChargeTerms@1000 : Record 5;
    BEGIN
      // Create Finance Charge Term with Random Interest Rate, Minimum Amount, Additional Amount, Grace Period, Interest Period and
      // Due Date Calculation.
      LibraryERM.CreateFinanceChargeTerms(FinanceChargeTerms);
      FinanceChargeTerms.VALIDATE("Interest Rate",LibraryRandom.RandDec(10,2));
      FinanceChargeTerms.VALIDATE("Additional Fee (LCY)",LibraryRandom.RandDec(1000,2));
      FinanceChargeTerms.VALIDATE("Interest Period (Days)",LibraryRandom.RandInt(30));
      EVALUATE(FinanceChargeTerms."Due Date Calculation",'<' + FORMAT(LibraryRandom.RandInt(20)) + 'D>');
      FinanceChargeTerms.VALIDATE("Post Additional Fee",TRUE);
      FinanceChargeTerms.VALIDATE("Post Interest",TRUE);
      FinanceChargeTerms.MODIFY(TRUE);
      EXIT(FinanceChargeTerms.Code);
    END;

    LOCAL PROCEDURE CreateReminderWithGivenDocNo@4(DocumentNo@1006 : Code[20];CustomerNo@1002 : Code[20]) : Code[20];
    VAR
      ReminderLevel@1003 : Record 293;
      CustLedgerEntry@1000 : Record 21;
      Customer@1001 : Record 18;
    BEGIN
      Customer.GET(CustomerNo);
      FindReminderLevel(ReminderLevel,Customer."Reminder Terms Code");
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,DocumentNo);

      // Calculate Document Date according to Reminder Level's Grace Period and add One day.
      EXIT(
        CreateReminder(
          CustomerNo,CALCDATE('<1D>',CALCDATE(ReminderLevel."Grace Period",CustLedgerEntry."Due Date"))));
    END;

    LOCAL PROCEDURE CreateReminderWithGivenCust@118(CustomerNo@1001 : Code[20]) : Code[20];
    VAR
      ReminderLevel@1002 : Record 293;
      Customer@1000 : Record 18;
    BEGIN
      Customer.GET(CustomerNo);
      FindReminderLevel(ReminderLevel,Customer."Reminder Terms Code");

      // Calculate Document Date according to Reminder Level's Grace Period and add One day.
      EXIT(
        CreateReminder(
          CustomerNo,CALCDATE('<1D>',CALCDATE(ReminderLevel."Grace Period",WORKDATE))));
    END;

    LOCAL PROCEDURE CreateReminderWithInterestAmount@107(VAR ReminderHeader@1001 : Record 295;VATCalculationType@1002 : Option);
    VAR
      SalesInvHeader@1000 : Record 112;
      ReminderNo@1003 : Code[20];
    BEGIN
      SalesInvHeader.GET(CreateAndPostSalesDocument(VATCalculationType));
      ReminderNo := CreateReminderWithGivenDocNo(SalesInvHeader."No.",SalesInvHeader."Sell-to Customer No.");
      ReminderHeader.GET(ReminderNo);
      ReminderHeader.CALCFIELDS("Interest Amount");
    END;

    LOCAL PROCEDURE CreateReminder@122(CustomerNo@1007 : Code[20];DocumentDate@1008 : Date) : Code[20];
    VAR
      ReminderHeader@1006 : Record 295;
      CustLedgerEntry@1004 : Record 21;
      CustLedgEntryLineFeeOn@1002 : Record 21;
      ReminderMake@1001 : Codeunit 392;
    BEGIN
      LibraryERM.CreateReminderHeader(ReminderHeader);
      WITH ReminderHeader DO BEGIN
        VALIDATE("Customer No.",CustomerNo);
        VALIDATE("Posting Date",DocumentDate);
        VALIDATE("Document Date",DocumentDate);
        MODIFY(TRUE);
        CustLedgerEntry.SETRANGE("Customer No.",CustomerNo);
        ReminderMake.SuggestLines(ReminderHeader,CustLedgerEntry,FALSE,FALSE,CustLedgEntryLineFeeOn);
        ReminderMake.Code;
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateIssuedReminderWithInterestAmount@88(VAR IssuedReminderHeader@1000 : Record 297;VATCalculationType@1004 : Option);
    VAR
      ReminderHeader@1001 : Record 295;
      IssuedReminderNo@1002 : Code[20];
    BEGIN
      CreateReminderWithInterestAmount(ReminderHeader,VATCalculationType);
      IssuedReminderNo := IssueReminderAndGetIssuedNo(ReminderHeader."No.");
      IssuedReminderHeader.GET(IssuedReminderNo);
      IssuedReminderHeader.CALCFIELDS("Interest Amount");
    END;

    LOCAL PROCEDURE CreateBankAccReconciliation@14(BankAccountNo@1001 : Code[20]) : Code[20];
    VAR
      BankAccReconciliation@1000 : Record 273;
    BEGIN
      // Create Bank Account Reconciliation and Suggest Line. Update Statement Ending Balance with Zero to generate Warning.
      CreateBankRecon(BankAccReconciliation,BankAccountNo);
      SuggestBankReconLines(BankAccReconciliation);
      BankAccReconciliation.VALIDATE("Statement Ending Balance",0);
      BankAccReconciliation.MODIFY(TRUE);
      EXIT(BankAccReconciliation."Statement No.");
    END;

    LOCAL PROCEDURE CreateSuggestFinanceChargeMemo@18(CustomerNo@1004 : Code[20];DocumentNo@1001 : Code[20]) : Code[20];
    VAR
      FinanceChargeMemoHeader@1002 : Record 302;
      DocumentDate@1003 : Date;
    BEGIN
      LibraryERM.CreateFinanceChargeMemoHeader(FinanceChargeMemoHeader,CustomerNo);
      DocumentDate := CalculateFinanceChargeMemoDate(DocumentNo,FinanceChargeMemoHeader."Fin. Charge Terms Code");
      FinanceChargeMemoHeader.VALIDATE("Posting Date",DocumentDate);
      FinanceChargeMemoHeader.VALIDATE("Document Date",DocumentDate);
      FinanceChargeMemoHeader.MODIFY(TRUE);
      SuggestFinanceChargeMemoLines(FinanceChargeMemoHeader);
      EXIT(FinanceChargeMemoHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndUpdateCurrencyExchangeRate@109(CurrencyCode@1000 : Code[10]);
    VAR
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      LibraryERM.CreateExchRate(CurrencyExchangeRate,CurrencyCode,WORKDATE);
      WITH CurrencyExchangeRate DO BEGIN
        VALIDATE("Exchange Rate Amount",LibraryRandom.RandDec(10,2));
        VALIDATE("Adjustment Exch. Rate Amount",LibraryRandom.RandDec(10,2));
        VALIDATE("Relational Exch. Rate Amount","Adjustment Exch. Rate Amount");
        VALIDATE("Relational Adjmt Exch Rate Amt","Adjustment Exch. Rate Amount");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateGenJnlBatchesWithLines@128(VAR GenJnlTemplateName@1002 : Code[10];VAR FirstGenJnlBatchName@1003 : Code[10];VAR SecondGenJnlBatchName@1004 : Code[10]);
    VAR
      GenJournalBatch@1000 : Record 232;
      GenJournalLine@1001 : Record 81;
    BEGIN
      LibraryJournals.CreateGenJournalLineWithBatch(GenJournalLine,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Customer,LibrarySales.CreateCustomerNo,LibraryRandom.RandInt(1000));
      GenJnlTemplateName := GenJournalLine."Journal Template Name";
      FirstGenJnlBatchName := GenJournalLine."Journal Batch Name";
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJnlTemplateName);
      SecondGenJnlBatchName := GenJournalBatch.Name;
      LibraryJournals.CreateGenJournalLine2(GenJournalLine,GenJnlTemplateName,GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer,LibrarySales.CreateCustomerNo,
        GenJournalLine."Bal. Account Type"::"Bank Account",LibraryERM.CreateBankAccountNo,LibraryRandom.RandInt(1000));
    END;

    LOCAL PROCEDURE DisableInvoiceRoundingForCurrency@157(CurrencyCode@1000 : Code[10]);
    VAR
      Currency@1001 : Record 4;
    BEGIN
      Currency.GET(CurrencyCode);
      Currency."Invoice Rounding Precision" := 0; // skip validation
      Currency.MODIFY;
    END;

    LOCAL PROCEDURE AddReminderLineWithGLType@152(VAR ReminderLine@1000 : Record 296;ReminderNo@1001 : Code[20];No@1002 : Code[20];Amount@1003 : Decimal);
    BEGIN
      LibraryERM.CreateReminderLine(ReminderLine,ReminderNo,ReminderLine.Type::"G/L Account");
      ReminderLine.VALIDATE("No.",No);
      ReminderLine.VALIDATE(Amount,Amount);
      ReminderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AddFinanceChargeMemoLineWithGLType@134(VAR FinanceChargeMemoLine@1000 : Record 303;FinanceChargeMemoNo@1001 : Code[20];No@1002 : Code[20];Amount@1003 : Decimal);
    BEGIN
      LibraryERM.CreateFinanceChargeMemoLine(FinanceChargeMemoLine,FinanceChargeMemoNo,FinanceChargeMemoLine.Type::"G/L Account");
      FinanceChargeMemoLine.VALIDATE("No.",No);
      FinanceChargeMemoLine.VALIDATE(Amount,Amount);
      FinanceChargeMemoLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindAndUpdateGLAccountWithVAT@58() : Code[20];
    VAR
      GLAccount@1001 : Record 15;
      VATPostingSetup@1000 : Record 325;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      GLAccount.SETRANGE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      LibraryERM.FindGLAccount(GLAccount);
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE FindFinChargeMemoLine@43(VAR IssuedFinChargeMemoLine@1000 : Record 305;FinanceChargeMemoNo@1001 : Code[20];Type@1002 : Option) : Decimal;
    BEGIN
      IssuedFinChargeMemoLine.SETRANGE("Finance Charge Memo No.",FinanceChargeMemoNo);
      IssuedFinChargeMemoLine.SETRANGE(Type,Type);
      IssuedFinChargeMemoLine.FINDFIRST;
      EXIT(IssuedFinChargeMemoLine.Amount);
    END;

    LOCAL PROCEDURE FindIssuedReminderLine@153(VAR IssuedReminderLine@1000 : Record 298;ReminderNo@1002 : Code[20];ReminderType@1001 : Option);
    BEGIN
      IssuedReminderLine.SETRANGE("Reminder No.",ReminderNo);
      IssuedReminderLine.SETRANGE(Type,ReminderType);
      IssuedReminderLine.FINDSET;
    END;

    LOCAL PROCEDURE FindIssuedFinChargeMemoLine@154(VAR IssuedFinChargeMemoLine@1000 : Record 305;FinChargeMemoNo@1001 : Code[20]);
    BEGIN
      IssuedFinChargeMemoLine.SETRANGE("Finance Charge Memo No.",FinChargeMemoNo);
      IssuedFinChargeMemoLine.FINDSET;
    END;

    LOCAL PROCEDURE FindGLAccount@90(VAR GLAccount@1003 : Record 15;No@1000 : Code[20];DateFilter@1001 : Date;DateFilter2@1002 : Date);
    BEGIN
      GLAccount.SETRANGE("No.",No);
      GLAccount.SETRANGE("Date Filter",DateFilter,DateFilter2);
      GLAccount.FINDFIRST;
    END;

    LOCAL PROCEDURE FindReminderLevel@34(VAR ReminderLevel@1001 : Record 293;ReminderTermsCode@1000 : Code[10]);
    BEGIN
      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderTermsCode);
      ReminderLevel.FINDFIRST;
    END;

    LOCAL PROCEDURE SumAmountOnIssuedReminderFeeLineWithVAT@151(ReminderNo@1002 : Code[20];ReminderType@1005 : Option;VAT@1000 : Decimal;VAR TotalAmount@1003 : Decimal;VAR TotalVATAmount@1004 : Decimal);
    VAR
      IssuedReminderLine@1001 : Record 298;
    BEGIN
      WITH IssuedReminderLine DO BEGIN
        SETRANGE("VAT %",VAT);
        FindIssuedReminderLine(IssuedReminderLine,ReminderNo,ReminderType);
        CALCSUMS(Amount);
        CALCSUMS("VAT Amount");
        TotalAmount := Amount;
        TotalVATAmount := "VAT Amount";
      END;
    END;

    LOCAL PROCEDURE SumAmountOnIssuedFinChargeMemoLineWithVAT@155(FinanceChargeMemoNo@1004 : Code[20];VAT@1000 : Decimal;VAR TotalAmount@1003 : Decimal;VAR TotalVATAmount@1001 : Decimal);
    VAR
      IssuedFinChargeMemoLine@1002 : Record 305;
    BEGIN
      WITH IssuedFinChargeMemoLine DO BEGIN
        SETRANGE("VAT %",VAT);
        FindIssuedFinChargeMemoLine(IssuedFinChargeMemoLine,FinanceChargeMemoNo);
        CALCSUMS(Amount);
        CALCSUMS("VAT Amount");
        TotalAmount := Amount;
        TotalVATAmount := "VAT Amount";
      END;
    END;

    LOCAL PROCEDURE GetFinanceChargeMemoLine@53(VAR FinanceChargeMemoLine@1001 : Record 303;FinanceChargeMemoNo@1002 : Code[20];Type@1000 : Option);
    BEGIN
      FinanceChargeMemoLine.SETRANGE("Finance Charge Memo No.",FinanceChargeMemoNo);
      FinanceChargeMemoLine.SETRANGE(Type,Type);
      FinanceChargeMemoLine.FINDFIRST;
    END;

    LOCAL PROCEDURE GetCustAddFeeAmount@123(CustomerNo@1002 : Code[20]) : Decimal;
    VAR
      ReminderLevel@1000 : Record 293;
      Customer@1001 : Record 18;
    BEGIN
      Customer.GET(CustomerNo);
      ReminderLevel.SETRANGE("Reminder Terms Code",Customer."Reminder Terms Code");
      ReminderLevel.FINDFIRST;
      EXIT(ReminderLevel."Additional Fee (LCY)");
    END;

    LOCAL PROCEDURE GetRemitPaymentsMsg@156(IssuedReminderNo@1000 : Code[20];Amount@1004 : Decimal) : Text;
    VAR
      IssuedReminderHeader@1001 : Record 297;
      ReminderText@1002 : Record 294;
      Text@1003 : Text;
    BEGIN
      IssuedReminderHeader.GET(IssuedReminderNo);
      ReminderText.SETRANGE("Reminder Terms Code",IssuedReminderHeader."Reminder Terms Code");
      ReminderText.SETRANGE("Reminder Level",1);
      ReminderText.SETRANGE(Position,1);
      ReminderText.FINDFIRST;
      // Replace '%7' with '%1'
      Text := CONVERTSTR(ReminderText.Text,'7','1');
      EXIT(STRSUBSTNO(Text,Amount));
    END;

    LOCAL PROCEDURE IssueAndGetFinChargeMemoNo@41(No@1002 : Code[20]) IssuedDocNo : Code[20];
    VAR
      FinanceChargeMemoHeader@1001 : Record 302;
      NoSeriesManagement@1000 : Codeunit 396;
    BEGIN
      FinanceChargeMemoHeader.GET(No);
      IssuedDocNo := NoSeriesManagement.GetNextNo(FinanceChargeMemoHeader."Issuing No. Series",WORKDATE,FALSE);
      IssueFinChargeMemo(FinanceChargeMemoHeader);
    END;

    LOCAL PROCEDURE IssueFinChargeMemo@30(FinanceChargeMemoHeader@1001 : Record 302);
    VAR
      FinChrgMemoIssue@1000 : Codeunit 395;
    BEGIN
      FinChrgMemoIssue.Set(FinanceChargeMemoHeader,FALSE,FinanceChargeMemoHeader."Document Date");
      FinChrgMemoIssue.RUN;
    END;

    LOCAL PROCEDURE IssueReminder@36(ReminderHeader@1000 : Record 295);
    VAR
      ReminderIssue@1003 : Codeunit 393;
    BEGIN
      ReminderIssue.Set(ReminderHeader,FALSE,ReminderHeader."Document Date");
      ReminderIssue.RUN;
    END;

    LOCAL PROCEDURE IssueReminderAndGetIssuedNo@37(ReminderNo@1002 : Code[20]) IssuedReminderNo : Code[20];
    VAR
      ReminderHeader@1000 : Record 295;
      NoSeriesManagement@1001 : Codeunit 396;
    BEGIN
      ReminderHeader.GET(ReminderNo);
      IssuedReminderNo := NoSeriesManagement.GetNextNo(ReminderHeader."Issuing No. Series",WORKDATE,FALSE);
      IssueReminder(ReminderHeader);
    END;

    LOCAL PROCEDURE OpenReminderStatisticsPage@24(VAR ReminderStatisticsPage@1000 : TestPage 437;ReminderHeaderNo@1001 : Code[20]);
    VAR
      ReminderPage@1002 : TestPage 434;
    BEGIN
      ReminderPage.OPENEDIT;
      ReminderPage.FILTER.SETFILTER("No.",ReminderHeaderNo);
      ReminderStatisticsPage.TRAP;
      ReminderPage."Page Reminder Statistics".INVOKE;
    END;

    LOCAL PROCEDURE OpenIssuedReminderStatisticsPage@59(VAR IssuedReminderStatistics@1001 : TestPage 441;IssuedReminderNo@1000 : Code[20]);
    VAR
      IssuedReminder@1002 : TestPage 438;
    BEGIN
      IssuedReminder.OPENEDIT;
      IssuedReminder.FILTER.SETFILTER("No.",IssuedReminderNo);
      IssuedReminderStatistics.TRAP;
      IssuedReminder."Page Issued Reminder Statistics".INVOKE;
    END;

    LOCAL PROCEDURE CreateAndIssueReminderWithCurrencyAndVATFee@146() : Code[20];
    VAR
      GenJournalLine@1003 : Record 81;
      ReminderLine@1002 : Record 296;
      ReminderNo@1001 : Code[20];
    BEGIN
      // Create General Journal Line with Currency Code.
      CreateAndPostGenJournalLine(GenJournalLine,CreateCustomerWithCurrencyCode,LibraryRandom.RandDec(1000,2)); // Using Random value for Amount.
      DisableInvoiceRoundingForCurrency(GenJournalLine."Currency Code");

      // Create Reminder, add a line for the reminder with fee include VAT. Issued the Reminder.
      ReminderNo := CreateReminderWithGivenDocNo(GenJournalLine."Document No.",GenJournalLine."Account No.");
      AddReminderLineWithGLType(ReminderLine,ReminderNo,FindAndUpdateGLAccountWithVAT,LibraryRandom.RandDec(100,2));
      EXIT(IssueReminderAndGetIssuedNo(ReminderNo));
    END;

    LOCAL PROCEDURE CreateAndIssueFinChargeMemoWithCurrencyAndVATFee@145() : Code[20];
    VAR
      GenJournalLine@1003 : Record 81;
      FinanceChargeMemoLine@1002 : Record 303;
      FinanceChargeMemoNo@1001 : Code[20];
    BEGIN
      // Create General Journal Line with Currency Code.
      CreateAndPostGenJournalLine(GenJournalLine,CreateCustomerWithCurrencyCode,LibraryRandom.RandDec(1000,2)); // Using Random value for Amount.
      DisableInvoiceRoundingForCurrency(GenJournalLine."Currency Code");

      // Create Finance Charge Memo, add a line for the Finance Charge Memo with fee include VAT. Issued the Finance Charge Memo.
      FinanceChargeMemoNo := CreateSuggestFinanceChargeMemo(GenJournalLine."Account No.",GenJournalLine."Document No.");
      AddFinanceChargeMemoLineWithGLType(
        FinanceChargeMemoLine,FinanceChargeMemoNo,FindAndUpdateGLAccountWithVAT,LibraryRandom.RandDec(100,2));
      EXIT(IssueAndGetFinChargeMemoNo(FinanceChargeMemoNo));
    END;

    LOCAL PROCEDURE PostGenLinesCustomPostingDate@89(VAR GenJournalLine@1001 : Record 81);
    VAR
      GLAccount@1003 : Record 15;
      GenJournalBatch@1002 : Record 232;
    BEGIN
      ClearGeneralJournalLines(GenJournalBatch);
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE(Indentation,LibraryRandom.RandInt(5));  // Set Random for Indendation.
      GLAccount.MODIFY(TRUE);

      // Taking 1000 for multiplication with Dividing Rounding Factor.
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",LibraryRandom.RandDec(1000,2) * 1000);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",LibraryRandom.RandDec(1000,2) * 1000);
      GenJournalLine.VALIDATE("Posting Date",CALCDATE('<-1Y>',WORKDATE));  // Take Previous Year Date.
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE RunTestReportFromGenJournalBatchesWindow@158(GenJournalTemplateName@1000 : Code[10]);
    VAR
      GeneralJournalBatches@1001 : TestPage 251;
    BEGIN
      GeneralJournalBatches.OPENEDIT;
      GeneralJournalBatches.FILTER.SETFILTER("Journal Template Name",GenJournalTemplateName);
      GeneralJournalBatches.TestReport.INVOKE;
    END;

    LOCAL PROCEDURE SuggestBankReconLines@16(BankAccReconciliation@1001 : Record 273);
    VAR
      BankAccount@1002 : Record 270;
      SuggestBankAccReconLines@1000 : Report 1496;
    BEGIN
      SuggestBankAccReconLines.SetStmt(BankAccReconciliation);
      BankAccount.SETRANGE("No.",BankAccReconciliation."Bank Account No.");
      SuggestBankAccReconLines.SETTABLEVIEW(BankAccount);
      SuggestBankAccReconLines.InitializeRequest(WORKDATE,WORKDATE,TRUE);  // Set TRUE for Include Checks Option.
      SuggestBankAccReconLines.USEREQUESTPAGE(FALSE);
      SuggestBankAccReconLines.RUN;
    END;

    LOCAL PROCEDURE SuggestFinanceChargeMemoLines@19(FinanceChargeMemoHeader@1000 : Record 302);
    VAR
      SuggestFinChargeMemoLines@1001 : Report 192;
    BEGIN
      FinanceChargeMemoHeader.SETRANGE("No.",FinanceChargeMemoHeader."No.");
      SuggestFinChargeMemoLines.SETTABLEVIEW(FinanceChargeMemoHeader);
      SuggestFinChargeMemoLines.USEREQUESTPAGE(FALSE);
      SuggestFinChargeMemoLines.RUN;
    END;

    LOCAL PROCEDURE UpdateAndIssueReminder@25(ReminderNo@1003 : Code[20]);
    VAR
      ReminderHeader@1002 : Record 295;
    BEGIN
      ReminderHeader.GET(ReminderNo);
      UpdateIssuingNoSeriesReminder(ReminderHeader,ReminderNo);
      ReminderHeader.MODIFY(TRUE);
      IssueReminder(ReminderHeader);
    END;

    LOCAL PROCEDURE UpdateBankAccountDimension@108(BankAccountNo@1000 : Code[20]);
    VAR
      Dimension@1003 : Record 348;
      DimensionValue@1002 : Record 349;
      DefaultDimension@1001 : Record 352;
      LibraryDimension@1004 : Codeunit 131001;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Bank Account",BankAccountNo,Dimension.Code,DimensionValue.Code);
      DefaultDimension.VALIDATE("Value Posting",DefaultDimension."Value Posting"::"Code Mandatory");
      DefaultDimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCustomerPostingGroup@48(No@1001 : Code[20];NewAddFeeAccountNo@1002 : Code[20]) SavedAddFeeAccountNo : Code[20];
    VAR
      Customer@1003 : Record 18;
      CustomerPostingGroup@1000 : Record 92;
    BEGIN
      Customer.GET(No);
      CustomerPostingGroup.GET(Customer."Customer Posting Group");
      SavedAddFeeAccountNo := CustomerPostingGroup."Additional Fee Account";
      CustomerPostingGroup.VALIDATE("Additional Fee Account",NewAddFeeAccountNo);
      CustomerPostingGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateIssuingNoSeries@40(No@1001 : Code[20]);
    VAR
      FinanceChargeMemoHeader@1000 : Record 302;
    BEGIN
      FinanceChargeMemoHeader.GET(No);
      FinanceChargeMemoHeader.VALIDATE("Issuing No. Series",'');
      FinanceChargeMemoHeader.VALIDATE("Issuing No.",No);
      FinanceChargeMemoHeader.MODIFY(TRUE);
      IssueFinChargeMemo(FinanceChargeMemoHeader);
    END;

    LOCAL PROCEDURE UpdateIssuingNoSeriesReminder@17(VAR ReminderHeader@1000 : Record 295;ReminderNo@1001 : Code[20]);
    BEGIN
      ReminderHeader.VALIDATE("Issuing No. Series",'');
      ReminderHeader.VALIDATE("Issuing No.",ReminderNo);
    END;

    LOCAL PROCEDURE UpdateNoSeriesAndIssueReminder@11(ReminderNo@1003 : Code[20]);
    VAR
      ReminderHeader@1002 : Record 295;
    BEGIN
      ReminderHeader.GET(ReminderNo);
      ReminderHeader.VALIDATE("No. Series",'');
      UpdateIssuingNoSeriesReminder(ReminderHeader,ReminderNo);
      ReminderHeader.MODIFY(TRUE);
      IssueReminder(ReminderHeader);
    END;

    LOCAL PROCEDURE UpdateNoSeriesInFinChargeMemo@32(No@1001 : Code[20]) IssuedDocNo : Code[20];
    VAR
      FinanceChargeMemoHeader@1000 : Record 302;
      NoSeriesManagement@1002 : Codeunit 396;
    BEGIN
      FinanceChargeMemoHeader.GET(No);
      FinanceChargeMemoHeader.VALIDATE("No. Series",'');
      FinanceChargeMemoHeader.MODIFY(TRUE);
      IssuedDocNo := NoSeriesManagement.GetNextNo(FinanceChargeMemoHeader."Issuing No. Series",WORKDATE,FALSE);
      IssueFinChargeMemo(FinanceChargeMemoHeader);
    END;

    LOCAL PROCEDURE UpdateVATSpecInLCYGeneralLedgerSetup@125(VATSpecificationInLCY@1001 : Boolean);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.VALIDATE("Print VAT specification in LCY",VATSpecificationInLCY);
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyTrialBalancePreviousYearReportWithBlankLines@121(NoOfBlankLines@1001 : Integer);
    VAR
      GenJournalLine@1000 : Record 81;
      GLAccount@1003 : Record 15;
      ActualRowQty@1002 : Integer;
    BEGIN
      Initialize;
      WORKDATE := CALCDATE('<+1Y>',WORKDATE);
      PostGenLinesCustomPostingDate(GenJournalLine);

      GLAccount.GET(GenJournalLine."Account No.");
      GLAccount."No. of Blank Lines" := NoOfBlankLines;
      GLAccount.MODIFY;

      RunReportTrialBalancePreviousYear(GenJournalLine."Account No.",WORKDATE);

      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_GLAccount',GenJournalLine."Account No.");
      ActualRowQty := 0;
      WHILE LibraryReportDataset.GetNextRow DO
        ActualRowQty += 1;

      Assert.AreEqual(NoOfBlankLines,ActualRowQty - 1,BlankLinesQtyErr);
    END;

    LOCAL PROCEDURE VerifyBankAccountCheckDetails@28(GenJournalLine@1001 : Record 81);
    VAR
      CheckLedgerEntry@1000 : Record 272;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;

      LibraryReportDataset.SetRange('Check_Ledger_Entry__Check_Date_',FORMAT(WORKDATE));
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'Check_Ledger_Entry__Check_Date_',FORMAT(WORKDATE)));

      LibraryReportDataset.AssertCurrentRowValue('Check_Ledger_Entry__Bal__Account_No__',GenJournalLine."Account No.");
      LibraryReportDataset.AssertCurrentRowValue('Check_Ledger_Entry__Entry_Status_',FORMAT(CheckLedgerEntry."Entry Status"::Posted));
      LibraryReportDataset.AssertCurrentRowValue('Check_Ledger_Entry_Amount',GenJournalLine.Amount);
    END;

    LOCAL PROCEDURE VerifyBankAccReconTest@27(GenJournalLine@1000 : Record 81);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;

      // Verify Header
      LibraryReportDataset.AssertElementWithValueExists('HeaderError1',FORMAT(WarningMsg));

      // Verify Lines
      LibraryReportDataset.SetRange('Bank_Acc__Reconciliation_Line__Transaction_Date_',FORMAT(WORKDATE));
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'Bank_Acc__Reconciliation_Line__Transaction_Date_',FORMAT(WORKDATE)));
      LibraryReportDataset.AssertCurrentRowValue('Bank_Acc__Reconciliation_Line__Applied_Amount_',-GenJournalLine.Amount);

      // Verify Totals
      LibraryReportDataset.Reset;
      Assert.AreEqual(-GenJournalLine.Amount,LibraryReportDataset.Sum('Bank_Acc__Reconciliation_Line__Applied_Amount_'),
        STRSUBSTNO(ValidationErr,GenJournalLine.FIELDCAPTION(Amount),-GenJournalLine.Amount));
      Assert.AreEqual(-GenJournalLine.Amount,LibraryReportDataset.Sum('Bank_Acc__Reconciliation_Line__Statement_Amount_'),
        STRSUBSTNO(ValidationErr,GenJournalLine.FIELDCAPTION(Amount),-GenJournalLine.Amount));
    END;

    LOCAL PROCEDURE VerifyBankLedgerEntryExist@104(BankAccountNo@1002 : Code[20]);
    VAR
      BankAccLedgEntry@1003 : Record 271;
      DocumentNo@1000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DocumentNo);
      BankAccLedgEntry.SETRANGE("Bank Account No.",BankAccountNo);
      BankAccLedgEntry.SETRANGE("Document No.",DocumentNo);
      Assert.IsFalse(BankAccLedgEntry.ISEMPTY,AdjustExchangeErr);
    END;

    LOCAL PROCEDURE VerifyDimensionsOnReport@85(DimensionValue@1001 : Record 349);
    VAR
      ExpectedValue@1002 : Text;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      ExpectedValue := STRSUBSTNO(HeaderDimensionTxt,DimensionValue."Dimension Code",DimensionValue.Code);
      LibraryReportDataset.AssertElementWithValueExists('DimText',ExpectedValue);
    END;

    LOCAL PROCEDURE VerifyGeneralJournalTest@64(GenJournalLine@1001 : Record 81);
    BEGIN
      // Verify Saved Report's Data.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Gen__Journal_Line__Posting_Date_',FORMAT(GenJournalLine."Posting Date"));
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'Gen__Journal_Line__Posting_Date_',FORMAT(GenJournalLine."Posting Date")));
      LibraryReportDataset.AssertCurrentRowValue('Gen__Journal_Line__Document_Type_',FORMAT(GenJournalLine."Document Type"));
      LibraryReportDataset.AssertCurrentRowValue('Gen__Journal_Line__Document_No__',GenJournalLine."Document No.");
      LibraryReportDataset.AssertCurrentRowValue('Gen__Journal_Line__Account_Type_',FORMAT(GenJournalLine."Account Type"));
      LibraryReportDataset.AssertCurrentRowValue('AccountNo_GenJnlLine',GenJournalLine."Account No.");
      LibraryReportDataset.AssertCurrentRowValue('AccName',GenJournalLine.Description);
      LibraryReportDataset.AssertCurrentRowValue('Gen__Journal_Line_Description',GenJournalLine.Description);
      LibraryReportDataset.AssertCurrentRowValue('Gen__Journal_Line__Gen__Posting_Type_',FORMAT(GenJournalLine."Gen. Posting Type"));
      LibraryReportDataset.AssertCurrentRowValue('Gen__Journal_Line__Gen__Bus__Posting_Group_',GenJournalLine."Gen. Bus. Posting Group");
      LibraryReportDataset.AssertCurrentRowValue('Gen__Journal_Line__Gen__Prod__Posting_Group_',GenJournalLine."Gen. Prod. Posting Group");
      LibraryReportDataset.AssertCurrentRowValue('Gen__Journal_Line__Bal__Account_No__',GenJournalLine."Bal. Account No.");
      LibraryReportDataset.AssertCurrentRowValue('Gen__Journal_Line_Amount',GenJournalLine.Amount);
      LibraryReportDataset.AssertCurrentRowValue('Gen__Journal_Line__Balance__LCY__',GenJournalLine."Balance (LCY)");
      LibraryReportDataset.AssertCurrentRowValue('Gen__Journal_Line_Amount',GenJournalLine.Amount);
      LibraryReportDataset.AssertCurrentRowValue('BalanceLCY',GenJournalLine."Balance (LCY)");
      LibraryReportDataset.AssertElementWithValueExists('Gen__Journal_Line_Journal_Template_Name',GenJournalLine."Journal Template Name");
      LibraryReportDataset.AssertElementWithValueExists('Gen__Journal_Line_Journal_Batch_Name',GenJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE VerifyFinanceChargeMemo@148(No@1001 : Code[20]);
    VAR
      GeneralLedgerSetup@1009 : Record 98;
      IssuedFinChargeMemoLine@1006 : Record 305;
      AddnlFeeAmount@1002 : Decimal;
      LineAmount@1000 : Decimal;
      TotalAmount@1004 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      LineAmount := FindFinChargeMemoLine(IssuedFinChargeMemoLine,No,IssuedFinChargeMemoLine.Type::"Customer Ledger Entry");
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('DocDt_IssuFinChrgMemoLine',FORMAT(IssuedFinChargeMemoLine."Document Date"));
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'DocDt_IssuFinChrgMemoLine',FORMAT(IssuedFinChargeMemoLine."Document Date")));
      LibraryReportDataset.AssertCurrentRowValue('DocNo_IssuFinChrgMemoLine',IssuedFinChargeMemoLine."Document No.");
      LibraryReportDataset.AssertCurrentRowValue('Amt_IssuFinChrgMemoLine',IssuedFinChargeMemoLine.Amount);
      AddnlFeeAmount := FindFinChargeMemoLine(IssuedFinChargeMemoLine,No,IssuedFinChargeMemoLine.Type::"G/L Account");
      LibraryReportDataset.Reset;
      LibraryReportDataset.SetRange('Desc_IssuFinChrgMemoLine',AddnlFeeLabelTxt);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'Desc_IssuFinChrgMemoLine',AddnlFeeLabelTxt));
      LibraryReportDataset.AssertCurrentRowValue('Amt_IssuFinChrgMemoLine',IssuedFinChargeMemoLine.Amount);
      LibraryReportDataset.Reset;
      LibraryReportDataset.SetRange('TotalText',STRSUBSTNO(TotalTxt,GeneralLedgerSetup."LCY Code"));
      TotalAmount := LibraryReportDataset.Sum('TotalAmtExclVAT');
      Assert.AreEqual(LineAmount + AddnlFeeAmount,TotalAmount,STRSUBSTNO(ValueNotFoundErr,LineAmount + AddnlFeeAmount));
    END;

    LOCAL PROCEDURE VerifyFinanceChargeMemoNos@70(No@1007 : Code[20]);
    VAR
      IssuedFinChargeMemoHeader@1004 : Record 304;
      NoSeries@1005 : Record 308;
      UserId@1003 : Variant;
    BEGIN
      IssuedFinChargeMemoHeader.GET(No);
      NoSeries.GET(IssuedFinChargeMemoHeader."No. Series");
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number__Control15',
        STRSUBSTNO(NoSeriesInformationMsg,NoSeries.Code,NoSeries.Description));
      LibraryReportDataset.SetRange('IssuedFinChrgMemoHeader__No__',No);
      WHILE LibraryReportDataset.GetNextRow DO BEGIN
        ValidateRowValue('IssuedFinChrgMemoHeader__Posting_Date_',FORMAT(IssuedFinChargeMemoHeader."Posting Date"));
        ValidateRowValue('IssuedFinChrgMemoHeader__Customer_No__',IssuedFinChargeMemoHeader."Customer No.");
        ValidateRowValue('IssuedFinChrgMemoHeader__Source_Code_',IssuedFinChargeMemoHeader."Source Code");
        LibraryReportDataset.FindCurrentRowValue('IssuedFinChrgMemoHeader__User_ID_',UserId);
        Assert.AreEqual(
          UPPERCASE(UserId),IssuedFinChargeMemoHeader."User ID",
          STRSUBSTNO(IncorrectValueMsg,IssuedFinChargeMemoHeader.FIELDCAPTION("User ID")));
      END
    END;

    LOCAL PROCEDURE VerifyFinanceChargeMemoTest@62(GenJournalLine@1000 : Record 81;No@1001 : Code[20]);
    VAR
      GeneralLedgerSetup@1008 : Record 98;
      FinanceChargeMemoLine@1004 : Record 303;
      Variant@1011 : Variant;
      LineAmount@1006 : Decimal;
      AddnlFeeAmount@1007 : Decimal;
      TotalAmt@1010 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      GetFinanceChargeMemoLine(FinanceChargeMemoLine,No,FinanceChargeMemoLine.Type::"Customer Ledger Entry");
      LineAmount := FinanceChargeMemoLine.Amount;
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Finance_Charge_Memo_Line__Document_Type_',FORMAT(GenJournalLine."Document Type"));
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'Finance_Charge_Memo_Line__Document_Type_',FORMAT(GenJournalLine."Document Type")));
      LibraryReportDataset.AssertCurrentRowValue('Finance_Charge_Memo_Line__Original_Amount_',
        FinanceChargeMemoLine."Original Amount");
      LibraryReportDataset.AssertCurrentRowValue('Finance_Charge_Memo_Line__Remaining_Amount_',
        FinanceChargeMemoLine."Remaining Amount");
      LibraryReportDataset.AssertCurrentRowValue('Finance_Charge_Memo_Line_Amount',FinanceChargeMemoLine.Amount);
      GetFinanceChargeMemoLine(FinanceChargeMemoLine,No,FinanceChargeMemoLine.Type::"G/L Account");
      AddnlFeeAmount := FinanceChargeMemoLine.Amount;
      LibraryReportDataset.Reset;
      LibraryReportDataset.SetRange('Finance_Charge_Memo_Line_Description',AddnlFeeLabelTxt);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'Finance_Charge_Memo_Line_Description',AddnlFeeLabelTxt));
      LibraryReportDataset.AssertCurrentRowValue('Finance_Charge_Memo_Line_Amount',FinanceChargeMemoLine.Amount);
      LibraryReportDataset.Reset;
      LibraryReportDataset.SetRange('TotalText',STRSUBSTNO(TotalTxt,GeneralLedgerSetup."LCY Code"));
      LibraryReportDataset.SetRange('Finance_Charge_Memo_Line_Description',AddnlFeeLabelTxt);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'TotalText',STRSUBSTNO(TotalTxt,GeneralLedgerSetup."LCY Code")));
      LibraryReportDataset.GetElementValueInCurrentRow('TotalAmount',Variant);
      TotalAmt := Variant;
      IF TotalAmt <> 0 THEN
        LibraryReportDataset.AssertCurrentRowValue('TotalAmount',LineAmount + AddnlFeeAmount);
    END;

    LOCAL PROCEDURE VerifyFinChrgMemoTestVATEntry@54(FinanceChargeMemoNo@1000 : Code[20]);
    VAR
      FinanceChargeMemoLine@1001 : Record 303;
      ShowVAT@1003 : Boolean;
    BEGIN
      // Use Precision to take Decimal Value upto 2 Decimal Places.
      FinanceChargeMemoLine.SETRANGE("Finance Charge Memo No.",FinanceChargeMemoNo);
      FinanceChargeMemoLine.SETFILTER("VAT %",'>0');
      FinanceChargeMemoLine.FINDSET;
      LibraryReportDataset.LoadDataSetFile;

      LibraryReportDataset.SetRange('FinChMemo_Line___Line_No__',FinanceChargeMemoLine."Line No.");
      LibraryReportDataset.GetNextRow;
      ShowVAT := NOT LibraryReportDataset.CurrentRowHasElement('MulIntRateEntry_FinChrgMemoLine');

      LibraryReportDataset.Reset;
      REPEAT
        LibraryReportDataset.SetRange('VATAmountLine__VAT_Base_',FinanceChargeMemoLine.Amount);
        IF NOT LibraryReportDataset.GetNextRow THEN BEGIN
          IF ShowVAT THEN
            ERROR(STRSUBSTNO(RowNotFoundErr,'VATAmountLine__VAT_Base_',FinanceChargeMemoLine.Amount));
        END ELSE BEGIN
          Assert.IsTrue(ShowVAT,'Only show if it does contain multi-interest rate entry functionality');
          LibraryReportDataset.AssertCurrentRowValue('VATAmountLine__VAT___',FinanceChargeMemoLine."VAT %");
          LibraryReportDataset.AssertCurrentRowValue(
            'VATAmountLine__Amount_Including_VAT_',
            FinanceChargeMemoLine.Amount + FinanceChargeMemoLine."VAT Amount");
        END;
      UNTIL FinanceChargeMemoLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyFinChrgMemoVATEntry@50(FinanceChargeMemoNo@1001 : Code[20]);
    VAR
      IssuedFinChargeMemoLine@1000 : Record 305;
      Amount@1003 : Variant;
      AmountIncludingVAT@1005 : Variant;
    BEGIN
      // Use Precision to take Decimal Value upto 2 Decimal Places.
      IssuedFinChargeMemoLine.SETRANGE("Finance Charge Memo No.",FinanceChargeMemoNo);
      IssuedFinChargeMemoLine.SETFILTER("VAT %",'>0');
      IssuedFinChargeMemoLine.FINDSET;
      LibraryReportDataset.LoadDataSetFile;

      LibraryReportDataset.Reset;
      REPEAT
        LibraryReportDataset.SetRange('VATAmtSpecCaption',VATAmtSpecLabelTxt);
        LibraryReportDataset.SetRange('VatAmtLineVAT',FORMAT(IssuedFinChargeMemoLine."VAT %"));
        IF NOT LibraryReportDataset.GetNextRow THEN
          ERROR(STRSUBSTNO(RowNotFoundErr,'VatAmtLineVAT',FORMAT(IssuedFinChargeMemoLine."VAT %")));
        LibraryReportDataset.FindCurrentRowValue('VALVATBase',Amount);
        Assert.AreNearlyEqual(
          IssuedFinChargeMemoLine.Amount,
          Amount,LibraryERM.GetAmountRoundingPrecision,
          STRSUBSTNO(ValidationErr,VATBaseLabelTxt,IssuedFinChargeMemoLine.Amount));
        LibraryReportDataset.FindCurrentRowValue('ValVatBaseValVatAmt',AmountIncludingVAT);
        Assert.AreNearlyEqual(
          IssuedFinChargeMemoLine.Amount + IssuedFinChargeMemoLine."VAT Amount",AmountIncludingVAT,
          LibraryERM.GetAmountRoundingPrecision,
          STRSUBSTNO(ValidationErr,AmtInclVATLabelTxt,IssuedFinChargeMemoLine.Amount + IssuedFinChargeMemoLine."VAT Amount"));
      UNTIL IssuedFinChargeMemoLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyInteractionLogEntry@35(DocumentType@1000 : Option;DocumentNo@1001 : Code[20]);
    VAR
      InteractionLogEntry@1002 : Record 5065;
    BEGIN
      InteractionLogEntry.SETRANGE("Document Type",DocumentType);
      InteractionLogEntry.SETRANGE("Document No.",DocumentNo);
      InteractionLogEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyReminderNos@57(No@1008 : Code[20]);
    VAR
      IssuedReminderHeader@1004 : Record 297;
      NoSeries@1007 : Record 308;
      UserId@1003 : Variant;
    BEGIN
      IssuedReminderHeader.GET(No);
      NoSeries.GET(IssuedReminderHeader."No. Series");
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number__Control15',
        STRSUBSTNO(NoSeriesInformationMsg,NoSeries.Code,NoSeries.Description));
      LibraryReportDataset.SetRange('IssuedReminderHeader__No__',No);
      WHILE LibraryReportDataset.GetNextRow DO BEGIN
        ValidateRowValue('IssuedReminderHeader__Posting_Date_',FORMAT(IssuedReminderHeader."Posting Date"));
        ValidateRowValue('IssuedReminderHeader__Customer_No__',IssuedReminderHeader."Customer No.");
        ValidateRowValue('IssuedReminderHeader__Source_Code_',IssuedReminderHeader."Source Code");
        LibraryReportDataset.FindCurrentRowValue('IssuedReminderHeader__User_ID_',UserId);
        Assert.AreEqual(
          UPPERCASE(UserId),IssuedReminderHeader."User ID",STRSUBSTNO(IncorrectValueMsg,IssuedReminderHeader.FIELDCAPTION("User ID")));
      END
    END;

    LOCAL PROCEDURE VerifyReminderTest@69(GenJournalLine@1001 : Record 81;No@1009 : Code[20]);
    VAR
      CustomerPostingGroup@1003 : Record 92;
      ReminderHeader@1000 : Record 295;
      ReminderLine@1005 : Record 296;
      ReminderLevel@1002 : Record 293;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;

      ReminderHeader.GET(No);
      ReminderHeader.CALCFIELDS("Remaining Amount");
      ReminderHeader.CALCFIELDS("Interest Amount");
      CustomerPostingGroup.GET(ReminderHeader."Customer Posting Group");

      LibraryReportDataset.SetRange('Reminder_Line__Document_Type_',FORMAT(ReminderLine."Document Type"::Invoice));
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'Reminder_Line__Document_Type_',FORMAT(ReminderLine."Document Type"::Invoice)));
      LibraryReportDataset.AssertCurrentRowValue('Reminder_Line__Document_No__',GenJournalLine."Document No.");
      LibraryReportDataset.AssertCurrentRowValue('Reminder_Line__Original_Amount_',GenJournalLine.Amount);
      LibraryReportDataset.AssertCurrentRowValue('Reminder_Line__Remaining_Amount_',ReminderHeader."Remaining Amount");

      FindReminderLevel(ReminderLevel,ReminderHeader."Reminder Terms Code");
      LibraryReportDataset.Reset;
      LibraryReportDataset.SetRange('Reminder_Line__No__',CustomerPostingGroup."Additional Fee Account");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'Reminder_Line__No__',CustomerPostingGroup."Additional Fee Account"));
      LibraryReportDataset.AssertCurrentRowValue('Remaining_Amount____ReminderInterestAmount____VAT_Amount_',
        ReminderLevel."Additional Fee (LCY)")
    END;

    LOCAL PROCEDURE VerifyInterestOnReminderReport@112(InterestAmount@1001 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('Interest',InterestAmount);
    END;

    LOCAL PROCEDURE VerifyReminderTestVATEntry@63(ReminderNo@1000 : Code[20]);
    VAR
      ReminderLine@1005 : Record 296;
    BEGIN
      // Use Precision Value with FORMAT to generate output with two Decimal Places.
      LibraryReportDataset.LoadDataSetFile;

      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      ReminderLine.SETFILTER("VAT %",'>0');
      ReminderLine.FINDSET;
      REPEAT
        LibraryReportDataset.SetRange('VATAmountLine__VAT___',ReminderLine."VAT %");
        IF NOT LibraryReportDataset.GetNextRow THEN
          ERROR(STRSUBSTNO(RowNotFoundErr,'VATAmountLine__VAT___',ReminderLine."VAT %"));
        LibraryReportDataset.AssertCurrentRowValue('VATAmountLine__VAT_Base_',ReminderLine.Amount);
        LibraryReportDataset.AssertCurrentRowValue('VATAmountLine__Amount_Including_VAT_',
          ReminderLine.Amount + ReminderLine."VAT Amount");
      UNTIL ReminderLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyReminderReport@71(No@1008 : Code[20]);
    VAR
      IssuedReminderLine@1001 : Record 298;
    BEGIN
      IssuedReminderLine.SETRANGE("Reminder No.",No);
      IssuedReminderLine.FINDFIRST;
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('DocDate_IssuedReminderLine',FORMAT(IssuedReminderLine."Document Date"));
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'DocDate_IssuedReminderLine',FORMAT(IssuedReminderLine."Document Date")));
      LibraryReportDataset.AssertCurrentRowValue('DocNo_IssuedReminderLine',IssuedReminderLine."Document No.");
      LibraryReportDataset.AssertCurrentRowValue('OriginalAmt_IssuedReminderLine',IssuedReminderLine."Original Amount");
      LibraryReportDataset.AssertCurrentRowValue('RemAmt_IssuedReminderLine',IssuedReminderLine."Remaining Amount");
    END;

    LOCAL PROCEDURE VerifyInterestAmountOnReminderTestReport@132(VATCalculationType@1000 : Option);
    VAR
      ReminderHeader@1001 : Record 295;
    BEGIN
      // Verify interest amount on Reminder Test Report.

      // Setup: Create Reminder.
      Initialize;
      CreateReminderWithInterestAmount(ReminderHeader,VATCalculationType);
      LibraryVariableStorage.Enqueue(ReminderHeader."No.");
      LibraryVariableStorage.Enqueue(FALSE);

      // Excercise: Run Reminder Test Report.
      COMMIT;
      REPORT.RUN(REPORT::"Reminder - Test");

      // Verify: Verifying interest amount on Reminder Test Report.
      VerifyInterestOnReminderReport(ReminderHeader."Interest Amount");
    END;

    LOCAL PROCEDURE VerifyInterestAmountOnReminderReport@136(VATCalculationType@1000 : Option);
    VAR
      IssuedReminderHeader@1001 : Record 297;
    BEGIN
      // Setup: Create Issued Reminder.
      Initialize;
      CreateIssuedReminderWithInterestAmount(IssuedReminderHeader,VATCalculationType);
      LibraryVariableStorage.Enqueue(IssuedReminderHeader."No.");

      // Exercise: Run Reminder Report.
      COMMIT;
      REPORT.RUN(REPORT::Reminder);

      // Verify: Verifying interest amount on Reminder Report.
      VerifyInterestOnReminderReport(IssuedReminderHeader."Interest Amount");
    END;

    LOCAL PROCEDURE VerifyReminderVATAmountSpecification@142(ReminderNo@1001 : Code[20]);
    VAR
      IssuedReminderHeader@1002 : Record 297;
      CurrExchRate@1006 : Record 330;
      IssuedReminderLine@1000 : Record 298;
      CurrFactor@1004 : Decimal;
      TotalAmount@1008 : Decimal;
      TotalVATAmount@1007 : Decimal;
      AmountIncludeVAT@1009 : Decimal;
      VATBase@1010 : Decimal;
    BEGIN
      IssuedReminderHeader.GET(ReminderNo);
      CurrFactor := CurrExchRate.ExchangeRate(IssuedReminderHeader."Posting Date",IssuedReminderHeader."Currency Code");

      // Use Precision to take Decimal Value upto 2 Decimal Places.
      FindIssuedReminderLine(IssuedReminderLine,ReminderNo,IssuedReminderLine.Type::"G/L Account");
      LibraryReportDataset.LoadDataSetFile;
      REPEAT
        SumAmountOnIssuedReminderFeeLineWithVAT(
          ReminderNo,IssuedReminderLine.Type::"G/L Account",IssuedReminderLine."VAT %",TotalAmount,TotalVATAmount);
        AmountIncludeVAT := TotalAmount + TotalVATAmount;
        VATBase := AmountIncludeVAT / (1 + IssuedReminderLine."VAT %" / 100);

        // Verify "VAT Base" and "VAT Amount" in VAT Amount Specification Caption.
        VerifyVATAmountSpecificationOnReminderReport(FORMAT(IssuedReminderLine."VAT %"),VATBase,AmountIncludeVAT - VATBase);

        // Verify "VAT Base" and "VAT Amount" in VAT Amount Specification in GBP Caption.
        VerifyVATAmountSpecificationInGBPOnReminderReport(
          FORMAT(IssuedReminderLine."VAT %"),VATBase / CurrFactor,(AmountIncludeVAT - VATBase) / CurrFactor);
      UNTIL IssuedReminderLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyFinanceChargeMemoVATAmountSpecInGBP@135(FinanceChargeMemoNo@1001 : Code[20]);
    VAR
      IssuedFinChargeMemoHeader@1004 : Record 304;
      CurrExchRate@1007 : Record 330;
      IssuedFinChargeMemoLine@1000 : Record 305;
      CurrFactor@1006 : Decimal;
      TotalAmount@1008 : Decimal;
      TotalVATAmount@1002 : Decimal;
      AmountIncludeVAT@1005 : Decimal;
      VATBase@1003 : Decimal;
    BEGIN
      IssuedFinChargeMemoHeader.GET(FinanceChargeMemoNo);
      CurrFactor := CurrExchRate.ExchangeRate(
          IssuedFinChargeMemoHeader."Posting Date",IssuedFinChargeMemoHeader."Currency Code");

      // Use Precision to take Decimal Value upto 2 Decimal Places.
      FindIssuedFinChargeMemoLine(IssuedFinChargeMemoLine,FinanceChargeMemoNo);
      LibraryReportDataset.LoadDataSetFile;
      REPEAT
        SumAmountOnIssuedFinChargeMemoLineWithVAT(
          FinanceChargeMemoNo,IssuedFinChargeMemoLine."VAT %",TotalAmount,TotalVATAmount);
        AmountIncludeVAT := TotalAmount + TotalVATAmount;
        VATBase := AmountIncludeVAT / (1 + IssuedFinChargeMemoLine."VAT %" / 100);

        // Verify "VAT Base" and "VAT Amount" in VAT Amount Specification in GBP Caption.
        VerifyVATAmountSpecInGBPOnFinanceChargeMemoReport(
          FORMAT(IssuedFinChargeMemoLine."VAT %"),VATBase / CurrFactor,(AmountIncludeVAT - VATBase) / CurrFactor);
      UNTIL IssuedFinChargeMemoLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyVATAmountSpecificationOnReminderReport@143(VAT@1004 : Text[50];VATBase@1001 : Decimal;TotalVATAmount@1000 : Decimal);
    VAR
      Amount@1003 : Variant;
      VATAmount@1005 : Variant;
    BEGIN
      LibraryReportDataset.SetRange('VATAmtSpecCaption',VATAmtSpecLabelTxt);
      LibraryReportDataset.SetRange('VATAmtLineVAT',VAT);
      Assert.IsTrue(LibraryReportDataset.GetNextRow,STRSUBSTNO(RowNotFoundErr,'VATAmtLineVAT',VAT));
      LibraryReportDataset.FindCurrentRowValue('VALVATBase',Amount);
      Assert.AreNearlyEqual(
        VATBase,Amount,LibraryERM.GetAmountRoundingPrecision,STRSUBSTNO(ValidationErr,VATBaseLabelTxt,VATBase));
      LibraryReportDataset.FindCurrentRowValue('VALVATAmount',VATAmount);
      Assert.AreNearlyEqual(
        TotalVATAmount,VATAmount,LibraryERM.GetAmountRoundingPrecision,STRSUBSTNO(ValidationErr,VATAmtLbl,TotalVATAmount));
    END;

    LOCAL PROCEDURE VerifyVATAmountSpecificationInGBPOnReminderReport@149(VAT@1004 : Text[50];VATBase@1001 : Decimal;TotalVATAmount@1000 : Decimal);
    VAR
      Amount@1003 : Variant;
      VATAmount@1005 : Variant;
    BEGIN
      LibraryReportDataset.SetRange('VALSpecLCYHeader',VATAmtSpecLCYLbl);
      LibraryReportDataset.SetRange('VATAmtLineVATCtrl107',VAT);
      Assert.IsTrue(LibraryReportDataset.GetNextRow,STRSUBSTNO(RowNotFoundErr,'VATAmtLineVATCtrl107',VAT));
      LibraryReportDataset.FindCurrentRowValue('VALVATBaseLCY',Amount);
      Assert.AreNearlyEqual(
        VATBase,Amount,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationErr,VATBaseLabelTxt,VATBase));
      LibraryReportDataset.FindCurrentRowValue('VALVATAmountLCY',VATAmount);
      Assert.AreNearlyEqual(
        TotalVATAmount,VATAmount,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationErr,VATAmtLbl,TotalVATAmount));
    END;

    LOCAL PROCEDURE VerifyVATAmountSpecInGBPOnFinanceChargeMemoReport@147(VAT@1000 : Text[50];VATBase@1002 : Decimal;TotalVATAmount@1001 : Decimal);
    VAR
      Amount@1003 : Variant;
      VATAmount@1005 : Variant;
    BEGIN
      LibraryReportDataset.SetRange('ValspecLCYHdr',VATAmtSpecLCYLbl);
      LibraryReportDataset.SetRange('VatAmtLnVat1',VAT);
      Assert.IsTrue(LibraryReportDataset.GetNextRow,STRSUBSTNO(RowNotFoundErr,'VatAmtLnVat1',VAT));
      LibraryReportDataset.FindCurrentRowValue('ValvataBaseLCY',Amount);
      Assert.AreNearlyEqual(
        VATBase,Amount,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationErr,VATBaseLabelTxt,VATBase));
      LibraryReportDataset.FindCurrentRowValue('ValvatamountLCY',VATAmount);
      Assert.AreNearlyEqual(
        TotalVATAmount,VATAmount,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationErr,VATAmtLbl,TotalVATAmount));
    END;

    LOCAL PROCEDURE ValidateRowValue@77(ElementName@1000 : Text;ExpectedValue@1001 : Variant);
    BEGIN
      LibraryReportDataset.AssertCurrentRowValue(ElementName,ExpectedValue);
    END;

    LOCAL PROCEDURE VerifyWarningOnReport@76(No@1000 : Code[20];IssuedHeaderNo@1003 : Text[1024];ExpectedWarningMessage@1001 : Text[1024]);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange(IssuedHeaderNo,No);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,IssuedHeaderNo,No));
      LibraryReportDataset.AssertCurrentRowValue('ErrorText_Number_',ExpectedWarningMessage);
    END;

    LOCAL PROCEDURE VerifyReminderReportLastLineIsPleaseRemitYourPayment@124(Amount@1003 : Decimal;CustomerNo@1004 : Code[20];IssuedReminderNo@1005 : Code[20]);
    VAR
      Variant@1000 : Variant;
      Row@1001 : Integer;
      ElementValue@1002 : Text;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      Row :=
        LibraryReportDataset.FindRow(
          'Desc1_IssuedReminderLine',
          GetRemitPaymentsMsg(IssuedReminderNo,Amount + GetCustAddFeeAmount(CustomerNo)));
      LibraryReportDataset.MoveToRow(Row + 1);
      IF LibraryReportDataset.GetNextRow THEN
        REPEAT
          IF LibraryReportDataset.CurrentRowHasElement('Desc1_IssuedReminderLine') THEN BEGIN
            LibraryReportDataset.GetElementValueInCurrentRow('Desc1_IssuedReminderLine',Variant);
            EVALUATE(ElementValue,Variant);
            Assert.IsTrue(STRLEN(ElementValue) = 0,ReminderReportLastLineErr);
          END;
        UNTIL NOT LibraryReportDataset.GetNextRow;
    END;

    LOCAL PROCEDURE VerifyEmptyValueOfField@129(GenJnlTemplateName@1003 : Text;GenJnlBatchName@1004 : Text;LineNo@1005 : Integer);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Gen__Journal_Line_Journal_Template_Name',GenJnlTemplateName);
      LibraryReportDataset.SetRange('Gen__Journal_Line_Journal_Batch_Name',GenJnlBatchName);
      LibraryReportDataset.SetRange('Gen__Journal_Line_Line_No_',LineNo);
      LibraryReportDataset.GetNextRow;
      REPEAT
        Assert.IsFalse(LibraryReportDataset.CurrentRowHasElement(WarningCaptionTok),WarningErrorErr);
        Assert.IsFalse(LibraryReportDataset.CurrentRowHasElement(ErrorTextNumberTok),WarningErrorErr);
      UNTIL NOT LibraryReportDataset.GetNextRow;
    END;

    [RequestPageHandler]
    PROCEDURE AdjustExchangeRateReportReqPageHandler@110(VAR AdjustExchangeRate@1000 : TestRequestPage 595);
    VAR
      Code@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Code);
      AdjustExchangeRate.StartingDate.SETVALUE(WORKDATE);
      AdjustExchangeRate.EndingDate.SETVALUE(CALCDATE(STRSUBSTNO('<%1M>',LibraryRandom.RandInt(3)),WORKDATE));
      AdjustExchangeRate.DocumentNo.SETVALUE(LibraryUTUtility.GetNewCode);
      AdjustExchangeRate.Currency.SETFILTER(Code,Code);
      LibraryVariableStorage.Enqueue(AdjustExchangeRate.DocumentNo.VALUE);
      AdjustExchangeRate.OK.INVOKE;
    END;

    LOCAL PROCEDURE RunReportReminderNos@78(ReminderNo1@1000 : Code[20];ReminderNo2@1001 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(ReminderNo1);
      LibraryVariableStorage.Enqueue(ReminderNo2);
      COMMIT;
      REPORT.RUN(REPORT::"Reminder Nos.");
    END;

    LOCAL PROCEDURE RunReportReminder@141(IssuedReminderNo@1000 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(IssuedReminderNo);
      COMMIT;
      REPORT.RUN(REPORT::Reminder);
    END;

    LOCAL PROCEDURE RunReportFinanceChargeMemoNos@86(FinanceChargeMemoNo1@1000 : Code[20];FinanceChargeMemoNo2@1001 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(FinanceChargeMemoNo1);
      LibraryVariableStorage.Enqueue(FinanceChargeMemoNo2);
      COMMIT;
      REPORT.RUN(REPORT::"Finance Charge Memo Nos.");
    END;

    LOCAL PROCEDURE RunReportFinanceChargeMemo@97(FinanceChargeMemoNo@1000 : Code[20];ShowInternalInfo@1001 : Boolean;LogInteraction@1002 : Boolean);
    BEGIN
      LibraryVariableStorage.Enqueue(FinanceChargeMemoNo);
      LibraryVariableStorage.Enqueue(ShowInternalInfo);
      LibraryVariableStorage.Enqueue(LogInteraction);
      COMMIT;
      REPORT.RUN(REPORT::"Finance Charge Memo");
    END;

    LOCAL PROCEDURE RunReportFinanceChargeMemoTest@96(FinanceChargeMemoNo@1000 : Code[20];ShowDimension@1001 : Boolean);
    BEGIN
      LibraryVariableStorage.Enqueue(FinanceChargeMemoNo);
      LibraryVariableStorage.Enqueue(ShowDimension);
      COMMIT;
      REPORT.RUN(REPORT::"Finance Charge Memo - Test");
    END;

    LOCAL PROCEDURE RunReportReceivablesPayables@61(StartingDate@1001 : Variant;NoOfPeriods@1002 : Integer;PeriodLength@1000 : DateFormula);
    BEGIN
      LibraryVariableStorage.Enqueue(StartingDate);
      LibraryVariableStorage.Enqueue(NoOfPeriods);
      LibraryVariableStorage.Enqueue(PeriodLength);
      COMMIT;
      REPORT.RUN(REPORT::"Receivables-Payables");
    END;

    LOCAL PROCEDURE RunReportGeneralJournalTest@113(JournalTemplateName@1002 : Code[20];JournalBatchName@1000 : Code[20];ShowDimension@1001 : Boolean);
    BEGIN
      LibraryVariableStorage.Enqueue(JournalTemplateName);
      LibraryVariableStorage.Enqueue(JournalBatchName);
      LibraryVariableStorage.Enqueue(ShowDimension);
      COMMIT;
      REPORT.RUN(REPORT::"General Journal - Test");
    END;

    LOCAL PROCEDURE RunReportTrialBalancePreviousYear@92(GLAccountNo@1000 : Code[20];DateFilter@1001 : Date);
    BEGIN
      LibraryVariableStorage.Enqueue(GLAccountNo);
      LibraryVariableStorage.Enqueue(DateFilter);
      COMMIT;
      REPORT.RUN(REPORT::"Trial Balance/Previous Year");
    END;

    [RequestPageHandler]
    PROCEDURE RHBankaccRecon@74(VAR BankAccReconTest@1000 : TestRequestPage 1408);
    VAR
      StatemenNo@1001 : Variant;
      BalAccNo@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(BalAccNo);
      LibraryVariableStorage.Dequeue(StatemenNo);

      BankAccReconTest."Bank Acc. Reconciliation".SETFILTER("Bank Account No.",BalAccNo);
      BankAccReconTest."Bank Acc. Reconciliation".SETFILTER("Statement No.",StatemenNo);
      BankAccReconTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName)
    END;

    [RequestPageHandler]
    PROCEDURE RHBankAccountCheckDetails@73(VAR BankAccountCheckDetails@1000 : TestRequestPage 1406);
    VAR
      BankAccountNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(BankAccountNo);

      BankAccountCheckDetails."Bank Account".SETFILTER("No.",BankAccountNo);
      BankAccountCheckDetails.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName)
    END;

    [RequestPageHandler]
    PROCEDURE RHReminderTest@102(VAR ReminderTest@1000 : TestRequestPage 122);
    VAR
      ReminderNo@1001 : Variant;
      ShowDimensions@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ReminderNo);
      LibraryVariableStorage.Dequeue(ShowDimensions);

      ReminderTest."Reminder Header".SETFILTER("No.",ReminderNo);
      ReminderTest.ShowDimensions.SETVALUE(ShowDimensions);
      ReminderTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName)
    END;

    [RequestPageHandler]
    PROCEDURE RHReminderNos@75(VAR ReminderNos@1000 : TestRequestPage 126);
    VAR
      ReminderNo1@1001 : Variant;
      ReminderNo2@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ReminderNo1);
      LibraryVariableStorage.Dequeue(ReminderNo2);

      ReminderNos."Issued Reminder Header".SETFILTER("No.",STRSUBSTNO('%1|%2',ReminderNo1,ReminderNo2));
      ReminderNos.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName)
    END;

    [RequestPageHandler]
    PROCEDURE RHReminder@139(VAR Reminder@1000 : TestRequestPage 117);
    BEGIN
      Reminder."Issued Reminder Header".SETFILTER("No.",LibraryVariableStorage.DequeueText);
      Reminder.ShowNotDueAmounts.SETVALUE(FALSE);
      Reminder.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName)
    END;

    [RequestPageHandler]
    PROCEDURE RHFinanceChargeMemo@91(VAR FinanceChargeMemo@1000 : TestRequestPage 118);
    VAR
      IssuedFinChargeMemoNo@1003 : Variant;
      ShowInternalInfo@1002 : Variant;
      LogInteraction@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(IssuedFinChargeMemoNo);
      LibraryVariableStorage.Dequeue(ShowInternalInfo);
      LibraryVariableStorage.Dequeue(LogInteraction);

      FinanceChargeMemo."Issued Fin. Charge Memo Header".SETFILTER("No.",IssuedFinChargeMemoNo);
      FinanceChargeMemo.ShowInternalInformation.SETVALUE(ShowInternalInfo);
      FinanceChargeMemo.LogInteraction.SETVALUE(LogInteraction);
      FinanceChargeMemo.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RHFinanceChargeMemoTest@68(VAR FinanceChargeMemoTest@1000 : TestRequestPage 123);
    VAR
      FinChargeMemoNo@1001 : Variant;
      ShowDimension@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FinChargeMemoNo);
      LibraryVariableStorage.Dequeue(ShowDimension);

      FinanceChargeMemoTest."Finance Charge Memo Header".SETFILTER("No.",FinChargeMemoNo);
      FinanceChargeMemoTest.ShowDimensions.SETVALUE(ShowDimension);
      FinanceChargeMemoTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RHFinanceChargeMemoNos@98(VAR FinanceChargeMemoNos@1000 : TestRequestPage 127);
    VAR
      FinanceChargeMemoNo1@1002 : Variant;
      FinanceChargeMemoNo2@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FinanceChargeMemoNo1);
      LibraryVariableStorage.Dequeue(FinanceChargeMemoNo2);
      FinanceChargeMemoNos."Issued Fin. Charge Memo Header".SETFILTER(
        "No.",STRSUBSTNO('%1|%2',FinanceChargeMemoNo1,FinanceChargeMemoNo2));
      FinanceChargeMemoNos.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RHReceivablesPayables@95(VAR ReceivablesPayables@1000 : TestRequestPage 5);
    VAR
      StartingDate@1001 : Variant;
      NoOfPeriods@1002 : Variant;
      PeriodLength@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(StartingDate);
      LibraryVariableStorage.Dequeue(NoOfPeriods);
      LibraryVariableStorage.Dequeue(PeriodLength);
      ReceivablesPayables.StartDate.SETVALUE(StartingDate);
      ReceivablesPayables.NoOfPeriods.SETVALUE(NoOfPeriods);
      ReceivablesPayables.PeriodLength.SETVALUE(PeriodLength);
      ReceivablesPayables.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RHGeneralJournalTest@115(VAR GeneralJournalTest@1000 : TestRequestPage 2);
    VAR
      JournalTemplateName@1003 : Variant;
      JournalBatchName@1001 : Variant;
      ShowDimension@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(JournalTemplateName);
      LibraryVariableStorage.Dequeue(JournalBatchName);
      LibraryVariableStorage.Dequeue(ShowDimension);
      GeneralJournalTest."Gen. Journal Line".SETFILTER("Journal Template Name",JournalTemplateName);
      GeneralJournalTest."Gen. Journal Line".SETFILTER("Journal Batch Name",JournalBatchName);
      GeneralJournalTest.ShowDim.SETVALUE(ShowDimension);
      GeneralJournalTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RHTrialBalancePreviousYear@94(VAR TrialBalancePreviousYear@1002 : TestRequestPage 7);
    VAR
      DateFilter@1001 : Variant;
      GLAccountNo@1000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(GLAccountNo);
      LibraryVariableStorage.Dequeue(DateFilter);
      TrialBalancePreviousYear."G/L Account".SETFILTER("No.",GLAccountNo);
      TrialBalancePreviousYear."G/L Account".SETFILTER("Date Filter",FORMAT(DateFilter));
      TrialBalancePreviousYear.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RHGenJournalTest@127(VAR GeneralJournalTest@1000 : TestRequestPage 2);
    BEGIN
      GeneralJournalTest.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [ERM][Reports]
      Unsupported version tags:
      NO: Unable to Execute (TFS ID: 48868)
      CH: Unable to Execute

      Test various Financial Reports.
        1. Check Bank Account Reconciliation Test Report.
        2. Check Bank Account Check Details Report.
        3. Check Reminder - Test Report with different options.
        4. Check Reminder Nos. Report with different options.
        5. Check Finance Charge Memo Nos. Report with different options.
        6. Check Finance Charge Memo Report with different options.
        7. Check Finance Charge Memo - Test with different options.
        8. Check Receivables Payables Report with available options.
        9. Check General Journal Test Report without Dimension.
        10. Check General Journal Test Report with Dimension.
        11. Check Trial Balance Previous Year Report without any option selected.
        12. Check Trial Balance Previous Year for GL Account.
        13. Check General Journal Test Report for Reconciliation related values.
        14. Check Reminder Report values.
        15. Verify interest amount on Reminder Statistics Page.
        16. Verify interest amount on Reminder Test Report.
        17. Verify interest amount on Issued Reminder Statistics Page.
        18. Verify interest amount on Reminder Report.
        19. Verify Adjust Exchange Rates Report with Bank Account Ledger Entry created and Check Adjustment Ledger Entry created.
        20. verify Verify interest amount on Reminder Test Report for Normal VAT.
        21. Verify interest amount on Reminder Report for Normal VAT.
        22. Check "VAT Base" and "VAT Amount" for Fee in the "VAT Amount Specification" and "VAT Amount Specification in GBP" sections of Report Reminder.
        23. Check "VAT Base" and "VAT Amount" for Fee in the "VAT Amount Specification in GBP" section of Report Finance Charge Memo.

        ATT: Tests are dependent on regional settings. Use English(US) with 123,456,789.00 number format.

      Covers Test cases: 245816
      ----------------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ----------------------------------------------------------------------------------------------
      BankAccReconTestReport                                                        139488
      BankAccountCheckDetailsReport                                                 139585

      Covers Test cases: 250555
      ----------------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ----------------------------------------------------------------------------------------------
      ReminderTestError, ReminderTest                                               139386
      ReminderTestWithDimension, ReminderTestVATEntry                               139386
      ReminderNos, ReminderNosPostingDateWarning                                    139387
      ReminderNosNoSeriesWarning, ReminderNosNoSeriesGapWarning                     139387
      FinChargeMemoNos, FinChargeMemoNosPostingDate                                 139430
      FinChargeMemoNosNoSeries, FinChargeMemoNosNoSeriesGap                         139430
      FinanceChargeMemo, FinanceChargeMemoInternalInfo                              139473
      FinanceChargeMemoLogEntry, FinanceChargeMemoVATEntry                          139473
      FinanceChargeMemoTest, FinanceChargeMemoTestDimension                         139474
      FinanceChargeMemoTestWarnings, FinanceChargeMemoTestVATEntry                  139474

      Covers Test Cases for WI - 245238
      ---------------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ---------------------------------------------------------------------------------------------
      ReceivablesPayables,ReceivablesPayablesDateError                              139289

      Covers Test cases: 250562
      ----------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------
      GeneralJournalTest,GeneralJournalTestDimension          139286
      TrialBalPreviousYearNoOption,TrialBalPreviousYearGLAcc  139291

      Covers Test cases: 264063
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      GeneralJournalTestWithCustomerInvoice                                 244955

      Covers Test cases: 285360
      ----------------------------------------------------------------------------------
      Test Function Name                                                    Test TFS ID
      ----------------------------------------------------------------------------------
      ReminderReport                                                        281378

      Bug ID: 68132
      ----------------------------------------------------------------------------------
      Test Function Name
      ----------------------------------------------------------------------------------
      VerifyInterestAmountOnStatistic,VerifyInterestAmountOnTestReminderReport
      VerifIinterestAmountOnIssuedReminderStatistics,VerifyInterestAmountOnReminderReport
      Bug ID : 70336
      ----------------------------------------------------------------------------------
      Test Function Name
      ----------------------------------------------------------------------------------
      CheckAdjustExchangeRatesReport

      Bug ID: 71086
      ----------------------------------------------------------------------------------
      Test Function Name
      ----------------------------------------------------------------------------------
      Name
      InterestAmountOnTestReminderReportForNormalVAT,InterestAmountOnreminderReportForNormalVAT

      Bug ID: 88419
      ----------------------------------------------------------------------------------
      Test Function Name
      ----------------------------------------------------------------------------------
      VATBaseAndVATAmountOnReminderReport
      VATBaseAndVATAmountOnFinChargeMemoReport
    }
    END.
  }
}

