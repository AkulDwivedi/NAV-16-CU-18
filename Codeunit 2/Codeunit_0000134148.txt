OBJECT Codeunit 134148 ERM Reverse GL Entries-II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      TempDocumentEntry@1013 : TEMPORARY Record 265;
      Assert@1004 : Codeunit 130000;
      LibraryRandom@1003 : Codeunit 130440;
      LibraryERM@1002 : Codeunit 131300;
      PostingDate2@1011 : Date;
      DocumentNo2@1012 : Code[20];
      IsInitialized@1000 : Boolean;
      ReverseError@1015 : TextConst 'ENU=Reversal Entries Must be Same.';

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE GeneralJournalLineReverse@24();
    VAR
      GenJournalLine@1004 : Record 81;
      OldAdditionalReportingCurrency@1006 : Code[10];
    BEGIN
      // Create and post General Journal Line, Reverse Transaction and verify Additional Currency Amount is reversed correctly.

      // Setup: Create Additional Currency. Create and post General Journal Line.
      Initialize;
      UpdateAddnlReportingCurrency(OldAdditionalReportingCurrency,CreateCurrencyWithAccounts);
      CreateAndPostGeneralJournalLineWithGLAccounts(GenJournalLine,'');

      // Exercise: Reverse Transaction Entry.
      ReverseGLEntries(GenJournalLine."Document No.",GenJournalLine."Account No.");

      // Verify: Verify Additional Currency Amount is reversed correctly.
      VerifyReversedAdditionalCurrencyAmount(GenJournalLine."Document No.",GenJournalLine."Account No.");

      // Tear Down: Reset initial value of Additional Reporting Currency.
      UpdateAddnlReportingCurrency(OldAdditionalReportingCurrency,OldAdditionalReportingCurrency);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE GeneralJournalLineReverseACY@12();
    VAR
      GenJournalLine@1004 : Record 81;
      CurrencyACY@1010 : Code[10];
      OldAdditionalReportingCurrency@1006 : Code[10];
    BEGIN
      // Create and post General Journal Line with ACY, Reverse Transaction and verify Additional Currency Amount is reversed correctly.

      // Setup: Create Additional Currency. Create and post General Journal Line.
      Initialize;
      CurrencyACY := CreateCurrencyWithAccounts;
      UpdateAddnlReportingCurrency(OldAdditionalReportingCurrency,CurrencyACY);
      CreateAndPostGeneralJournalLineWithGLAccounts(GenJournalLine,CurrencyACY);

      // Exercise: Reverse Transaction Entry.
      ReverseGLEntries(GenJournalLine."Document No.",GenJournalLine."Account No.");

      // Verify: Verify Additional Currency Amount is reversed correctly.
      VerifyReversedAdditionalCurrencyAmount(GenJournalLine."Document No.",GenJournalLine."Account No.");

      // Tear Down: Reset initial value of Additional Reporting Currency.
      UpdateAddnlReportingCurrency(OldAdditionalReportingCurrency,OldAdditionalReportingCurrency);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE GeneralJournalLineReverseFCY@6();
    VAR
      GenJournalLine@1004 : Record 81;
      CurrencyACY@1010 : Code[10];
      CurrencyFCY@1011 : Code[10];
      OldAdditionalReportingCurrency@1006 : Code[10];
    BEGIN
      // Create and post General Journal Line with FCY, Reverse Transaction and verify Additional Currency Amount is reversed correctly.

      // Setup: Create Additional Currency and Foreign Currency. Create and post General Journal Line.
      Initialize;
      CurrencyACY := CreateCurrencyWithAccounts;
      CurrencyFCY := CreateCurrencyWithAccounts;
      UpdateAddnlReportingCurrency(OldAdditionalReportingCurrency,CurrencyACY);
      CreateAndPostGeneralJournalLineWithGLAccounts(GenJournalLine,CurrencyFCY);

      // Exercise: Reverse Transaction Entry.
      ReverseGLEntries(GenJournalLine."Document No.",GenJournalLine."Account No.");

      // Verify: Verify Additional Currency Amount is reversed correctly.
      VerifyReversedAdditionalCurrencyAmount(GenJournalLine."Document No.",GenJournalLine."Account No.");

      // Tear Down: Reset initial value of Additional Reporting Currency.
      UpdateAddnlReportingCurrency(OldAdditionalReportingCurrency,OldAdditionalReportingCurrency);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,NavigatePageHandler,MessageHandler)]
    PROCEDURE GeneralJournalLineReverseFCYNavigate@10();
    VAR
      GenJournalLine@1004 : Record 81;
      CurrencyACY@1010 : Code[10];
      CurrencyFCY@1011 : Code[10];
      OldAdditionalReportingCurrency@1006 : Code[10];
      NoOfGLEntries@1013 : Integer;
      NoOfGLEntriesAfterReverse@1014 : Integer;
    BEGIN
      // Create and post General Journal Line having Vendor with Balance Account number and post reverse transaction entry for same abd Verify GL Register for same.

      // Setup: Create Additional Currency and Foreign Currency. Create and post General Journal Line.
      Initialize;
      CurrencyACY := CreateCurrencyWithAccounts;
      CurrencyFCY := CreateCurrencyWithAccounts;
      UpdateAddnlReportingCurrency(OldAdditionalReportingCurrency,CurrencyACY);

      CreateAndPostGeneralJournalLineWithGLAccounts(GenJournalLine,CurrencyFCY);

      PostingDate2 := GenJournalLine."Posting Date";  // Set Global Variable for Navigate.
      DocumentNo2 := GenJournalLine."Document No.";   // Set Global Variable for Navigate.

      // Exercise: Navigate Posted Entries and reverse Transaction Entry.
      NoOfGLEntries := NavigateEntries;
      ReverseGLEntries(GenJournalLine."Document No.",GenJournalLine."Account No.");

      // Navigate entries after Reversing the Transaction.
      CLEAR(TempDocumentEntry);
      NoOfGLEntriesAfterReverse := NavigateEntries;

      // Verify: Verify No. Of entries after Reversing the Transaction.
      Assert.AreEqual(NoOfGLEntries * 2,NoOfGLEntriesAfterReverse,ReverseError);

      // Tear Down: Reset initial value of Additional Reporting Currency.
      UpdateAddnlReportingCurrency(OldAdditionalReportingCurrency,OldAdditionalReportingCurrency);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE GeneralJournalLineReverseResidualRounding@23();
    VAR
      GenJournalLine@1004 : Record 81;
      GLAccountNo@1000 : Code[20];
      CurrencyACY@1010 : Code[10];
      CurrencyFCY@1011 : Code[10];
      OldAdditionalReportingCurrency@1006 : Code[10];
      LCYRoundingAccount@1016 : Code[20];
    BEGIN
      // Create and post General Journal Line with Residual Rounding Entry, Reverse Transaction and verify Additional Currency Amount is reversed correctly.

      // Setup: Create Additional Currency and Foreign Currency. Create and post General Journal Line with Residual Rounding Entry.
      Initialize;
      CurrencyACY := CreateCurrencyWithAccounts;
      CurrencyFCY := CreateCurrencyWithAccounts;
      LCYRoundingAccount := UpdateLCYRounding(CurrencyFCY);

      UpdateAddnlReportingCurrency(OldAdditionalReportingCurrency,CurrencyACY);

      GLAccountNo := CreateGeneralJournalLineForResidual(GenJournalLine,CurrencyFCY);

      // Exercise: Reverse Transaction Entry.
      ReverseGLEntries(GenJournalLine."Document No.",GLAccountNo);

      // Verify: Verify Additional Currency Amount for Residual Entry is Reversed .
      VerifyReversedAdditionalCurrencyAmount(GenJournalLine."Document No.",LCYRoundingAccount);

      // Tear Down: Reset initial value of Additional Reporting Currency.
      UpdateAddnlReportingCurrency(OldAdditionalReportingCurrency,OldAdditionalReportingCurrency);
    END;

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      CLEAR(TempDocumentEntry);
      CLEAR(PostingDate2);
      CLEAR(DocumentNo2);
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndUpdateGLAccount@47(VAR GLAccount@1000 : Record 15);
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      UpdateGLAccountVATPostingGroup(GLAccount);
    END;

    LOCAL PROCEDURE CreateCurrencyAndExchangeRate@48() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      Currency.GET(LibraryERM.CreateCurrencyWithGLAccountSetup);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCurrencyWithAccounts@65() CurrencyCode : Code[10];
    BEGIN
      CurrencyCode := CreateCurrencyAndExchangeRate;
      UpdateAccountsInCurrency(CurrencyCode);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@19(VAR GenJournalLine@1005 : Record 81;DocumentType@1004 : Option;AccountType@1002 : Option;AccountNo@1001 : Code[20];Amount@1003 : Decimal);
    VAR
      GenJournalBatch@1000 : Record 232;
    BEGIN
      SelectGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,AccountType,AccountNo,Amount);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLineForResidual@28(VAR GenJournalLine@1003 : Record 81;CurrencyCode@1004 : Code[10]) : Code[20];
    VAR
      GLAccount@1000 : Record 15;
      GLAccount2@1001 : Record 15;
      GenJournalBatch@1002 : Record 232;
      GLAccountNo@1007 : Code[20];
      DocumentNo@1005 : Code[20];
    BEGIN
      // Create and Post General Journal Line with Random values.
      CreateAndUpdateGLAccount(GLAccount);
      CreateAndUpdateGLAccount(GLAccount2);

      SelectGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",LibraryRandom.RandDec(100,2) + 100);
      DocumentNo := GenJournalLine."Document No.";
      GLAccountNo := GenJournalLine."Account No.";
      UpdateGeneralLineForResidual(GenJournalLine,CurrencyCode,DocumentNo,FALSE);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",GLAccount2."No.",-GenJournalLine.Amount);
      UpdateGeneralLineForResidual(GenJournalLine,CurrencyCode,DocumentNo,TRUE);

      // Insert Residual Rounding entry.
      CODEUNIT.RUN(CODEUNIT::"Adjust Gen. Journal Balance",GenJournalLine);

      // Post General Journal Line.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      EXIT(GLAccountNo);
    END;

    LOCAL PROCEDURE CreateAndPostGeneralJournalLineWithGLAccounts@36(VAR GenJournalLine@1000 : Record 81;CurrencyCode@1001 : Code[10]);
    VAR
      GLAccount@1003 : Record 15;
      GLAccount2@1002 : Record 15;
    BEGIN
      CreateAndUpdateGLAccount(GLAccount);
      CreateAndUpdateGLAccount(GLAccount2);

      // Create General Journal Line with Random Values.
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",
        -LibraryRandom.RandInt(100));
      ModifyGeneralJournalLine(GenJournalLine,GLAccount2."No.",CurrencyCode);

      // Post General Journal Line.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE FindGLEntryTransactionNo@3(DocumentNo@1001 : Code[20];AccountNo@1002 : Code[20]) : Integer;
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      FilterGLEntry(GLEntry,DocumentNo,AccountNo);
      EXIT(GLEntry."Transaction No.");
    END;

    LOCAL PROCEDURE FilterGLEntry@67(VAR GLEntry@1000 : Record 17;DocumentNo@1001 : Code[20];AccountNo@1002 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",AccountNo);
      GLEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE GetNoOfNavigateRecords@22(VAR DocumentEntry@1003 : Record 265;TableID@1000 : Integer) : Integer;
    BEGIN
      DocumentEntry.SETRANGE("Table ID",TableID);
      DocumentEntry.FINDFIRST;
      EXIT(DocumentEntry."No. of Records");
    END;

    LOCAL PROCEDURE NavigateEntries@39() : Integer;
    VAR
      Navigate@1002 : Page 344;
    BEGIN
      Navigate.SetDoc(PostingDate2,DocumentNo2);
      Navigate.RUN;
      EXIT(GetNoOfNavigateRecords(TempDocumentEntry,DATABASE::"G/L Entry"));
    END;

    LOCAL PROCEDURE ReverseGLEntries@37(DocumentNo@1000 : Code[20];AccountNo@1001 : Code[20]);
    VAR
      ReversalEntry@1002 : Record 179;
    BEGIN
      ReversalEntry.SetHideDialog(TRUE);
      ReversalEntry.ReverseTransaction(FindGLEntryTransactionNo(DocumentNo,AccountNo));
    END;

    LOCAL PROCEDURE SelectGeneralJournalBatch@58(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    LOCAL PROCEDURE UpdateAccountsInCurrency@49(CurrencyCode@1000 : Code[10]);
    VAR
      Currency@1001 : Record 4;
    BEGIN
      Currency.GET(CurrencyCode);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
    END;

    LOCAL PROCEDURE UpdateAddnlReportingCurrency@32(VAR OldAdditionalReportingCurrency@1000 : Code[10];AdditionalReportingCurrency@1002 : Code[10]);
    VAR
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      OldAdditionalReportingCurrency := GeneralLedgerSetup."Additional Reporting Currency";
      GeneralLedgerSetup."Additional Reporting Currency" := AdditionalReportingCurrency;
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGeneralLineForResidual@30(VAR GenJournalLine@1001 : Record 81;CurrencyCode@1000 : Code[10];DocumentNo@1002 : Code[20];IsResidual@1003 : Boolean);
    BEGIN
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.VALIDATE("Gen. Posting Type",GenJournalLine."Gen. Posting Type"::Purchase);
      GenJournalLine.VALIDATE("Bal. Gen. Posting Type",GenJournalLine."Bal. Gen. Posting Type"::Purchase);
      GenJournalLine.VALIDATE("Bal. Account No.",'');
      IF IsResidual THEN
        GenJournalLine.VALIDATE("Amount (LCY)",GenJournalLine."Amount (LCY)" + LibraryRandom.RandDec(10,2));
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGLAccountVATPostingGroup@106(VAR GLAccount@1000 : Record 15);
    VAR
      VATPostingSetup@1003 : Record 325;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      GLAccount.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateLCYRounding@27(CurrencyCode@1000 : Code[20]) : Code[20];
    VAR
      Currency@1001 : Record 4;
      GLAccount@1002 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      Currency.GET(CurrencyCode);
      Currency.VALIDATE("Conv. LCY Rndg. Debit Acc.",GLAccount."No.");
      Currency.VALIDATE("Conv. LCY Rndg. Credit Acc.",GLAccount."No.");
      Currency.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE ModifyGeneralJournalLine@7(GenJournalLine@1000 : Record 81;BalanceAccountNo@1001 : Code[20];CurrencyCode@1002 : Code[10]);
    BEGIN
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",BalanceAccountNo);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.VALIDATE("Gen. Posting Type",GenJournalLine."Gen. Posting Type"::Purchase);
      GenJournalLine.VALIDATE("Bal. Gen. Posting Type",GenJournalLine."Bal. Gen. Posting Type"::Purchase);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyReversedAdditionalCurrencyAmount@4(DocumentNo@1000 : Code[20];AccountNo@1003 : Code[20]);
    VAR
      GLEntry@1001 : Record 17;
      GLEntry2@1002 : Record 17;
    BEGIN
      FilterGLEntry(GLEntry,DocumentNo,AccountNo);
      GLEntry2.GET(GLEntry."Reversed by Entry No.");  // GLEntry2 used to Get the Revarsal Entry.
      GLEntry2.TESTFIELD("Additional-Currency Amount",-GLEntry."Additional-Currency Amount");
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@78(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Handler for confirmation messages, always send positive reply.
      Reply := TRUE;
    END;

    [PageHandler]
    PROCEDURE NavigatePageHandler@18(VAR Navigate@1000 : Page 344);
    BEGIN
      Navigate.SetDoc(PostingDate2,DocumentNo2);
      Navigate.UpdateNavigateForm(FALSE);
      Navigate.FindRecordsOnOpen;

      TempDocumentEntry.DELETEALL;
      Navigate.ReturnDocumentEntry(TempDocumentEntry);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    BEGIN
    {
      // [FEATURE] [Reverse] [Reverse Transaction] [ACY]
       1. Create and post General Journal Line, Reverse Transaction and verify Additional Currency Amount is reversed correctly.
       2. Create and post General Journal Line with ACY, Reverse Transaction and verify Additional Currency Amount is reversed correctly.
       3. Create and post General Journal Line with FCY, Reverse Transaction and verify Additional Currency Amount is reversed correctly.
       4. Create and post General Journal Line with FCY, Reverse Transaction and verify Entries on Navigate Windows.
       5. Create and post General Journal Line with Residual Rounding Entry, Reverse Transaction and verify Additional Currency Amount is reversed correctly.

      TFS_TS_ID = 252987
      Covers Test cases:
      ---------------------------------------------------
      Test Function Name                          TFS ID
      ---------------------------------------------------
      GeneralJournalLineReverse                   130719
      GeneralJournalLineReverseACY                130719
      GeneralJournalLineReverseFCY                130719
      GeneralJournalLineReverseFCYNavigate        130719
      GeneralJournalLineReverseResidualRounding   130719
    }
    END.
  }
}

