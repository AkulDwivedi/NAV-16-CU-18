OBJECT Codeunit 134554 ERM Cash Flow - Posting
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CFHelper@1003 : Codeunit 131332;
      LibraryRandom@1002 : Codeunit 130440;
      Assert@1001 : Codeunit 130000;
      LibraryCF@1004 : Codeunit 131331;
      LibraryERM@1005 : Codeunit 131300;
      RecordNotDeleted@1011 : TextConst 'ENU=Records in table %1 was not deleted.';
      BeforeAndAfterCounter@1010 : TextConst 'ENU=Counters dosn''t match: before: %1 and after: %2.';
      WrongAmounta@1009 : TextConst 'ENU=Amounts before and after posting dosn''t match.';

    [Test]
    PROCEDURE Test_CFJnlPostBatch@6();
    VAR
      CashFlowForecast@1001 : Record 840;
      CFWorksheetLine@1005 : Record 846;
      CFForecastEntry@1003 : Record 847;
      CounterBefore@1000 : Integer;
      CounterAfter@1002 : Integer;
      AmountBefore@1004 : Decimal;
      AmountAfter@1006 : Decimal;
      ConsiderSource@1007 : ARRAY [11] OF Boolean;
    BEGIN
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);

      WITH CashFlowForecast DO BEGIN
        ConsiderAllSources(ConsiderSource);
        CFHelper.FillJournal(ConsiderSource,"No.",FALSE);

        CFWorksheetLine.SETCURRENTKEY("Cash Flow Forecast No.");
        CFWorksheetLine.SETRANGE("Cash Flow Forecast No.","No.");
        CounterBefore := CFWorksheetLine.COUNT;
        CFWorksheetLine.CALCSUMS("Amount (LCY)");
        AmountBefore := CFWorksheetLine."Amount (LCY)";

        PostBatch(CFWorksheetLine);

        // Validate results
        CFForecastEntry.SETCURRENTKEY("Cash Flow Forecast No.");
        CFForecastEntry.SETRANGE("Cash Flow Forecast No.","No.");
        CounterAfter := CFForecastEntry.COUNT;
        CFForecastEntry.CALCSUMS("Amount (LCY)");
        AmountAfter := CFForecastEntry."Amount (LCY)";

        Assert.AreEqual(CounterBefore,CounterAfter,STRSUBSTNO(BeforeAndAfterCounter,CounterBefore,CounterAfter));
        Assert.AreEqual(AmountBefore,AmountAfter,WrongAmounta);
      END;
    END;

    [Test]
    PROCEDURE Test_CF_OnDelete@5();
    VAR
      CFAccountComment@1000 : Record 842;
      CashFlowForecast@1001 : Record 840;
      CFWorksheetLine@1005 : Record 846;
      CFForecastEntry@1003 : Record 847;
      ConsiderSource@1002 : ARRAY [11] OF Boolean;
    BEGIN
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);

      WITH CashFlowForecast DO BEGIN
        CFAccountComment."Table Name" := CFAccountComment."Table Name"::"Cash Flow Forecast";
        CFAccountComment."No." := "No.";
        CFAccountComment."Line No." := 1;
        CFAccountComment.Comment := "No.";
        CFAccountComment.INSERT;

        ConsiderAllSources(ConsiderSource);
        CFHelper.FillJournal(ConsiderSource,"No.",FALSE);

        CFWorksheetLine.SETCURRENTKEY("Cash Flow Forecast No.");
        CFWorksheetLine.SETRANGE("Cash Flow Forecast No.","No.");
        PostBatch(CFWorksheetLine);

        DELETE(TRUE);

        // Validate results
        CFAccountComment.RESET;
        CFAccountComment.SETRANGE("Table Name",CFAccountComment."Table Name"::"Cash Flow Forecast");
        CFAccountComment.SETRANGE("No.","No.");
        Assert.AreEqual(0,CFAccountComment.COUNT,STRSUBSTNO(RecordNotDeleted,CFAccountComment.TABLECAPTION));

        CFForecastEntry.SETCURRENTKEY("Cash Flow Forecast No.");
        CFForecastEntry.SETRANGE("Cash Flow Forecast No.","No.");
        Assert.AreEqual(0,CFForecastEntry.COUNT,STRSUBSTNO(RecordNotDeleted,CFForecastEntry.TABLECAPTION));
      END;
    END;

    [Test]
    PROCEDURE TestPostingWithEmptyBudgetName@3();
    VAR
      CashFlowForecast@1001 : Record 840;
      CFWorksheetLine@1000 : Record 846;
      GLBudgetEntry@1002 : Record 96;
    BEGIN
      // Setup
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      CreateGLBudgetCFWorksheetLine(GLBudgetEntry,CFWorksheetLine,CashFlowForecast,LibraryRandom.RandDec(100,2));

      // Exercise
      CFWorksheetLine.VALIDATE("G/L Budget Name",'');
      CFWorksheetLine.MODIFY;

      // Verify
      ASSERTERROR LibraryCF.PostJournalLines(CFWorksheetLine);
      Assert.ExpectedError(STRSUBSTNO('%1 must have a value in',CFWorksheetLine."G/L Budget Name"));
    END;

    [Test]
    PROCEDURE TestPostingBudgetNameForNotBudgetSourceType@10();
    VAR
      CashFlowForecast@1001 : Record 840;
      CFWorksheetLine@1000 : Record 846;
      GLBudgetEntry@1002 : Record 96;
      CFForecastEntry@1003 : Record 847;
    BEGIN
      // Setup
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      CreateGLBudgetCFWorksheetLine(GLBudgetEntry,CFWorksheetLine,CashFlowForecast,LibraryRandom.RandDec(100,2));

      // Exercise
      CFWorksheetLine.VALIDATE("Source Type",LibraryRandom.RandIntInRange(1,CFWorksheetLine."Source Type"::"G/L Budget" - 1));
      CFWorksheetLine.MODIFY;
      LibraryCF.PostJournalLines(CFWorksheetLine);

      // Verify
      CFForecastEntry.SETRANGE("Cash Flow Forecast No.",CashFlowForecast."No.");
      CFForecastEntry.FINDFIRST;
      CFForecastEntry.TESTFIELD("G/L Budget Name",'');
    END;

    [Test]
    PROCEDURE UpdateGLBudgetEntries@2();
    VAR
      CashFlowForecast@1001 : Record 840;
      CFWorksheetLine@1004 : Record 846;
      CFForecastEntry@1000 : Record 847;
      GLBudgetEntry@1002 : Record 96;
      ExpectedAmount@1010 : Decimal;
    BEGIN
      // Setup
      CFHelper.CreateCashFlowForecastDefault(CashFlowForecast);
      ExpectedAmount := LibraryRandom.RandDec(100,2);
      CreateGLBudgetCFWorksheetLine(GLBudgetEntry,CFWorksheetLine,CashFlowForecast,-ExpectedAmount);

      // Exercise
      LibraryCF.PostJournalLines(CFWorksheetLine);

      // Verify
      CFForecastEntry.SETRANGE("Cash Flow Forecast No.",CashFlowForecast."No.");
      CFForecastEntry.FINDFIRST;
      CFForecastEntry.TESTFIELD("Source Type",CFForecastEntry."Source Type"::"G/L Budget");
      CFForecastEntry.TESTFIELD("G/L Budget Name",GLBudgetEntry."Budget Name");
      CFHelper.VerifyExpectedCFAmount(-ExpectedAmount,CFForecastEntry."Amount (LCY)");
    END;

    LOCAL PROCEDURE CreateGLBudgetCFWorksheetLine@17(VAR GLBudgetEntry@1004 : Record 96;VAR CFWorksheetLine@1005 : Record 846;VAR CashFlowForecast@1006 : Record 840;CashFlowAmount@1007 : Decimal);
    VAR
      CFAccount@1003 : Record 841;
      GLAccount@1002 : Record 15;
      GLBudgetName@1001 : Record 95;
    BEGIN
      CFHelper.FindCFBudgetAccount(CFAccount);
      CFHelper.FindFirstGLAccFromCFAcc(GLAccount,CFAccount);
      LibraryERM.CreateGLBudgetName(GLBudgetName);
      LibraryERM.CreateGLBudgetEntry(GLBudgetEntry,CashFlowForecast."G/L Budget From",GLAccount."No.",GLBudgetName.Name);
      GLBudgetEntry.VALIDATE(Amount,LibraryRandom.RandDec(100,2));
      GLBudgetEntry.MODIFY(TRUE);

      WITH CFWorksheetLine DO BEGIN
        INIT;
        "Cash Flow Date" := WORKDATE;
        "Document No." := FORMAT(LibraryRandom.RandInt(50));
        "Cash Flow Forecast No." := CashFlowForecast."No.";
        Description := "Document No.";
        "Cash Flow Account No." := CFAccount."No.";
        "Amount (LCY)" := CashFlowAmount;
        "Source Type" := "Source Type"::"G/L Budget";
        "Source No." := GLAccount."No.";
        "G/L Budget Name" := GLBudgetName.Name;
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ConsiderAllSources@1(VAR ConsiderSource@1000 : ARRAY [11] OF Boolean);
    VAR
      SourceType@1001 : Integer;
    BEGIN
      FOR SourceType := 1 TO ARRAYLEN(ConsiderSource) DO
        ConsiderSource[SourceType] := TRUE;
    END;

    LOCAL PROCEDURE PostBatch@8(VAR CFWorksheetLine@1000 : Record 846);
    BEGIN
      CFWorksheetLine.FINDFIRST;
      CODEUNIT.RUN(CODEUNIT::"Cash Flow Wksh.-Register Batch",CFWorksheetLine);
    END;

    BEGIN
    {
      // [FEATURE] [Cash Flow]
    }
    END.
  }
}

