OBJECT Codeunit 138027 SMB Aged Accounts
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      LibrarySmallBusiness@1000 : Codeunit 132213;
      WrongAmmountColumnTxt@1003 : TextConst 'ENU=Wrong amount for data column %1.';
      LibraryUtility@1004 : Codeunit 131000;
      ExpectedRowCount@1002 : Integer;

    [Test]
    PROCEDURE TestChartDataPeriodLengthWeek@1();
    VAR
      CustLedgerEntry@1002 : Record 21;
      BusinessChartBuffer@1007 : Record 485;
      TempEntryNoAmountBuffer@1009 : TEMPORARY Record 386;
      AgedAccReceivable@1006 : Codeunit 763;
      CustomerNo@1000 : Code[20];
      AmountSum@1011 : Decimal;
      StartDate@1001 : Date;
    BEGIN
      // Create Customer Ledger Entries
      StartDate := CreateStartDate;
      CustomerNo := CreateCustomer;
      CreateCustomerLedgEntriesWeekView(CustLedgerEntry,CustomerNo,StartDate);

      // Generate Aged Accounts Receivable Data Set
      BusinessChartBuffer."Period Filter Start Date" := StartDate;
      BusinessChartBuffer."Period Length" := BusinessChartBuffer."Period Length"::Week;

      AgedAccReceivable.UpdateDataPerCustomer(
        BusinessChartBuffer,CustomerNo,TempEntryNoAmountBuffer);

      // Verify Data Points
      Assert.AreEqual(14,TempEntryNoAmountBuffer.COUNT,'Wrong number of Data Columns in Data Buffer Table');

      AmountSum := 0;
      IF TempEntryNoAmountBuffer.FINDSET THEN
        REPEAT
          AmountSum := AmountSum + TempEntryNoAmountBuffer.Amount;

          CASE TempEntryNoAmountBuffer."Entry No." OF
            0:
              Assert.AreEqual(
                1000,TempEntryNoAmountBuffer.Amount,STRSUBSTNO(WrongAmmountColumnTxt,TempEntryNoAmountBuffer."Entry No."));
            1:
              Assert.AreEqual(
                11000,TempEntryNoAmountBuffer.Amount,STRSUBSTNO(WrongAmmountColumnTxt,TempEntryNoAmountBuffer."Entry No."));
            2:
              Assert.AreEqual(
                9000,TempEntryNoAmountBuffer.Amount,STRSUBSTNO(WrongAmmountColumnTxt,TempEntryNoAmountBuffer."Entry No."));
            3,4,5,6,7,8,9,10,11,12,13:
              Assert.AreEqual(
                0,TempEntryNoAmountBuffer.Amount,STRSUBSTNO(WrongAmmountColumnTxt,TempEntryNoAmountBuffer."Entry No."));
          END;
        UNTIL TempEntryNoAmountBuffer.NEXT = 0;

      Assert.AreEqual(21000,AmountSum,'Wrong total amount');
    END;

    [Test]
    PROCEDURE TestChartDataPeriodLengthMonth@17();
    VAR
      CustLedgerEntry@1002 : Record 21;
      BusinessChartBuffer@1007 : Record 485;
      TempEntryNoAmountBuffer@1009 : TEMPORARY Record 386;
      AgedAccReceivable@1006 : Codeunit 763;
      CustomerNo@1000 : Code[20];
      AmountSum@1011 : Decimal;
      StartDate@1001 : Date;
    BEGIN
      // Create Customer Ledger Entries
      StartDate := CreateStartDate;
      CustomerNo := CreateCustomer;
      CreateCustomerLedgEntriesMonthView(CustLedgerEntry,CustomerNo,StartDate);

      // Generate Aged Accounts Receivable Data Set
      BusinessChartBuffer."Period Filter Start Date" := StartDate;
      BusinessChartBuffer."Period Length" := BusinessChartBuffer."Period Length"::Month;

      AgedAccReceivable.UpdateDataPerCustomer(
        BusinessChartBuffer,CustomerNo,TempEntryNoAmountBuffer);

      // Verify Data Points
      Assert.AreEqual(14,TempEntryNoAmountBuffer.COUNT,'Wrong number of Data Columns in Data Buffer Table');

      AmountSum := 0;
      IF TempEntryNoAmountBuffer.FINDSET THEN
        REPEAT
          AmountSum := AmountSum + TempEntryNoAmountBuffer.Amount;

          CASE TempEntryNoAmountBuffer."Entry No." OF
            0:
              Assert.AreEqual(
                1500,TempEntryNoAmountBuffer.Amount,STRSUBSTNO(WrongAmmountColumnTxt,TempEntryNoAmountBuffer."Entry No."));
            1,2,3,4,5,6,7,8,9,10,11:
              Assert.AreEqual(
                0,TempEntryNoAmountBuffer.Amount,STRSUBSTNO(WrongAmmountColumnTxt,TempEntryNoAmountBuffer."Entry No."));
            12:
              Assert.AreEqual(
                17000,TempEntryNoAmountBuffer.Amount,STRSUBSTNO(WrongAmmountColumnTxt,TempEntryNoAmountBuffer."Entry No."));
            13:
              Assert.AreEqual(
                12500,TempEntryNoAmountBuffer.Amount,STRSUBSTNO(WrongAmmountColumnTxt,TempEntryNoAmountBuffer."Entry No."));
          END;
        UNTIL TempEntryNoAmountBuffer.NEXT = 0;

      Assert.AreEqual(31000,AmountSum,'Wrong total amount');
    END;

    [Test]
    PROCEDURE TestChartDataPeriodLengthYear@25();
    VAR
      CustLedgerEntry@1002 : Record 21;
      BusinessChartBuffer@1007 : Record 485;
      TempEntryNoAmountBuffer@1009 : TEMPORARY Record 386;
      AgedAccReceivable@1006 : Codeunit 763;
      CustomerNo@1000 : Code[20];
      AmountSum@1011 : Decimal;
      StartDate@1001 : Date;
    BEGIN
      // Create Customer Ledger Entries
      StartDate := CreateStartDate;
      CustomerNo := CreateCustomer;
      CreateCustomerLedgEntriesYearView(CustLedgerEntry,CustomerNo,StartDate);

      // Generate Aged Accounts Receivable Data Set
      BusinessChartBuffer."Period Filter Start Date" := StartDate;
      BusinessChartBuffer."Period Length" := BusinessChartBuffer."Period Length"::Year;

      AgedAccReceivable.UpdateDataPerCustomer(
        BusinessChartBuffer,CustomerNo,TempEntryNoAmountBuffer);

      // Verify Data Points
      Assert.AreEqual(7,TempEntryNoAmountBuffer.COUNT,'Wrong number of Data Columns in Data Buffer Table');

      AmountSum := 0;
      IF TempEntryNoAmountBuffer.FINDSET THEN
        REPEAT
          AmountSum := AmountSum + TempEntryNoAmountBuffer.Amount;

          CASE TempEntryNoAmountBuffer."Entry No." OF
            0:
              Assert.AreEqual(
                2000,TempEntryNoAmountBuffer.Amount,STRSUBSTNO(WrongAmmountColumnTxt,TempEntryNoAmountBuffer."Entry No."));
            1,2,3,4:
              Assert.AreEqual(
                0,TempEntryNoAmountBuffer.Amount,STRSUBSTNO(WrongAmmountColumnTxt,TempEntryNoAmountBuffer."Entry No."));
            5:
              Assert.AreEqual(
                22000,TempEntryNoAmountBuffer.Amount,STRSUBSTNO(WrongAmmountColumnTxt,TempEntryNoAmountBuffer."Entry No."));
            6:
              Assert.AreEqual(
                7500,TempEntryNoAmountBuffer.Amount,STRSUBSTNO(WrongAmmountColumnTxt,TempEntryNoAmountBuffer."Entry No."));
          END;
        UNTIL TempEntryNoAmountBuffer.NEXT = 0;

      Assert.AreEqual(31500,AmountSum,'Wrong total amount');
    END;

    [Test]
    PROCEDURE TestChartDataPerGroupPeriodWeek@18();
    VAR
      BusinessChartBuffer@1007 : Record 485;
      TempEntryNoAmountBuffer@1009 : TEMPORARY Record 386;
      AgedAccReceivable@1006 : Codeunit 763;
      CustGroupCode@1004 : Code[10];
      StartDate@1003 : Date;
      StartAmount@1001 : Decimal;
      NoOfEntriesPerPeriod@1000 : Integer;
    BEGIN
      // Create Customer Ledger Entries per group
      StartDate := WORKDATE;

      // Create entries to exclude from verification
      CreateCustGroupLedgEntries2perWeek(CreateCustPostingGroup,StartDate,100);
      CreateCustGroupLedgEntries2perWeek(CreateCustPostingGroup,StartDate,1);

      // Create the entries for verification
      CustGroupCode := CreateCustPostingGroup;
      StartAmount := 1000;
      NoOfEntriesPerPeriod := CreateCustGroupLedgEntries2perWeek(CustGroupCode,StartDate,StartAmount);
      NoOfEntriesPerPeriod += CreateCustGroupLedgEntries2perWeek(CustGroupCode,StartDate,StartAmount);

      // Generate Aged Accounts Receivable Data Set per group
      BusinessChartBuffer."Period Filter Start Date" := StartDate;
      BusinessChartBuffer."Period Length" := BusinessChartBuffer."Period Length"::Week;
      AgedAccReceivable.UpdateDataPerGroup(BusinessChartBuffer,TempEntryNoAmountBuffer);

      // Verify Data Points for Customer Posting Group
      TempEntryNoAmountBuffer.SETRANGE("Business Unit Code",CustGroupCode);
      Assert.AreEqual(14,TempEntryNoAmountBuffer.COUNT,'Wrong number of Data Columns in Data Buffer Table');
      IF TempEntryNoAmountBuffer.FINDSET THEN
        REPEAT
          Assert.AreEqual(
            NoOfEntriesPerPeriod * StartAmount * (TempEntryNoAmountBuffer."Entry No." + 1),
            TempEntryNoAmountBuffer.Amount,
            STRSUBSTNO(WrongAmmountColumnTxt,TempEntryNoAmountBuffer."Entry No."));
        UNTIL TempEntryNoAmountBuffer.NEXT = 0;
    END;

    [Test]
    [HandlerFunctions(CustLedgEntriesPageHandler)]
    PROCEDURE TestReceivableEntriesDrillDown@10();
    VAR
      CustLedgerEntry@1002 : Record 21;
      BusinessChartBuffer@1007 : Record 485;
      TempEntryNoAmountBuffer@1009 : TEMPORARY Record 386;
      AgedAccReceivable@1006 : Codeunit 763;
      CustomerNo@1000 : Code[20];
      StartDate@1001 : Date;
    BEGIN
      // Create Customer Ledger Entries
      StartDate := CreateStartDate;
      CustomerNo := CreateCustomer;
      CreateCustomerLedgEntriesWeekView(CustLedgerEntry,CustomerNo,StartDate);

      // Generate Aged Accounts Receivable Data Set
      BusinessChartBuffer."Period Filter Start Date" := StartDate;
      BusinessChartBuffer."Period Length" := BusinessChartBuffer."Period Length"::Week;

      AgedAccReceivable.UpdateDataPerCustomer(
        BusinessChartBuffer,CustomerNo,TempEntryNoAmountBuffer);

      // Verification - drill down on the first 4 columns
      CLEAR(ExpectedRowCount);
      // Verify DrillDown for Data Point "0"
      BusinessChartBuffer."Drill-Down X Index" := 0;
      ExpectedRowCount := 1;
      AgedAccReceivable.DrillDown(
        BusinessChartBuffer,CustomerNo,TempEntryNoAmountBuffer);

      // Verify DrillDown for Data Point "0"
      BusinessChartBuffer."Drill-Down X Index" := 1;
      ExpectedRowCount := 2;
      AgedAccReceivable.DrillDown(
        BusinessChartBuffer,CustomerNo,TempEntryNoAmountBuffer);

      // Verify DrillDown for Data Point "2"
      BusinessChartBuffer."Drill-Down X Index" := 2;
      ExpectedRowCount := 3;
      AgedAccReceivable.DrillDown(
        BusinessChartBuffer,CustomerNo,TempEntryNoAmountBuffer);

      // Verify DrillDown for Data Point "3" - Drill Down page is not invoked
      BusinessChartBuffer."Drill-Down X Index" := 3;
      ExpectedRowCount := 0;
      AgedAccReceivable.DrillDown(
        BusinessChartBuffer,CustomerNo,TempEntryNoAmountBuffer);
    END;

    [Test]
    [HandlerFunctions(CustLedgEntriesPageHandler)]
    PROCEDURE TestReceivableGroupEntDrillDown@22();
    VAR
      BusinessChartBuffer@1007 : Record 485;
      TempEntryNoAmountBuffer@1009 : TEMPORARY Record 386;
      AgedAccReceivable@1006 : Codeunit 763;
      CustGroupCode@1004 : Code[10];
      StartDate@1003 : Date;
      StartAmount@1001 : Decimal;
      NoOfEntriesPerPeriod@1000 : Integer;
    BEGIN
      // Create Customer Ledger Entries per group
      StartDate := TODAY;
      // Create entries to exclude from verification
      CreateCustGroupLedgEntries2perWeek(CreateCustPostingGroup,StartDate,100);
      CreateCustGroupLedgEntries2perWeek(CreateCustPostingGroup,StartDate,1);

      // Create the entries for verification
      CustGroupCode := CreateCustPostingGroup;
      StartAmount := 1000;
      NoOfEntriesPerPeriod := CreateCustGroupLedgEntries2perWeek(CustGroupCode,StartDate,StartAmount);
      NoOfEntriesPerPeriod += CreateCustGroupLedgEntries2perWeek(CustGroupCode,StartDate,StartAmount);

      // Generate Aged Accounts Receivable Data Set per group
      BusinessChartBuffer."Period Filter Start Date" := StartDate;
      BusinessChartBuffer."Period Length" := BusinessChartBuffer."Period Length"::Week;
      AgedAccReceivable.UpdateDataPerGroup(BusinessChartBuffer,TempEntryNoAmountBuffer);

      // Verify DrillDown for Customer Posting Group
      TempEntryNoAmountBuffer.SETRANGE("Business Unit Code",CustGroupCode);
      Assert.AreEqual(14,TempEntryNoAmountBuffer.COUNT,'Wrong number of Data Columns in Data Buffer Table');
      IF TempEntryNoAmountBuffer.FINDSET THEN
        REPEAT
          ExpectedRowCount := NoOfEntriesPerPeriod;
          AgedAccReceivable.DrillDownCustLedgEntries(
            '',TempEntryNoAmountBuffer."Business Unit Code",
            TempEntryNoAmountBuffer."Start Date",TempEntryNoAmountBuffer."End Date");
        UNTIL TempEntryNoAmountBuffer.NEXT = 0;
    END;

    [Test]
    PROCEDURE TestOnOpenReceivableChart@23();
    VAR
      BusinessChartUserSetup@1001 : Record 487;
      AgedAccReceivableChart@1000 : TestPage 768;
      Found@1002 : Boolean;
    BEGIN
      IF BusinessChartUserSetup.GET(USERID,BusinessChartUserSetup."Object Type"::Page,GetAgedAccReceivableChartID) THEN
        BusinessChartUserSetup.DELETE;

      AgedAccReceivableChart.OPENVIEW;
      Found := BusinessChartUserSetup.GET(USERID,BusinessChartUserSetup."Object Type"::Page,GetAgedAccReceivableChartID);

      // Verify that the default values for User Setup are populated on open chart page
      Assert.IsTrue(Found,'Business Chart record not inserted');
      Assert.AreEqual(
        FORMAT(BusinessChartUserSetup."Period Length"::Week),
        FORMAT(BusinessChartUserSetup."Period Length"),'Wrong default value');
    END;

    [Test]
    PROCEDURE TestOnCloseReceivableChart@12();
    VAR
      BusinessChartUserSetup@1002 : Record 487;
      Found@1000 : Boolean;
    BEGIN
      BusinessChartUserSetup."Period Length" := BusinessChartUserSetup."Period Length"::Year;
      BusinessChartUserSetup.SaveSetupPage(BusinessChartUserSetup,GetAgedAccReceivableChartID);

      Found := BusinessChartUserSetup.GET(USERID,BusinessChartUserSetup."Object Type"::Page,GetAgedAccReceivableChartID);

      // Verify that the selected values are saved
      Assert.IsTrue(Found,'Business Chart record not inserted');
      Assert.AreEqual(
        FORMAT(BusinessChartUserSetup."Period Length"::Year),
        FORMAT(BusinessChartUserSetup."Period Length"),'Wrong period length');
    END;

    [Test]
    PROCEDURE TestInvPmtAvgDaysLater@4();
    VAR
      CustLedgerEntry@1002 : Record 21;
      DetailedCustLedgEntry@1007 : Record 379;
      AgedAccReceivable@1003 : Codeunit 763;
      CustomerNo@1001 : Code[20];
      DueDate@1004 : Date;
      PaymentDate@1005 : Date;
      NoOfInv@1009 : Integer;
      DaysTotal@1010 : Integer;
      Days@1011 : Integer;
    BEGIN
      // The average days for payment of invoices is calculated by total no of days
      // counted from Due Date to Payment Date divided by total number of payed invoices.
      // A positive value is late payment, a negative value is early payment.
      CustomerNo := CreateCustomer;

      // Invoice 1
      DueDate := CALCDATE('<1M>',WORKDATE);
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,WORKDATE,DueDate,0,FALSE,CustLedgerEntry."Document Type"::Invoice,'');
      Days := 7; // Payment 7 days after due date
      PaymentDate := CalcDateDays(Days,DueDate);
      CreateDetailedCustLedgEntry(
        CustLedgerEntry."Entry No.",GetDetailedCustLedgEntryNo,PaymentDate,DetailedCustLedgEntry."Document Type"::Payment);

      NoOfInv += 1;
      DaysTotal += Days;

      // Invoice 2
      DueDate := CALCDATE('<2M>',WORKDATE);
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,WORKDATE,DueDate,0,FALSE,CustLedgerEntry."Document Type"::Invoice,'');
      Days := 4; // Payment 4 days after due date
      PaymentDate := CalcDateDays(Days,DueDate);
      CreateDetailedCustLedgEntry(
        CustLedgerEntry."Entry No.",0,PaymentDate,DetailedCustLedgEntry."Document Type"::Payment);

      NoOfInv += 1;
      DaysTotal += Days;

      // Verify
      Assert.AreEqual(
        ROUND(DaysTotal / NoOfInv,1),
        AgedAccReceivable.InvoicePaymentDaysAverage(CustomerNo),
        'Wrong calculation of days to pay invoice');
    END;

    [Test]
    PROCEDURE TestInvPmtAvgDaysSooner@11();
    VAR
      CustLedgerEntry@1002 : Record 21;
      DetailedCustLedgEntry@1007 : Record 379;
      AgedAccReceivable@1003 : Codeunit 763;
      CustomerNo@1001 : Code[20];
      DueDate@1004 : Date;
      PaymentDate@1005 : Date;
      NoOfInv@1011 : Integer;
      DaysTotal@1010 : Integer;
      Days@1009 : Integer;
    BEGIN
      // The average days for payment of invoices is calculated by total no of days
      // counted from Due Date to Payment Date divided by total number of payed invoices.
      // A positive value is late payment, a negative value is early payment.
      CustomerNo := CreateCustomer;

      // Invoice 1
      DueDate := CALCDATE('<1M>',WORKDATE);
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,WORKDATE,DueDate,0,FALSE,CustLedgerEntry."Document Type"::Invoice,'');
      Days := -12; // Payment 12 days before due date
      PaymentDate := CalcDateDays(Days,DueDate);
      CreateDetailedCustLedgEntry(
        CustLedgerEntry."Entry No.",0,PaymentDate,DetailedCustLedgEntry."Document Type"::Payment);

      NoOfInv += 1;
      DaysTotal += Days;

      // Invoice 2
      DueDate := CALCDATE('<2M>',WORKDATE);
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,WORKDATE,DueDate,0,FALSE,CustLedgerEntry."Document Type"::Invoice,'');
      // First payment 3 days before due date - this entry should be ignored by calculation since there is a later payment
      Days := -3;
      PaymentDate := CalcDateDays(Days,DueDate);
      CreateDetailedCustLedgEntry(
        CustLedgerEntry."Entry No.",0,PaymentDate,DetailedCustLedgEntry."Document Type"::Payment);
      Days := 2; // Last Payment 2 days after due date
      PaymentDate := CalcDateDays(Days,DueDate);
      CreateDetailedCustLedgEntry(
        CustLedgerEntry."Entry No.",0,PaymentDate,DetailedCustLedgEntry."Document Type"::Payment);

      NoOfInv += 1;
      DaysTotal += Days;

      // Verify
      Assert.AreEqual(
        ROUND(DaysTotal / NoOfInv,1),
        AgedAccReceivable.InvoicePaymentDaysAverage(CustomerNo),
        'Wrong calculation of days to pay invoice');
    END;

    [Test]
    PROCEDURE TestChartDataPayablesPeriodWeek@39();
    VAR
      BusinessChartBuffer@1007 : Record 485;
      TempEntryNoAmountBuffer@1002 : TEMPORARY Record 386;
      TempEntryNoAmountBuf2@1009 : TEMPORARY Record 386;
      AgedAccPayable@1006 : Codeunit 764;
      StartDate@1003 : Date;
      StartAmount@1001 : Decimal;
      NoOfEntriesPerPeriod@1000 : Integer;
    BEGIN
      StartDate := WORKDATE;
      BusinessChartBuffer."Period Filter Start Date" := StartDate;
      BusinessChartBuffer."Period Length" := BusinessChartBuffer."Period Length"::Week;

      // Data set before verification
      AgedAccPayable.UpdateData(BusinessChartBuffer,TempEntryNoAmountBuf2);

      // Create the entries for verification
      StartAmount := 1000;
      NoOfEntriesPerPeriod := CreateVendLedgEntries2perWeek(StartDate,StartAmount);
      NoOfEntriesPerPeriod += CreateVendLedgEntries2perWeek(StartDate,StartAmount);

      // Generate Aged Accounts Receivable Data Set
      AgedAccPayable.UpdateData(BusinessChartBuffer,TempEntryNoAmountBuffer);

      // Verify Data Points
      Assert.AreEqual(14,TempEntryNoAmountBuffer.COUNT,'Wrong number of Data Columns in Data Buffer Table');

      IF TempEntryNoAmountBuffer.FINDSET THEN
        REPEAT
          TempEntryNoAmountBuf2.GET('',TempEntryNoAmountBuffer."Entry No.");

          Assert.AreEqual(
            NoOfEntriesPerPeriod * StartAmount * (TempEntryNoAmountBuffer."Entry No." + 1),
            TempEntryNoAmountBuffer.Amount - TempEntryNoAmountBuf2.Amount,
            STRSUBSTNO(WrongAmmountColumnTxt,TempEntryNoAmountBuffer."Entry No."));
        UNTIL TempEntryNoAmountBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateCustomer@7() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySmallBusiness.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCustPostingGroup@19() : Code[10];
    VAR
      CustPostingGroup@1000 : Record 92;
    BEGIN
      CustPostingGroup.INIT;
      CustPostingGroup.Code := LibraryUtility.GenerateGUID;
      CustPostingGroup.INSERT;
      EXIT(CustPostingGroup.Code);
    END;

    LOCAL PROCEDURE CreateCustomerLedgEntriesWeekView@2(VAR CustLedgerEntry@1001 : Record 21;CustomerNo@1000 : Code[20];StartDate@1005 : Date);
    VAR
      PostingDate@1002 : Date;
      DueDate@1003 : Date;
      Amount@1004 : Decimal;
    BEGIN
      CustLedgerEntry."Entry No." := GetCustLedgEntryNo;

      // Data entries that is included in columns
      PostingDate := StartDate;
      DueDate := CALCDATE('<+1M>',PostingDate);
      Amount := 1000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,TRUE,CustLedgerEntry."Document Type"::Invoice,'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-2W>',StartDate);
      DueDate := CALCDATE('<+4D>',PostingDate);
      Amount := 2000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,TRUE,CustLedgerEntry."Document Type"::Invoice,'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-2W>',StartDate);
      DueDate := CALCDATE('<+5D>',PostingDate);
      Amount := 3000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,TRUE,CustLedgerEntry."Document Type"::Payment,'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-2W>',StartDate);
      DueDate := CALCDATE('<+6D>',PostingDate);
      Amount := 4000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,TRUE,CustLedgerEntry."Document Type"::"Credit Memo",'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-2W>',StartDate);
      DueDate := CALCDATE('<+7D>',PostingDate);
      Amount := 5000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,TRUE,CustLedgerEntry."Document Type"::Invoice,'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-2W>',StartDate);
      DueDate := CALCDATE('<+8D>',PostingDate);
      Amount := 6000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,TRUE,CustLedgerEntry."Document Type"::Invoice,'');

      // Data entries that is NOT included in columns
      CustLedgerEntry."Entry No." += 1;
      DueDate := CALCDATE('<+1M>',PostingDate);
      Amount := 1000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,FALSE,CustLedgerEntry."Document Type"::Invoice,'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-2W>',StartDate);
      DueDate := CALCDATE('<+5D>',PostingDate);
      Amount := 2000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,FALSE,CustLedgerEntry."Document Type"::Invoice,'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-2W>',StartDate);
      DueDate := CALCDATE('<+8D>',PostingDate);
      Amount := 3000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,FALSE,CustLedgerEntry."Document Type"::Invoice,'');
    END;

    LOCAL PROCEDURE CreateCustomerLedgEntriesMonthView@14(VAR CustLedgerEntry@1001 : Record 21;CustomerNo@1000 : Code[20];StartDate@1005 : Date);
    VAR
      PostingDate@1002 : Date;
      DueDate@1003 : Date;
      Amount@1004 : Decimal;
    BEGIN
      CustLedgerEntry."Entry No." := GetCustLedgEntryNo;

      // Data entries that is included in columns
      PostingDate := StartDate;
      DueDate := CALCDATE('<+1M>',PostingDate);
      Amount := 1500;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,TRUE,CustLedgerEntry."Document Type"::Invoice,'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-13M>',StartDate);
      DueDate := CALCDATE('<+2W>',PostingDate);
      Amount := 3000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,TRUE,CustLedgerEntry."Document Type"::Invoice,'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-13M>',StartDate);
      DueDate := CALCDATE('<+3W>',PostingDate);
      Amount := 4500;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,TRUE,CustLedgerEntry."Document Type"::Payment,'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-13M>',StartDate);
      DueDate := CALCDATE('<+4W>',PostingDate);
      Amount := 5000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,TRUE,CustLedgerEntry."Document Type"::"Credit Memo",'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-13M>',StartDate);
      DueDate := CALCDATE('<+5W>',PostingDate);
      Amount := 8000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,TRUE,CustLedgerEntry."Document Type"::Invoice,'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-13M>',StartDate);
      DueDate := CALCDATE('<+6W>',PostingDate);
      Amount := 9000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,TRUE,CustLedgerEntry."Document Type"::Invoice,'');

      // Data entries that is NOT included in columns
      CustLedgerEntry."Entry No." += 1;
      DueDate := CALCDATE('<+1M>',PostingDate);
      Amount := 1000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,FALSE,CustLedgerEntry."Document Type"::Invoice,'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-13M>',StartDate);
      DueDate := CALCDATE('<+3W>',PostingDate);
      Amount := 2000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,FALSE,CustLedgerEntry."Document Type"::Invoice,'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-13M>',StartDate);
      DueDate := CALCDATE('<+6W>',PostingDate);
      Amount := 3000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,FALSE,CustLedgerEntry."Document Type"::Invoice,'');
    END;

    LOCAL PROCEDURE CreateCustomerLedgEntriesYearView@21(VAR CustLedgerEntry@1001 : Record 21;CustomerNo@1000 : Code[20];StartDate@1005 : Date);
    VAR
      PostingDate@1002 : Date;
      DueDate@1003 : Date;
      Amount@1004 : Decimal;
    BEGIN
      CustLedgerEntry."Entry No." := GetCustLedgEntryNo;

      // Data entries that is included in columns
      PostingDate := StartDate;
      DueDate := CALCDATE('<+1M>',PostingDate);
      Amount := 2000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,TRUE,CustLedgerEntry."Document Type"::Invoice,'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-5Y-2W>',StartDate);
      DueDate := CALCDATE('<+1W+2D>',PostingDate);
      Amount := 3000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,TRUE,CustLedgerEntry."Document Type"::Invoice,'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-5Y-2W>',StartDate);
      DueDate := CALCDATE('<+1W+6D>',PostingDate);
      Amount := 4500;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,TRUE,CustLedgerEntry."Document Type"::Payment,'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-5Y-2W>',StartDate);
      DueDate := CALCDATE('<+1W+7D>',PostingDate);
      Amount := 5000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,TRUE,CustLedgerEntry."Document Type"::"Credit Memo",'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-5Y-2W>',StartDate);
      DueDate := CALCDATE('<+1W+8D>',PostingDate);
      Amount := 8000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,TRUE,CustLedgerEntry."Document Type"::Invoice,'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-5Y-2W>',StartDate);
      DueDate := CALCDATE('<+1W+9D>',PostingDate);
      Amount := 9000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,TRUE,CustLedgerEntry."Document Type"::Invoice,'');

      // Data entries that is NOT included in columns
      CustLedgerEntry."Entry No." += 1;
      DueDate := CALCDATE('<+1M>',PostingDate);
      Amount := 1000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,FALSE,CustLedgerEntry."Document Type"::Invoice,'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-13M>',StartDate);
      DueDate := CALCDATE('<+3W>',PostingDate);
      Amount := 2000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,FALSE,CustLedgerEntry."Document Type"::Invoice,'');

      CustLedgerEntry."Entry No." += 1;
      PostingDate := CALCDATE('<-13M>',StartDate);
      DueDate := CALCDATE('<+6W>',PostingDate);
      Amount := 3000;
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,
        PostingDate,DueDate,Amount,FALSE,CustLedgerEntry."Document Type"::Invoice,'');
    END;

    LOCAL PROCEDURE CreateCustGroupLedgEntries2perWeek@13(CustGroupCode@1000 : Code[10];StartDate@1003 : Date;StartAmount@1002 : Decimal) : Integer;
    VAR
      i@1001 : Integer;
    BEGIN
      FOR i := 1 TO 14 DO BEGIN
        CreateOpenInvCustLedgEntry(FORMAT(i),StartDate,StartAmount * i,CustGroupCode);
        CreateOpenInvCustLedgEntry(FORMAT(i),CALCDATE('<1D>',StartDate),StartAmount * i,CustGroupCode);

        StartDate := CALCDATE('<-1W>',StartDate);
      END;

      EXIT(2);
    END;

    LOCAL PROCEDURE CreateVendLedgEntries2perWeek@33(StartDate@1003 : Date;StartAmount@1002 : Decimal) : Integer;
    VAR
      i@1001 : Integer;
    BEGIN
      FOR i := 1 TO 14 DO BEGIN
        CreateVendLedgEntry(FORMAT(i),StartDate,-StartAmount * i);
        CreateVendLedgEntry(FORMAT(i),CALCDATE('<1D>',StartDate),-StartAmount * i);

        StartDate := CALCDATE('<-1W>',StartDate);
      END;

      EXIT(2);
    END;

    LOCAL PROCEDURE CreateOpenInvCustLedgEntry@28(CustomerNo@1001 : Code[20];DueDate@1008 : Date;AmountLCY@1004 : Decimal;CustPostingGroup@1002 : Code[10]);
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      CreateCustomerLedgEntry(
        CustLedgerEntry,CustomerNo,WORKDATE,DueDate,AmountLCY,
        TRUE,CustLedgerEntry."Document Type"::Invoice,CustPostingGroup);
    END;

    LOCAL PROCEDURE CreateCustomerLedgEntry@3(VAR CustLedgerEntry@1000 : Record 21;CustomerNo@1001 : Code[20];PostingDate@1003 : Date;DueDate@1008 : Date;AmountLCY@1004 : Decimal;DocOpen@1005 : Boolean;DocType@1006 : Option;CustPostingGroup@1002 : Code[10]);
    BEGIN
      WITH CustLedgerEntry DO BEGIN
        INIT;
        "Entry No." := GetCustLedgEntryNo;
        "Due Date" := DueDate;
        "Customer No." := CustomerNo;
        Open := DocOpen;
        "Document Type" := DocType;
        "Customer Posting Group" := CustPostingGroup;
        INSERT;

        CreateDetailedCustLedgEntry("Entry No.",AmountLCY,PostingDate,DocType);
      END;
    END;

    LOCAL PROCEDURE CreateDetailedCustLedgEntry@8(CustLedgNo@1003 : Integer;AmountLCY@1001 : Decimal;PostingDate@1000 : Date;DocType@1005 : Option);
    VAR
      DetailedCustLedgEntry@1006 : Record 379;
    BEGIN
      WITH DetailedCustLedgEntry DO BEGIN
        INIT;
        "Entry No." := GetDetailedCustLedgEntryNo;
        "Cust. Ledger Entry No." := CustLedgNo;
        "Posting Date" := PostingDate;
        "Amount (LCY)" := AmountLCY;
        "Document Type" := DocType;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE GetCustLedgEntryNo@9() : Integer;
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      IF CustLedgerEntry.FINDLAST THEN
        EXIT(CustLedgerEntry."Entry No." + 1);
      EXIT(1);
    END;

    LOCAL PROCEDURE GetDetailedCustLedgEntryNo@16() : Integer;
    VAR
      DetailedCustLedgEntry@1000 : Record 379;
    BEGIN
      IF DetailedCustLedgEntry.FINDLAST THEN
        EXIT(DetailedCustLedgEntry."Entry No." + 1);
      EXIT(1);
    END;

    LOCAL PROCEDURE CreateVendLedgEntry@27(VendorNo@1001 : Code[20];DueDate@1008 : Date;AmountLCY@1004 : Decimal);
    VAR
      VendLedgEntry@1000 : Record 25;
    BEGIN
      WITH VendLedgEntry DO BEGIN
        INIT;
        "Entry No." := GetVendLedgEntryNo;
        "Due Date" := DueDate;
        "Vendor No." := VendorNo;
        Open := TRUE;
        "Document Type" := "Document Type"::Invoice;
        INSERT;

        CreateDetailedVendLedgEntry("Entry No.",AmountLCY,DueDate);
      END;
    END;

    LOCAL PROCEDURE CreateDetailedVendLedgEntry@26(VendLedgEntryNo@1003 : Integer;AmountLCY@1001 : Decimal;PostingDate@1000 : Date);
    VAR
      DetailedVendLedgEntry@1006 : Record 380;
    BEGIN
      WITH DetailedVendLedgEntry DO BEGIN
        INIT;
        "Entry No." := GetDetailedVendLedgEntryNo;
        "Vendor Ledger Entry No." := VendLedgEntryNo;
        "Posting Date" := PostingDate;
        "Amount (LCY)" := AmountLCY;
        "Document Type" := "Document Type"::Invoice;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE GetVendLedgEntryNo@15() : Integer;
    VAR
      VendLedgerEntry@1000 : Record 25;
    BEGIN
      IF VendLedgerEntry.FINDLAST THEN
        EXIT(VendLedgerEntry."Entry No." + 1);
      EXIT(1);
    END;

    LOCAL PROCEDURE GetDetailedVendLedgEntryNo@6() : Integer;
    VAR
      DetailedVendLedgEntry@1000 : Record 380;
    BEGIN
      IF DetailedVendLedgEntry.FINDLAST THEN
        EXIT(DetailedVendLedgEntry."Entry No." + 1);
      EXIT(1);
    END;

    LOCAL PROCEDURE GetAgedAccReceivableChartID@24() : Integer;
    BEGIN
      EXIT(PAGE::"Aged Acc. Receivable Chart");
    END;

    LOCAL PROCEDURE CalcDateDays@20(Days@1000 : Integer;StartDate@1001 : Date) : Date;
    BEGIN
      EXIT(CALCDATE('<' + FORMAT(Days) + 'D>',StartDate));
    END;

    [PageHandler]
    PROCEDURE CustLedgEntriesPageHandler@5(VAR CustomerLedgerEntries@1000 : TestPage 25);
    VAR
      i@1001 : Integer;
    BEGIN
      CustomerLedgerEntries.FIRST;
      i := 1;
      WHILE CustomerLedgerEntries.NEXT DO
        i += 1;
      Assert.AreEqual(ExpectedRowCount,i,'Wrong number of entries');
    END;

    LOCAL PROCEDURE CreateStartDate@29() : Date;
    BEGIN
      EXIT(DMY2DATE(15,1,2015));
    END;

    BEGIN
    {
      // [FEATURE] [Aged Acc. Receivable] [SMB] [Sales]
    }
    END.
  }
}

