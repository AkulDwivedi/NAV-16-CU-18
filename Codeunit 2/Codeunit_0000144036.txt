OBJECT Codeunit 144036 Service Tax with Work Tax
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE
          END;

  }
  CODE
  {
    VAR
      Assert@1500004 : Codeunit 130000;
      LibraryERM@1500006 : Codeunit 131300;
      LibraryServiceTax@1500005 : Codeunit 143001;
      LibraryTDS@1500009 : Codeunit 143000;
      LibraryRandom@1500003 : Codeunit 130440;
      ReverseServiceTaxHelper@1500002 : Codeunit 143006;
      ServiceTaxTDSHelper@1500001 : Codeunit 143005;
      ServiceTaxVerify@1500016 : Codeunit 143004;
      ReverseChargeTypeOption@1500012 : ' ,Standard,GTA';
      isInitialized@1500000 : Boolean;
      CrMemoJnlWorkTaxErr@1500007 : TextConst 'ENU=The document type for posting transactions that have Work Tax specified must be Invoice or Payment.';
      CrMemoDocWorkTaxErr@1500008 : TextConst 'ENU=The document type for posting transactions that have Work Tax specified must be Invoice or Order.';
      DiffWorkTaxOnAppliedDocsErr@1500014 : TextConst 'ENU=You must specify the same Work Tax on both applying documents.';
      OfflineApplnAdvPmtWithTDSErr@1500011 : TextConst 'ENU=You cannot apply entries if both the advance payment and the invoice have TDS or Work Tax specified.';
      DiffTDSBaseIncludesServTaxErr@1500013 : TextConst 'ENU=they have different settings in the Include Service Tax in TDS Base field';
      UnapplyErr@1500015 : TextConst 'ENU=You cannot unapply documents that have TDS or Work Tax specified.';

    LOCAL PROCEDURE Initialize@1500008() : Integer;
    BEGIN
      LibraryRandom.SetSeed(1);

      IF isInitialized THEN
        EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);

      LibraryServiceTax.CreateServiceTaxReturnPeriod;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      ServiceTaxTDSHelper.SetTDSTaxType(FALSE,TRUE);
      ServiceTaxTDSHelper.SetupIncomeTaxAccountingPeriod;
      COMMIT;

      isInitialized := TRUE;

      EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);
    END;

    [Test]
    PROCEDURE AdvPaymentExclServTax@1500012();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      ServiceTaxTDSHelper.CreateAdvPmt(GenJournalLine,0,ReverseChargeTypeOption::" ",FALSE);

      // Exercise
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify
      ServiceTaxTDSHelper.VerifyTDSPostingAdvPmt(GenJournalLine,FALSE);
    END;

    [Test]
    PROCEDURE AdvPaymentPoTExclServTax@1500043();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.AdvPaymentPoT(FALSE);
    END;

    [Test]
    PROCEDURE AdvPaymentPoTInclServTax@1500044();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.AdvPaymentPoT(TRUE);
    END;

    [Test]
    PROCEDURE AdvPaymentRevChrgExclServTax@1500048();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.AdvPaymentRevChrg(FALSE);
    END;

    [Test]
    PROCEDURE AdvPaymentRevChrgInclServTax@1500049();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.AdvPaymentRevChrg(TRUE);
    END;

    [Test]
    PROCEDURE AdvPaymentSplitExclServTax@1500014();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.AdvPaymentSplit(FALSE);
    END;

    [Test]
    PROCEDURE AdvPaymentSplitInclServTax@1500015();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.AdvPaymentSplit(TRUE);
    END;

    [Test]
    PROCEDURE AdvPmtApplyBiggerInvJnlRevChrg@1500103();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.AdvPmtApplyBigInvGenJnlRevChrg;
    END;

    [Test]
    PROCEDURE AdvPmtApplyBiggerInvDocPoT@1500085();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.AdvPmtApplyBiggerInvDocPoT;
    END;

    [Test]
    PROCEDURE AdvPmtApplyBiggerInvDocRevChrg@1500099();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.AdvPmtApplyBiggerInvDocRevChrg;
    END;

    [Test]
    PROCEDURE AdvPmtApplyBigInvJnlPoTExcl@1500036();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.AdvPmtApplyBiggerInvGenJnlPoT(FALSE);
    END;

    [Test]
    PROCEDURE AdvPmtApplyBigInvJnlPoTIncl@1500035();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.AdvPmtApplyBiggerInvGenJnlPoT(TRUE);
    END;

    [Test]
    PROCEDURE BlockedUnapplyAdvPmtAndBigInv@1500032();
    VAR
      InvGenJournalLine@1500002 : Record 81;
      PmtGenJournalLine@1500001 : Record 81;
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.PostInvAppliesToAdvPmtPoT(InvGenJournalLine,PmtGenJournalLine,FALSE);

      ASSERTERROR ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(InvGenJournalLine."Document No.");
      Assert.ExpectedError(UnapplyErr);
    END;

    [Test]
    PROCEDURE AdvPmtApplyBigInvDocSplitExcl@1500028();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.AdvPmtApplyBiggerInvSplit(FALSE);
    END;

    [Test]
    PROCEDURE AdvPmtApplyBigInvDocSplitIncl@1500027();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.AdvPmtApplyBiggerInvSplit(TRUE);
    END;

    [Test]
    PROCEDURE AdvPmtApplyInvDocNoPoT@1500080();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreateAdvPmt(GenJournalLine,0,ReverseChargeTypeOption::" ",FALSE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise
      ServiceTaxTDSHelper.ApplyAndPostInvoiceDoc(GenJournalLine);

      // Verify
      ServiceTaxTDSHelper.VerifyTDSPostingAppliedInvoice(GenJournalLine,FALSE);
    END;

    [Test]
    PROCEDURE AdvPmtApplyInvDocPoT@1500054();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreateAdvPmtPoT(GenJournalLine);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise
      ServiceTaxTDSHelper.ApplyAndPostInvoiceDoc(GenJournalLine);

      // Verify
      ServiceTaxTDSHelper.VerifyTDSPostingAppliedInvoice(GenJournalLine,TRUE);
    END;

    [Test]
    PROCEDURE AdvPmtExclSTApplyInvDocInclST@1500021();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreateAdvPmtSplit(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise
      GenJournalLine."Include Serv. Tax in TDS Base" := TRUE;
      ASSERTERROR ServiceTaxTDSHelper.ApplyAndPostInvoiceDoc(GenJournalLine);
      Assert.ExpectedError(DiffTDSBaseIncludesServTaxErr);
    END;

    [Test]
    PROCEDURE AdvPmtInclSTApplyInvDocExclST@1500019();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreateAdvPmtSplit(GenJournalLine);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise
      GenJournalLine."Include Serv. Tax in TDS Base" := FALSE;
      ASSERTERROR ServiceTaxTDSHelper.ApplyAndPostInvoiceDoc(GenJournalLine);
      Assert.ExpectedError(DiffTDSBaseIncludesServTaxErr);
    END;

    [Test]
    PROCEDURE AdvPmtApplyInvDocPoTNoTDS@1500074();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreateAdvPmtPoT(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      // Exercise
      ServiceTaxTDSHelper.RemoveWorkTaxFromGenJournal(GenJournalLine,FALSE);
      ASSERTERROR ServiceTaxTDSHelper.ApplyAndPostInvoiceDoc(GenJournalLine);

      // Verify
      Assert.ExpectedError(DiffWorkTaxOnAppliedDocsErr);
    END;

    [Test]
    PROCEDURE AdvPmtApplyInvDocSplitNoTDS@1500016();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreateAdvPmtSplit(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      // Exercise
      ServiceTaxTDSHelper.RemoveWorkTaxFromGenJournal(GenJournalLine,FALSE);
      ASSERTERROR ServiceTaxTDSHelper.ApplyAndPostInvoiceDoc(GenJournalLine);

      // Verify
      Assert.ExpectedError(DiffWorkTaxOnAppliedDocsErr);
    END;

    [Test]
    PROCEDURE AdvPmtApplyInvDocRevChrg@1500060();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreateAdvPmtRevChrg(GenJournalLine);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise
      ServiceTaxTDSHelper.ApplyAndPostInvoiceDoc(GenJournalLine);

      // Verify
      ServiceTaxTDSHelper.VerifyTDSPostingAppliedInvoice(GenJournalLine,FALSE);
    END;

    [Test]
    PROCEDURE AdvPmtApplyInvDocSplitExcl@1500033();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.AdvPmtApplyInvDocSplit(FALSE);
    END;

    [Test]
    PROCEDURE AdvPmtApplyInvDocSplitIncl@1500029();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.AdvPmtApplyInvDocSplit(TRUE);
    END;

    [Test]
    PROCEDURE AdvPmtApplyInvJnlPoT@1500063();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.AdvPmtApplyInvGenJnl(TRUE,FALSE);
    END;

    [Test]
    PROCEDURE AdvPmtApplyInvJnlPoTNoTDS@1500070();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreateAdvPmtPoT(GenJournalLine);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise
      ServiceTaxTDSHelper.RemoveWorkTaxFromGenJournal(GenJournalLine,FALSE);
      ASSERTERROR ServiceTaxTDSHelper.ApplyAndPostInvoiceGenJnl(GenJournalLine);

      // Verify
      Assert.ExpectedError(DiffWorkTaxOnAppliedDocsErr);
    END;

    [Test]
    PROCEDURE AdvPmtApplyInvJnlRevChrg@1500062();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.AdvPmtApplyInvGenJnl(FALSE,TRUE);
    END;

    [Test]
    PROCEDURE AdvPmtNoWTaxApplyInvDocPoT@1500096();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreateAdvPmtPoT(GenJournalLine);
      PostAdvPmtWithoutWTax(GenJournalLine);
      // Exercise
      ASSERTERROR ServiceTaxTDSHelper.ApplyAndPostInvoiceDoc(GenJournalLine);

      // Verify
      Assert.ExpectedError(DiffWorkTaxOnAppliedDocsErr);
    END;

    [Test]
    PROCEDURE AdvPmtNoWTaxApplyInvJnlPoT@1500059();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreateAdvPmtPoT(GenJournalLine);
      PostAdvPmtWithoutWTax(GenJournalLine);
      // Exercise
      ASSERTERROR ServiceTaxTDSHelper.ApplyAndPostInvoiceGenJnl(GenJournalLine);

      // Verify
      Assert.ExpectedError(DiffWorkTaxOnAppliedDocsErr);
    END;

    [Test]
    PROCEDURE AdvPmtNoWTaxApplyInvJnlSplit@1500018();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreateAdvPmtSplit(GenJournalLine);
      PostAdvPmtWithoutWTax(GenJournalLine);
      // Exercise
      ASSERTERROR ServiceTaxTDSHelper.ApplyAndPostInvoiceGenJnl(GenJournalLine);

      // Verify
      Assert.ExpectedError(DiffWorkTaxOnAppliedDocsErr);
    END;

    [Test]
    PROCEDURE AdvRefundPoT@1500052();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreateAdvRefundPoT(GenJournalLine);

      // Exercise
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify
      Assert.ExpectedError(CrMemoJnlWorkTaxErr);
    END;

    [Test]
    PROCEDURE BlockedCrMemoDocPoTExclServTax@1500017();
    VAR
      PurchaseHeader@1500001 : Record 38;
      PurchaseLine@1500000 : Record 39;
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreateCrMemoDocPoT(PurchaseHeader,PurchaseLine);

      // Exercise
      ASSERTERROR ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      // Verify
      Assert.ExpectedError(CrMemoDocWorkTaxErr);
    END;

    [Test]
    PROCEDURE BlockedCrMemoJnlPoTExclServTax@1500031();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreateCrMemoGenJnlPoT(GenJournalLine);

      // Exercise
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify
      Assert.ExpectedError(CrMemoJnlWorkTaxErr);
    END;

    [Test]
    PROCEDURE BlockedOfflineApplnAdvPmtToInv@1500055();
    VAR
      GenJournalLine@1500003 : Record 81;
      AdvPmtDocNo@1500000 : Code[20];
      InvoiceDocNo@1500001 : Code[20];
    BEGIN
      Initialize;

      // Setup
      AdvPmtDocNo := ServiceTaxTDSHelper.CreateAdvPmtPoT(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      InvoiceDocNo := ServiceTaxTDSHelper.PostInvoiceGenJnl(GenJournalLine);

      // Exercise
      ASSERTERROR
        ReverseServiceTaxHelper.ApplyAndPostVendorEntry(
          GenJournalLine."Document Type"::Invoice,InvoiceDocNo,
          GenJournalLine."Document Type"::Payment,AdvPmtDocNo);
      // Verify
      Assert.ExpectedError(OfflineApplnAdvPmtWithTDSErr);
    END;

    [Test]
    PROCEDURE BlockedOfflineApplnInvToAdvPmt@1500077();
    VAR
      GenJournalLine@1500003 : Record 81;
      AdvPmtDocNo@1500000 : Code[20];
      InvoiceDocNo@1500001 : Code[20];
    BEGIN
      Initialize;

      // Setup
      AdvPmtDocNo := ServiceTaxTDSHelper.CreateAdvPmtPoT(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      InvoiceDocNo := ServiceTaxTDSHelper.PostInvoiceGenJnl(GenJournalLine);

      // Exercise
      ASSERTERROR
        ReverseServiceTaxHelper.ApplyAndPostVendorEntry(
          GenJournalLine."Document Type"::Payment,AdvPmtDocNo,
          GenJournalLine."Document Type"::Invoice,InvoiceDocNo);
      // Verify
      Assert.ExpectedError(OfflineApplnAdvPmtWithTDSErr);
    END;

    [Test]
    PROCEDURE InvDocNoPoTInclServTax@1500039();
    VAR
      PurchaseHeader@1500003 : Record 38;
      PurchaseLine@1500002 : Record 39;
      GenJournalLine@1500001 : Record 81;
      PostedDocNo@1500000 : Code[20];
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreatePurchaseDocPoT(PurchaseHeader,PurchaseLine,FALSE);
      ServiceTaxTDSHelper.UpdateInclServTaxOption(PurchaseHeader,TRUE);

      // Exercise
      PostedDocNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);

      // Verify
      ServiceTaxTDSHelper.ConvertDocToJnlLine(PurchaseHeader,PurchaseLine,PostedDocNo,GenJournalLine);
      ServiceTaxTDSHelper.VerifyTDSPostingInvoice(GenJournalLine,TRUE);
    END;

    [Test]
    PROCEDURE InvDocPoTInclServTax@1170000001();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.InvDocPoT(TRUE);
    END;

    [Test]
    PROCEDURE InvDocPoTExclServTax@1500007();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.InvDocPoT(FALSE);
    END;

    [Test]
    PROCEDURE InvDocPoTAppliesToPmt@1500075();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.InvDocPoTAppliesToPmt;
    END;

    [Test]
    PROCEDURE InvDocRevChrgInclServTax@1500004();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.InvDocRevChrg(TRUE);
    END;

    [Test]
    PROCEDURE InvDocRevChrgExclServTax@1500002();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.InvDocRevChrg(FALSE);
    END;

    [Test]
    PROCEDURE InvDocSplitInclServTax@1500026();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.InvDocSplit(TRUE);
    END;

    [Test]
    PROCEDURE InvDocSplitExclServTax@1500025();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.InvDocSplit(FALSE);
    END;

    [Test]
    PROCEDURE InvJnlNoPoTInclServTax@1500040();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreatePurchaseDocGenJnlPoT(GenJournalLine,FALSE);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,TRUE);

      // Exercise
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify
      ServiceTaxTDSHelper.VerifyTDSPostingInvoice(GenJournalLine,TRUE);
    END;

    [Test]
    PROCEDURE InvJnlPoTInclServTax@1500011();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.InvGenJnlPoT(TRUE);
    END;

    [Test]
    PROCEDURE InvJnlPoTExclServTax@1500010();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.InvGenJnlPoT(FALSE);
    END;

    [Test]
    PROCEDURE InvJnlPoTAppliesToPmt@1500104();
    VAR
      GenJournalLine@1500001 : Record 81;
      IncludeServTax@1500000 : Boolean;
    BEGIN
      Initialize;
      IncludeServTax := TRUE;
      ServiceTaxTDSHelper.InvGenJnlPoTAppliesToPmt(GenJournalLine,IncludeServTax);

      // Verify
      ServiceTaxTDSHelper.VerifyTDSPostingInvoice(GenJournalLine,IncludeServTax);
    END;

    [Test]
    PROCEDURE UnapplyInvJnlPoTAppliesToPmt@1500041();
    VAR
      GenJournalLine@1500000 : Record 81;
      IncludeServTax@1500001 : Boolean;
    BEGIN
      Initialize;
      IncludeServTax := TRUE;
      ServiceTaxTDSHelper.InvGenJnlPoTAppliesToPmt(GenJournalLine,IncludeServTax);

      ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(GenJournalLine."Document No.");

      // Verify
      ServiceTaxVerify.UnappliedDtldVLEntries(GenJournalLine."Document No.");
      ServiceTaxTDSHelper.VerifyTDSPostingInvoice(GenJournalLine,IncludeServTax);
    END;

    [Test]
    PROCEDURE InvJnlRevChrgInclServTax@1500001();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.InvGenJnlRevChrg(TRUE);
    END;

    [Test]
    PROCEDURE InvJnlRevChrgExclServTax@1500000();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.InvGenJnlRevChrg(FALSE);
    END;

    [Test]
    PROCEDURE InvJnlSplitInclServTax@1500024();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.InvGenJnlSplit(TRUE);
    END;

    [Test]
    PROCEDURE InvJnlSplitExclServTax@1500020();
    BEGIN
      Initialize;
      ServiceTaxTDSHelper.InvGenJnlSplit(FALSE);
    END;

    [Test]
    PROCEDURE OfflineAppSplitInvToPayment@1500003();
    VAR
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;
      ServiceTaxTDSHelper.OfflineAppSplit(LastTransactionNo,TRUE);
    END;

    [Test]
    PROCEDURE OfflineAppSplitPaymentToInv@1500005();
    VAR
      LastTransactionNo@1500000 : Integer;
    BEGIN
      LastTransactionNo := Initialize;
      ServiceTaxTDSHelper.OfflineAppSplit(LastTransactionNo,FALSE);
    END;

    LOCAL PROCEDURE PostAdvPmtWithoutWTax@1500030(VAR GenJournalLine@1500000 : Record 81);
    VAR
      OrigGenJournalLine@1500002 : Record 81;
    BEGIN
      OrigGenJournalLine := GenJournalLine;

      ServiceTaxTDSHelper.RemoveWorkTaxFromGenJournal(GenJournalLine,TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      GenJournalLine := OrigGenJournalLine;
    END;

    [Test]
    PROCEDURE STaxInvJnlRChrgApplyPmt@1500006();
    VAR
      GenJournalLine@1500000 : Record 81;
      PaymentDocNo@1500001 : Code[20];
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreatePurchaseDocGenJnlRevChrg(GenJournalLine);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,TRUE);

      // Exercise
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentDocNo :=
        ServiceTaxTDSHelper.ApplyAndPostPayment(GenJournalLine,ServiceTaxTDSHelper.CalcPaymentAmount(GenJournalLine,TRUE));

      // Verify
      ServiceTaxTDSHelper.VerifyServTaxRevChrg(GenJournalLine);
      ServiceTaxTDSHelper.VerifySTEntryDetail(GenJournalLine,PaymentDocNo,1);
      ServiceTaxTDSHelper.VerifySTBaseIsTDSBase(GenJournalLine."Document No.",TRUE,GenJournalLine.IsServTaxRevChrgSplit);
    END;

    [Test]
    PROCEDURE STaxInvJnlRChrgApply2Pmts@1500023();
    VAR
      GenJournalLine@1500000 : Record 81;
      Payment1@1500001 : Decimal;
      Payment2@1500002 : Decimal;
      PaymentDocNo1@1500003 : Code[20];
      PaymentDocNo2@1500004 : Code[20];
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreatePurchaseDocGenJnlRevChrg(GenJournalLine);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,TRUE);

      // Exercise
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      Payment1 := ReverseServiceTaxHelper.RoundAmount(ServiceTaxTDSHelper.CalcPaymentAmount(GenJournalLine,TRUE) / 3);
      Payment2 := ServiceTaxTDSHelper.CalcPaymentAmount(GenJournalLine,TRUE) - Payment1;
      PaymentDocNo1 := ServiceTaxTDSHelper.ApplyAndPostPayment(GenJournalLine,Payment1);
      PaymentDocNo2 := ServiceTaxTDSHelper.ApplyAndPostPayment(GenJournalLine,Payment2);

      // Verify
      ServiceTaxTDSHelper.VerifyServTaxRevChrg(GenJournalLine);
      ServiceTaxTDSHelper.VerifySTEntryDetail(GenJournalLine,PaymentDocNo1,1 / 3);
      ServiceTaxTDSHelper.VerifySTEntryDetail(GenJournalLine,PaymentDocNo2,2 / 3);
      ServiceTaxTDSHelper.VerifySTBaseIsTDSBase(GenJournalLine."Document No.",TRUE,GenJournalLine.IsServTaxRevChrgSplit);
    END;

    [Test]
    PROCEDURE STaxInvJnlSplitApplyPmt@1500009();
    VAR
      GenJournalLine@1500000 : Record 81;
      PaymentDocNo@1500001 : Code[20];
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreatePurchaseDocGenJnlSplit(GenJournalLine);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,TRUE);

      // Exercise
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentDocNo :=
        ServiceTaxTDSHelper.ApplyAndPostPayment(GenJournalLine,ServiceTaxTDSHelper.CalcPaymentAmount(GenJournalLine,TRUE));

      // Verify
      ServiceTaxTDSHelper.VerifyServTaxSplit(GenJournalLine);
      ServiceTaxTDSHelper.VerifySTEntryDetail(GenJournalLine,PaymentDocNo,1);
      ServiceTaxTDSHelper.VerifySTBaseIsTDSBase(GenJournalLine."Document No.",TRUE,GenJournalLine.IsServTaxRevChrgSplit);
    END;

    [Test]
    PROCEDURE STaxInvJnlSplitApply2Pmts@1500022();
    VAR
      GenJournalLine@1500000 : Record 81;
      Payment1@1500002 : Decimal;
      Payment2@1500001 : Decimal;
      PaymentDocNo1@1500004 : Code[20];
      PaymentDocNo2@1500003 : Code[20];
    BEGIN
      Initialize;

      // Setup
      ServiceTaxTDSHelper.CreatePurchaseDocGenJnlSplit(GenJournalLine);
      LibraryTDS.SetInclServTaxOptionInGenJnl(GenJournalLine,TRUE);

      // Exercise
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      Payment1 := ReverseServiceTaxHelper.RoundAmount(ServiceTaxTDSHelper.CalcPaymentAmount(GenJournalLine,TRUE) / 3);
      Payment2 := ServiceTaxTDSHelper.CalcPaymentAmount(GenJournalLine,TRUE) - Payment1;
      PaymentDocNo1 := ServiceTaxTDSHelper.ApplyAndPostPayment(GenJournalLine,Payment1);
      PaymentDocNo2 := ServiceTaxTDSHelper.ApplyAndPostPayment(GenJournalLine,Payment2);

      // Verify
      ServiceTaxTDSHelper.VerifyServTaxSplit(GenJournalLine);
      ServiceTaxTDSHelper.VerifySTEntryDetail(GenJournalLine,PaymentDocNo1,1 / 3);
      ServiceTaxTDSHelper.VerifySTEntryDetail(GenJournalLine,PaymentDocNo2,2 / 3);
      ServiceTaxTDSHelper.VerifySTBaseIsTDSBase(GenJournalLine."Document No.",TRUE,GenJournalLine.IsServTaxRevChrgSplit);
    END;

    BEGIN
    END.
  }
}

