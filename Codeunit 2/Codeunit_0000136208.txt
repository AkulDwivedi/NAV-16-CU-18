OBJECT Codeunit 136208 Marketing Interaction
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      LibraryMarketing@1002 : Codeunit 131900;
      LibrarySetupStorage@1014 : Codeunit 131009;
      FileMgt@1016 : Codeunit 419;
      isInitialized@1000 : Boolean;
      CostLCY@1007 : Decimal;
      DurationMin@1008 : Decimal;
      FieldEmptyError@1006 : TextConst 'ENU=You must fill in the %1 field.';
      UnknownError@1005 : TextConst 'ENU=Unknown error.';
      Rollback@1003 : TextConst 'ENU=Rollback.';
      Flag@1015 : Boolean;
      TemplateCode@1004 : Code[10];
      ContactType@1012 : 'All,Company,Person';
      SearchArea@1011 : 'All,Contact,Interaction Log Entry,To-do,Opportunity,Rlshp. Mgt. Comment Line';
      IndexMode@1010 : Option;
      MergedFieldErr@1013 : TextConst '@@@="%1 = Merged value,%2 = Original value";ENU=Value %1 from merged file are not equal to %2.';

    [Test]
    PROCEDURE CreationInteractionGroup@1();
    VAR
      InteractionGroup@1001 : Record 5063;
    BEGIN
      // Test that it is possible to create a new Interaction Group.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Interaction Group.
      LibraryMarketing.CreateInteractionGroup(InteractionGroup);

      // 3. Verify: Check that Interaction Group created.
      InteractionGroup.GET(InteractionGroup.Code);
    END;

    [Test]
    PROCEDURE CreationInteractionTemplate@4();
    VAR
      InteractionGroup@1000 : Record 5063;
      InteractionTemplate@1002 : Record 5064;
    BEGIN
      // Test that it is possible to create a new Interaction Template.

      // 1. Setup: Create Interaction Group.
      Initialize;
      LibraryMarketing.CreateInteractionGroup(InteractionGroup);

      // 2. Exercise: Create Interaction Template with Interaction Group Code.
      LibraryMarketing.CreateInteractionTemplate(InteractionTemplate);
      InteractionTemplate.VALIDATE("Interaction Group Code",InteractionGroup.Code);
      InteractionTemplate.MODIFY(TRUE);

      // 3. Verify: Check that Interaction Template created with Interaction Group Code.
      InteractionTemplate.GET(InteractionTemplate.Code);
      InteractionTemplate.TESTFIELD("Interaction Group Code",InteractionGroup.Code);
    END;

    [Test]
    [HandlerFunctions(ModalFormInteractionGroupStat)]
    PROCEDURE OpenInteractionGroupStatistics@5();
    VAR
      InteractionGroup@1001 : Record 5063;
      InteractionTemplate@1000 : Record 5064;
      SegmentHeader@1003 : Record 5076;
      InteractionGroupStatistics@1006 : Page 5078;
    BEGIN
      // Test that it is possible to open Interaction Group Statistics with correct values.

      // 1. Setup: Create Interaction Group, Interaction Template. Create a Segment.
      Initialize;
      LibraryMarketing.CreateInteractionGroup(InteractionGroup);
      LibraryMarketing.CreateInteractionTemplate(InteractionTemplate);

      UpdateInteractionTemplate(InteractionTemplate,InteractionGroup.Code);
      CostLCY := InteractionTemplate."Unit Cost (LCY)";  // Set Global variables CostLCY, DurationMin for Form Handler.
      DurationMin := InteractionTemplate."Unit Duration (Min.)";

      CreateSegment(SegmentHeader,InteractionTemplate.Code);

      // 2. Exercise: Run Log Segment Batch Job for Created Segment.
      RunLogSegment(SegmentHeader."No.");

      // 3. Verify: Check that Interaction Group Statistics opens with correct values.
      CLEAR(InteractionGroupStatistics);
      InteractionGroupStatistics.SETRECORD(InteractionGroup);
      InteractionGroupStatistics.RUNMODAL;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE RemoveAttachment@8();
    VAR
      InteractionTemplate@1000 : Record 5064;
      InteractionTmplLanguage@1001 : Record 5103;
    BEGIN
      // Test that it is possible to Remove Attachment from Interaction Template.

      // 1. Setup: Find the Interaction Template with Attachment.
      Initialize;
      InteractionTemplate.SETFILTER("Attachment No.",'<>0');  // Check for an Template that has some attachment.
      InteractionTemplate.FINDFIRST;

      // 2. Exercise: Remove the Attachment.
      InteractionTmplLanguage.GET(InteractionTemplate.Code,InteractionTemplate."Language Code (Default)");
      InteractionTmplLanguage.RemoveAttachment(TRUE);

      // 3. Verify: Check the Attachment has been removed.
      InteractionTemplate.CALCFIELDS("Attachment No.");
      InteractionTemplate.TESTFIELD("Attachment No.",0);  // Checks that there are no attachment.

      // 4. TearDown:
      TransactionRollback;
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerCreateInteract)]
    PROCEDURE InteractionWithoutTemplate@10();
    VAR
      Contact@1000 : Record 5050;
      SegmentLine@1002 : Record 5077;
      LibraryMarketing@1001 : Codeunit 131900;
    BEGIN
      // Test that application generates an error on creating Interaction without Interaction Template code in Interaction Wizard.

      // 1. Setup: Create a Contact.
      Initialize;
      LibraryMarketing.CreateContact(Contact);

      // 2. Exercise: Create Interaction without Interaction Template code in Interaction Wizard.
      ASSERTERROR Contact.CreateInteraction;

      // 3. Verify: Check application generates an error on creating Interaction without Interaction Template code in Interaction Wizard.
      Assert.AreEqual(STRSUBSTNO(FieldEmptyError,SegmentLine.FIELDCAPTION("Interaction Template Code")),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerCreateInteract)]
    PROCEDURE InteractionWithoutDescription@12();
    VAR
      Contact@1002 : Record 5050;
      InteractionTemplate@1003 : Record 5064;
      SegmentLine@1000 : Record 5077;
      LibraryMarketing@1001 : Codeunit 131900;
    BEGIN
      // Test that application generates an error on creating Interaction without Description in Interaction Wizard.

      // 1. Setup: Create a Contact.
      Initialize;
      LibraryMarketing.CreateContact(Contact);

      // 2. Exercise: Create Interaction Template. Create Interaction without Description in Interaction Wizard.
      LibraryMarketing.CreateInteractionTemplate(InteractionTemplate);
      TemplateCode := InteractionTemplate.Code;  // Set the Global variable for the form handler.
      ASSERTERROR Contact.CreateInteraction;

      // 3. Verify: Check application generates an error on creating Interaction without Description in Interaction Wizard.
      Assert.AreEqual(STRSUBSTNO(FieldEmptyError,SegmentLine.FIELDCAPTION(Description)),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(CreateInteractPageHandler)]
    PROCEDURE InteractionForContact@19();
    VAR
      Contact@1000 : Record 5050;
      InteractionGroup@1001 : Record 5063;
    BEGIN
      // Test for successful Contact Interaction.

      // 1. Setup: Create Interaction Group, Create Interaction Template, Create Contact, Save Template Code in Global Variable.
      Initialize;
      LibraryMarketing.CreateInteractionGroup(InteractionGroup);
      TemplateCode := CreateAndUpdateTemplate(InteractionGroup.Code);
      LibraryMarketing.CreateContact(Contact);

      // 2. Exercise: Create Interaction for Contact.
      Contact.CreateInteraction;

      // 3. Verify: Verify that Interaction successfully logged in Interaction Log Entry.
      VerifyInteractionLogEntry(Contact."No.",TemplateCode);
    END;

    [Test]
    [HandlerFunctions(CreateInteractPageHandler)]
    PROCEDURE InteractionFromLogEntries@21();
    VAR
      Contact@1002 : Record 5050;
      InteractionGroup@1001 : Record 5063;
      InteractionLogEntry@1000 : Record 5065;
      TemplateCode2@1004 : Code[10];
    BEGIN
      // Test to check that it is possible to create Interaction for a Contact from Interaction Log Entries.

      // 1. Setup: Create Interaction Group, Interaction Templates, Create Contact and Interaction for the Contact.
      Initialize;
      LibraryMarketing.CreateInteractionGroup(InteractionGroup);
      TemplateCode := CreateAndUpdateTemplate(InteractionGroup.Code);  // Set value in Global Variable.
      TemplateCode2 := CreateAndUpdateTemplate(InteractionGroup.Code);
      LibraryMarketing.CreateContact(Contact);
      Contact.CreateInteraction;

      // 2. Exercise: Create Interaction From Interaction Log Entries.
      FindInteractionLogEntry(InteractionLogEntry,Contact."No.",InteractionGroup.Code,TemplateCode);
      TemplateCode := TemplateCode2;  // Set value in Global Variable.
      InteractionLogEntry.CreateInteraction;

      // 3. Verify: Verify Interaction Log Entry for the Second Interaction Template.
      VerifyInteractionLogEntry(Contact."No.",TemplateCode);
    END;

    [Test]
    [HandlerFunctions(CreateInteractPageHandler)]
    PROCEDURE InteractionForNewCostAndAmount@45();
    VAR
      Contact@1002 : Record 5050;
      InteractionGroup@1001 : Record 5063;
      InteractionLogEntry@1003 : Record 5065;
      InteractionTemplate@1000 : Record 5064;
    BEGIN
      // Test to check Interaction Details can be successfully updated while creating Interaction for Contact.

      // 1. Setup: Create Interaction Group, Interaction Template, Create Contact and Interaction for the Contact.
      Initialize;
      LibraryMarketing.CreateInteractionGroup(InteractionGroup);
      TemplateCode := CreateAndUpdateTemplate(InteractionGroup.Code);  // Set value in Global Variable.
      LibraryMarketing.CreateContact(Contact);
      Contact.CreateInteraction;

      // Take Random Cost LCY and Duration greater than Interaction Template's Cost LCY and Duration and store in Global Variable.
      InteractionTemplate.GET(TemplateCode);
      CostLCY := InteractionTemplate."Unit Cost (LCY)" + RANDOM(10);
      DurationMin := InteractionTemplate."Unit Duration (Min.)" + RANDOM(10);

      // 2. Exercise: Create Interaction From Interaction Log Entries.
      Flag := TRUE;  // Set Flag Value TRUE to enter additional values in Page Handler.
      FindInteractionLogEntry(InteractionLogEntry,Contact."No.",InteractionGroup.Code,TemplateCode);
      InteractionLogEntry.CreateInteraction;

      // 3. Verify: Verify that new Cost and Duration updated in Interaction Log Entry.
      InteractionLogEntry.FINDLAST;
      InteractionLogEntry.TESTFIELD("Cost (LCY)",CostLCY);
      InteractionLogEntry.TESTFIELD("Duration (Min.)",DurationMin);
    END;

    [Test]
    [HandlerFunctions(CreateInteractPageHandler)]
    PROCEDURE InteractionTemplateStatistics@14();
    VAR
      Contact@1002 : Record 5050;
      InteractionGroup@1001 : Record 5063;
      InteractionLogEntry@1003 : Record 5065;
      InteractionTemplate@1000 : Record 5064;
    BEGIN
      // Test to verify Interaction Template Statistics after creating Interaction.

      // 1. Setup: Create Interaction Group, Interaction Template, Create Contact and Interaction for the Contact.
      Initialize;
      LibraryMarketing.CreateInteractionGroup(InteractionGroup);
      TemplateCode := CreateAndUpdateTemplate(InteractionGroup.Code);  // Set value in Global Variable.
      LibraryMarketing.CreateContact(Contact);
      Contact.CreateInteraction;

      // Take Random Cost LCY and Duration greater than Interaction Template's Cost LCY and Duration and store in Global Variable.
      InteractionTemplate.GET(TemplateCode);
      CostLCY := InteractionTemplate."Unit Cost (LCY)" + RANDOM(10);
      DurationMin := InteractionTemplate."Unit Duration (Min.)" + RANDOM(10);

      // 2. Exercise: Create Interaction From Interaction Log Entries.
      Flag := TRUE;  // Set Flag Value TRUE to enter additional values in Page Handler.
      FindInteractionLogEntry(InteractionLogEntry,Contact."No.",InteractionGroup.Code,TemplateCode);
      InteractionLogEntry.CreateInteraction;

      // 3. Verify: Verify Values on Interaction Template Statistics Page.
      InteractionTemplate.CALCFIELDS("No. of Interactions","Cost (LCY)","Duration (Min.)");
      VerifyTemplateStatistics(InteractionTemplate);
    END;

    [Test]
    [HandlerFunctions(CreateInteractPageHandler)]
    PROCEDURE InteractionGroupStatistics@47();
    VAR
      Contact@1000 : Record 5050;
      InteractionGroup@1001 : Record 5063;
      InteractionLogEntry@1003 : Record 5065;
      TemplateCode2@1006 : Code[10];
    BEGIN
      // Test to verify Interaction Group Statistics after creating Interaction.

      // 1. Setup: Create Interaction Group, Interaction Templates, Create Contact and Interaction for the Contact.
      Initialize;
      LibraryMarketing.CreateInteractionGroup(InteractionGroup);
      TemplateCode := CreateAndUpdateTemplate(InteractionGroup.Code);  // Set value in global variable.
      TemplateCode2 := CreateAndUpdateTemplate(InteractionGroup.Code);
      LibraryMarketing.CreateContact(Contact);
      Contact.CreateInteraction;

      // 2. Exercise: Create Interaction From Interaction Log Entries.
      FindInteractionLogEntry(InteractionLogEntry,Contact."No.",InteractionGroup.Code,TemplateCode);
      TemplateCode := TemplateCode2;  // Set value in Global Variable.
      InteractionLogEntry.CreateInteraction;

      // 3. Verify: Verify Entries on Interaction Group Statistics Page.
      InteractionGroup.CALCFIELDS("No. of Interactions","Cost (LCY)","Duration (Min.)");
      VerifyTemplateGroupStatistics(InteractionGroup);
    END;

    [Test]
    [HandlerFunctions(InteractionSaveMergedDocumentPageHandler)]
    PROCEDURE InteractionSaveMergedDocumentToDisk@9();
    VAR
      Contact@1000 : Record 5050;
      InteractionGroup@1001 : Record 5063;
      InteractionTemplate@1002 : Record 5064;
      MarketingSetup@1004 : Record 5079;
      Attachment@1006 : Record 5062;
      TempServerDirectory@1003 : Text;
      MergedFieldValue@1005 : Text[250];
    BEGIN
      // Test that document saved in Storage Path is merged.
      // [SCENARIO 380114]

      Initialize;

      TempServerDirectory := FileMgt.ServerCreateTempSubDirectory;

      // [GIVEN] Set Storage Path to Disk File
      UpdateMarketingSetup(MarketingSetup,MarketingSetup."Attachment Storage Type"::"Disk File",TempServerDirectory);

      // [GIVEN] Create Interaction Group, Create Interaction Template, Create Contact
      LibraryMarketing.CreateInteractionGroup(InteractionGroup);
      TemplateCode := CreateAndUpdateTemplate(InteractionGroup.Code);

      // [GIVEN] Use MEMO template for Interaction
      CreateInteractionTmplLanguageWithAttachmentNo(TemplateCode,7); // Memo
      InteractionTemplate.GET(TemplateCode);

      // [GIVEN] Create Contact with Name = "X"
      LibraryMarketing.CreateContact(Contact);

      // [WHEN] Create Interaction
      Contact.CreateInteraction;

      // [THEN] Verify that 4th control of merged word document contains "X"
      AttachmentFromInteractionLogEntry(Attachment,Contact."No.",InteractionGroup.Code,TemplateCode);
      MergedFieldValue := WordDocumentTakeValue(Attachment,4); // Contact_Name
      Assert.AreEqual(MergedFieldValue,Contact."No.",STRSUBSTNO(MergedFieldErr,MergedFieldValue,Contact."No."));

      // Tear Down
      FileMgt.ServerRemoveDirectory(TempServerDirectory,TRUE);
    END;

    [Test]
    [HandlerFunctions(InteractionSaveMergedDocumentPageHandler)]
    PROCEDURE InteractionSaveMergedDocumentToBLOB@16();
    VAR
      Contact@1000 : Record 5050;
      InteractionGroup@1001 : Record 5063;
      InteractionTemplate@1002 : Record 5064;
      MarketingSetup@1004 : Record 5079;
      Attachment@1006 : Record 5062;
      MergedFieldValue@1005 : Text[250];
    BEGIN
      // Test that document saved in BLOB field is merged.
      // [SCENARIO 380114]

      Initialize;

      // [GIVEN] Set Storage Path to Embedded
      UpdateMarketingSetup(MarketingSetup,MarketingSetup."Attachment Storage Type"::Embedded,'');

      // [GIVEN] Create Interaction Group, Create Interaction Template
      LibraryMarketing.CreateInteractionGroup(InteractionGroup);
      TemplateCode := CreateAndUpdateTemplate(InteractionGroup.Code);

      // [GIVEN] Use MEMO template for Interaction
      CreateInteractionTmplLanguageWithAttachmentNo(TemplateCode,7); // Memo
      InteractionTemplate.GET(TemplateCode);

      // [GIVEN] Create Contact with Name = "X"
      LibraryMarketing.CreateContact(Contact);

      // [WHEN] Create Interaction
      Contact.CreateInteraction;

      // [THEN] Verify that 4th control of merged word document contains "X"
      AttachmentFromInteractionLogEntry(Attachment,Contact."No.",InteractionGroup.Code,TemplateCode);
      MergedFieldValue := WordDocumentTakeValue(Attachment,4); // Contact_Name
      Assert.AreEqual(MergedFieldValue,Contact."No.",STRSUBSTNO(MergedFieldErr,MergedFieldValue,Contact."No."));
    END;

    LOCAL PROCEDURE Initialize@20();
    VAR
      LibrarySales@1000 : Codeunit 130509;
    BEGIN
      ClearGlobalVariables;  // Clear the global variables.
      LibrarySetupStorage.Restore;

      IF isInitialized THEN
        EXIT;

      LibrarySales.SetCreditWarningsToNoWarnings;
      isInitialized := TRUE;

      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"Marketing Setup");
    END;

    LOCAL PROCEDURE ClearGlobalVariables@58();
    BEGIN
      CostLCY := 0;
      DurationMin := 0;
      CLEAR(TemplateCode);
      CLEAR(Flag);
      CLEAR(ContactType);
      CLEAR(SearchArea);
      CLEAR(IndexMode);
    END;

    LOCAL PROCEDURE CreateAndUpdateTemplate@7(InteractionGroupCode@1001 : Code[10]) : Code[10];
    VAR
      InteractionTemplate@1000 : Record 5064;
    BEGIN
      LibraryMarketing.CreateInteractionTemplate(InteractionTemplate);
      UpdateInteractionTemplate(InteractionTemplate,InteractionGroupCode);
      EXIT(InteractionTemplate.Code);
    END;

    LOCAL PROCEDURE CreateSegment@32(VAR SegmentHeader@1007 : Record 5076;InteractionTemplateCode@1001 : Code[10]);
    VAR
      SegmentLine@1006 : Record 5077;
      Contact@1005 : Record 5050;
    BEGIN
      // Create Segment Header with Interaction Template and Segment Line with Contact No.
      LibraryMarketing.CreateSegmentHeader(SegmentHeader);
      SegmentHeader.VALIDATE("Interaction Template Code",InteractionTemplateCode);
      SegmentHeader.MODIFY(TRUE);

      LibraryMarketing.CreateSegmentLine(SegmentLine,SegmentHeader."No.");
      Contact.SETFILTER("Salesperson Code",'<>''''');
      Contact.FINDFIRST;
      SegmentLine.VALIDATE("Contact No.",Contact."No.");
      SegmentLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindInteractionLogEntry@66(VAR InteractionLogEntry@1000 : Record 5065;ContactNo@1001 : Code[20];InteractionGroupCode@1002 : Code[10];InteractionTemplateCode@1003 : Code[10]);
    BEGIN
      InteractionLogEntry.SETRANGE("Contact No.",ContactNo);
      InteractionLogEntry.SETRANGE("Interaction Group Code",InteractionGroupCode);
      InteractionLogEntry.SETRANGE("Interaction Template Code",InteractionTemplateCode);
      InteractionLogEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE RunLogSegment@15(SegmentNo@1000 : Code[20]);
    VAR
      LogSegment@1001 : Report 5185;
    BEGIN
      LogSegment.SetSegmentNo(SegmentNo);
      LogSegment.USEREQUESTPAGE(FALSE);
      LogSegment.RUNMODAL;
    END;

    LOCAL PROCEDURE TransactionRollback@2();
    BEGIN
      ASSERTERROR ERROR(Rollback);
    END;

    LOCAL PROCEDURE UpdateInteractionTemplate@6(VAR InteractionTemplate@1000 : Record 5064;InteractionGroupCode@1001 : Code[10]);
    VAR
      LibraryUtility@1002 : Codeunit 131000;
    BEGIN
      InteractionTemplate.VALIDATE("Interaction Group Code",InteractionGroupCode);

      // Use Random for Unit Cost (LCY) and Unit Duration (Min.) because value is not important.
      InteractionTemplate.VALIDATE("Unit Cost (LCY)",RANDOM(10) + LibraryUtility.GenerateRandomFraction);
      InteractionTemplate.VALIDATE("Unit Duration (Min.)",RANDOM(10) + LibraryUtility.GenerateRandomFraction);
      InteractionTemplate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyInteractionLogEntry@40(ContactNo@1003 : Code[20];InteractionTemplateCode@1000 : Code[10]);
    VAR
      InteractionTemplate@1001 : Record 5064;
      InteractionLogEntry@1002 : Record 5065;
    BEGIN
      InteractionTemplate.GET(InteractionTemplateCode);
      FindInteractionLogEntry(InteractionLogEntry,ContactNo,InteractionTemplate."Interaction Group Code",InteractionTemplateCode);
      InteractionLogEntry.TESTFIELD("Cost (LCY)",InteractionTemplate."Unit Cost (LCY)");
      InteractionLogEntry.TESTFIELD("Duration (Min.)",InteractionTemplate."Unit Duration (Min.)");
    END;

    LOCAL PROCEDURE VerifyTemplateGroupStatistics@80(InteractionGroup@1000 : Record 5063);
    VAR
      InteractionGroups@1003 : TestPage 5074;
      InteractionGroupStatistics@1002 : TestPage 5078;
    BEGIN
      // Open Interaction Group Statistics Page and verify values.
      InteractionGroups.OPENEDIT;
      InteractionGroups.FILTER.SETFILTER(Code,InteractionGroup.Code);
      InteractionGroupStatistics.TRAP;
      InteractionGroups."Page Interaction Group Statistics".INVOKE;

      InteractionGroupStatistics."No. of Interactions".ASSERTEQUALS(InteractionGroup."No. of Interactions");
      InteractionGroupStatistics."Cost (LCY)".ASSERTEQUALS(InteractionGroup."Cost (LCY)");
      InteractionGroupStatistics."Duration (Min.)".ASSERTEQUALS(InteractionGroup."Duration (Min.)");
    END;

    LOCAL PROCEDURE VerifyTemplateStatistics@60(InteractionTemplate@1002 : Record 5064);
    VAR
      InteractionTemplates@1001 : TestPage 5075;
      InteractionTmplStatistics@1000 : TestPage 5079;
    BEGIN
      // Open Interaction Template Statistics Page and verify values.
      InteractionTemplates.OPENEDIT;
      InteractionTemplates.FILTER.SETFILTER(Code,InteractionTemplate.Code);
      InteractionTmplStatistics.TRAP;
      InteractionTemplates."Page Interaction Tmpl. Statistics".INVOKE;

      InteractionTmplStatistics."No. of Interactions".ASSERTEQUALS(InteractionTemplate."No. of Interactions");
      InteractionTmplStatistics."Cost (LCY)".ASSERTEQUALS(InteractionTemplate."Cost (LCY)");
      InteractionTmplStatistics."Duration (Min.)".ASSERTEQUALS(InteractionTemplate."Duration (Min.)");
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@3(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE CreateInteractPageHandler@36(VAR CreateInteraction@1003 : Page 5077;VAR Response@1000 : Action);
    VAR
      TempSegmentLine@1001 : TEMPORARY Record 5077;
      Attachment@1002 : Record 5062;
    BEGIN
      TempSegmentLine.INIT;
      CreateInteraction.GETRECORD(TempSegmentLine);
      TempSegmentLine.INSERT;

      TempSegmentLine.VALIDATE("Interaction Template Code",TemplateCode);
      TempSegmentLine.VALIDATE(Description,TemplateCode);  // Validating Description as TemplateCode as using for contact search.
      TempSegmentLine.MODIFY;

      TempSegmentLine.CheckStatus;
      TempSegmentLine.PerformNextWizardStatus(Attachment);

      IF Flag THEN BEGIN
        TempSegmentLine.PerformNextWizardStatus(Attachment);
        TempSegmentLine.VALIDATE("Cost (LCY)",CostLCY);
        TempSegmentLine.VALIDATE("Duration (Min.)",DurationMin);
      END;

      TempSegmentLine.FinishWizard(TRUE,Attachment);
    END;

    [ModalPageHandler]
    PROCEDURE ModalFormHandlerCreateInteract@24(VAR CreateInteraction@1003 : Page 5077;VAR Response@1000 : Action);
    VAR
      TempSegmentLine@1001 : TEMPORARY Record 5077;
      Attachment@1002 : Record 5062;
    BEGIN
      TempSegmentLine.INIT;
      CreateInteraction.GETRECORD(TempSegmentLine);
      TempSegmentLine.INSERT;

      IF TemplateCode <> '' THEN BEGIN
        TempSegmentLine.VALIDATE("Interaction Template Code",TemplateCode);
        TempSegmentLine.MODIFY;
      END;

      TempSegmentLine.CheckStatus;
      TempSegmentLine.PerformNextWizardStatus(Attachment);
    END;

    [ModalPageHandler]
    PROCEDURE ModalFormInteractionGroupStat@63(VAR InteractionGroupStatistics@1003 : Page 5078;VAR Response@1000 : Action);
    VAR
      InteractionGroup@1001 : Record 5063;
    BEGIN
      InteractionGroupStatistics.GETRECORD(InteractionGroup);
      InteractionGroup.CALCFIELDS("Cost (LCY)","Duration (Min.)");
      InteractionGroup.TESTFIELD("Cost (LCY)",CostLCY);
      InteractionGroup.TESTFIELD("Duration (Min.)",DurationMin);
    END;

    [ModalPageHandler]
    PROCEDURE InteractionSaveMergedDocumentPageHandler@13(VAR CreateInteraction@1003 : Page 5077;VAR Response@1000 : Action);
    VAR
      TempSegmentLine@1001 : TEMPORARY Record 5077;
      Attachment@1002 : Record 5062;
    BEGIN
      TempSegmentLine.INIT;
      CreateInteraction.GETRECORD(TempSegmentLine);
      TempSegmentLine.INSERT;

      TempSegmentLine.VALIDATE("Interaction Template Code",TemplateCode);
      TempSegmentLine.VALIDATE(Description,TemplateCode);  // Validating Description as TemplateCode as using for contact search.
      TempSegmentLine.MODIFY;

      TempSegmentLine.CheckStatus;
      TempSegmentLine.PerformNextWizardStatus(Attachment);

      TempSegmentLine.FinishWizard(TRUE,Attachment);
    END;

    LOCAL PROCEDURE CreateInteractionTmplLanguageWithAttachmentNo@11(TemplateCode@1003 : Code[10];AttachmentNo@1001 : Integer);
    VAR
      InteractionTmplLanguage@1004 : Record 5103;
    BEGIN
      InteractionTmplLanguage.INIT;
      InteractionTmplLanguage."Interaction Template Code" := TemplateCode;
      InteractionTmplLanguage."Language Code" := '';
      InteractionTmplLanguage."Attachment No." := AttachmentNo;
      InteractionTmplLanguage.INSERT;
    END;

    LOCAL PROCEDURE WordDocumentTakeValue@18(VAR Attachment@1001 : Record 5062;MergeFieldNo@1002 : Integer) MergedFieldValue : Text[250];
    VAR
      WordApplication@1005 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      WordDocument@1004 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      WordFields@1008 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Fields" RUNONCLIENT;
      WordRange@1012 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Range" RUNONCLIENT;
      WordHelper@1007 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.WordHelper" RUNONCLIENT;
      FileName@1000 : Text;
    BEGIN
      WordApplication := WordApplication.ApplicationClass;

      Attachment.CALCFIELDS(Attachment);
      FileName := Attachment.ConstFilename;
      Attachment.ExportAttachmentToClientFile(FileName);
      WordDocument := WordHelper.CallOpen(WordApplication,FileName,FALSE,FALSE);

      WordFields := WordDocument.Fields;
      WordRange := WordFields.Item(MergeFieldNo).Result;
      MergedFieldValue := WordRange.Text;

      CLEAR(WordDocument);
      WordHelper.CallQuit(WordApplication,FALSE);
      CLEAR(WordApplication);
    END;

    LOCAL PROCEDURE AttachmentFromInteractionLogEntry@23(VAR Attachment@1005 : Record 5062;ContactNo@1003 : Code[20];InteractionGroupCode@1004 : Code[10];InteractionTemplateCode@1000 : Code[10]);
    VAR
      InteractionLogEntry@1002 : Record 5065;
    BEGIN
      InteractionLogEntry.RESET;
      InteractionLogEntry.SETRANGE("Contact No.",ContactNo);
      InteractionLogEntry.SETRANGE("Interaction Group Code",InteractionGroupCode);
      InteractionLogEntry.SETRANGE("Interaction Template Code",InteractionTemplateCode);
      InteractionLogEntry.FINDFIRST;
      Attachment.GET(InteractionLogEntry."Attachment No.");
    END;

    LOCAL PROCEDURE UpdateMarketingSetup@64(MarketingSetup@1001 : Record 5079;StorageType@1003 : Option;StorageLocation@1002 : Text);
    BEGIN
      MarketingSetup.GET;
      MarketingSetup."Attachment Storage Type" := StorageType;
      MarketingSetup."Attachment Storage Location" :=
        COPYSTR(StorageLocation,1,MAXSTRLEN(MarketingSetup."Attachment Storage Location"));
      MarketingSetup.MODIFY;
    END;

    BEGIN
    {
      // [FEATURE] [Interaction] [Marketing]
      Test for Marketing Interaction:
        1. Check if system is allowing you to create a new interaction group.
        2. Check if system is allowing you to create a new interaction template for the interaction group.
        3. Check if system is allowing you to open interaction group statistics.
        4. Check that it is possible to Remove Attachment from Interaction Template.
        5. Check if system is allowing you to create interaction without Interaction Template code in interaction wizard.
        6. Check if system is allowing you to create interaction without Description in interaction wizard.
        7. Check Interaction successfully logged for the Contact.
        8. Check that it is possible to create Interaction for a Contact from Interaction Log Entries.
        9. Check Interaction Details can be successfully updated while creating Interaction for Contact.
       10. Check Interaction Template Statistics after creating Interaction.
       11. Check Interaction Group Statistics after creating Interaction.
       12. Check Contact Search before running Gen. Interaction Search Index report when Search Area is Interaction Log Entry.
       13. Check Contact Search after running Gen. Interaction Search Index report when Search Area is Interaction Log Entry.

      TFS_TS_ID = 166269
      Cover Test cases:
      ------------------------------------------------------------------------------
      Test Function Name                                           TFS ID
      ------------------------------------------------------------------------------
      CreationInteractionGroup                                     122782
      CreationInteractionTemplate                                  122783
      OpenInteractionGroupStatistics                               122784

      TFS_TS_ID = 166521
      Cover Test cases:
      ------------------------------------------------------------------------------
      Test Function Name                                           TFS ID
      ------------------------------------------------------------------------------
      RemoveAttachment                                             122787
      InteractionWithoutTemplate                                   122792
      InteractionWithoutDescription                                122793

      TFS_TS_ID = 257464
      Cover Test cases:
      ---------------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      ---------------------------------------------------------------------------------------------------------
      InteractionForContact, InteractionFromLogEntries, InteractionForNewCostAndAmount        128002
      InteractionTemplateStatistics, InteractionGroupStatistics                               128002

      TFS_TS_ID = 274273
      Cover Test cases:
      ---------------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      ---------------------------------------------------------------------------------------------------------
      ContactSearchForInteractionLogEntry, GenerateInteractionSearchIndex                     129039
    }
    END.
  }
}

