OBJECT Codeunit 134811 ERM CA Cost Journal
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryCostAccounting@1001 : Codeunit 131340;
      LibraryRandom@1008 : Codeunit 130440;
      Assert@1005 : Codeunit 130000;
      CostJournalLinesCountError@1002 : TextConst 'ENU=Incorrect number of cost journal lines.';
      CostEntryFieldError@1016 : TextConst 'ENU=Incorrect value of %1 field of Cost Entry.';
      CostRegisterFieldError@1013 : TextConst 'ENU=Incorrect value of %1 field of Cost Register.';
      CostJournalBatchNameError@1017 : TextConst 'ENU=Incorrect value of Cost Journal Batch Name.';
      CostRegisterSourceCodeError@1004 : TextConst 'ENU="Incorrect value of Source Code field of Cost Register Entry. "';
      BlockedErrorMsg@1011 : TextConst 'ENU=Blocked must be equal to ''No''';
      BalCCAndCOErrorMsg@1009 : TextConst 'ENU=You cannot define both balance cost center and balance cost object.';
      CCAndCOErrorMsg@1006 : TextConst 'ENU=You cannot define both cost center and cost object.';
      CostJournalFieldErrorMsg@1012 : TextConst 'ENU=%1 must have a value in Cost Journal Line';
      NoCCOrCOErrorMsg@1007 : TextConst 'ENU=Cost center or cost object must be defined.';
      NoBalCCOrCOErrorMsg@1010 : TextConst 'ENU=Balance cost center or balance cost object must be defined.';
      UnexpectedErrorMessage@1003 : TextConst 'ENU=Unexpected error message.';
      CostJnlBatchNotBalancedError@1014 : TextConst 'ENU=The lines in Cost Journal are out of balance by %1.';
      GlobalBatchName@1015 : Code[10];
      InvalidPostingReportIDErr@1018 : TextConst 'ENU=Field %1 must contain ID Cost Register Report';

    [Test]
    PROCEDURE ErrorWhenJournalNotBalanced@4();
    VAR
      CostJournalBatch@1002 : Record 1102;
      CostJournalLine@1001 : Record 1101;
    BEGIN
      Initialize;

      // Setup:
      FindCostJnlBatchAndTemplate(CostJournalBatch);

      // Exercise:
      LibraryCostAccounting.CreateCostJournalLine(CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);
      CostJournalLine.VALIDATE("Bal. Cost Type No.",'');
      CostJournalLine.MODIFY(TRUE);

      // Verify:
      ASSERTERROR LibraryCostAccounting.PostCostJournalLine(CostJournalLine);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(CostJnlBatchNotBalancedError,CostJournalLine.Amount)) > 0,
        UnexpectedErrorMessage);

      // Teardown.
      CLEARLASTERROR;
      ClearCostAccountingSetup;
    END;

    [Test]
    PROCEDURE ErrorWhenBothCCAndCOUsed@2();
    VAR
      CostCenter@1003 : Record 1112;
      CostObject@1005 : Record 1113;
      CostJournalBatch@1000 : Record 1102;
      CostJournalLine@1001 : Record 1101;
    BEGIN
      Initialize;

      // Setup:
      FindCostJnlBatchAndTemplate(CostJournalBatch);
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      LibraryCostAccounting.CreateCostObject(CostObject);

      // Exercise:
      LibraryCostAccounting.CreateCostJournalLine(CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);
      CostJournalLine.VALIDATE("Cost Center Code",CostCenter.Code);
      CostJournalLine.VALIDATE("Cost Object Code",CostObject.Code);
      CostJournalLine.MODIFY(TRUE);

      // Verify:
      ASSERTERROR LibraryCostAccounting.PostCostJournalLine(CostJournalLine);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,CCAndCOErrorMsg) > 0,UnexpectedErrorMessage);

      // Teardown.
      CLEARLASTERROR;
      ClearCostAccountingSetup;
    END;

    [Test]
    PROCEDURE ErrorWhenNoCCOrCOUsed@12();
    VAR
      CostJournalBatch@1001 : Record 1102;
      CostJournalLine@1000 : Record 1101;
    BEGIN
      Initialize;

      // Setup:
      FindCostJnlBatchAndTemplate(CostJournalBatch);

      // Exercise:
      LibraryCostAccounting.CreateCostJournalLine(CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);
      CostJournalLine.VALIDATE("Cost Center Code",'');
      CostJournalLine.VALIDATE("Cost Object Code",'');
      CostJournalLine.MODIFY(TRUE);

      // Verify:
      ASSERTERROR LibraryCostAccounting.PostCostJournalLine(CostJournalLine);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,NoCCOrCOErrorMsg) > 0,UnexpectedErrorMessage);

      // Teardown.
      CLEARLASTERROR;
      ClearCostAccountingSetup;
    END;

    [Test]
    PROCEDURE ErrorWhenBothBalCCAndBalCOUsed@7();
    VAR
      CostCenter@1003 : Record 1112;
      CostObject@1002 : Record 1113;
      CostJournalBatch@1001 : Record 1102;
      CostJournalLine@1000 : Record 1101;
    BEGIN
      Initialize;

      // Setup:
      FindCostJnlBatchAndTemplate(CostJournalBatch);
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      LibraryCostAccounting.CreateCostObject(CostObject);

      // Exercise:
      LibraryCostAccounting.CreateCostJournalLine(CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);
      CostJournalLine.VALIDATE("Bal. Cost Type No.",CostJournalLine."Cost Type No.");
      CostJournalLine.VALIDATE("Bal. Cost Center Code",CostCenter.Code);
      CostJournalLine.VALIDATE("Bal. Cost Object Code",CostObject.Code);
      CostJournalLine.MODIFY(TRUE);

      // Verify:
      ASSERTERROR LibraryCostAccounting.PostCostJournalLine(CostJournalLine);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,BalCCAndCOErrorMsg) > 0,UnexpectedErrorMessage);

      // Teardown.
      CLEARLASTERROR;
      ClearCostAccountingSetup;
    END;

    [Test]
    PROCEDURE ErrorWhenNoBalCCOrBalCOUsed@14();
    VAR
      CostJournalBatch@1001 : Record 1102;
      CostJournalLine@1000 : Record 1101;
    BEGIN
      Initialize;

      // Setup:
      FindCostJnlBatchAndTemplate(CostJournalBatch);

      // Exercise:
      LibraryCostAccounting.CreateCostJournalLine(CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);
      CostJournalLine.VALIDATE("Bal. Cost Type No.",CostJournalLine."Cost Type No.");
      CostJournalLine.VALIDATE("Bal. Cost Center Code",'');
      CostJournalLine.VALIDATE("Bal. Cost Object Code",'');
      CostJournalLine.MODIFY(TRUE);

      // Verify:
      ASSERTERROR LibraryCostAccounting.PostCostJournalLine(CostJournalLine);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,NoBalCCOrCOErrorMsg) > 0,UnexpectedErrorMessage);

      // Teardown.
      CLEARLASTERROR;
      ClearCostAccountingSetup;
    END;

    [Test]
    PROCEDURE ErrorWhenCostCenterBlocked@3();
    VAR
      CostCenter@1000 : Record 1112;
      CostJournalBatch@1002 : Record 1102;
      CostJournalLine@1001 : Record 1101;
    BEGIN
      Initialize;

      // Setup:
      FindCostJnlBatchAndTemplate(CostJournalBatch);
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      CostCenter.VALIDATE(Blocked,TRUE);
      CostCenter.MODIFY(TRUE);

      // Exercise:
      LibraryCostAccounting.CreateCostJournalLine(CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);

      // Verify:
      ASSERTERROR CostJournalLine.VALIDATE("Cost Center Code",CostCenter.Code);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,BlockedErrorMsg) > 0,UnexpectedErrorMessage);

      // Teardown.
      CLEARLASTERROR;
      ClearCostAccountingSetup;
    END;

    [Test]
    PROCEDURE ErrorWhenCostObjectBlocked@9();
    VAR
      CostObject@1000 : Record 1113;
      CostJournalBatch@1002 : Record 1102;
      CostJournalLine@1001 : Record 1101;
    BEGIN
      Initialize;

      // Setup:
      FindCostJnlBatchAndTemplate(CostJournalBatch);
      LibraryCostAccounting.CreateCostObject(CostObject);
      CostObject.VALIDATE(Blocked,TRUE);
      CostObject.MODIFY(TRUE);

      // Exercise:
      LibraryCostAccounting.CreateCostJournalLine(CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);

      // Verify:
      ASSERTERROR CostJournalLine.VALIDATE("Cost Object Code",CostObject.Code);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,BlockedErrorMsg) > 0,UnexpectedErrorMessage);

      // Teardown.
      CLEARLASTERROR;
      ClearCostAccountingSetup;
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ErrorWhenCostTypeBlocked@6();
    VAR
      CostType@1000 : Record 1103;
      CostJournalBatch@1002 : Record 1102;
      CostJournalLine@1001 : Record 1101;
    BEGIN
      Initialize;

      // Setup:
      FindCostJnlBatchAndTemplate(CostJournalBatch);
      LibraryCostAccounting.CreateCostType(CostType);
      CostType.VALIDATE(Blocked,TRUE);
      CostType.MODIFY(TRUE);

      // Exercise
      LibraryCostAccounting.CreateCostJournalLine(CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);

      // Verify:
      ASSERTERROR CostJournalLine.VALIDATE("Cost Type No.",CostType."No.");
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,BlockedErrorMsg) > 0,UnexpectedErrorMessage);

      // Teardown.
      CLEARLASTERROR;
      ClearCostAccountingSetup;
    END;

    [Test]
    PROCEDURE ErrorWhenDocumentNoIsMissing@8();
    VAR
      CostJournalBatch@1001 : Record 1102;
      CostJournalLine@1000 : Record 1101;
    BEGIN
      Initialize;

      // Setup:
      FindCostJnlBatchAndTemplate(CostJournalBatch);

      // Exercise:
      LibraryCostAccounting.CreateCostJournalLine(CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);
      CostJournalLine.VALIDATE("Document No.",'');
      CostJournalLine.MODIFY(TRUE);

      // Verify:
      ASSERTERROR  LibraryCostAccounting.PostCostJournalLine(CostJournalLine);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(CostJournalFieldErrorMsg,CostJournalLine.FIELDNAME("Document No."))) > 0,
        UnexpectedErrorMessage);

      // Teardown.
      CLEARLASTERROR;
      ClearCostAccountingSetup;
    END;

    [Test]
    PROCEDURE ErrorWhenJnlLinesNotBalanced@10();
    VAR
      CostJournalBatch@1002 : Record 1102;
      CostJournalLine@1001 : Record 1101;
      Amount@1000 : Integer;
    BEGIN
      Initialize;

      // Setup:
      FindCostJnlBatchAndTemplate(CostJournalBatch);

      // Exercise:
      LibraryCostAccounting.CreateCostJournalLine(CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);
      CostJournalLine.VALIDATE("Bal. Cost Type No.",'');
      CostJournalLine.MODIFY(TRUE);
      Amount := CostJournalLine.Amount;

      LibraryCostAccounting.CreateCostJournalLine(CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);
      CostJournalLine.VALIDATE(Amount,-(Amount + LibraryRandom.RandInt(10)));
      CostJournalLine.VALIDATE("Bal. Cost Type No.",'');
      CostJournalLine.MODIFY(TRUE);

      // Verify:
      ASSERTERROR LibraryCostAccounting.PostCostJournalLine(CostJournalLine);
      // active bug (TO DO: validate error msg)

      // Teardown.
      CLEARLASTERROR;
      ClearCostAccountingSetup;
    END;

    [Test]
    PROCEDURE ErrorWhenPostingDateIsMissing@13();
    VAR
      CostJournalBatch@1001 : Record 1102;
      CostJournalLine@1000 : Record 1101;
    BEGIN
      Initialize;

      // Setup:
      FindCostJnlBatchAndTemplate(CostJournalBatch);

      // Exercise:
      LibraryCostAccounting.CreateCostJournalLine(CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);
      CostJournalLine.VALIDATE("Posting Date",0D);
      CostJournalLine.MODIFY(TRUE);

      // Verify:
      ASSERTERROR LibraryCostAccounting.PostCostJournalLine(CostJournalLine);
      Assert.IsTrue(
        STRPOS(GETLASTERRORTEXT,STRSUBSTNO(CostJournalFieldErrorMsg,CostJournalLine.FIELDNAME("Posting Date"))) > 0,
        UnexpectedErrorMessage);

      // Teardown.
      CLEARLASTERROR;
      ClearCostAccountingSetup;
    END;

    [Test]
    [HandlerFunctions(CostJournalHandler)]
    PROCEDURE OpenJnlFromCostJnlBatchPage@17();
    VAR
      CostJnlBatchPage@1000 : TestPage 1135;
    BEGIN
      Initialize;

      // Setup:
      CostJnlBatchPage.OPENEDIT;
      GlobalBatchName := CostJnlBatchPage.Name.VALUE;

      // Exercise:
      CostJnlBatchPage."Edit Journal".INVOKE;

      // Clean-up
      CostJnlBatchPage.CLOSE;
      ClearCostAccountingSetup;
    END;

    [Test]
    PROCEDURE PostInDeleteAfterPostBatch@20();
    VAR
      CostJournalBatch@1001 : Record 1102;
      CostJournalLine@1000 : Record 1101;
    BEGIN
      Initialize;

      // Setup:
      FindCostJnlBatchAndTemplate(CostJournalBatch);

      // Exercise:
      LibraryCostAccounting.CreateCostJournalLine(CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);
      LibraryCostAccounting.PostCostJournalLine(CostJournalLine);

      // Verify:
      ValidateCostJournalCount(CostJournalBatch,0);
      ValidateCreatedEntries(CostJournalLine);

      // Teardown.
      ClearCostAccountingSetup;
    END;

    [Test]
    PROCEDURE PostInNoDeleteAfterPostBatch@21();
    VAR
      CostJournalBatch@1001 : Record 1102;
      CostJournalLine@1000 : Record 1101;
    BEGIN
      Initialize;

      // Setup:
      FindCostJnlBatchAndTemplate(CostJournalBatch);
      CostJournalBatch.VALIDATE("Delete after Posting",FALSE);
      CostJournalBatch.MODIFY(TRUE);

      // Exercise:
      LibraryCostAccounting.CreateCostJournalLine(CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);
      LibraryCostAccounting.PostCostJournalLine(CostJournalLine);

      // Verify:
      ValidateCostJournalCount(CostJournalBatch,1);
      ValidateCreatedEntries(CostJournalLine);

      // Clean-up:
      CostJournalBatch.VALIDATE("Delete after Posting",TRUE);
      CostJournalBatch.MODIFY(TRUE);
      ClearCostAccountingSetup;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler)]
    PROCEDURE PostDirectlyFromBatch@15();
    VAR
      CostJournalBatch@1001 : Record 1102;
      CostJournalLine@1000 : Record 1101;
    BEGIN
      Initialize;

      // Setup:
      FindCostJnlBatchAndTemplate(CostJournalBatch);
      CostJournalLine.SETRANGE("Journal Template Name",CostJournalBatch."Journal Template Name");
      CostJournalLine.DELETEALL;

      // Exercise:
      LibraryCostAccounting.CreateCostJournalLine(CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name);
      COMMIT;
      CODEUNIT.RUN(CODEUNIT::"CA Jnl.-B. Post",CostJournalBatch);

      // Verify:
      ValidateCostJournalCount(CostJournalBatch,0);
      ValidateCreatedEntries(CostJournalLine);

      // Teardown.
      ClearCostAccountingSetup;
    END;

    [Test]
    [HandlerFunctions(CostJnlBatchHandler)]
    PROCEDURE UpdateJnlBatchFromJnlBatchPage@29();
    VAR
      CostJournalPage@1000 : TestPage 1108;
    BEGIN
      Initialize;

      // Setup:
      CostJournalPage.OPENEDIT;

      // Exercise:
      CostJournalPage.CostJnlBatchName.LOOKUP;

      // Verify:
      Assert.AreEqual(GlobalBatchName,CostJournalPage.CostJnlBatchName.VALUE,CostJournalBatchNameError);

      // Clean-up
      CostJournalPage.CLOSE;
      ClearCostAccountingSetup;
    END;

    [Test]
    PROCEDURE UpdateJnlBatchDirectly@39();
    VAR
      CostJournalBatch@1000 : Record 1102;
      CostJournalPage@1001 : TestPage 1108;
    BEGIN
      Initialize;

      // Setup:
      FindCostJnlBatchAndTemplate(CostJournalBatch);
      CostJournalPage.OPENEDIT;

      // Exercise:
      CostJournalPage.CostJnlBatchName.SETVALUE(CostJournalBatch.Name);

      // Verify:
      Assert.AreEqual(CostJournalBatch.Name,CostJournalPage.CostJnlBatchName.VALUE,CostJournalBatchNameError);

      // Clean-up
      CostJournalPage.CLOSE;
      ClearCostAccountingSetup;
    END;

    [Test]
    PROCEDURE ErrorWhenPostingReportIdEmpty@27();
    VAR
      CostJnlLine@1006 : Record 1101;
      CostJnlTemplate@1005 : Record 1100;
      TempCostJnlTemplate@1000 : TEMPORARY Record 1100;
      CostJnlMgt@1002 : Codeunit 1106;
      JnlSelected@1004 : Boolean;
    BEGIN
      // Save CostJnlTmplate
      CopyCostJnlTemplate(CostJnlTemplate,TempCostJnlTemplate);

      CostJnlTemplate.DELETEALL;
      CostJnlMgt.TemplateSelection(CostJnlLine,JnlSelected);

      CostJnlTemplate.GET(CostJnlLine.GETRANGEMAX("Journal Template Name"));
      Assert.AreEqual(REPORT::"Cost Register",CostJnlTemplate."Posting Report ID",
        STRSUBSTNO(InvalidPostingReportIDErr,CostJnlTemplate.FIELDCAPTION("Posting Report ID")));

      // Restore all deleted records
      CopyCostJnlTemplate(TempCostJnlTemplate,CostJnlTemplate);
    END;

    LOCAL PROCEDURE Initialize@1();
    BEGIN
      LibraryCostAccounting.InitializeCASetup;
    END;

    LOCAL PROCEDURE ClearCostAccountingSetup@22();
    VAR
      CostAccountingSetup@1000 : Record 1108;
    BEGIN
      CostAccountingSetup.GET;
      CostAccountingSetup.VALIDATE("Align G/L Account",CostAccountingSetup."Align G/L Account"::"No Alignment");
      CostAccountingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindCostJnlBatchAndTemplate@5(VAR CostJournalBatch@1000 : Record 1102);
    VAR
      CostJournalTemplate@1001 : Record 1100;
    BEGIN
      LibraryCostAccounting.FindCostJournalTemplate(CostJournalTemplate);
      LibraryCostAccounting.FindCostJournalBatch(CostJournalBatch,CostJournalTemplate.Name);
      LibraryCostAccounting.ClearCostJournalLines(CostJournalBatch);
    END;

    LOCAL PROCEDURE VerifyCostEntryCommonFields@23(CostEntry@1001 : Record 1104);
    VAR
      CostAccountingSetup@1002 : Record 1108;
      SourceCodeSetup@1000 : Record 242;
    BEGIN
      CostAccountingSetup.GET;
      SourceCodeSetup.GET;

      Assert.AreEqual(0,CostEntry."G/L Entry No.",STRSUBSTNO(CostEntryFieldError,CostEntry.FIELDNAME("G/L Entry No.")));
      Assert.AreEqual(FALSE,CostEntry."System-Created Entry",
        STRSUBSTNO(CostEntryFieldError,CostEntry.FIELDNAME("System-Created Entry")));
      Assert.AreEqual(SourceCodeSetup."Cost Journal",CostEntry."Source Code",
        STRSUBSTNO(CostEntryFieldError,CostEntry.FIELDNAME("Source Code")));
    END;

    LOCAL PROCEDURE VerifyCostEntrySpecificFields@24(CostEntry@1004 : Record 1104;CostTypeNo@1000 : Code[20];CostCenterCode@1001 : Code[20];CostObjectCode@1002 : Code[20];Amount@1003 : Decimal);
    BEGIN
      Assert.AreEqual(Amount,CostEntry.Amount,STRSUBSTNO(CostEntryFieldError,CostEntry.FIELDNAME(Amount)));
      Assert.AreEqual(CostTypeNo,CostEntry."Cost Type No.",STRSUBSTNO(CostEntryFieldError,CostEntry.FIELDNAME("Cost Type No.")));
      Assert.AreEqual(
        CostCenterCode,CostEntry."Cost Center Code",STRSUBSTNO(CostEntryFieldError,CostEntry.FIELDNAME("Cost Center Code")));
      Assert.AreEqual(
        CostObjectCode,CostEntry."Cost Object Code",STRSUBSTNO(CostEntryFieldError,CostEntry.FIELDNAME("Cost Object Code")));
      IF Amount > 0 THEN
        Assert.AreEqual(Amount,CostEntry."Debit Amount",STRSUBSTNO(CostEntryFieldError,CostEntry.FIELDNAME("Debit Amount")))
      ELSE
        Assert.AreEqual(-Amount,CostEntry."Credit Amount",STRSUBSTNO(CostEntryFieldError,CostEntry.FIELDNAME("Credit Amount")));
    END;

    LOCAL PROCEDURE ValidateCreatedEntries@25(CostJournalLine@1000 : Record 1101);
    VAR
      CostEntry@1002 : Record 1104;
      CostRegister@1003 : Record 1105;
    BEGIN
      // Validate cost register
      CostRegister.FINDLAST;
      Assert.AreEqual(CostRegister.Source::"Cost Journal",CostRegister.Source,CostRegisterSourceCodeError);
      // active bug id 252400
      Assert.AreEqual(CostRegister."No. of Entries",CostRegister."To Cost Entry No." - CostRegister."From Cost Entry No." + 1,
        STRSUBSTNO(CostRegisterFieldError,CostRegister.FIELDNAME("No. of Entries")));

      // Validate cost entries
      CostEntry.SETRANGE("Entry No.",CostRegister."From Cost Entry No.",CostRegister."To Cost Entry No.");

      // First entry is the posted journal line
      CostEntry.FIND('-');
      VerifyCostEntryCommonFields(CostEntry);
      VerifyCostEntrySpecificFields(CostEntry,CostJournalLine."Cost Type No.",CostJournalLine."Cost Center Code",
        CostJournalLine."Cost Object Code",CostJournalLine.Amount);

      // Second entry is the balancing entry
      CostEntry.NEXT;
      VerifyCostEntryCommonFields(CostEntry);
      VerifyCostEntrySpecificFields(CostEntry,CostJournalLine."Bal. Cost Type No.",CostJournalLine."Bal. Cost Center Code",
        CostJournalLine."Bal. Cost Object Code",-CostJournalLine.Amount);
    END;

    LOCAL PROCEDURE ValidateCostJournalCount@16(CostJournalBatch@1000 : Record 1102;ExpectedCount@1001 : Integer);
    VAR
      CostJournalLine@1002 : Record 1101;
    BEGIN
      CostJournalLine.SETRANGE("Journal Template Name",CostJournalBatch."Journal Template Name");
      CostJournalLine.SETRANGE("Journal Batch Name",CostJournalBatch.Name);
      Assert.AreEqual(ExpectedCount,CostJournalLine.COUNT,CostJournalLinesCountError);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@19(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [PageHandler]
    PROCEDURE CostJournalHandler@18(VAR CostJournalPage@1000 : TestPage 1108);
    BEGIN
      // Verify that the correct batch is used
      CostJournalPage.CostJnlBatchName.ASSERTEQUALS(GlobalBatchName);
    END;

    [ModalPageHandler]
    PROCEDURE CostJnlBatchHandler@32(VAR CostJnlBatchPage@1000 : TestPage 1135);
    BEGIN
      CostJnlBatchPage.LAST;
      GlobalBatchName := CostJnlBatchPage.Name.VALUE;
      CostJnlBatchPage.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@11(Message@1000 : Text[1024]);
    BEGIN
      // dummy message handler
    END;

    [Normal]
    LOCAL PROCEDURE CopyCostJnlTemplate@30(VAR CostJnlTemplateFrom@1000 : Record 1100;VAR CostJnlTemplateTo@1001 : Record 1100);
    BEGIN
      CostJnlTemplateTo.DELETEALL;
      IF CostJnlTemplateFrom.FINDSET THEN
        REPEAT
          CostJnlTemplateTo.COPY(CostJnlTemplateFrom);
          CostJnlTemplateTo.INSERT;
        UNTIL CostJnlTemplateFrom.NEXT = 0;
    END;

    BEGIN
    {
      // [FEATURE] [Cost Accounting]
       Area: 2.1.3.1 - Add a Manual Entry in Cost Accounting in a Journal
      Test Brief: http://vstfnav/Sites/DynamicsNAV7/Document Repository/Test Briefs and TDS/92842 - TDS - Cost Accounting.docx
    }
    END.
  }
}

