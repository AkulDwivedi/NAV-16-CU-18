OBJECT Codeunit 134978 ERM Fixed Assets Reports
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1047 : Codeunit 131300;
      LibraryFixedAsset@1009 : Codeunit 131330;
      LibraryDimension@1048 : Codeunit 131001;
      LibraryReportValidation@1028 : Codeunit 131002;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryVariableStorage@1044 : Codeunit 131004;
      LibraryUtility@1002 : Codeunit 131000;
      Assert@1005 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      SpecifyDateErr@1004 : TextConst 'ENU=You must specify the Starting Date and the Ending Date.';
      LaterEndingDateErr@1007 : TextConst 'ENU=The Starting Date is later than the Ending Date.';
      SpecifiedOnlyTogetherErr@1008 : TextConst '@@@="%1 and %2 = Field Names";ENU=%1 or %2 must be specified only together with the option at Ending Date.';
      AcquisitionCostErr@1022 : TextConst 'ENU=Acquisition Cost Error.';
      AcquisitionCostAmountErr@1023 : TextConst 'ENU=Acquisition Cost Amount must be same.';
      AppreciationErr@1024 : TextConst 'ENU=Appreciation Error.';
      AppreciationAmountErr@1025 : TextConst 'ENU=Appreciation Amount must be same.';
      GroupTotalAmountErr@1026 : TextConst 'ENU=Group Total Amount must be same.';
      TotalAmountErr@1027 : TextConst 'ENU=Total Amount must be same.';
      GainLossTxt@1010 : TextConst 'ENU=Gain/Loss';
      ProceedsonDisposalTxt@1011 : TextConst 'ENU=Proceeds on Disposal';
      AcquisitionDateTxt@1018 : TextConst 'ENU=Acquisition Date';
      AcquisitionCostTxt@1019 : TextConst 'ENU=Acquisition Cost';
      AppreciationTxt@1020 : TextConst 'ENU=Appreciation';
      BookValueTxt@1021 : TextConst 'ENU=Book Value';
      TotalTxt@1029 : TextConst 'ENU=Total';
      SoldTxt@1030 : TextConst 'ENU=Fixed Asset - Analysis (Only Sold Assets)';
      BudgetTxt@1031 : TextConst 'ENU=Fixed Asset - Analysis (Budget Report)';
      GroupTotalTxt@1003 : TextConst 'ENU=Group Total:';
      AcquisitionCostBeforeDateTxt@1017 : TextConst 'ENU=Acquisition Cost before Starting Date';
      AcquisitionCostNetChangeTxt@1013 : TextConst 'ENU=Acquisition Cost Net Change';
      AcquisitionCostatEndingDateTxt@1012 : TextConst 'ENU=Acquisition Cost at Ending Date';
      AppreciationNetChangeTxt@1014 : TextConst 'ENU=Appreciation Net Change';
      AppreciationatEndingDateTxt@1015 : TextConst 'ENU=Appreciation at Ending Date';
      AppreciationBeforeDateTxt@1016 : TextConst 'ENU=Appreciation before Starting Date';
      FixedAssetsErr@1006 : TextConst 'ENU=Fixed Assets does not exist.';
      FixedAssetsColumnvalueErr@1033 : TextConst 'ENU=Column value does not exist.';
      UnknownErr@1032 : TextConst 'ENU=Unknown Error.';
      DepreciationBookErr@1046 : TextConst '@@@="%1 = Depreciation Book Code";ENU=%1 does not exist.';
      GroupTotalsTxt@1045 : TextConst '@@@="%1 = Field Caption";ENU=Group Totals: %1';
      AdditionInPeriodTxt@1043 : TextConst 'ENU=Addition in Period';
      DisposalInPeriodTxt@1041 : TextConst 'ENU=Disposal in Period';
      DepreciationInPeriodTxt@1040 : TextConst 'ENU=Depreciation in Period';
      DepreciationTxt@1039 : TextConst '@@@="%1 = Depreciation Cost Amount";ENU=Depreciation %1';
      DisposalDepreciationTxt@1037 : TextConst 'ENU=Disposal Depreciation in Period';
      Custom1DepreciationErr@1036 : TextConst '@@@="%1 = Field Name";ENU=In a budget report, %1 must be No in Depreciation Book.';
      BookValueBudgetReportTxt@1035 : TextConst '@@@="%1 = Integer (1 or 2)";ENU=Fixed Asset - Book Value 0%1 (Budget Report)';
      ExistErr@1034 : TextConst '@@@="%1 = Column or field value";ENU=%1 must exist.';
      ValueMismatchErr@1038 : TextConst '@@@="%1 = Column Caption, %2 = Value";ENU=%1 must be %2.';
      ReclassifyTxt@1042 : TextConst 'ENU=Reclassification';

    [Test]
    PROCEDURE StartingEndingDatesBlankError@1();
    VAR
      FixedAsset@1001 : Record 5600;
      FixedAssetAnalysis@1000 : Report 5600;
    BEGIN
      // Test that System generates an error when Starting Date and End Date are not filled.

      // 1. Setup: Set File Name for Report.
      Initialize;
      FixedAssetAnalysis.GetFASetup;
      LibraryReportValidation.SetFileName(FixedAsset.TABLECAPTION + FixedAsset."No.");

      // 2. Exercise: Save as Excel.
      ASSERTERROR FixedAssetAnalysis.SAVEASEXCEL(LibraryReportValidation.GetFileName);

      // 3. Verify: Verify that System generates an error when Starting Date and End Date are not filled.
      Assert.AreEqual(STRSUBSTNO(SpecifyDateErr),GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE StartDateLaterEndingDateError@3();
    VAR
      FixedAsset@1001 : Record 5600;
      FixedAssetAnalysis@1000 : Report 5600;
      LibraryReportValidation@1002 : Codeunit 131002;
    BEGIN
      // Test that System generates an error when Starting Date is later than the Ending Date.

      // 1. Setup: Set Mandatory Fields and File Name for Report.
      Initialize;
      CLEAR(FixedAssetAnalysis);

      // Using the Random Number for the Day.
      FixedAssetAnalysis.SetMandatoryFields('',CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE),WORKDATE);
      FixedAssetAnalysis.GetFASetup;
      LibraryReportValidation.SetFileName(FixedAsset.TABLECAPTION + FixedAsset."No.");

      // 2. Exercise: Save as Excel.
      ASSERTERROR FixedAssetAnalysis.SAVEASEXCEL(LibraryReportValidation.GetFileName);

      // 3. Verify: Verify that System generates an error when Starting Date is later than the Ending Date.
      Assert.AreEqual(STRSUBSTNO(LaterEndingDateErr),GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE DisposalWithStartingDateError@2();
    BEGIN
      // Test that system generates an error when Proceeds on Disposal specified without option at Ending Date.

      OptionWithStartingDateError(ProceedsonDisposalTxt);
    END;

    [Test]
    PROCEDURE GainLossWithStartingDateError@4();
    BEGIN
      // Test that system generates an error when Gain/Loss specified without option at Ending Date.

      OptionWithStartingDateError(GainLossTxt);
    END;

    LOCAL PROCEDURE OptionWithStartingDateError@5(PostingType@1003 : Text[30]);
    VAR
      FixedAsset@1000 : Record 5600;
      FADepreciationBook@1002 : Record 5612;
      FixedAssetAnalysis@1001 : Report 5600;
    BEGIN
      // 1. Setup: Set Mandatory Fields and File Name for Report.
      Initialize;
      CLEAR(FixedAssetAnalysis);
      FixedAsset.SETRANGE("No.");
      FixedAssetAnalysis.SETTABLEVIEW(FixedAsset);
      FixedAssetAnalysis.SetMandatoryFields('',WORKDATE,WORKDATE);
      FixedAssetAnalysis.SetPostingType(PostingType,'','');
      FixedAssetAnalysis.GetFASetup;
      LibraryReportValidation.SetFileName(FixedAsset.TABLECAPTION + FixedAsset."No.");

      // 2. Exercise: Save as Excel.
      ASSERTERROR FixedAssetAnalysis.SAVEASEXCEL(LibraryReportValidation.GetFileName);

      // 3. Verify: Verify an error when Proceeds on Disposal and Gain/Loss specified without option at Ending date.
      Assert.AreEqual(
        STRSUBSTNO(
          SpecifiedOnlyTogetherErr,FADepreciationBook.FIELDCAPTION("Proceeds on Disposal"),
          FADepreciationBook.FIELDCAPTION("Gain/Loss")),GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE AcquisitionCostStartingDate@6();
    VAR
      FixedAsset@1000 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FAJournalLine@1003 : Record 5621;
      FAJournalLineAmount@1004 : Decimal;
      Period@1007 : 'before Starting Date,Net Change,at Ending Date';
    BEGIN
      // Test that value of Acquisition Cost with Period 1 option Before Starting Date and Date Field 1 as Acquisition Date.

      // 1.Setup: Create Fixed Asset, Depreciation Book, FA Depreciation Book and Post FA Journal Line for Acquisition cost.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateDepreciationJournalSetup(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      FAJournalLineAmount :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Set Value for Report and save as excel.
      SaveAcquisitionAndPrintDetail(FADepreciationBook,'',Period::"before Starting Date",FALSE);

      // 3. Verify: Verify Acquisition Cost Caption and Amount in excel.
      Assert.IsTrue(LibraryReportValidation.CheckIfValueExists(AcquisitionCostBeforeDateTxt),AcquisitionCostErr);
      Assert.IsFalse(LibraryReportValidation.CheckIfValueExists(FORMAT(FAJournalLineAmount)),AcquisitionCostErr);
    END;

    [Test]
    PROCEDURE AcquisitionCostPeriodNetChange@13();
    VAR
      Period@1007 : 'before Starting Date,Net Change,at Ending Date';
    BEGIN
      // Test that value of Acquisition Cost with Period 1 option Net Change and Date Field 1 as Acquisition Date.

      AcquisitionCostWithPeriod(Period::"Net Change",AcquisitionCostNetChangeTxt);
    END;

    [Test]
    PROCEDURE AcquisitionCostWithEndingDate@14();
    VAR
      Period@1007 : 'before Starting Date,Net Change,at Ending Date';
    BEGIN
      // Test that value of Acquisition Cost with Period 1 option at Ending Date and Date Field 1 as Acquisition Date.

      AcquisitionCostWithPeriod(Period::"at Ending Date",AcquisitionCostatEndingDateTxt);
    END;

    LOCAL PROCEDURE AcquisitionCostWithPeriod@31(PeriodValue@1009 : Option;ColumnValue@1010 : Text[250]);
    VAR
      FixedAsset@1000 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FAJournalLine@1003 : Record 5621;
      FAJournalLineAmount@1004 : Decimal;
    BEGIN
      // 1.Setup: Create Fixed Asset, Depreciation Book, FA Depreciation Book and Post FA Journal Line for Acquisition cost.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateDepreciationJournalSetup(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      FAJournalLineAmount :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Set Value for the Report and save as excel.
      SaveAcquisitionAndPrintDetail(FADepreciationBook,'',PeriodValue,FALSE);

      // 3. Verify: Verify Acquisition Cost Amount in excel.
      VerifyAmount(ColumnValue,FAJournalLineAmount,AcquisitionCostAmountErr);
    END;

    [Test]
    PROCEDURE AcquisitionCostWithPrintDetail@9();
    VAR
      FixedAsset@1000 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FAJournalLine@1003 : Record 5621;
      FAJournalLineAmount@1004 : Decimal;
      Period@1007 : 'before Starting Date,Net Change,at Ending Date';
    BEGIN
      // Test that value of Acquisition Cost with Period 1 option at Ending Date and Date Field 1 as Acquisition Date and Print Details.

      // 1.Setup: Create Fixed Asset, Depreciation Book, FA Depreciation Book and Post FA Journal Line for Acquisition cost.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateDepreciationJournalSetup(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      FAJournalLineAmount :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Set Value for the Report and save as excel.
      SaveAcquisitionAndPrintDetail(FADepreciationBook,'',Period::"at Ending Date",TRUE);

      // 3. Verify: Verify Acquisition Cost Amount in excel.
      VerifyAmountRange(FixedAsset."No.",AcquisitionCostatEndingDateTxt,FAJournalLineAmount,AcquisitionCostAmountErr);
    END;

    [Test]
    PROCEDURE AppreciationBeforeStartingDate@16();
    VAR
      FixedAsset@1000 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FAJournalLine@1003 : Record 5621;
      FAJournalLineAmount@1004 : Decimal;
      FAJournalLineAmount2@1009 : Decimal;
      Period@1005 : 'before Starting Date,Net Change,at Ending Date';
    BEGIN
      // Test that value of Appreciation with Period2 option Before Starting Date and Date Field 1 as Acquisition Date.

      // 1.Setup: Create Fixed Asset, Depreciation Book and Post FA Journal Line for Acquisition cost and Appreciation.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateDepreciationJournalSetup(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      FAJournalLineAmount :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBook.Code,WORKDATE);
      FAJournalLineAmount2 :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::Appreciation,DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Set Value for the Report and save as excel.
      SaveAcquisitionAndPrintDetail(FADepreciationBook,AppreciationTxt,Period::"before Starting Date",FALSE);

      // 3. Verify: Verify Acquisition Cost, Appreciation amount and Caption in excel.
      LibraryReportValidation.OpenFile;
      Assert.IsTrue(LibraryReportValidation.CheckIfValueExists(AcquisitionCostBeforeDateTxt),AcquisitionCostErr);
      Assert.IsFalse(LibraryReportValidation.CheckIfValueExists(FORMAT(FAJournalLineAmount)),AcquisitionCostErr);
      Assert.IsTrue(LibraryReportValidation.CheckIfValueExists(AppreciationBeforeDateTxt),AppreciationErr);
      Assert.IsFalse(LibraryReportValidation.CheckIfValueExists(FORMAT(FAJournalLineAmount2)),AppreciationErr);
    END;

    [Test]
    PROCEDURE AppreciationWithNetChange@15();
    VAR
      Period@1007 : 'before Starting Date,Net Change,at Ending Date';
    BEGIN
      // Test that value of Appreciation with Period2 option Net Change and Date Field 1 as Acquisition Date.

      AppreciationWithOption(Period::"Net Change",AcquisitionCostNetChangeTxt,AppreciationNetChangeTxt);
    END;

    [Test]
    PROCEDURE AppreciationWithEndingDate@12();
    VAR
      Period@1007 : 'before Starting Date,Net Change,at Ending Date';
    BEGIN
      // Test that value of Appreciation with Period2 option at Ending Date and Date Field 1 as Acquisition Date.

      AppreciationWithOption(Period::"at Ending Date",AcquisitionCostatEndingDateTxt,AppreciationatEndingDateTxt);
    END;

    LOCAL PROCEDURE AppreciationWithOption@39(PeriodValue@1010 : Option;ColumnValue@1009 : Text[250];ColumnValue2@1013 : Text[250]);
    VAR
      FixedAsset@1000 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FAJournalLine@1003 : Record 5621;
      FAJournalLineAmount@1004 : Decimal;
      FAJournalLineAmount2@1008 : Decimal;
    BEGIN
      // 1.Setup: Create Fixed Asset, Depreciation Book and Post FA Journal Line for Acquisition cost and Appreciation.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateDepreciationJournalSetup(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      FAJournalLineAmount :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBook.Code,WORKDATE);
      FAJournalLineAmount2 :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::Appreciation,DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Set Value for the Report and save as excel.
      SaveAcquisitionAndPrintDetail(FADepreciationBook,AppreciationTxt,PeriodValue,FALSE);

      // 3. Verify: Verify Acquisition Cost and Appreciation amount in excel.
      VerifyAmount(ColumnValue,FAJournalLineAmount,AcquisitionCostAmountErr);
      VerifyAmount(ColumnValue2,FAJournalLineAmount2,AppreciationAmountErr);
    END;

    [Test]
    PROCEDURE AppreciationWithPrintDetail@11();
    VAR
      FixedAsset@1000 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FAJournalLine@1003 : Record 5621;
      FAJournalLineAmount@1004 : Decimal;
      FAJournalLineAmount2@1008 : Decimal;
      Period@1005 : 'before Starting Date,Net Change,at Ending Date';
    BEGIN
      // Test that value of Appreciation with Period2 option at Ending Date and Date Field 1 as Acquisition Date and Print Details.

      // 1.Setup: Create Fixed Asset, Depreciation Book and Post FA Journal Line for Acquisition cost and Appreciation.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateDepreciationJournalSetup(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      FAJournalLineAmount :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBook.Code,WORKDATE);
      FAJournalLineAmount2 :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::Appreciation,DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Set Value for the Report and save as excel.
      SaveAcquisitionAndPrintDetail(FADepreciationBook,AppreciationTxt,Period::"at Ending Date",TRUE);

      // 3. Verify: Verify Acquisition Cost and Appreciation amount in excel.
      VerifyAmountRange(FixedAsset."No.",AcquisitionCostatEndingDateTxt,FAJournalLineAmount,AcquisitionCostAmountErr);
      VerifyAmountRange(FixedAsset."No.",AppreciationatEndingDateTxt,FAJournalLineAmount2,AppreciationAmountErr);
    END;

    [Test]
    PROCEDURE AppreciationDateTypeStartDate@20();
    VAR
      FixedAsset@1000 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FAJournalLine@1003 : Record 5621;
      FAJournalLineAmount@1004 : Decimal;
      FAJournalLineAmount2@1009 : Decimal;
      Period@1005 : 'before Starting Date,Net Change,at Ending Date';
    BEGIN
      // Test that value of Appreciation with Period2 option Before Starting Date and Date Field 2 as Acquisition Date.

      // 1.Setup: Create Fixed Asset, Depreciation Book and Post FA Journal Line for Acquisition cost and Appreciation.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateDepreciationJournalSetup(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      FAJournalLineAmount :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBook.Code,WORKDATE);
      FAJournalLineAmount2 :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::Appreciation,DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Set Value for the Report and save as excel.
      FixedAsset.SETRANGE("No.",FixedAsset."No.");
      SaveAppreciationAndPrintDetail(FixedAsset,DepreciationBook.Code,Period::"before Starting Date",FALSE);

      // 3. Verify: Verify Acquisition Cost, Appreciation amount and caption in excel.
      LibraryReportValidation.OpenFile;
      Assert.IsTrue(LibraryReportValidation.CheckIfValueExists(AcquisitionCostBeforeDateTxt),AcquisitionCostErr);
      Assert.IsFalse(LibraryReportValidation.CheckIfValueExists(FORMAT(FAJournalLineAmount)),AcquisitionCostErr);
      Assert.IsTrue(LibraryReportValidation.CheckIfValueExists(AppreciationBeforeDateTxt),AppreciationErr);
      Assert.IsFalse(LibraryReportValidation.CheckIfValueExists(FORMAT(FAJournalLineAmount2)),AppreciationErr);
    END;

    [Test]
    PROCEDURE AppreciationDateTypeNetChange@19();
    VAR
      Period@1007 : 'before Starting Date,Net Change,at Ending Date';
    BEGIN
      // Test that value of Appreciation with Period2 option Net Change and Date Field 2 as Acquisition Date.

      AppreciationDateTypeWithOption(Period::"Net Change",AcquisitionCostNetChangeTxt,AppreciationNetChangeTxt);
    END;

    [Test]
    PROCEDURE AppreciationDateTypeEndDate@18();
    VAR
      Period@1007 : 'before Starting Date,Net Change,at Ending Date';
    BEGIN
      // Test that value of Appreciation with Period2 option at Ending Date and Date Field 2 as Acquisition Date.

      AppreciationDateTypeWithOption(Period::"at Ending Date",AcquisitionCostatEndingDateTxt,AppreciationatEndingDateTxt);
    END;

    LOCAL PROCEDURE AppreciationDateTypeWithOption@43(PeriodValue@1013 : Option;ColumnValue@1010 : Text[250];ColumnValue2@1009 : Text[250]);
    VAR
      FixedAsset@1000 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FAJournalLine@1003 : Record 5621;
      FAJournalLineAmount@1004 : Decimal;
      FAJournalLineAmount2@1008 : Decimal;
    BEGIN
      // 1.Setup: Create Fixed Asset, FA Acquisition, Depreciation Book and Post FA Journal Line for Acquisition cost and Appreciation.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateDepreciationJournalSetup(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      FAJournalLineAmount :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBook.Code,WORKDATE);
      FAJournalLineAmount2 :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::Appreciation,DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Set Value for the Report and save as excel.
      FixedAsset.SETRANGE("No.",FixedAsset."No.");
      SaveAppreciationAndPrintDetail(FixedAsset,DepreciationBook.Code,PeriodValue,FALSE);

      // 3. Verify: Verify Acquisition Cost and Appreciation amount in excel.
      VerifyAmount(ColumnValue,FAJournalLineAmount,AcquisitionCostAmountErr);
      VerifyAmount(ColumnValue2,FAJournalLineAmount2,AppreciationAmountErr);
    END;

    [Test]
    PROCEDURE AppreciationDateTypeWithDetail@17();
    VAR
      FixedAsset@1000 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FAJournalLine@1003 : Record 5621;
      FAJournalLineAmount@1004 : Decimal;
      FAJournalLineAmount2@1008 : Decimal;
      Period@1005 : 'before Starting Date,Net Change,at Ending Date';
    BEGIN
      // Test that value of Appreciation with Period2 option at Ending Date and Date Field 2 as Acquisition Date and Print Details.

      // 1.Setup: Create Fixed Asset, Depreciation Book and Post FA Journal Line for Acquisition cost and Appreciation.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateDepreciationJournalSetup(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      FAJournalLineAmount :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBook.Code,WORKDATE);
      FAJournalLineAmount2 :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::Appreciation,DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Set Value for the Report and save as excel.
      FixedAsset.SETRANGE("No.",FixedAsset."No.");
      SaveAppreciationAndPrintDetail(FixedAsset,DepreciationBook.Code,Period::"at Ending Date",TRUE);

      // 3. Verify: Verify Acquisition Cost and Appreciation amount in excel.
      VerifyAmountRange(FixedAsset."No.",AcquisitionCostatEndingDateTxt,FAJournalLineAmount,AcquisitionCostAmountErr);
      VerifyAmountRange(FixedAsset."No.",AppreciationatEndingDateTxt,FAJournalLineAmount2,AppreciationAmountErr);
    END;

    [Test]
    PROCEDURE GroupTotalForAppreciation@21();
    VAR
      FixedAsset@1000 : Record 5600;
      FixedAsset2@1015 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FADepreciationBook2@1006 : Record 5612;
      FAJournalLine@1003 : Record 5621;
      FAJournalLineAmount@1004 : Decimal;
      FAJournalLineAmount2@1008 : Decimal;
      FAJournalLineAmount3@1010 : Decimal;
      GroupTotalCaption@1005 : Text[50];
      Period@1007 : 'before Starting Date,Net Change,at Ending Date';
    BEGIN
      // Test that value of Group Total amount of Appreciation and Acquisition Cost.

      // 1.Setup: Create Fixed Asset, Depreciation Book and Post FA Journal Line for Acquisition cost and Appreciation.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateDepreciationJournalSetup(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      CreateFixedAsset(FixedAsset2,FixedAsset."FA Posting Group");
      CreateFADepreciationBook(FADepreciationBook2,FixedAsset2."No.",FixedAsset2."FA Posting Group",DepreciationBook.Code);
      FAJournalLineAmount := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      FAJournalLineAmount2 :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::Appreciation,DepreciationBook.Code,WORKDATE);
      FAJournalLineAmount3 :=
        CreateAndPostFAJournalLine(
          FixedAsset2."No.",FAJournalLine."FA Posting Type"::Appreciation,DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Set Value for the Report and save as excel.
      FixedAsset.SETRANGE("No.",FixedAsset."No.",FixedAsset2."No.");
      SaveAppreciationAndPrintDetail(FixedAsset,DepreciationBook.Code,Period::"at Ending Date",TRUE);

      // 3. Verify: Verify Group Total for Acquisition Cost and Appreciation amount in excel.
      GroupTotalCaption := GroupTotalTxt + ' ' + FixedAsset."FA Posting Group";
      VerifyAmountRange(GroupTotalCaption,AcquisitionCostatEndingDateTxt,FAJournalLineAmount,GroupTotalAmountErr);
      VerifyAmountRange(GroupTotalCaption,AppreciationatEndingDateTxt,FAJournalLineAmount2 + FAJournalLineAmount3,GroupTotalAmountErr);
    END;

    [Test]
    PROCEDURE TotalForAppreciation@23();
    VAR
      FixedAsset@1000 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FAJournalLine@1003 : Record 5621;
      FAJournalLineAmount@1004 : Decimal;
      FAJournalLineAmount2@1008 : Decimal;
      FAJournalLineAmount3@1015 : Decimal;
      Period@1006 : 'before Starting Date,Net Change,at Ending Date';
    BEGIN
      // Test that value of Total amount of Appreciation and Acquisition Cost.

      // 1.Setup: Create Fixed Asset, DepreciationBook, FADepreciationBook and Post FA Journal Line for Acquisition cost and Appreciation.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateDepreciationJournalSetup(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      FAJournalLineAmount :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBook.Code,WORKDATE);
      FAJournalLineAmount2 :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::Appreciation,DepreciationBook.Code,WORKDATE);
      FAJournalLineAmount3 :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::Appreciation,DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Set Value for the Report and save as excel.
      FixedAsset.SETRANGE("No.",FixedAsset."No.");
      SaveAppreciationAndPrintDetail(FixedAsset,DepreciationBook.Code,Period::"at Ending Date",TRUE);

      // 3. Verify: Verify Total for Acquisition Cost and Appreciation amount in excel.
      VerifyAmountRange(TotalTxt,AcquisitionCostatEndingDateTxt,FAJournalLineAmount,TotalAmountErr);
      VerifyAmountRange(TotalTxt,AppreciationatEndingDateTxt,FAJournalLineAmount2 + FAJournalLineAmount3,TotalAmountErr);
    END;

    [Test]
    PROCEDURE OnlySoldAssets@24();
    BEGIN
      // Test that report Asset - Analysis Report with check Only Sold Assets.

      DisposalOfFixedAssets(TRUE,FALSE,SoldTxt);
    END;

    [Test]
    PROCEDURE BudgetReport@27();
    BEGIN
      // Test that report Asset - Analysis Report with check Budget Report.

      DisposalOfFixedAssets(FALSE,TRUE,BudgetTxt);
    END;

    LOCAL PROCEDURE DisposalOfFixedAssets@45(SalesReport@1004 : Boolean;BudgetReport@1009 : Boolean;ColumnValue@1005 : Text[250]);
    VAR
      FixedAsset@1000 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FAJournalLine@1003 : Record 5621;
    BEGIN
      // 1.Setup: Create Fixed Asset, DepreciationBook, FADepreciationBook and Post FA Journal Line for Acquisition cost and Disposal.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateDepreciationJournalSetup(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      CreateAndPostFAJournalLine(FixedAsset."No.",FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBook.Code,WORKDATE);
      CreateDisposalFAJournalLine(FAJournalLine,FixedAsset."No.",FAJournalLine."FA Posting Type"::Disposal,DepreciationBook.Code);
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);

      // 2. Exercise: Set Value for the Report and save as excel.
      SaveAnalysisWithoutPrintDetail(FADepreciationBook,SalesReport,BudgetReport);

      // 3. Verify: Verify for Only Sold Assets and Budget Report in excel.
      LibraryReportValidation.OpenFile;
      Assert.IsTrue(LibraryReportValidation.CheckIfValueExists(FixedAsset."No."),FixedAssetsErr);
      Assert.IsTrue(LibraryReportValidation.CheckIfValueExists(ColumnValue),FixedAssetsColumnvalueErr);
    END;

    [Test]
    PROCEDURE DateErrorFixedAssetBookValue01@40();
    VAR
      FixedAsset@1001 : Record 5600;
      FixedAssetBookValue01@1000 : Report 5605;
    BEGIN
      // Test error occurs on Running Fixed Asset Book Value 01 Report without Starting and Ending Date.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Run Fixed Asset Book Value 01 Report without Starting and Ending Date.
      FixedAssetBookValue01.USEREQUESTPAGE(FALSE);
      FixedAssetBookValue01.SetMandatoryFields('',0D,0D);
      FixedAssetBookValue01.GetDepreciationBookCode;
      LibraryReportValidation.SetFileName(FixedAsset.TABLECAPTION);
      ASSERTERROR FixedAssetBookValue01.SAVEASEXCEL(LibraryReportValidation.GetFileName);

      // 3. Verify: Verify "You must specify the Starting Date and the Ending Date" error occurs.
      Assert.AreEqual(STRSUBSTNO(SpecifyDateErr),GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE EndingDateErrorBookValue01@37();
    VAR
      DepreciationBook@1001 : Record 5611;
      FixedAssetBookValue01@1000 : Report 5605;
    BEGIN
      // Test error occurs on Running Fixed Asset Book Value 01 Report with Starting Date greater than Ending Date.

      // 1. Setup: Create Depreciation Book.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);

      // 2. Exercise: Run Fixed Asset Book Value 01 Report with Starting Date greater than Ending Date.
      FixedAssetBookValue01.USEREQUESTPAGE(FALSE);

      // Using Random Number for the Day.
      FixedAssetBookValue01.SetMandatoryFields(
        DepreciationBook.Code,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE),WORKDATE);
      LibraryReportValidation.SetFileName(DepreciationBook.Code);
      ASSERTERROR FixedAssetBookValue01.SAVEASEXCEL(LibraryReportValidation.GetFileName);

      // 3. Verify: Verify "The Starting Date is later than the Ending Date" error occurs.
      Assert.AreEqual(STRSUBSTNO(LaterEndingDateErr),GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE DepreciationBookCodeError@187();
    VAR
      DepreciationBook@1000 : Record 5611;
      FixedAssetBookValue01@1001 : Report 5605;
    BEGIN
      // Test error occurs on Running Fixed Asset Book Value 01 Report without Depreciation Book Code.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Run Fixed Asset Book Value 01 Report without Depreciation Book Code.
      FixedAssetBookValue01.USEREQUESTPAGE(FALSE);
      FixedAssetBookValue01.SetMandatoryFields('',WORKDATE,WORKDATE);
      LibraryReportValidation.SetFileName(DepreciationBook.TABLECAPTION);
      ASSERTERROR FixedAssetBookValue01.SAVEASEXCEL(LibraryReportValidation.GetFileName);

      // 3. Verify: Verify "Depreciation Book Code does not exist" error occurs.
      Assert.ExpectedError(STRSUBSTNO(DepreciationBookErr,DepreciationBook.TABLECAPTION));
    END;

    [Test]
    PROCEDURE BookValueGroupByFAPostingGroup@38();
    VAR
      FixedAsset@1002 : Record 5600;
      FixedAsset2@1004 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
      AcquisitionCostAmount@1007 : Decimal;
      AcquisitionCostAmount2@1008 : Decimal;
      DepreciationCostAmount@1009 : Decimal;
      DepreciationCostAmount2@1010 : Decimal;
      PostingDate@1000 : Date;
    BEGIN
      // Test values on Fixed Asset Book Value 01 Report after running with Group Total as FA Posting Group.

      // 1. Setup: Create Depreciation Book, Create 2 Fixed Assets with Same FA Posting Group, Create FA Depreciation Book, Create and
      // Post FA Journal Lines with FA Posting Type Acquisition cost, Depreciation and Disposal for both Fixed Assets.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      AttachFAPostingGroup(FixedAsset2,FixedAsset."FA Posting Group");
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset2."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      // Using the Random Number for the Day.
      PostingDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      AcquisitionCostAmount := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      AcquisitionCostAmount2 := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      DepreciationCostAmount := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      DepreciationCostAmount2 := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      PostDisposalDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 01 Report with Group Total as FA Posting Group.
      FixedAsset.SETFILTER("No.",'%1|%2',FixedAsset."No.",FixedAsset2."No.");
      RunFixedAssetBookValue01Report(FixedAsset,DepreciationBook.Code,GroupTotals::"FA Posting Group",FALSE,FALSE);

      // 3. Verify: Verify values on Fixed Asset Book Value 01 Report.
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetRange(
        STRSUBSTNO(GroupTotalsTxt,FixedAsset.FIELDCAPTION("FA Posting Group")),
        GroupTotalTxt + ' ' + FixedAsset."FA Posting Group");
      VerifyFixedAssetBookValue(AcquisitionCostAmount,AcquisitionCostAmount2,DepreciationCostAmount,DepreciationCostAmount2);
      VerifyBookValue(FindDisposalAmount(FixedAsset."No.") + FindDisposalAmount(FixedAsset2."No."),DisposalDepreciationTxt);
    END;

    [Test]
    PROCEDURE BookValueGroupByFAClass@52();
    VAR
      FixedAsset@1002 : Record 5600;
      FixedAsset2@1004 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      FAClass@1000 : Record 5607;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
      AcquisitionCostAmount@1022 : Decimal;
      AcquisitionCostAmount2@1021 : Decimal;
      DepreciationCostAmount@1020 : Decimal;
      DepreciationCostAmount2@1019 : Decimal;
      PostingDate@1007 : Date;
    BEGIN
      // Test values on Fixed Asset Book Value 01 Report after running with Group Total as FA Class.

      // 1. Setup: Create Depreciation Book, Create 2 Fixed Assets with Same FA Class Code, Create FA Depreciation Book, Create and
      // Post FA Journal Lines with FA Posting Type Acquisition cost, Depreciation and Disposal for both Fixed Assets.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      CreateFixedAssetClass(FAClass);

      UpdateFAClassCode(FixedAsset,FAClass.Code);
      UpdateFAClassCode(FixedAsset2,FAClass.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",'',DepreciationBook.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset2."No.",'',DepreciationBook.Code);

      // Using the Random Number for the Day.
      PostingDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      AcquisitionCostAmount := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      AcquisitionCostAmount2 := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      DepreciationCostAmount := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      DepreciationCostAmount2 := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      PostDisposalDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 01 Report with Group Total as FA Class.
      FixedAsset.SETFILTER("No.",'%1|%2',FixedAsset."No.",FixedAsset2."No.");
      RunFixedAssetBookValue01Report(FixedAsset,DepreciationBook.Code,GroupTotals::"FA Class",FALSE,FALSE);

      // 3. Verify: Verify values on Fixed Asset Book Value 01 Report.
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetRange(
        STRSUBSTNO(GroupTotalsTxt,FixedAsset.FIELDCAPTION("FA Class Code")),GroupTotalTxt + ' ' + FAClass.Code);
      VerifyFixedAssetBookValue(AcquisitionCostAmount,AcquisitionCostAmount2,DepreciationCostAmount,DepreciationCostAmount2);
      VerifyBookValue(FindDisposalAmount(FixedAsset."No.") + FindDisposalAmount(FixedAsset2."No."),DisposalDepreciationTxt);
    END;

    [Test]
    PROCEDURE BookValueGroupByFASubclass@50();
    VAR
      FixedAsset@1002 : Record 5600;
      FixedAsset2@1004 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      FASubclass@1000 : Record 5608;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
      AcquisitionCostAmount@1010 : Decimal;
      AcquisitionCostAmount2@1009 : Decimal;
      DepreciationCostAmount@1008 : Decimal;
      DepreciationCostAmount2@1007 : Decimal;
      PostingDate@1011 : Date;
    BEGIN
      // Test values on Fixed Asset Book Value 01 Report after running with Group Total as FA SubClass.

      // 1. Setup: Create Depreciation Book, Create 2 Fixed Assets with Same FA SubClass Code, Create FA Depreciation Book, Create and
      // Post FA Journal Lines with FA Posting Type Acquisition cost, Depreciation and Disposal for both Fixed Assets.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      LibraryFixedAsset.CreateFASubclass(FASubclass);
      UpdateFASubClassCode(FixedAsset,FASubclass.Code);
      UpdateFASubClassCode(FixedAsset2,FASubclass.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",'',DepreciationBook.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset2."No.",'',DepreciationBook.Code);

      // Using the Random Number for the Day.
      PostingDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      AcquisitionCostAmount := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      AcquisitionCostAmount2 := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      DepreciationCostAmount := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      DepreciationCostAmount2 := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      PostDisposalDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 01 Report with Group Total as FA Subclass.
      FixedAsset.SETFILTER("No.",'%1|%2',FixedAsset."No.",FixedAsset2."No.");
      RunFixedAssetBookValue01Report(FixedAsset,DepreciationBook.Code,GroupTotals::"FA Subclass",FALSE,FALSE);

      // 3. Verify: Verify values on Fixed Asset Book Value 01 Report.
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetRange(
        STRSUBSTNO(GroupTotalsTxt,FixedAsset.FIELDCAPTION("FA Subclass Code")),GroupTotalTxt + ' ' + FASubclass.Code);
      VerifyFixedAssetBookValue(AcquisitionCostAmount,AcquisitionCostAmount2,DepreciationCostAmount,DepreciationCostAmount2);
      VerifyBookValue(FindDisposalAmount(FixedAsset."No.") + FindDisposalAmount(FixedAsset2."No."),DisposalDepreciationTxt);
    END;

    [Test]
    PROCEDURE BookValueGroupByFALocation@49();
    VAR
      FixedAsset@1002 : Record 5600;
      FixedAsset2@1004 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      FALocation@1000 : Record 5609;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
      AcquisitionCostAmount@1010 : Decimal;
      AcquisitionCostAmount2@1009 : Decimal;
      DepreciationCostAmount@1008 : Decimal;
      DepreciationCostAmount2@1007 : Decimal;
      PostingDate@1019 : Date;
    BEGIN
      // Test values on Fixed Asset Book Value 01 Report after running with Group Total as FA Location.

      // 1. Setup: Create Depreciation Book, Create 2 Fixed Assets with Same FA Location Code, Create FA Depreciation Books, Create and
      // Post FA Journal Lines with FA Posting Type Acquisition cost, Depreciation and Disposal for both Fixed Assets.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      CreateFixedAssetLocation(FALocation);
      UpdateFALocationCode(FixedAsset,FALocation.Code);
      UpdateFALocationCode(FixedAsset2,FALocation.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",'',DepreciationBook.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset2."No.",'',DepreciationBook.Code);

      // Using the Random Number for the Day.
      PostingDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      AcquisitionCostAmount := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      AcquisitionCostAmount2 := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      DepreciationCostAmount := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      DepreciationCostAmount2 := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      PostDisposalDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 01 Report with Group Total as FA Location.
      FixedAsset.SETFILTER("No.",'%1|%2',FixedAsset."No.",FixedAsset2."No.");
      RunFixedAssetBookValue01Report(FixedAsset,DepreciationBook.Code,GroupTotals::"FA Location",FALSE,FALSE);

      // 3. Verify: Verify values on Fixed Asset Book Value 01 Report.
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetRange(
        STRSUBSTNO(GroupTotalsTxt,FixedAsset.FIELDCAPTION("FA Location Code")),GroupTotalTxt + ' ' + FALocation.Code);
      VerifyFixedAssetBookValue(AcquisitionCostAmount,AcquisitionCostAmount2,DepreciationCostAmount,DepreciationCostAmount2);
      VerifyBookValue(FindDisposalAmount(FixedAsset."No.") + FindDisposalAmount(FixedAsset2."No."),DisposalDepreciationTxt);
    END;

    [Test]
    PROCEDURE BookValueGroupGlobalDimension1@47();
    VAR
      FixedAsset@1002 : Record 5600;
      GeneralLedgerSetup@1019 : Record 98;
      DimensionValue@1020 : Record 349;
      FixedAsset2@1004 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
      AcquisitionCostAmount@1027 : Decimal;
      AcquisitionCostAmount2@1026 : Decimal;
      DepreciationCostAmount@1025 : Decimal;
      DepreciationCostAmount2@1024 : Decimal;
      PostingDate@1023 : Date;
    BEGIN
      // Test values on Fixed Asset Book Value 01 Report after running with Group Total as Global Dimension 1.

      // 1. Setup: Create Depreciation Book, Create 2 Fixed Assets with Same Global Dimension 1 Code, Create FA Depreciation Books, Create
      // and Post FA Journal Lines with FA Posting Type Acquisition cost, Depreciation and Disposal for both Fixed Assets.
      Initialize;
      GeneralLedgerSetup.GET;
      LibraryDimension.FindDimensionValue(DimensionValue,GeneralLedgerSetup."Global Dimension 1 Code");
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      UpdateGlobalDimension1Code(FixedAsset,DimensionValue.Code);
      UpdateGlobalDimension1Code(FixedAsset2,DimensionValue.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",'',DepreciationBook.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset2."No.",'',DepreciationBook.Code);

      // Using the Random Number for the Day.
      PostingDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      AcquisitionCostAmount := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      AcquisitionCostAmount2 := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      DepreciationCostAmount := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      DepreciationCostAmount2 := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      PostDisposalDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 01 Report with Group Total as Global Dimension 1.
      FixedAsset.SETFILTER("No.",'%1|%2',FixedAsset."No.",FixedAsset2."No.");
      RunFixedAssetBookValue01Report(FixedAsset,DepreciationBook.Code,GroupTotals::"Global Dimension 1",FALSE,FALSE);

      // 3. Verify: Verify values on Fixed Asset Book Value 01 Report.
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetRange(
        STRSUBSTNO(GroupTotalsTxt,FixedAsset.FIELDCAPTION("Global Dimension 1 Code")),GroupTotalTxt + ' ' + DimensionValue.Code);
      VerifyFixedAssetBookValue(AcquisitionCostAmount,AcquisitionCostAmount2,DepreciationCostAmount,DepreciationCostAmount2);
      VerifyBookValue(FindDisposalAmount(FixedAsset."No.") + FindDisposalAmount(FixedAsset2."No."),DisposalDepreciationTxt);
    END;

    [Test]
    PROCEDURE BookValueGroupGlobalDimension2@46();
    VAR
      FixedAsset@1002 : Record 5600;
      GeneralLedgerSetup@1019 : Record 98;
      DimensionValue@1020 : Record 349;
      FixedAsset2@1004 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
      AcquisitionCostAmount@1027 : Decimal;
      AcquisitionCostAmount2@1026 : Decimal;
      DepreciationCostAmount@1025 : Decimal;
      DepreciationCostAmount2@1024 : Decimal;
      PostingDate@1023 : Date;
    BEGIN
      // Test values on Fixed Asset Book Value 01 Report after running with Group Total as Global Dimension 2.

      // 1. Setup: Create Depreciation Book, Create 2 Fixed Assets with Same Global Dimension 2 Code, Create FA Depreciation Books, Create
      // and Post FA Journal Lines with FA Posting Type Acquisition cost, Depreciation and Disposal for both Fixed Assets.
      Initialize;
      GeneralLedgerSetup.GET;
      LibraryDimension.FindDimensionValue(DimensionValue,GeneralLedgerSetup."Global Dimension 2 Code");
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      UpdateGlobalDimension2Code(FixedAsset,DimensionValue.Code);
      UpdateGlobalDimension2Code(FixedAsset2,DimensionValue.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",'',DepreciationBook.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset2."No.",'',DepreciationBook.Code);

      // Using the Random Number for the Day.
      PostingDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      AcquisitionCostAmount := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      AcquisitionCostAmount2 := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      DepreciationCostAmount := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      DepreciationCostAmount2 := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      PostDisposalDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 01 Report with Group Total as Global Dimension 2.
      FixedAsset.SETFILTER("No.",'%1|%2',FixedAsset."No.",FixedAsset2."No.");
      RunFixedAssetBookValue01Report(FixedAsset,DepreciationBook.Code,GroupTotals::"Global Dimension 2",FALSE,FALSE);

      // 3. Verify: Verify values on Fixed Asset Book Value 01 Report.
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetRange(
        STRSUBSTNO(GroupTotalsTxt,FixedAsset.FIELDCAPTION("Global Dimension 2 Code")),GroupTotalTxt + ' ' + DimensionValue.Code);
      VerifyFixedAssetBookValue(AcquisitionCostAmount,AcquisitionCostAmount2,DepreciationCostAmount,DepreciationCostAmount2);
      VerifyBookValue(FindDisposalAmount(FixedAsset."No.") + FindDisposalAmount(FixedAsset2."No."),DisposalDepreciationTxt);
    END;

    [Test]
    PROCEDURE BookValueGroupByMainAsset@35();
    VAR
      FixedAsset@1002 : Record 5600;
      FixedAsset2@1004 : Record 5600;
      FixedAsset3@1019 : Record 5600;
      MainAssetComponent@1020 : Record 5640;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
      AcquisitionCostAmount@1026 : Decimal;
      AcquisitionCostAmount2@1025 : Decimal;
      DepreciationCostAmount@1024 : Decimal;
      DepreciationCostAmount2@1023 : Decimal;
      PostingDate@1022 : Date;
    BEGIN
      // Test values on Fixed Asset Book Value 01 Report after running with Group Total as Main Asset.

      // 1. Setup: Create Depreciation Book, Create 3 Fixed Assets, Create Main Asset Components, Create FA Depreciation Books, Create
      // and Post FA Journal Lines with FA Posting Type Acquisition cost, Depreciation and Disposal for first 2 Fixed Assets.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset3);
      LibraryFixedAsset.CreateMainAssetComponent(MainAssetComponent,FixedAsset3."No.",FixedAsset."No.");
      LibraryFixedAsset.CreateMainAssetComponent(MainAssetComponent,FixedAsset3."No.",FixedAsset2."No.");
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",'',DepreciationBook.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset2."No.",'',DepreciationBook.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset3."No.",'',DepreciationBook.Code);

      // Using the Random Number for the Day.
      PostingDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      AcquisitionCostAmount := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      AcquisitionCostAmount2 := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      DepreciationCostAmount := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      DepreciationCostAmount2 := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      PostDisposalDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 01 Report with Group Total as Main Asset.
      FixedAsset.SETFILTER("No.",'%1|%2',FixedAsset."No.",FixedAsset2."No.");
      RunFixedAssetBookValue01Report(FixedAsset,DepreciationBook.Code,GroupTotals::"Main Asset",FALSE,FALSE);

      // 3. Verify: Verify values on Fixed Asset Book Value 01 Report.
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetRange(
        STRSUBSTNO(GroupTotalsTxt,FixedAsset.FIELDCAPTION("Main Asset/Component")),
        STRSUBSTNO('Group Total: Main Asset %1',FixedAsset3."No."));
      VerifyFixedAssetBookValue(AcquisitionCostAmount,AcquisitionCostAmount2,DepreciationCostAmount,DepreciationCostAmount2);
      VerifyBookValue(FindDisposalAmount(FixedAsset."No.") + FindDisposalAmount(FixedAsset2."No."),DisposalDepreciationTxt);
    END;

    [Test]
    PROCEDURE PrintDetailsBookValue@42();
    VAR
      FixedAsset@1002 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      FAJournalLine@1004 : Record 5621;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
      AcquisitionCostAmount@1027 : Decimal;
      AcquisitionCostAmount2@1026 : Decimal;
      DepreciationCostAmount@1025 : Decimal;
      DepreciationCostAmount2@1024 : Decimal;
      PostingDate@1023 : Date;
    BEGIN
      // Test values on Fixed Asset Book Value 01 Report after running with Print Details as True.

      // 1. Setup: Create Depreciation Book, Create Fixed Asset, Create FA Depreciation Book, Create and Post FA Journal Lines with FA
      // Posting Type Acquisition cost, Depreciation and Disposal for Fixed Asset.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      // Using the Random Number for the Day.
      PostingDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      AcquisitionCostAmount :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBook.Code,PostingDate);
      AcquisitionCostAmount2 :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBook.Code,WORKDATE);
      DepreciationCostAmount :=
        PostDisposalFAJournalLine(FixedAsset."No.",FAJournalLine."FA Posting Type"::Depreciation,DepreciationBook.Code,PostingDate);
      DepreciationCostAmount2 :=
        PostDisposalFAJournalLine(FixedAsset."No.",FAJournalLine."FA Posting Type"::Depreciation,DepreciationBook.Code,WORKDATE);
      PostDisposalFAJournalLine(FixedAsset."No.",FAJournalLine."FA Posting Type"::Disposal,DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 01 Report with Print Details as True.
      FixedAsset.SETRANGE("No.",FixedAsset."No.");
      RunFixedAssetBookValue01Report(FixedAsset,DepreciationBook.Code,GroupTotals::" ",TRUE,FALSE);

      // 3. Verify: Verify values on Fixed Asset Book Value 01 Report.
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetRange(FixedAsset.FIELDCAPTION("No."),FixedAsset."No.");
      VerifyFixedAssetBookValue(AcquisitionCostAmount,AcquisitionCostAmount2,DepreciationCostAmount,DepreciationCostAmount2);
      VerifyBookValue(FindDisposalAmount(FixedAsset."No."),DisposalDepreciationTxt);
    END;

    [Test]
    PROCEDURE TotalOnBookValue@67();
    VAR
      FixedAsset@1002 : Record 5600;
      FixedAsset2@1004 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
      AcquisitionCostAmount@1027 : Decimal;
      AcquisitionCostAmount2@1026 : Decimal;
      DepreciationCostAmount@1025 : Decimal;
      DepreciationCostAmount2@1024 : Decimal;
      PostingDate@1023 : Date;
    BEGIN
      // Test Total on Fixed Asset Book Value 01 Report after running with Print Details as True.

      // 1. Setup: Create Depreciation Book, Create 2 Fixed Assets, Create FA Depreciation Books, Create and Post FA Journal Lines with FA
      // Posting Type Acquisition cost, Depreciation and Disposal for Fixed Assets.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",'',DepreciationBook.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset2."No.",'',DepreciationBook.Code);

      // Using the Random Number for the Day.
      PostingDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      AcquisitionCostAmount := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      AcquisitionCostAmount2 := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      DepreciationCostAmount := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      DepreciationCostAmount2 := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      PostDisposalDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 01 Report with Print Details as True.
      FixedAsset.SETFILTER("No.",'%1|%2',FixedAsset."No.",FixedAsset2."No.");
      RunFixedAssetBookValue01Report(FixedAsset,DepreciationBook.Code,GroupTotals::" ",TRUE,FALSE);

      // 3. Verify: Verify Total on Fixed Asset Book Value 01 Report.
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetRange(FixedAsset.FIELDCAPTION("No."),TotalTxt);
      VerifyFixedAssetBookValue(AcquisitionCostAmount,AcquisitionCostAmount2,DepreciationCostAmount,DepreciationCostAmount2);
      VerifyBookValue(FindDisposalAmount(FixedAsset."No.") + FindDisposalAmount(FixedAsset2."No."),DisposalDepreciationTxt);
    END;

    [Test]
    PROCEDURE BudgetReportBookValue@78();
    VAR
      FixedAsset@1002 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      FAJournalLine@1004 : Record 5621;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
    BEGIN
      // Test Fixed Asset Book Value 01 Report after running with Budget Report as True.

      // 1. Setup: Create Depreciation Book, Create Fixed Asset, Create FA Depreciation Book, Create and Post FA Journal Lines with FA
      // Posting Type Acquisition cost.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      CreateAndPostFAJournalLine(FixedAsset."No.",FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 01 Report with Budget Report as True.
      FixedAsset.SETRANGE("No.",FixedAsset."No.");
      RunFixedAssetBookValue01Report(FixedAsset,DepreciationBook.Code,GroupTotals::" ",FALSE,TRUE);

      // 3. Verify: Verify Fixed Asset - Book Value 01 (Budget Report) exist on report.
      LibraryReportValidation.OpenFile;
      Assert.IsTrue(
        LibraryReportValidation.CheckIfValueExists(STRSUBSTNO(BookValueBudgetReportTxt,1)),
        STRSUBSTNO(ExistErr,BookValueBudgetReportTxt));
    END;

    [Test]
    PROCEDURE UseCustom1DepreciationError@41();
    VAR
      FixedAsset@1002 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FAJournalLine@1005 : Record 5621;
      FADepreciationBook@1003 : Record 5612;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
    BEGIN
      // Test error occurs on running Fixed Asset Book Value 01 Report with Use Custom 1 Depreciation True on Depreciation Book.

      // 1. Setup: Create Depreciation Book, Create Fixed Asset, Create FA Depreciation Book, Create and Post FA Journal Lines with FA
      // Posting Type Acquisition cost.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      UpdateCustom1Depreciation(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      CreateAndPostFAJournalLine(FixedAsset."No.",FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 01 Report with Budget Report as True.
      FixedAsset.SETRANGE("No.",FixedAsset."No.");
      ASSERTERROR RunFixedAssetBookValue01Report(FixedAsset,DepreciationBook.Code,GroupTotals::" ",FALSE,TRUE);

      // 3. Verify: Verify error "Use Custom 1 Depreciation must be No" occurs.
      Assert.AreEqual(
        STRSUBSTNO(
          Custom1DepreciationErr,DepreciationBook.FIELDCAPTION("Use Custom 1 Depreciation")),GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE DateErrorFixedAssetBookValue02@59();
    VAR
      FixedAsset@1001 : Record 5600;
      FixedAssetBookValue02@1000 : Report 5606;
    BEGIN
      // Test error occurs on Running Fixed Asset Book Value 02 Report without Starting and Ending Date.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Run Fixed Asset Book Value 02 Report without Starting and Ending Date.
      CLEAR(FixedAssetBookValue02);
      FixedAssetBookValue02.USEREQUESTPAGE(FALSE);
      FixedAssetBookValue02.SetMandatoryFields('',0D,0D);
      FixedAssetBookValue02.GetDepreciationBookCode;
      LibraryReportValidation.SetFileName(FixedAsset.TABLECAPTION);
      ASSERTERROR FixedAssetBookValue02.SAVEASEXCEL(LibraryReportValidation.GetFileName);

      // 3. Verify: Verify "You must specify the Starting Date and the Ending Date" error occurs.
      Assert.AreEqual(STRSUBSTNO(SpecifyDateErr),GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE EndingDateErrorBookValue02@58();
    VAR
      DepreciationBook@1001 : Record 5611;
      FixedAssetBookValue02@1000 : Report 5606;
    BEGIN
      // Test error occurs on Running Fixed Asset Book Value 02 Report with Starting Date greater than Ending Date.

      // 1. Setup: Create Depreciation Book.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);

      // 2. Exercise: Run Fixed Asset Book Value 02 Report with Starting Date greater than Ending Date.
      CLEAR(FixedAssetBookValue02);
      FixedAssetBookValue02.USEREQUESTPAGE(FALSE);

      // Using Random Number for the Day.
      FixedAssetBookValue02.SetMandatoryFields(
        DepreciationBook.Code,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE),WORKDATE);
      LibraryReportValidation.SetFileName(DepreciationBook.Code);
      ASSERTERROR FixedAssetBookValue02.SAVEASEXCEL(LibraryReportValidation.GetFileName);

      // 3. Verify: Verify "The Starting Date is later than the Ending Date" error occurs.
      Assert.AreEqual(STRSUBSTNO(LaterEndingDateErr),GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE BlankDepreciationBookCode@36();
    VAR
      DepreciationBook@1000 : Record 5611;
      FixedAssetBookValue02@1001 : Report 5606;
    BEGIN
      // Test error occurs on Running Fixed Asset Book Value 02 Report without Depreciation Book Code.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Run Fixed Asset Book Value 02 Report without Depreciation Book Code.
      CLEAR(FixedAssetBookValue02);
      FixedAssetBookValue02.USEREQUESTPAGE(FALSE);
      FixedAssetBookValue02.SetMandatoryFields('',WORKDATE,WORKDATE);
      LibraryReportValidation.SetFileName(DepreciationBook.TABLECAPTION);
      ASSERTERROR FixedAssetBookValue02.SAVEASEXCEL(LibraryReportValidation.GetFileName);

      // 3. Verify: Verify "Depreciation Book Code does not exist" error occurs.
      Assert.ExpectedError(STRSUBSTNO(DepreciationBookErr,DepreciationBook.TABLECAPTION));
    END;

    [Test]
    PROCEDURE BudgetReportBookValue02@34();
    VAR
      FixedAsset@1002 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      FAJournalLine@1004 : Record 5621;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
    BEGIN
      // Test Fixed Asset Book Value 02 Report after running with Budget Report as True.

      // 1. Setup: Create Depreciation Book, Create Fixed Asset, Create FA Depreciation Book, Create and Post FA Journal Lines with FA
      // Posting Type Acquisition cost.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      CreateAndPostFAJournalLine(FixedAsset."No.",FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 02 Report with Budget Report as True.
      FixedAsset.SETRANGE("No.",FixedAsset."No.");
      RunFixedAssetBookValue02Report(FixedAsset,DepreciationBook.Code,GroupTotals::" ",FALSE,TRUE,FALSE);

      // 3. Verify: Verify Fixed Asset - Book Value 02 (Budget Report) exist on report.
      LibraryReportValidation.OpenFile;
      Assert.IsTrue(
        LibraryReportValidation.CheckIfValueExists(STRSUBSTNO(BookValueBudgetReportTxt,2)),
        STRSUBSTNO(ExistErr,BookValueBudgetReportTxt));
    END;

    [Test]
    PROCEDURE UseCustom1ErrorBookValue02@33();
    VAR
      FixedAsset@1002 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FAJournalLine@1005 : Record 5621;
      FADepreciationBook@1003 : Record 5612;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
    BEGIN
      // Test error occurs on running Fixed Asset Book Value 02 Report with Use Custom 1 Depreciation True on Depreciation Book.

      // 1. Setup: Create Depreciation Book, Create Fixed Asset, Create FA Depreciation Book, Create and Post FA Journal Lines with FA
      // Posting Type Acquisition cost.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      UpdateCustom1Depreciation(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      CreateAndPostFAJournalLine(FixedAsset."No.",FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 02 Report with Budget Report as True.
      FixedAsset.SETRANGE("No.",FixedAsset."No.");
      ASSERTERROR RunFixedAssetBookValue02Report(FixedAsset,DepreciationBook.Code,GroupTotals::" ",FALSE,TRUE,FALSE);

      // 3. Verify: Verify error "Use Custom 1 Depreciation must be No" occurs.
      Assert.AreEqual(
        STRSUBSTNO(
          Custom1DepreciationErr,DepreciationBook.FIELDCAPTION("Use Custom 1 Depreciation")),GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE GroupFAPostingGroupBookValue02@80();
    VAR
      FixedAsset@1002 : Record 5600;
      FixedAsset2@1004 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
      AcquisitionCostAmount@1007 : Decimal;
      AcquisitionCostAmount2@1008 : Decimal;
      DepreciationCostAmount@1009 : Decimal;
      DepreciationCostAmount2@1010 : Decimal;
      PostingDate@1000 : Date;
    BEGIN
      // Test values on Fixed Asset Book Value 02 Report after running with Group Total as FA Posting Group.

      // 1. Setup: Create Depreciation Book, Create 2 Fixed Assets with Same FA Posting Group, Create FA Depreciation Books, Create and
      // Post FA Journal Lines with FA Posting Type Acquisition cost and Depreciation for both Fixed Assets.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      AttachFAPostingGroup(FixedAsset2,FixedAsset."FA Posting Group");
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset2."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      // Using the Random Number for the Day.
      PostingDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      AcquisitionCostAmount := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      AcquisitionCostAmount2 := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      DepreciationCostAmount := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      DepreciationCostAmount2 := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 02 Report with Group Total as FA Posting Group.
      FixedAsset.SETFILTER("No.",'%1|%2',FixedAsset."No.",FixedAsset2."No.");
      RunFixedAssetBookValue02Report(FixedAsset,DepreciationBook.Code,GroupTotals::"FA Posting Group",FALSE,FALSE,FALSE);

      // 3. Verify: Verify values on Fixed Asset Book Value 02 Report.
      VerifyTotalExistenceOnReport(FixedAsset.FIELDCAPTION("FA Posting Group"),FixedAsset."FA Posting Group");
      VerifyDecimalValuesOnReport(AcquisitionCostAmount,AcquisitionCostAmount2,DepreciationCostAmount,DepreciationCostAmount2);
    END;

    [Test]
    PROCEDURE DeprValuesGroupFAPostingGroupBookValue@66();
    VAR
      FixedAsset@1002 : Record 5600;
      FixedAsset2@1004 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      FAJournalLine@1000 : Record 5621;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
      AcquisitionCostAmount@1007 : Decimal;
      DepreciationCostAmount@1009 : Decimal;
    BEGIN
      // Test values on Fixed Asset Book Value 02 Report after running with Group Total as FA Posting Group. First FA does not have
      // depreciation entries.
      // 1. Setup: Create Depreciation Book, Create 2 Fixed Assets with Same FA Posting Group, Create FA Depreciation Books, Create and
      // Post FA Journal Lines with FA Posting Type Acquisition cost and Depreciation for both Fixed Assets.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      AttachFAPostingGroup(FixedAsset2,FixedAsset."FA Posting Group");
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset2."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      AcquisitionCostAmount := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      DepreciationCostAmount :=
        PostDisposalFAJournalLine(FixedAsset2."No.",FAJournalLine."FA Posting Type"::Depreciation,DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 02 Report with Group Total as FA Posting Group.
      FixedAsset.SETFILTER("No.",'%1|%2',FixedAsset."No.",FixedAsset2."No.");
      RunFixedAssetBookValue02Report(FixedAsset,DepreciationBook.Code,GroupTotals::"FA Posting Group",FALSE,FALSE,FALSE);

      // 3. Verify: Verify depreciation values exist on Fixed Asset Book Value 02 Report.
      VerifyDecimalValuesOnReport(AcquisitionCostAmount,0,DepreciationCostAmount,0);
    END;

    [Test]
    PROCEDURE GroupByFAClassBookValue02@79();
    VAR
      FixedAsset@1002 : Record 5600;
      FixedAsset2@1004 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      FAClass@1000 : Record 5607;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
      AcquisitionCostAmount@1022 : Decimal;
      AcquisitionCostAmount2@1021 : Decimal;
      DepreciationCostAmount@1020 : Decimal;
      DepreciationCostAmount2@1019 : Decimal;
      PostingDate@1007 : Date;
    BEGIN
      // Test values on Fixed Asset Book Value 02 Report after running with Group Total as FA Class.

      // 1. Setup: Create Depreciation Book, Create 2 Fixed Assets with Same FA Class Code, Create FA Depreciation Books, Create and
      // Post FA Journal Lines with FA Posting Type Acquisition cost and Depreciation for both Fixed Assets.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      CreateFixedAssetClass(FAClass);
      UpdateFAClassCode(FixedAsset,FAClass.Code);
      UpdateFAClassCode(FixedAsset2,FAClass.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",'',DepreciationBook.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset2."No.",'',DepreciationBook.Code);

      // Using the Random Number for the Day.
      PostingDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      AcquisitionCostAmount := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      AcquisitionCostAmount2 := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      DepreciationCostAmount := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      DepreciationCostAmount2 := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 02 Report with Group Total as FA Class.
      FixedAsset.SETFILTER("No.",'%1|%2',FixedAsset."No.",FixedAsset2."No.");
      RunFixedAssetBookValue02Report(FixedAsset,DepreciationBook.Code,GroupTotals::"FA Class",FALSE,FALSE,FALSE);

      // 3. Verify: Verify values on Fixed Asset Book Value 02 Report.
      VerifyTotalExistenceOnReport(FixedAsset.FIELDCAPTION("FA Class Code"),FAClass.Code);
      VerifyDecimalValuesOnReport(AcquisitionCostAmount,AcquisitionCostAmount2,DepreciationCostAmount,DepreciationCostAmount2);
    END;

    [Test]
    PROCEDURE GroupByFASubclassBookValue02@77();
    VAR
      FixedAsset@1002 : Record 5600;
      FixedAsset2@1004 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      FASubclass@1000 : Record 5608;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
      AcquisitionCostAmount@1010 : Decimal;
      AcquisitionCostAmount2@1009 : Decimal;
      DepreciationCostAmount@1008 : Decimal;
      DepreciationCostAmount2@1007 : Decimal;
      PostingDate@1011 : Date;
    BEGIN
      // Test values on Fixed Asset Book Value 02 Report after running with Group Total as FA SubClass.

      // 1. Setup: Create Depreciation Book, Create 2 Fixed Assets with Same FA SubClass Code, Create FA Depreciation Books, Create and
      // Post FA Journal Lines with FA Posting Type Acquisition cost and Depreciation for both Fixed Assets.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      LibraryFixedAsset.CreateFASubclass(FASubclass);
      UpdateFASubClassCode(FixedAsset,FASubclass.Code);
      UpdateFASubClassCode(FixedAsset2,FASubclass.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",'',DepreciationBook.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset2."No.",'',DepreciationBook.Code);

      // Using the Random Number for the Day.
      PostingDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      AcquisitionCostAmount := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      AcquisitionCostAmount2 := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      DepreciationCostAmount := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      DepreciationCostAmount2 := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 02 Report with Group Total as FA Subclass.
      FixedAsset.SETFILTER("No.",'%1|%2',FixedAsset."No.",FixedAsset2."No.");
      RunFixedAssetBookValue02Report(FixedAsset,DepreciationBook.Code,GroupTotals::"FA Subclass",FALSE,FALSE,FALSE);

      // 3. Verify: Verify values on Fixed Asset Book Value 02 Report.
      VerifyTotalExistenceOnReport(FixedAsset.FIELDCAPTION("FA Subclass Code"),FASubclass.Code);
      VerifyDecimalValuesOnReport(AcquisitionCostAmount,AcquisitionCostAmount2,DepreciationCostAmount,DepreciationCostAmount2);
    END;

    [Test]
    PROCEDURE GroupByFALocationBookValue02@76();
    VAR
      FixedAsset@1002 : Record 5600;
      FixedAsset2@1004 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      FALocation@1000 : Record 5609;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
      AcquisitionCostAmount@1010 : Decimal;
      AcquisitionCostAmount2@1009 : Decimal;
      DepreciationCostAmount@1008 : Decimal;
      DepreciationCostAmount2@1007 : Decimal;
      PostingDate@1019 : Date;
    BEGIN
      // Test values on Fixed Asset Book Value 02 Report after running with Group Total as FA Location.

      // 1. Setup: Create Depreciation Book, Create 2 Fixed Assets with Same FA Location Code, Create FA Depreciation Books, Create and
      // Post FA Journal Lines with FA Posting Type Acquisition cost and Depreciation for both Fixed Assets.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      CreateFixedAssetLocation(FALocation);
      UpdateFALocationCode(FixedAsset,FALocation.Code);
      UpdateFALocationCode(FixedAsset2,FALocation.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",'',DepreciationBook.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset2."No.",'',DepreciationBook.Code);

      // Using the Random Number for the Day.
      PostingDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      AcquisitionCostAmount := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      AcquisitionCostAmount2 := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      DepreciationCostAmount := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      DepreciationCostAmount2 := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 02 Report with Group Total as FA Location.
      FixedAsset.SETFILTER("No.",'%1|%2',FixedAsset."No.",FixedAsset2."No.");
      RunFixedAssetBookValue02Report(FixedAsset,DepreciationBook.Code,GroupTotals::"FA Location",FALSE,FALSE,FALSE);

      // 3. Verify: Verify values on Fixed Asset Book Value 02 Report.
      VerifyTotalExistenceOnReport(FixedAsset.FIELDCAPTION("FA Location Code"),FALocation.Code);
      VerifyDecimalValuesOnReport(AcquisitionCostAmount,AcquisitionCostAmount2,DepreciationCostAmount,DepreciationCostAmount2);
    END;

    [Test]
    PROCEDURE GlobalDimension1BookValue02@75();
    VAR
      FixedAsset@1002 : Record 5600;
      GeneralLedgerSetup@1019 : Record 98;
      DimensionValue@1020 : Record 349;
      FixedAsset2@1004 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
      AcquisitionCostAmount@1027 : Decimal;
      AcquisitionCostAmount2@1026 : Decimal;
      DepreciationCostAmount@1025 : Decimal;
      DepreciationCostAmount2@1024 : Decimal;
      PostingDate@1023 : Date;
    BEGIN
      // Test values on Fixed Asset Book Value 02 Report after running with Group Total as Global Dimension 1.

      // 1. Setup: Create Depreciation Book, Create 2 Fixed Assets with Same Global Dimension 1 Code, Create FA Depreciation Books, Create
      // and Post FA Journal Lines with FA Posting Type Acquisition cost and Depreciation for both Fixed Assets.
      Initialize;
      GeneralLedgerSetup.GET;
      LibraryDimension.FindDimensionValue(DimensionValue,GeneralLedgerSetup."Global Dimension 1 Code");
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      UpdateGlobalDimension1Code(FixedAsset,DimensionValue.Code);
      UpdateGlobalDimension1Code(FixedAsset2,DimensionValue.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",'',DepreciationBook.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset2."No.",'',DepreciationBook.Code);

      // Using the Random Number for the Day.
      PostingDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      AcquisitionCostAmount := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      AcquisitionCostAmount2 := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      DepreciationCostAmount := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      DepreciationCostAmount2 := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 02 Report with Group Total as Global Dimension 1.
      FixedAsset.SETFILTER("No.",'%1|%2',FixedAsset."No.",FixedAsset2."No.");
      RunFixedAssetBookValue02Report(FixedAsset,DepreciationBook.Code,GroupTotals::"Global Dimension 1",FALSE,FALSE,FALSE);

      // 3. Verify: Verify values on Fixed Asset Book Value 02 Report.
      VerifyTotalExistenceOnReport(FixedAsset.FIELDCAPTION("Global Dimension 1 Code"),DimensionValue.Code);
      VerifyDecimalValuesOnReport(AcquisitionCostAmount,AcquisitionCostAmount2,DepreciationCostAmount,DepreciationCostAmount2);
    END;

    [Test]
    PROCEDURE GlobalDimension2BookValue02@74();
    VAR
      FixedAsset@1002 : Record 5600;
      GeneralLedgerSetup@1019 : Record 98;
      DimensionValue@1020 : Record 349;
      FixedAsset2@1004 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
      AcquisitionCostAmount@1027 : Decimal;
      AcquisitionCostAmount2@1026 : Decimal;
      DepreciationCostAmount@1025 : Decimal;
      DepreciationCostAmount2@1024 : Decimal;
      PostingDate@1023 : Date;
    BEGIN
      // Test values on Fixed Asset Book Value 02 Report after running with Group Total as Global Dimension 2.

      // 1. Setup: Create Depreciation Book, Create 2 Fixed Assets with Same Global Dimension 2 Code, Create FA Depreciation Books, Create
      // and Post FA Journal Lines with FA Posting Type Acquisition cost and Depreciation for both Fixed Assets.
      Initialize;
      GeneralLedgerSetup.GET;
      LibraryDimension.FindDimensionValue(DimensionValue,GeneralLedgerSetup."Global Dimension 2 Code");
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      UpdateGlobalDimension2Code(FixedAsset,DimensionValue.Code);
      UpdateGlobalDimension2Code(FixedAsset2,DimensionValue.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",'',DepreciationBook.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset2."No.",'',DepreciationBook.Code);

      // Using the Random Number for the Day.
      PostingDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      AcquisitionCostAmount := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      AcquisitionCostAmount2 := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      DepreciationCostAmount := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      DepreciationCostAmount2 := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 02 Report with Group Total as Global Dimension 2.
      FixedAsset.SETFILTER("No.",'%1|%2',FixedAsset."No.",FixedAsset2."No.");
      RunFixedAssetBookValue02Report(FixedAsset,DepreciationBook.Code,GroupTotals::"Global Dimension 2",FALSE,FALSE,FALSE);

      // 3. Verify: Verify values on Fixed Asset Book Value 02 Report.
      VerifyTotalExistenceOnReport(FixedAsset.FIELDCAPTION("Global Dimension 2 Code"),DimensionValue.Code);
      VerifyDecimalValuesOnReport(AcquisitionCostAmount,AcquisitionCostAmount2,DepreciationCostAmount,DepreciationCostAmount2);
    END;

    [Test]
    PROCEDURE GroupByMainAssetBookValue02@73();
    VAR
      FixedAsset@1002 : Record 5600;
      FixedAsset2@1004 : Record 5600;
      FixedAsset3@1019 : Record 5600;
      MainAssetComponent@1020 : Record 5640;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
      AcquisitionCostAmount@1026 : Decimal;
      AcquisitionCostAmount2@1025 : Decimal;
      DepreciationCostAmount@1024 : Decimal;
      DepreciationCostAmount2@1023 : Decimal;
      PostingDate@1022 : Date;
    BEGIN
      // Test values on Fixed Asset Book Value 02 Report after running with Group Total as Main Asset.

      // 1. Setup: Create Depreciation Book, Create 3 Fixed Assets, Create Main Asset Components, Create FA Depreciation Books, Create
      // and Post FA Journal Lines with FA Posting Type Acquisition cost and Depreciation for first 2 Fixed Assets.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset3);
      LibraryFixedAsset.CreateMainAssetComponent(MainAssetComponent,FixedAsset3."No.",FixedAsset."No.");
      LibraryFixedAsset.CreateMainAssetComponent(MainAssetComponent,FixedAsset3."No.",FixedAsset2."No.");
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",'',DepreciationBook.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset2."No.",'',DepreciationBook.Code);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset3."No.",'',DepreciationBook.Code);

      // Using the Random Number for the Day.
      PostingDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      AcquisitionCostAmount := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      AcquisitionCostAmount2 := PostAcquisitionDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);
      DepreciationCostAmount := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,PostingDate);
      DepreciationCostAmount2 := PostDepreciationDifferentFA(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 02 Report with Group Total as Main Asset.
      FixedAsset.SETFILTER("No.",'%1|%2',FixedAsset."No.",FixedAsset2."No.");
      RunFixedAssetBookValue02Report(FixedAsset,DepreciationBook.Code,GroupTotals::"Main Asset",FALSE,FALSE,FALSE);

      // 3. Verify: Verify values on Fixed Asset Book Value 02 Report.
      VerifyTotalExistenceOnReport(FixedAsset.FIELDCAPTION("Main Asset/Component"),STRSUBSTNO('Main Asset %1',FixedAsset3."No."));
      VerifyDecimalValuesOnReport(AcquisitionCostAmount,AcquisitionCostAmount2,DepreciationCostAmount,DepreciationCostAmount2);
    END;

    [Test]
    PROCEDURE PrintDetailsBookValue02@72();
    VAR
      FixedAsset@1002 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1003 : Record 5612;
      FAJournalLine@1004 : Record 5621;
      GroupTotals@1016 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
      AcquisitionCostAmount@1027 : Decimal;
      AcquisitionCostAmount2@1026 : Decimal;
      DepreciationCostAmount@1025 : Decimal;
      DepreciationCostAmount2@1024 : Decimal;
      PostingDate@1023 : Date;
    BEGIN
      // Test values on Fixed Asset Book Value 02 Report after running with Print Details as True.

      // 1. Setup: Create Depreciation Book, Create Fixed Asset, Create FA Depreciation Book, Create and Post FA Journal Lines with FA
      // Posting Type Acquisition cost and Depreciation for Fixed Asset.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      // Using the Random Number for the Day.
      PostingDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      AcquisitionCostAmount :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBook.Code,PostingDate);
      AcquisitionCostAmount2 :=
        CreateAndPostFAJournalLine(
          FixedAsset."No.",FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBook.Code,WORKDATE);
      DepreciationCostAmount :=
        PostDisposalFAJournalLine(FixedAsset."No.",FAJournalLine."FA Posting Type"::Depreciation,DepreciationBook.Code,PostingDate);
      DepreciationCostAmount2 :=
        PostDisposalFAJournalLine(FixedAsset."No.",FAJournalLine."FA Posting Type"::Depreciation,DepreciationBook.Code,WORKDATE);

      // 2. Exercise: Run Fixed Asset Book Value 02 Report with Print Details as True.
      FixedAsset.SETRANGE("No.",FixedAsset."No.");
      RunFixedAssetBookValue02Report(FixedAsset,DepreciationBook.Code,GroupTotals::" ",TRUE,FALSE,FALSE);

      // 3. Verify: Verify values on Fixed Asset Book Value 02 Report.
      LibraryReportValidation.OpenFile;
      Assert.IsTrue(LibraryReportValidation.CheckIfValueExists(FixedAsset."No."),STRSUBSTNO(ExistErr,FixedAsset."No."));
      VerifyDecimalValuesOnReport(AcquisitionCostAmount,AcquisitionCostAmount2,DepreciationCostAmount,DepreciationCostAmount2);
    END;

    [Test]
    PROCEDURE ReclassifyBookValue02@71();
    VAR
      FixedAsset@1002 : Record 5600;
      FixedAsset2@1006 : Record 5600;
      GenJournalLine@1009 : Record 81;
      FADepreciationBook@1003 : Record 5612;
      GroupTotals@1007 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
      AcquisitionCostAmount@1027 : Decimal;
      DepreciationCostAmount@1025 : Decimal;
    BEGIN
      // Test values on Fixed Asset Book Value 02 Report after running with Reclassify as True.

      // 1. Setup: Create 2 Fixed Assets, Create FA Depreciation Books, Create and Post FA G/L Journal Lines with FA Posting Type
      // Acquisition cost and Depreciation for first Fixed Asset, create and Post Reclassify Journal.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      CreateFADepreciationBook(
        FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",LibraryFixedAsset.GetDefaultDeprBook);
      CreateFADepreciationBook(
        FADepreciationBook,FixedAsset2."No.",FixedAsset2."FA Posting Group",LibraryFixedAsset.GetDefaultDeprBook);
      AcquisitionCostAmount := LibraryRandom.RandDec(1000,2);  // Using Random Number Generator for Amount.
      DepreciationCostAmount := AcquisitionCostAmount / 2;  // using 2 for partial Depreciation Amount.
      CreateAndPostFAGLJournalLine(FixedAsset."No.",GenJournalLine."FA Posting Type"::"Acquisition Cost",AcquisitionCostAmount);
      CreateAndPostFAGLJournalLine(FixedAsset."No.",GenJournalLine."FA Posting Type"::Depreciation,-DepreciationCostAmount);

      CreateAndPostFAReclassJournal(LibraryFixedAsset.GetDefaultDeprBook,FixedAsset."No.",FixedAsset2."No.");

      // 2. Exercise: Run Fixed Asset Book Value 02 Report with Reclassify as True.
      FixedAsset.SETFILTER("No.",'%1|%2',FixedAsset."No.",FixedAsset2."No.");
      RunFixedAssetBookValue02Report(FixedAsset,LibraryFixedAsset.GetDefaultDeprBook,GroupTotals::" ",TRUE,FALSE,TRUE);

      // 3. Verify: Verify values on Fixed Asset Book Value 02 Report.
      LibraryReportValidation.OpenFile;
      Assert.IsTrue(LibraryReportValidation.CheckIfValueExists(ReclassifyTxt),STRSUBSTNO(ExistErr,ReclassifyTxt));
      Assert.IsTrue(
        LibraryReportValidation.CheckIfValueExists(FORMAT(-AcquisitionCostAmount,0,'<Precision,2><Standard Format,0>')),
        STRSUBSTNO(ExistErr,-AcquisitionCostAmount));
      Assert.IsTrue(
        LibraryReportValidation.CheckIfValueExists(FORMAT(DepreciationCostAmount,0,'<Precision,2><Standard Format,0>')),
        STRSUBSTNO(ExistErr,DepreciationCostAmount));
      LibraryFixedAsset.VerifyLastFARegisterGLRegisterOneToOneRelation; // TFS 376879
    END;

    [Test]
    [HandlerFunctions(FixedAssetBookValue02ReportHandler)]
    PROCEDURE DisposalBookValue02@87();
    VAR
      FixedAsset@1002 : Record 5600;
      GenJournalLine@1009 : Record 81;
      FADepreciationBook@1003 : Record 5612;
      AcquisitionCostAmount@1027 : Decimal;
      DepreciationCostAmount@1025 : Decimal;
      OldGainOnDisposalAcc@1030 : Code[20];
    BEGIN
      // Test values on Fixed Asset Book Value 02 Report after doing disposal of the fixed asset.

      // 1. Setup: Create Fixed Asset,FA Depreciation Books,Create and Post FA G/L Journal Lines with different FA Posting Type
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",LibraryFixedAsset.GetDefaultDeprBook);
      UpdateGainAccOnDisposal(OldGainOnDisposalAcc,FixedAsset."FA Posting Group");
      LibraryVariableStorage.Enqueue(LibraryFixedAsset.GetDefaultDeprBook);
      AcquisitionCostAmount := LibraryRandom.RandDec(1000,2);
      DepreciationCostAmount := AcquisitionCostAmount / LibraryRandom.RandIntInRange(2,4);
      CreateAndPostFAGLJournalLine(FixedAsset."No.",GenJournalLine."FA Posting Type"::"Acquisition Cost",AcquisitionCostAmount);
      CreateAndPostFAGLJournalLine(FixedAsset."No.",GenJournalLine."FA Posting Type"::Depreciation,-1 * DepreciationCostAmount);
      CreateAndPostFAGLJournalLine(
        FixedAsset."No.",GenJournalLine."FA Posting Type"::Disposal,-1 * LibraryRandom.RandDec(1000,2));

      // 2. Exercise: Run report Fixed Asset Book Value 02.
      FixedAsset.SETFILTER("No.",FixedAsset."No.");
      REPORT.RUN(REPORT::"Fixed Asset - Book Value 02",TRUE,FALSE,FixedAsset);

      // 3. Verify: Verify values on Fixed Asset Book Value 02 report that sign gets reversed for Acquisition cost and Depriciation after doing disposal.
      LibraryReportValidation.DownloadFile;
      LibraryReportValidation.OpenFile;
      Assert.IsTrue(
        LibraryReportValidation.CheckIfValueExists(FORMAT(-1 * AcquisitionCostAmount,0,'<Precision,2><Standard Format,0>')),
        STRSUBSTNO(ExistErr,-1 * AcquisitionCostAmount));
      Assert.IsTrue(
        LibraryReportValidation.CheckIfValueExists(FORMAT(DepreciationCostAmount,0,'<Precision,2><Standard Format,0>')),
        STRSUBSTNO(ExistErr,DepreciationCostAmount));

      // 4. Tear Down: Restore the value of FA Group Gain on Disposal Acc.
      RestoreGainAccOnDisposal(FixedAsset."FA Posting Group",OldGainOnDisposalAcc);
    END;

    [Test]
    [HandlerFunctions(FixedAssetListRequestPagetHandler)]
    PROCEDURE DepreciationEndingDate@22();
    VAR
      FADepreciationBook@1002 : Record 5612;
      FixedAsset@1001 : Record 5600;
      DepreciationBook@1000 : Record 5611;
    BEGIN
      // [FEATURE] [Fixed Asset - List]
      // [SCENARIO 378065] "Deprciation Endind date" of Deprciation Book should be printed in

      Initialize;

      // [GIVEN] Depreciation Book having "Fiscal Year 365 Days" = True and "Depreciation Ending date" = 31.12.17
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateDepreciationJournalSetup(DepreciationBook);
      DepreciationBook.VALIDATE("Fiscal Year 365 Days",TRUE);
      DepreciationBook.MODIFY(TRUE);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      FADepreciationBook.VALIDATE("Depreciation Ending Date",WORKDATE + 1);
      FADepreciationBook.MODIFY(TRUE);

      // [WHEN] Running "Fixed Asset - List" report
      LibraryVariableStorage.Enqueue(FADepreciationBook."Depreciation Book Code");
      FixedAsset.SETFILTER("No.",FixedAsset."No.");
      LibraryVariableStorage.Enqueue(FixedAsset."No.");
      COMMIT;
      REPORT.RUN(REPORT::"Fixed Asset - List");

      // [THEN] "Fixed Asset - List" report contains "Depreciation Ending date" (31.12.17)
      LibraryReportValidation.DownloadFile;
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.VerifyCellValueByRef('B',27,1,FORMAT(WORKDATE + 1));
    END;

    LOCAL PROCEDURE Initialize@8();
    BEGIN
      LibraryVariableStorage.Clear;
      CLEAR(LibraryReportValidation);
      IF isInitialized THEN
        EXIT;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AttachFAPostingGroup@61(FixedAsset@1000 : Record 5600;FAPostingGroup@1001 : Code[10]);
    BEGIN
      FixedAsset.VALIDATE("FA Posting Group",FAPostingGroup);
      FixedAsset.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatch@86(VAR GenJournalBatch@1002 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::Assets);
      GenJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateFixedAsset@44(VAR FixedAsset@1000 : Record 5600;FAPostingGroup@1002 : Code[10]);
    BEGIN
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);
      FixedAsset.VALIDATE("FA Posting Group",FAPostingGroup);
      FixedAsset.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFixedAssetClass@100(VAR FAClass@1000 : Record 5607);
    BEGIN
      LibraryFixedAsset.FindFAClass(FAClass);
      FAClass.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(FAClass.FIELDNO(Code),DATABASE::"FA Class"),1,
          LibraryUtility.GetFieldLength(DATABASE::"FA Class",FAClass.FIELDNO(Code))));
      FAClass.INSERT;
    END;

    LOCAL PROCEDURE CreateFixedAssetLocation@101(VAR FALocation@1000 : Record 5609);
    BEGIN
      LibraryFixedAsset.FindFALocation(FALocation);
      FALocation.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(FALocation.FIELDNO(Code),DATABASE::"FA Location"),1,
          LibraryUtility.GetFieldLength(DATABASE::"FA Location",FALocation.FIELDNO(Code))));
      FALocation.INSERT;
    END;

    LOCAL PROCEDURE CreateFADepreciationBook@30(VAR FADepreciationBook@1000 : Record 5612;FANo@1002 : Code[20];FAPostingGroup@1003 : Code[10];DepreciationBookCode@1004 : Code[10]);
    BEGIN
      LibraryFixedAsset.CreateFADepreciationBook(FADepreciationBook,FANo,DepreciationBookCode);
      FADepreciationBook.VALIDATE("FA Posting Group",FAPostingGroup);
      FADepreciationBook.VALIDATE("Depreciation Starting Date",WORKDATE);

      // Depreciation Ending Date greater than Depreciation Starting Date, Using the Random Number for the Year.
      FADepreciationBook.VALIDATE("Depreciation Ending Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE));
      FADepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDepreciationJournalSetup@62(VAR DepreciationBook@1000 : Record 5611);
    VAR
      FAJournalSetup@1001 : Record 5605;
    BEGIN
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAJournalSetup(FAJournalSetup,DepreciationBook.Code,'');
      UpdateFAJournalSetup(FAJournalSetup);
    END;

    LOCAL PROCEDURE CreateFAJournalLine@7(VAR FAJournalLine@1001 : Record 5621;FANo@1002 : Code[20];DepreciationBookCode@1003 : Code[10];FAPostingType@1005 : Option;PostingDate@1004 : Date);
    VAR
      FAJournalBatch@1000 : Record 5620;
    BEGIN
      CreateFAJournalBatch(FAJournalBatch);
      LibraryFixedAsset.CreateFAJournalLine(FAJournalLine,FAJournalBatch."Journal Template Name",FAJournalBatch.Name);
      FAJournalLine.VALIDATE("Document No.",FAJournalBatch.Name);
      FAJournalLine.VALIDATE("Posting Date",PostingDate);
      FAJournalLine.VALIDATE("FA Posting Date",PostingDate);
      FAJournalLine.VALIDATE("FA Posting Type",FAPostingType);
      FAJournalLine.VALIDATE("FA No.",FANo);
      FAJournalLine.VALIDATE(Amount,LibraryRandom.RandDec(1000,2));  // Using Random Number Generator for Amount.
      FAJournalLine.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      FAJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostFAGLJournalLine@64(FANo@1002 : Code[20];FAPostingType@1001 : Option;Amount@1000 : Decimal);
    VAR
      GenJournalLine@1003 : Record 81;
      GenJournalBatch@1005 : Record 232;
    BEGIN
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"Fixed Asset",FANo,Amount);
      PostingSetupFAGLJournalLine(GenJournalLine,FAPostingType);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostFAJournalLine@10(FANo@1002 : Code[20];FAPostingType@1001 : Option;DepreciationBookCode@1004 : Code[10];PostingDate@1000 : Date) FAJournalLineAmount : Decimal;
    VAR
      FAJournalLine@1003 : Record 5621;
    BEGIN
      CreateFAJournalLine(FAJournalLine,FANo,DepreciationBookCode,FAPostingType,PostingDate);
      FAJournalLineAmount := FAJournalLine.Amount;
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostFAReclassJournal@83(DepreciationBookCode@1000 : Code[10];FixedAssetNo@1001 : Code[20];FixedAssetNo2@1002 : Code[20]);
    VAR
      GenJournalLine@1010 : Record 81;
      FAReclassJournalLine@1006 : Record 5624;
      FAReclassJournalBatch@1003 : Record 5623;
    BEGIN
      CreateFAReclassJournalBatch(FAReclassJournalBatch);
      LibraryFixedAsset.CreateFAReclassJournal(
        FAReclassJournalLine,FAReclassJournalBatch."Journal Template Name",FAReclassJournalBatch.Name);
      UpdateFAReclassJournal(FAReclassJournalLine,FixedAssetNo,FixedAssetNo2);
      CODEUNIT.RUN(CODEUNIT::"FA Reclass. Transfer Batch",FAReclassJournalLine);

      UpdateDocumentNo(GenJournalLine,DepreciationBookCode);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateFAJournalBatch@65(VAR FAJournalBatch@1000 : Record 5620);
    VAR
      FAJournalTemplate@1002 : Record 5619;
    BEGIN
      FAJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryFixedAsset.FindFAJournalTemplate(FAJournalTemplate);
      LibraryFixedAsset.CreateFAJournalBatch(FAJournalBatch,FAJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateFAReclassJournalBatch@88(VAR FAReclassJournalBatch@1000 : Record 5623);
    VAR
      FAReclassJournalTemplate@1001 : Record 5622;
    BEGIN
      FAReclassJournalTemplate.FINDFIRST;
      LibraryFixedAsset.CreateFAReclassJournalBatch(FAReclassJournalBatch,FAReclassJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateDisposalFAJournalLine@25(VAR FAJournalLine@1005 : Record 5621;FANo@1002 : Code[20];FAPostingType@1001 : Option;DepreciationBookCode@1004 : Code[10]);
    BEGIN
      CreateFAJournalLine(FAJournalLine,FANo,DepreciationBookCode,FAPostingType,WORKDATE);
      FAJournalLine.VALIDATE(Amount,-FAJournalLine.Amount);
      FAJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindDisposalAmount@54(FANo@1001 : Code[20]) : Decimal;
    VAR
      FALedgerEntry@1000 : Record 5601;
    BEGIN
      FALedgerEntry.SETRANGE("FA No.",FANo);
      FALedgerEntry.SETRANGE("FA Posting Category",FALedgerEntry."FA Posting Category"::Disposal);
      FALedgerEntry.SETRANGE("FA Posting Type",FALedgerEntry."FA Posting Type"::Depreciation);
      FALedgerEntry.FINDFIRST;
      EXIT(FALedgerEntry.Amount);
    END;

    LOCAL PROCEDURE FindValueInArray@48(RowValueSet@1001 : ARRAY [50] OF Text[250];ColumnCaption@1002 : Text[250]) : Boolean;
    VAR
      Counter@1000 : Integer;
    BEGIN
      REPEAT
        Counter += 1;
      UNTIL (RowValueSet[Counter] = ColumnCaption) OR (Counter = ARRAYLEN(RowValueSet));
      EXIT(RowValueSet[Counter] = ColumnCaption);
    END;

    LOCAL PROCEDURE PostAcquisitionDifferentFA@81(FixedAssetNo@1000 : Code[20];FixedAssetNo2@1001 : Code[20];DepreciationBookCode@1002 : Code[10];PostingDate@1004 : Date) : Decimal;
    VAR
      FAJournalLine@1003 : Record 5621;
    BEGIN
      EXIT(
        CreateAndPostFAJournalLine(FixedAssetNo,FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBookCode,PostingDate) +
        CreateAndPostFAJournalLine(
          FixedAssetNo2,FAJournalLine."FA Posting Type"::"Acquisition Cost",DepreciationBookCode,PostingDate));
    END;

    LOCAL PROCEDURE PostDepreciationDifferentFA@110(FixedAssetNo@1000 : Code[20];FixedAssetNo2@1001 : Code[20];DepreciationBookCode@1002 : Code[10];PostingDate@1004 : Date) : Decimal;
    VAR
      FAJournalLine@1003 : Record 5621;
    BEGIN
      EXIT(
        PostDisposalFAJournalLine(FixedAssetNo,FAJournalLine."FA Posting Type"::Depreciation,DepreciationBookCode,PostingDate) +
        PostDisposalFAJournalLine(FixedAssetNo2,FAJournalLine."FA Posting Type"::Depreciation,DepreciationBookCode,PostingDate));
    END;

    LOCAL PROCEDURE PostDisposalDifferentFA@116(FixedAssetNo@1000 : Code[20];FixedAssetNo2@1001 : Code[20];DepreciationBookCode@1002 : Code[10];PostingDate@1004 : Date);
    VAR
      FAJournalLine@1003 : Record 5621;
    BEGIN
      PostDisposalFAJournalLine(FixedAssetNo,FAJournalLine."FA Posting Type"::Disposal,DepreciationBookCode,PostingDate);
      PostDisposalFAJournalLine(FixedAssetNo2,FAJournalLine."FA Posting Type"::Disposal,DepreciationBookCode,PostingDate);
    END;

    LOCAL PROCEDURE PostDisposalFAJournalLine@55(FixedAssetNo@1002 : Code[20];FAPostingType@1001 : Option;DepreciationBookCode@1004 : Code[10];PostingDate@1005 : Date) FAJournalLineAmount : Decimal;
    VAR
      FAJournalLine@1003 : Record 5621;
    BEGIN
      CreateFAJournalLine(
        FAJournalLine,FixedAssetNo,DepreciationBookCode,FAPostingType,PostingDate);
      FAJournalLine.VALIDATE(Amount,-LibraryRandom.RandDec(10,2));  // Using Random Number Generator for Amount.
      FAJournalLine.MODIFY(TRUE);
      FAJournalLineAmount := FAJournalLine.Amount;
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);
    END;

    LOCAL PROCEDURE PostingSetupFAGLJournalLine@70(VAR GenJournalLine@1000 : Record 81;FAPostingType@1003 : Option);
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      GLAccount.SETFILTER("Gen. Posting Type",'<>%1',GLAccount."Gen. Posting Type"::" ");
      LibraryERM.FindGLAccount(GLAccount);
      GenJournalLine.VALIDATE("Document No.",GenJournalLine."Account No.");
      GenJournalLine.VALIDATE("FA Posting Type",FAPostingType);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunFixedAssetBookValue01Report@135(FixedAsset@1000 : Record 5600;DepreciationBookCode@1001 : Code[10];GroupTotals@1002 : Option;PrintTotal@1004 : Boolean;BudgetReport@1005 : Boolean);
    VAR
      FixedAssetBookValue01@1003 : Report 5605;
    BEGIN
      CLEAR(FixedAssetBookValue01);
      FixedAssetBookValue01.SETTABLEVIEW(FixedAsset);
      FixedAssetBookValue01.USEREQUESTPAGE(FALSE);
      FixedAssetBookValue01.SetMandatoryFields(DepreciationBookCode,WORKDATE,WORKDATE);
      FixedAssetBookValue01.SetTotalFields(GroupTotals,PrintTotal,BudgetReport);
      LibraryReportValidation.SetFileName(CREATEGUID);
      FixedAssetBookValue01.SAVEASEXCEL(LibraryReportValidation.GetFileName);
      LibraryReportValidation.DownloadFile;
    END;

    LOCAL PROCEDURE RunFixedAssetBookValue02Report@60(VAR FixedAsset@1000 : Record 5600;DepreciationBookCode@1001 : Code[10];GroupTotals@1002 : Option;PrintTotal@1004 : Boolean;BudgetReport@1005 : Boolean;Reclassify@1006 : Boolean);
    VAR
      FixedAssetBookValue02@1003 : Report 5606;
    BEGIN
      CLEAR(FixedAssetBookValue02);
      FixedAssetBookValue02.SETTABLEVIEW(FixedAsset);
      FixedAssetBookValue02.USEREQUESTPAGE(FALSE);
      FixedAssetBookValue02.SetMandatoryFields(DepreciationBookCode,WORKDATE,WORKDATE);
      FixedAssetBookValue02.SetTotalFields(GroupTotals,PrintTotal,BudgetReport,Reclassify);
      LibraryReportValidation.SetFileName(CREATEGUID);
      FixedAssetBookValue02.SAVEASEXCEL(LibraryReportValidation.GetFileName);
      LibraryReportValidation.DownloadFile;
    END;

    LOCAL PROCEDURE RestoreGainAccOnDisposal@1091(FAPostingGroupCode@1003 : Code[10];GainAccOnDisposal@1002 : Code[20]);
    VAR
      FAPostingGroup@1005 : Record 5606;
    BEGIN
      FAPostingGroup.GET(FAPostingGroupCode);
      FAPostingGroup.VALIDATE("Gains Acc. on Disposal",GainAccOnDisposal);
      FAPostingGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SaveAcquisitionAndPrintDetail@51(FADepreciationBook@1000 : Record 5612;PostingType@1001 : Text[30];PeriodValue@1002 : Option;PrintDetails@1005 : Boolean);
    VAR
      FixedAsset@1008 : Record 5600;
      FixedAssetAnalysis@1007 : Report 5600;
      Period@1006 : 'before Starting Date,Net Change,at Ending Date';
      GroupTotals@1004 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
    BEGIN
      CLEAR(FixedAssetAnalysis);
      FixedAsset.SETRANGE("No.",FADepreciationBook."FA No.");
      FixedAssetAnalysis.SETTABLEVIEW(FixedAsset);

      // Using Random Number Generator for Date.
      FixedAssetAnalysis.SetMandatoryFields(
        FADepreciationBook."Depreciation Book Code",WORKDATE,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      FixedAssetAnalysis.SetDateType(AcquisitionDateTxt,'');
      FixedAssetAnalysis.SetPostingType(AcquisitionCostTxt,PostingType,'');
      FixedAssetAnalysis.SetPeriod(PeriodValue,PeriodValue,Period::"before Starting Date");
      FixedAssetAnalysis.SetTotalFields(GroupTotals::"FA Posting Group",PrintDetails,FALSE,FALSE);

      FixedAssetAnalysis.GetFASetup;
      LibraryReportValidation.SetFileName(CREATEGUID);
      FixedAssetAnalysis.SAVEASEXCEL(LibraryReportValidation.GetFileName);
      LibraryReportValidation.DownloadFile;
    END;

    LOCAL PROCEDURE SaveAppreciationAndPrintDetail@32(VAR FixedAsset@1004 : Record 5600;DepreciationBookCode@1002 : Code[10];PeriodValue@1001 : Option;PrintDetails@1000 : Boolean);
    VAR
      FixedAssetAnalysis@1007 : Report 5600;
      Period@1006 : 'before Starting Date,Net Change,at Ending Date';
      GroupTotals@1005 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
    BEGIN
      CLEAR(FixedAssetAnalysis);
      FixedAssetAnalysis.SETTABLEVIEW(FixedAsset);

      // Using Random Number Generator for Date.
      FixedAssetAnalysis.SetMandatoryFields(
        DepreciationBookCode,WORKDATE,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      FixedAssetAnalysis.SetDateType('',AcquisitionDateTxt);
      FixedAssetAnalysis.SetPostingType('',AcquisitionCostTxt,AppreciationTxt);
      FixedAssetAnalysis.SetPeriod(Period::"before Starting Date",PeriodValue,PeriodValue);
      FixedAssetAnalysis.SetTotalFields(GroupTotals::"FA Posting Group",PrintDetails,FALSE,FALSE);

      FixedAssetAnalysis.GetFASetup;
      LibraryReportValidation.SetFileName(CREATEGUID);
      FixedAssetAnalysis.SAVEASEXCEL(LibraryReportValidation.GetFileName);
      LibraryReportValidation.DownloadFile;
    END;

    LOCAL PROCEDURE SaveAnalysisWithoutPrintDetail@56(FADepreciationBook@1004 : Record 5612;SalesReport@1000 : Boolean;BudgetReport@1001 : Boolean);
    VAR
      FixedAsset@1008 : Record 5600;
      FixedAssetAnalysis@1007 : Report 5600;
      Period@1006 : 'before Starting Date,Net Change,at Ending Date';
      GroupTotals@1005 : ' ,FA Class,FA Subclass,FA Location,Main Asset,Global Dimension 1,Global Dimension 2,FA Posting Group';
    BEGIN
      CLEAR(FixedAssetAnalysis);
      FixedAsset.SETRANGE("No.",FADepreciationBook."FA No.");
      FixedAssetAnalysis.SETTABLEVIEW(FixedAsset);

      // Using Random Number Generator for Date.
      FixedAssetAnalysis.SetMandatoryFields(
        FADepreciationBook."Depreciation Book Code",WORKDATE,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      FixedAssetAnalysis.SetDateType(AcquisitionDateTxt,'');
      FixedAssetAnalysis.SetPostingType(BookValueTxt,'','');
      FixedAssetAnalysis.SetPeriod(Period::"Net Change",Period::"before Starting Date",Period::"before Starting Date");
      FixedAssetAnalysis.SetTotalFields(GroupTotals::"FA Posting Group",TRUE,SalesReport,BudgetReport);

      FixedAssetAnalysis.GetFASetup;
      LibraryReportValidation.SetFileName(CREATEGUID);
      FixedAssetAnalysis.SAVEASEXCEL(LibraryReportValidation.GetFileName);
      LibraryReportValidation.DownloadFile;
    END;

    LOCAL PROCEDURE UpdateCustom1Depreciation@85(VAR DepreciationBook@1000 : Record 5611);
    BEGIN
      DepreciationBook.VALIDATE("Use Custom 1 Depreciation",TRUE);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDocumentNo@90(VAR GenJournalLine@1000 : Record 81;DepreciationBookCode@1005 : Code[10]);
    VAR
      FAJournalSetup@1002 : Record 5605;
      GenJournalBatch@1001 : Record 232;
      NoSeriesManagement@1004 : Codeunit 396;
      DocumentNo@1003 : Code[20];
    BEGIN
      FAJournalSetup.SETRANGE("Depreciation Book Code",DepreciationBookCode);
      FAJournalSetup.FINDFIRST;
      GenJournalBatch.GET(FAJournalSetup."Gen. Jnl. Template Name",FAJournalSetup."Gen. Jnl. Batch Name");
      DocumentNo := NoSeriesManagement.GetNextNo(GenJournalBatch."No. Series",WORKDATE,FALSE);
      GenJournalLine.SETRANGE("Journal Template Name",FAJournalSetup."Gen. Jnl. Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",FAJournalSetup."Gen. Jnl. Batch Name");
      GenJournalLine.FINDSET;
      REPEAT
        GenJournalLine.VALIDATE("Document No.",DocumentNo);
        GenJournalLine.MODIFY(TRUE);
      UNTIL GenJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateFAClassCode@57(FixedAsset@1000 : Record 5600;FAClassCode@1001 : Code[10]);
    BEGIN
      FixedAsset.VALIDATE("FA Class Code",FAClassCode);
      FixedAsset.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateFALocationCode@146(FixedAsset@1000 : Record 5600;FALocationCode@1001 : Code[10]);
    BEGIN
      FixedAsset.VALIDATE("FA Location Code",FALocationCode);
      FixedAsset.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateFAJournalSetup@134(VAR FAJournalSetup@1000 : Record 5605);
    VAR
      FAJournalSetup2@1005 : Record 5605;
    BEGIN
      FAJournalSetup2.SETRANGE("Depreciation Book Code",LibraryFixedAsset.GetDefaultDeprBook);
      FAJournalSetup2.FINDFIRST;
      FAJournalSetup.TRANSFERFIELDS(FAJournalSetup2,FALSE);
      FAJournalSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateFAReclassJournal@68(VAR FAReclassJournalLine@1000 : Record 5624;FANo@1001 : Code[20];NewFANo@1002 : Code[20]);
    BEGIN
      FAReclassJournalLine.VALIDATE("FA Posting Date",WORKDATE);
      FAReclassJournalLine.VALIDATE(
        "Document No.",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(FAReclassJournalLine.FIELDNO("Document No."),DATABASE::"FA Reclass. Journal Line"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"FA Reclass. Journal Line",FAReclassJournalLine.FIELDNO("Document No."))));
      FAReclassJournalLine.VALIDATE("FA No.",FANo);
      FAReclassJournalLine.VALIDATE("New FA No.",NewFANo);
      FAReclassJournalLine.VALIDATE("Reclassify Acq. Cost %",100);  // Using 100 for Reclassify - required for test case.
      FAReclassJournalLine.VALIDATE("Reclassify Acquisition Cost",TRUE);
      FAReclassJournalLine.VALIDATE("Reclassify Depreciation",TRUE);
      FAReclassJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateFASubClassCode@121(FixedAsset@1000 : Record 5600;FASubClassCode@1001 : Code[10]);
    BEGIN
      FixedAsset.VALIDATE("FA Subclass Code",FASubClassCode);
      FixedAsset.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGlobalDimension1Code@156(FixedAsset@1001 : Record 5600;GlobalDimension1Code@1000 : Code[20]);
    BEGIN
      FixedAsset.VALIDATE("Global Dimension 1 Code",GlobalDimension1Code);
      FixedAsset.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGlobalDimension2Code@175(FixedAsset@1001 : Record 5600;GlobalDimension2Code@1000 : Code[20]);
    BEGIN
      FixedAsset.VALIDATE("Global Dimension 2 Code",GlobalDimension2Code);
      FixedAsset.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGainAccOnDisposal@91(VAR OldGainAccOnDisposal@1000 : Code[20];FAPostingGroupCode@1001 : Code[10]);
    VAR
      FAPostingGroup@1005 : Record 5606;
      GLAccount@1007 : Record 15;
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);
      FAPostingGroup.GET(FAPostingGroupCode);
      OldGainAccOnDisposal := FAPostingGroup."Gains Acc. on Disposal";
      RestoreGainAccOnDisposal(FAPostingGroup.Code,GLAccount."No.");
    END;

    LOCAL PROCEDURE VerifyAmount@28(ColumnValue@1000 : Text[250];FAJournalLineAmount@1001 : Decimal;ErrorMessage@1004 : Text[250]);
    VAR
      Amount@1003 : ARRAY [50] OF Text[250];
    BEGIN
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetColumn(ColumnValue);
      LibraryReportValidation.FindSet(Amount);
      Assert.IsTrue(FindValueInArray(Amount,FORMAT(FAJournalLineAmount)),ErrorMessage);
    END;

    LOCAL PROCEDURE VerifyAmountRange@29(SetRangeValue@1002 : Text[250];ColumnValue@1004 : Text[250];FAJournalLineAmount@1001 : Decimal;ErrorMessage@1000 : Text[250]);
    VAR
      FixedAsset@1006 : Record 5600;
      AmountValue@1007 : Decimal;
    BEGIN
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetRange(FixedAsset.FIELDCAPTION("No."),SetRangeValue);
      LibraryReportValidation.SetColumn(ColumnValue);
      EVALUATE(AmountValue,LibraryReportValidation.GetValue);
      Assert.AreEqual(FAJournalLineAmount,AmountValue,ErrorMessage);
    END;

    LOCAL PROCEDURE VerifyBookValue@63(ExpectedAmount@1000 : Decimal;ColumnCaption@1002 : Text[250]);
    VAR
      ActualAmount@1001 : Decimal;
    BEGIN
      LibraryReportValidation.SetColumn(ColumnCaption);
      EVALUATE(ActualAmount,LibraryReportValidation.GetValue);
      Assert.AreEqual(ExpectedAmount,ActualAmount,STRSUBSTNO(ValueMismatchErr,ColumnCaption,ExpectedAmount));
    END;

    LOCAL PROCEDURE VerifyDecimalValuesOnReport@82(Amount@1003 : Decimal;Amount2@1002 : Decimal;DepreciationAmount@1001 : Decimal;DepreciationAmount2@1000 : Decimal);
    BEGIN
      Assert.IsTrue(
        LibraryReportValidation.CheckIfDecimalValueExists(Amount),STRSUBSTNO(ExistErr,Amount));
      Assert.IsTrue(
        LibraryReportValidation.CheckIfDecimalValueExists(Amount2),
        STRSUBSTNO(ExistErr,Amount2));
      Assert.IsTrue(
        LibraryReportValidation.CheckIfDecimalValueExists(Amount + Amount2),
        STRSUBSTNO(ExistErr,Amount + Amount2));
      Assert.IsTrue(
        LibraryReportValidation.CheckIfDecimalValueExists(DepreciationAmount),
        STRSUBSTNO(ExistErr,DepreciationAmount));
      Assert.IsTrue(
        LibraryReportValidation.CheckIfDecimalValueExists(DepreciationAmount2),
        STRSUBSTNO(ExistErr,DepreciationAmount2));
      Assert.IsTrue(
        LibraryReportValidation.CheckIfDecimalValueExists(DepreciationAmount + DepreciationAmount2),
        STRSUBSTNO(ExistErr,DepreciationAmount + DepreciationAmount2));
    END;

    LOCAL PROCEDURE VerifyFixedAssetBookValue@53(AcquisitionCostAmount@1003 : Decimal;AcquisitionCostAmount2@1002 : Decimal;DepreciationCostAmount@1001 : Decimal;DepreciationCostAmount2@1000 : Decimal);
    BEGIN
      VerifyBookValue(AcquisitionCostAmount2,AdditionInPeriodTxt);
      VerifyBookValue(-AcquisitionCostAmount - AcquisitionCostAmount2,DisposalInPeriodTxt);
      VerifyBookValue(DepreciationCostAmount2,DepreciationInPeriodTxt);

      // Use 1 because it used as in Report for creating Header Line.
      VerifyBookValue(AcquisitionCostAmount,AcquisitionCostTxt + ' ' + FORMAT(CALCDATE('<-1D>',WORKDATE)));
      VerifyBookValue(DepreciationCostAmount,STRSUBSTNO(DepreciationTxt,CALCDATE('<-1D>',WORKDATE)));
      VerifyBookValue(AcquisitionCostAmount + DepreciationCostAmount,BookValueTxt + ' ' + FORMAT(CALCDATE('<-1D>',WORKDATE)));
    END;

    LOCAL PROCEDURE VerifyTotalExistenceOnReport@89(FieldCaption@1000 : Text[30];FieldValue@1001 : Text[50]);
    BEGIN
      LibraryReportValidation.OpenFile;
      Assert.IsTrue(
        LibraryReportValidation.CheckIfValueExists(STRSUBSTNO(GroupTotalsTxt,FieldCaption)),STRSUBSTNO(ExistErr,FieldCaption));
      Assert.IsTrue(LibraryReportValidation.CheckIfValueExists(GroupTotalTxt + ' ' + FieldValue),STRSUBSTNO(ExistErr,FieldValue));
    END;

    [RequestPageHandler]
    PROCEDURE FixedAssetBookValue02ReportHandler@92(VAR FixedAssetBookValue02@1000 : TestRequestPage 5606);
    VAR
      DepriciationBookCode@1001 : Text;
    BEGIN
      DepriciationBookCode := LibraryVariableStorage.DequeueText;
      FixedAssetBookValue02.DeprBookCode.SETVALUE(DepriciationBookCode);
      FixedAssetBookValue02.StartingDate.SETVALUE(WORKDATE);
      FixedAssetBookValue02.EndingDate.SETVALUE(WORKDATE);
      LibraryReportValidation.SetFileName(CREATEGUID);
      FixedAssetBookValue02.SAVEASEXCEL(LibraryReportValidation.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE FixedAssetListRequestPagetHandler@69(VAR FixedAssetList@1002 : TestRequestPage 5601);
    BEGIN
      FixedAssetList.Control1.SETVALUE(LibraryVariableStorage.DequeueText);  // Setting Depreciation Book Code.
      FixedAssetList."Fixed Asset".SETFILTER("No.",LibraryVariableStorage.DequeueText);
      LibraryReportValidation.SetFileName(CREATEGUID);
      FixedAssetList.SAVEASEXCEL(LibraryReportValidation.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Fixed Asset]
      Test and Verify Fixed Assets Report: Fixed Asset - Analysis
       1. Test that System generates an error when Starting Date and End Date are not filled.
       2. Test that System generates an error when Starting Date is later than the Ending Date.
       3. Test that system generates an error when Proceeds on Disposal specified without option at Ending Date.
       4. Test that system generates an error when Gain/Loss specified without option at Ending Date.
       5. Test that value of Acquisition Cost with Period 1 option Before Starting Date and Date Field 1 as Acquisition Date.
       6. Test that value of Acquisition Cost with Period 1 option Net Change and Date Field 1 as Acquisition Date.
       7. Test that value of Acquisition Cost with Period 1 option at Ending Date and Date Field 1 as Acquisition Date.
       8. Test that value of Acquisition Cost with Period 1 option at Ending Date and Date Field 1 as Acquisition Date and Print Details.
       9. Test that value of Appreciation with Period2 option Before Starting Date and Date Field 1 as Acquisition Date.
      10. Test that value of Appreciation with Period2 option Net Change and Date Field 1 as Acquisition Date.
      11. Test that value of Appreciation with Period2 option at Ending Date and Date Field 1 as Acquisition Date.
      12. Test that value of Appreciation with Period2 option at Ending Date and Date Field 1 as Acquisition Date and Print Details.
      13. Test that value of Appreciation with Period2 option Before Starting Date and Date Field 2 as Acquisition Date.
      14. Test that value of Appreciation with Period2 option Net Change and Date Field 2 as Acquisition Date.
      15. Test that value of Appreciation with Period2 option at Ending Date and Date Field 2 as Acquisition Date.
      16. Test that value of Appreciation with Period2 option at Ending Date and Date Field 2 as Acquisition Date and Print Details.
      17. Test that value of Group Total amount of Appreciation and Acquisition Cost.
      18. Test that value of Total amount of Appreciation and Acquisition Cost.
      19. Test that report Asset - Analysis Report with check Only Sold Assets.
      20. Test that report Asset - Analysis Report with check Budget Report.
      21. Test error occurs on Running Fixed Asset Book Value 01 Report without Starting and Ending Date.
      22. Test error occurs on Running Fixed Asset Book Value 01 Report with Starting Date greater than Ending Date.
      23. Test error occurs on Running Fixed Asset Book Value 01 Report without Depreciation Book Code.
      24. Test values on Fixed Asset Book Value 01 Report after running with Group Total as FA Posting Group.
      25. Test values on Fixed Asset Book Value 01 Report after running with Group Total as FA Class.
      26. Test values on Fixed Asset Book Value 01 Report after running with Group Total as FA SubClass.
      27. Test values on Fixed Asset Book Value 01 Report after running with Group Total as FA Location.
      28. Test values on Fixed Asset Book Value 01 Report after running with Group Total as Global Dimension 1.
      29. Test values on Fixed Asset Book Value 01 Report after running with Group Total as Global Dimension 2.
      30. Test values on Fixed Asset Book Value 01 Report after running with Group Total as Main Asset.
      31. Test values on Fixed Asset Book Value 01 Report after running with Print Details as True.
      32. Test Total on Fixed Asset Book Value 01 Report after running with Print Details as True.
      33. Test Fixed Asset Book Value 01 Report after running with Budget Report as True.
      34. Test error occurs on running Fixed Asset Book Value 01 Report with Use Custom 1 Depreciation True on Depreciation Book.
      35. Test error occurs on Running Fixed Asset Book Value 02 Report without Starting and Ending Date.
      36. Test error occurs on Running Fixed Asset Book Value 02 Report with Starting Date greater than Ending Date.
      37. Test error occurs on Running Fixed Asset Book Value 02 Report without Depreciation Book Code.
      38. Test Fixed Asset Book Value 02 Report after running with Budget Report as True.
      39. Test error occurs on running Fixed Asset Book Value 02 Report with Use Custom 1 Depreciation True on Depreciation Book.
      40. Test values on Fixed Asset Book Value 02 Report after running with Group Total as FA Posting Group.
      41. Test values on Fixed Asset Book Value 02 Report after running with Group Total as FA Class.
      42. Test values on Fixed Asset Book Value 02 Report after running with Group Total as FA SubClass.
      43. Test values on Fixed Asset Book Value 02 Report after running with Group Total as FA Location.
      44. Test values on Fixed Asset Book Value 02 Report after running with Group Total as Global Dimension 1.
      45. Test values on Fixed Asset Book Value 02 Report after running with Group Total as Global Dimension 2.
      46. Test values on Fixed Asset Book Value 02 Report after running with Group Total as Main Asset.
      47. Test values on Fixed Asset Book Value 02 Report after running with Print Details as True.
      48. Test values on Fixed Asset Book Value 02 Report after running with Reclassify as True.
      49. Test values on Fixed Asset Book Value 02 Report after doing the disposal of the fixed asset.

      TFS_TS_ID = 237337
      Covers Test cases:
      -----------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                   TFS ID
      -----------------------------------------------------------------------------------------------------------
      StartingEndingDatesBlankError, StartDateLaterEndingDateError, DisposalWithStartingDateError          139496
      GainLossWithStartingDateError, AcquisitionCostStartingDate, AcquisitionCostPeriodNetChange           139496
      AcquisitionCostWithEndingDate, AcquisitionCostWithPrintDetail, AppreciationBeforeStartingDate        139496
      AppreciationWithNetChange, AppreciationWithEndingDate, AppreciationWithPrintDetail                   139496
      AppreciationDateTypeStartDate, AppreciationDateTypeNetChange, AppreciationDateTypeEndDate            139496
      AppreciationDateTypeWithDetail, GroupTotalForAppreciation, TotalForAppreciation, OnlySoldAssets      139496
      BudgetReport                                                                                         139496
      -----------------------------------------------------------------------------------------------------------
       TFS_TS_ID = 237339
      --------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      --------------------------------------------------------------------------------------------------------------------------------
      DateErrorFixedAssetBookValue01, EndingDateErrorBookValue01, DepreciationBookCodeError, BookValueGroupByFAPostingGroup     139367
      BookValueGroupByFAClass, BookValueGroupByFASubclass, BookValueGroupByFALocation, BookValueGroupGlobalDimension1           139367
      BookValueGroupGlobalDimension2, BookValueGroupByMainAsset, PrintDetailsBookValue, TotalOnBookValue,BudgetReportBookValue  139367
      UseCustom1DepreciationError

       TFS_TS_ID = 241018
       Covers Test cases:
      --------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      --------------------------------------------------------------------------------------------------------------------------------
      DateErrorFixedAssetBookValue02, EndingDateErrorBookValue02, BlankDepreciationBookCode, BudgetReportBookValue02            139444
      UseCustom1ErrorBookValue02, GroupFAPostingGroupBookValue02, GroupByFAClassBookValue02, GroupByFASubclassBookValue02       139444
      GroupByFALocationBookValue02, GlobalDimension1BookValue02, GlobalDimension2BookValue02, GroupByMainAssetBookValue02       139444
      PrintDetailsBookValue02, ReclassifyBookValue02                                                                            139444

       TFS_TS_ID = 301697
       Covers Test cases:
      --------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      --------------------------------------------------------------------------------------------------------------------------------
      DisposalBookValue02                                                                                                       301604
    }
    END.
  }
}

