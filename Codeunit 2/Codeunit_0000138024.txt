OBJECT Codeunit 138024 SMB Totals and Inv.Disc. Purch
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1007 : Codeunit 131300;
      LibraryRandom@1000 : Codeunit 130440;
      LibrarySmallBusiness@1014 : Codeunit 132213;
      LibraryVariableStorage@1002 : Codeunit 131004;
      Assert@1009 : Codeunit 130000;
      MiniPurchCalcDiscByType@1010 : Codeunit 1310;
      LibraryUtility@1005 : Codeunit 131000;
      isInitialized@1001 : Boolean;
      ChangeConfirmMsg@1004 : TextConst 'ENU=Do you want';
      PostMsg@1006 : TextConst 'ENU=post';
      OpenPostedInvMsg@1003 : TextConst 'ENU=Do you want to open';

    LOCAL PROCEDURE Initialize@4();
    VAR
      PurchasesSetup@1002 : Record 312;
      InventorySetup@1000 : Record 313;
      ItemNoSeries@1001 : Text[10];
    BEGIN
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      PurchasesSetup.GET;
      PurchasesSetup."Ext. Doc. No. Mandatory" := FALSE;
      PurchasesSetup.MODIFY;

      InventorySetup.GET;
      ItemNoSeries := LibraryUtility.GetGlobalNoSeriesCode;
      IF InventorySetup."Item Nos." <> ItemNoSeries THEN
        InventorySetup.VALIDATE("Item Nos.",ItemNoSeries);
      InventorySetup."Automatic Cost Posting" := FALSE;
      InventorySetup.MODIFY;
      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE InvoiceModifyingLineUpdatesTotalsAndInvDiscTypePct@67();
    VAR
      Item@1000 : Record 27;
      Vendor@1007 : Record 23;
      MiniPurchaseInvoice@1002 : TestPage 1354;
      ItemQuantity@1001 : Decimal;
      TotalAmount@1003 : Decimal;
      DiscPct@1004 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Vendor,DiscPct);

      CreateInvoceWithOneLineThroughTestPage(Vendor,Item,ItemQuantity,MiniPurchaseInvoice);

      ItemQuantity := ItemQuantity * 2;
      MiniPurchaseInvoice.PurchLines.Quantity.SETVALUE(ItemQuantity);
      TotalAmount := ItemQuantity * Item."Last Direct Cost";
      CheckInvoiceDiscountTypePercentage(DiscPct,TotalAmount,MiniPurchaseInvoice,TRUE,'');

      MiniPurchaseInvoice.PurchLines."Direct Unit Cost".SETVALUE(2 * Item."Last Direct Cost");
      TotalAmount := 2 * TotalAmount;
      CheckInvoiceDiscountTypePercentage(DiscPct,TotalAmount,MiniPurchaseInvoice,TRUE,'');

      TotalAmount := 2 * TotalAmount;
      MiniPurchaseInvoice.PurchLines."Line Amount".SETVALUE(TotalAmount);
      CheckInvoiceDiscountTypePercentage(DiscPct,TotalAmount,MiniPurchaseInvoice,TRUE,'');

      MiniPurchaseInvoice.PurchLines."Line Discount %".SETVALUE('0');
      TotalAmount := TotalAmount / 2;
      CheckInvoiceDiscountTypePercentage(DiscPct,TotalAmount,MiniPurchaseInvoice,TRUE,'');

      MiniPurchaseInvoice.PurchLines."No.".SETVALUE('');
      TotalAmount := 0;
      CheckInvoiceDiscountTypePercentage(0,TotalAmount,MiniPurchaseInvoice,FALSE,'');
    END;

    [Test]
    PROCEDURE InvoiceModifyingLineUpdatesTotalsAndKeepsInvDiscTypeAmount@29();
    VAR
      Vendor@1009 : Record 23;
      Item@1000 : Record 27;
      Item2@1007 : Record 27;
      MiniPurchaseInvoice@1002 : TestPage 1354;
      ItemQuantity@1001 : Decimal;
      TotalAmount@1003 : Decimal;
      InvoiceDiscountAmount@1006 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Vendor,InvoiceDiscountAmount);

      CreateInvoceWithOneLineThroughTestPage(Vendor,Item,ItemQuantity,MiniPurchaseInvoice);

      MiniPurchaseInvoice.PurchLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      ItemQuantity := ItemQuantity * 2;
      MiniPurchaseInvoice.PurchLines.Quantity.SETVALUE(ItemQuantity);
      TotalAmount := ItemQuantity * Item."Last Direct Cost";
      CheckInvoiceDiscountTypeAmount(InvoiceDiscountAmount,TotalAmount,MiniPurchaseInvoice,TRUE,'');

      MiniPurchaseInvoice.PurchLines."Direct Unit Cost".SETVALUE(2 * Item."Last Direct Cost");
      TotalAmount := 2 * TotalAmount;
      CheckInvoiceDiscountTypeAmount(InvoiceDiscountAmount,TotalAmount,MiniPurchaseInvoice,TRUE,'');

      TotalAmount := 2 * TotalAmount;
      MiniPurchaseInvoice.PurchLines."Line Amount".SETVALUE(TotalAmount);
      CheckInvoiceDiscountTypeAmount(InvoiceDiscountAmount,TotalAmount,MiniPurchaseInvoice,TRUE,'');

      MiniPurchaseInvoice.PurchLines."Line Discount %".SETVALUE('0');
      TotalAmount := TotalAmount / 2;
      CheckInvoiceDiscountTypeAmount(InvoiceDiscountAmount,TotalAmount,MiniPurchaseInvoice,TRUE,'');

      CreateItem(Item2,Item."Last Direct Cost" / 2);

      TotalAmount := Item2."Last Direct Cost" * ItemQuantity;
      MiniPurchaseInvoice.PurchLines."No.".SETVALUE(Item2."No.");
      CheckInvoiceDiscountTypeAmount(InvoiceDiscountAmount,TotalAmount,MiniPurchaseInvoice,TRUE,'');
    END;

    [Test]
    PROCEDURE InvioceDiscountTypePercentageIsSetWhenInvoiceIsOpened@66();
    VAR
      PurchaseHeader@1003 : Record 38;
      Item@1004 : Record 27;
      Vendor@1008 : Record 23;
      MiniPurchaseInvoice@1006 : TestPage 1354;
      NumberOfLines@1005 : Integer;
      DiscPct@1001 : Decimal;
      ItemQuantity@1000 : Decimal;
      TotalAmount@1007 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Vendor,DiscPct);

      CreateInvoiceWithRandomNumberOfLines(PurchaseHeader,Item,Vendor,ItemQuantity,NumberOfLines);
      MiniPurchCalcDiscByType.ApplyDefaultInvoiceDiscount(0,PurchaseHeader);

      OpenPurchaseInvoice(PurchaseHeader,MiniPurchaseInvoice);

      TotalAmount := Item."Last Direct Cost" * ItemQuantity * NumberOfLines;
      CheckInvoiceDiscountTypePercentage(DiscPct,TotalAmount,MiniPurchaseInvoice,TRUE,'');
    END;

    [Test]
    PROCEDURE InvioceDiscountTypeAmountIsSetWhenInvoiceIsOpened@91();
    VAR
      PurchaseHeader@1003 : Record 38;
      Item@1004 : Record 27;
      Vendor@1008 : Record 23;
      MiniPurchaseInvoice@1006 : TestPage 1354;
      NumberOfLines@1005 : Integer;
      ItemQuantity@1000 : Decimal;
      InvoiceDiscountAmount@1009 : Decimal;
      TotalAmount@1007 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Vendor,InvoiceDiscountAmount);

      CreateInvoiceWithRandomNumberOfLines(PurchaseHeader,Item,Vendor,ItemQuantity,NumberOfLines);
      MiniPurchCalcDiscByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,PurchaseHeader);

      OpenPurchaseInvoice(PurchaseHeader,MiniPurchaseInvoice);

      TotalAmount := NumberOfLines * ItemQuantity * Item."Last Direct Cost";
      CheckInvoiceDiscountTypeAmount(InvoiceDiscountAmount,TotalAmount,MiniPurchaseInvoice,TRUE,'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE InvoiceChangingVATBusPostingGroupUpdatesTotalsAndDiscounts@105();
    VAR
      PurchaseHeader@1009 : Record 38;
      Item@1008 : Record 27;
      Vendor@1001 : Record 23;
      MiniPurchaseInvoice@1007 : TestPage 1354;
      NumberOfLines@1006 : Integer;
      DiscPct@1004 : Decimal;
      ItemQuantity@1003 : Decimal;
      TotalAmount@1000 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Vendor,DiscPct);
      CreateInvoiceWithRandomNumberOfLines(PurchaseHeader,Item,Vendor,ItemQuantity,NumberOfLines);

      OpenPurchaseInvoice(PurchaseHeader,MiniPurchaseInvoice);

      AnswerYesToConfirmDialog;
      MiniPurchaseInvoice."VAT Bus. Posting Group".SETVALUE(
        LibrarySmallBusiness.FindVATBusPostingGroupZeroVAT(Item."VAT Prod. Posting Group"));
      TotalAmount := NumberOfLines * ItemQuantity * Item."Last Direct Cost";
      CheckInvoiceDiscountTypePercentage(DiscPct,TotalAmount,MiniPurchaseInvoice,FALSE,'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE InvoiceChangingSellToVendorRecalculatesForInvoiceDiscountTypePercentage@106();
    VAR
      PurchaseHeader@1009 : Record 38;
      Item@1008 : Record 27;
      Vendor@1001 : Record 23;
      NewVendor@1010 : Record 23;
      MiniPurchaseInvoice@1007 : TestPage 1354;
      NumberOfLines@1006 : Integer;
      DiscPct@1004 : Decimal;
      ItemQuantity@1003 : Decimal;
      TotalAmount@1000 : Decimal;
      NewCustDiscPct@1002 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Vendor,DiscPct);
      NewCustDiscPct := LibraryRandom.RandDecInRange(1,99,2);
      CreateVendorWithDiscount(NewVendor,NewCustDiscPct,0);

      CreateInvoiceWithRandomNumberOfLines(PurchaseHeader,Item,Vendor,ItemQuantity,NumberOfLines);
      OpenPurchaseInvoice(PurchaseHeader,MiniPurchaseInvoice);

      AnswerYesToAllConfirmDialogs;

      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(NewVendor.Name);

      TotalAmount := NumberOfLines * ItemQuantity * Item."Last Direct Cost";
      CheckInvoiceDiscountTypePercentage(NewCustDiscPct,TotalAmount,MiniPurchaseInvoice,TRUE,'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE InvoiceChangingSellToVendorSetsDiscountToZeroForInvoiceDiscountTypeAmount@107();
    VAR
      PurchaseHeader@1010 : Record 38;
      Item@1009 : Record 27;
      Vendor@1003 : Record 23;
      NewVendor@1000 : Record 23;
      MiniPurchaseInvoice@1008 : TestPage 1354;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
      TotalAmount@1002 : Decimal;
      NewCustDiscPct@1011 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Vendor,InvoiceDiscountAmount);
      NewCustDiscPct := LibraryRandom.RandDecInRange(1,100,2);
      CreateVendorWithDiscount(NewVendor,NewCustDiscPct,0);

      CreateInvoiceWithRandomNumberOfLines(PurchaseHeader,Item,Vendor,ItemQuantity,NumberOfLines);
      MiniPurchCalcDiscByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,PurchaseHeader);
      OpenPurchaseInvoice(PurchaseHeader,MiniPurchaseInvoice);

      AnswerYesToAllConfirmDialogs;

      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(NewVendor.Name);

      TotalAmount := NumberOfLines * ItemQuantity * Item."Last Direct Cost";
      CheckInvoiceDiscountTypeAmount(0,TotalAmount,MiniPurchaseInvoice,TRUE,'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE InvoiceChangeSellToVendorToVendorWithoutDiscountsSetDiscountAndCustDiscPctToZero@6();
    VAR
      PurchaseHeader@1010 : Record 38;
      Item@1009 : Record 27;
      Vendor@1003 : Record 23;
      NewVendor@1000 : Record 23;
      MiniPurchaseInvoice@1008 : TestPage 1354;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      TotalAmount@1002 : Decimal;
      DiscPct@1005 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Vendor,DiscPct);
      CreateVendor(NewVendor);

      CreateInvoiceWithRandomNumberOfLines(PurchaseHeader,Item,Vendor,ItemQuantity,NumberOfLines);
      OpenPurchaseInvoice(PurchaseHeader,MiniPurchaseInvoice);

      AnswerYesToAllConfirmDialogs;

      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(NewVendor.Name);

      TotalAmount := NumberOfLines * ItemQuantity * Item."Last Direct Cost";
      CheckInvoiceDiscountTypePercentage(0,TotalAmount,MiniPurchaseInvoice,TRUE,'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE InvoiceChangingBillToVendorRecalculatesForInvoiceDiscountTypePercentage@8();
    VAR
      PurchaseHeader@1009 : Record 38;
      Item@1008 : Record 27;
      Vendor@1001 : Record 23;
      NewVendor@1010 : Record 23;
      MiniPurchaseInvoice@1007 : TestPage 1354;
      NumberOfLines@1006 : Integer;
      DiscPct@1004 : Decimal;
      ItemQuantity@1003 : Decimal;
      TotalAmount@1000 : Decimal;
      NewVendorDiscPct@1002 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Vendor,DiscPct);
      NewVendorDiscPct := LibraryRandom.RandDecInRange(1,99,2);
      CreateVendorWithDiscount(NewVendor,NewVendorDiscPct,0);

      CreateInvoiceWithRandomNumberOfLines(PurchaseHeader,Item,Vendor,ItemQuantity,NumberOfLines);
      OpenPurchaseInvoice(PurchaseHeader,MiniPurchaseInvoice);

      AnswerYesToAllConfirmDialogs;
      MiniPurchaseInvoice."Pay-to Name".SETVALUE(NewVendor.Name);

      TotalAmount := NumberOfLines * ItemQuantity * Item."Last Direct Cost";
      CheckInvoiceDiscountTypePercentage(NewVendorDiscPct,TotalAmount,MiniPurchaseInvoice,TRUE,'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE InvoiceChangingBillToVendorSetsDiscountToZeroForInvoiceDiscountTypeAmount@12();
    VAR
      PurchaseHeader@1010 : Record 38;
      Item@1009 : Record 27;
      Vendor@1003 : Record 23;
      NewVendor@1000 : Record 23;
      MiniPurchaseInvoice@1008 : TestPage 1354;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
      TotalAmount@1002 : Decimal;
      NewVendorDiscPct@1011 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Vendor,InvoiceDiscountAmount);
      NewVendorDiscPct := LibraryRandom.RandDecInRange(1,99,2);
      CreateVendorWithDiscount(NewVendor,NewVendorDiscPct,0);

      CreateInvoiceWithRandomNumberOfLines(PurchaseHeader,Item,Vendor,ItemQuantity,NumberOfLines);
      MiniPurchCalcDiscByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,PurchaseHeader);
      OpenPurchaseInvoice(PurchaseHeader,MiniPurchaseInvoice);

      AnswerYesToAllConfirmDialogs;
      MiniPurchaseInvoice."Pay-to Name".SETVALUE(NewVendor.Name);

      TotalAmount := NumberOfLines * ItemQuantity * Item."Last Direct Cost";
      CheckInvoiceDiscountTypeAmount(0,TotalAmount,MiniPurchaseInvoice,TRUE,'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE InvoiceChangingCurrencySetsDiscountToZeroForInvoiceDiscountTypeAmount@111();
    VAR
      PurchaseHeader@1010 : Record 38;
      Item@1009 : Record 27;
      Vendor@1003 : Record 23;
      PurchaseLine@1002 : Record 39;
      MiniPurchaseInvoice@1008 : TestPage 1354;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
      TotalAmount@1000 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Vendor,InvoiceDiscountAmount);

      CreateInvoiceWithRandomNumberOfLines(PurchaseHeader,Item,Vendor,ItemQuantity,NumberOfLines);
      MiniPurchCalcDiscByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,PurchaseHeader);
      OpenPurchaseInvoice(PurchaseHeader,MiniPurchaseInvoice);

      AnswerYesToConfirmDialog;
      MiniPurchaseInvoice."Currency Code".SETVALUE(GetDifferentCurrencyCode);

      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.FINDFIRST;

      TotalAmount := NumberOfLines * PurchaseLine."Line Amount";
      CheckInvoiceDiscountTypeAmount(0,TotalAmount,MiniPurchaseInvoice,TRUE,MiniPurchaseInvoice."Currency Code".VALUE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE InvoicePostPurchaseInvoiceOpensDialogAndPostedInvoice@9();
    VAR
      Item@1007 : Record 27;
      Vendor@1006 : Record 23;
      MiniPurchaseInvoice@1004 : TestPage 1354;
      PostedMiniPurchaseInvoice@1009 : TestPage 1357;
      ItemQuantity@1002 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
      TotalAmount@1000 : Decimal;
      PurchInvHeader@1500000 : Record 122;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Vendor,InvoiceDiscountAmount);

      CreateInvoceWithOneLineThroughTestPage(Vendor,Item,ItemQuantity,MiniPurchaseInvoice);
      MiniPurchaseInvoice.PurchLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      LibraryVariableStorage.Enqueue(PostMsg);
      LibraryVariableStorage.Enqueue(TRUE);

      LibraryVariableStorage.Enqueue(OpenPostedInvMsg);
      LibraryVariableStorage.Enqueue(FALSE);

      MiniPurchaseInvoice.Post.INVOKE;
      PurchInvHeader.SETRANGE("Buy-from Vendor No.",Vendor."No.");
      PurchInvHeader.FINDLAST;
      PostedMiniPurchaseInvoice.OPENVIEW;
      PostedMiniPurchaseInvoice.GOTORECORD(PurchInvHeader);
      TotalAmount := Item."Last Direct Cost" * ItemQuantity;
      CheckPostedInvoiceDiscountAmountAndTotals(InvoiceDiscountAmount,TotalAmount,PostedMiniPurchaseInvoice,TRUE,'');
    END;

    [Test]
    PROCEDURE InvoiceTotalsAreCalculatedWhenPostedInvoiceIsOpened@27();
    VAR
      PurchaseHeader@1008 : Record 38;
      Item@1007 : Record 27;
      Vendor@1006 : Record 23;
      PurchInvHeader@1010 : Record 122;
      MiniPostedPurchaseInvoice@1009 : TestPage 1357;
      NumberOfLines@1003 : Integer;
      ItemQuantity@1002 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
      TotalAmount@1000 : Decimal;
      DiscPct@1011 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Vendor,DiscPct);

      CreateInvoiceWithRandomNumberOfLines(PurchaseHeader,Item,Vendor,ItemQuantity,NumberOfLines);
      MiniPurchCalcDiscByType.ApplyDefaultInvoiceDiscount(0,PurchaseHeader);

      LibrarySmallBusiness.PostPurchaseInvoice(PurchaseHeader);

      PurchInvHeader.SETFILTER("Pre-Assigned No.",PurchaseHeader."No.");
      Assert.IsTrue(PurchInvHeader.FINDFIRST,'Posted Invoice was not found');

      MiniPostedPurchaseInvoice.OPENEDIT;
      MiniPostedPurchaseInvoice.GOTORECORD(PurchInvHeader);

      TotalAmount := NumberOfLines * ItemQuantity * Item."Last Direct Cost";
      InvoiceDiscountAmount := TotalAmount * DiscPct / 100;

      CheckPostedInvoiceDiscountAmountAndTotals(InvoiceDiscountAmount,TotalAmount,MiniPostedPurchaseInvoice,TRUE,'');
    END;

    [Test]
    PROCEDURE CreditMemoAddingLineUpdatesInvoiceDiscountWhenInvoiceDiscountTypeIsPercentage@61();
    VAR
      Item@1000 : Record 27;
      Vendor@1007 : Record 23;
      MiniPurchaseCreditMemo@1003 : TestPage 1369;
      ItemQuantity@1001 : Decimal;
      DiscPct@1005 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Vendor,DiscPct);

      CreateCreditMemoWithOneLineThroughTestPage(Vendor,Item,ItemQuantity,MiniPurchaseCreditMemo);

      CheckCreditMemoDiscountTypePercentage(DiscPct,ItemQuantity * Item."Unit Cost",MiniPurchaseCreditMemo,TRUE,'');
    END;

    [Test]
    PROCEDURE CreditMemoModifyingLineUpdatesTotalsAndInvDiscTypePct@60();
    VAR
      Item@1000 : Record 27;
      Vendor@1007 : Record 23;
      UnitOfMeasure@1002 : Record 204;
      ItemUOM@1006 : Record 5404;
      MiniPurchaseCreditMemo@1005 : TestPage 1369;
      ItemQuantity@1001 : Decimal;
      TotalAmount@1003 : Decimal;
      DiscPct@1004 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Vendor,DiscPct);

      CreateCreditMemoWithOneLineThroughTestPage(Vendor,Item,ItemQuantity,MiniPurchaseCreditMemo);

      ItemQuantity := ItemQuantity * 2;
      MiniPurchaseCreditMemo.PurchLines.Quantity.SETVALUE(ItemQuantity);
      TotalAmount := ItemQuantity * Item."Unit Cost";
      CheckCreditMemoDiscountTypePercentage(DiscPct,TotalAmount,MiniPurchaseCreditMemo,TRUE,'');

      MiniPurchaseCreditMemo.PurchLines."Direct Unit Cost".SETVALUE(2 * Item."Unit Cost");
      TotalAmount := 2 * TotalAmount;
      CheckCreditMemoDiscountTypePercentage(DiscPct,TotalAmount,MiniPurchaseCreditMemo,TRUE,'');

      UnitOfMeasure.INIT;
      UnitOfMeasure.VALIDATE(
        Code,
        LibraryUtility.GenerateRandomCode(UnitOfMeasure.FIELDNO(Code),DATABASE::"Unit of Measure"));
      UnitOfMeasure.INSERT;

      ItemUOM.INIT;
      ItemUOM.VALIDATE("Item No.",Item."No.");
      ItemUOM.VALIDATE(Code,UnitOfMeasure.Code);
      ItemUOM.VALIDATE("Qty. per Unit of Measure",5);
      ItemUOM.INSERT;
      MiniPurchaseCreditMemo.PurchLines."Unit of Measure Code".SETVALUE(ItemUOM.Code);
      TotalAmount := ItemQuantity * Item."Unit Cost" * 5;
      CheckCreditMemoDiscountTypePercentage(DiscPct,TotalAmount,MiniPurchaseCreditMemo,TRUE,'');

      TotalAmount := 2 * TotalAmount;
      MiniPurchaseCreditMemo.PurchLines."Line Amount".SETVALUE(TotalAmount);
      CheckCreditMemoDiscountTypePercentage(DiscPct,TotalAmount,MiniPurchaseCreditMemo,TRUE,'');

      MiniPurchaseCreditMemo.PurchLines."Line Discount %".SETVALUE('0');
      TotalAmount := TotalAmount / 2;
      CheckCreditMemoDiscountTypePercentage(DiscPct,TotalAmount,MiniPurchaseCreditMemo,TRUE,'');

      MiniPurchaseCreditMemo.PurchLines."No.".SETVALUE('');
      TotalAmount := 0;
      CheckCreditMemoDiscountTypePercentage(0,TotalAmount,MiniPurchaseCreditMemo,FALSE,'');
    END;

    [Test]
    PROCEDURE CreditMemoModifyingLineUpdatesTotalsAndKeepsInvDiscTypeAmount@59();
    VAR
      Vendor@1009 : Record 23;
      Item@1000 : Record 27;
      Item2@1007 : Record 27;
      MiniPurchaseCreditMemo@1004 : TestPage 1369;
      ItemQuantity@1001 : Decimal;
      TotalAmount@1003 : Decimal;
      InvoiceDiscountAmount@1006 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Vendor,InvoiceDiscountAmount);

      CreateCreditMemoWithOneLineThroughTestPage(Vendor,Item,ItemQuantity,MiniPurchaseCreditMemo);

      MiniPurchaseCreditMemo.PurchLines."Invoice Discount Amount".SETVALUE(InvoiceDiscountAmount);

      ItemQuantity := ItemQuantity * 2;
      MiniPurchaseCreditMemo.PurchLines.Quantity.SETVALUE(ItemQuantity);
      TotalAmount := ItemQuantity * Item."Unit Cost";
      CheckCreditMemoDiscountTypeAmount(InvoiceDiscountAmount,TotalAmount,MiniPurchaseCreditMemo,TRUE,'');

      MiniPurchaseCreditMemo.PurchLines."Direct Unit Cost".SETVALUE(2 * Item."Unit Cost");
      TotalAmount := 2 * TotalAmount;
      CheckCreditMemoDiscountTypeAmount(InvoiceDiscountAmount,TotalAmount,MiniPurchaseCreditMemo,TRUE,'');

      TotalAmount := 2 * TotalAmount;
      MiniPurchaseCreditMemo.PurchLines."Line Amount".SETVALUE(TotalAmount);
      CheckCreditMemoDiscountTypeAmount(InvoiceDiscountAmount,TotalAmount,MiniPurchaseCreditMemo,TRUE,'');

      MiniPurchaseCreditMemo.PurchLines."Line Discount %".SETVALUE('0');
      TotalAmount := TotalAmount / 2;
      CheckCreditMemoDiscountTypeAmount(InvoiceDiscountAmount,TotalAmount,MiniPurchaseCreditMemo,TRUE,'');

      CreateItem(Item2,Item."Unit Cost" / 2);

      TotalAmount := Item2."Unit Cost" * ItemQuantity;
      MiniPurchaseCreditMemo.PurchLines."No.".SETVALUE(Item2."No.");
      CheckCreditMemoDiscountTypeAmount(InvoiceDiscountAmount,TotalAmount,MiniPurchaseCreditMemo,TRUE,'');
    END;

    [Test]
    PROCEDURE CreditMemoInvioceDiscountTypePercentageIsSetWhenInvoiceIsOpened@58();
    VAR
      PurchaseHeader@1003 : Record 38;
      Item@1004 : Record 27;
      Vendor@1008 : Record 23;
      MiniPurchaseCreditMemo@1002 : TestPage 1369;
      NumberOfLines@1005 : Integer;
      DiscPct@1001 : Decimal;
      ItemQuantity@1000 : Decimal;
      TotalAmount@1007 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Vendor,DiscPct);

      CreateCreditMemoWithRandomNumberOfLines(PurchaseHeader,Item,Vendor,ItemQuantity,NumberOfLines);
      MiniPurchCalcDiscByType.ApplyDefaultInvoiceDiscount(0,PurchaseHeader);

      OpenPurchaseCreditMemo(PurchaseHeader,MiniPurchaseCreditMemo);

      TotalAmount := Item."Unit Cost" * ItemQuantity * NumberOfLines;
      CheckCreditMemoDiscountTypePercentage(DiscPct,TotalAmount,MiniPurchaseCreditMemo,TRUE,'');
    END;

    [Test]
    PROCEDURE CreditMemoInvioceDiscountTypeAmountIsSetWhenInvoiceIsOpened@57();
    VAR
      PurchaseHeader@1003 : Record 38;
      Item@1004 : Record 27;
      Vendor@1008 : Record 23;
      MiniPurchaseCreditMemo@1001 : TestPage 1369;
      NumberOfLines@1005 : Integer;
      ItemQuantity@1000 : Decimal;
      InvoiceDiscountAmount@1009 : Decimal;
      TotalAmount@1007 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Vendor,InvoiceDiscountAmount);

      CreateCreditMemoWithRandomNumberOfLines(PurchaseHeader,Item,Vendor,ItemQuantity,NumberOfLines);
      MiniPurchCalcDiscByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,PurchaseHeader);

      OpenPurchaseCreditMemo(PurchaseHeader,MiniPurchaseCreditMemo);

      TotalAmount := NumberOfLines * ItemQuantity * Item."Unit Cost";
      CheckCreditMemoDiscountTypeAmount(InvoiceDiscountAmount,TotalAmount,MiniPurchaseCreditMemo,TRUE,'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreditMemoChangingVATBusPostingGroupUpdatesTotalsAndDiscounts@55();
    VAR
      PurchaseHeader@1009 : Record 38;
      Item@1008 : Record 27;
      Vendor@1001 : Record 23;
      MiniPurchaseCreditMemo@1002 : TestPage 1369;
      NumberOfLines@1006 : Integer;
      DiscPct@1004 : Decimal;
      ItemQuantity@1003 : Decimal;
      TotalAmount@1000 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Vendor,DiscPct);
      CreateCreditMemoWithRandomNumberOfLines(PurchaseHeader,Item,Vendor,ItemQuantity,NumberOfLines);

      OpenPurchaseCreditMemo(PurchaseHeader,MiniPurchaseCreditMemo);

      AnswerYesToConfirmDialog;
      MiniPurchaseCreditMemo."VAT Bus. Posting Group".SETVALUE(
        LibrarySmallBusiness.FindVATBusPostingGroupZeroVAT(Item."VAT Prod. Posting Group"));
      TotalAmount := NumberOfLines * ItemQuantity * Item."Unit Cost";
      CheckCreditMemoDiscountTypePercentage(DiscPct,TotalAmount,MiniPurchaseCreditMemo,FALSE,'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreditMemoChangingBuyFromVendorRecalculatesForInvoiceDiscountTypePercentage@53();
    VAR
      PurchaseHeader@1009 : Record 38;
      Item@1008 : Record 27;
      Vendor@1001 : Record 23;
      NewVendor@1010 : Record 23;
      MiniPurchaseCreditMemo@1005 : TestPage 1369;
      NumberOfLines@1006 : Integer;
      DiscPct@1004 : Decimal;
      ItemQuantity@1003 : Decimal;
      TotalAmount@1000 : Decimal;
      NewVendDiscPct@1002 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Vendor,DiscPct);
      NewVendDiscPct := LibraryRandom.RandDecInRange(1,99,2);
      CreateVendorWithDiscount(NewVendor,NewVendDiscPct,0);

      CreateCreditMemoWithRandomNumberOfLines(PurchaseHeader,Item,Vendor,ItemQuantity,NumberOfLines);
      OpenPurchaseCreditMemo(PurchaseHeader,MiniPurchaseCreditMemo);

      AnswerYesToAllConfirmDialogs;

      MiniPurchaseCreditMemo."Buy-from Vendor Name".SETVALUE(NewVendor.Name);

      TotalAmount := NumberOfLines * ItemQuantity * Item."Unit Cost";
      CheckCreditMemoDiscountTypePercentage(NewVendDiscPct,TotalAmount,MiniPurchaseCreditMemo,TRUE,'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreditMemoChangingBuyFromVendorSetsDiscountToZeroForInvoiceDiscountTypeAmount@51();
    VAR
      PurchaseHeader@1010 : Record 38;
      Item@1009 : Record 27;
      Vendor@1003 : Record 23;
      NewVendor@1000 : Record 23;
      MiniPurchaseCreditMemo@1005 : TestPage 1369;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
      TotalAmount@1002 : Decimal;
      NewCustDiscPct@1011 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Vendor,InvoiceDiscountAmount);
      NewCustDiscPct := LibraryRandom.RandDecInRange(1,100,2);
      CreateVendorWithDiscount(NewVendor,NewCustDiscPct,0);

      CreateCreditMemoWithRandomNumberOfLines(PurchaseHeader,Item,Vendor,ItemQuantity,NumberOfLines);
      MiniPurchCalcDiscByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,PurchaseHeader);
      OpenPurchaseCreditMemo(PurchaseHeader,MiniPurchaseCreditMemo);

      AnswerYesToAllConfirmDialogs;

      MiniPurchaseCreditMemo."Buy-from Vendor Name".SETVALUE(NewVendor.Name);

      TotalAmount := NumberOfLines * ItemQuantity * Item."Unit Cost";
      CheckCreditMemoDiscountTypeAmount(0,TotalAmount,MiniPurchaseCreditMemo,TRUE,'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreditMemoChangeBuyFromVendorToVendorWithoutDiscountsSetDiscountAndVendDiscPctToZero@50();
    VAR
      PurchaseHeader@1010 : Record 38;
      Item@1009 : Record 27;
      Vendor@1003 : Record 23;
      NewVendor@1000 : Record 23;
      MiniPurchaseCreditMemo@1001 : TestPage 1369;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      TotalAmount@1002 : Decimal;
      DiscPct@1005 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Vendor,DiscPct);
      CreateVendor(NewVendor);

      CreateCreditMemoWithRandomNumberOfLines(PurchaseHeader,Item,Vendor,ItemQuantity,NumberOfLines);
      OpenPurchaseCreditMemo(PurchaseHeader,MiniPurchaseCreditMemo);

      AnswerYesToAllConfirmDialogs;

      MiniPurchaseCreditMemo."Buy-from Vendor Name".SETVALUE(NewVendor.Name);

      TotalAmount := NumberOfLines * ItemQuantity * Item."Unit Cost";
      CheckCreditMemoDiscountTypePercentage(0,TotalAmount,MiniPurchaseCreditMemo,TRUE,'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreditMemoChangingPayToVendorRecalculatesForInvoiceDiscountTypePercentage@49();
    VAR
      PurchaseHeader@1009 : Record 38;
      Item@1008 : Record 27;
      Vendor@1001 : Record 23;
      NewVendor@1010 : Record 23;
      MiniPurchaseCreditMemo@1005 : TestPage 1369;
      NumberOfLines@1006 : Integer;
      DiscPct@1004 : Decimal;
      ItemQuantity@1003 : Decimal;
      TotalAmount@1000 : Decimal;
      NewVendorDiscPct@1002 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypePct(Item,ItemQuantity,Vendor,DiscPct);
      NewVendorDiscPct := LibraryRandom.RandDecInRange(1,99,2);
      CreateVendorWithDiscount(NewVendor,NewVendorDiscPct,0);

      CreateCreditMemoWithRandomNumberOfLines(PurchaseHeader,Item,Vendor,ItemQuantity,NumberOfLines);
      OpenPurchaseCreditMemo(PurchaseHeader,MiniPurchaseCreditMemo);

      AnswerYesToAllConfirmDialogs;
      MiniPurchaseCreditMemo."Pay-to Vendor No.".SETVALUE(NewVendor."No.");

      TotalAmount := NumberOfLines * ItemQuantity * Item."Unit Cost";
      CheckCreditMemoDiscountTypePercentage(NewVendorDiscPct,TotalAmount,MiniPurchaseCreditMemo,TRUE,'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreditMemoChangingPayToVendorSetsDiscountToZeroForInvoiceDiscountTypeAmount@48();
    VAR
      PurchaseHeader@1010 : Record 38;
      Item@1009 : Record 27;
      Vendor@1003 : Record 23;
      NewVendor@1000 : Record 23;
      MiniPurchaseCreditMemo@1005 : TestPage 1369;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
      TotalAmount@1002 : Decimal;
      NewVendorDiscPct@1011 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Vendor,InvoiceDiscountAmount);
      NewVendorDiscPct := LibraryRandom.RandDecInRange(1,99,2);
      CreateVendorWithDiscount(NewVendor,NewVendorDiscPct,0);

      CreateCreditMemoWithRandomNumberOfLines(PurchaseHeader,Item,Vendor,ItemQuantity,NumberOfLines);
      MiniPurchCalcDiscByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,PurchaseHeader);
      OpenPurchaseCreditMemo(PurchaseHeader,MiniPurchaseCreditMemo);

      AnswerYesToAllConfirmDialogs;
      MiniPurchaseCreditMemo."Pay-to Vendor No.".SETVALUE(NewVendor."No.");

      TotalAmount := NumberOfLines * ItemQuantity * Item."Unit Cost";
      CheckCreditMemoDiscountTypeAmount(0,TotalAmount,MiniPurchaseCreditMemo,TRUE,'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreditMemoChangingCurrencySetsDiscountToZeroForInvoiceDiscountTypeAmount@41();
    VAR
      PurchaseHeader@1010 : Record 38;
      Item@1009 : Record 27;
      Vendor@1003 : Record 23;
      PurchaseLine@1002 : Record 39;
      MiniPurchaseCreditMemo@1005 : TestPage 1369;
      NumberOfLines@1007 : Integer;
      ItemQuantity@1004 : Decimal;
      InvoiceDiscountAmount@1001 : Decimal;
      TotalAmount@1000 : Decimal;
    BEGIN
      Initialize;
      SetupDataForDiscountTypeAmt(Item,ItemQuantity,Vendor,InvoiceDiscountAmount);

      CreateCreditMemoWithRandomNumberOfLines(PurchaseHeader,Item,Vendor,ItemQuantity,NumberOfLines);
      MiniPurchCalcDiscByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,PurchaseHeader);
      OpenPurchaseCreditMemo(PurchaseHeader,MiniPurchaseCreditMemo);

      AnswerYesToConfirmDialog;
      MiniPurchaseCreditMemo."Currency Code".SETVALUE(GetDifferentCurrencyCode);

      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.FINDFIRST;

      TotalAmount := NumberOfLines * PurchaseLine."Line Amount";
      CheckCreditMemoDiscountTypeAmount(0,TotalAmount,MiniPurchaseCreditMemo,TRUE,MiniPurchaseCreditMemo."Currency Code".VALUE);
    END;

    LOCAL PROCEDURE CreateVendorWithDiscount@19(VAR Vendor@1003 : Record 23;DiscPct@1002 : Decimal;MinimumAmount@1001 : Decimal);
    BEGIN
      CreateVendor(Vendor);

      LibrarySmallBusiness.SetInvoiceDiscountToVendor(Vendor,DiscPct,MinimumAmount,'');
    END;

    [Normal]
    LOCAL PROCEDURE CreateVendor@7(VAR Vendor@1000 : Record 23);
    BEGIN
      LibrarySmallBusiness.CreateVendor(Vendor);
      Vendor.Name := Vendor."No.";
      Vendor.MODIFY;
    END;

    LOCAL PROCEDURE CreateItem@44(VAR Item@1000 : Record 27;UnitCost@1001 : Decimal);
    BEGIN
      LibrarySmallBusiness.CreateItem(Item);
      Item."Unit Cost" := UnitCost;
      Item."Last Direct Cost" := UnitCost;
      Item.MODIFY;
    END;

    LOCAL PROCEDURE CheckExistOrAddCurrencyExchageRate@2(CurrencyCode@1000 : Code[10]);
    VAR
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.SETFILTER("Starting Date",'<=%1',WORKDATE);
      IF NOT CurrencyExchangeRate.FINDFIRST THEN
        LibrarySmallBusiness.CreateCurrencyExchangeRate(CurrencyExchangeRate,CurrencyCode,WORKDATE);
    END;

    LOCAL PROCEDURE CheckInvoiceDiscountTypePercentage@3(DiscPct@1005 : Decimal;TotalAmountWithoutDiscount@1001 : Decimal;MiniPurchaseInvoice@1003 : TestPage 1354;VATApplied@1006 : Boolean;CurrencyCode@1002 : Code[10]);
    VAR
      DiscAmt@1000 : Decimal;
      TotalAmount@1004 : Decimal;
    BEGIN
      RoundAmount(TotalAmountWithoutDiscount,CurrencyCode);

      DiscAmt := TotalAmountWithoutDiscount * DiscPct / 100;
      RoundAmount(DiscAmt,CurrencyCode);

      TotalAmount := TotalAmountWithoutDiscount - DiscAmt;

      Assert.AreEqual(
      DiscPct,MiniPurchaseInvoice.PurchLines."Cust. Invoice Disc. Pct.".ASDECIMAL,
      'Vendor Discount Percentage was not set to correct value');
      Assert.AreEqual(
      DiscAmt,MiniPurchaseInvoice.PurchLines."Invoice Discount Amount".ASDECIMAL,
      'Vendor Invoice Discount Amount was not set to correct value');
    END;

    LOCAL PROCEDURE CheckInvoiceDiscountTypeAmount@15(InvoiceDiscAmt@1005 : Decimal;TotalAmountWithoutDiscount@1001 : Decimal;MiniPurchaseInvoice@1003 : TestPage 1354;VATApplied@1006 : Boolean;CurrencyCode@1000 : Code[10]);
    VAR
      TotalAmount@1004 : Decimal;
    BEGIN
      RoundAmount(TotalAmountWithoutDiscount,CurrencyCode);
      RoundAmount(InvoiceDiscAmt,CurrencyCode);

      Assert.AreEqual(
        0,MiniPurchaseInvoice.PurchLines."Cust. Invoice Disc. Pct.".ASDECIMAL,
        'Vendor Discount Percentage should be zero for Invoice Discount Type Amount');
      Assert.AreEqual(
        InvoiceDiscAmt,MiniPurchaseInvoice.PurchLines."Invoice Discount Amount".ASDECIMAL,
        'Invoice Discount Amount was not set to correct value');

      TotalAmount := TotalAmountWithoutDiscount - InvoiceDiscAmt;
    END;

    LOCAL PROCEDURE CheckCreditMemoDiscountTypePercentage@68(DiscPct@1005 : Decimal;TotalAmountWithoutDiscount@1001 : Decimal;MiniPurchaseCreditMemo@1007 : TestPage 1369;VATApplied@1006 : Boolean;CurrencyCode@1002 : Code[10]);
    VAR
      DiscAmt@1000 : Decimal;
      TotalAmount@1004 : Decimal;
    BEGIN
      RoundAmount(TotalAmountWithoutDiscount,CurrencyCode);

      DiscAmt := TotalAmountWithoutDiscount * DiscPct / 100;
      RoundAmount(DiscAmt,CurrencyCode);

      TotalAmount := TotalAmountWithoutDiscount - DiscAmt;

      Assert.AreEqual(
        DiscPct,MiniPurchaseCreditMemo.PurchLines."Vend. Invoice Disc. Pct.".ASDECIMAL,
        'Vendor Discount Percentage was not set to correct value');
      Assert.AreEqual(
        DiscAmt,MiniPurchaseCreditMemo.PurchLines."Invoice Discount Amount".ASDECIMAL,
        'Vendor Invoice Discount Amount was not set to correct value');
    END;

    LOCAL PROCEDURE CheckCreditMemoDiscountTypeAmount@65(InvoiceDiscAmt@1005 : Decimal;TotalAmountWithoutDiscount@1001 : Decimal;MiniPurchaseCreditMemo@1002 : TestPage 1369;VATApplied@1006 : Boolean;CurrencyCode@1000 : Code[10]);
    VAR
      TotalAmount@1004 : Decimal;
    BEGIN
      RoundAmount(TotalAmountWithoutDiscount,CurrencyCode);
      RoundAmount(InvoiceDiscAmt,CurrencyCode);

      Assert.AreEqual(
        0,MiniPurchaseCreditMemo.PurchLines."Vend. Invoice Disc. Pct.".ASDECIMAL,
        'Vendor Discount Percentage should be zero for Invoice Discount Type Amount');
      Assert.AreEqual(
        InvoiceDiscAmt,MiniPurchaseCreditMemo.PurchLines."Invoice Discount Amount".ASDECIMAL,
        'Invoice Discount Amount was not set to correct value');

      TotalAmount := TotalAmountWithoutDiscount - InvoiceDiscAmt;
    END;

    LOCAL PROCEDURE CheckPostedInvoiceDiscountAmountAndTotals@16(InvoiceDiscAmt@1005 : Decimal;TotalAmountWithoutDiscount@1001 : Decimal;MiniPostedPurchaseInvoice@1003 : TestPage 1357;VATApplied@1006 : Boolean;CurrencyCode@1000 : Code[10]);
    VAR
      TotalAmount@1004 : Decimal;
    BEGIN
      RoundAmount(TotalAmountWithoutDiscount,CurrencyCode);
      RoundAmount(InvoiceDiscAmt,CurrencyCode);

      Assert.AreEqual(
        InvoiceDiscAmt,MiniPostedPurchaseInvoice.PurchInvLines."Invoice Discount Amount".ASDECIMAL,
        'Invoice Discount Amount was not set to correct value');

      TotalAmount := TotalAmountWithoutDiscount - InvoiceDiscAmt;
    END;

    LOCAL PROCEDURE GetDifferentCurrencyCode@11() : Code[20];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      Currency.INIT;
      Currency.SETFILTER(Code,'<>%1',LibraryERM.GetLCYCode);
      Currency.FINDFIRST;
      CheckExistOrAddCurrencyExchageRate(Currency.Code);

      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateInvoceWithOneLineThroughTestPage@23(Vendor@1000 : Record 23;Item@1003 : Record 27;ItemQuantity@1004 : Integer;VAR MiniPurchaseInvoice@1001 : TestPage 1354);
    BEGIN
      MiniPurchaseInvoice.OPENNEW;
      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(Vendor.Name);

      MiniPurchaseInvoice.PurchLines.FIRST;
      MiniPurchaseInvoice.PurchLines."No.".SETVALUE(Item."No.");
      MiniPurchaseInvoice.PurchLines.Quantity.SETVALUE(ItemQuantity);
    END;

    LOCAL PROCEDURE CreateCreditMemoWithOneLineThroughTestPage@63(Vendor@1000 : Record 23;Item@1003 : Record 27;ItemQuantity@1004 : Integer;VAR MiniPurchaseCreditMemo@1001 : TestPage 1369);
    BEGIN
      MiniPurchaseCreditMemo.OPENNEW;
      MiniPurchaseCreditMemo."Buy-from Vendor Name".SETVALUE(Vendor.Name);

      MiniPurchaseCreditMemo.PurchLines.FIRST;
      MiniPurchaseCreditMemo.PurchLines."No.".SETVALUE(Item."No.");
      MiniPurchaseCreditMemo.PurchLines.Quantity.SETVALUE(ItemQuantity);
    END;

    LOCAL PROCEDURE OpenPurchaseInvoice@52(PurchaseHeader@1000 : Record 38;VAR MiniPurchaseInvoice@1001 : TestPage 1354);
    BEGIN
      MiniPurchaseInvoice.OPENEDIT;
      MiniPurchaseInvoice.GOTORECORD(PurchaseHeader);
    END;

    LOCAL PROCEDURE OpenPurchaseCreditMemo@70(PurchaseHeader@1000 : Record 38;VAR MiniPurchaseCreditMemo@1002 : TestPage 1369);
    BEGIN
      MiniPurchaseCreditMemo.OPENEDIT;
      MiniPurchaseCreditMemo.GOTORECORD(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateInvoiceWithRandomNumberOfLines@85(VAR PurchaseHeader@1000 : Record 38;VAR Item@1002 : Record 27;VAR Vendor@1003 : Record 23;ItemQuantity@1005 : Decimal;VAR NumberOfLines@1007 : Integer);
    VAR
      PurchaseLine@1006 : Record 39;
      i@1008 : Integer;
    BEGIN
      NumberOfLines := LibraryRandom.RandIntInRange(1,30);

      LibrarySmallBusiness.CreatePurchaseInvoiceHeader(PurchaseHeader,Vendor);

      FOR i := 1 TO NumberOfLines DO
        LibrarySmallBusiness.CreatePurchaseLine(PurchaseLine,PurchaseHeader,Item,ItemQuantity);
    END;

    LOCAL PROCEDURE CreateCreditMemoWithRandomNumberOfLines@69(VAR PurchaseHeader@1000 : Record 38;VAR Item@1002 : Record 27;VAR Vendor@1003 : Record 23;ItemQuantity@1005 : Decimal;VAR NumberOfLines@1007 : Integer);
    VAR
      PurchaseLine@1006 : Record 39;
      I@1008 : Integer;
    BEGIN
      NumberOfLines := LibraryRandom.RandIntInRange(1,30);

      LibrarySmallBusiness.CreatePurchaseCrMemoHeader(PurchaseHeader,Vendor);

      FOR I := 1 TO NumberOfLines DO
        LibrarySmallBusiness.CreatePurchaseLine(PurchaseLine,PurchaseHeader,Item,ItemQuantity);
    END;

    LOCAL PROCEDURE RoundAmount@31(VAR Amount@1000 : Decimal;CurrencyCode@1001 : Code[10]);
    VAR
      Currency@1002 : Record 4;
    BEGIN
      IF CurrencyCode = '' THEN BEGIN
        Currency.SETFILTER(Code,CurrencyCode);
        Currency.FINDFIRST;
        Amount := ROUND(Amount,Currency."Amount Rounding Precision");
      END ELSE
        Amount := ROUND(Amount,LibraryERM.GetAmountRoundingPrecision);
    END;

    LOCAL PROCEDURE SetupDataForDiscountTypePct@54(VAR Item@1000 : Record 27;VAR ItemQuantity@1007 : Decimal;VAR Vendor@1002 : Record 23;VAR DiscPct@1004 : Decimal);
    VAR
      MinAmt@1005 : Decimal;
      ItemUnitCost@1001 : Decimal;
    BEGIN
      ItemUnitCost := LibraryRandom.RandDecInDecimalRange(100,10000,2);
      ItemQuantity := LibraryRandom.RandIntInRange(1,100);
      MinAmt := LibraryRandom.RandDecInDecimalRange(ItemUnitCost,ItemUnitCost * 2,2);
      DiscPct := LibraryRandom.RandDecInDecimalRange(1,100,2);

      CreateItem(Item,ItemUnitCost);
      CreateVendorWithDiscount(Vendor,DiscPct,MinAmt);
    END;

    LOCAL PROCEDURE SetupDataForDiscountTypeAmt@64(VAR Item@1000 : Record 27;VAR ItemQuantity@1007 : Decimal;VAR Vendor@1002 : Record 23;VAR InvoiceDiscountAmount@1004 : Decimal);
    VAR
      DiscPct@1003 : Decimal;
    BEGIN
      SetupDataForDiscountTypePct(Item,ItemQuantity,Vendor,DiscPct);
      InvoiceDiscountAmount := LibraryRandom.RandDecInRange(1,ROUND(Item."Unit Cost" * ItemQuantity,1,'<'),2);
    END;

    LOCAL PROCEDURE AnswerYesToConfirmDialog@34();
    BEGIN
      AnswerYesToConfirmDialogs(1);
    END;

    LOCAL PROCEDURE AnswerYesToConfirmDialogs@26(ExpectedNumberOfDialogs@1001 : Integer);
    VAR
      I@1000 : Integer;
    BEGIN
      FOR I := 1 TO ExpectedNumberOfDialogs DO BEGIN
        LibraryVariableStorage.Enqueue(ChangeConfirmMsg);
        LibraryVariableStorage.Enqueue(TRUE);
      END;
    END;

    LOCAL PROCEDURE AnswerYesToAllConfirmDialogs@71();
    BEGIN
      AnswerYesToConfirmDialogs(10);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@56(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
      Answer@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);
      LibraryVariableStorage.Dequeue(Answer);
      Assert.IsTrue(STRPOS(Question,ExpectedMessage) > 0,Question);
      Reply := Answer;
    END;

    BEGIN
    {
      // [FEATURE] [Document Totals] [SMB] [Purchase]
      Unable to run on IN
    }
    END.
  }
}

