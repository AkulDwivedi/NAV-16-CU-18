OBJECT Codeunit 134150 ERM Intrastat Journal
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryInventory@1004 : Codeunit 132201;
      LibraryERM@1002 : Codeunit 131300;
      LibraryPurchase@1007 : Codeunit 130512;
      LibrarySales@1008 : Codeunit 130509;
      LibraryFiscalYear@1003 : Codeunit 131302;
      LibraryUtility@1013 : Codeunit 131000;
      LibraryPatterns@1017 : Codeunit 132212;
      LibraryVariableStorage@1015 : Codeunit 131004;
      LibraryRandom@1001 : Codeunit 130440;
      IsInitialized@1000 : Boolean;
      ValidationErr@1006 : TextConst '@@@=Do not translate;ENU=%1 must be %2 in %3.';
      LineNotExistErr@1009 : TextConst 'ENU=Intrastat Journal Lines incorrectly created.';
      LineCountErr@1016 : TextConst '@@@=Do not translate;ENU=The number of %1 entries is incorrect.';
      InternetURLTxt@1010 : TextConst 'ENU=www.microsoft.com';
      InvalidURLTxt@1011 : TextConst 'ENU=URL must be prefix with http.';
      PackageTrackingNoErr@1012 : TextConst 'ENU=Package Tracking No does not exist.';
      HttpTxt@1014 : TextConst 'ENU=http://';

    [Test]
    PROCEDURE ItemLedgerEntryForPurchase@4();
    VAR
      ItemLedgerEntry@1003 : Record 32;
      PurchaseLine@1001 : Record 39;
      DocumentNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO] Check Item Ledger Entry after posting Purchase Order.

      // [GIVEN] Posted Purchase Order
      Initialize;
      DocumentNo := CreateAndPostPurchaseOrder(PurchaseLine,WORKDATE);

      // [THEN] Verify Item Ledger Entry
      VerifyItemLedgerEntry(ItemLedgerEntry."Document Type"::"Purchase Receipt",DocumentNo,GetCountryRegionCode,PurchaseLine.Quantity);
    END;

    [Test]
    PROCEDURE IntrastatLineForPurchase@43();
    VAR
      PurchaseLine@1001 : Record 39;
      IntrastatJnlLine@1000 : Record 263;
      DocumentNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO] Check Intrastat Journal Line for posted Purchase Order.

      // [GIVEN] Posted Purchase Order
      Initialize;
      DocumentNo := CreateAndPostPurchaseOrder(PurchaseLine,WORKDATE);

      // [WHEN] Get Intrastat Journal Line for Purchase Order
      // [THEN] Verify Intrastat Journal Line
      CreateAndVerifyIntrastatLine(DocumentNo,PurchaseLine."No.",PurchaseLine.Quantity,IntrastatJnlLine.Type::Receipt);
    END;

    [Test]
    PROCEDURE NoIntrastatLineForPurchase@39();
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO] Check no Intrastat Journal Line exist after Deleting them for Purchase Order.

      // [GIVEN] Posted Purchase Order
      Initialize;
      CreateAndPostPurchaseOrder(PurchaseLine,WORKDATE);

      // [WHEN] Create Intrastat Journal Lines, Delete them
      // [THEN] Verify that no Intrastat Journal Lines exist for Posted Purchase Order.
      DeleteAndVerifyNoIntrastatLine;
    END;

    [Test]
    [HandlerFunctions(UndoDocumentConfirmHandler)]
    PROCEDURE UndoPurchaseReceipt@1();
    VAR
      PurchaseLine@1001 : Record 39;
      PurchRcptLine@1003 : Record 121;
      DocumentNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO] Check Quantity on Purchase Receipt Line after doing Undo Purchase Order.

      // [GIVEN] Posted Purchase Order
      Initialize;
      DocumentNo := CreateAndPostPurchaseOrder(PurchaseLine,WORKDATE);

      // [WHEN] Undo Purchase Receipt Line
      UndoPurchaseReceiptLine(DocumentNo,PurchaseLine."No.");

      // [THEN] Verify Undone Quantity on Purchase Receipt Line.
      PurchRcptLine.SETRANGE("Document No.",DocumentNo);
      PurchRcptLine.SETFILTER("Appl.-to Item Entry",'<>0');
      PurchRcptLine.FINDFIRST;
      Assert.AreEqual(
        -PurchaseLine.Quantity,PurchRcptLine.Quantity,STRSUBSTNO(ValidationErr,
          PurchRcptLine.FIELDCAPTION(Quantity),-PurchaseLine.Quantity,PurchRcptLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(UndoDocumentConfirmHandler)]
    PROCEDURE IntrastatLineAfterUndoPurchase@36();
    VAR
      PurchaseLine@1001 : Record 39;
      DocumentNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO] Check that no Intrastat Line exist for the Item for which Undo Purchase Receipt has done.

      // [GIVEN] Create and Post Purchase Order
      Initialize;
      DocumentNo := CreateAndPostPurchaseOrder(PurchaseLine,WORKDATE);

      // [WHEN] Undo Purchase Receipt Line
      UndoPurchaseReceiptLine(DocumentNo,PurchaseLine."No.");

      // [WHEN] Create Intrastat Journal Template, Batch and Get Entries for Intrastat Journal Line
      // [THEN] Verify no entry exists for posted Item.
      GetEntriesAndVerifyNoItemLine(DocumentNo,PurchaseLine."No.");
    END;

    [Test]
    PROCEDURE ItemLedgerEntryForSales@61();
    VAR
      ItemLedgerEntry@1003 : Record 32;
      SalesLine@1001 : Record 37;
      DocumentNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO] Check Item Ledger Entry after posting Sales Order.

      // [GIVEN] Create and Post Sales Order
      Initialize;
      DocumentNo := CreateAndPostSalesOrder(SalesLine,WORKDATE);

      // [THEN] Verify Item Ledger Entry
      VerifyItemLedgerEntry(ItemLedgerEntry."Document Type"::"Sales Shipment",DocumentNo,GetCountryRegionCode,-SalesLine.Quantity);
    END;

    [Test]
    PROCEDURE IntrastatLineForSales@60();
    VAR
      SalesLine@1001 : Record 37;
      IntrastatJnlLine@1000 : Record 263;
      DocumentNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO] Check Intrastat Journal Line for posted Sales Order.

      // [GIVEN] Create and Post Sales Order
      Initialize;
      DocumentNo := CreateAndPostSalesOrder(SalesLine,WORKDATE);

      // [WHEN] Get Intrastat Journal Lines for Sales Order
      // [THEN] Verify Intrastat Journal Line
      CreateAndVerifyIntrastatLine(DocumentNo,SalesLine."No.",SalesLine.Quantity,IntrastatJnlLine.Type::Shipment);
    END;

    [Test]
    PROCEDURE NoIntrastatLineForSales@59();
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO] Check no Intrastat Journal Line exist after Deleting them for Sales Shipment.

      // [GIVEN] Take Starting Date as WORKDATE and Random Ending Date based on WORKDATE.
      Initialize;
      CreateAndPostSalesOrder(SalesLine,WORKDATE);

      // [WHEN] Intrastat Journal Lines, Delete them
      // [THEN] Verify that no lines exist for Posted Sales Order.
      DeleteAndVerifyNoIntrastatLine;
    END;

    [Test]
    [HandlerFunctions(UndoDocumentConfirmHandler)]
    PROCEDURE UndoSalesShipment@58();
    VAR
      SalesLine@1001 : Record 37;
      SalesShipmentLine@1003 : Record 111;
      DocumentNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO] Check Quantity on Sales Shipment Line after doing Undo Sales Shipment.

      // [GIVEN] Posted Sales Order
      Initialize;
      DocumentNo := CreateAndPostSalesOrder(SalesLine,WORKDATE);

      // [WHEN] Undo Sales Shipment Line
      UndoSalesShipmentLine(DocumentNo,SalesLine."No.");

      // [THEN] Verify Undone Quantity on Sales Shipment Line.
      SalesShipmentLine.SETRANGE("Document No.",DocumentNo);
      SalesShipmentLine.SETFILTER("Appl.-from Item Entry",'<>0');
      SalesShipmentLine.FINDFIRST;
      Assert.AreEqual(
        -SalesLine.Quantity,SalesShipmentLine.Quantity,
        STRSUBSTNO(ValidationErr,SalesShipmentLine.FIELDCAPTION(Quantity),-SalesLine.Quantity,SalesShipmentLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(UndoDocumentConfirmHandler)]
    PROCEDURE IntrastatLineAfterUndoSales@57();
    VAR
      SalesLine@1003 : Record 37;
      DocumentNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO] Check that no Intrastat Line exist for the Item for which Undo Sales Shipment has done.

      // [GIVEN] Create and Post Sales Order and undo Sales Shipment Line.
      Initialize;
      DocumentNo := CreateAndPostSalesOrder(SalesLine,WORKDATE);
      UndoSalesShipmentLine(DocumentNo,SalesLine."No.");

      // [WHEN] Create Intrastat Journal Template, Batch and Get Entries for Intrastat Journal Line
      // [THEN] Verify no entry exists for posted Item.
      GetEntriesAndVerifyNoItemLine(DocumentNo,SalesLine."No.");
    END;

    [Test]
    [HandlerFunctions(IntrastatJnlTemplateListPageHandler,GetItemLedgerEntriesReportHandler)]
    PROCEDURE IntrastatJournalWithPurchaseOrder@3();
    VAR
      PurchaseLine@1001 : Record 39;
      IntrastatJnlBatch@1002 : Record 262;
      SecondIntrastatJnlBatch@1003 : Record 262;
      IntrastatJournal@1000 : TestPage 311;
      NewPostingDate@1006 : Date;
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO] Check Intrastat Journal Entries after Posting Purchase Order and Get Entries with New Posting Date.

      // [GIVEN] Create Purchase Order with New Posting Date and Create New Batch and Template for Intrastat Journal with difference with 1 Year.
      Initialize;
      NewPostingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE);
      CreateAndPostPurchaseOrder(PurchaseLine,NewPostingDate);

      // [GIVEN] Two Intrastat Journal Batches for the same period
      LibraryERM.CreateIntrastatJnlTemplateAndBatch(IntrastatJnlBatch,NewPostingDate);
      LibraryERM.CreateIntrastatJnlTemplateAndBatch(SecondIntrastatJnlBatch,NewPostingDate);

      COMMIT;  // Commit is required to commit the posted entries.
      LibraryVariableStorage.Enqueue(IntrastatJnlBatch."Journal Template Name");
      LibraryVariableStorage.Enqueue(TRUE); // Show Item Charge entries

      // [WHEN] Get Entries from Intrastat Journal pages for two Batches with the same period with "Show item charge entries" options set to TRUE
      // use created "Journal Template Name" in IntrastatJnlTemplateListPageHandler
      IntrastatJournal.OPENEDIT;
      IntrastatJournal.GetEntries.INVOKE;

      // [THEN] Verify that Entry values on Intrastat Journal Page match Purchase Line values
      IntrastatJournal.FILTER.SETFILTER("Item No.",PurchaseLine."No.");
      IntrastatJournal.Type.ASSERTEQUALS(FORMAT(IntrastatJournal.Type.GETOPTION(1))); // Option 1 for Receipt Value.
      IntrastatJournal.Quantity.ASSERTEQUALS(PurchaseLine.Quantity);
      IntrastatJournal.Date.ASSERTEQUALS(NewPostingDate);

      // [THEN] No Entries suggested in a second Intrastat Journal
      // added verification for TFS 375494 scenario
      LibraryVariableStorage.Enqueue(SecondIntrastatJnlBatch."Journal Template Name");
      LibraryVariableStorage.Enqueue(TRUE); // Show Item Charge entries
      OpenAndVerifyIntrastatJournalLine(SecondIntrastatJnlBatch.Name,PurchaseLine."No.",FALSE);

      IntrastatJnlBatch.DELETE(TRUE);
      SecondIntrastatJnlBatch.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(IntrastatJnlTemplateListPageHandler,GetItemLedgerEntriesReportHandler)]
    PROCEDURE IntrastatJournalWithItemChargeAssignmentAfterPurchaseCreditMemo@35();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1001 : Record 39;
      ChargePurchaseLine@1007 : Record 39;
      IntrastatJnlBatch@1002 : Record 262;
      ChargeIntrastatJnlBatch@1004 : Record 262;
      IntrastatJournal@1005 : TestPage 311;
      NewPostingDate@1006 : Date;
      DocumentNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO] Check Intrastat Journal Entries after Posting Purchase Order, Purchase Credit Memo with Item Charge Assignment and Get Entries with New Posting Date.
      Initialize;

      // [GIVEN] Create and Post Purchase Order on January with Amount = "X"
      NewPostingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE);
      DocumentNo := CreateAndPostPurchaseOrder(PurchaseLine,NewPostingDate);

      // [GIVEN] Create and Post Purchase Credit Memo with Item Charge Assignment on February.
      CreatePurchaseHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",
        CALCDATE('<1M>',NewPostingDate),CreateVendor(GetCountryRegionCode));
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      CreatePurchaseLine(
        PurchaseHeader,ChargePurchaseLine,ChargePurchaseLine.Type::"Charge (Item)",LibraryInventory.CreateItemChargeNo);
      CreateItemChargeAssignmentForPurchaseCreditMemo(ChargePurchaseLine,DocumentNo);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] Two Intrastat Journal Batches for January and February with "Show item charge entries" options set to TRUE
      LibraryERM.CreateIntrastatJnlTemplateAndBatch(IntrastatJnlBatch,NewPostingDate);
      LibraryERM.CreateIntrastatJnlTemplateAndBatch(ChargeIntrastatJnlBatch,PurchaseHeader."Posting Date");
      COMMIT;
      LibraryVariableStorage.Enqueue(IntrastatJnlBatch."Journal Template Name");
      LibraryVariableStorage.Enqueue(TRUE); // Show Item Charge entries

      // [WHEN] User runs Get Entries in Intrastat Journal for January and February
      // use created "Journal Template Name" in IntrastatJnlTemplateListPageHandler
      InvokeGetEntriesOnIntrastatJnl(IntrastatJournal,IntrastatJnlBatch.Name);

      // [THEN] Item Charge Entry suggested for February, "Intrastat Journal Line" has Amount = "X" for January
      LibraryVariableStorage.Enqueue(ChargeIntrastatJnlBatch."Journal Template Name");
      LibraryVariableStorage.Enqueue(TRUE); // Show Item Charge entries
      LibraryVariableStorage.Enqueue(IntrastatJnlBatch.Name);
      OpenAndVerifyIntrastatJournalLine(ChargeIntrastatJnlBatch.Name,PurchaseLine."No.",TRUE);
      IntrastatJournal.FILTER.SETFILTER("Item No.",PurchaseLine."No.");
      IntrastatJournal.Amount.ASSERTEQUALS(PurchaseLine.Amount);

      IntrastatJnlBatch.DELETE(TRUE);
      ChargeIntrastatJnlBatch.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(IntrastatJnlTemplateListPageHandler,GetItemLedgerEntriesReportHandler)]
    PROCEDURE IntrastatJournalWithSalesOrder@33();
    VAR
      SalesLine@1001 : Record 37;
      IntrastatJnlBatch@1002 : Record 262;
      IntrastatJournal@1000 : TestPage 311;
      NewPostingDate@1006 : Date;
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO] Check Intrastat Journal Entries after Posting Sales Order and Get Entries with New Posting Date.

      // [GIVEN] Create Sales Order with New Posting Date and Create New Batch and Template for Intrastat Journal.
      Initialize;
      NewPostingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE);
      CreateAndPostSalesOrder(SalesLine,NewPostingDate);
      LibraryERM.CreateIntrastatJnlTemplateAndBatch(IntrastatJnlBatch,NewPostingDate);
      COMMIT;  // Commit is required to commit the posted entries.
      LibraryVariableStorage.Enqueue(IntrastatJnlBatch."Journal Template Name");

      // [WHEN] Get Entries from Intrastat Journal page with "Show item charge entries" options set to TRUE.
      LibraryVariableStorage.Enqueue(TRUE); // Show Item Charge entries
      IntrastatJournal.OPENEDIT;
      IntrastatJournal.GetEntries.INVOKE;

      // [THEN] Verify Entries on Intrastat Journal Page.
      IntrastatJournal.FILTER.SETFILTER("Item No.",SalesLine."No.");
      IntrastatJournal.Type.ASSERTEQUALS(FORMAT(IntrastatJournal.Type.GETOPTION(2))); // Option 2 for Shipment Value.
      IntrastatJournal.Quantity.ASSERTEQUALS(SalesLine.Quantity);
      IntrastatJournal.Date.ASSERTEQUALS(NewPostingDate);

      IntrastatJnlBatch.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(IntrastatJnlTemplateListPageHandler,GetItemLedgerEntriesReportHandler)]
    PROCEDURE IntrastatJournalWithItemChargeAssignmentAfterSalesCreditMemo@15();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1001 : Record 37;
      IntrastatJnlBatch@1002 : Record 262;
      NewPostingDate@1006 : Date;
      DocumentNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Sales] [Item Charge]
      // [SCENARIO] Check Intrastat Journal Entries after Posting Sales Order, Sales Credit Memo with Item Charge Assignment and Get Entries with New Posting Date.

      // [GIVEN] Create and Post Sales Order with New Posting Date with different 1 Year.
      Initialize;
      NewPostingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE);
      DocumentNo := CreateAndPostSalesOrder(SalesLine,NewPostingDate);

      // [GIVEN] Create and Sales Credit Memo with Item Charge Assign Ment with different Posting Date. 1M is required for Sales Credit Memo.
      CreateSalesDocument(
        SalesLine,CALCDATE('<1M>',NewPostingDate),SalesLine."Document Type"::"Credit Memo",SalesLine.Type::"Charge (Item)",
        LibraryInventory.CreateItemChargeNo,1);
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      CreateItemChargeAssignmentForSalesCreditMemo(SalesLine,DocumentNo);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      LibraryERM.CreateIntrastatJnlTemplateAndBatch(IntrastatJnlBatch,SalesHeader."Posting Date");
      LibraryVariableStorage.Enqueue(IntrastatJnlBatch."Journal Template Name");

      // [WHEN] Open Intrastat Journal Line Page and Get Entries through IntrastatJnlTemplateListPageHandler and GetItemLedgerEntriesReportHandler with "Show item charge entries" options set to TRUE
      // [THEN] Verify Intrastat Journal Entry
      LibraryVariableStorage.Enqueue(TRUE); // Show Item Charge entries
      OpenAndVerifyIntrastatJournalLine(IntrastatJnlBatch.Name,SalesLine."No.",FALSE);

      IntrastatJnlBatch.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE TotalWeightOnIntrastatJournalLine@13();
    VAR
      IntrastatJnlLine@1001 : Record 263;
      NetWeight@1002 : Decimal;
    BEGIN
      // [SCENARIO] Check Intrastat Journal Total Weight after entering Quantity on Intrastat Journal Line.

      // [GIVEN] Intrastat Journal Line
      Initialize;
      CreateIntrastatJnlLine(IntrastatJnlLine);

      // [WHEN] Create and Update Quantity on Intrastat Journal Line.
      NetWeight := UseItemNonZeroNetWeight(IntrastatJnlLine);

      // [THEN] Verify Total Weight correctly calculated on Intrastat Journal Line.
      IntrastatJnlLine.TESTFIELD("Total Weight",IntrastatJnlLine.Quantity * NetWeight);
    END;

    [Test]
    PROCEDURE TestPackageNoIsIncludedInInternetAddressLink@21();
    VAR
      SalesShipmentHeader@1000 : Record 110;
    BEGIN
      Initialize;
      CreateSalesShipmentHeader(SalesShipmentHeader,'%1');
      Assert.AreEqual(
        SalesShipmentHeader."Package Tracking No.",COPYSTR(SalesShipmentHeader.GetTrackingInternetAddr,STRLEN(HttpTxt) + 1),
        PackageTrackingNoErr);
    END;

    [Test]
    PROCEDURE TestInternetAddressWithoutHttp@18();
    VAR
      SalesShipmentHeader@1004 : Record 110;
    BEGIN
      Initialize;
      CreateSalesShipmentHeader(SalesShipmentHeader,InternetURLTxt);
      Assert.AreEqual(HttpTxt + InternetURLTxt,SalesShipmentHeader.GetTrackingInternetAddr,InvalidURLTxt);
    END;

    [Test]
    PROCEDURE TestInternetAddressWithHttp@44();
    VAR
      SalesShipmentHeader@1002 : Record 110;
    BEGIN
      Initialize;
      CreateSalesShipmentHeader(SalesShipmentHeader,HttpTxt + InternetURLTxt);
      Assert.AreEqual(HttpTxt + InternetURLTxt,SalesShipmentHeader.GetTrackingInternetAddr,InvalidURLTxt);
    END;

    [Test]
    PROCEDURE TestNoPackageNoExistIfNoPlaceHolderExistInURL@62();
    VAR
      SalesShipmentHeader@1002 : Record 110;
    BEGIN
      Initialize;
      CreateSalesShipmentHeader(SalesShipmentHeader,InternetURLTxt);
      Assert.IsTrue(
        STRPOS(SalesShipmentHeader.GetTrackingInternetAddr,SalesShipmentHeader."Package Tracking No.") = 0,PackageTrackingNoErr);
    END;

    [Test]
    [HandlerFunctions(IntrastatJnlTemplateListPageHandler,GetItemLedgerEntriesReportHandler)]
    PROCEDURE VerifyNoIntraLinesCreatedForCrossedBoardItemChargeInNextPeriod@23();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1003 : Record 39;
      IntrastatJnlBatch@1006 : Record 262;
      NextIntrastatJnlBatch@1007 : Record 262;
      DocumentNo@1002 : Code[20];
      ItemNo@1005 : Code[20];
      InvoicePostingDate@1000 : Date;
    BEGIN
      // [FEATURE] [Purchase] [Item Charge]
      // [SCENARIO 376161] Invoice and Item Charge suggested for Intrastat Journal in different Periods - Cross-Border
      Initialize;

      // [GIVEN] Posted Purchase Invoice in "Y" period - Cross-border
      InvoicePostingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE);
      DocumentNo := CreateAndPostPurchaseOrder(PurchaseLine,InvoicePostingDate);
      ItemNo := PurchaseLine."No.";

      // [GIVEN] Posted Item Charge in "F" period
      CreatePurchaseHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::Invoice,
        CALCDATE('<1M>',InvoicePostingDate),CreateVendor(GetCountryRegionCode));
      CreatePurchaseLine(
        PurchaseHeader,PurchaseLine,PurchaseLine.Type::"Charge (Item)",LibraryInventory.CreateItemChargeNo);
      CreateItemChargeAssignmentForPurchaseCreditMemo(PurchaseLine,DocumentNo);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] Intrastat Batches for "Y" and "F" period
      LibraryERM.CreateIntrastatJnlTemplateAndBatch(IntrastatJnlBatch,InvoicePostingDate);
      LibraryERM.CreateIntrastatJnlTemplateAndBatch(NextIntrastatJnlBatch,PurchaseHeader."Posting Date");
      LibraryVariableStorage.Enqueue(IntrastatJnlBatch."Journal Template Name");
      LibraryVariableStorage.Enqueue(TRUE); // Show Item Charge entries

      // [WHEN] Entries suggested to Intrastat Journal "J" and "F" with "Show item charge entries" options set to TRUE
      // [THEN] Intrastat Journal "J" contains 1 line for Posted Invoice
      // [THEN] Intrastat Journal "F" contains 1 line for Posted Item Charge
      OpenAndVerifyIntrastatJournalLine(IntrastatJnlBatch.Name,ItemNo,TRUE);
      LibraryVariableStorage.Enqueue(NextIntrastatJnlBatch."Journal Template Name");
      LibraryVariableStorage.Enqueue(TRUE); // Show Item Charge entries
      OpenAndVerifyIntrastatJournalLine(NextIntrastatJnlBatch.Name,ItemNo,TRUE);

      IntrastatJnlBatch.DELETE(TRUE);
      NextIntrastatJnlBatch.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(IntrastatJnlTemplateListPageHandler,GetItemLedgerEntriesReportHandler)]
    PROCEDURE VerifyIntrastatJournalLineSuggestedForNonCrossedBoardItemChargeInNextPeriod@75();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1003 : Record 39;
      ItemCharge@1004 : Record 5800;
      IntrastatJnlBatch@1006 : Record 262;
      NextIntrastatJnlBatch@1007 : Record 262;
      CompanyInformation@1008 : Record 79;
      DocumentNo@1002 : Code[20];
      ItemNo@1005 : Code[20];
      InvoicePostingDate@1000 : Date;
    BEGIN
      // [FEATURE] [Purchase] [Item Charge]
      // [SCENARIO 376161] Invoice and Item Charge not suggested for Intrastat Journal in different Periods - Not Cross-Border
      Initialize;
      InvoicePostingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE);

      // [GIVEN] Posted Purchase Invoice in "Y" period - Not Cross-border
      CompanyInformation.GET;
      CreatePurchaseHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::Order,InvoicePostingDate,
        CreateVendor(CompanyInformation."Country/Region Code"));
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,PurchaseLine.Type::Item,CreateItem);
      ItemNo := PurchaseLine."No.";
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] Posted Item Charge in "F" period
      CreatePurchaseHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::Invoice,CALCDATE('<1M>',InvoicePostingDate),
        PurchaseHeader."Buy-from Vendor No.");
      LibraryInventory.CreateItemCharge(ItemCharge);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,PurchaseLine.Type::"Charge (Item)",ItemCharge."No.");
      CreateItemChargeAssignmentForPurchaseCreditMemo(PurchaseLine,DocumentNo);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] Intrastat Batches for "Y" and "F" period
      LibraryERM.CreateIntrastatJnlTemplateAndBatch(IntrastatJnlBatch,InvoicePostingDate);
      LibraryERM.CreateIntrastatJnlTemplateAndBatch(NextIntrastatJnlBatch,PurchaseHeader."Posting Date");
      LibraryVariableStorage.Enqueue(IntrastatJnlBatch."Journal Template Name");
      LibraryVariableStorage.Enqueue(TRUE); // Show Item Charge entries

      // [WHEN] Entries suggested to Intrastat Journal "J" and "F" with "Show item charge entries" options set to TRUE
      // [THEN] Intrastat Journal "J" contains no lines
      // [THEN] Intrastat Journal "F" contains no lines
      OpenAndVerifyIntrastatJournalLine(IntrastatJnlBatch.Name,ItemNo,FALSE);
      LibraryVariableStorage.Enqueue(NextIntrastatJnlBatch."Journal Template Name");
      LibraryVariableStorage.Enqueue(TRUE); // Show Item Charge entries
      OpenAndVerifyIntrastatJournalLine(NextIntrastatJnlBatch.Name,ItemNo,FALSE);

      IntrastatJnlBatch.DELETE(TRUE);
      NextIntrastatJnlBatch.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(UndoDocumentConfirmHandler)]
    PROCEDURE IntrastatGetEntriesUndoReceiptSameItem@27();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      IntrastatJnlLine@1005 : Record 263;
      DocumentNo@1002 : Code[20];
      NoOfPurchaseLines@1007 : Integer;
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO 121966] Get Entries for Intrastat doesn't suggest Purchase Receipt lines that were Corrected
      Initialize;
      // [GIVEN] Posted(Receipt) Purchase Order with lines for the same Item
      NoOfPurchaseLines := LibraryRandom.RandIntInRange(2,10);
      DocumentNo :=
        CreateAndPostPurchaseDocumentMultiLine(
          PurchaseLine,PurchaseHeader."Document Type"::Order,WORKDATE,CreateItem,NoOfPurchaseLines);
      // [GIVEN] Undo Receipt for one of the lines (random) and finally post Purchase Order
      UndoPurchaseReceiptLineByLineNo(DocumentNo,LibraryRandom.RandInt(NoOfPurchaseLines));
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
      // [WHEN] User runs Get Entries for Intrastat Journal
      CreateIntrastatJnlLineAndGetEntries(IntrastatJnlLine,WORKDATE,WORKDATE);
      // [THEN] Only lines for which Undo Receipt was not done are suggested
      VerifyNoOfIntrastatLinesForDocumentNo(
        IntrastatJnlLine."Journal Template Name",IntrastatJnlLine."Journal Batch Name",
        DocumentNo,NoOfPurchaseLines - 1);
    END;

    [Test]
    [HandlerFunctions(UndoDocumentConfirmHandler)]
    PROCEDURE IntrastatGetEntriesUndoShipmentSameItem@30();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      IntrastatJnlLine@1005 : Record 263;
      DocumentNo@1002 : Code[20];
      NoOfSalesLines@1007 : Integer;
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO 121966] Get Entries for Intrastat doesn't suggest Sales Shipment lines that were Corrected
      Initialize;
      NoOfSalesLines := LibraryRandom.RandIntInRange(2,10);
      // [GIVEN] Posted(Shipment) Sales Order with lines for the same Item
      DocumentNo :=
        CreateAndPostSalesDocumentMultiLine(
          SalesLine,SalesLine."Document Type"::Order,WORKDATE,CreateItem,NoOfSalesLines);
      // [GIVEN] Undo Receipt for one of the lines (random) and finally post Sales Order
      UndoSalesShipmentLineByLineNo(DocumentNo,LibraryRandom.RandInt(NoOfSalesLines));
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE);
      // [WHEN] User runs Get Entries for Intrastat Journal
      CreateIntrastatJnlLineAndGetEntries(IntrastatJnlLine,WORKDATE,WORKDATE);
      // [THEN] Only lines for which Undo Receipt was not done are suggested
      VerifyNoOfIntrastatLinesForDocumentNo(
        IntrastatJnlLine."Journal Template Name",IntrastatJnlLine."Journal Batch Name",
        DocumentNo,NoOfSalesLines - 1);
    END;

    [Test]
    [HandlerFunctions(UndoDocumentConfirmHandler)]
    PROCEDURE IntrastatGetEntriesUndoReturnShipmentSameItem@38();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      IntrastatJnlLine@1005 : Record 263;
      DocumentNo@1002 : Code[20];
      NoOfPurchaseLines@1007 : Integer;
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO 121966] Get Entries for Intrastat doesn't suggest Return Shipment lines that were Corrected
      Initialize;
      // [GIVEN] Posted(Shipment) Purchase Order with lines for the same Item
      NoOfPurchaseLines := LibraryRandom.RandIntInRange(2,10);
      DocumentNo :=
        CreateAndPostPurchaseDocumentMultiLine(
          PurchaseLine,PurchaseHeader."Document Type"::"Return Order",WORKDATE,CreateItem,NoOfPurchaseLines);
      // [GIVEN] Undo Receipt for one of the lines (random) and finally post Return Order
      UndoReturnShipmentLineByLineNo(DocumentNo,LibraryRandom.RandInt(NoOfPurchaseLines));
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
      // [WHEN] User runs Get Entries for Intrastat Journal
      CreateIntrastatJnlLineAndGetEntries(IntrastatJnlLine,WORKDATE,WORKDATE);
      // [THEN] Only lines for which Undo Receipt was not done are suggested
      VerifyNoOfIntrastatLinesForDocumentNo(
        IntrastatJnlLine."Journal Template Name",IntrastatJnlLine."Journal Batch Name",
        DocumentNo,NoOfPurchaseLines - 1);
    END;

    [Test]
    [HandlerFunctions(UndoDocumentConfirmHandler)]
    PROCEDURE IntrastatGetEntriesUndoReturnReceiptSameItem@37();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      IntrastatJnlLine@1005 : Record 263;
      DocumentNo@1002 : Code[20];
      NoOfSalesLines@1007 : Integer;
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO 121966] Get Entries for Intrastat doesn't suggest Return Receipt lines that were Corrected
      Initialize;
      // [GIVEN] Posted(Receipt) Sales Return Order with lines for the same Item
      NoOfSalesLines := LibraryRandom.RandIntInRange(2,10);
      DocumentNo :=
        CreateAndPostSalesDocumentMultiLine(
          SalesLine,SalesLine."Document Type"::"Return Order",WORKDATE,CreateItem,NoOfSalesLines);
      // [GIVEN] Undo Receipt for one of the lines (random) and finally post Return Order
      UndoReturnReceiptLineByLineNo(DocumentNo,LibraryRandom.RandInt(NoOfSalesLines));
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE);
      // [WHEN] User runs Get Entries for Intrastat Journal
      CreateIntrastatJnlLineAndGetEntries(IntrastatJnlLine,WORKDATE,WORKDATE);
      // [THEN] Only lines for which Undo Receipt was not done are suggested
      VerifyNoOfIntrastatLinesForDocumentNo(
        IntrastatJnlLine."Journal Template Name",IntrastatJnlLine."Journal Batch Name",
        DocumentNo,NoOfSalesLines - 1);
    END;

    [Test]
    [HandlerFunctions(IntrastatJnlTemplateListPageHandler,GetItemLedgerEntriesReportHandler)]
    PROCEDURE IntrastatJournalWithItemChargeOnStartDate@42();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1001 : Record 39;
      IntrastatJnlBatch@1000 : Record 262;
    BEGIN
      // [FEATURE] [Purchase] [Item Charge]
      // [SCENARIO] GetEntries for Intrastat should not create line for National Purchase order with Item Charge posted on StartDate of Period
      Initialize;

      // [GIVEN] Purchase Order with empty Country/Region Code on 01.Jan with Item "X"
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor(GetCountryRegionCode));
      WITH PurchaseHeader DO BEGIN
        VALIDATE("Posting Date",CALCDATE('<+1Y-CM>',WORKDATE));
        VALIDATE("Buy-from Country/Region Code",'');
        MODIFY(TRUE);
      END;
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,PurchaseLine.Type::Item,CreateItem);

      // [GIVEN] Item Charge Purchase Line
      LibraryPatterns.ASSIGNPurchChargeToPurchaseLine(PurchaseHeader,PurchaseLine,1,LibraryRandom.RandDecInRange(100,200,2));

      // [GIVEN] Purchase Order is Received and Invoiced on 01.Jan
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      LibraryERM.CreateIntrastatJnlTemplateAndBatch(IntrastatJnlBatch,PurchaseHeader."Posting Date");
      LibraryVariableStorage.Enqueue(IntrastatJnlBatch."Journal Template Name");
      LibraryVariableStorage.Enqueue(TRUE); // Show Item Charge entries

      // [WHEN] Run Get Entries on Intrastat Journal with "Show item charge entries" options set to TRUE
      // [THEN] No Intrastat Journal Lines should be created for Item "X"
      OpenAndVerifyIntrastatJournalLine(IntrastatJnlBatch.Name,PurchaseLine."No.",FALSE);

      IntrastatJnlBatch.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(IntrastatJnlTemplateListPageHandler,GetItemLedgerEntriesReportHandler)]
    PROCEDURE NotToShowItemCharges@46();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1003 : Record 39;
      ItemCharge@1004 : Record 5800;
      IntrastatJnlBatch@1006 : Record 262;
      NextIntrastatJnlBatch@1007 : Record 262;
      DocumentNo@1002 : Code[20];
      ItemNo@1005 : Code[20];
      InvoicePostingDate@1000 : Date;
    BEGIN
      // [FEATURE] [Purchase] [Item Charge]
      // [SCENARIO 377846] No Item Charge entries should be suggested to Intrastat Journal if "Show item charge entries" option is set to FALSE

      Initialize;

      // [GIVEN] Posted Purchase Invoice in "Y" period
      InvoicePostingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE);
      DocumentNo := CreateAndPostPurchaseOrder(PurchaseLine,InvoicePostingDate);
      ItemNo := PurchaseLine."No.";

      // [GIVEN] Posted Item Charge in "F" period
      CreatePurchaseHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::Invoice,CALCDATE('<1M>',InvoicePostingDate),
        CreateVendor(GetCountryRegionCode));
      LibraryInventory.CreateItemCharge(ItemCharge);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,PurchaseLine.Type::"Charge (Item)",ItemCharge."No.");
      CreateItemChargeAssignmentForPurchaseCreditMemo(PurchaseLine,DocumentNo);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] Intrastat Batches for "Y" and "F" period
      LibraryERM.CreateIntrastatJnlTemplateAndBatch(IntrastatJnlBatch,InvoicePostingDate);
      LibraryERM.CreateIntrastatJnlTemplateAndBatch(NextIntrastatJnlBatch,PurchaseHeader."Posting Date");
      LibraryVariableStorage.Enqueue(IntrastatJnlBatch."Journal Template Name");
      LibraryVariableStorage.Enqueue(FALSE); // Show Item Charge entries

      // [WHEN] Suggest Entries to Intrastat Journal "Y" and "F" with "Show item charge entries" options set to FALSE
      // [THEN] Intrastat Journal "Y" contains 1 line for Posted Invoice
      // [THEN] Intrastat Journal "F" does not contain lines for Posted Item Charge
      OpenAndVerifyIntrastatJournalLine(IntrastatJnlBatch.Name,ItemNo,TRUE);
      LibraryVariableStorage.Enqueue(NextIntrastatJnlBatch."Journal Template Name");
      LibraryVariableStorage.Enqueue(FALSE); // Show Item Charge entries
      OpenAndVerifyIntrastatJournalLine(NextIntrastatJnlBatch.Name,ItemNo,FALSE);

      IntrastatJnlBatch.DELETE(TRUE);
      NextIntrastatJnlBatch.DELETE(TRUE);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      IF IsInitialized THEN
        EXIT;
      UpdateIntrastatCodeInCountryRegion;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE OpenAndVerifyIntrastatJournalLine@22(BatchName@1002 : Code[10];ItemNo@1016 : Code[20];MustExist@1001 : Boolean);
    VAR
      IntrastatJournal@1000 : TestPage 311;
    BEGIN
      COMMIT;  // Commit is required to commit the posted entries.

      // Exercise: Get Entries from Intrastat Journal page.
      InvokeGetEntriesOnIntrastatJnl(IntrastatJournal,BatchName);

      // Verify: Verify Intrastat Journal Line with No entires.
      IntrastatJournal.FILTER.SETFILTER("Item No.",ItemNo);
      Assert.AreEqual(MustExist,IntrastatJournal.FIRST,LineNotExistErr);
    END;

    LOCAL PROCEDURE CreateIntrastatJnlLine@40(VAR IntrastatJnlLine@1000 : Record 263);
    VAR
      IntrastatJnlTemplate@1001 : Record 261;
      IntrastatJnlBatch@1002 : Record 262;
    BEGIN
      LibraryERM.CreateIntrastatJnlTemplate(IntrastatJnlTemplate);
      CreateAndUpdateIntrastatBatch(IntrastatJnlBatch,IntrastatJnlTemplate.Name,FORMAT(TODAY,0,LibraryFiscalYear.GetStatisticsPeriod));
      LibraryERM.CreateIntrastatJnlLine(IntrastatJnlLine,IntrastatJnlBatch."Journal Template Name",IntrastatJnlBatch.Name);
    END;

    LOCAL PROCEDURE CreateCustomer@10() : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Country/Region Code",GetCountryRegionCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateIntrastatJnlLineAndGetEntries@81(VAR IntrastatJnlLine@1000 : Record 263;StartDate@1001 : Date;EndDate@1002 : Date);
    BEGIN
      CreateIntrastatJnlLine(IntrastatJnlLine);
      RunGetItemEntries(IntrastatJnlLine,StartDate,EndDate);
    END;

    LOCAL PROCEDURE CreateItem@2() : Code[20];
    VAR
      Item@1002 : Record 27;
      TariffNumber@1000 : Record 260;
    BEGIN
      TariffNumber.FINDFIRST;
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Tariff No.",TariffNumber."No.");
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemChargeAssignmentForPurchaseCreditMemo@11(PurchaseLine@1001 : Record 39;DocumentNo@1004 : Code[20]);
    VAR
      ItemChargeAssignmentPurch@1002 : Record 5805;
      PurchRcptLine@1000 : Record 121;
      ItemChargeAssgntPurch@1015 : Codeunit 5805;
    BEGIN
      ItemChargeAssignmentPurch.INIT;
      ItemChargeAssignmentPurch.VALIDATE("Document Type",PurchaseLine."Document Type");
      ItemChargeAssignmentPurch.VALIDATE("Document No.",PurchaseLine."Document No.");
      ItemChargeAssignmentPurch.VALIDATE("Document Line No.",PurchaseLine."Line No.");
      ItemChargeAssignmentPurch.VALIDATE("Item Charge No.",PurchaseLine."No.");
      ItemChargeAssignmentPurch.VALIDATE("Unit Cost",PurchaseLine."Direct Unit Cost");
      PurchRcptLine.SETRANGE("Document No.",DocumentNo);
      PurchRcptLine.FINDFIRST;
      ItemChargeAssgntPurch.CreateRcptChargeAssgnt(PurchRcptLine,ItemChargeAssignmentPurch);
      UpdatePurchaseItemChargeQtyToAssign(PurchaseLine);
    END;

    LOCAL PROCEDURE CreateItemChargeAssignmentForSalesCreditMemo@34(SalesLine@1001 : Record 37;DocumentNo@1016 : Code[20]);
    VAR
      SalesShipmentLine@1014 : Record 111;
      ItemChargeAssignmentSales@1002 : Record 5809;
      ItemChargeAssgntSales@1015 : Codeunit 5807;
    BEGIN
      ItemChargeAssignmentSales.INIT;
      ItemChargeAssignmentSales.VALIDATE("Document Type",SalesLine."Document Type");
      ItemChargeAssignmentSales.VALIDATE("Document No.",SalesLine."Document No.");
      ItemChargeAssignmentSales.VALIDATE("Document Line No.",SalesLine."Line No.");
      ItemChargeAssignmentSales.VALIDATE("Item Charge No.",SalesLine."No.");
      ItemChargeAssignmentSales.VALIDATE("Unit Cost",SalesLine."Unit Price");
      SalesShipmentLine.SETRANGE("Document No.",DocumentNo);
      SalesShipmentLine.FINDFIRST;
      ItemChargeAssgntSales.CreateShptChargeAssgnt(SalesShipmentLine,ItemChargeAssignmentSales);
      UpdateSalesItemChargeQtyToAssign(SalesLine);
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@31(VAR PurchaseHeader@1000 : Record 38;DocumentType@1001 : Option;PostingDate@1003 : Date;VendorNo@1004 : Code[20]);
    BEGIN
      // Create Purchase Order With Random Quantity and Direct Unit Cost.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      WITH PurchaseHeader DO BEGIN
        VALIDATE("Posting Date",PostingDate);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseLine@70(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;Type@1003 : Option;No@1004 : Code[20]);
    BEGIN
      // Take Random Values for Purchase Line.
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,Type,No,LibraryRandom.RandDec(10,2));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrder@7(VAR PurchaseLine@1001 : Record 39;PostingDate@1003 : Date) : Code[20];
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      EXIT(
        CreateAndPostPurchaseDocumentMultiLine(
          PurchaseLine,PurchaseHeader."Document Type"::Order,PostingDate,CreateItem,1));
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocumentMultiLine@66(VAR PurchaseLine@1001 : Record 39;DocumentType@1007 : Option;PostingDate@1003 : Date;ItemNo@1004 : Code[20];NoOfLines@1005 : Integer) : Code[20];
    VAR
      PurchaseHeader@1000 : Record 38;
      i@1006 : Integer;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,DocumentType,PostingDate,CreateVendor(GetCountryRegionCode));
      FOR i := 1 TO NoOfLines DO
        CreatePurchaseLine(PurchaseHeader,PurchaseLine,PurchaseLine.Type::Item,ItemNo);

      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE));
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrder@108(VAR SalesLine@1000 : Record 37;PostingDate@1002 : Date) : Code[20];
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      EXIT(
        CreateAndPostSalesDocumentMultiLine(
          SalesLine,SalesHeader."Document Type"::Order,PostingDate,CreateItem,1));
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocumentMultiLine@74(VAR SalesLine@1000 : Record 37;DocumentType@1006 : Option;PostingDate@1002 : Date;ItemNo@1004 : Code[20];NoOfSalesLines@1005 : Integer) : Code[20];
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      CreateSalesDocument(SalesLine,PostingDate,DocumentType,SalesLine.Type::Item,ItemNo,NoOfSalesLines);
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");

      // Exercise.
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE));
    END;

    LOCAL PROCEDURE CreateShippingAgent@28(ShippingInternetAddress@1002 : Text[250]) : Code[10];
    VAR
      ShippingAgent@1001 : Record 291;
    BEGIN
      LibraryInventory.CreateShippingAgent(ShippingAgent);
      ShippingAgent."Internet Address" := ShippingInternetAddress;
      ShippingAgent.MODIFY;
      EXIT(ShippingAgent.Code);
    END;

    LOCAL PROCEDURE UseItemNonZeroNetWeight@20(VAR IntrastatJnlLine@1002 : Record 263) : Decimal;
    VAR
      Item@1003 : Record 27;
    BEGIN
      Item.GET(CreateItem);
      IntrastatJnlLine.VALIDATE("Item No.",Item."No.");
      IntrastatJnlLine.VALIDATE(Quantity,LibraryRandom.RandDecInRange(10,20,2));
      IntrastatJnlLine.MODIFY(TRUE);
      EXIT(Item."Net Weight");
    END;

    LOCAL PROCEDURE CreateAndUpdateIntrastatBatch@9(VAR IntrastatJnlBatch@1000 : Record 262;JournalTemplateName@1001 : Code[10];StatisticsPeriod@1002 : Code[10]);
    BEGIN
      LibraryERM.CreateIntrastatJnlBatch(IntrastatJnlBatch,JournalTemplateName);
      IntrastatJnlBatch.VALIDATE("Statistics Period",StatisticsPeriod);
      IntrastatJnlBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendor@6(CountryRegionCode@1002 : Code[10]) : Code[20];
    VAR
      Vendor@1001 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Country/Region Code",CountryRegionCode);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateAndVerifyIntrastatLine@96(DocumentNo@1000 : Code[20];ItemNo@1003 : Code[20];Quantity@1004 : Decimal;IntrastatJnlLineType@1002 : Option);
    VAR
      IntrastatJnlLine@1001 : Record 263;
    BEGIN
      // Exercise: Run Get Item Entries. Take Starting Date as WORKDATE and Random Ending Date based on WORKDATE.
      CreateIntrastatJnlLineAndGetEntries(
        IntrastatJnlLine,WORKDATE,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE));
      // Verify.
      VerifyIntrastatLine(DocumentNo,ItemNo,IntrastatJnlLineType,GetCountryRegionCode,Quantity);
    END;

    LOCAL PROCEDURE CreateSalesDocument@16(VAR SalesLine@1000 : Record 37;PostingDate@1002 : Date;DocumentType@1004 : Option;Type@1005 : Option;No@1006 : Code[20];NoOfLines@1008 : Integer);
    VAR
      SalesHeader@1001 : Record 36;
      i@1007 : Integer;
    BEGIN
      // Create Sales Order with Random Quantity and Unit Price.
      CreateSalesHeader(SalesHeader,CreateCustomer,PostingDate,DocumentType);
      FOR i := 1 TO NoOfLines DO BEGIN
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,Type,No,LibraryRandom.RandDec(10,2));
        SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
        SalesLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateSalesShipmentHeader@29(VAR SalesShipmentHeader@1001 : Record 110;ShippingInternetAddress@1000 : Text[250]);
    BEGIN
      SalesShipmentHeader.INIT;
      SalesShipmentHeader."Package Tracking No." := LibraryUtility.GenerateGUID;
      SalesShipmentHeader."Shipping Agent Code" := CreateShippingAgent(ShippingInternetAddress);
    END;

    LOCAL PROCEDURE CreateSalesHeader@32(VAR SalesHeader@1002 : Record 36;CustomerNo@1004 : Code[20];PostingDate@1001 : Date;DocumentType@1000 : Option);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DeleteAndVerifyNoIntrastatLine@83();
    VAR
      IntrastatJnlBatch@1004 : Record 262;
      IntrastatJnlLine@1006 : Record 263;
    BEGIN
      // Create and Get Intrastat Journal Lines. Take Random Ending Date based on WORKDATE.
      CreateIntrastatJnlLineAndGetEntries(
        IntrastatJnlLine,WORKDATE,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE));

      // Exercise: Delete all entries from Intrastat Journal Lines.
      IntrastatJnlBatch.GET(IntrastatJnlLine."Journal Template Name",IntrastatJnlLine."Journal Batch Name");
      LibraryERM.ClearIntrastatJnlLines(IntrastatJnlBatch);

      // Verify.
      VerifyNoIntrastatLineExist(IntrastatJnlBatch."Journal Template Name",IntrastatJnlBatch.Name);
    END;

    LOCAL PROCEDURE GetCountryRegionCode@65() : Code[10];
    VAR
      CountryRegion@1000 : Record 9;
      CompanyInformation@1001 : Record 79;
    BEGIN
      CompanyInformation.GET;
      CountryRegion.SETFILTER(Code,'<>%1',CompanyInformation."Country/Region Code");
      CountryRegion.SETFILTER("Intrastat Code",'<>''''');
      CountryRegion.FINDFIRST;
      EXIT(CountryRegion.Code);
    END;

    LOCAL PROCEDURE GetEntriesAndVerifyNoItemLine@41(DocumentNo@1001 : Code[20];ItemNo@1000 : Code[20]);
    VAR
      IntrastatJnlLine@1005 : Record 263;
    BEGIN
      // Exercise: Run Get Item Entries. Take Starting Date as WORKDATE and Random Ending Date based on WORKDATE.
      CreateIntrastatJnlLineAndGetEntries(
        IntrastatJnlLine,WORKDATE,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE));
      // Verify:
      VerifyNoIntrastatLineForItem(DocumentNo,ItemNo);
    END;

    LOCAL PROCEDURE RunGetItemEntries@19(IntrastatJnlLine@1002 : Record 263;StartDate@1001 : Date;EndDate@1003 : Date);
    VAR
      GetItemLedgerEntries@1000 : Report 594;
    BEGIN
      GetItemLedgerEntries.InitializeRequest(StartDate,EndDate,0);
      GetItemLedgerEntries.SetIntrastatJnlLine(IntrastatJnlLine);
      GetItemLedgerEntries.USEREQUESTPAGE(FALSE);
      GetItemLedgerEntries.RUN;
    END;

    LOCAL PROCEDURE UpdateIntrastatCodeInCountryRegion@12();
    VAR
      CompanyInformation@1000 : Record 79;
      CountryRegion@1001 : Record 9;
    BEGIN
      CompanyInformation.GET;
      CountryRegion.GET(CompanyInformation."Country/Region Code");
      IF CountryRegion."Intrastat Code" = '' THEN BEGIN
        CountryRegion.VALIDATE("Intrastat Code",CountryRegion.Code);
        CountryRegion.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdatePurchaseItemChargeQtyToAssign@14(PurchaseLine@1000 : Record 39);
    VAR
      ItemChargeAssignmentPurch@1005 : Record 5805;
    BEGIN
      ItemChargeAssignmentPurch.GET(
        PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.",PurchaseLine."Line No.");
      ItemChargeAssignmentPurch.VALIDATE("Qty. to Assign",PurchaseLine.Quantity);
      ItemChargeAssignmentPurch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesItemChargeQtyToAssign@17(SalesLine@1000 : Record 37);
    VAR
      ItemChargeAssignmentSales@1005 : Record 5809;
    BEGIN
      ItemChargeAssignmentSales.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",SalesLine."Line No.");
      ItemChargeAssignmentSales.VALIDATE("Qty. to Assign",SalesLine.Quantity);
      ItemChargeAssignmentSales.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UndoPurchaseReceiptLine@89(DocumentNo@1000 : Code[20];No@1002 : Code[20]);
    VAR
      PurchRcptLine@1001 : Record 121;
    BEGIN
      PurchRcptLine.SETRANGE("Document No.",DocumentNo);
      PurchRcptLine.SETRANGE("No.",No);
      PurchRcptLine.FINDFIRST;
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);
    END;

    LOCAL PROCEDURE UndoPurchaseReceiptLineByLineNo@51(DocumentNo@1000 : Code[20];LineNo@1003 : Integer);
    VAR
      PurchRcptLine@1001 : Record 121;
    BEGIN
      WITH PurchRcptLine DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        FINDSET;
        NEXT(LineNo - 1);
        SETRECFILTER;
      END;
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);
    END;

    LOCAL PROCEDURE UndoReturnShipmentLineByLineNo@50(DocumentNo@1000 : Code[20];LineNo@1003 : Integer);
    VAR
      ReturnShipmentLine@1001 : Record 6651;
    BEGIN
      WITH ReturnShipmentLine DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        FINDSET;
        NEXT(LineNo - 1);
        SETRECFILTER;
      END;
      LibraryPurchase.UndoReturnShipmentLine(ReturnShipmentLine);
    END;

    LOCAL PROCEDURE UndoSalesShipmentLine@158(DocumentNo@1001 : Code[20];No@1002 : Code[20]);
    VAR
      SalesShipmentLine@1000 : Record 111;
    BEGIN
      SalesShipmentLine.SETRANGE("Document No.",DocumentNo);
      SalesShipmentLine.SETRANGE("No.",No);
      SalesShipmentLine.FINDFIRST;
      LibrarySales.UndoSalesShipmentLine(SalesShipmentLine);
    END;

    LOCAL PROCEDURE UndoSalesShipmentLineByLineNo@49(DocumentNo@1000 : Code[20];LineNo@1003 : Integer);
    VAR
      SalesShipmentLine@1001 : Record 111;
    BEGIN
      WITH SalesShipmentLine DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        FINDSET;
        NEXT(LineNo - 1);
        SETRECFILTER;
      END;
      LibrarySales.UndoSalesShipmentLine(SalesShipmentLine);
    END;

    LOCAL PROCEDURE UndoReturnReceiptLineByLineNo@52(DocumentNo@1000 : Code[20];LineNo@1003 : Integer);
    VAR
      ReturnReceiptLine@1001 : Record 6661;
    BEGIN
      WITH ReturnReceiptLine DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        FINDSET;
        NEXT(LineNo - 1);
        SETRECFILTER;
      END;
      LibrarySales.UndoReturnReceiptLine(ReturnReceiptLine);
    END;

    LOCAL PROCEDURE VerifyIntrastatLine@130(DocumentNo@1000 : Code[20];ItemNo@1001 : Code[20];Type@1005 : Option;CountryRegionCode@1002 : Code[10];Quantity@1003 : Decimal);
    VAR
      IntrastatJnlLine@1004 : Record 263;
    BEGIN
      IntrastatJnlLine.SETRANGE("Document No.",DocumentNo);
      IntrastatJnlLine.SETRANGE("Item No.",ItemNo);
      IntrastatJnlLine.FINDFIRST;

      Assert.AreEqual(
        Type,IntrastatJnlLine.Type,
        STRSUBSTNO(ValidationErr,IntrastatJnlLine.FIELDCAPTION(Type),Type,IntrastatJnlLine.TABLECAPTION));

      Assert.AreEqual(
        Quantity,IntrastatJnlLine.Quantity,
        STRSUBSTNO(ValidationErr,IntrastatJnlLine.FIELDCAPTION(Quantity),Quantity,IntrastatJnlLine.TABLECAPTION));

      Assert.AreEqual(
        CountryRegionCode,IntrastatJnlLine."Country/Region Code",STRSUBSTNO(ValidationErr,
          IntrastatJnlLine.FIELDCAPTION("Country/Region Code"),CountryRegionCode,IntrastatJnlLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@116(DocumentType@1001 : Option;DocumentNo@1002 : Code[20];CountryRegionCode@1003 : Code[10];Quantity@1004 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Document Type",DocumentType);
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ItemLedgerEntry.FINDFIRST;

      Assert.AreEqual(
        CountryRegionCode,ItemLedgerEntry."Country/Region Code",STRSUBSTNO(ValidationErr,
          ItemLedgerEntry.FIELDCAPTION("Country/Region Code"),CountryRegionCode,ItemLedgerEntry.TABLECAPTION));

      Assert.AreEqual(
        Quantity,ItemLedgerEntry.Quantity,
        STRSUBSTNO(ValidationErr,ItemLedgerEntry.FIELDCAPTION(Quantity),Quantity,ItemLedgerEntry.TABLECAPTION));

      Assert.AreEqual(
        0,ItemLedgerEntry."Invoiced Quantity",
        STRSUBSTNO(ValidationErr,ItemLedgerEntry.FIELDCAPTION("Invoiced Quantity"),0,ItemLedgerEntry.TABLECAPTION));

      Assert.AreEqual(
        Quantity,ItemLedgerEntry."Remaining Quantity",
        STRSUBSTNO(ValidationErr,ItemLedgerEntry.FIELDCAPTION("Remaining Quantity"),Quantity,ItemLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyNoIntrastatLineForItem@26(DocumentNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    VAR
      IntrastatJnlLine@1000 : Record 263;
    BEGIN
      IntrastatJnlLine.SETRANGE("Document No.",DocumentNo);
      IntrastatJnlLine.SETRANGE("Item No.",ItemNo);
      Assert.IsFalse(IntrastatJnlLine.FINDFIRST,LineNotExistErr);
    END;

    LOCAL PROCEDURE VerifyNoIntrastatLineExist@55(JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    VAR
      IntrastatJnlLine@1000 : Record 263;
    BEGIN
      IntrastatJnlLine.SETRANGE("Journal Template Name",JournalTemplateName);
      IntrastatJnlLine.SETRANGE("Journal Batch Name",JournalBatchName);
      Assert.IsFalse(IntrastatJnlLine.FINDFIRST,LineNotExistErr);
    END;

    LOCAL PROCEDURE VerifyNoOfIntrastatLinesForDocumentNo@86(JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10];DocumentNo@1003 : Code[20];LineCount@1004 : Integer);
    VAR
      IntrastatJnlLine@1000 : Record 263;
    BEGIN
      WITH IntrastatJnlLine DO BEGIN
        SETRANGE("Journal Template Name",JournalTemplateName);
        SETRANGE("Journal Batch Name",JournalBatchName);
        SETRANGE("Document No.",DocumentNo);
        Assert.AreEqual(
          LineCount,COUNT,
          STRSUBSTNO(LineCountErr,TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE InvokeGetEntriesOnIntrastatJnl@126(VAR IntrastatJournal@1000 : TestPage 311;BatchName@1001 : Code[10]);
    BEGIN
      IntrastatJournal.OPENEDIT;
      IntrastatJournal.CurrentJnlBatchName.SETVALUE(BatchName);
      IntrastatJournal.GetEntries.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE IntrastatJnlTemplateListPageHandler@25(VAR IntrastatJnlTemplateList@1000 : TestPage 326);
    VAR
      NameVar@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(NameVar);
      IntrastatJnlTemplateList.FILTER.SETFILTER(Name,NameVar);
      IntrastatJnlTemplateList.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GetItemLedgerEntriesReportHandler@24(VAR GetItemLedgerEntries@1000 : TestRequestPage 594);
    BEGIN
      GetItemLedgerEntries.ShowingItemCharges.SETVALUE(LibraryVariableStorage.DequeueBoolean);
      GetItemLedgerEntries.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE UndoDocumentConfirmHandler@5(Message@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Send Reply = TRUE for Confirmation Message.
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Intrastat]
      Test for Intrastat Journal with Purchase and Sales Document.
      1. Check Item Ledger Entry after posting Purchase Order.
      2. Check Intrastat Journal Line for posted Purchase Receipt.
      3. Check no Intrastat Journal Line exist after Deleting them for Purchase Receipt.
      4. Check Quantity on Purchase Receipt Line after doing Undo Purchase Receipt.
      5. Check that no Intrastat Line exist for the Item for which Undo Purchase Receipt has done.
      6. Check Item Ledger Entry after posting Sales Order.
      7. Check Intrastat Journal Line for posted Sales Shipment.
      8. Check no Intrastat Journal Line exist after Deleting them for Sales Shipment.
      9. Check Quantity on Sales Shipment Line after doing Undo Sales Shipment.
      10. Check that no Intrastat Line exist for the Item for which Undo Sales Shipment has done.
      11. Check Intrastat Journal Entries after Posting Purchase Order and Get Entries with New Posting Date.
      12. Check Intrastat Journal Entries after Posting Purchase Order, Purchase Credit Memo with Item Charge Assignment and Get Entries with New Posting Date.
      13. Check Intrastat Journal Entries after Posting Sales Order and Get Entries with New Posting Date.
      14. Check Intrastat Journal Entries after Posting Sales Order, Sales Credit Memo with Item Charge Assignment and Get Entries with New Posting Date.
      15. Check Intrastat Journal Total Weight after entering Quantity on Intrastat Journal Line.

        Covers Test Cases for WI: 254039
        -----------------------------------------------------------------------------------------
        Test Function Name                                                        TFS ID
        -----------------------------------------------------------------------------------------
        ItemLedgerEntryForPurchase, IntrastatLineForPurchase,
        NoIntrastatLineForPurchase, UndoPurchaseReceipt,                       243039
        IntrastatLineAfterUndoPurch, ItemLedgerEntryForSales,
        IntrastatLineForSales, NoIntrastatLineForSales,
        UndoSalesShipment, IntrastatLineAfterUndoSales

        Covers Test Cases for WI: 265336
        --------------------------------------------------------------------------------------------------------
        Test Function Name                                                                             TFS ID
        ---------------------------------------------------------------------------------------------------------
        IntrastatJournalWithPurchaseOrder,
        IntrastatJournalWithItemChargeAssignmentAfterPurchaseCreditMemo
        IntrastatJournalWithSalesOrder,IntrastatJournalWithItemChargeAssignmentAfterSalesCreditMemo    245249

        Bug ID: 299067
        ----------------------------------------------------------
        Test Function Name                               TFS ID
        ----------------------------------------------------------
        TotalWeightOnIntrastatJournalLine                298856
    }
    END.
  }
}

