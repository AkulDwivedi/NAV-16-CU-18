OBJECT Codeunit 137601 SCM CETAF Purchase
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryRandom@1005 : Codeunit 130440;
      LibraryCosting@1004 : Codeunit 132200;
      LibraryItemTracking@1001 : Codeunit 130502;
      LibraryPurchase@1006 : Codeunit 130512;
      LibrarySales@1007 : Codeunit 130509;
      LibraryPatterns@1002 : Codeunit 132212;
      LibraryUtility@1008 : Codeunit 131000;
      isInitialized@1003 : Boolean;

    LOCAL PROCEDURE Initialize@9();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryPatterns.SETNoSeries;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE FIFOPurchaseWithCharge@7();
    VAR
      Item@1000 : Record 27;
    BEGIN
      PurchaseWithCharge(Item."Costing Method"::FIFO,FALSE);
    END;

    [Test]
    PROCEDURE FIFOSKUPurchaseWithCharge@10();
    VAR
      Item@1000 : Record 27;
    BEGIN
      PurchaseWithCharge(Item."Costing Method"::FIFO,TRUE);
    END;

    [Test]
    PROCEDURE AvgPurchaseWithCharge@3();
    VAR
      Item@1000 : Record 27;
    BEGIN
      PurchaseWithCharge(Item."Costing Method"::Average,FALSE);
    END;

    [Test]
    PROCEDURE AvgSKUPurchaseWithCharge@2();
    VAR
      Item@1000 : Record 27;
    BEGIN
      PurchaseWithCharge(Item."Costing Method"::Average,TRUE);
    END;

    [Test]
    PROCEDURE StdPurchaseWithCharge@5();
    VAR
      Item@1000 : Record 27;
    BEGIN
      PurchaseWithCharge(Item."Costing Method"::Standard,FALSE);
    END;

    [Test]
    PROCEDURE StdSKUPurchaseWithCharge@4();
    VAR
      Item@1000 : Record 27;
    BEGIN
      PurchaseWithCharge(Item."Costing Method"::Standard,TRUE);
    END;

    [Test]
    PROCEDURE LIFOPurchaseWithCharge@8();
    VAR
      Item@1000 : Record 27;
    BEGIN
      PurchaseWithCharge(Item."Costing Method"::LIFO,FALSE);
    END;

    [Test]
    PROCEDURE LIFOSKUPurchaseWithCharge@6();
    VAR
      Item@1000 : Record 27;
    BEGIN
      PurchaseWithCharge(Item."Costing Method"::LIFO,TRUE);
    END;

    LOCAL PROCEDURE PurchaseWithCharge@1(CostingMethod@1011 : Option;MakeSKU@1012 : Boolean);
    VAR
      Item@1000 : Record 27;
      StockkeepingUnit@1015 : Record 5700;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      PurchRcptLine@1009 : Record 121;
      TempItemLedgerEntry@1001 : TEMPORARY Record 32;
    BEGIN
      Initialize;

      // Setup Item and SKU.
      LibraryPatterns.MAKEItem(Item,CostingMethod,0,0,0,'');
      IF MakeSKU THEN
        LibraryPatterns.MAKEStockkeepingUnit(StockkeepingUnit,Item);

      // Inventory Flow.
      LibraryPatterns.GRPH1Outbound1PurchRcvd(
        TempItemLedgerEntry,PurchaseLine,Item,StockkeepingUnit."Location Code",StockkeepingUnit."Variant Code");

      // Extract the Purchase Receipt No. from the ILEs.
      TempItemLedgerEntry.SETRANGE(Positive,TRUE);
      TempItemLedgerEntry.FINDFIRST;
      PurchRcptLine.GET(TempItemLedgerEntry."Document No.",TempItemLedgerEntry."Document Line No.");

      // Cost modification.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPatterns.ASSIGNPurchChargeToPurchRcptLine(
        PurchaseHeader,PurchRcptLine,LibraryRandom.RandInt(10),LibraryRandom.RandDec(100,5));
      LibraryPatterns.ASSIGNPurchChargeToPurchaseLine(
        PurchaseHeader,PurchaseLine,LibraryRandom.RandInt(10),LibraryRandom.RandDec(100,5));
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise.
      PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchRcptLine."Order No.");
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify.
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE FIFOPurchaseItemTrackingOverridesCostingMethod@11();
    VAR
      Item@1000 : Record 27;
    BEGIN
      PurchaseLotTrackingOverridesCostingMethod(Item."Costing Method"::FIFO,FALSE);
    END;

    [Test]
    PROCEDURE FIFOSKUPurchaseItemTrackingOverridesCostingMethod@13();
    VAR
      Item@1000 : Record 27;
    BEGIN
      PurchaseLotTrackingOverridesCostingMethod(Item."Costing Method"::FIFO,TRUE);
    END;

    [Test]
    PROCEDURE LIFOPurchaseItemTrackingOverridesCostingMethod@18();
    VAR
      Item@1000 : Record 27;
    BEGIN
      PurchaseLotTrackingOverridesCostingMethod(Item."Costing Method"::LIFO,FALSE);
    END;

    [Test]
    PROCEDURE LIFOSKUPurchaseItemTrackingOverridesCostingMethod@19();
    VAR
      Item@1000 : Record 27;
    BEGIN
      PurchaseLotTrackingOverridesCostingMethod(Item."Costing Method"::LIFO,TRUE);
    END;

    LOCAL PROCEDURE PurchaseLotTrackingOverridesCostingMethod@12(CostingMethod@1003 : Option;MakeSKU@1002 : Boolean);
    VAR
      ItemTrackingCode@1004 : Record 6502;
      Item@1001 : Record 27;
      StockkeepingUnit@1000 : Record 5700;
      SalesHeader@1009 : Record 36;
      SalesLine@1007 : Record 37;
    BEGIN
      // Setup Item Tracking Code, Item and SKU.
      Initialize;
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      LibraryPatterns.MAKEItem(Item,CostingMethod,0,0,0,ItemTrackingCode.Code);
      IF MakeSKU THEN
        LibraryPatterns.MAKEStockkeepingUnit(StockkeepingUnit,Item);

      // Inventory flow.
      LibraryPatterns.GRPH3Purch1SalesItemTracked(
        SalesLine,Item,StockkeepingUnit."Location Code",StockkeepingUnit."Variant Code",FALSE,FALSE);
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");

      // Exercise.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify.
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE AvgReversePurchInvoicePartRcpt@21();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePosting(Item."Costing Method"::Average,FALSE,TRUE);
    END;

    [Test]
    PROCEDURE AvgReversePurchPartRcpt@15();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePosting(Item."Costing Method"::Average,FALSE,FALSE);
    END;

    [Test]
    PROCEDURE AvgSKUReversePurchInvoicePartRcpt@49();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePosting(Item."Costing Method"::Average,TRUE,TRUE);
    END;

    [Test]
    PROCEDURE FIFOReversePurchInvoicePartRcpt@44();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePosting(Item."Costing Method"::FIFO,FALSE,TRUE);
    END;

    [Test]
    PROCEDURE FIFOReversePurchPartRcpt@43();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePosting(Item."Costing Method"::FIFO,FALSE,FALSE);
    END;

    [Test]
    PROCEDURE FIFOSKUReversePurchPartRcpt@50();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePosting(Item."Costing Method"::FIFO,TRUE,FALSE);
    END;

    [Test]
    PROCEDURE LIFOReversePurchInvoicePartRcpt@20();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePosting(Item."Costing Method"::LIFO,FALSE,TRUE);
    END;

    [Test]
    PROCEDURE LIFOReversePurchPartRcpt@17();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePosting(Item."Costing Method"::LIFO,FALSE,FALSE);
    END;

    [Test]
    PROCEDURE LIFOSKUReversePurchPartRcpt@16();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePosting(Item."Costing Method"::LIFO,TRUE,FALSE);
    END;

    [Test]
    PROCEDURE STDReversePurchInvoicePartRcpt@48();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePosting(Item."Costing Method"::Standard,FALSE,TRUE);
    END;

    [Test]
    PROCEDURE STDReversePurchPartRcpt@47();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePosting(Item."Costing Method"::Standard,FALSE,FALSE);
    END;

    [Test]
    PROCEDURE STDSKUReversePurchInvoicePartRcpt@51();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePosting(Item."Costing Method"::Standard,TRUE,TRUE);
    END;

    LOCAL PROCEDURE ReversePurchasePosting@14(CostingMethod@1011 : Option;MakeSKU@1012 : Boolean;InvoicePartialReceipt@1006 : Boolean);
    VAR
      Item@1000 : Record 27;
      StockkeepingUnit@1015 : Record 5700;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      PurchRcptLine@1009 : Record 121;
      TempItemLedgerEntry@1001 : TEMPORARY Record 32;
      PurchaseHeader1@1003 : Record 38;
      PurchaseLine1@1002 : Record 39;
    BEGIN
      // Setup Item and SKU.
      Initialize;
      LibraryPatterns.MAKEItem(Item,CostingMethod,0,0,0,'');
      IF MakeSKU THEN
        LibraryPatterns.MAKEStockkeepingUnit(StockkeepingUnit,Item);

      // Inventory Flow.
      LibraryPatterns.GRPHPurchPartialRcvd1PurchReturn(
        TempItemLedgerEntry,PurchaseLine,PurchaseLine1,Item,StockkeepingUnit."Location Code",StockkeepingUnit."Variant Code",
        InvoicePartialReceipt);
      PurchaseLine1.VALIDATE(Quantity,PurchaseLine.Quantity);
      PurchaseLine1.MODIFY;

      // Extract the Purchase Receipt No. from the ILEs.
      TempItemLedgerEntry.SETRANGE(Positive,TRUE);
      TempItemLedgerEntry.FINDFIRST;
      PurchRcptLine.GET(TempItemLedgerEntry."Document No.",TempItemLedgerEntry."Document Line No.");

      // Cost modification.
      // for Purchase.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);
      LibraryPatterns.ASSIGNPurchChargeToPurchRcptLine(
        PurchaseHeader,PurchRcptLine,LibraryRandom.RandInt(10),LibraryRandom.RandDec(100,5));
      LibraryPatterns.ASSIGNPurchChargeToPurchaseLine(
        PurchaseHeader,PurchaseLine,LibraryRandom.RandInt(10),LibraryRandom.RandDec(100,5));
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      // for Purchase Return.
      PurchaseHeader1.GET(PurchaseLine1."Document Type",PurchaseLine1."Document No.");
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader1);
      LibraryPatterns.ASSIGNPurchChargeToPurchReturnLine(
        PurchaseHeader1,PurchaseLine1,LibraryRandom.RandInt(10),LibraryRandom.RandDec(100,5));

      // Exercise.
      PurchaseHeader1.VALIDATE("Vendor Cr. Memo No.",LibraryUtility.GenerateGUID);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader1,TRUE,TRUE);
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify.
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE AvgReversePurchInvoicePartRcptWApplnNoReturnInv@23();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePostingWithApplication(Item."Costing Method"::Average,FALSE,TRUE,FALSE);
    END;

    [Test]
    PROCEDURE AvgReversePurchPartRcptWApplnInvReturn@22();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePostingWithApplication(Item."Costing Method"::Average,FALSE,FALSE,TRUE);
    END;

    [Test]
    PROCEDURE AvgReversePurchInvoicePartRcptWApplnNoInvoices@29();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePostingWithApplication(Item."Costing Method"::Average,FALSE,FALSE,FALSE);
    END;

    [Test]
    PROCEDURE AvgReversePurchPartRcptWApplnInvoiceAll@28();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePostingWithApplication(Item."Costing Method"::Average,FALSE,TRUE,TRUE);
    END;

    [Test]
    PROCEDURE FIFOReversePurchInvoicePartRcptWApplnNoReturnInv@56();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePostingWithApplication(Item."Costing Method"::FIFO,FALSE,TRUE,FALSE);
    END;

    [Test]
    PROCEDURE FIFOReversePurchPartRcptWApplnInvReturn@55();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePostingWithApplication(Item."Costing Method"::FIFO,FALSE,FALSE,TRUE);
    END;

    [Test]
    PROCEDURE FIFOReversePurchInvoicePartRcptWApplnNoInvoices@54();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePostingWithApplication(Item."Costing Method"::FIFO,FALSE,FALSE,FALSE);
    END;

    [Test]
    PROCEDURE FIFOReversePurchPartRcptWApplnInvoiceAll@53();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePostingWithApplication(Item."Costing Method"::FIFO,FALSE,TRUE,TRUE);
    END;

    [Test]
    PROCEDURE LIFOReversePurchInvoicePartRcptWApplnNoReturnInv@31();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePostingWithApplication(Item."Costing Method"::LIFO,FALSE,TRUE,FALSE);
    END;

    [Test]
    PROCEDURE LIFOReversePurchPartRcptWApplnInvReturn@30();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePostingWithApplication(Item."Costing Method"::LIFO,FALSE,FALSE,TRUE);
    END;

    [Test]
    PROCEDURE LIFOReversePurchInvoicePartRcptWApplnNoInvoices@27();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePostingWithApplication(Item."Costing Method"::LIFO,FALSE,FALSE,FALSE);
    END;

    [Test]
    PROCEDURE LIFOReversePurchPartRcptWApplnInvoiceAll@26();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePostingWithApplication(Item."Costing Method"::LIFO,FALSE,TRUE,TRUE);
    END;

    [Test]
    PROCEDURE STDReversePurchInvoicePartRcptWApplnNoReturnInv@60();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePostingWithApplication(Item."Costing Method"::Standard,FALSE,TRUE,FALSE);
    END;

    [Test]
    PROCEDURE STDReversePurchPartRcptWApplnInvReturn@59();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePostingWithApplication(Item."Costing Method"::Standard,FALSE,FALSE,TRUE);
    END;

    [Test]
    PROCEDURE STDReversePurchInvoicePartRcptWApplnNoInvoices@58();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePostingWithApplication(Item."Costing Method"::Standard,FALSE,FALSE,FALSE);
    END;

    [Test]
    PROCEDURE STDReversePurchPartRcptWApplnInvoiceAll@57();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchasePostingWithApplication(Item."Costing Method"::Standard,FALSE,TRUE,TRUE);
    END;

    LOCAL PROCEDURE ReversePurchasePostingWithApplication@24(CostingMethod@1011 : Option;MakeSKU@1012 : Boolean;InvoicePurchase@1006 : Boolean;InvoicePurchReturn@1007 : Boolean);
    VAR
      Item@1000 : Record 27;
      StockkeepingUnit@1015 : Record 5700;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      PurchRcptLine@1009 : Record 121;
      TempItemLedgerEntry@1001 : TEMPORARY Record 32;
      PurchaseHeader1@1003 : Record 38;
      PurchaseLine1@1002 : Record 39;
    BEGIN
      // Setup Item and SKU.
      Initialize;
      LibraryPatterns.MAKEItem(Item,CostingMethod,0,0,0,'');
      IF MakeSKU THEN
        LibraryPatterns.MAKEStockkeepingUnit(StockkeepingUnit,Item);

      // Inventory Flow.
      LibraryPatterns.GRPHPurchPartialRcvd1PurchReturn(
        TempItemLedgerEntry,PurchaseLine,PurchaseLine1,Item,StockkeepingUnit."Location Code",StockkeepingUnit."Variant Code",FALSE);

      // Extract the Purchase Receipt No. from the ILEs.
      TempItemLedgerEntry.SETRANGE(Positive,TRUE);
      TempItemLedgerEntry.FINDLAST;
      PurchRcptLine.GET(TempItemLedgerEntry."Document No.",TempItemLedgerEntry."Document Line No.");

      // Cost modification.
      // Apply charge to last Purchase Receipt.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);
      LibraryPatterns.ASSIGNPurchChargeToPurchRcptLine(
        PurchaseHeader,PurchRcptLine,LibraryRandom.RandInt(10),LibraryRandom.RandDec(100,5));
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,InvoicePurchase);

      // Apply return to charged receipt.
      PurchaseLine1.VALIDATE(Quantity,PurchRcptLine.Quantity);
      PurchaseLine1.VALIDATE("Appl.-to Item Entry",TempItemLedgerEntry."Entry No.");
      PurchaseLine1.MODIFY;

      // Exercise.
      PurchaseHeader1.GET(PurchaseLine1."Document Type",PurchaseLine1."Document No.");
      PurchaseHeader1.VALIDATE("Vendor Cr. Memo No.",LibraryUtility.GenerateGUID);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader1,TRUE,InvoicePurchReturn);
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify.
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE FIFOReverseChargePurchRcpt@32();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchaseCharge(Item."Costing Method"::FIFO,FALSE,FALSE);
    END;

    [Test]
    PROCEDURE LIFOReverseChargePurchRcpt@38();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchaseCharge(Item."Costing Method"::LIFO,FALSE,FALSE);
    END;

    [Test]
    PROCEDURE AvgReverseChargePurchRcpt@39();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchaseCharge(Item."Costing Method"::Average,FALSE,FALSE);
    END;

    LOCAL PROCEDURE ReversePurchaseCharge@25(CostingMethod@1011 : Option;MakeSKU@1012 : Boolean;InvoicePartialReceipt@1006 : Boolean);
    VAR
      Item@1000 : Record 27;
      StockkeepingUnit@1015 : Record 5700;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      PurchRcptLine@1009 : Record 121;
      TempItemLedgerEntry@1001 : TEMPORARY Record 32;
      PurchaseHeader1@1003 : Record 38;
      PurchaseLine1@1002 : Record 39;
    BEGIN
      // Setup Item and SKU.
      Initialize;
      LibraryPatterns.MAKEItem(Item,CostingMethod,0,0,0,'');
      IF MakeSKU THEN
        LibraryPatterns.MAKEStockkeepingUnit(StockkeepingUnit,Item);

      // Inventory Flow.
      LibraryPatterns.GRPHPurchPartialRcvd1PurchReturn(
        TempItemLedgerEntry,PurchaseLine,PurchaseLine1,Item,StockkeepingUnit."Location Code",StockkeepingUnit."Variant Code",
        InvoicePartialReceipt);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Extract the Purchase Receipt No. from the ILEs.
      TempItemLedgerEntry.SETRANGE(Positive,TRUE);
      TempItemLedgerEntry.FINDFIRST;
      PurchRcptLine.GET(TempItemLedgerEntry."Document No.",TempItemLedgerEntry."Document Line No.");

      // Cost modification.
      // for Purchase Return.
      PurchaseHeader1.GET(PurchaseLine1."Document Type",PurchaseLine1."Document No.");
      LibraryPatterns.ASSIGNPurchChargeToPurchRcptLine(
        PurchaseHeader1,PurchRcptLine,LibraryRandom.RandInt(10),LibraryRandom.RandDec(100,5));

      // Exercise.
      PurchaseHeader1.VALIDATE("Vendor Cr. Memo No.",LibraryUtility.GenerateGUID);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader1,TRUE,TRUE);
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify.
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE FIFOReversePurchOnlyInvoice@37();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchaseOnlyInvoice(Item."Costing Method"::FIFO,FALSE);
    END;

    [Test]
    PROCEDURE LIFOReversePurchOnlyInvoice@61();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchaseOnlyInvoice(Item."Costing Method"::LIFO,FALSE);
    END;

    [Test]
    PROCEDURE AvgReversePurchOnlyInvoice@62();
    VAR
      Item@1000 : Record 27;
    BEGIN
      ReversePurchaseOnlyInvoice(Item."Costing Method"::Average,FALSE);
    END;

    LOCAL PROCEDURE ReversePurchaseOnlyInvoice@41(CostingMethod@1011 : Option;MakeSKU@1012 : Boolean);
    VAR
      Item@1000 : Record 27;
      StockkeepingUnit@1015 : Record 5700;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      PurchaseHeader1@1003 : Record 38;
      PurchaseLine1@1002 : Record 39;
    BEGIN
      // Setup Item and SKU.
      Initialize;
      LibraryPatterns.MAKEItem(Item,CostingMethod,0,0,0,'');
      IF MakeSKU THEN
        LibraryPatterns.MAKEStockkeepingUnit(StockkeepingUnit,Item);

      // Inventory Flow.
      LibraryPatterns.MAKEPurchaseInvoice(
        PurchaseHeader,PurchaseLine,Item,StockkeepingUnit."Location Code",StockkeepingUnit."Variant Code",
        LibraryRandom.RandInt(10),WORKDATE,LibraryRandom.RandDec(100,5));
      LibraryPatterns.MAKEPurchaseReturnOrder(
        PurchaseHeader1,PurchaseLine1,Item,StockkeepingUnit."Location Code",StockkeepingUnit."Variant Code",PurchaseLine.Quantity,
        WORKDATE + 1,LibraryRandom.RandDec(100,5));

      // Cost modification.
      // for Purchase.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPatterns.ASSIGNPurchChargeToPurchaseLine(
        PurchaseHeader,PurchaseLine,LibraryRandom.RandInt(10),LibraryRandom.RandDec(100,5));
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      // for Purchase Return.
      PurchaseHeader1.GET(PurchaseLine1."Document Type",PurchaseLine1."Document No.");
      LibraryPatterns.ASSIGNPurchChargeToPurchReturnLine(
        PurchaseHeader1,PurchaseLine1,LibraryRandom.RandInt(10),LibraryRandom.RandDec(100,5));

      // Exercise.
      PurchaseHeader1.VALIDATE("Vendor Cr. Memo No.",LibraryUtility.GenerateGUID);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader1,TRUE,TRUE);
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify.
      LibraryCosting.CheckAdjustment(Item);
    END;

    [Test]
    PROCEDURE FIFOInvoiceChargeForPurchase@36();
    VAR
      Item@1000 : Record 27;
    BEGIN
      InvoiceChargeForPurchase(Item."Costing Method"::FIFO,FALSE,FALSE);
    END;

    [Test]
    PROCEDURE FIFOPartiallyInvoiceChargeForPurchase@42();
    VAR
      Item@1000 : Record 27;
    BEGIN
      InvoiceChargeForPurchase(Item."Costing Method"::FIFO,FALSE,TRUE);
    END;

    [Test]
    PROCEDURE FIFOSKUInvoiceChargeForPurchase@40();
    VAR
      Item@1000 : Record 27;
    BEGIN
      InvoiceChargeForPurchase(Item."Costing Method"::FIFO,TRUE,FALSE);
    END;

    [Test]
    PROCEDURE FIFOSKUPartiallyInvoiceChargeForPurchase@45();
    VAR
      Item@1000 : Record 27;
    BEGIN
      InvoiceChargeForPurchase(Item."Costing Method"::FIFO,TRUE,TRUE);
    END;

    [Test]
    PROCEDURE AvgInvoiceChargeForPurchase@65();
    VAR
      Item@1000 : Record 27;
    BEGIN
      InvoiceChargeForPurchase(Item."Costing Method"::Average,FALSE,FALSE);
    END;

    [Test]
    PROCEDURE AvgPartiallyInvoiceChargeForPurchase@64();
    VAR
      Item@1000 : Record 27;
    BEGIN
      InvoiceChargeForPurchase(Item."Costing Method"::Average,FALSE,TRUE);
    END;

    [Test]
    PROCEDURE AvgSKUInvoiceChargeForPurchase@63();
    VAR
      Item@1000 : Record 27;
    BEGIN
      InvoiceChargeForPurchase(Item."Costing Method"::Average,TRUE,FALSE);
    END;

    [Test]
    PROCEDURE AvgSKUPartiallyInvoiceChargeForPurchase@52();
    VAR
      Item@1000 : Record 27;
    BEGIN
      InvoiceChargeForPurchase(Item."Costing Method"::Average,TRUE,TRUE);
    END;

    [Test]
    PROCEDURE StdInvoiceChargeForPurchase@69();
    VAR
      Item@1000 : Record 27;
    BEGIN
      InvoiceChargeForPurchase(Item."Costing Method"::Average,FALSE,FALSE);
    END;

    [Test]
    PROCEDURE StdPartiallyInvoiceChargeForPurchase@68();
    VAR
      Item@1000 : Record 27;
    BEGIN
      InvoiceChargeForPurchase(Item."Costing Method"::Standard,FALSE,TRUE);
    END;

    [Test]
    PROCEDURE StdSKUInvoiceChargeForPurchase@67();
    VAR
      Item@1000 : Record 27;
    BEGIN
      InvoiceChargeForPurchase(Item."Costing Method"::Standard,TRUE,FALSE);
    END;

    [Test]
    PROCEDURE StdSKUPartiallyInvoiceChargeForPurchase@66();
    VAR
      Item@1000 : Record 27;
    BEGIN
      InvoiceChargeForPurchase(Item."Costing Method"::Standard,TRUE,TRUE);
    END;

    [Test]
    PROCEDURE LIFOInvoiceChargeForPurchase@73();
    VAR
      Item@1000 : Record 27;
    BEGIN
      InvoiceChargeForPurchase(Item."Costing Method"::LIFO,FALSE,FALSE);
    END;

    [Test]
    PROCEDURE LIFOPartiallyInvoiceChargeForPurchase@72();
    VAR
      Item@1000 : Record 27;
    BEGIN
      InvoiceChargeForPurchase(Item."Costing Method"::LIFO,FALSE,TRUE);
    END;

    [Test]
    PROCEDURE LIFOSKUInvoiceChargeForPurchase@71();
    VAR
      Item@1000 : Record 27;
    BEGIN
      InvoiceChargeForPurchase(Item."Costing Method"::LIFO,TRUE,FALSE);
    END;

    [Test]
    PROCEDURE LIFOSKUPartiallyInvoiceChargeForPurchase@70();
    VAR
      Item@1000 : Record 27;
    BEGIN
      InvoiceChargeForPurchase(Item."Costing Method"::LIFO,TRUE,TRUE);
    END;

    LOCAL PROCEDURE InvoiceChargeForPurchase@33(CostingMethod@1003 : Option;MakeSKU@1002 : Boolean;PartialPosting@1010 : Boolean);
    VAR
      Item@1000 : Record 27;
      StockkeepingUnit@1001 : Record 5700;
      PurchaseHeader1@1004 : Record 38;
      PurchaseHeader2@1005 : Record 38;
      PurchaseHeaderInv@1006 : Record 38;
      PurchRcptLine@1009 : Record 121;
      Qty@1140 : Decimal;
      InvoiceQty@1150 : Decimal;
    BEGIN
      // Setup Item and SKU.
      Initialize;
      LibraryPatterns.MAKEItem(Item,CostingMethod,0,0,0,'');
      IF MakeSKU THEN
        LibraryPatterns.MAKEStockkeepingUnit(StockkeepingUnit,Item);

      // Inventory Flow.
      IF PartialPosting THEN BEGIN
        Qty := LibraryRandom.RandDec(100,2);
        InvoiceQty := LibraryRandom.RandDecInRange(0,1,1) * Qty;
        LibraryPatterns.POSTPurchaseOrderPartially(
          PurchaseHeader1,Item,StockkeepingUnit."Location Code",StockkeepingUnit."Variant Code",Qty,WORKDATE,
          LibraryRandom.RandDec(100,5),TRUE,LibraryRandom.RandDecInDecimalRange(InvoiceQty,Qty,2),TRUE,InvoiceQty);

        Qty := LibraryRandom.RandDec(100,2);
        InvoiceQty := LibraryRandom.RandDecInRange(0,1,1) * Qty;
        LibraryPatterns.POSTPurchaseOrderPartially(
          PurchaseHeader2,Item,StockkeepingUnit."Location Code",StockkeepingUnit."Variant Code",Qty,WORKDATE + 1,
          LibraryRandom.RandDec(100,5),TRUE,LibraryRandom.RandDecInDecimalRange(InvoiceQty,Qty,2),TRUE,InvoiceQty);
      END ELSE BEGIN
        Qty := LibraryRandom.RandDec(100,2);
        InvoiceQty := LibraryRandom.RandDecInRange(0,1,1) * Qty;
        LibraryPatterns.POSTPurchaseOrderPartially(
          PurchaseHeader1,Item,StockkeepingUnit."Location Code",StockkeepingUnit."Variant Code",Qty,WORKDATE,
          LibraryRandom.RandDec(100,5),TRUE,Qty,TRUE,InvoiceQty);

        Qty := LibraryRandom.RandDec(100,2);
        InvoiceQty := LibraryRandom.RandDecInRange(0,1,1) * Qty;
        LibraryPatterns.POSTPurchaseOrderPartially(
          PurchaseHeader2,Item,StockkeepingUnit."Location Code",StockkeepingUnit."Variant Code",Qty,WORKDATE + 1,
          LibraryRandom.RandDec(100,5),TRUE,Qty,TRUE,InvoiceQty);
      END;

      // Cost modification.
      LibraryPurchase.CreatePurchHeader(PurchaseHeaderInv,PurchaseHeaderInv."Document Type"::Invoice,'');
      PurchaseHeaderInv.VALIDATE("Posting Date",WORKDATE + 3);
      PurchRcptLine.SETRANGE("Order No.",PurchaseHeader1."No.");
      PurchRcptLine.FINDFIRST;
      LibraryPatterns.ASSIGNPurchChargeToPurchRcptLine(
        PurchaseHeaderInv,PurchRcptLine,LibraryRandom.RandInt(10),LibraryRandom.RandDec(100,5));
      PurchRcptLine.SETRANGE("Order No.",PurchaseHeader2."No.");
      PurchRcptLine.FINDFIRST;
      LibraryPatterns.ASSIGNPurchChargeToPurchRcptLine(
        PurchaseHeaderInv,PurchRcptLine,LibraryRandom.RandInt(10),LibraryRandom.RandDec(100,5));

      // Exercise.
      PurchaseHeader1.GET(PurchaseHeader1."Document Type",PurchaseHeader1."No.");
      PurchaseHeader1.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader1,TRUE,TRUE);
      PurchaseHeader2.GET(PurchaseHeader2."Document Type",PurchaseHeader2."No.");
      PurchaseHeader2.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader2,TRUE,TRUE);
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // Verify.
      LibraryCosting.CheckAdjustment(Item);
    END;

    BEGIN
    {
      // [FEATURE] [Adjust Cost Item Entries] [SCM]
      This CodeUnit covers the patterns in the first 6 suites of CETAF:
      - Purchase Order by Quantity
      - Purchase Order by Value
      - Purchase Returns by Quantity, Value and Purchase Credit Memo;
      - Purchase Charges
    }
    END.
  }
}

