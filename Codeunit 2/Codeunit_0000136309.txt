OBJECT Codeunit 136309 Job Posting
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1022 : Codeunit 130000;
      LibraryJob@1002 : Codeunit 131920;
      LibraryERM@1006 : Codeunit 131300;
      LibraryInventory@1013 : Codeunit 132201;
      LibraryItemTracking@1032 : Codeunit 130502;
      LibraryPurchase@1010 : Codeunit 130512;
      LibraryResource@1001 : Codeunit 130511;
      LibrarySales@1016 : Codeunit 130509;
      LibraryUtility@1012 : Codeunit 131000;
      LibraryService@1019 : Codeunit 131902;
      LibraryWarehouse@1028 : Codeunit 132204;
      LibraryRandom@1042 : Codeunit 130440;
      LibraryVariableStorage@1007 : Codeunit 131004;
      TargetJobNo@1003 : Code[20];
      JournalTemplateName@1005 : Code[10];
      SerialNo@1011 : ARRAY [15] OF Code[20];
      IsInitialized@1000 : Boolean;
      VerifyTrackingLine@1014 : Boolean;
      FromSource@1004 : 'Job Planning Lines,Job Ledger Entries,None';
      Amount@1015 : Decimal;
      Cost@1023 : Decimal;
      AmountFCY@1017 : Decimal;
      CostFCY@1018 : Decimal;
      InvoicedCostFCY@1021 : Decimal;
      ValueMatchError@1025 : TextConst '@@@="%1=Field name, %2=Table name,%3=Table name";ENU=%1 must not be same in %2 and %3.';
      BlockedErr@1020 : TextConst 'ENU="Blocked must be equal to ''No''  in Item: No.=%1. Current value is ''Yes''."';
      SalesDocumentMsg@1024 : TextConst 'ENU=Sales Document should not be created.';
      JobNotExistErr@1026 : TextConst '@@@="%1 - Table Caption;%2 - Field Value.";ENU=%1 %2 does not exist.';
      DimensionMustMatchMsg@1027 : TextConst 'ENU=Global Dimension must match';
      BinContentNotDeletedErr@1029 : TextConst 'ENU=Bin content must be deleted after reverting the receipt.';
      WrongJobCurrencyCodeErr@1030 : TextConst 'ENU=Wrong Job Currency Code';
      JobWithManualNoCreatedErr@1057 : TextConst 'ENU=Job with manual number is created.';
      ApplToItemEntryErr@1031 : TextConst 'ENU=Field "Appl.-to Item Entry" on Reservation Entry must be equal to correspondent Reservation Entry No.';

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE PostJobJournalLine@10();
    VAR
      JobJournalLine@1001 : Record 210;
      JobTask@1000 : Record 1001;
      RandomInput@1002 : Decimal;
    BEGIN
      // Check value of Job Ledger Entries and Job Planning Line exist or not after posting Job Journal Line.

      // 1. Setup: Create Job with Job Task, Resource and Job Journal Line.
      Initialize;
      RandomInput := RANDOM(10) + LibraryUtility.GenerateRandomFraction;  // Using Random Value for Quantity,Unit Cost and Unit Price.
      CreateJobWithJobTask(JobTask);
      CreateJobJournalLine(
        LibraryJob.UsageLineTypeBoth,JobJournalLine.Type::Resource,JobJournalLine,JobTask,LibraryResource.CreateResourceNo,
        RandomInput,RandomInput,RandomInput);  // Using Random because value is not important.

      // 2. Exercise: Post Job Journal Line.
      LibraryJob.PostJobJournal(JobJournalLine);

      // 3. Verify: Verify posted values in Job Ledger Entry and Job Planning Line.
      VerifyJobLedgerEntry(JobJournalLine);
      VerifyJobPlanningLine(JobJournalLine,LibraryJob.PlanningLineTypeSchedule);
      VerifyJobPlanningLine(JobJournalLine,LibraryJob.PlanningLineTypeContract);
    END;

    [Test]
    PROCEDURE JobOnOrderByPage@17();
    VAR
      Job@1000 : Record 167;
    BEGIN
      // Verify creation of Job by page with Status type Order.

      Initialize;
      CreateJobCardAndVerifyData(Job.Status::Order);
    END;

    [Test]
    PROCEDURE JobOnPlanningByPage@1();
    VAR
      Job@1000 : Record 167;
    BEGIN
      // Verify creation of Job by page with Status type Planning.

      Initialize;
      CreateJobCardAndVerifyData(Job.Status::Planning);
    END;

    LOCAL PROCEDURE CreateJobCardAndVerifyData@16(Status@1001 : Option);
    VAR
      Job@1000 : Record 167;
      JobNo@1002 : Code[20];
    BEGIN
      // Setup: Create Job using record.
      CreateJob(Job,Status);

      // Exercise: Create Job using page.
      JobNo := CreateJobCard(Job);

      // Verify: Compare Job created using page with Job created using record.
      VerifyJob(Job,JobNo);
    END;

    [Test]
    [HandlerFunctions(CopyJobHandler,JobTaskListHandler,MessageHandler)]
    PROCEDURE CopyJobPlanningLines@7();
    VAR
      JobTask@1000 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      JobPlanningLine2@1002 : Record 1003;
      RandomInput@1003 : Decimal;
    BEGIN
      // Test functionality of Copy Job with From Source as Job Planning Lines.

      // 1. Setup: Create Job, Job Task and Job Planning Lines.
      Initialize;
      RandomInput := RANDOM(10) + LibraryUtility.GenerateRandomFraction;  // Using Random Value for Quantity,Unit Cost and Unit Price.
      CreateJobWithJobTask(JobTask);
      CreateJobPlanningLine(
        JobPlanningLine,LibraryJob.PlanningLineTypeSchedule,LibraryJob.ResourceType,JobTask,LibraryResource.CreateResourceNo,
        RandomInput,RandomInput,RandomInput);  // Using Random because value is not important.
      CreateJobPlanningLine(
        JobPlanningLine2,LibraryJob.PlanningLineTypeContract,LibraryJob.ResourceType,JobTask,LibraryResource.CreateResourceNo,
        RandomInput,RandomInput,RandomInput);    // Using Random because value is not important.
      TargetJobNo := GenerateJobNo;  // Use TargetJobNo as global for CopyJobHandler.

      // 2. Exercise: Run Copy Job with From Source as Job Planning Lines.
      FromSource := FromSource::"Job Planning Lines";  // Use FromSource as global for CopyJobHandler.
      RunCopyJob(JobTask."Job No.");

      // 3. Verify: Verify Job Planning Lines are copied successfully.
      VerifyValuesOnJobPlanningLine(
        TargetJobNo,JobPlanningLine."Job Task No.",JobPlanningLine."Line No.",JobPlanningLine."Line Type",JobPlanningLine."No.",
        JobPlanningLine.Quantity,JobPlanningLine."Unit Price");
      VerifyValuesOnJobPlanningLine(
        TargetJobNo,JobPlanningLine2."Job Task No.",JobPlanningLine2."Line No.",JobPlanningLine2."Line Type",JobPlanningLine2."No.",
        JobPlanningLine2.Quantity,JobPlanningLine2."Unit Price");
    END;

    [Test]
    [HandlerFunctions(CopyJobHandler,JobTaskListHandler,MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE CopyJobLedgerLines@5();
    VAR
      JobTask@1000 : Record 1001;
      JobJournalLine@1002 : Record 210;
      JobPlanningLine@1001 : Record 1003;
      RandomInput@1003 : Decimal;
    BEGIN
      // Test functionality of Copy Job with From Source as Job Ledger Entries.

      // 1. Setup: Create Job, Job Task and Job Planning Lines. Create and post Job journal Line.
      Initialize;
      RandomInput := RANDOM(10) + LibraryUtility.GenerateRandomFraction;  // Using Random Value for Quantity,Unit Cost and Unit Price.
      CreateJobWithJobTask(JobTask);
      CreateJobPlanningLine(
        JobPlanningLine,LibraryJob.PlanningLineTypeSchedule,LibraryJob.ResourceType,JobTask,LibraryResource.CreateResourceNo,
        RandomInput,RandomInput,RandomInput);  // Using Random because value is not important.
      CreateJobJournalLine(
        LibraryJob.UsageLineTypeBoth,JobJournalLine.Type::Resource,JobJournalLine,JobTask,LibraryResource.CreateResourceNo,
        RandomInput,RandomInput,RandomInput);  // Using Random because value is not important.
      LibraryJob.PostJobJournal(JobJournalLine);
      TargetJobNo := GenerateJobNo;  // Use TargetJobNo as global for CopyJobHandler.

      // 2. Exercise:  Run Copy Job with From Source as Job Ledger Entries.
      FromSource := FromSource::"Job Ledger Entries";  // Use FromSource as global for CopyJobHandler.
      RunCopyJob(JobTask."Job No.");

      // 3. Verify: Verify values of Job Planning Line are replaced by Job Ledger Entry.
      VerifyValuesOnJobPlanningLine(
        TargetJobNo,JobPlanningLine."Job Task No.",JobPlanningLine."Line No.",JobPlanningLine."Line Type",JobJournalLine."No.",
        JobJournalLine.Quantity,JobJournalLine."Unit Price");
    END;

    [Test]
    PROCEDURE PostJobGLJournalLine@14();
    VAR
      GenJournalLine@1000 : Record 81;
      JobTask@1001 : Record 1001;
    BEGIN
      // Check value of Job Ledger Entries and Job Planning Line exist or not after posting Job G/L Journal Line.

      // 1. Setup: Create Job with Job Task and a Job G/L Journal line.
      Initialize;
      CreateJobWithJobTask(JobTask);
      CreateJobGLJournalLine(GenJournalLine,JobTask);

      // 2. Exercise: Post Job G/L Journal Line.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify posted values in Job Ledger Entry and Job Planning Lines.
      VerifyJobLedgerEntryUsingGeneralJournalLine(GenJournalLine);
      VerifyJobPlanningLineUsingGeneralJournalLine(GenJournalLine);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE PostingPurchaseOrderWithItemTracking@42();
    VAR
      ItemLedgerEntry@1000 : Record 32;
      PurchaseLine@1003 : Record 39;
      DocumentNo@1010 : Code[20];
    BEGIN
      // Verify Remaining Quantity on Item Ledger Entry after posting Purchase Order with Item Tracking Lines.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Create and Receive Purchase Order.
      LibraryVariableStorage.Enqueue(FALSE);
      LibraryVariableStorage.Enqueue(LibraryUtility.GenerateGUID);
      DocumentNo := PostPurchaseOrderWithItemTracking(PurchaseLine,FALSE);

      // 3. Verify: Verify Cost,Invoiced and Remaining Quantity on Item Ledger Entry.
      VerifyItemLedgerEntry(DocumentNo,ItemLedgerEntry."Entry Type"::Purchase,PurchaseLine.Quantity,0,0);  // Invoiced Quantity and Cost must be zero.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSelectEntriesPageHandler,JobJournalTemplateListPageHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE PostingJobJournalWithItemTracking@41();
    VAR
      ItemLedgerEntry@1001 : Record 32;
      GeneralPostingSetup@1002 : Record 252;
      GLAccount@1009 : Record 15;
      JobJournalLine@1005 : Record 210;
      JobTask@1006 : Record 1001;
      PurchaseLine@1003 : Record 39;
      DocumentNo@1000 : Code[20];
    BEGIN
      // Verify Remaining Quantity on Item Ledger Entry after posting Job Journal Line with Item Tracking Lines.

      // 1. Setup: Create Purchase Order With Item Tracking Lines, Post Purchase Order, Create a Job and Job Task, Create Job Journal Line.
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryVariableStorage.Enqueue(FALSE);
      LibraryVariableStorage.Enqueue(LibraryUtility.GenerateGUID);
      DocumentNo := PostPurchaseOrderWithItemTracking(PurchaseLine,FALSE);

      // Update General Posting Setup.
      GeneralPostingSetup.GET('',PurchaseLine."Gen. Prod. Posting Group");  // Gen. Bus. Posting Group is blank for Job.
      UpdateGeneralPostingSetup(GeneralPostingSetup,GLAccount."No.");
      CreateJobWithJobTask(JobTask);
      LibraryVariableStorage.Enqueue(TRUE);
      CreateJobJournalLineWithItemTracking(JobJournalLine,JobTask,PurchaseLine."No.",PurchaseLine.Quantity);
      AssignItemTrackingLinesOnJobJournal(JobJournalLine);

      // 2. Exercise: Post Job Journal Line.
      LibraryJob.PostJobJournal(JobJournalLine);

      // 3. Verify: Verify Cost,Invoiced and Remaining Quantity on Item Ledger Entry.
      VerifyItemLedgerEntry(DocumentNo,ItemLedgerEntry."Entry Type"::Purchase,0,0,0);  // Cost, Remaining and Invoiced Quantity must be zero.
      VerifyItemLedgerEntry(
        JobJournalLine."Document No.",ItemLedgerEntry."Entry Type"::"Negative Adjmt.",0,-PurchaseLine.Quantity,
        -JobJournalLine."Total Cost");  // Remaining Quantity must be zero.

      // 4. Tear Down.
      UpdateGeneralPostingSetup(GeneralPostingSetup,GeneralPostingSetup."Inventory Adjmt. Account");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,JobJournalTemplateListPageHandler,ConfirmHandlerTrue,ItemTrackingSelectEntriesPageHandler,MessageHandler)]
    PROCEDURE PostingJobJournalWithItemTrackingAndNegativeQuantity@40();
    VAR
      ItemLedgerEntry@1000 : Record 32;
      GeneralPostingSetup@1001 : Record 252;
      GLAccount@1002 : Record 15;
      JobJournalLine@1005 : Record 210;
      JobTask@1004 : Record 1001;
      PurchaseLine@1003 : Record 39;
      LotNo@1006 : Code[20];
    BEGIN
      // Verify Remaining Quantity on Item Ledger Entry after posting Job Journal Line with Item Tracking Lines and Negative Quantity.

      // 1. Setup: Create and post Purchase Order With Item Tracking Lines.
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryVariableStorage.Enqueue(FALSE);
      LotNo := LibraryUtility.GenerateGUID;
      LibraryVariableStorage.Enqueue(LotNo);
      PostPurchaseOrderWithItemTracking(PurchaseLine,TRUE);

      // Update General Posting Setup, Create a Job and Job Task, Create and post Job Journal Line with Item Tracking Lines.
      GeneralPostingSetup.GET('',PurchaseLine."Gen. Prod. Posting Group");  // Gen. Bus. Posting Group is blank for Job.
      UpdateGeneralPostingSetup(GeneralPostingSetup,GLAccount."No.");
      CreateJobWithJobTask(JobTask);
      LibraryVariableStorage.Enqueue(TRUE);
      CreateJobJournalLineWithItemTracking(JobJournalLine,JobTask,PurchaseLine."No.",PurchaseLine.Quantity);
      AssignItemTrackingLinesOnJobJournal(JobJournalLine);
      LibraryJob.PostJobJournal(JobJournalLine);

      // Create Job Journal line with negative Quantity and Item Tracking Lines.
      LibraryVariableStorage.Enqueue(FALSE);
      LibraryVariableStorage.Enqueue(LotNo);
      CreateJobJournalLineWithItemTracking(JobJournalLine,JobTask,PurchaseLine."No.",-PurchaseLine.Quantity);
      LibraryVariableStorage.Enqueue(JobJournalLine.Quantity);
      AssignItemTrackingLinesOnJobJournal(JobJournalLine);

      // 2. Exercise: Post Job Journal Line.
      LibraryJob.PostJobJournal(JobJournalLine);

      // 3. Verify: Verify Cost,Invoiced and Remaining Quantity on Item Ledger Entry.
      VerifyItemLedgerEntry(
        JobJournalLine."Document No.",ItemLedgerEntry."Entry Type"::"Negative Adjmt.",PurchaseLine.Quantity,PurchaseLine.Quantity,
        -JobJournalLine."Total Cost");

      // 4. Tear Down.
      UpdateGeneralPostingSetup(GeneralPostingSetup,GeneralPostingSetup."Inventory Adjmt. Account");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ReceivePurchaseOrderWithJob@35();
    VAR
      ItemLedgerEntry@1000 : Record 32;
      GeneralPostingSetup@1002 : Record 252;
      GLAccount@1005 : Record 15;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1003 : Record 39;
      DocumentNo@1004 : Code[20];
    BEGIN
      // Verify Invoiced and Remaining Quantity on Item Ledger Entry after Receiving Purchase Order with Item Tracking Lines.

      // 1. Setup: Create Purchase Order With Item Tracking Lines, Update General Posting Setup, Post Purchase Order, Create a Job and Job Task, Create Job Journal Line.
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryVariableStorage.Enqueue(FALSE);
      LibraryVariableStorage.Enqueue(LibraryUtility.GenerateGUID);
      CreatePurchaseDocumentWithJobAndItemTracking(
        PurchaseLine,PurchaseLine."Document Type"::Order,PurchaseLine."Job Line Type"::"Both Schedule and Contract",TRUE,FALSE);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      AssignItemTrackingLinesOnPurchaseOrder(PurchaseHeader);
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      UpdateGeneralPostingSetup(GeneralPostingSetup,GLAccount."No.");
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");

      // 2. Exercise: Receive the Purchase Order.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // 3. Verify: Verify Cost,Invoiced and Remaining Quantity on Item Ledger Entry.
      VerifyItemLedgerEntry(DocumentNo,ItemLedgerEntry."Entry Type"::Purchase,0,0,0);  // Cost, Remaining and Invoiced Quantity must be zero.
      VerifyItemLedgerEntry(DocumentNo,ItemLedgerEntry."Entry Type"::"Negative Adjmt.",0,0,0);  // Cost, Remaining and Invoiced Quantity must be zero.

      // 4. Tear Down.
      UpdateGeneralPostingSetup(GeneralPostingSetup,GeneralPostingSetup."Inventory Adjmt. Account");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE InvoicePurchaseOrderWithJob@31();
    VAR
      ItemLedgerEntry@1000 : Record 32;
      GeneralPostingSetup@1005 : Record 252;
      GLAccount@1002 : Record 15;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1003 : Record 39;
      DocumentNo@1004 : Code[20];
    BEGIN
      // Verify Invoiced and Remaining Quantity on Item Ledger Entry after Invoicing Purchase Order with Item Tracking Lines.

      // 1. Setup. Create and receive Purchase Order with Job and Item Tracking.
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryVariableStorage.Enqueue(FALSE);
      LibraryVariableStorage.Enqueue(LibraryUtility.GenerateGUID);
      CreatePurchaseDocumentWithJobAndItemTracking(
        PurchaseLine,PurchaseLine."Document Type"::Order,PurchaseLine."Job Line Type"::"Both Schedule and Contract",TRUE,FALSE);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      AssignItemTrackingLinesOnPurchaseOrder(PurchaseHeader);
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      UpdateGeneralPostingSetup(GeneralPostingSetup,GLAccount."No.");
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // 2. Exercise: Invoice the Purchase Order.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // 3. Verify: Verify Cost,Invoiced and Remaining Quantity on Item Ledger Entry.
      VerifyItemLedgerEntry(
        DocumentNo,ItemLedgerEntry."Entry Type"::Purchase,0,PurchaseLine.Quantity,
        PurchaseLine.Quantity * PurchaseLine."Direct Unit Cost");  // Remaining Quantity must be zero.
      VerifyItemLedgerEntry(
        DocumentNo,ItemLedgerEntry."Entry Type"::"Negative Adjmt.",0,-PurchaseLine.Quantity,
        -PurchaseLine.Quantity * PurchaseLine."Direct Unit Cost");  // Remaining Quantity must be zero.

      // 4. Tear Down.
      UpdateGeneralPostingSetup(GeneralPostingSetup,GeneralPostingSetup."Inventory Adjmt. Account");
    END;

    [Test]
    PROCEDURE CreateJobUsingCopyJobFunctionality@59();
    VAR
      Job@1004 : Record 167;
      JobTask@1000 : Record 1001;
      CopyJob@1002 : Codeunit 1006;
      LibraryUtility@1003 : Codeunit 131000;
      BillToCustomerNo@1005 : Code[20];
      TargetJobNo@1001 : Code[20];
    BEGIN
      // Create a new job with Copy Job functionality.

      // 1. Setup: Create a Job and Job Task for it.
      Initialize;
      CreateJobWithJobTask(JobTask);
      Job.GET(JobTask."Job No.");
      BillToCustomerNo := Job."Bill-to Customer No.";
      TargetJobNo := LibraryUtility.GenerateGUID;

      // 2. Exercise: Create new Job using Copy Job functionality.
      CopyJob.CopyJob(Job,TargetJobNo,TargetJobNo,Job."Bill-to Customer No.");

      // 3. Verify: Verify Bill-to Customer No. and Job Task No. for new Job.
      Job.TESTFIELD("Bill-to Customer No.");  // To make sure that Bill-to Customer No. is not blank.
      Job.GET(TargetJobNo);
      Job.TESTFIELD("Bill-to Customer No.",BillToCustomerNo);
      JobTask.GET(TargetJobNo,JobTask."Job Task No.");  // To verify that Job Task exists for new Job created using Copy Job function.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesCreateSerialNoPageHandler,EnterCustomizedSNPageHandler,PostedPurchaseDocumentLinesPageHandler)]
    PROCEDURE PurchaseCreditMemoWithTrackingAndJob@55();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify Item Tracking Lines on Purchase Credit Memo which is created after executing "Get Posted Document Lines to Reverse" where Serial No and Job are involved.

      // 1. Setup: Create and post Purchase Invoice With Item Tracking Lines and Job. Create Purchase Credit Memo.
      Initialize;
      PostPurchaseInvoice(PurchaseHeader);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",PurchaseHeader."Buy-from Vendor No.");

      // 2. Exercise: Create Purchase Credit Memo Lines using Get Posted Document Lines to Reverse function.
      PurchaseHeader.GetPstdDocLinesToRevere;

      // 3. Verify: Verification done in 'ItemTrackingLinesCreateSerialNoPageHandler'.
      FindPurchaseLine(PurchaseLine,PurchaseHeader);
      VerifyTrackingLine := TRUE;  // Assign in Global variable.
      PurchaseLine.OpenItemTrackingLines;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesCreateSerialNoPageHandler,EnterCustomizedSNPageHandler,PostedPurchaseDocumentLinesPageHandler)]
    PROCEDURE PostingPurchaseCreditMemoWithJobAndTracking@57();
    VAR
      PurchaseHeader@1002 : Record 38;
      JobLedgerEntry@1005 : Record 169;
      DocumentNo@1000 : Code[20];
      Count@1003 : Integer;
    BEGIN
      // Verify Gl Entry and Job Ledger Entry after posting the Purchase Credit Memo with more than one quantity after executing "Get Posted Document Lines to Reverse" where Serial No and Job are involved.

      // 1. Setup: Create and post Purchase Invoice With Item Tracking Lines and Job. Create Purchase Credit Memo Lines using Get Posted Document Lines to Reverse function.
      Initialize;
      PostPurchaseInvoice(PurchaseHeader);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",PurchaseHeader."Buy-from Vendor No.");
      PurchaseHeader.GetPstdDocLinesToRevere;

      // 2. Exercise: Post Purchase Credit Memo.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // 3. Verify: Verify Serial No. in Job Ledger Enrty.
      JobLedgerEntry.SETRANGE("Document No.",DocumentNo);
      JobLedgerEntry.FINDSET;
      Count := 1;
      REPEAT
        JobLedgerEntry.TESTFIELD("Serial No.",SerialNo[Count]);
        Count := Count + 1;
      UNTIL JobLedgerEntry.NEXT = 0;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesCreateSerialNoPageHandler,EnterCustomizedSNPageHandler,PostedPurchaseDocumentLinesPageHandler)]
    PROCEDURE ItemTrackingLineOnPurchaseCreditMemoHasCorrectApplToItemEntry@125();
    VAR
      PurchaseHeader@1002 : Record 38;
    BEGIN
      // [SCENARIO 361355] Item Tracking Line on Purchase Credit Memo has correct "Appl.-to Item Entry" after using "Get Posted Document Lines to Reverse"
      Initialize;

      // [GIVEN] Create and post Purchase Invoice With Item Tracking Lines with Reservations.
      // [GIVEN] Purchase Credit Memo.
      PostPurchaseInvoiceWithItemTrackingLines(PurchaseHeader);
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",PurchaseHeader."Buy-from Vendor No.");

      // [WHEN] Get Posted Document Lines to Reverse on Purchase Credit Memo
      PurchaseHeader.GetPstdDocLinesToRevere;

      // [THEN] Reservation Entry on the Credit Memo Line is applied to Item Ledger Entry posted by Invoice
      VerifyApplToItemEntry(PurchaseHeader);
    END;

    [Test]
    [HandlerFunctions(ItemChargeAssignmentPurchPageHandler)]
    PROCEDURE PostPurchaseOrderWithJobAndChargeItem@52();
    VAR
      ItemCharge@1004 : Record 5800;
      JobTask@1005 : Record 1001;
      JobLedgerEntry@1007 : Record 169;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      DocumentNo@1006 : Code[20];
    BEGIN
      // Verify Job Ledger Entry after posting the Purchase Order with Job and Charge (Item).

      // 1. Setup: Create Purchase Order With Job and ChargeItem.
      Initialize;
      CreateJobWithJobTask(JobTask);
      LibraryInventory.CreateItemCharge(ItemCharge);
      CreatePurchaseOrderWithJob(
        PurchaseLine,PurchaseLine."Document Type"::Order,JobTask,CreateItem,
        PurchaseLine."Job Line Type"::"Both Schedule and Contract");
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Charge (Item)",ItemCharge."No.");
      LibraryVariableStorage.Enqueue(PurchaseLine.Quantity);
      PurchaseLine.ShowItemChargeAssgnt;
      FindPurchaseLine(PurchaseLine,PurchaseHeader);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");

      // 2. Exercise.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3. Verify.
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,PurchaseLine."No.");
      JobLedgerEntry.TESTFIELD(Quantity,PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(JobTaskStatisticsScheduleUsagePageHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobTaskStatisticsScheduleUsageLCY@93();
    VAR
      Job@1001 : Record 167;
      JobJournalLine@1002 : Record 210;
    BEGIN
      // Verify Job Task Statistics Price, Cost and Profit for Schedule and Usage.

      // 1. Setup: Create a Job and Job Task for it. Create and Post Job Journal Lines for Type Item, Resource and GLAccount.
      Initialize;
      LibraryJob.CreateJob(Job);
      CreateJobJournalLinesForDifferentType(Job,JobJournalLine);
      LibraryJob.PostJobJournal(JobJournalLine);

      // 2. Exercise: Open Job Task Statistics Page from Job Task Lines.
      OpenJobTaskLines(Job."No.");

      // 3. Verify: Verify Schedule and Usage Price, Cost and Profit on JobTaskStatisticsScheduleUsagePageHandler.
    END;

    [Test]
    [HandlerFunctions(JobTaskStatisticsScheduleUsagePageHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobTaskStatisticsScheduleUsageFCY@94();
    VAR
      Job@1007 : Record 167;
      JobJournalLine@1002 : Record 210;
    BEGIN
      // Verify Job Task Statistics Price, Cost and Profit for Schedule and Usage with Different Currency.

      // 1. Setup: Create a Job with different Currency and Job Task for it. Create and Post Job Journal Lines for Type Item, Resource and GLAccount.
      Initialize;
      CreateJobWithCurrency(Job);
      CreateJobJournalLinesForDifferentType(Job,JobJournalLine);
      LibraryJob.PostJobJournal(JobJournalLine);

      // 2. Exercise: Open Job Task Statistics Page from Job Task Lines.
      OpenJobTaskLines(Job."No.");

      // 3. Verify: Verify Schedule and Usage Price, Cost and Profit on JobTaskStatisticsScheduleUsagePageHandler.
    END;

    [Test]
    [HandlerFunctions(JobStatisticsScheduleUsagePageHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobStatisticsScheduleUsageLCY@73();
    VAR
      Job@1007 : Record 167;
      JobJournalLine@1002 : Record 210;
      Counter@1001 : Integer;
    BEGIN
      // Verify Job Statistics Price, Cost and Profit for Schedule and Usage.

      // 1. Setup: Create a Job and multiple Job Tasks for it. Create and Post Job Journal Lines for Type Item, Resource and GLAccount.
      Initialize;
      LibraryJob.CreateJob(Job);
      FOR Counter := 1 TO 1 + RANDOM(3) DO BEGIN
        CreateJobJournalLinesForDifferentType(Job,JobJournalLine);
        LibraryJob.PostJobJournal(JobJournalLine);
      END;

      // 2. Exercise: Open Job Statistics Page from Job Card.
      OpenJobCard(Job."No.");

      // 3. Verify: Verify Schedule and Usage Price, Cost and Profit on JobStatisticsScheduleUsagePageHandler.
    END;

    [Test]
    [HandlerFunctions(JobStatisticsScheduleUsagePageHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobStatisticsScheduleUsageFCY@92();
    VAR
      Job@1007 : Record 167;
      JobJournalLine@1002 : Record 210;
      Counter@1001 : Integer;
    BEGIN
      // Verify Job Statistics Price, Cost and Profit for Schedule and Usage with Different Currency.

      // 1. Setup: Create a Job with different Currency and multiple Job Tasks for it. Create and Post Job Journal Lines for Type Item, Resource and GLAccount.
      Initialize;
      CreateJobWithCurrency(Job);
      FOR Counter := 1 TO 1 + RANDOM(3) DO BEGIN
        CreateJobJournalLinesForDifferentType(Job,JobJournalLine);
        LibraryJob.PostJobJournal(JobJournalLine);
      END;

      // 2. Exercise: Open Job Statistics Page from Job Card.
      OpenJobCard(Job."No.");

      // 3. Verify: Verify Schedule and Usage Price, Cost and Profit on JobStatisticsScheduleUsagePageHandler.
    END;

    [Test]
    [HandlerFunctions(JobTaskStatisticsContractInvoicedPageHandler,JobTransferToSalesInvoiceHandler,MessageHandler)]
    PROCEDURE JobTaskStatisticsContractInvoicedLCY@67();
    VAR
      Job@1007 : Record 167;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      // Verify Job Task Statistics Price, Cost and Profit for Contract and Invoiced.

      // 1. Setup: Create a Job and Job Task for it. Create Job Planning Lines for Type Item, Resource and GLAccount and then Create Sales Invoice from Job Planning Line. Post the Sales Invoice.
      Initialize;
      CreateJobWithCustomer(Job,CreateCustomer(''));  // Passing Blank for Currency Code.
      CreateJobPlanningLinesForDifferentType(Job,JobPlanningLine);
      CreateAndPostSalesInvoice(JobPlanningLine,Job."Bill-to Customer No.");

      // 2. Exercise: Open Job Task Statistics Page from Job Task Lines.
      OpenJobTaskLines(Job."No.");

      // 3. Verify: Verify Contract and Invoiced Price, Cost and Profit on JobTaskStatisticsContractInvoicedPageHandler.
    END;

    [Test]
    [HandlerFunctions(JobTaskStatisticsContractInvoicedPageHandler,JobTransferToSalesInvoiceHandler,MessageHandler)]
    PROCEDURE JobTaskStatisticsContractInvoicedFCY@53();
    VAR
      Job@1007 : Record 167;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      // Verify Job Task Statistics Price, Cost and Profit for Contract and Invoiced with Different Currency.

      // 1. Setup: Create a Job with different Currency and Job Task for it. Create Job Planning Lines for Type Item, Resource and GLAccount and then Create Sales Invoice from Job Planning Line. Post the Sales Invoice.
      Initialize;
      CreateJobWithCurrency(Job);
      CreateJobPlanningLinesForDifferentType(Job,JobPlanningLine);
      CreateAndPostSalesInvoice(JobPlanningLine,Job."Bill-to Customer No.");

      // 2. Exercise: Open Job Task Statistics Page from Job Task Lines.
      OpenJobTaskLines(Job."No.");

      // 3. Verify: Verify Contract and Invoiced Price, Cost and Profit on JobTaskStatisticsContractInvoicedPageHandler.
    END;

    [Test]
    [HandlerFunctions(JobStatisticsContractInvoicedPageHandler,JobTransferToSalesInvoiceHandler,MessageHandler)]
    PROCEDURE JobStatisticsContractInvoicedLCY@65();
    VAR
      Job@1007 : Record 167;
      JobPlanningLine@1001 : Record 1003;
      Counter@1012 : Integer;
    BEGIN
      // Verify Job Statistics Price, Cost and Profit for Contract and Invoiced.

      // 1. Setup: Create a Job and multiple Job Tasks for it. Create Job Planning Lines for Type Item, Resource and GLAccount and then Create Sales Invoice from Job Planning Line. Post the Sales Invoice.
      Initialize;
      CreateJobWithCustomer(Job,CreateCustomer(''));  // Passing Blank for Currency Code.
      FOR Counter := 1 TO 1 + RANDOM(3) DO BEGIN
        CreateJobPlanningLinesForDifferentType(Job,JobPlanningLine);
        CreateAndPostSalesInvoice(JobPlanningLine,Job."Bill-to Customer No.");
      END;

      // 2. Exercise: Open Job Statistics Page from Job Card.
      OpenJobCard(Job."No.");

      // 3. Verify: Verify Contract and Invoiced Price, Cost and Profit on JobStatisticsContractInvoicedPageHandler.
    END;

    [Test]
    [HandlerFunctions(JobStatisticsContractInvoicedPageHandler,JobTransferToSalesInvoiceHandler,MessageHandler)]
    PROCEDURE JobStatisticsContractInvoicedFCY@61();
    VAR
      Job@1007 : Record 167;
      JobPlanningLine@1001 : Record 1003;
      Counter@1012 : Integer;
    BEGIN
      // Verify Job Statistics Price, Cost and Profit for Contract and Invoiced with Different Currency.

      // 1. Setup: Create a Job with different Currency and multiple Job Tasks for it. Create Job Planning Lines for Type Item, Resource and GLAccount and then Create Sales Invoice from Job Planning Line. Post the Sales Invoice.
      Initialize;
      CreateJobWithCurrency(Job);
      FOR Counter := 1 TO 1 + RANDOM(3) DO BEGIN
        CreateJobPlanningLinesForDifferentType(Job,JobPlanningLine);
        CreateAndPostSalesInvoice(JobPlanningLine,Job."Bill-to Customer No.");
      END;

      // 2. Exercise: Open Job Statistics Page from Job Card.
      OpenJobCard(Job."No.");

      // 3. Verify: Verify Contract and Invoiced Price, Cost and Profit on JobStatisticsContractInvoicedPageHandler.
    END;

    [Test]
    [HandlerFunctions(JobTaskStatisticsPageHander,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobTaskStatisticsFilters@66();
    VAR
      Job@1001 : Record 167;
      JobTask@1000 : Record 1001;
      JobJournalLine@1002 : Record 210;
      RandomInput@1003 : Decimal;
    BEGIN
      // Verify Job Task Statistics Price, Cost and Profit for Schedule and Usage with Planning and Posting Date Filters.

      // 1. Setup: Create a Job and Job Task for it. Create and Post Job Journal Lines for Type Resource.
      Initialize;
      RandomInput := RANDOM(10) + LibraryUtility.GenerateRandomFraction;  // Using Random Value for Quantity,Unit Cost and Unit Price.
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      CreateJobJournalLine(
        LibraryJob.UsageLineTypeSchedule,JobJournalLine.Type::Resource,JobJournalLine,JobTask,LibraryResource.CreateResourceNo,
        RandomInput,RandomInput,RandomInput);  // Using Random because value is not important.
      LibraryJob.PostJobJournal(JobJournalLine);

      // 2. Exercise: Open Job Task Statistics Page from Job Task Lines.
      OpenJobTaskLines(JobTask."Job No.");

      // 3. Verify: Verify Schedule and Usage Price, Cost and Profit on JobTaskStatisticsPageHandler.
    END;

    [Test]
    [HandlerFunctions(JobStatisticsPageHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobStatisticsFilters@74();
    VAR
      Job@1001 : Record 167;
      JobTask@1000 : Record 1001;
      JobJournalLine@1002 : Record 210;
      RandomInput@1004 : Decimal;
      Counter@1003 : Integer;
    BEGIN
      // Verify Job Statistics Price, Cost and Profit for Schedule and Usage with Planning and Posting Date Filters.

      // 1. Setup: Create a Job and multiple Job Tasks for it. Create Job Planning Lines for Type Resource and then Create Sales Invoice from Job Planning Line. Post the Sales Invoice.
      Initialize;
      RandomInput := RANDOM(10) + LibraryUtility.GenerateRandomFraction;  // Using Random Value for Quantity,Unit Cost and Unit Price.
      LibraryJob.CreateJob(Job);
      FOR Counter := 1 TO 1 + RANDOM(3) DO BEGIN
        LibraryJob.CreateJobTask(Job,JobTask);
        CreateJobJournalLine(
          LibraryJob.UsageLineTypeSchedule,JobJournalLine.Type::Resource,JobJournalLine,JobTask,LibraryResource.CreateResourceNo,
          RandomInput,RandomInput,RandomInput);  // Using Random because value is not important.
        LibraryJob.PostJobJournal(JobJournalLine);
      END;

      // 2. Exercise: Open Job Task Statistics Page from Job Task Lines.
      OpenJobCard(JobTask."Job No.");

      // 3. Verify: Verify Schedule and Usage Price, Cost and Profit on JobStatisticsPageHandler.
    END;

    [Test]
    [HandlerFunctions(PostedPurchaseDocumentLinePageHandler)]
    PROCEDURE PostPurchaseRetunOrderWithJob@75();
    VAR
      GLAccount@1007 : Record 15;
      GeneralPostingSetup@1006 : Record 252;
      JobTask@1004 : Record 1001;
      JobLedgerEntry@1003 : Record 169;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchasesPayablesSetup@1000 : Record 312;
      DocumentNo@1005 : Code[20];
    BEGIN
      // Verify Program allows to post the Purchase Return Order should be posted with Job after executing the Get Posted Document Lines to Reverse function.

      // 1. Setup: Update Exact Cost Reversing checkbox on Purchase & Payable Setup.
      PurchasesPayablesSetup.GET;
      UpdatePurchasesAndPayablesSetup(TRUE);
      LibraryERM.CreateGLAccount(GLAccount);
      CreateJobWithJobTask(JobTask);
      CreatePurchaseOrderWithJob(
        PurchaseLine,PurchaseLine."Document Type"::Order,JobTask,CreateItem,PurchaseLine."Job Line Type"::Contract);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreatePurchaseHeader(PurchaseHeader,PurchaseLine."Document Type"::"Return Order",PurchaseHeader."Buy-from Vendor No.");
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      UpdateGeneralPostingSetup(GeneralPostingSetup,GLAccount."No.");

      GetPostedDocumentLinesToReverse(PurchaseHeader."No.");
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");

      // 2. Exercise.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // 3. Verify.
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,PurchaseLine."No.");
      JobLedgerEntry.TESTFIELD(Quantity,-PurchaseLine.Quantity);
      JobLedgerEntry.TESTFIELD(Type,JobLedgerEntry.Type);
      JobLedgerEntry.TESTFIELD("Entry Type",JobLedgerEntry."Entry Type"::Usage);
      JobLedgerEntry.TESTFIELD("Job Task No.",JobTask."Job Task No.");

      // 4. Tear Down.
      UpdatePurchasesAndPayablesSetup(PurchasesPayablesSetup."Exact Cost Reversing Mandatory");
      UpdateGeneralPostingSetup(GeneralPostingSetup,GeneralPostingSetup."Inventory Adjmt. Account");
    END;

    [Test]
    PROCEDURE QtyPerUnitOfMeasureOnPurchaseLineWithJob@104();
    VAR
      ItemUnitOfMeasure@1000 : Record 5404;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1003 : Record 39;
      QtyPerUnitOfMeasure@1001 : Decimal;
    BEGIN
      // Verify Qty. per Unit of Measure on Purchase Line is not updated when changed it on Base Unit of Measure after receiving the Purchase Order.

      Initialize;
      QtyPerUnitOfMeasure := ReceivePurchaseOrderWithNewUOM(PurchaseHeader);
      FindPurchaseLine(PurchaseLine,PurchaseHeader);

      // 2. Exercise: Modify Qty. per Unit of Measure for new Unit of Measure.
      ItemUnitOfMeasure.GET(PurchaseLine."No.",PurchaseLine."Unit of Measure");
      ModifyQtyPerUnitOfMeasure(ItemUnitOfMeasure,QtyPerUnitOfMeasure);

      // 3. Verify: Verify Qty. per Unit of Measure value is not updated on the Purchase Line.
      FindPurchaseLine(PurchaseLine,PurchaseHeader);
      Assert.AreNotEqual(
        QtyPerUnitOfMeasure,PurchaseLine."Qty. per Unit of Measure",
        STRSUBSTNO(
          ValueMatchError,ItemUnitOfMeasure.FIELDCAPTION("Qty. per Unit of Measure"),ItemUnitOfMeasure.TABLECAPTION,
          PurchaseLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE QtyPerUnitOfMeasureOnJobLedgerEntry@105();
    VAR
      ItemUnitOfMeasure@1000 : Record 5404;
      JobLedgerEntry@1006 : Record 169;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1002 : Record 39;
      DocumentNo@1007 : Code[20];
      QtyPerUnitOfMeasure@1001 : Decimal;
    BEGIN
      // Verify Job Ledger Entry after posting a Purchase Order where "Qty. per Unit of Measure" is different on Base Unit of Measure while posting Purchase Order as receive and then Invoice.

      Initialize;
      QtyPerUnitOfMeasure := ReceivePurchaseOrderWithNewUOM(PurchaseHeader);
      FindPurchaseLine(PurchaseLine,PurchaseHeader);

      // 2. Exercise.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // 3. Verify: Verify Qty. per Unit of Measure value is not updated on the Job Ledger Entry.
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,PurchaseLine."No.");
      Assert.AreNotEqual(
        QtyPerUnitOfMeasure,JobLedgerEntry."Qty. per Unit of Measure",
        STRSUBSTNO(
          ValueMatchError,ItemUnitOfMeasure.FIELDCAPTION("Qty. per Unit of Measure"),ItemUnitOfMeasure.TABLECAPTION,
          JobLedgerEntry.TABLECAPTION));
    END;

    [Test]
    PROCEDURE JobPlanningLineUnitPriceWithItemSalesPrice@107();
    VAR
      Item@1000 : Record 27;
      Job@1008 : Record 167;
      JobTask@1006 : Record 1001;
      JobPlanningLine@1007 : Record 1003;
      SalesPrice@1001 : Record 7002;
    BEGIN
      // Verify correct Unit Price for an Item is updated on Job Planning Line when Sales Price are defined on the Item.

      // 1. Setup: Create Job and Job Task, create Item with Unit Price, create Sales Price for Item with Minimum Quantity with Random values.
      Initialize;
      CreateJobWithJobTask(JobTask);
      Job.GET(JobTask."Job No.");
      Item.GET(CreateItem);
      LibrarySales.CreateSalesPrice(
        SalesPrice,Item."No.",SalesPrice."Sales Type"::Customer,Job."Bill-to Customer No.",WORKDATE,'','',
        Item."Base Unit of Measure",1 + RANDOM(10),Item."Unit Price" - RANDOM(10));

      // 2. Exercise: Create Job Planning Line.
      CreateAndUpdateJobPlanningLine(JobPlanningLine,JobTask,JobPlanningLine."Line Type"::Schedule,
        Item."No.",SalesPrice."Minimum Quantity");

      // 3. Verify: Verify Unit Price on Job Planning Line.
      JobPlanningLine.TESTFIELD("Unit Price",SalesPrice."Unit Price");
    END;

    [Test]
    PROCEDURE JobForCustomerWithoutCurrency@131();
    BEGIN
      // Check Currency Code and Invoice Currency Code field values on Job Card when Bill to Customer No. on Job is having no Currency attached.

      // 1. Setup: Supply Blank value for Currency Code to update it on Customer.
      Initialize;
      InvoiceCurrencyForJob('');
    END;

    [Test]
    PROCEDURE JobForCustomerWithCurrency@81();
    BEGIN
      // Check Currency Code and Invoice Currency Code field values on Job Card when Bill to Customer No. on Job has Currency attached.

      // 1. Setup: Create Currency and update it on Customer.
      Initialize;
      InvoiceCurrencyForJob(CreateCurrency);
    END;

    LOCAL PROCEDURE InvoiceCurrencyForJob@137(InvoiceCurrencyCode@1001 : Code[10]);
    VAR
      Job@1000 : Record 167;
    BEGIN
      // 2. Exercise: Create Job for Customer.
      CreateJobWithCustomer(Job,CreateCustomer(InvoiceCurrencyCode));

      // 3. Verify: Verify Currency Code and Invoice Currency Code field on Job according to the Customer.
      Job.TESTFIELD("Currency Code",'');
      Job.TESTFIELD("Invoice Currency Code",InvoiceCurrencyCode);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE AutomaticCostPostingAdjustmentAlways@187();
    VAR
      InventorySetup@1011 : Record 313;
      ItemJournalLine@1010 : Record 83;
      TempItemJournalLine@1004 : TEMPORARY Record 83;
      ItemNo@1006 : Code[20];
      NoOfLines@1003 : Integer;
      TotalAmount@1000 : Decimal;
    BEGIN
      // Verify Program updates the Unit Cost with Automatic Cost Posting set to YES and Automatic Cost Adjustment set to Always on Inventory Setup.

      // 1. Setup: Set Automatic Cost Posting as TRUE and Automatic Cost Adjustment to Always, Create Item, Create multiple Item Journal Lines.
      Initialize;
      ItemNo := CreateItemWithInventoryAdjustmentAccount;
      LibraryERM.SetUseLegacyGLEntryLocking(TRUE);
      UpdateInventorySetup(TRUE,InventorySetup."Automatic Cost Adjustment"::Always);
      NoOfLines := 1 + RANDOM(3);  // To create 2 to 4 Item Journal Lines Boundary 2 is important.
      TotalAmount := CreateMultipleItemJournalLines(ItemJournalLine,ItemNo,NoOfLines);
      SaveItemJnlLineInTempTable(TempItemJournalLine,ItemJournalLine);
      LibraryUtility.GenerateGUID;  // Hack to fix problem with GenerateGUID.

      // 2. Exercise: Post Item Journal Lines.
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      // 3. Verify: Verify Unit Cost on Item and Item Ledger Entries.
      VerifyUnitCostOnItem(ItemNo,ROUND(TotalAmount / NoOfLines,LibraryJob.GetUnitAmountRoundingPrecision('')));
      VerifyItemLedgerEntries(TempItemJournalLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE PostJobWithAutomaticCostPostingAdjustmentAlways@188();
    VAR
      Item@1001 : Record 27;
      GeneralLedgerSetup@1010 : Record 98;
      InventorySetup@1000 : Record 313;
      JobTask@1003 : Record 1001;
      ItemJournalLine@1004 : Record 83;
      TempItemJournalLine@1002 : TEMPORARY Record 83;
      JobJournalLine@1005 : Record 210;
      ItemLedgerEntry@1007 : Record 32;
      NoOfLines@1009 : Integer;
      TotalAmount@1006 : Decimal;
    BEGIN
      // Veriy Program updates the Unit Cost when posting of Job Journal with Automatic Cost Posting set to YES and Automatic Cost Adjustment set to Always on Inventory Setup.

      // 1. Setup: Set Automatic Cost Posting as TRUE and Automatic Cost Adjustment to Always, Create Item, Create and Post Item Journal Lines, Create Job with Job Task, Create Job Journal line.
      Initialize;
      InventorySetup.GET;
      GeneralLedgerSetup.GET;
      Item.GET(CreateItemWithInventoryAdjustmentAccount);
      LibraryERM.SetUseLegacyGLEntryLocking(TRUE);
      UpdateInventorySetup(TRUE,InventorySetup."Automatic Cost Adjustment"::Always);
      NoOfLines := 1 + RANDOM(3);  // To create 2 to 4 Item Journal Lines Boundary 2 is important.
      TotalAmount := CreateMultipleItemJournalLines(ItemJournalLine,Item."No.",NoOfLines);
      SaveItemJnlLineInTempTable(TempItemJournalLine,ItemJournalLine);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
      CreateJobWithJobTask(JobTask);
      CreateJobJournalLine(
        LibraryJob.UsageLineTypeBoth,JobJournalLine.Type::Item,JobJournalLine,JobTask,Item."No.",1,Item."Unit Cost",Item."Unit Price");  // Taking Quantity as 1 is important for test.
      TempItemJournalLine.FINDFIRST;  // Required for the verification of Item "Unit Cost" and Item Ledger Entry.

      // 2. Exercise: Post Job Journal Line.
      LibraryJob.PostJobJournal(JobJournalLine);

      // 3. Verify: Verify Cost,Invoiced and Remaining Quantity on Item Ledger Entry and Unit Cost on Item.
      VerifyUnitCostOnItem(
        Item."No.",
        ROUND((TotalAmount - TempItemJournalLine."Unit Amount") / (NoOfLines - 1),LibraryJob.GetUnitAmountRoundingPrecision('')));
      VerifyItemLedgerEntry(
        JobJournalLine."Document No.",ItemLedgerEntry."Entry Type"::"Negative Adjmt.",0,-1,-TempItemJournalLine."Unit Amount");  // Remaining Quantity must be 0 and Invoiced Quantity must be -1.

      // 4. Tear Down: Roll back the General Posting Setup and Inventory Setup.
      UpdateInventorySetup(InventorySetup."Automatic Cost Posting",InventorySetup."Automatic Cost Adjustment");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE GLEntriesOnPostedPurchaseOrderWithJob@101();
    VAR
      PurchaseLine@1005 : Record 39;
    BEGIN
      // Test G/L Entries on Posted Purchase Order with job with Automatic and Expected Cost Posting to True.
      PostedPurchaseOrderWithJob(PurchaseLine."Document Type"::Order);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE GLEntriesOnPostedPurchaseReturnOrderWithJob@88();
    VAR
      PurchaseLine@1005 : Record 39;
    BEGIN
      // Test G/L Entries Posted Purchase Return Order with job with Automatic and Expected Cost Posting to True.
      PostedPurchaseOrderWithJob(PurchaseLine."Document Type"::"Return Order");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE UndoPurchaseReceiptOnPostedPostedOrder@99();
    VAR
      JobTask@1006 : Record 1001;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1001 : Record 39;
      PostedOrderNo@1003 : Code[20];
      OldAutomaticCostPosting@1002 : Boolean;
      OldExpectedCostPosting@1000 : Boolean;
    BEGIN
      // Test G/L Entries and Value Entries With Undo Reciept on Posted Purchase Order with job with Automatic and Expected Cost Posting to True.
      // Setup: Create And Post Purchase Order With Job No.
      Initialize;
      UpdateInventorySetupWithExpectedCost(OldAutomaticCostPosting,OldExpectedCostPosting,TRUE,TRUE);

      // Excercise : Undo Purchase Reciept on Posted Purchase Invoice.
      CreateJobWithJobTask(JobTask);
      CreatePurchaseOrderWithJob(
        PurchaseLine,PurchaseLine."Document Type"::Order,JobTask,CreateItem,PurchaseLine."Job Line Type"::Contract);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      PostedOrderNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      UndoPurchaseReceiptLine(PostedOrderNo,PurchaseLine."No.");

      // Verify: Verify G/L Entries.
      VerifyGLEntry(PostedOrderNo,PurchaseLine."Line Amount");
      VerifyValueEntry(PostedOrderNo,PurchaseLine."No.",PurchaseLine."Line Amount");

      // Tear Down: Cleanup of setup done.
      RestoreInventorySetup(OldAutomaticCostPosting,OldExpectedCostPosting);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE UndoPostedReturnShipmentOnPostedReturnOrder@87();
    VAR
      JobTask@1006 : Record 1001;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1001 : Record 39;
      PostedRetunOrderNo@1003 : Code[20];
      OldAutomaticCostPosting@1002 : Boolean;
      OldExpectedCostPosting@1000 : Boolean;
    BEGIN
      // Test G/L Entries and Value Entries With Undo Retun Shipment on Posted Purchase Return Order with job with Automatic and Expected Cost Posting to True.
      // Setup: Create And Post Purchase Return Order With Job No.
      Initialize;
      UpdateInventorySetupWithExpectedCost(OldAutomaticCostPosting,OldExpectedCostPosting,TRUE,TRUE);
      CreateJobWithJobTask(JobTask);
      CreatePurchaseOrderWithJob(
        PurchaseLine,PurchaseLine."Document Type"::"Return Order",JobTask,CreateItem,PurchaseLine."Job Line Type"::Contract);

      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      PostedRetunOrderNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // Excercise : Undo Retun Shipment on Posted Purchase Order.
      UndoReturnShipmentLine(PostedRetunOrderNo,PurchaseLine."No.");

      // Verify: Verify G/L and Value Entries.
      VerifyGLEntry(PostedRetunOrderNo,PurchaseLine."Line Amount");
      VerifyValueEntry(PostedRetunOrderNo,PurchaseLine."No.",PurchaseLine."Line Amount");

      // Tear Down: Cleanup of setup done.
      RestoreInventorySetup(OldAutomaticCostPosting,OldExpectedCostPosting);
    END;

    [Test]
    [HandlerFunctions(JobTransferToSalesInvoiceHandler)]
    PROCEDURE CreateSalesInvoiceFromJobWhenItemBlocked@129();
    BEGIN
      // Verify Sales Invoice not created when Item Blocked.
      SalesDocumentDoesNotExistWhenItemBlocked(FALSE);  // Parameter False is used to distinguish Sales Document created with Invoice/Creditmemo.
    END;

    [Test]
    [HandlerFunctions(JobTransferToSalesCreditMemoHandler)]
    PROCEDURE CreateSalesCreditMemoFromJobWhenItemBlocked@128();
    BEGIN
      // Verify Sales Credit Memo not created when Item Blocked.
      SalesDocumentDoesNotExistWhenItemBlocked(TRUE);  // Parameter True is used to distinguish Sales Document created with Invoice/Creditmemo.
    END;

    [Test]
    [HandlerFunctions(JobTransferToSalesInvoiceHandler,MessageHandler)]
    PROCEDURE CreateSalesInvoiceFromJobWhenItemNotBlocked@138();
    BEGIN
      // Verify Extended Text on Sales Invoice when Item was not Blocked.
      SalesDocumentExistWithExtendedText(FALSE);  // Parameter False is used to distinguish Sales Document created with Invoice / Creditmemo.
    END;

    [Test]
    [HandlerFunctions(JobTransferToSalesCreditMemoHandler,MessageHandler)]
    PROCEDURE CreateSalesCreditMemoFromJobWhenItemNotBlocked@136();
    BEGIN
      // Verify Extended Text on Sales Credit Memo when Item was not Blocked.
      SalesDocumentExistWithExtendedText(TRUE);  // Parameter True is used to distinguish Sales Document created with Invoice / Creditmemo.
    END;

    [Test]
    PROCEDURE ValidateTargetJobTaskNoOnCopyJobPlanningLinesPage@115();
    VAR
      JobTask@1000 : Record 1001;
      CopyJobPlanningLinesPage@1001 : TestPage 1042;
    BEGIN
      // Verify that TargetJobTaskNo is working as per the selection of TargetJobNo on Copy Job Planning Lines page.

      // Setup: Create Job and Job Task.
      Initialize;
      CreateJobWithJobTask(JobTask);

      // Exercise: Open Copy Job Planning Lines page and set the value on the controls TargetJobNo and TargetJobTaskNo.
      CopyJobPlanningLinesPage.OPENEDIT;
      CopyJobPlanningLinesPage.TargetJobNo.SETVALUE(JobTask."Job No.");
      CopyJobPlanningLinesPage.TargetJobTaskNo.SETVALUE(JobTask."Job Task No.");

      // Verify: Verify that the TargetJobTaskNo contains the correct Job task no. of the TargetJobNo.
      CopyJobPlanningLinesPage.TargetJobTaskNo.ASSERTEQUALS(JobTask."Job Task No.");
    END;

    [Test]
    [HandlerFunctions(JobTaskListHandler)]
    PROCEDURE LookUpTargetJobTaskNoOnCopyJobPlanningLinesPage@219();
    VAR
      JobTask@1000 : Record 1001;
      CopyJobPlanningLinesPage@1001 : TestPage 1042;
    BEGIN
      // Verify that TargetJobTaskNo lookup is working as per the selection of TargetJobNo on Copy Job Planning Lines page.

      // Setup: Create Job and Job Task.
      Initialize;
      CreateJobWithJobTask(JobTask);

      // Exercise: Open Copy Job Planning Lines page and set the value on the control TargetJobNo and then lookup TargetJobTaskNo.
      CopyJobPlanningLinesPage.OPENEDIT;
      CopyJobPlanningLinesPage.TargetJobNo.SETVALUE(JobTask."Job No.");
      CopyJobPlanningLinesPage.TargetJobTaskNo.LOOKUP;

      // Verify: Verify that the TargetJobTaskNo contains the correct Job task no. of the TargetJobNo.
      CopyJobPlanningLinesPage.TargetJobTaskNo.ASSERTEQUALS(JobTask."Job Task No.");
    END;

    [Test]
    PROCEDURE TargetJobTaskNoErrorOnCopyJobPlanningLinesPage@122();
    VAR
      JobTask@1000 : Record 1001;
      CopyJobPlanningLinesPage@1001 : TestPage 1042;
    BEGIN
      // Verify that system throws error while setting the value in TargetJobTaskNo if TargetJobNo is not filled.

      // Setup: Create Job and Job Task.
      Initialize;
      CreateJobWithJobTask(JobTask);

      // Exercise: Open Copy Job Planning Lines page and set the value on the controls SourceJobNo and TargetJobTaskNo.
      CopyJobPlanningLinesPage.OPENEDIT;
      CopyJobPlanningLinesPage.SourceJobNo.SETVALUE(JobTask."Job No.");
      ASSERTERROR CopyJobPlanningLinesPage.TargetJobTaskNo.SETVALUE(JobTask."Job Task No.");

      // Verify: Verify that system throws error while setting the value in TargetJobTaskNo if TargetJobNo is not filled.
      Assert.ExpectedError(STRSUBSTNO(JobNotExistErr,JobTask.TABLECAPTION,JobTask."Job Task No."));
    END;

    [Test]
    [HandlerFunctions(CopyJobHandler,JobTaskListHandler,MessageHandler,ConfirmHandlerTrue)]
    PROCEDURE CopyDimensionsOnJobUsingCopyJobFunctionality@121();
    VAR
      SourceJob@1005 : Record 167;
      TargetJob@1006 : Record 167;
      JobTask@1004 : Record 1001;
    BEGIN
      // Verify Global Dimensions of new Job from Source Job using Copy Job functionality.

      // Setup: Create a Job and Job Task for it and update Global Dimension.
      Initialize;
      CreateJobWithJobTask(JobTask);
      SourceJob.GET(JobTask."Job No.");
      UpdateGlobalDimensionOnJob(SourceJob);
      TargetJobNo := GenerateJobNo;

      // Exercise: Create new Job using Copy Job functionality.
      RunCopyJob(JobTask."Job No.");
      TargetJob.GET(TargetJobNo);

      // Verify: Verify Global Dimensions of new Job from Source Job using Copy Job functionality.
      Assert.AreEqual(SourceJob."Global Dimension 1 Code",TargetJob."Global Dimension 1 Code",DimensionMustMatchMsg);
      Assert.AreEqual(SourceJob."Global Dimension 2 Code",TargetJob."Global Dimension 2 Code",DimensionMustMatchMsg);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE TFS358363_UndoReiceptDeletesBinContent@120();
    VAR
      JobPlanningLine@1002 : Record 1003;
      PurchaseLine@1003 : Record 39;
      Bin@1000 : Record 7354;
      PurchRcptNo@1005 : Code[20];
    BEGIN
      CreateJobWithPlanningUsageLink(JobPlanningLine);
      CreateLocationWithBin(Bin);

      CreatePurchaseLineForPlan(PurchaseLine,JobPlanningLine,Bin);
      PurchRcptNo := PostPurchaseReceipt(PurchaseLine."Document No.");
      UndoPurchaseReceiptLine(PurchRcptNo,JobPlanningLine."No.");

      VerifyBinIsEmpty(JobPlanningLine."Location Code",JobPlanningLine."Bin Code");
    END;

    [Test]
    PROCEDURE PurchaseLineCurrencyCodeFromJobTask@126();
    VAR
      Job@1000 : Record 167;
      JobTask@1002 : Record 1001;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // [SCENARIO] Verify Currency Code populated from Job after item changed on purchase line
      // [GIVEN] Job Task with some Currency Code
      CreateJobWithCurrency(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      // [GIVEN] Purchase invoice with a line and pointed to the job
      CreatePurchaseOrderWithJob(
        PurchaseLine,PurchaseLine."Document Type"::Order,JobTask,CreateItem,
        PurchaseLine."Job Line Type"::" ");
      // [WHEN] Another Item set to the line
      PurchaseLine.VALIDATE("No.",CreateItem);
      PurchaseLine.MODIFY(TRUE);
      // [THEN] Job Currency Code must be kept and equal to Job's Currency Code
      Assert.AreEqual(Job."Currency Code",PurchaseLine."Job Currency Code",WrongJobCurrencyCodeErr);
    END;

    [Test]
    [HandlerFunctions(CopyJobHandler,JobTaskListHandler,MessageHandler)]
    PROCEDURE NotAllowedToCopyJobWithManualNoAndDisabledManualNos@119();
    VAR
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
    BEGIN
      // [SCENARIO 108995] Verify that job cannot be copied with manual "No." and disabled "Manual Nos." in "Job No. Series"
      Initialize;

      // [GIVEN] Job with job task
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);

      // [GIVEN] Disabled "Manual Nos." in "Job No. Series"
      SetupManualNosInJobNoSeries(FALSE);

      // [WHEN] Copy the job to new TargetJobNo
      TargetJobNo := GenerateJobNo;
      FromSource := FromSource::"Job Planning Lines";
      RunCopyJob(Job."No.");

      // [THEN] TargetJobNo is not created
      Assert.IsFalse(Job.GET(TargetJobNo),JobWithManualNoCreatedErr);

      // TearDown
      SetupManualNosInJobNoSeries(TRUE);
    END;

    [Test]
    PROCEDURE BlankCurrencyCodeAfterValidateCustWithDiffCurrency@144();
    VAR
      Job@1000 : Record 167;
      CustNo@1002 : Code[20];
      CurCode@1001 : Code[10];
    BEGIN
      // [FEATURE] [Currency Code]
      // [SCENARIO 218732] "Currency Code" clears out when update "Bill-To Customer No." by Customer with currency different from "Currency Code" of Job
      Initialize;

      // [GIVEN] Job with "Currency Code" = "USD" and Customer "X"
      CreateJobWithCurrency(Job);

      // [GIVEN] Customer "Y" with currency "RUB"
      CreateCustomerWithCurrency(CustNo,CurCode);

      // [WHEN] Set "Bill-to Customer No." = customer "Y"
      Job.VALIDATE("Bill-to Customer No.",CustNo);

      // [THEN] "Currency Code" in Job is blank
      Job.TESTFIELD("Currency Code",'');

      // [THEN] Job has "Invoice Currency Code" = "RUB"
      Job.TESTFIELD("Invoice Currency Code",CurCode);
    END;

    [Test]
    PROCEDURE BlankCurrencyCodeAfterValidateCustWithoutCurrency@155();
    VAR
      Job@1000 : Record 167;
      CustNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Currency Code]
      // [SCENARIO 218732] "Currency Code" clears out when update "Bill-To Customer No." by Customer without currency
      Initialize;

      // [GIVEN] Job without "Currency Code"
      LibraryJob.CreateJob(Job);

      // [GIVEN] Customer "X" without currency
      CustNo := CreateCustomer('');

      // [WHEN] Set "Bill-to Customer No." = customer "X"
      Job.VALIDATE("Bill-to Customer No.",CustNo);

      // [THEN] "Currency Code" in Job is blank
      Job.TESTFIELD("Currency Code",'');

      // [THEN] Job has"Invoice Currency Code" is blank
      Job.TESTFIELD("Invoice Currency Code",'');
    END;

    [Test]
    PROCEDURE BlankCurrencyCodeAfterValidateCustWithCurrency@154();
    VAR
      Job@1000 : Record 167;
      CustNo@1002 : Code[20];
      CurCode@1001 : Code[10];
    BEGIN
      // [FEATURE] [Currency Code]
      // [SCENARIO 218732] "Currency Code" clears out when update "Bill-To Customer No." by Customer with currency
      Initialize;

      // [GIVEN] Job without "Currency Code"
      LibraryJob.CreateJob(Job);

      // [GIVEN] Customer "X" with currency "RUB"
      CreateCustomerWithCurrency(CustNo,CurCode);

      // [WHEN] Set "Bill-to Customer No." = customer "X"
      Job.VALIDATE("Bill-to Customer No.",CustNo);

      // [THEN] "Currency Code" in Job is blank
      Job.TESTFIELD("Currency Code",'');

      // [THEN] Job has "Invoice Currency Code" is "RUB"
      Job.TESTFIELD("Invoice Currency Code",CurCode);
    END;

    [Test]
    PROCEDURE EqualCurrencyCodeAfterValidateCustWithSameCurrency@153();
    VAR
      Job@1000 : Record 167;
      CurCode@1002 : Code[10];
      CustNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Currency Code]
      // [SCENARIO 218732] "Currency code" of Job equals "Currency Code" of Customer when update "Bill-To Customer No." with same currency than existing
      Initialize;

      // [GIVEN] Customer "X" with currency "RUB"
      CreateCustomerWithCurrency(CustNo,CurCode);

      // [GIVEN] Job with "Currency Code" = "RUB"
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Currency Code",CurCode);
      Job.MODIFY(TRUE);

      // [WHEN] Set "Bill-to Customer No." = customer "X"
      Job.VALIDATE("Bill-to Customer No.",CustNo);

      // [THEN] Job has "Currency Code" = "RUB"
      Job.TESTFIELD("Currency Code",CurCode);

      // [THEN] Job has "Invoice Currency Code" = "RUB"
      Job.TESTFIELD("Invoice Currency Code",CurCode);
    END;

    [Test]
    PROCEDURE ErrorOnValidateInvoiceCurCodeWhenCurCodeHasDifValue@150();
    VAR
      Job@1000 : Record 167;
    BEGIN
      // [FEATURE] [Currency Code]
      // [SCENARIO 218732] Error occurred when update "Invoice Currency Code" with value different from "Currency Code"
      Initialize;

      // [GIVEN] Job with "Currency Code" = RUB
      CreateJobWithCurrency(Job);

      // [WHEN] Update "Invoice Currency Code" in job with EUR
      ASSERTERROR Job.VALIDATE("Invoice Currency Code",CreateCurrency);

      // [THEN] User will get an error that he cannot plan and invoice job in different currencies
      Assert.ExpectedError('You cannot plan and invoice a job in different currencies.');
    END;

    [Test]
    PROCEDURE ErrorOnValidateCurCodeWhenInvoiceCurCodeHasDifValue@143();
    VAR
      Job@1000 : Record 167;
    BEGIN
      // [FEATURE] [Currency Code]
      // [SCENARIO 218732] Error occurred when update "Currency Code" with value different from "Invoice Currency Code"
      Initialize;

      // [GIVEN] Job with "Currency Code" = RUB
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Currency Code",CreateCurrency);

      // [WHEN] Update "Invoice Currency Code" in job with EUR
      ASSERTERROR Job.VALIDATE("Invoice Currency Code",CreateCurrency);

      // [THEN] User will get an error that he cannot plan and invoice job in different currencies
      Assert.ExpectedError('You cannot plan and invoice a job in different currencies.');
    END;

    [Test]
    PROCEDURE JobCardInvoiceCurrencyCodeEditabled@151();
    VAR
      Job@1001 : Record 167;
      JobCard@1000 : TestPage 88;
    BEGIN
      // [FEATURE] [Currency Code] [UI]
      // [SCENARIO 218732] "Invoice Currency Code" on Job Card page is editable when "Currency Code" has value
      Initialize;

      // [GIVEN] Job with "Currency Code" = RUB
      CreateJobWithCurrency(Job);

      // [WHEN] Open "Job Card" page
      JobCard.OPENEDIT;
      JobCard.GOTORECORD(Job);

      // [THEN] "Invoice Currency Code" is editable
      Assert.IsTrue(JobCard."Invoice Currency Code".EDITABLE,STRSUBSTNO('%1 must be editable',Job.FIELDNAME("Invoice Currency Code")));
    END;

    [Test]
    PROCEDURE JobCardCurrencyCodeEditabled@156();
    VAR
      Job@1001 : Record 167;
      JobCard@1000 : TestPage 88;
    BEGIN
      // [FEATURE] [Currency Code] [UI]
      // [SCENARIO 218732] "Currency Code" on Job Card page is editable when "Invoice Currency Code" has value
      Initialize;

      // [GIVEN] Job with "Invoice Currency Code" = RUB
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Invoice Currency Code",CreateCurrency);
      Job.MODIFY(TRUE);

      // [WHEN] Open "Job Card" page
      JobCard.OPENEDIT;
      JobCard.GOTORECORD(Job);

      // [THEN] "Currency Code" is editable
      Assert.IsTrue(JobCard."Currency Code".EDITABLE,STRSUBSTNO('%1 must be editable',Job.FIELDNAME("Currency Code")));
    END;

    [Test]
    PROCEDURE PurchInvWithJobAndDiffUnitOfMeasureCode@134();
    VAR
      ItemUnitOfMeasure@1000 : Record 5404;
      PurchHeader@1003 : Record 38;
      PurchLine@1004 : Record 39;
      JobLedgEntry@1008 : Record 169;
      UOMMgt@1005 : Codeunit 5402;
      ItemNo@1001 : Code[20];
      DocNo@1007 : Code[20];
      ExpectedQty@1006 : Decimal;
    BEGIN
      // [FEATURE] [Purch. Unit of Measure]
      // [SCENARIO 375427] The Quantity in Job Ledger Entry should be calculated in Base Unit Of Measure Code when posting Purchase Invoice with Job and different Unit Of Measure Code

      Initialize;
      // [GIVEN] Unit Of Measure "BOX" With "Qty. Per Unit Of Measure" = 10
      ItemNo := LibraryInventory.CreateItemNo;
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,ItemNo);
      // [GIVEN] Purchase Invoice with Job, "Unit Of Measure" = "BOX" and Quantity = 3
      CreatePurchaseDocument(PurchLine,PurchHeader."Document Type"::Invoice,ItemNo);
      PurchLine.VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
      PurchLine.MODIFY(TRUE);
      AttachJobTaskToPurchLine(PurchLine);
      ExpectedQty := UOMMgt.CalcBaseQty(PurchLine.Quantity,ItemUnitOfMeasure."Qty. per Unit of Measure");
      PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");

      // [WHEN] Post Purchase Invoice
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      // [THEN] Quantity in Job Ledger Entry = 30
      FindJobLedgerEntry(JobLedgEntry,DocNo,PurchLine."No.");
      JobLedgEntry.TESTFIELD(Quantity,ExpectedQty);
    END;

    [Test]
    PROCEDURE JobCurrencyCodeUpdateByBilltoCustomer@142();
    VAR
      Job@1000 : Record 167;
      JobCard@1001 : TestPage 88;
    BEGIN
      // [FEATURE] [UT] [UI]
      // [SCENARIO 379760] Clear Currency Code on Job Card when update Bill-To Customer with filled Currency Code
      Initialize;

      // [GIVEN] Job with Customer without Currency Code
      CreateJobWithCustomer(Job,CreateCustomer(''));

      // [GIVEN] Currency Code updated
      Job."Currency Code" := CreateCurrency;
      Job.MODIFY(TRUE);

      // [WHEN] Update Bill-to Customer field on Job Card by another Customer with Currency Code
      JobCard.OPENEDIT;
      JobCard.FILTER.SETFILTER("No.",Job."No.");
      JobCard."Bill-to Customer No.".SETVALUE(CreateCustomer(CreateCurrency));
      JobCard.OK.INVOKE;

      // [THEN] Job."Currency Code" is empty
      Job.FIND;
      Job.TESTFIELD("Currency Code",'');
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesCreateSerialNoPageHandler,EnterCustomizedSNPageHandler)]
    PROCEDURE SerialNoAssignedToJobPlanningLineFromJobLedgEntryAfterPurchOrderWithTrackingAndStrictLinkToJob@13();
    VAR
      PurchHeader@1003 : Record 38;
      PurchLine@1002 : Record 39;
      JobPlanningLine@1004 : Record 1003;
      JobLedgEntry@1001 : Record 169;
      InvNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Item Tracking] [Serial No.]
      // [SCENARIO 382364] "Serial No." in Job Planning Line is equal the same field from Job Ledger Entry after posting Purchase Order with Item Tracking and "Job Planning Line No." defined

      Initialize;

      // [GIVEN] Job with Planning Line - "Usage Link" and Item "X" with Tracking by "Serial Nos."
      CreateJobWithPlanningUsageLinkAndSpecificItem(JobPlanningLine,CreateItemWithTrackingCode(FALSE,TRUE));

      // [GIVEN] Purchase Order with Item "X", Job ("Job Planning Line No." is defined to make strict link to Job) and Quantity = 1 (to have one "Serial No.")
      CreatePurchaseHeader(PurchHeader,PurchHeader."Document Type"::Order,'');
      CreatePurchLineWithExactQuantityAndJobLink(PurchLine,PurchHeader,PurchLine.Type::Item,JobPlanningLine."No.",JobPlanningLine,1);
      LibraryVariableStorage.Enqueue(PurchLine.Quantity);
      PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");
      AssignItemTrackingLinesOnPurchaseOrder(PurchHeader);

      // [WHEN] Post Purchase Order
      InvNo := LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      // [THEN] The value of "Serial No." in Job Ledger Entry is assigned
      FindJobLedgerEntry(JobLedgEntry,InvNo,JobPlanningLine."No.");
      JobLedgEntry.TESTFIELD("Serial No.");

      // [THEN] The value of "Serial No." in Job Planning Line is equal value in Job Ledger Entry
      JobPlanningLine.FIND;
      JobPlanningLine.TESTFIELD("Serial No.",JobLedgEntry."Serial No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE LotNoAssignedToJobPlanningLineFromJobLedgEntryAfterPurchOrderWithTrackingAndStrictLinkToJob@179();
    VAR
      PurchHeader@1003 : Record 38;
      PurchLine@1002 : Record 39;
      JobPlanningLine@1004 : Record 1003;
      JobLedgEntry@1001 : Record 169;
      InvNo@1005 : Code[20];
      LotNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Item Tracking] [Lot No.]
      // [SCENARIO 382364] "Lot No." in Job Planning Line is equal the same field from Job Ledger Entry after posting Purchase Order with Item Tracking and "Job Planning Line No." defined

      Initialize;

      // [GIVEN] Job with Planning Line - "Usage Link" and Item "X" with Tracking by "Lot Nos."
      CreateJobWithPlanningUsageLinkAndSpecificItem(JobPlanningLine,CreateItemWithTrackingCode(TRUE,FALSE));

      // [GIVEN] Purchase Order with Item "X", Job ("Job Planning Line No." is defined to make strict link to Job)
      LibraryVariableStorage.Enqueue(FALSE);
      LotNo := LibraryUtility.GenerateGUID;  // Assign in Global variable.
      LibraryVariableStorage.Enqueue(LotNo);
      CreatePurchaseDocument(PurchLine,PurchHeader."Document Type"::Order,JobPlanningLine."No.");
      UpdatePurchaseLine(PurchLine,JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",PurchLine."Job Line Type"::Schedule);
      PurchLine.VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
      PurchLine.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(PurchLine.Quantity);
      PurchHeader.GET(PurchLine."Document Type",PurchLine."Document No.");
      AssignItemTrackingLinesOnPurchaseOrder(PurchHeader);

      // [WHEN] Post Purchase Order
      InvNo := LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      // [THEN] The value of "Lot No." in Job Ledger Entry is assigned
      FindJobLedgerEntry(JobLedgEntry,InvNo,JobPlanningLine."No.");
      JobLedgEntry.TESTFIELD("Lot No.");

      // [THEN] The value of "Lot No." in Job Planning Line is equal value in Job Ledger Entry
      JobPlanningLine.FIND;
      JobPlanningLine.TESTFIELD("Lot No.",JobLedgEntry."Lot No.");
    END;

    LOCAL PROCEDURE Initialize@2();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Clear the needed global variables.
      ClearGlobals;
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      IsInitialized := TRUE;
    END;

    LOCAL PROCEDURE AssignGlobalVariables@95(LineAmountLCY@1000 : Decimal;TotalCostLCY@1001 : Decimal;LineAmount@1002 : Decimal;TotalCost@1003 : Decimal);
    BEGIN
      // Assigning global variables as required in Page Handler.
      Amount := Amount + LineAmountLCY;
      Cost := Cost + TotalCostLCY;
      AmountFCY := AmountFCY + LineAmount;
      CostFCY := CostFCY + TotalCost;
    END;

    LOCAL PROCEDURE AssignItemTrackingLinesOnPurchaseOrder@39(VAR PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseOrder@1001 : TestPage 50;
    BEGIN
      PurchaseOrder.OPENVIEW;
      PurchaseOrder.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      PurchaseOrder.PurchLines."Item Tracking Lines".INVOKE;
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE AssignItemTrackingLinesOnJobJournal@50(VAR JobJournalLine@1002 : Record 210);
    VAR
      JobJournal@1001 : TestPage 201;
    BEGIN
      JobJournal.OPENEDIT;
      JobJournal.CurrentJnlBatchName.SETVALUE(JobJournalLine."Journal Batch Name");
      JobJournal.ItemTrackingLines.INVOKE;
      JobJournalLine.GET(JobJournalLine."Journal Template Name",JobJournalLine."Journal Batch Name",JobJournalLine."Line No.");
    END;

    LOCAL PROCEDURE ClearGlobals@70();
    BEGIN
      JournalTemplateName := '';
      Amount := 0;
      Cost := 0;
      AmountFCY := 0;
      CostFCY := 0;
      InvoicedCostFCY := 0;
      VerifyTrackingLine := FALSE;
      CLEAR(SerialNo);
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoice@80(VAR JobPlanningLine@1000 : Record 1003;CustomerNo@1001 : Code[20]);
    VAR
      JobCreateInvoice@1002 : Codeunit 1002;
    BEGIN
      COMMIT;
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,FALSE);
      PostSalesInvoice(CustomerNo);
    END;

    LOCAL PROCEDURE CreateAndReceivePurchaseOrder@111(VAR PurchaseHeader@1002 : Record 38;ItemNo@1000 : Code[20];UnitOfMeasureCode@1001 : Code[10]);
    VAR
      JobTask@1003 : Record 1001;
      PurchaseLine@1004 : Record 39;
    BEGIN
      CreateJobWithJobTask(JobTask);
      CreatePurchaseOrderWithJob(
        PurchaseLine,PurchaseLine."Document Type"::Order,JobTask,ItemNo,PurchaseLine."Job Line Type"::Contract);
      PurchaseLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      PurchaseLine.MODIFY(TRUE);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndUpdateJobPlanningLine@78(VAR JobPlanningLine@1000 : Record 1003;JobTask@1001 : Record 1001;JobLineType@1004 : Option;No@1002 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      LibraryJob.CreateJobPlanningLine(JobLineType,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("No.",No);
      JobPlanningLine.VALIDATE(Quantity,Quantity);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomer@114(CurrencyCode@1001 : Code[10]) : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",CurrencyCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateItem@43() : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",RANDOM(50) + LibraryUtility.GenerateRandomFraction);  // Use Random value for Unit Price.
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemWithAutomaticExtText@118(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Automatic Ext. Texts",TRUE);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournalBatch@189(VAR ItemJournalBatch@1000 : Record 233);
    VAR
      ItemJournalTemplate@1001 : Record 82;
    BEGIN
      ItemJournalTemplate.SETRANGE(Recurring,FALSE);
      ItemJournalTemplate.SETRANGE(Type,ItemJournalTemplate.Type::Item);
      LibraryInventory.FindItemJournalTemplate(ItemJournalTemplate);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
      COMMIT;
    END;

    LOCAL PROCEDURE CreateItemWithNewUOM@108(VAR ItemUnitOfMeasure@1003 : Record 5404);
    BEGIN
      // Create Item with one more Unit of Measure Code where Qty. per Unit of Measure is 1.
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,CreateItem,1);
    END;

    LOCAL PROCEDURE CreateItemWithInventoryAdjustmentAccount@86() : Code[20];
    BEGIN
      EXIT(CreateItem);
    END;

    LOCAL PROCEDURE CreateItemWithTrackingCode@32(LotSpecificTracking@1002 : Boolean;SNSpecificTracking@1000 : Boolean) : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.GET(CreateItem);
      Item.VALIDATE("Item Tracking Code",CreateTrackingCodeWithLotSpecific(LotSpecificTracking,SNSpecificTracking));
      Item.VALIDATE("Last Direct Cost",RANDOM(100) + LibraryUtility.GenerateRandomFraction);  // Take Random value for Last Direct Cost.
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemUnitOfMeasure@145(VAR ItemUnitOfMeasure@1000 : Record 5404;ItemNo@1001 : Code[20]);
    VAR
      UnitOfMeasure@1002 : Record 204;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUnitOfMeasure,ItemNo,UnitOfMeasure.Code,LibraryRandom.RandIntInRange(3,10));
    END;

    LOCAL PROCEDURE CreateLocationWithBin@127(VAR Bin@1000 : Record 7354);
    VAR
      Location@1001 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.MODIFY(TRUE);

      LibraryWarehouse.CreateBin(
        Bin,Location.Code,LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),'','');
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@37(VAR PurchaseLine@1000 : Record 39;DocumentType@1003 : Option;No@1004 : Code[20]);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,DocumentType,'');
      CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,No);
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@103(VAR PurchaseHeader@1000 : Record 38;DocumentType@1001 : Option;BuyFromVendorNo@1002 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,BuyFromVendorNo);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@100(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1001 : Record 38;Type@1002 : Option;No@1003 : Code[20]);
    BEGIN
      // Create Purchase Line with Random Quantity and Direct Unit Cost.
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,Type,No,RANDOM(10));
      PurchaseLine.VALIDATE("Direct Unit Cost",RANDOM(100) + LibraryUtility.GenerateRandomFraction);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchLineWithExactQuantityAndJobLink@170(VAR PurchaseLine@1003 : Record 39;PurchaseHeader@1002 : Record 38;Type@1001 : Option;No@1000 : Code[20];JobPlanningLine@1005 : Record 1003;Quantity@1004 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,Type,No,Quantity);
      UpdatePurchaseLine(PurchaseLine,JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",PurchaseLine."Job Line Type"::Schedule);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDecInDecimalRange(100,200,2));
      PurchaseLine.VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithJob@82(VAR PurchaseLine@1001 : Record 39;DcoumentType@1002 : Option;JobTask@1005 : Record 1001;ItemNo@1000 : Code[20];JobLineType@1004 : Option);
    BEGIN
      CreatePurchaseDocument(PurchaseLine,DcoumentType,ItemNo);
      PurchaseLine.VALIDATE("Direct Unit Cost",RANDOM(100));  // Use Random value for Direct Unit Cost.
      PurchaseLine.VALIDATE("Job No.",JobTask."Job No.");
      PurchaseLine.VALIDATE("Job Task No.",JobTask."Job Task No.");
      PurchaseLine.VALIDATE("Job Line Type",JobLineType);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentWithJobAndItemTracking@27(VAR PurchaseLine@1002 : Record 39;DocumentType@1000 : Option;JobLineType@1006 : Option;LotSpecificTracking@1005 : Boolean;SNSpecificTracking@1004 : Boolean);
    VAR
      JobTask@1003 : Record 1001;
    BEGIN
      // Create a Job and Job Task, Create Purchase Order With Job, Update General Posting Setup and assign Item Tracking Lines on Purchase Order.
      CreateJobWithJobTask(JobTask);
      CreatePurchaseDocument(PurchaseLine,DocumentType,CreateItemWithTrackingCode(LotSpecificTracking,SNSpecificTracking));
      UpdatePurchaseLine(PurchaseLine,JobTask."Job No.",JobTask."Job Task No.",JobLineType);
      LibraryVariableStorage.Enqueue(PurchaseLine.Quantity);
    END;

    LOCAL PROCEDURE CreateJobCard@18(Job@1000 : Record 167) JobNo : Code[20];
    VAR
      JobCard@1001 : TestPage 88;
    BEGIN
      JobCard.OPENNEW;
      JobCard.Description.ACTIVATE; // Need to change focus to get Job No. assigned.
      JobNo := JobCard."No.".VALUE;
      JobCard.OK.INVOKE;

      JobCard.OPENEDIT; // Need to reopen page to refresh fields.
      JobCard.FILTER.SETFILTER("No.",JobNo);
      JobCard."Bill-to Customer No.".SETVALUE(Job."Bill-to Customer No.");
      JobCard."Person Responsible".SETVALUE(Job."Person Responsible");
      JobCard."Job Posting Group".SETVALUE(Job."Job Posting Group");
      JobCard."WIP Method".SETVALUE(Job."WIP Method");
      JobCard.Status.SETVALUE(Job.Status);
      JobCard.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateJobJournalLine@4(LineType@1005 : Option;Type@1004 : Option;VAR JobJournalLine@1000 : Record 210;JobTask@1001 : Record 1001;No@1002 : Code[20];Quantity@1003 : Decimal;UnitCost@1006 : Decimal;UnitPrice@1007 : Decimal);
    BEGIN
      LibraryJob.CreateJobJournalLineForType(LineType,Type,JobTask,JobJournalLine);
      JobJournalLine.VALIDATE("No.",No);
      JobJournalLine.VALIDATE(Quantity,Quantity);
      JobJournalLine.VALIDATE("Unit Cost",UnitCost);
      JobJournalLine.VALIDATE("Unit Price",UnitPrice);
      JobJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobJournalLinesForDifferentType@68(Job@1000 : Record 167;VAR JobJournalLine@1001 : Record 210);
    VAR
      JobTask@1003 : Record 1001;
      Quantity@1005 : Decimal;
      UnitCost@1006 : Decimal;
      UnitPrice@1007 : Decimal;
    BEGIN
      LibraryJob.CreateJobTask(Job,JobTask);

      // Assigning Random Values to variables because the values of Unit Price and Unit Cost should be different and to have same values for all types of Job Planning Lines.
      Quantity := RANDOM(10);
      UnitCost := RANDOM(50) + LibraryUtility.GenerateRandomFraction;
      UnitPrice := RANDOM(100) + LibraryUtility.GenerateRandomFraction;
      CreateJobJournalLine(
        LibraryJob.UsageLineTypeSchedule,JobJournalLine.Type::Resource,JobJournalLine,JobTask,
        LibraryResource.CreateResourceNo,Quantity,UnitCost,UnitPrice);
      CreateJobJournalLine(
        LibraryJob.UsageLineTypeSchedule,JobJournalLine.Type::Item,JobJournalLine,JobTask,
        CreateItemWithInventoryAdjustmentAccount,Quantity,UnitCost,UnitPrice);
      CreateJobJournalLine(
        LibraryJob.UsageLineTypeSchedule,JobJournalLine.Type::"G/L Account",JobJournalLine,JobTask,
        LibraryERM.CreateGLAccountWithSalesSetup,Quantity,UnitCost,UnitPrice);
      AssignGlobalVariables(
        JobJournalLine."Line Amount (LCY)",JobJournalLine."Total Cost (LCY)",JobJournalLine."Line Amount",JobJournalLine."Total Cost");  // Assigning global variables as required in Page Handler.
    END;

    LOCAL PROCEDURE CreateJobJournalLineForItem@47(VAR JobJournalLine@1001 : Record 210;JobTask@1000 : Record 1001;LineType@1002 : Option;No@1003 : Code[20];Quantity@1004 : Decimal);
    BEGIN
      LibraryJob.CreateJobJournalLine(LineType,JobTask,JobJournalLine);
      JobJournalLine.VALIDATE(Type,JobJournalLine.Type::Item);
      JobJournalLine.VALIDATE("No.",No);
      JobJournalLine.VALIDATE(Quantity,Quantity);
      JobJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobJournalLineWithItemTracking@45(VAR JobJournalLine@1004 : Record 210;JobTask@1003 : Record 1001;No@1001 : Code[20];Quantity@1000 : Decimal);
    BEGIN
      CreateJobJournalLineForItem(JobJournalLine,JobTask,JobJournalLine."Line Type"::"Both Schedule and Contract",No,Quantity);
      JournalTemplateName := JobJournalLine."Journal Template Name";  // Assign in Global variable.
    END;

    LOCAL PROCEDURE CreateJobPlanningLine@28(VAR JobPlanningLine@1001 : Record 1003;LineType@1002 : Option;Type@1003 : Option;JobTask@1000 : Record 1001;No@1007 : Code[20];Quantity@1004 : Decimal;UnitCost@1005 : Decimal;UnitPrice@1006 : Decimal);
    BEGIN
      LibraryJob.CreateJobPlanningLine(LineType,Type,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("No.",No);
      JobPlanningLine.VALIDATE(Quantity,Quantity);
      JobPlanningLine.VALIDATE("Unit Cost",UnitCost);
      JobPlanningLine.VALIDATE("Unit Price",UnitPrice);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobPlanningLinesForDifferentType@79(Job@1000 : Record 167;VAR JobPlanningLine@1001 : Record 1003);
    VAR
      GLAccount@1005 : Record 15;
      JobTask@1006 : Record 1001;
      Quantity@1002 : Decimal;
      UnitCost@1003 : Decimal;
      UnitPrice@1004 : Decimal;
    BEGIN
      LibraryJob.CreateJobTask(Job,JobTask);

      // Assigning Random Values to variables because the values of Unit Price and Unit Cost should be different and to have same values for all types of Job Planning Lines.
      Quantity := RANDOM(10);
      UnitCost := RANDOM(50) + LibraryUtility.GenerateRandomFraction;
      UnitPrice := RANDOM(100) + LibraryUtility.GenerateRandomFraction;
      LibraryERM.FindGLAccount(GLAccount);
      CreateJobPlanningLine(
        JobPlanningLine,LibraryJob.PlanningLineTypeContract,LibraryJob.ResourceType,JobTask,LibraryResource.CreateResourceNo,
        Quantity,UnitCost,UnitPrice);
      CreateJobPlanningLine(
        JobPlanningLine,LibraryJob.PlanningLineTypeContract,LibraryJob.ItemType,JobTask,CreateItemWithInventoryAdjustmentAccount,
        Quantity,UnitCost,UnitPrice);
      CreateJobPlanningLine(
        JobPlanningLine,LibraryJob.PlanningLineTypeContract,LibraryJob.GLAccountType,JobTask,GLAccount."No.",
        Quantity,UnitCost,UnitPrice);
      AssignGlobalVariables(
        JobPlanningLine."Line Amount (LCY)",JobPlanningLine."Total Cost (LCY)",JobPlanningLine."Line Amount",
        JobPlanningLine."Total Cost");  // Assigning global variables as required in Page Handler.
    END;

    LOCAL PROCEDURE CreateJobWithCurrency@77(VAR Job@1001 : Record 167);
    BEGIN
      CreateJobWithCustomer(Job,CreateCustomer(''));  // Blank value for Currency Code.
      Job.VALIDATE("Currency Code",CreateCurrency);
      Job.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobWithJobTask@3(VAR JobTask@1000 : Record 1001);
    VAR
      Job@1001 : Record 167;
    BEGIN
      CreateJobWithCustomer(Job,CreateCustomer(''));  // Blank value for Currency Code.
      LibraryJob.CreateJobTask(Job,JobTask);
    END;

    LOCAL PROCEDURE CreateJobWithCustomer@64(VAR Job@1000 : Record 167;BillToCustomerNo@1002 : Code[20]);
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Bill-to Customer No.",BillToCustomerNo);
      Job.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobWithPlanningUsageLink@123(VAR JobPlanningLine@1000 : Record 1003);
    VAR
      JobTask@1002 : Record 1001;
    BEGIN
      CreateJobWithJobTask(JobTask);

      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("Usage Link",TRUE);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobWithPlanningUsageLinkAndSpecificItem@152(VAR JobPlanningLine@1000 : Record 1003;ItemNo@1001 : Code[20]);
    VAR
      JobTask@1002 : Record 1001;
    BEGIN
      CreateJobWithJobTask(JobTask);

      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("No.",ItemNo);
      JobPlanningLine.VALIDATE(Quantity,LibraryRandom.RandInt(100));
      JobPlanningLine.VALIDATE("Usage Link",TRUE);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMultipleItemJournalLines@190(VAR ItemJournalLine@1000 : Record 83;ItemNo@1002 : Code[20];NoOfLines@1005 : Integer) TotalAmount : Decimal;
    VAR
      ItemJournalBatch@1003 : Record 233;
      Counter@1001 : Integer;
      UnitAmount@1004 : Decimal;
    BEGIN
      CreateItemJournalBatch(ItemJournalBatch);
      FOR Counter := 1 TO NoOfLines DO BEGIN
        UnitAmount := UnitAmount + RANDOM(10);  // To have different unit amounts on item Journal Lines.
        TotalAmount := TotalAmount + UnitAmount;  // Required to verify Unit Cost on Item Card.
        LibraryInventory.CreateItemJournalLine(
          ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
          ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,1);  // Using 1 for Quantity as value is important for test.
        ItemJournalLine.VALIDATE("Document No.",ItemJournalLine."Journal Batch Name" + FORMAT(ItemJournalLine."Line No."));  // Value is important for test for verification.
        ItemJournalLine.VALIDATE("Unit Amount",UnitAmount);
        ItemJournalLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseLineForPlan@130(VAR PurchaseLine@1000 : Record 39;JobPlanningLine@1001 : Record 1003;Bin@1003 : Record 7354);
    BEGIN
      LibraryJob.CreatePurchaseLineForPlan(JobPlanningLine,PurchaseLine."Job Line Type"::Schedule,1,PurchaseLine);
      PurchaseLine.VALIDATE("Location Code",Bin."Location Code");
      PurchaseLine.VALIDATE("Bin Code",Bin.Code);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJob@24(VAR Job@1007 : Record 167;JobStatus@1005 : Option);
    VAR
      JobWIPMethod@1003 : Record 1006;
      Resource@1002 : Record 156;
    BEGIN
      // Find Resource and Job WIP Method.
      Resource.SETRANGE(Type,Resource.Type::Person);
      LibraryResource.FindResource(Resource);
      JobWIPMethod.FINDFIRST;

      // Create a Job.
      LibraryJob.CreateJob(Job);
      Job.VALIDATE(Status,JobStatus);
      Job.VALIDATE("Person Responsible",Resource."No.");
      Job.VALIDATE("WIP Method",JobWIPMethod.Code);
      Job.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobGLJournalLine@22(VAR GenJournalLine@1000 : Record 81;JobTask@1001 : Record 1001);
    BEGIN
      LibraryJob.CreateJobGLJournalLine(GenJournalLine."Job Line Type"::Contract,JobTask,GenJournalLine);
      GenJournalLine.VALIDATE("Job Unit Price (LCY)",RANDOM(10) + LibraryUtility.GenerateRandomFraction); // Taking random value for Job Unit Price.
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTrackingCodeWithLotSpecific@48(LotSpecificTracking@1001 : Boolean;SNSpecificTracking@1002 : Boolean) : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,SNSpecificTracking,LotSpecificTracking);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateCurrency@58() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE FindDimensionValue@132(GlobalDimensionCode@1000 : Code[20]) : Code[20];
    VAR
      DimensionValue@1001 : Record 349;
    BEGIN
      DimensionValue.SETRANGE("Dimension Code",GlobalDimensionCode);
      DimensionValue.FINDLAST;
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateCustomerWithCurrency@147(VAR CustomerNo@1001 : Code[20];VAR CurrencyCode@1000 : Code[10]);
    BEGIN
      CurrencyCode := CreateCurrency;
      CustomerNo := CreateCustomer(CurrencyCode);
    END;

    LOCAL PROCEDURE FindJobLedgerEntry@89(VAR JobLedgerEntry@1002 : Record 169;DocumentNo@1000 : Code[20];No@1001 : Code[20]);
    BEGIN
      JobLedgerEntry.SETRANGE("Document No.",DocumentNo);
      JobLedgerEntry.SETRANGE("No.",No);
      JobLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseLine@63(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1001 : Record 38);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE GenerateJobNo@11() : Code[20];
    VAR
      Job@1000 : Record 167;
    BEGIN
      EXIT(
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Job.FIELDNO("No."),DATABASE::Job),1,
          LibraryUtility.GetFieldLength(DATABASE::Job,Job.FIELDNO("No."))));
    END;

    LOCAL PROCEDURE ModifyQtyPerUnitOfMeasure@102(ItemUnitOfMeasure@1000 : Record 5404;QtyPerUnitOfMeasure@1001 : Decimal);
    BEGIN
      ItemUnitOfMeasure.VALIDATE("Qty. per Unit of Measure",QtyPerUnitOfMeasure);
      ItemUnitOfMeasure.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OpenJobCard@90(JobNo@1001 : Code[20]);
    VAR
      JobCard@1000 : TestPage 88;
    BEGIN
      JobCard.OPENEDIT;
      JobCard.FILTER.SETFILTER("No.",JobNo);
      JobCard."Page Job Statistics".INVOKE;
      JobCard.OK.INVOKE;
    END;

    LOCAL PROCEDURE OpenJobTaskLines@96(JobNo@1001 : Code[20]);
    VAR
      JobTaskLines@1000 : TestPage 1002;
    BEGIN
      JobTaskLines.OPENEDIT;
      JobTaskLines.FILTER.SETFILTER("Job No.",JobNo);
      JobTaskLines.JobTaskStatistics.INVOKE;
      JobTaskLines.OK.INVOKE;
    END;

    LOCAL PROCEDURE GetPostedDocumentLinesToReverse@84(No@1001 : Code[20]);
    VAR
      PurchaseReturnOrder@1000 : TestPage 6640;
    BEGIN
      PurchaseReturnOrder.OPENEDIT;
      PurchaseReturnOrder.FILTER.SETFILTER("No.",No);
      PurchaseReturnOrder.GetPostedDocumentLinesToReverse.INVOKE;
    END;

    LOCAL PROCEDURE PostPurchaseInvoice@72(VAR PurchaseHeader@1004 : Record 38);
    VAR
      GLAccount@1003 : Record 15;
      GeneralPostingSetup@1002 : Record 252;
      PurchaseLine@1000 : Record 39;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      CreatePurchaseDocumentWithJobAndItemTracking(
        PurchaseLine,PurchaseLine."Document Type"::Invoice,PurchaseLine."Job Line Type"::" ",FALSE,TRUE);
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      UpdateGeneralPostingSetup(GeneralPostingSetup,GLAccount."No.");
      PurchaseLine.OpenItemTrackingLines;
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
    END;

    LOCAL PROCEDURE PostPurchaseInvoiceWithItemTrackingLines@140(VAR PurchaseHeader@1004 : Record 38);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      CreatePurchaseDocument(PurchaseLine,PurchaseLine."Document Type"::Invoice,CreateItemWithTrackingCode(FALSE,TRUE));
      LibraryVariableStorage.Enqueue(PurchaseLine.Quantity);

      PurchaseLine.OpenItemTrackingLines;
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE PostPurchaseReceipt@135(OrderNo@1000 : Code[20]) : Code[20];
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,OrderNo);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE));
    END;

    LOCAL PROCEDURE PostPurchaseOrderWithItemTracking@46(VAR PurchaseLine@1001 : Record 39;Invoice@1000 : Boolean) DocumentNo : Code[20];
    VAR
      PurchaseHeader@1002 : Record 38;
    BEGIN
      CreatePurchaseDocument(PurchaseLine,PurchaseLine."Document Type"::Order,CreateItemWithTrackingCode(TRUE,FALSE));
      LibraryVariableStorage.Enqueue(PurchaseLine.Quantity);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      AssignItemTrackingLinesOnPurchaseOrder(PurchaseHeader);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,Invoice);
    END;

    LOCAL PROCEDURE PostedPurchaseOrderWithJob@113(DocumentType@1000 : Option);
    VAR
      JobTask@1006 : Record 1001;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      GLAccount@1007 : Record 15;
      GeneralPostingSetup@1008 : Record 252;
      PostedOrderNo@1003 : Code[20];
      OldAutomaticCostPosting@1002 : Boolean;
      OldExpectedCostPosting@1001 : Boolean;
    BEGIN
      // Setup: Set Inventory Setup.
      Initialize;
      UpdateInventorySetupWithExpectedCost(OldAutomaticCostPosting,OldExpectedCostPosting,TRUE,TRUE);

      // Excercise : Create And Post Purchase Order With Job No.
      CreateJobWithJobTask(JobTask);
      CreatePurchaseOrderWithJob(PurchaseLine,DocumentType,JobTask,CreateItem,PurchaseLine."Job Line Type"::Contract);
      LibraryERM.CreateGLAccount(GLAccount);
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      UpdateGeneralPostingSetup(GeneralPostingSetup,GLAccount."No.");
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      PostedOrderNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // Verify: Verify G/L Entries.
      VerifyGLEntry(PostedOrderNo,PurchaseLine."Line Amount");

      // Tear Down: Cleanup of setup done.
      RestoreInventorySetup(OldAutomaticCostPosting,OldExpectedCostPosting);
    END;

    LOCAL PROCEDURE PostSalesInvoice@60(CustomerNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Find and Post the Sales Invoice created from Job Planning Line.
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice);
      SalesLine.SETRANGE("Bill-to Customer No.",CustomerNo);
      SalesLine.FINDFIRST;
      InvoicedCostFCY :=
        InvoicedCostFCY +
        ROUND(SalesLine."Unit Cost" * SalesLine.Quantity,LibraryJob.GetAmountRoundingPrecision(SalesLine."Currency Code"));  // Assigning value to Global Variable as required in page handler.
      SalesHeader.GET(SalesHeader."Document Type"::Invoice,SalesLine."Document No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE ReceivePurchaseOrderWithNewUOM@85(VAR PurchaseHeader@1002 : Record 38) QtyPerUnitOfMeasure : Decimal;
    VAR
      ItemUnitOfMeasure@1000 : Record 5404;
    BEGIN
      // 1. Setup: Create New Unit of Measure, create and receive Purchase Order with Job and new Unit of Measure Code.
      CreateItemWithNewUOM(ItemUnitOfMeasure);
      CreateAndReceivePurchaseOrder(PurchaseHeader,ItemUnitOfMeasure."Item No.",ItemUnitOfMeasure.Code);
      QtyPerUnitOfMeasure := ItemUnitOfMeasure."Qty. per Unit of Measure" + RANDOM(10);  // Use Random value to change Qty. per Unit of Measure.
    END;

    LOCAL PROCEDURE RestoreInventorySetup@110(AutomaticCostPosting@1002 : Boolean;ExpectedCostPosting@1000 : Boolean);
    VAR
      InventorySetup@1001 : Record 313;
    BEGIN
      InventorySetup.GET;
      InventorySetup.VALIDATE("Automatic Cost Posting",AutomaticCostPosting);
      InventorySetup.VALIDATE("Expected Cost Posting to G/L",ExpectedCostPosting);
      InventorySetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunCopyJob@15(No@1001 : Code[20]);
    VAR
      JobList@1000 : TestPage 89;
    BEGIN
      JobList.OPENVIEW;
      JobList.FILTER.SETFILTER("No.",No);
      JobList.CopyJob.INVOKE;
    END;

    LOCAL PROCEDURE SalesDocumentDoesNotExistWhenItemBlocked@112(SalesDocumentType@1009 : Boolean);
    VAR
      Item@1002 : Record 27;
      ItemForBlocking@1000 : Record 27;
      SalesHeader@1004 : Record 36;
      Job@1007 : Record 167;
      JobTask@1005 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      ExtendedTextHeader@1003 : Record 279;
      JobCreateInvoice@1006 : Codeunit 1002;
    BEGIN
      // Create Items with Automatic Extended Text and Block one of the created Item after creating Job Planning Lines.
      Initialize;
      CreateJobWithJobTask(JobTask);
      Job.GET(JobTask."Job No.");
      CreateItemWithAutomaticExtText(Item);
      UpdateAllLanguagesCodeOnExtendedTextHeader(ExtendedTextHeader,Item."No.");
      CreateItemWithAutomaticExtText(ItemForBlocking);
      CreateAndUpdateJobPlanningLine(JobPlanningLine,JobTask,JobPlanningLine."Line Type"::Schedule,Item."No.",RANDOM(10));
      CreateAndUpdateJobPlanningLine(JobPlanningLine,JobTask,JobPlanningLine."Line Type"::Contract,ItemForBlocking."No.",RANDOM(10));
      ItemForBlocking.VALIDATE(Blocked,TRUE);
      ItemForBlocking.MODIFY(TRUE);

      // Exercise: Create Sales Document After Blocking the Item.
      COMMIT;
      ASSERTERROR JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,SalesDocumentType);

      // Verify: Verify Error Message and Sales Document should not be Created with Customer No.
      Assert.ExpectedError(STRSUBSTNO(BlockedErr,ItemForBlocking."No."));
      SalesHeader.SETRANGE("Sell-to Customer No.",Job."Bill-to Customer No.");
      Assert.IsFalse(SalesHeader.FINDFIRST,SalesDocumentMsg);
    END;

    LOCAL PROCEDURE SalesDocumentExistWithExtendedText@139(SalesDocumentType@1009 : Boolean);
    VAR
      Item@1007 : Record 27;
      Job@1000 : Record 167;
      JobTask@1004 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
      ExtendedTextHeader@1002 : Record 279;
      ExtendedTextLine@1008 : Record 280;
      JobCreateInvoice@1001 : Codeunit 1002;
    BEGIN
      // Create Item with Extended Text and Create Job Planning Line.
      Initialize;
      CreateJobWithJobTask(JobTask);
      Job.GET(JobTask."Job No.");
      CreateItemWithAutomaticExtText(Item);
      UpdateAllLanguagesCodeOnExtendedTextHeader(ExtendedTextHeader,Item."No.");
      LibraryService.CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
      ExtendedTextLine.VALIDATE(Text,ExtendedTextHeader."No.");
      ExtendedTextLine.MODIFY(TRUE);
      CreateAndUpdateJobPlanningLine(JobPlanningLine,JobTask,JobPlanningLine."Line Type"::Contract,Item."No.",RANDOM(10));

      // Exercise: Create Sales Document.
      COMMIT;
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,SalesDocumentType);

      // Verify: Verify Extended Text exist on Sales Line Description.
      VerifyDescriptionOnCreatedSalesHeader(Job."Bill-to Customer No.",ExtendedTextHeader."No.");
    END;

    LOCAL PROCEDURE SaveItemJnlLineInTempTable@191(VAR TempItemJournalLine@1001 : TEMPORARY Record 83;ItemJournalLine@1000 : Record 83);
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalLine."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalLine."Journal Batch Name");
      ItemJournalLine.FINDSET;
      REPEAT
        TempItemJournalLine := ItemJournalLine;
        TempItemJournalLine.INSERT;
      UNTIL ItemJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UndoPurchaseReceiptLine@117(DocumentNo@1000 : Code[20];ItemNo@1002 : Code[20]);
    VAR
      PurchRcptLine@1001 : Record 121;
    BEGIN
      PurchRcptLine.SETRANGE("Document No.",DocumentNo);
      PurchRcptLine.SETRANGE("No.",ItemNo);
      PurchRcptLine.FINDFIRST;
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);
    END;

    LOCAL PROCEDURE UpdateGeneralPostingSetup@34(GeneralPostingSetup@1000 : Record 252;InventoryAdjmtAccount@1001 : Code[20]);
    BEGIN
      GeneralPostingSetup.GET(GeneralPostingSetup."Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      GeneralPostingSetup.VALIDATE("Inventory Adjmt. Account",InventoryAdjmtAccount);
      GeneralPostingSetup.VALIDATE("Invt. Accrual Acc. (Interim)",InventoryAdjmtAccount);
      GeneralPostingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGlobalDimensionOnJob@124(VAR SourceJob@1000 : Record 167);
    VAR
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      SourceJob.VALIDATE("Global Dimension 1 Code",FindDimensionValue(GeneralLedgerSetup."Global Dimension 1 Code"));
      SourceJob.VALIDATE("Global Dimension 2 Code",FindDimensionValue(GeneralLedgerSetup."Global Dimension 2 Code"));
      SourceJob.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInventorySetup@193(AutomaticCostPosting@1000 : Boolean;AutomaticCostAdjustment@1001 : Option);
    VAR
      InventorySetup@1002 : Record 313;
    BEGIN
      InventorySetup.GET;
      InventorySetup.VALIDATE("Automatic Cost Posting",AutomaticCostPosting);
      InventorySetup.VALIDATE("Automatic Cost Adjustment",AutomaticCostAdjustment);
      InventorySetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInventorySetupWithExpectedCost@106(VAR OldAutomaticCostPosting@1001 : Boolean;VAR OldExpectedCostPosting@1002 : Boolean;NewAutomaticCostPosting@1004 : Boolean;NewExpectedCostPosting@1003 : Boolean);
    VAR
      InventorySetup@1000 : Record 313;
    BEGIN
      InventorySetup.GET;
      OldAutomaticCostPosting := InventorySetup."Automatic Cost Posting";
      OldExpectedCostPosting := InventorySetup."Expected Cost Posting to G/L";
      RestoreInventorySetup(NewAutomaticCostPosting,NewExpectedCostPosting);
    END;

    LOCAL PROCEDURE UpdatePurchaseLine@29(VAR PurchaseLine@1000 : Record 39;JobNo@1001 : Code[20];JobTaskNo@1002 : Code[20];JobLineType@1003 : Option);
    BEGIN
      PurchaseLine.VALIDATE("Job No.",JobNo);
      PurchaseLine.VALIDATE("Job Task No.",JobTaskNo);
      PurchaseLine.VALIDATE("Job Line Type",JobLineType);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchasesAndPayablesSetup@83(ExactCostReversingMandatory@1000 : Boolean);
    VAR
      PurchasesPayablesSetup@1001 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Exact Cost Reversing Mandatory",ExactCostReversingMandatory);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAllLanguagesCodeOnExtendedTextHeader@161(VAR ExtendedTextHeader@1000 : Record 279;ItemNo@1001 : Code[20]);
    BEGIN
      LibraryService.CreateExtendedTextHeaderItem(ExtendedTextHeader,ItemNo);
      ExtendedTextHeader.VALIDATE("All Language Codes",TRUE);
      ExtendedTextHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UndoReturnShipmentLine@116(DocumentNo@1000 : Code[20];No@1002 : Code[20]);
    VAR
      ReturnShipmentLine@1001 : Record 6651;
    BEGIN
      ReturnShipmentLine.SETRANGE("Document No.",DocumentNo);
      ReturnShipmentLine.SETRANGE("No.",No);
      ReturnShipmentLine.FINDFIRST;
      LibraryPurchase.UndoReturnShipmentLine(ReturnShipmentLine);
    END;

    LOCAL PROCEDURE SetupManualNosInJobNoSeries@222(ManualNos@1002 : Boolean);
    VAR
      JobsSetup@1000 : Record 315;
      NoSeries@1001 : Record 308;
    BEGIN
      JobsSetup.GET;
      NoSeries.GET(JobsSetup."Job Nos.");
      NoSeries."Manual Nos." := ManualNos;
      NoSeries.MODIFY;
    END;

    LOCAL PROCEDURE AttachJobTaskToPurchLine@148(VAR PurchLine@1001 : Record 39);
    VAR
      JobTask@1000 : Record 1001;
    BEGIN
      CreateJobWithJobTask(JobTask);
      UpdatePurchaseLine(
        PurchLine,JobTask."Job No.",JobTask."Job Task No.",PurchLine."Job Line Type"::"Both Schedule and Contract");
    END;

    LOCAL PROCEDURE VerifyBinIsEmpty@141(LocationCode@1000 : Code[10];BinCode@1001 : Code[20]);
    VAR
      BinContent@1002 : Record 7302;
    BEGIN
      WITH BinContent DO BEGIN
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Bin Code",BinCode);
        CALCFIELDS(Quantity);
        Assert.AreEqual(0,Quantity,BinContentNotDeletedErr);
      END;
    END;

    LOCAL PROCEDURE VerifyDescriptionOnCreatedSalesHeader@167(SellToCustomerNo@1000 : Code[20];Description@1001 : Text);
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      SalesHeader.SETRANGE("Sell-to Customer No.",SellToCustomerNo);
      SalesHeader.FINDFIRST;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::" ");
      SalesLine.FINDFIRST;
      SalesLine.TESTFIELD(Description,Description);
    END;

    LOCAL PROCEDURE VerifyGLEntry@175(DocumentNo@1000 : Code[20];Amount@1001 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyUnitCostOnItem@194(ItemNo@1002 : Code[20];UnitCost@1001 : Decimal);
    VAR
      Item@1000 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      Item.TESTFIELD("Unit Cost",UnitCost);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntries@195(VAR TempItemJournalLine@1002 : TEMPORARY Record 83);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      TempItemJournalLine.FINDSET;
      REPEAT
        VerifyItemLedgerEntry(
          TempItemJournalLine."Document No.",ItemLedgerEntry."Entry Type"::"Positive Adjmt.",1,1,TempItemJournalLine."Unit Amount");  // Remaining and Invoiced Quantity must be 1.
      UNTIL TempItemJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@33(DocumentNo@1002 : Code[20];EntryType@1001 : Option;RemainingQuantity@1003 : Decimal;InvoicedQuantity@1004 : Decimal;CostAmount@1005 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
      ItemLedgerEntry.TESTFIELD("Remaining Quantity",RemainingQuantity);
      ItemLedgerEntry.TESTFIELD("Invoiced Quantity",InvoicedQuantity);
      ItemLedgerEntry.TESTFIELD("Cost Amount (Actual)",CostAmount);
    END;

    LOCAL PROCEDURE VerifyJob@26(Job@1001 : Record 167;JobNo@1002 : Code[20]);
    VAR
      Job2@1000 : Record 167;
    BEGIN
      Job2.GET(JobNo);
      Job2.TESTFIELD(Status,Job.Status);
      Job2.TESTFIELD("Bill-to Customer No.",Job."Bill-to Customer No.");
      Job2.TESTFIELD("Person Responsible",Job."Person Responsible");
      Job2.TESTFIELD("Job Posting Group",Job."Job Posting Group");
      Job2.TESTFIELD("WIP Method",Job."WIP Method");
    END;

    LOCAL PROCEDURE VerifyJobLedgerEntry@25(JobJournalLine@1005 : Record 210);
    VAR
      JobLedgerEntry@1004 : Record 169;
    BEGIN
      JobLedgerEntry.SETRANGE("Document No.",JobJournalLine."Document No.");
      JobLedgerEntry.SETRANGE("No.",JobJournalLine."No.");
      JobLedgerEntry.FINDFIRST;
      JobLedgerEntry.TESTFIELD("Job Task No.",JobJournalLine."Job Task No.");
      JobLedgerEntry.TESTFIELD(Quantity,JobJournalLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyJobPlanningLine@9(JobJournalLine@1000 : Record 210;LineType@1001 : Option);
    VAR
      JobPlanningLine@1002 : Record 1003;
    BEGIN
      JobPlanningLine.SETRANGE("No.",JobJournalLine."No.");
      JobPlanningLine.SETRANGE("Job No.",JobJournalLine."Job No.");
      JobPlanningLine.SETRANGE("Job Task No.",JobJournalLine."Job Task No.");
      JobPlanningLine.SETRANGE("Line Type",LineType);
      JobPlanningLine.FINDFIRST;
      JobPlanningLine.TESTFIELD(Quantity,JobJournalLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyJobLedgerEntryUsingGeneralJournalLine@21(GenJournalLine@1001 : Record 81);
    VAR
      JobLedgerEntry@1000 : Record 169;
    BEGIN
      JobLedgerEntry.SETRANGE("Job No.",GenJournalLine."Job No.");
      JobLedgerEntry.FINDFIRST;
      JobLedgerEntry.TESTFIELD("Job Task No.",GenJournalLine."Job Task No.");
      JobLedgerEntry.TESTFIELD("No.",GenJournalLine."Account No.");
      JobLedgerEntry.TESTFIELD(Quantity,GenJournalLine."Job Quantity");
      JobLedgerEntry.TESTFIELD("Unit Price",GenJournalLine."Job Unit Price");
    END;

    LOCAL PROCEDURE VerifyJobPlanningLineUsingGeneralJournalLine@23(GenJournalLine@1001 : Record 81);
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      JobPlanningLine.SETRANGE("Job No.",GenJournalLine."Job No.");
      JobPlanningLine.FINDFIRST;
      JobPlanningLine.TESTFIELD("Job Task No.",GenJournalLine."Job Task No.");
      JobPlanningLine.TESTFIELD(Quantity,GenJournalLine."Job Quantity");
      JobPlanningLine.TESTFIELD("Unit Price",GenJournalLine."Job Unit Price");
    END;

    LOCAL PROCEDURE VerifyValueEntry@109(DocumentNo@1001 : Code[20];ItemNo@1002 : Code[20];CostAmountExpected@1003 : Decimal);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.SETRANGE("Item No.",ItemNo);
      ValueEntry.FINDFIRST;
      ValueEntry.TESTFIELD("Cost Amount (Expected)",CostAmountExpected);
    END;

    LOCAL PROCEDURE VerifyApplToItemEntry@149(PurchHeader@1002 : Record 38);
    VAR
      ReservEntry@1001 : Record 337;
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      WITH ReservEntry DO BEGIN
        SETRANGE("Source ID",PurchHeader."No.");
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype",PurchHeader."Document Type");
        FINDFIRST;
      END;

      ItemLedgerEntry.SETRANGE("Item No.",ReservEntry."Item No.");
      ItemLedgerEntry.FINDFIRST;

      Assert.AreEqual(ItemLedgerEntry."Entry No.",ReservEntry."Appl.-to Item Entry",ApplToItemEntryErr);
    END;

    LOCAL PROCEDURE VerifyValuesOnJobPlanningLine@12(JobNo@1001 : Code[20];JobTaskNo@1002 : Code[20];LineNo@1003 : Integer;LineType@1004 : Option;No@1005 : Code[20];Quantity@1006 : Decimal;UnitPrice@1007 : Decimal);
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      JobPlanningLine.GET(JobNo,JobTaskNo,LineNo);
      JobPlanningLine.TESTFIELD("Line Type",LineType);
      JobPlanningLine.TESTFIELD("No.",No);
      JobPlanningLine.TESTFIELD(Quantity,Quantity);
      JobPlanningLine.TESTFIELD("Unit Price",UnitPrice);
    END;

    [ModalPageHandler]
    PROCEDURE CopyJobHandler@20(VAR CopyJob@1000 : TestPage 1040);
    BEGIN
      CopyJob.FromJobTaskNo.LOOKUP;
      CopyJob.ToJobTaskNo.LOOKUP;
      CopyJob.TargetJobNo.SETVALUE(TargetJobNo);
      CopyJob."From Source".SETVALUE(FromSource);
      CopyJob.CopyJobPrices.SETVALUE(TRUE);
      CopyJob.CopyQuantity.SETVALUE(TRUE);
      CopyJob.CopyDimensions.SETVALUE(TRUE);
      CopyJob.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE JobTaskListHandler@19(VAR JobTaskList@1000 : TestPage 1004);
    BEGIN
      JobTaskList.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@8(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE EnterCustomizedSNPageHandler@49(VAR EnterCustomizedSN@1000 : TestPage 6515);
    BEGIN
      EnterCustomizedSN.CustomizedSN.SETVALUE(LibraryUtility.GenerateGUID);
      EnterCustomizedSN.QtyToCreate.SETVALUE(LibraryVariableStorage.DequeueDecimal);
      EnterCustomizedSN.Increment.SETVALUE(1);
      EnterCustomizedSN.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@6(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@30(VAR ItemTrackingLines@1001 : TestPage 6510);
    BEGIN
      IF LibraryVariableStorage.DequeueBoolean THEN BEGIN
        ItemTrackingLines."Select Entries".INVOKE;
        ItemTrackingLines.OK.INVOKE;
        EXIT;
      END;
      ItemTrackingLines."Lot No.".SETVALUE(LibraryVariableStorage.DequeueText);
      ItemTrackingLines."Quantity (Base)".SETVALUE(LibraryVariableStorage.DequeueDecimal);
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSelectEntriesPageHandler@38(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesCreateSerialNoPageHandler@44(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      Count@1002 : Integer;
      Count2@1001 : Integer;
    BEGIN
      IF VerifyTrackingLine THEN BEGIN
        Count := 1;
        ItemTrackingLines.FIRST;
        REPEAT
          ItemTrackingLines."Serial No.".ASSERTEQUALS(SerialNo[Count]);
          Count := Count + 1;
        UNTIL NOT ItemTrackingLines.NEXT;
      END ELSE BEGIN
        ItemTrackingLines.CreateCustomizedSN.INVOKE;
        Count2 := 1;
        ItemTrackingLines.FIRST;
        REPEAT
          SerialNo[Count2] := ItemTrackingLines."Serial No.".VALUE;
          Count2 := Count2 + 1;
        UNTIL NOT ItemTrackingLines.NEXT;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemChargeAssignmentPurchPageHandler@51(VAR ItemChargeAssignmentPurch@1000 : TestPage 5805);
    BEGIN
      ItemChargeAssignmentPurch."Qty. to Assign".SETVALUE(LibraryVariableStorage.DequeueDecimal);
      ItemChargeAssignmentPurch.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE JobJournalTemplateListPageHandler@36(VAR JobJournalTemplateList@1000 : TestPage 275);
    BEGIN
      JobJournalTemplateList.FILTER.SETFILTER(Name,JournalTemplateName);
      JobJournalTemplateList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedPurchaseDocumentLinesPageHandler@54(VAR PostedPurchaseDocumentLines@1000 : TestPage 5855);
    BEGIN
      PostedPurchaseDocumentLines.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE JobTaskStatisticsScheduleUsagePageHandler@97(VAR JobTaskStatistics@1000 : TestPage 1024);
    VAR
      Profit@1003 : Decimal;
      ProfitFCY@1004 : Decimal;
    BEGIN
      // Verify Job Task Statistics Price, Cost and Profit for Schedule and Usage.
      Profit := Amount - Cost;
      ProfitFCY := AmountFCY - CostFCY;
      JobTaskStatistics.SchedulePriceLCY.ASSERTEQUALS(Amount);
      JobTaskStatistics.UsagePriceLCY.ASSERTEQUALS(Amount);
      JobTaskStatistics.ScheduleCostLCY.ASSERTEQUALS(Cost);
      JobTaskStatistics.UsageCostLCY.ASSERTEQUALS(Cost);
      JobTaskStatistics.ScheduleProfitLCY.ASSERTEQUALS(Profit);
      JobTaskStatistics.UsageProfitLCY.ASSERTEQUALS(Profit);
      JobTaskStatistics.SchedulePriceLCYItem.ASSERTEQUALS(Amount);
      JobTaskStatistics.UsagePriceLCYItem.ASSERTEQUALS(Amount);
      JobTaskStatistics.ScheduleCostLCYItem.ASSERTEQUALS(Cost);
      JobTaskStatistics.UsageCostLCYItem.ASSERTEQUALS(Cost);
      JobTaskStatistics.ScheduleProfitLCYItem.ASSERTEQUALS(Profit);
      JobTaskStatistics.UsageProfitLCYItem.ASSERTEQUALS(Profit);
      JobTaskStatistics.SchedulePriceLCYGLAcc.ASSERTEQUALS(Amount);
      JobTaskStatistics.UsagePriceLCYGLAcc.ASSERTEQUALS(Amount);
      JobTaskStatistics.ScheduleCostLCYGLAcc.ASSERTEQUALS(Cost);
      JobTaskStatistics.UsageCostLCYGLAcc.ASSERTEQUALS(Cost);
      JobTaskStatistics.ScheduleProfitLCYGLAcc.ASSERTEQUALS(Profit);
      ASSERTERROR JobTaskStatistics.UsageProfitLCYGLAcc.ASSERTEQUALS(Profit);
      // Multiplying by 3 as three Job Journal Lines for Resource,Item and GLAccount has been created.
      JobTaskStatistics.SchedulePriceLCYTotal.ASSERTEQUALS(Amount * 3);
      JobTaskStatistics.UsagePriceLCYTotal.ASSERTEQUALS(Amount * 3);
      JobTaskStatistics.ScheduleCostLCYTotal.ASSERTEQUALS(Cost * 3);
      JobTaskStatistics.UsageCostLCYTotal.ASSERTEQUALS(Cost * 3);
      JobTaskStatistics.ScheduleProfitLCYTotal.ASSERTEQUALS(Profit * 3);
      JobTaskStatistics.UsageProfitLCYTotal.ASSERTEQUALS(Profit * 3);
      JobTaskStatistics.SchedulePrice.ASSERTEQUALS(AmountFCY);
      JobTaskStatistics.UsagePrice.ASSERTEQUALS(AmountFCY);
      JobTaskStatistics.ScheduleCost.ASSERTEQUALS(CostFCY);
      JobTaskStatistics.UsageCost.ASSERTEQUALS(CostFCY);
      JobTaskStatistics.ScheduleProfit.ASSERTEQUALS(ProfitFCY);
      JobTaskStatistics.UsageProfit.ASSERTEQUALS(ProfitFCY);
      JobTaskStatistics.SchedulePriceItem.ASSERTEQUALS(AmountFCY);
      JobTaskStatistics.UsagePriceItem.ASSERTEQUALS(AmountFCY);
      JobTaskStatistics.ScheduleCostItem.ASSERTEQUALS(CostFCY);
      JobTaskStatistics.UsageCostItem.ASSERTEQUALS(CostFCY);
      JobTaskStatistics.ScheduleProfitItem.ASSERTEQUALS(ProfitFCY);
      JobTaskStatistics.UsageProfitItem.ASSERTEQUALS(ProfitFCY);
      JobTaskStatistics.SchedulePriceGLAcc.ASSERTEQUALS(AmountFCY);
      JobTaskStatistics.UsagePriceGLAcc.ASSERTEQUALS(AmountFCY);
      JobTaskStatistics.ScheduleCostGLAcc.ASSERTEQUALS(CostFCY);
      JobTaskStatistics.UsageCostGLAcc.ASSERTEQUALS(CostFCY);
      JobTaskStatistics.ScheduleProfitGLAcc.ASSERTEQUALS(ProfitFCY);
      ASSERTERROR JobTaskStatistics.UsageProfitGLAcc.ASSERTEQUALS(ProfitFCY);
      // Multiplying by 3 as three Job Journal Lines for Resource,Item and GLAccount has been created.
      JobTaskStatistics.SchedulePriceTotal.ASSERTEQUALS(AmountFCY * 3);
      JobTaskStatistics.UsagePriceTotal.ASSERTEQUALS(AmountFCY * 3);
      JobTaskStatistics.ScheduleCostTotal.ASSERTEQUALS(CostFCY * 3);
      JobTaskStatistics.UsageCostTotal.ASSERTEQUALS(CostFCY * 3);
      JobTaskStatistics.ScheduleProfitTotal.ASSERTEQUALS(ProfitFCY * 3);
      JobTaskStatistics.UsageProfitTotal.ASSERTEQUALS(ProfitFCY * 3);
    END;

    [PageHandler]
    PROCEDURE JobStatisticsScheduleUsagePageHandler@56(VAR JobStatistics@1000 : TestPage 1025);
    VAR
      Profit@1005 : Decimal;
      ProfitFCY@1003 : Decimal;
    BEGIN
      // Verify Job Statistics Price, Cost and Profit for Schedule and Usage.
      Profit := Amount - Cost;
      ProfitFCY := AmountFCY - CostFCY;
      JobStatistics.SchedulePriceLCY.ASSERTEQUALS(Amount);
      JobStatistics.UsagePriceLCY.ASSERTEQUALS(Amount);
      JobStatistics.ScheduleCostLCY.ASSERTEQUALS(Cost);
      JobStatistics.UsageCostLCY.ASSERTEQUALS(Cost);
      JobStatistics.ScheduleProfitLCY.ASSERTEQUALS(Profit);
      JobStatistics.UsageProfitLCY.ASSERTEQUALS(Profit);
      JobStatistics.SchedulePriceLCYItem.ASSERTEQUALS(Amount);
      JobStatistics.UsagePriceLCYItem.ASSERTEQUALS(Amount);
      JobStatistics.ScheduleCostLCYItem.ASSERTEQUALS(Cost);
      JobStatistics.UsageCostLCYItem.ASSERTEQUALS(Cost);
      JobStatistics.ScheduleProfitLCYItem.ASSERTEQUALS(Profit);
      JobStatistics.UsageProfitLCYItem.ASSERTEQUALS(Profit);
      JobStatistics.SchedulePriceLCYGLAcc.ASSERTEQUALS(Amount);
      JobStatistics.UsagePriceLCYGLAcc.ASSERTEQUALS(Amount);
      JobStatistics.ScheduleCostLCYGLAcc.ASSERTEQUALS(Cost);
      JobStatistics.UsageCostLCYGLAcc.ASSERTEQUALS(Cost);
      JobStatistics.ScheduleProfitLCYGLAcc.ASSERTEQUALS(Profit);
      JobStatistics.UsageProfitLCYGLAcc.ASSERTEQUALS(Profit);
      // Multiplying by 3 as three Job Journal Lines for Resource,Item and GLAccount has been created.
      JobStatistics.SchedulePriceLCYTotal.ASSERTEQUALS(Amount * 3);
      JobStatistics.UsagePriceLCYTotal.ASSERTEQUALS(Amount * 3);
      JobStatistics.ScheduleCostLCYTotal.ASSERTEQUALS(Cost * 3);
      JobStatistics.UsageCostLCYTotal.ASSERTEQUALS(Cost * 3);
      JobStatistics.ScheduleProfitLCYTotal.ASSERTEQUALS(Profit * 3);
      JobStatistics.UsageProfitLCYTotal.ASSERTEQUALS(Profit * 3);
      JobStatistics.SchedulePrice.ASSERTEQUALS(AmountFCY);
      JobStatistics.UsagePrice.ASSERTEQUALS(AmountFCY);
      JobStatistics.ScheduleCost.ASSERTEQUALS(CostFCY);
      JobStatistics.UsageCost.ASSERTEQUALS(CostFCY);
      JobStatistics.ScheduleProfit.ASSERTEQUALS(ProfitFCY);
      JobStatistics.UsageProfit.ASSERTEQUALS(ProfitFCY);
      JobStatistics.SchedulePriceItem.ASSERTEQUALS(AmountFCY);
      JobStatistics.UsagePriceItem.ASSERTEQUALS(AmountFCY);
      JobStatistics.ScheduleCostItem.ASSERTEQUALS(CostFCY);
      JobStatistics.UsageCostItem.ASSERTEQUALS(CostFCY);
      JobStatistics.ScheduleProfitItem.ASSERTEQUALS(ProfitFCY);
      JobStatistics.UsageProfitItem.ASSERTEQUALS(ProfitFCY);
      JobStatistics.SchedulePriceGLAcc.ASSERTEQUALS(AmountFCY);
      JobStatistics.UsagePriceGLAcc.ASSERTEQUALS(AmountFCY);
      JobStatistics.ScheduleCostGLAcc.ASSERTEQUALS(CostFCY);
      JobStatistics.UsageCostGLAcc.ASSERTEQUALS(CostFCY);
      JobStatistics.ScheduleProfitGLAcc.ASSERTEQUALS(ProfitFCY);
      JobStatistics.UsageProfitGLAcc.ASSERTEQUALS(ProfitFCY);
      // Multiplying by 3 as three Job Journal Lines for Resource,Item and GLAccount has been created.
      JobStatistics.SchedulePriceTotal.ASSERTEQUALS(AmountFCY * 3);
      JobStatistics.UsagePriceTotal.ASSERTEQUALS(AmountFCY * 3);
      JobStatistics.ScheduleCostTotal.ASSERTEQUALS(CostFCY * 3);
      JobStatistics.UsageCostTotal.ASSERTEQUALS(CostFCY * 3);
      JobStatistics.ScheduleProfitTotal.ASSERTEQUALS(ProfitFCY * 3);
      JobStatistics.UsageProfitTotal.ASSERTEQUALS(ProfitFCY * 3);
    END;

    [PageHandler]
    PROCEDURE JobTaskStatisticsContractInvoicedPageHandler@91(VAR JobTaskStatistics@1000 : TestPage 1024);
    VAR
      Profit@1005 : Decimal;
      ProfitFCY@1003 : Decimal;
    BEGIN
      // Verify Job Task Statistics Price, Cost and Profit for Contract and Invoiced.
      Profit := Amount - Cost;
      ProfitFCY := AmountFCY - CostFCY;
      JobTaskStatistics.ContractPriceLCY.ASSERTEQUALS(Amount);
      JobTaskStatistics.InvoicedPriceLCY.ASSERTEQUALS(Amount);
      JobTaskStatistics.ContractCostLCY.ASSERTEQUALS(Cost);
      JobTaskStatistics.InvoicedCostLCY.ASSERTEQUALS(Cost);
      JobTaskStatistics.ContractProfitLCY.ASSERTEQUALS(Profit);
      JobTaskStatistics.InvoicedProfitLCY.ASSERTEQUALS(Profit);
      JobTaskStatistics.ContractPriceLCYItem.ASSERTEQUALS(Amount);
      JobTaskStatistics.InvoicedPriceLCYItem.ASSERTEQUALS(Amount);
      JobTaskStatistics.ContractCostLCYItem.ASSERTEQUALS(Cost);
      JobTaskStatistics.InvoicedCostLCYItem.ASSERTEQUALS(Cost);
      JobTaskStatistics.ContractProfitLCYItem.ASSERTEQUALS(Profit);
      JobTaskStatistics.InvoicedProfitLCYItem.ASSERTEQUALS(Profit);
      JobTaskStatistics.ContractPriceLCYGLAcc.ASSERTEQUALS(Amount);
      JobTaskStatistics.InvoicedPriceLCYGLAcc.ASSERTEQUALS(Amount);
      JobTaskStatistics.ContractCostLCYGLAcc.ASSERTEQUALS(Cost);
      JobTaskStatistics.InvoicedCostLCYGLAcc.ASSERTEQUALS(Cost);
      JobTaskStatistics.ContractProfitLCYGLAcc.ASSERTEQUALS(Profit);
      JobTaskStatistics.InvoicedProfitLCYGLAcc.ASSERTEQUALS(Profit);
      // Multiplying by 3 as three Job Planning Lines for Resource,Item and GLAccount has been created.
      JobTaskStatistics.ContractPriceLCYTotal.ASSERTEQUALS(Amount * 3);
      JobTaskStatistics.InvoicedPriceLCYTotal.ASSERTEQUALS(Amount * 3);
      JobTaskStatistics.ContractCostLCYTotal.ASSERTEQUALS(Cost * 3);
      JobTaskStatistics.InvoicedCostLCYTotal.ASSERTEQUALS(Cost * 3);
      JobTaskStatistics.ContractProfitLCYTotal.ASSERTEQUALS(Profit * 3);
      JobTaskStatistics.InvoicedProfitLCYTotal.ASSERTEQUALS(Profit * 3);
      JobTaskStatistics.ContractPrice.ASSERTEQUALS(AmountFCY);
      JobTaskStatistics.InvoicedPrice.ASSERTEQUALS(AmountFCY);
      JobTaskStatistics.ContractCost.ASSERTEQUALS(CostFCY);
      JobTaskStatistics.InvoicedCost.ASSERTEQUALS(InvoicedCostFCY);
      JobTaskStatistics.ContractProfit.ASSERTEQUALS(ProfitFCY);
      JobTaskStatistics.InvoicedProfit.ASSERTEQUALS(AmountFCY - InvoicedCostFCY);
      JobTaskStatistics.ContractPriceItem.ASSERTEQUALS(AmountFCY);
      JobTaskStatistics.InvoicedPriceItem.ASSERTEQUALS(AmountFCY);
      JobTaskStatistics.ContractCostItem.ASSERTEQUALS(CostFCY);
      JobTaskStatistics.InvoicedCostItem.ASSERTEQUALS(InvoicedCostFCY);
      JobTaskStatistics.ContractProfitItem.ASSERTEQUALS(ProfitFCY);
      JobTaskStatistics.InvoicedProfitItem.ASSERTEQUALS(AmountFCY - InvoicedCostFCY);
      JobTaskStatistics.ContractPriceGLAcc.ASSERTEQUALS(AmountFCY);
      JobTaskStatistics.InvoicedPriceGLAcc.ASSERTEQUALS(AmountFCY);
      JobTaskStatistics.ContractCostGLAcc.ASSERTEQUALS(CostFCY);
      JobTaskStatistics.InvoicedCostGLAcc.ASSERTEQUALS(InvoicedCostFCY);
      JobTaskStatistics.ContractProfitGLAcc.ASSERTEQUALS(ProfitFCY);
      JobTaskStatistics.InvoicedProfitGLAcc.ASSERTEQUALS(AmountFCY - InvoicedCostFCY);
      // Multiplying by 3 as three Job Planning lines for Resource,Item and GLAccount has been created.
      JobTaskStatistics.ContractPriceTotal.ASSERTEQUALS(AmountFCY * 3);
      JobTaskStatistics.InvoicedPriceTotal.ASSERTEQUALS(AmountFCY * 3);
      JobTaskStatistics.ContractCostTotal.ASSERTEQUALS(CostFCY * 3);
      JobTaskStatistics.InvoicedCostTotal.ASSERTEQUALS(InvoicedCostFCY * 3);
      JobTaskStatistics.ContractProfitTotal.ASSERTEQUALS(ProfitFCY * 3);
      JobTaskStatistics.InvoicedProfitTotal.ASSERTEQUALS((AmountFCY - InvoicedCostFCY) * 3);
    END;

    [PageHandler]
    PROCEDURE JobStatisticsContractInvoicedPageHandler@98(VAR JobStatistics@1000 : TestPage 1025);
    VAR
      Profit@1005 : Decimal;
      ProfitFCY@1003 : Decimal;
    BEGIN
      // Verify Job Statistics Price, Cost and Profit for Contract and Invoiced.
      Profit := Amount - Cost;
      ProfitFCY := AmountFCY - CostFCY;
      JobStatistics.ContractPriceLCY.ASSERTEQUALS(Amount);
      JobStatistics.InvoicedPriceLCY.ASSERTEQUALS(Amount);
      JobStatistics.ContractCostLCY.ASSERTEQUALS(Cost);
      JobStatistics.InvoicedCostLCY.ASSERTEQUALS(Cost);
      JobStatistics.ContractProfitLCY.ASSERTEQUALS(Profit);
      JobStatistics.InvoicedProfitLCY.ASSERTEQUALS(Profit);
      JobStatistics.ContractPriceLCYItem.ASSERTEQUALS(Amount);
      JobStatistics.InvoicedPriceLCYItem.ASSERTEQUALS(Amount);
      JobStatistics.ContractCostLCYItem.ASSERTEQUALS(Cost);
      JobStatistics.InvoicedCostLCYItem.ASSERTEQUALS(Cost);
      JobStatistics.ContractProfitLCYItem.ASSERTEQUALS(Profit);
      JobStatistics.InvoicedProfitLCYItem.ASSERTEQUALS(Profit);
      JobStatistics.ContractPriceLCYGLAcc.ASSERTEQUALS(Amount);
      JobStatistics.InvoicedPriceLCYGLAcc.ASSERTEQUALS(Amount);
      JobStatistics.ContractCostLCYGLAcc.ASSERTEQUALS(Cost);
      JobStatistics.InvoicedCostLCYGLAcc.ASSERTEQUALS(Cost);
      JobStatistics.ContractProfitLCYGLAcc.ASSERTEQUALS(Profit);
      JobStatistics.InvoicedProfitLCYGLAcc.ASSERTEQUALS(Profit);
      // Multiplying by 3 as three Job Planning Lines for Resource,Item and GLAccount has been created.
      JobStatistics.ContractPriceLCYTotal.ASSERTEQUALS(Amount * 3);
      JobStatistics.InvoicedPriceLCYTotal.ASSERTEQUALS(Amount * 3);
      JobStatistics.ContractCostLCYTotal.ASSERTEQUALS(Cost * 3);
      JobStatistics.InvoicedCostLCYTotal.ASSERTEQUALS(Cost * 3);
      JobStatistics.ContractProfitLCYTotal.ASSERTEQUALS(Profit * 3);
      JobStatistics.InvoicedProfitLCYTotal.ASSERTEQUALS(Profit * 3);
      JobStatistics.ContractPrice.ASSERTEQUALS(AmountFCY);
      JobStatistics.InvoicedPrice.ASSERTEQUALS(AmountFCY);
      JobStatistics.ContractCost.ASSERTEQUALS(CostFCY);
      JobStatistics.InvoicedCost.ASSERTEQUALS(InvoicedCostFCY);
      JobStatistics.ContractProfit.ASSERTEQUALS(ProfitFCY);
      JobStatistics.InvoicedProfit.ASSERTEQUALS(AmountFCY - InvoicedCostFCY);
      JobStatistics.ContractPriceItem.ASSERTEQUALS(AmountFCY);
      JobStatistics.InvoicedPriceItem.ASSERTEQUALS(AmountFCY);
      JobStatistics.ContractCostItem.ASSERTEQUALS(CostFCY);
      JobStatistics.InvoicedCostItem.ASSERTEQUALS(InvoicedCostFCY);
      JobStatistics.ContractProfitItem.ASSERTEQUALS(ProfitFCY);
      JobStatistics.InvoicedProfitItem.ASSERTEQUALS(AmountFCY - InvoicedCostFCY);
      JobStatistics.ContractPriceGLAcc.ASSERTEQUALS(AmountFCY);
      JobStatistics.InvoicedPriceGLAcc.ASSERTEQUALS(AmountFCY);
      JobStatistics.ContractCostGLAcc.ASSERTEQUALS(CostFCY);
      JobStatistics.InvoicedCostGLAcc.ASSERTEQUALS(InvoicedCostFCY);
      JobStatistics.ContractProfitGLAcc.ASSERTEQUALS(ProfitFCY);
      JobStatistics.InvoicedProfitGLAcc.ASSERTEQUALS(AmountFCY - InvoicedCostFCY);
      // Multiplying by 3 as three Job Planning Lines for Resource,Item and GLAccount has been created.
      JobStatistics.ContractPriceTotal.ASSERTEQUALS(AmountFCY * 3);
      JobStatistics.InvoicedPriceTotal.ASSERTEQUALS(AmountFCY * 3);
      JobStatistics.ContractCostTotal.ASSERTEQUALS(CostFCY * 3);
      JobStatistics.InvoicedCostTotal.ASSERTEQUALS(InvoicedCostFCY * 3);
      JobStatistics.ContractProfitTotal.ASSERTEQUALS(ProfitFCY * 3);
      JobStatistics.InvoicedProfitTotal.ASSERTEQUALS((AmountFCY - InvoicedCostFCY) * 3);
    END;

    [PageHandler]
    PROCEDURE JobTaskStatisticsPageHander@69(VAR JobTaskStatistics@1000 : TestPage 1024);
    BEGIN
      // Verify Job Task Statistics Price, Cost and Profit for Schedule and Usage with Planning and Posting Date Filters.
      JobTaskStatistics.FILTER.SETFILTER("Posting Date Filter",FORMAT(CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',WORKDATE)));  // Using date greater than WORKDATE.
      JobTaskStatistics.FILTER.SETFILTER("Planning Date Filter",FORMAT(CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',WORKDATE)));
      JobTaskStatistics.SchedulePriceLCY.ASSERTEQUALS(0);
      JobTaskStatistics.UsagePriceLCY.ASSERTEQUALS(0);
      JobTaskStatistics.ScheduleCostLCY.ASSERTEQUALS(0);
      JobTaskStatistics.UsageCostLCY.ASSERTEQUALS(0);
      JobTaskStatistics.ScheduleProfitLCY.ASSERTEQUALS(0);
      JobTaskStatistics.UsageProfitLCY.ASSERTEQUALS(0);
      JobTaskStatistics.SchedulePrice.ASSERTEQUALS(0);
      JobTaskStatistics.UsagePrice.ASSERTEQUALS(0);
      JobTaskStatistics.ScheduleCost.ASSERTEQUALS(0);
      JobTaskStatistics.UsageCost.ASSERTEQUALS(0);
      JobTaskStatistics.ScheduleProfit.ASSERTEQUALS(0);
      JobTaskStatistics.UsageProfit.ASSERTEQUALS(0);
    END;

    [PageHandler]
    PROCEDURE JobStatisticsPageHandler@76(VAR JobStatistics@1000 : TestPage 1025);
    BEGIN
      // Verify Job Statistics Price, Cost and Profit for Schedule and Usage with Planning and Posting Date Filters.
      JobStatistics.FILTER.SETFILTER("Posting Date Filter",FORMAT(CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',WORKDATE)));  // Using date greater than WORKDATE.
      JobStatistics.FILTER.SETFILTER("Planning Date Filter",FORMAT(CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',WORKDATE)));
      JobStatistics.SchedulePriceLCY.ASSERTEQUALS(0);
      JobStatistics.UsagePriceLCY.ASSERTEQUALS(0);
      JobStatistics.ScheduleCostLCY.ASSERTEQUALS(0);
      JobStatistics.UsageCostLCY.ASSERTEQUALS(0);
      JobStatistics.ScheduleProfitLCY.ASSERTEQUALS(0);
      JobStatistics.UsageProfitLCY.ASSERTEQUALS(0);
      JobStatistics.SchedulePrice.ASSERTEQUALS(0);
      JobStatistics.UsagePrice.ASSERTEQUALS(0);
      JobStatistics.ScheduleCost.ASSERTEQUALS(0);
      JobStatistics.UsageCost.ASSERTEQUALS(0);
      JobStatistics.ScheduleProfit.ASSERTEQUALS(0);
      JobStatistics.UsageProfit.ASSERTEQUALS(0);
    END;

    [RequestPageHandler]
    PROCEDURE JobTransferToSalesInvoiceHandler@62(VAR JobTransferToSalesInvoice@1000 : TestRequestPage 1094);
    BEGIN
      JobTransferToSalesInvoice.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE JobTransferToSalesCreditMemoHandler@133(VAR JobTransferToCreditMemo@1000 : TestRequestPage 1092);
    BEGIN
      JobTransferToCreditMemo.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedPurchaseDocumentLinePageHandler@71(VAR PostedPurchaseDocumentLines@1000 : TestPage 5855);
    BEGIN
      PostedPurchaseDocumentLines.PostedReceiptsBtn.SETVALUE('Posted Invoices');
      PostedPurchaseDocumentLines.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Job]
      1. Check value of Job Ledger Entries and Job Planning Line exist or not after posting Job Journal Line.
      2. Verify creation of Job by page with Status type Order.
      3. Verify creation of Job by page with Status type Planning.
      4. Test functionality of Copy Job with From Source as Job Planning Lines.
      5. Test functionality of Copy Job with From Source as Job Ledger Entries.
      6. Check value of Job Ledger Entries and Job Planning Line exist or not after posting Job G/L Journal Line.
      7. Verify Remaining Quantity on Item Ledger Entry after posting Purchase Order with Item Tracking Lines.
      8. Verify Remaining Quantity on Item Ledger Entry after posting Job Journal Line with Item Tracking Lines.
      9. Verify Remaining Quantity on Item Ledger Entry after posting Job Journal Line with Item Tracking Lines and Negative Quantity.
      10. Verify Invoiced and Remaining Quantity on Item Ledger Entry after Receiving Purchase Order with Item Tracking Lines.
      11. Verify Invoiced and Remaining Quantity on Item Ledger Entry after Invoicing Purchase Order with Item Tracking Lines.
      12. Create a new job with Copy Job functionality.
      13. Verify Item Tracking Lines on Purchase Credit Memo which is created after executing "Get Posted Document Lines to Reverse" where Serial No and Job are involved.
      14. Verify Job Ledger Entry after posting the Purchase Credit Memo with more than one quantity after executing "Get Posted Document Lines to Reverse" where Serial No and Job are involved.
      15. Verify Job Ledger Entry after posting the Purchase Order with Job and Charge (Item).
      16. Verify Job Task Statistics Price, Cost and Profit for Schedule and Usage.
      17. Verify Job Task Statistics Price, Cost and Profit for Schedule and Usage with Different Currency.
      18. Verify Job Statistics Price, Cost and Profit for Schedule and Usage.
      19. Verify Job Statistics Price, Cost and Profit for Schedule and Usage with Different Currency.
      20. Verify Job Task Statistics Price, Cost and Profit for Contract and Invoiced.
      21. Verify Job Task Statistics Price, Cost and Profit for Contract and Invoiced with Different Currency.
      22. Verify Job Statistics Price, Cost and Profit for Contract and Invoiced.
      23. Verify Job Statistics Price, Cost and Profit for Contract and Invoiced with Different Currency.
      24. Verify Job Task Statistics Price, Cost and Profit for Schedule and Usage with Planning and Posting Date Filters.
      25. Verify Job Statistics Price, Cost and Profit for Schedule and Usage with Planning and Posting Date Filters.
      26. Verify Program allows to post the Purchase Return Order should be posted with Job after executing the Get Posted Document Lines to Reverse function.
      27. Verify Qty. per Unit of Measure on Purchase Line when changed it on Base Unit of Measure after receiving the Purchase Order.
      28. Verify Job Ledger Entry after posting a Purchase Order where Qty. per Unit of Measure is different on Base Unit of Measure while posting Purchase Order as receive and then Invoice.
      29. Verify correct Unit Price for an Item is updated on Job Planning Line when Sales Price are defined on the Item.
      30. Verify Currency Code and Invoice Currency Code field values on Job Card when Bill to Customer No. on Job is having no Currency attached.
      31. Verify Currency Code and Invoice Currency Code field values on Job Card when Bill to Customer No. on Job has Currency attached.
      32. Verify Program updates the Unit Cost with Automatic Cost Posting set to YES and Automatic Cost Adjustment set to Always on Inventory Setup.
      33. Verify Program updates the Unit Cost when posting of Job Journal with Automatic Cost Posting set to YES and Automatic Cost Adjustment set to Always on Inventory Setup.
      34. Verify G/L Entries on Posted Purchase Order with job with Automatic and Expected Cost Posting to True.
      35. Verify G/L Entries Posted Purchase Return Order with job with Automatic and Expected Cost Posting to True.
      36. Verify G/L Entries and Value Entries With Undo Reciept on Posted Purchase Order with job with Automatic and Expected Cost Posting to True.
      37. Verify G/L Entries and Value Entries With Undo Retun Shipment on Posted Purchase Return Order with job with Automatic and Expected Cost Posting to True.
      38. Verify Sales Invoice not created when Item Blocked.
      39. Verify Sales Credit Memo not created when Item Blocked.
      40. Verify Extended Text on Sales Invoice when Item is not Blocked.
      41. Verify Extended Text on Sales Credit Memo when Item is not Blocked.
      42. Verify that TargetJobTaskNo is working as per the selection of TargetJobNo on Copy Job Planning Lines page.
      43. Verify that TargetJobTaskNo lookup is working as per the selection of TargetJobNo on Copy Job Planning Lines page.
      44. Verify that system throws error while setting the value in TargetJobTaskNo if TargetJobNo is not filled.
      45. Verify Global Dimensions of new Job from Source Job using Copy Job functionality.
      46. Verify that purchase receipt linked to a job planning line can be reverted via "Undo Purchase Receipt".
      47. Verify Currency Code populated from Job after item changed on purchase line

      TFS_TS_ID = 264649
      Cover Test cases:
      --------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      --------------------------------------------------------------------------------------
      PostJobJournalLine                                                            130457

      TFS_TS_ID = 264614
      Cover Test Cases:
      --------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      --------------------------------------------------------------------------------------
      JobOnOrderByPage                                                              131938

      TFS_TS_ID = 264615
      Cover Test Cases:
      --------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      --------------------------------------------------------------------------------------
      JobOnPlanningByPage                                                           131939

      TFS_TS_ID = 264611
      Cover Test cases:
      --------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      --------------------------------------------------------------------------------------
      CopyJobPlanningLines                                                          130451

      TFS_TS_ID = 264612
      Cover Test cases:
      --------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      --------------------------------------------------------------------------------------
      CopyJobLedgerLines                                                            130452

      TFS_TS_ID = 264644
      Covers Test Cases:
      -------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      -------------------------------------------------------------------------------------
      PostJobGLJournalLine                                                          130458

      TFS_TS_ID = 273744
      Covers Test Cases:
      -------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      -------------------------------------------------------------------------------------
      PostingPurchaseOrderWithItemTracking, PostingJobJournalWithItemTracking,
      PostingJobJournalWithItemTrackingAndNegativeQuantity,
      ReceivePurchaseOrderWithJob, InvoicePurchaseOrderWithJob                      240333

      TFS_TS_ID = 273615
      Covers Test Cases:
      -------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      -------------------------------------------------------------------------------------
      CreateJobUsingCopyJobFunctionality                                            129015

      TFS_TS_ID = 278194
      Covers Test Cases:
      -------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      -------------------------------------------------------------------------------------
      PurchaseCreditMemoWithTrackingAndJob,
      PostingPurchaseCreditMemoWithJobAndTracking                                   145301
      PostPurchaseOrderWithJobAndChargeItem                                         146032

      TFS_TS_ID = 278189
      Covers Test Cases:
      -------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      -------------------------------------------------------------------------------------
      JobTaskStatisticsScheduleUsageLCY,JobTaskStatisticsScheduleUsageFCY,          129205
      JobStatisticsScheduleUsageLCY,JobStatisticsScheduleUsageFCY,
      JobTaskStatisticsContractInvoicedLCY,JobTaskStatisticsContractInvoicedFCY,
      JobStatisticsContractInvoicedLCY,JobStatisticsContractInvoicedFCY,
      JobTaskStatisticsFilters,JobStatisticsFilters

      TFS_TS_ID = 274959
      Covers Test Cases:
      -------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      -------------------------------------------------------------------------------------
      PostPurchaseRetunOrderWithJob                                                 203778

      TFS_TS_ID = 278763
      Covers Test Cases:
      -------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      -------------------------------------------------------------------------------------
      QtyPerUnitOfMeasureOnPurchaseLineWithJob, QtyPerUnitOfMeasureOnJobLedgerEntry 173736
      JobPlanningLineUnitPriceWithItemSalesPrice                                    173750

      Covers Test Cases: TFS_TS_ID = 281985
      -------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      -------------------------------------------------------------------------------------
      JobForCustomerWithoutCurrency, JobForCustomerWithCurrency                     173724

      TFS_TS_ID = 281987
      Covers Test Cases:
      -------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      -------------------------------------------------------------------------------------
      AutomaticCostPostingAdjustmentAlways                                          281462
      PostJobWithAutomaticCostPostingAdjustmentAlways

      TFS_TS_ID = 295334
      Covers Test Cases:
      -------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      -------------------------------------------------------------------------------------
      GLEntriesOnPostedPurchaseOrderWithJob                                         299080
      GLEntriesOnPostedPurchaseReturnOrderWithJob
      UndoPurchaseReceiptOnPostedPostedOrder
      UndoPostedReturnShipmentOnPostedReturnOrder

      TFS_Bug_ID = 329777
      Covers Test Cases:
      -----------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                  TFS ID
      -----------------------------------------------------------------------------------------------------------------
      CreateSalesInvoiceFromJobWhenItemBlocked,CreateSalesCreditMemoFromJobWhenItemBlocked
      CreateSalesInvoiceWhenFromJobItemNotBlocked,CreateSalesCreditMemoFromJobWhenItemNotBlocked          330134

      TFS_Bug_ID = 89202
      Covers Test Cases:
      -----------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                  TFS ID
      -----------------------------------------------------------------------------------------------------------------
      ValidateTargetJobTaskNoOnCopyJobPlanningLinesPage                                                   89202
      LookUpTargetJobTaskNoOnCopyJobPlanningLinesPage
      TargetJobTaskNoErrorOnCopyJobPlanningLinesPage

      TFS_Bug_ID = 90054
      Covers Test Cases:
      -----------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                  TFS ID
      -----------------------------------------------------------------------------------------------------------------
      CopyDimensionsOnJobUsingCopyJobFunctionality

      TFS_Bug_ID = 101513
      Covers Test Cases:
      -----------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                  TFS ID
      -----------------------------------------------------------------------------------------------------------------
      TFS358363_UndoReiceptDeletesBinContent

      PurchaseLineCurrencyCodeFromJobTask                                                                 360080

      PurchaseLineCurrencyCodeFromJobTask                                                                 106775
      NotAllowedToCopyJobWithManualNoAndDisabledManualNos                                                 108995
    }
    END.
  }
}

