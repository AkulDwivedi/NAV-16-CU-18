OBJECT Codeunit 134805 RED Test Unit for Sales Doc
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1005 : Codeunit 131300;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryInventory@1002 : Codeunit 132201;
      LibrarySales@1006 : Codeunit 130509;
      LibraryVariableStorage@1013 : Codeunit 131004;
      LibrarySetupStorage@1014 : Codeunit 131009;
      LibraryResource@1024 : Codeunit 130511;
      DeferralUtilities@1025 : Codeunit 1720;
      ArchiveManagement@1034 : Codeunit 5063;
      Assert@1040 : Codeunit 130000;
      CalcMethod@1008 : 'Straight-Line,Equal per Period,Days per Period,User-Defined';
      StartDate@1007 : 'Posting Date,Beginning of Period,End of Period,Beginning of Next Period';
      SalesDocType@1012 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Shipment,Posted Invoice,Posted Credit Memo,Posted Return Receipt';
      CopyDocType@1031 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
      CreditWarningSetup@1026 : 'Both Warnings,Credit Limit,Overdue Balance,No Warning';
      isInitialized@1003 : Boolean;
      StockWarningSetup@1027 : Boolean;
      NoDeferralScheduleErr@1004 : TextConst '@@@="%1=The item number of the sales transaction line, %2=The Deferral Template Code";ENU=You must create a deferral schedule because you have specified the deferral code %2 in line %1.';
      ZeroDeferralAmtErr@1019 : TextConst '@@@="%1=The item number of the sales transaction line, %2=The Deferral Template Code";ENU=Deferral amounts cannot be 0. Line: %1, Deferral Template: %2.';
      ConfirmCallOnceErr@1000 : TextConst 'ENU=Confirm should be called once.';
      DeferralLineQst@1009 : TextConst 'ENU=Do you want to update the deferral schedules for the lines?';

    [Test]
    PROCEDURE TestSalesOrderWithItem@1();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      ItemNo@1001 : Code[20];
      DeferralTemplateCode@1000 : Code[10];
    BEGIN
      // [FEATURE] [Deferral Code]
      // [SCENARIO 127732] Annie can apply a deferral template to a Sales Order
      // Setup
      Initialize;

      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [WHEN] Creating Sales Line for Item should default deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Order,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      // [THEN] The Deferral Code was assigned to the sales line
      SalesLine.TESTFIELD("Deferral Code",DeferralTemplateCode);

      // [THEN] The deferral schedule was created
      ValidateDeferralSchedule(
        SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",
        DeferralTemplateCode,SalesHeader."Posting Date",SalesLine.GetDeferralAmount,2);
    END;

    [Test]
    PROCEDURE TestSalesInvoiceWithGLAccount@10();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      GLAccount@1001 : Record 15;
      DeferralTemplateCode@1000 : Code[10];
    BEGIN
      // [FEATURE] [Deferral Code]
      // [SCENARIO 127732] Annie can apply a deferral template to a Sales Invoice
      // [GIVEN] User has created a deferral template
      DeferralTemplateCode := CreateDeferralCode(CalcMethod::"Straight-Line",StartDate::"Posting Date",3);

      // [GIVEN] User has assigned a default deferral code to a GL Account
      CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Default Deferral Template Code",DeferralTemplateCode);
      GLAccount.MODIFY;

      // [WHEN] Creating Sales Line for GL Account should default deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Invoice,SalesLine.Type::"G/L Account",GLAccount."No.",SetDateDay(1,WORKDATE));

      // [THEN] The Deferral Code was assigned to the sales line
      SalesLine.TESTFIELD("Deferral Code",DeferralTemplateCode);

      // [THEN] The deferral schedule was created
      ValidateDeferralSchedule(
        SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",
        DeferralTemplateCode,SalesHeader."Posting Date",SalesLine.GetDeferralAmount,3);
    END;

    [Test]
    PROCEDURE TestSalesCreditMemoWithResource@11();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      Resource@1001 : Record 156;
      DeferralTemplateCode@1000 : Code[10];
    BEGIN
      // [FEATURE] [Deferral Code]
      // [SCENARIO 127753] Annie can apply a deferral template to a Sales Credit Memo
      // [GIVEN] User has created a deferral template
      DeferralTemplateCode := CreateDeferralCode(CalcMethod::"Equal per Period",StartDate::"Posting Date",3);

      // [GIVEN] User has assigned a default deferral code to a Resource
      CreateResource(Resource);
      Resource.VALIDATE("Default Deferral Template Code",DeferralTemplateCode);
      Resource.MODIFY(TRUE);

      // [WHEN] Creating Sales Line for GL Account should default deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::"Credit Memo",SalesLine.Type::Resource,Resource."No.",SetDateDay(1,WORKDATE));

      // [THEN] The Deferral Code was assigned to the sales line
      SalesLine.TESTFIELD("Deferral Code",DeferralTemplateCode);

      // [THEN] The deferral schedule was created
      ValidateDeferralSchedule(
        SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",
        DeferralTemplateCode,SalesHeader."Posting Date",SalesLine.GetDeferralAmount,3);
    END;

    [Test]
    PROCEDURE TestSalesReturnOrderWithItem@12();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      DeferralHeader@1003 : Record 1701;
      ItemNo@1002 : Code[20];
      DeferralTemplateCode@1000 : Code[10];
      DeferralAmount@1001 : Decimal;
    BEGIN
      // [FEATURE] [Deferral Code] [Returns Deferral Start Date]
      // [SCENARIO 127753] Annie can apply a deferral template to a Sales Return
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Days per Period",StartDate::"Beginning of Period",4);

      // [WHEN] Creating Sales Line for Item should default deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::"Return Order",SalesLine.Type::Item,ItemNo,SetDateDay(10,WORKDATE));

      // [THEN] The Deferral Code was assigned to the sales line
      SalesLine.TESTFIELD("Deferral Code",DeferralTemplateCode);

      // [THEN] The deferral schedule was created
      DeferralHeader.GET(DeferralUtilities.GetSalesDeferralDocType,'','',
        SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      DeferralHeader.TESTFIELD("Deferral Code",DeferralTemplateCode);
      DeferralHeader.TESTFIELD("Start Date",GetStartDate(StartDate::"Beginning of Period",SalesHeader."Posting Date"));
      DeferralHeader.TESTFIELD("Amount to Defer",SalesLine.GetDeferralAmount);
      DeferralHeader.TESTFIELD("No. of Periods",4);

      // [THEN] Returns Deferral Start Date is set correctly
      ValidateReturnsDeferralStartDate(
        SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",
        SalesLine."Returns Deferral Start Date",DeferralAmount);
      DeferralHeader.TESTFIELD("Amount to Defer",DeferralAmount);
    END;

    [Test]
    PROCEDURE TestSalesReturnOrderWithItemReturnStartDate@85();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      DeferralHeader@1003 : Record 1701;
      ItemNo@1002 : Code[20];
      DeferralTemplateCode@1000 : Code[10];
      DeferralAmount@1001 : Decimal;
    BEGIN
      // [FEATURE] [Deferral Code] [Returns Deferral Start Date]
      // [SCENARIO 127753] Annie can apply a deferral template to a Sales Return
      // and update the Sales Line to use a separate deferral start date
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Days per Period",StartDate::"End of Period",4);

      // [WHEN] Creating Sales Line for Item should default deferral code and update the Sales Line Return Deferral Start Date
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::"Return Order",SalesLine.Type::Item,ItemNo,SetDateDay(10,WORKDATE));
      SalesLine.VALIDATE("Returns Deferral Start Date",SetDateDay(15,WORKDATE));
      SalesLine.MODIFY;

      // [THEN] The Deferral Code was assigned to the sales line
      SalesLine.TESTFIELD("Deferral Code",DeferralTemplateCode);

      // [THEN] The deferral schedule was created using the sales line Return Deferral Start Date
      DeferralHeader.GET(DeferralUtilities.GetSalesDeferralDocType,'','',
        SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      DeferralHeader.TESTFIELD("Deferral Code",DeferralTemplateCode);
      DeferralHeader.TESTFIELD("Start Date",SalesLine."Returns Deferral Start Date");
      DeferralHeader.TESTFIELD("Amount to Defer",SalesLine.GetDeferralAmount);
      DeferralHeader.TESTFIELD("No. of Periods",4);

      // [THEN] Returns Deferral Start Date is set correctly
      ValidateReturnsDeferralStartDate(
        SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",
        SalesLine."Returns Deferral Start Date",DeferralAmount);
      DeferralHeader.TESTFIELD("Amount to Defer",DeferralAmount);
    END;

    [Test]
    PROCEDURE TestSalesQuoteWithItem@13();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      ItemNo@1001 : Code[20];
      DeferralTemplateCode@1000 : Code[10];
    BEGIN
      // [FEATURE] [Deferral Code]
      // [SCENARIO 127732] Deferral template does not default on Quote
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [WHEN] Creating Sales Line for Item on a Quote, the deferral code should not default
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Quote,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      // [THEN] The Deferral Code was not assigned to the sales line
      SalesLine.TESTFIELD("Deferral Code",'');

      // [THEN] The deferral schedule was not created
      ValidateDeferralScheduleDoesNotExist(
        SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
    END;

    [Test]
    PROCEDURE TestSalesBlanketOrderWithItem@14();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      ItemNo@1001 : Code[20];
      DeferralTemplateCode@1000 : Code[10];
    BEGIN
      // [FEATURE] [Deferral Code]
      // [SCENARIO 127732] Deferral template does not default on Quote
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [WHEN] Creating Sales Line for Item on a Quote, the deferral code should not default
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::"Blanket Order",SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      // [THEN] The Deferral Code was not assigned to the sales line
      SalesLine.TESTFIELD("Deferral Code",'');

      // [THEN] The deferral schedule was not created
      ValidateDeferralScheduleDoesNotExist(
        SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
    END;

    [Test]
    PROCEDURE TestChangingSalesLineType@64();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      DeferralTemplateCode@1000 : Code[10];
      AccNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Document Type] [Line]
      // [SCENARIO 127732] Changing the Sales Line Type removes the deferral code
      // [GIVEN] User has created a GL Account and assigned a default deferral code to it
      CreateGLAccountWithDefaultDeferralCode(DeferralTemplateCode,AccNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",3);

      // [GIVEN] Creating Sales Line for GL Account defaults deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Invoice,SalesLine.Type::"G/L Account",AccNo,SetDateDay(1,WORKDATE));

      // [WHEN] Changing the Sales Line Type
      SalesLine.VALIDATE(Type,SalesLine.Type::Item);
      SalesLine.MODIFY(TRUE);

      // [THEN] The Deferral Code was removed from the sales line
      SalesLine.TESTFIELD("Deferral Code",'');

      // [THEN] The deferral schedule was removed
      ValidateDeferralScheduleDoesNotExist(
        SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
    END;

    [Test]
    PROCEDURE TestChangingSalesLineNo@68();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      Item@1002 : Record 27;
      DeferralTemplateCode@1000 : Code[10];
      AccNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Document Type] [Line]
      // [SCENARIO 127732] Changing Sales Line No. to an Item that does not have a default deferral code removes deferral schedule
      // [GIVEN] User has created a GL Account and assigned a default deferral code to it
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,AccNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",3);

      // [GIVEN] Creating Sales Line for Item defaults deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Invoice,SalesLine.Type::Item,AccNo,SetDateDay(1,WORKDATE));

      // [WHEN] Changing the Sales Line No. to an Item that does not have a default deferral code
      CLEAR(Item);
      CreateItem(Item);
      Item.VALIDATE("Unit Price",500.0);
      Item.MODIFY(TRUE);

      SalesLine.VALIDATE("No.",Item."No.");
      SalesLine.MODIFY(TRUE);

      // [THEN] The Deferral Code was removed from the sales line
      SalesLine.TESTFIELD("Deferral Code",'');

      // [THEN] The deferral schedule was removed
      ValidateDeferralScheduleDoesNotExist(
        SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
    END;

    [Test]
    PROCEDURE TestClearingSalesLineDeferralCode@69();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      DeferralTemplateCode@1000 : Code[10];
      AccNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Deferral Code] [Line]
      // [SCENARIO 127732] Clearing the Deferral Code on a line removes the deferral schedule
      // [GIVEN] User has created a GL Account and assigned a default deferral code to it
      CreateGLAccountWithDefaultDeferralCode(DeferralTemplateCode,AccNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Creating Sales Line for GL Account defaults deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Order,SalesLine.Type::"G/L Account",AccNo,SetDateDay(1,WORKDATE));

      // [WHEN] Clearing the deferral code from the sales line
      SalesLine.VALIDATE("Deferral Code",'');

      // [THEN] The deferral schedule was removed
      ValidateDeferralScheduleDoesNotExist(
        SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.")
    END;

    [Test]
    PROCEDURE TestDeletingSalesLine@66();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      DeferralTemplateCode@1000 : Code[10];
      AccNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Deferral Code] [Delete Line]
      // [SCENARIO 127732]Deleting a sales line removes the deferral schedule
      // [GIVEN] User has created a GL Account and assigned a default deferral code to it
      CreateGLAccountWithDefaultDeferralCode(DeferralTemplateCode,AccNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",3);

      // [GIVEN] Creating Sales Line for GL Account defaults deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Invoice,SalesLine.Type::"G/L Account",AccNo,SetDateDay(1,WORKDATE));

      // [WHEN] Delete the sales line
      SalesLine.DELETE(TRUE);

      // [THEN] The deferral schedule was removed
      ValidateDeferralScheduleDoesNotExist(
        SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
    END;

    [Test]
    PROCEDURE TestCopyOrderWithDeferral@3();
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      SalesHeaderDest@1002 : Record 36;
      SalesLineDest@1001 : Record 37;
      DeferralHeader@1004 : Record 1701;
      ItemNo@1003 : Code[20];
      DeferralTemplateCode@1000 : Code[10];
    BEGIN
      // [FEATURE] [Copy Document]
      // [SCENARIO 127732] Annie can copy a document and the deferrals are copied
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      Initialize;
      PrepareSalesReceivableSetup(StockWarningSetup,CreditWarningSetup);

      // [GIVEN] Creating Sales Line for Item should default deferral code - then modify the amounts
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Order,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FIND('-');
      ModifyDeferral(SalesLine,DeferralHeader."Calc. Method"::"Equal per Period",3,
        SalesLine.GetDeferralAmount * 0.8,SetDateDay(15,WORKDATE));

      // [WHEN] Create New sales document and copy the existing one with recalculate unmarked
      CreateSalesHeaderForCustomer(SalesHeaderDest,
        SalesHeaderDest."Document Type"::Invoice,SetDateDay(1,WORKDATE),SalesHeader."Sell-to Customer No.");
      CopyDoc(SalesHeaderDest,SalesHeader."Document Type",SalesHeader."No.",TRUE,FALSE);

      // [THEN] The deferral schedule was copied from the existing line
      SalesLineDest.SETRANGE("Document Type",SalesHeaderDest."Document Type");
      SalesLineDest.SETRANGE("Document No.",SalesHeaderDest."No.");
      SalesLineDest.FINDFIRST;
      SalesLineDest.TESTFIELD("Deferral Code",DeferralTemplateCode);
      SalesLineDest.TESTFIELD("Returns Deferral Start Date",0D);
      VerifyDeferralsAreEqual(SalesLine,SalesLineDest);

      // Clean-up
      SetupStockWarning(StockWarningSetup);
      SetupCreditWarning(CreditWarningSetup);
    END;

    [Test]
    PROCEDURE TestCopyPostedInvoiceWithDeferral@4();
    VAR
      SalesHeader@1007 : Record 36;
      SalesLine@1008 : Record 37;
      SalesInvHeader@1005 : Record 112;
      SalesInvLine@1006 : Record 113;
      SalesHeaderDest@1002 : Record 36;
      SalesLineDest@1001 : Record 37;
      ItemNo@1003 : Code[20];
      DeferralTemplateCode@1000 : Code[10];
      DocNo@1004 : Code[20];
    BEGIN
      // [SCENARIO 127732] [Copy Document] Annie can copy a posted document and the deferrals are copied
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      Initialize;
      PrepareSalesReceivableSetup(StockWarningSetup,CreditWarningSetup);

      // [GIVEN] Create and post the sales invoice with the default deferral
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Invoice,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      SalesInvHeader.GET(DocNo);

      // [WHEN] Create New sales document and copy the existing one
      CreateSalesHeaderForCustomer(SalesHeaderDest,
        SalesHeaderDest."Document Type"::Order,SetDateDay(1,WORKDATE),SalesInvHeader."Sell-to Customer No.");
      CopyDoc(SalesHeaderDest,CopyDocType::"Posted Invoice",SalesInvHeader."No.",TRUE,FALSE);

      // [THEN] The deferral schedule was copied from the existing line
      SalesInvLine.SETRANGE("Document No.",SalesInvHeader."No.");
      SalesInvLine.FINDFIRST;

      SalesLineDest.SETRANGE("Document Type",SalesHeaderDest."Document Type");
      SalesLineDest.SETRANGE("Document No.",SalesHeaderDest."No.");
      SalesLineDest.FINDSET;
      IF SalesLineDest."No." = '' THEN
        SalesLineDest.NEXT;
      SalesLineDest.TESTFIELD("Deferral Code",DeferralTemplateCode);
      SalesLineDest.TESTFIELD("Returns Deferral Start Date",0D);
      VerifyPostedDeferralsAreEqual(SalesInvLine,SalesLineDest);

      // Clean-up
      SetupStockWarning(StockWarningSetup);
      SetupCreditWarning(CreditWarningSetup);
    END;

    [Test]
    PROCEDURE TestCopyPostedInvoiceWithDeferralToReturnOrder@63();
    VAR
      SalesHeader@1007 : Record 36;
      SalesLine@1008 : Record 37;
      SalesInvHeader@1005 : Record 112;
      SalesInvLine@1006 : Record 113;
      SalesHeaderDest@1002 : Record 36;
      SalesLineDest@1001 : Record 37;
      ItemNo@1003 : Code[20];
      DeferralTemplateCode@1000 : Code[10];
      DocNo@1004 : Code[20];
    BEGIN
      // [SCENARIO 127732] [Copy Document] [Returns Deferral Start Date] Annie can copy a posted invoice to a return order
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,
        CalcMethod::"Straight-Line",StartDate::"Beginning of Next Period",2);
      Initialize;
      PrepareSalesReceivableSetup(StockWarningSetup,CreditWarningSetup);

      // [GIVEN] Create and post the sales invoice with the default deferral
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Invoice,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      SalesInvHeader.GET(DocNo);

      // [WHEN] Create New sales document and copy the existing one
      CreateSalesHeaderForCustomer(SalesHeaderDest,
        SalesHeaderDest."Document Type"::"Return Order",SetDateDay(1,WORKDATE),SalesInvHeader."Sell-to Customer No.");
      CopyDoc(SalesHeaderDest,CopyDocType::"Posted Invoice",SalesInvHeader."No.",TRUE,FALSE);

      // [THEN] The deferral schedule was copied from the existing line
      SalesInvLine.SETRANGE("Document No.",SalesInvHeader."No.");
      SalesInvLine.FINDFIRST;

      SalesLineDest.SETRANGE("Document Type",SalesHeaderDest."Document Type");
      SalesLineDest.SETRANGE("Document No.",SalesHeaderDest."No.");
      SalesLineDest.FINDSET;
      IF SalesLineDest."No." = '' THEN
        SalesLineDest.NEXT;
      SalesLineDest.TESTFIELD("Deferral Code",DeferralTemplateCode);
      SalesLineDest.TESTFIELD("Returns Deferral Start Date",
        GetStartDate(StartDate::"Beginning of Next Period",SalesHeader."Posting Date"));
      VerifyPostedDeferralsAreEqual(SalesInvLine,SalesLineDest);

      // Clean-up
      SetupStockWarning(StockWarningSetup);
      SetupCreditWarning(CreditWarningSetup);
    END;

    [Test]
    PROCEDURE TestCopyOrderWithDeferralToQuote@20();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      SalesHeaderDest@1002 : Record 36;
      SalesLineDest@1001 : Record 37;
      DeferralTemplateCode@1000 : Code[10];
      ItemNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Copy Document]
      // [SCENARIO 127732] Copy an order with deferrals to a quote does not default the deferrals on a quote
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",3);
      Initialize;
      PrepareSalesReceivableSetup(StockWarningSetup,CreditWarningSetup);

      // [GIVEN] Creating Sales Line for Item should default deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Order,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      // [WHEN] Create New sales document and copy the existing one
      CreateSalesHeaderForCustomer(SalesHeaderDest,
        SalesHeaderDest."Document Type"::Quote,SetDateDay(1,WORKDATE),SalesHeader."Sell-to Customer No.");
      CopyDoc(SalesHeaderDest,SalesHeader."Document Type",SalesHeader."No.",TRUE,FALSE);

      // [THEN] The Deferral Code was not assigned to the Quote sales line
      SalesLineDest.SETRANGE("Document Type",SalesHeaderDest."Document Type");
      SalesLineDest.SETRANGE("Document No.",SalesHeaderDest."No.");
      SalesLineDest.FINDFIRST;
      SalesLineDest.TESTFIELD("Deferral Code",'');
      SalesLineDest.TESTFIELD("Returns Deferral Start Date",0D);

      // [THEN] The deferral schedule was not created
      ValidateDeferralScheduleDoesNotExist(
        SalesLineDest."Document Type",SalesLineDest."Document No.",SalesLineDest."Line No.");

      // Clean-up
      SetupStockWarning(StockWarningSetup);
      SetupCreditWarning(CreditWarningSetup);
    END;

    [Test]
    PROCEDURE TestCopyQuoteToOrderDefaultsDeferral@30();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      SalesHeaderDest@1002 : Record 36;
      SalesLineDest@1001 : Record 37;
      DeferralTemplateCode@1000 : Code[10];
      ItemNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Copy Document]
      // [SCENARIO 127732] Annie can copy a Quote to a different type and the deferrals are defaulted from the item
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",3);
      Initialize;
      PrepareSalesReceivableSetup(StockWarningSetup,CreditWarningSetup);

      // [GIVEN] Creating Sales Line for Item on Quote does not default the deferral
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Quote,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      // [WHEN] Create New sales Order and copy the existing Quote
      CreateSalesHeaderForCustomer(SalesHeaderDest,
        SalesHeaderDest."Document Type"::Order,SetDateDay(1,WORKDATE),SalesHeader."Sell-to Customer No.");
      CopyDoc(SalesHeaderDest,SalesHeader."Document Type",SalesHeader."No.",TRUE,FALSE);

      // [THEN] The Deferral Code was assigned to the Order sales line
      SalesLineDest.SETRANGE("Document Type",SalesHeaderDest."Document Type");
      SalesLineDest.SETRANGE("Document No.",SalesHeaderDest."No.");
      SalesLineDest.FINDFIRST;
      SalesLineDest.TESTFIELD("Deferral Code",DeferralTemplateCode);
      SalesLineDest.TESTFIELD("Returns Deferral Start Date",0D);

      // [THEN] The deferral schedule was created
      ValidateDeferralSchedule(
        SalesLineDest."Document Type",SalesLineDest."Document No.",SalesLineDest."Line No.",
        DeferralTemplateCode,SalesHeaderDest."Posting Date",SalesLineDest.GetDeferralAmount,3);
    END;

    [Test]
    PROCEDURE TestCopyOrderWithDeferralToReturnOrder@104();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      SalesHeaderDest@1002 : Record 36;
      SalesLineDest@1001 : Record 37;
      DeferralTemplateCode@1000 : Code[10];
      ItemNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Copy Document] [Returns Deferral Start Date]
      // [SCENARIO 127732] Copy an order with deferrals to a Return Order
      // defaults the Returns Deferral Start Date from the Return Order
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,
        CalcMethod::"Straight-Line",StartDate::"End of Period",3);
      Initialize;
      PrepareSalesReceivableSetup(StockWarningSetup,CreditWarningSetup);

      // [GIVEN] Creating Sales Line for Item should default deferral code - order uses day = 1
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Order,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      // [WHEN] Create New sales document and copy the existing one - Return uses day = 15
      CreateSalesHeaderForCustomer(SalesHeaderDest,
        SalesHeaderDest."Document Type"::"Return Order",SetDateDay(15,WORKDATE),SalesHeader."Sell-to Customer No.");
      CopyDoc(SalesHeaderDest,SalesHeader."Document Type",SalesHeader."No.",FALSE,FALSE);

      // [THEN] The Deferral Code was assigned to the Return Order sales line
      SalesLineDest.SETRANGE("Document Type",SalesHeaderDest."Document Type");
      SalesLineDest.SETRANGE("Document No.",SalesHeaderDest."No.");
      SalesLineDest.FINDFIRST;
      SalesLineDest.TESTFIELD("Deferral Code",DeferralTemplateCode);

      // [THEN] The Returns Deferral Start Date was assigned a start date based on header posting date
      SalesLineDest.TESTFIELD("Returns Deferral Start Date",
        GetStartDate(StartDate::"End of Period",SalesHeader."Posting Date"));

      // Clean-up
      SetupStockWarning(StockWarningSetup);
      SetupCreditWarning(CreditWarningSetup);
    END;

    [Test]
    PROCEDURE TestCopyReturnOrderWithDeferralToReturnOrder@105();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      SalesHeaderDest@1002 : Record 36;
      SalesLineDest@1001 : Record 37;
      DeferralTemplateCode@1000 : Code[10];
      ItemNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Copy Document] [Returns Deferral Start Date]
      // [SCENARIO 127732] Copy Return order with deferrals defaults
      // the Returns Deferral Start Date from the original return order line
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,
        CalcMethod::"Straight-Line",StartDate::"Beginning of Next Period",3);
      Initialize;
      PrepareSalesReceivableSetup(StockWarningSetup,CreditWarningSetup);

      // [GIVEN] Creating Sales Line for Item should default deferral code - order uses day = 1
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::"Return Order",SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDFIRST;

      // [WHEN] Create New sales document and copy the existing one - Return uses day = 15
      CreateSalesHeaderForCustomer(SalesHeaderDest,
        SalesHeaderDest."Document Type"::"Return Order",SetDateDay(15,WORKDATE),SalesHeader."Sell-to Customer No.");
      CopyDoc(SalesHeaderDest,SalesHeader."Document Type",SalesHeader."No.",FALSE,FALSE);

      // [THEN] The Deferral Code was assigned to the Return Order sales line
      SalesLineDest.SETRANGE("Document Type",SalesHeaderDest."Document Type");
      SalesLineDest.SETRANGE("Document No.",SalesHeaderDest."No.");
      SalesLineDest.FINDFIRST;
      SalesLineDest.TESTFIELD("Deferral Code",DeferralTemplateCode);

      // [THEN] The Returns Deferral Start Date was assigned from the date on the original return order line
      SalesLineDest.TESTFIELD("Returns Deferral Start Date",SalesLine."Returns Deferral Start Date");
      SalesLineDest.TESTFIELD("Returns Deferral Start Date",
        GetStartDate(StartDate::"Beginning of Next Period",SalesHeader."Posting Date"));

      // Clean-up
      SetupStockWarning(StockWarningSetup);
      SetupCreditWarning(CreditWarningSetup);
    END;

    [Test]
    PROCEDURE TestArchiveOrderWithDeferral@40();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      SalesLineArchive@1001 : Record 5108;
      DeferralHeader@1003 : Record 1701;
      DeferralTemplateCode@1000 : Code[10];
      ItemNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Archive Document]
      // [SCENARIO 127732] When a Sales Order is archived, the deferrals are archived along with it
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Creating Sales Line for Item should default deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Order,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      ModifyDeferral(SalesLine,DeferralHeader."Calc. Method"::"Days per Period",4,
        SalesLine.GetDeferralAmount * 0.7,SetDateDay(12,WORKDATE));

      // [WHEN] Document is archived
      ArchiveManagement.StoreSalesDocument(SalesHeader,FALSE);
      FindSalesLine(SalesHeader,SalesLine);
      FindSalesLineArchive(SalesHeader,SalesLineArchive);

      // [THEN] The deferrals were moved to the archive
      VerifyDeferralArchivesAreEqual(SalesLineArchive,SalesLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE TestRestoreArchiveWithDeferral@41();
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      SalesHeaderArchive@1002 : Record 5107;
      SalesLineArchive@1001 : Record 5108;
      DeferralHeader@1004 : Record 1701;
      DeferralTemplateCode@1000 : Code[10];
      ItemNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Restore Document]
      // [SCENARIO 127732] When a Sales Order Archive is restored, the deferrals are restored with it

      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",3);

      // [GIVEN] Creating Sales Line for Item should default deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Order,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      // [GIVEN] Document is archived
      ArchiveManagement.StoreSalesDocument(SalesHeader,FALSE);
      FindSalesLine(SalesHeader,SalesLine);
      ModifyDeferral(SalesLine,DeferralHeader."Calc. Method"::"Equal per Period",5,
        SalesLine.GetDeferralAmount * 0.9,SetDateDay(21,WORKDATE));

      // [GIVEN] Validation that the deferral schedule was updated
      ValidateDeferralSchedule(
        SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",
        DeferralTemplateCode,SetDateDay(21,WORKDATE),SalesLine.GetDeferralAmount * 0.9,5);

      // [WHEN] Document is Restored from archive
      SalesHeaderArchive.GET(SalesHeader."Document Type",SalesHeader."No.",1,1);
      ArchiveManagement.RestoreSalesDocument(SalesHeaderArchive);

      // [THEN] The deferrals were restored to original
      ValidateDeferralSchedule(
        SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",
        DeferralTemplateCode,SetDateDay(1,WORKDATE),SalesLine.GetDeferralAmount,3);

      FindSalesLineArchive(SalesHeader,SalesLineArchive);
      // [THEN] The deferrals match the archive
      VerifyDeferralArchivesAreEqual(SalesLineArchive,SalesLine);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestDeleteArchiveOrderWithDeferral@38();
    VAR
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      SalesLineArchive@1003 : Record 5108;
      DeferralHeader@1005 : Record 1701;
      DeferralTemplateCode@1001 : Code[10];
      DocNo@1002 : Code[20];
      LineNo@1000 : Integer;
      ItemNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Delete Archive]
      // [SCENARIO 127732] Deletion of Sales Order Archive should lead to deletion of archived deferral schedule
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Creating Sales Line for Item should default deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Order,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      ModifyDeferral(SalesLine,DeferralHeader."Calc. Method"::"Days per Period",4,
        SalesLine.GetDeferralAmount * 0.7,SetDateDay(12,WORKDATE));

      // [GIVEN] Document is archived
      ArchiveManagement.StoreSalesDocument(SalesHeader,FALSE);
      FindSalesLineArchive(SalesHeader,SalesLineArchive);
      DocNo := SalesLineArchive."Document No.";
      LineNo := SalesLineArchive."Line No.";

      // [GIVEN] Remove the sales Doc
      DeleteSalesDoc(SalesHeader);

      // [WHEN] Remove the archives
      DeleteSalesOrderArchive(DocNo);

      // [THEN] the archived deferral schedule was deleted
      ValidateDeferralArchiveScheduleDoesNotExist(SalesHeader."Document Type"::Order,DocNo,LineNo);
    END;

    [Test]
    PROCEDURE TestPostInvoiceWithDeferral@54();
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      DeferralTemplateCode@1000 : Code[10];
      DocNo@1001 : Code[20];
      AccNo@1004 : Code[20];
      AmtToDefer@1003 : Decimal;
      ItemNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127736] When a Sales Invoice is posted, the general ledger accounts for the deferrals are created
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Creating Sales Line for Item should default deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Invoice,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      AmtToDefer := SalesLine.GetDeferralAmount;

      // [WHEN] Document is posted
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] The deferrals were moved to the Sales Invoice Line and Posted Deferral tables - GL is correct
      VerifyPostedInvoiceDeferralsAndGL(DocNo,DeferralTemplateCode,AccNo,AmtToDefer,AmtToDefer,2,3,SetDateDay(1,WORKDATE));
    END;

    [Test]
    [HandlerFunctions(BatchPostSalesInvoicesRequestPageHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE TestPostBatchTwoInvoicesWithDeferralConfirmYes@115();
    VAR
      SalesHeader1@1002 : Record 36;
      SalesHeader2@1005 : Record 36;
      DeferralTemplateCode@1000 : Code[10];
      DocNo1@1001 : Code[20];
      DocNo2@1007 : Code[20];
      AccNo@1004 : Code[20];
      ItemNo@1010 : Code[20];
      AmtToDefer1@1003 : Decimal;
      AmtToDefer2@1006 : Decimal;
      NewPostDate@1008 : Date;
    BEGIN
      // [FEATURE] [Post Document] [Batch Posting]
      // [SCENARIO 382285] Batch Posting of Deferral Sales Invoices with updated Posting Date should update deferral schedule with Confirm Yes
      Initialize;

      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Two Sales Invoices with Posting Date = 01.10.16
      CreateSalesDocument(SalesHeader1,AmtToDefer1,DocNo1,SalesHeader1."Document Type"::Invoice,ItemNo);
      CreateSalesDocument(SalesHeader2,AmtToDefer2,DocNo2,SalesHeader2."Document Type"::Invoice,ItemNo);

      SetupBatchPostingReportParameters(NewPostDate,SalesHeader1."Posting Date",0,TRUE);
      COMMIT;

      // [WHEN] Sales Invoices are posted with batch report on 01.11.16 and confirm update on deferral date = Yes
      SalesHeader1.SETFILTER("No.",'%1|%2',SalesHeader1."No.",SalesHeader2."No.");
      REPORT.RUN(REPORT::"Batch Post Sales Invoices",TRUE,FALSE,SalesHeader1);

      // [THEN] Confirm is called once
      Assert.AreEqual(1,LibraryVariableStorage.DequeueInteger,ConfirmCallOnceErr);

      // [THEN] Posting Date of Purchase Invoices is 01.11.16
      VerifyInvoicePostingDate(DocNo1,NewPostDate);
      VerifyInvoicePostingDate(DocNo2,NewPostDate);

      // [THEN] The deferrals are posted according to schedule from 01.11.16
      VerifyPostedInvoiceDeferralsAndGL(DocNo1,DeferralTemplateCode,AccNo,AmtToDefer1,AmtToDefer1,2,3,NewPostDate);
      VerifyPostedInvoiceDeferralsAndGL(DocNo2,DeferralTemplateCode,AccNo,AmtToDefer2,AmtToDefer2,2,3,NewPostDate);
    END;

    [Test]
    [HandlerFunctions(BatchPostSalesOrdersRequestPageHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE TestPostBatchTwoOrdersWithDeferralConfirmYes@113();
    VAR
      SalesHeader1@1002 : Record 36;
      SalesHeader2@1005 : Record 36;
      DeferralTemplateCode@1000 : Code[10];
      DocNo1@1001 : Code[20];
      DocNo2@1007 : Code[20];
      AccNo@1004 : Code[20];
      ItemNo@1010 : Code[20];
      AmtToDefer1@1003 : Decimal;
      AmtToDefer2@1006 : Decimal;
      NewPostDate@1008 : Date;
    BEGIN
      // [FEATURE] [Post Document] [Batch Posting]
      // [SCENARIO 382285] Batch Posting of Deferral Sales Orders with updated Posting Date should update deferral schedule with Confirm Yes
      Initialize;

      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Two Sales Orders with Posting Date = 01.10.16
      CreateSalesDocument(SalesHeader1,AmtToDefer1,DocNo1,SalesHeader1."Document Type"::Order,ItemNo);
      CreateSalesDocument(SalesHeader2,AmtToDefer2,DocNo2,SalesHeader2."Document Type"::Order,ItemNo);

      SetupBatchPostingReportParameters(NewPostDate,SalesHeader1."Posting Date",0,TRUE);
      COMMIT;

      // [WHEN] Sales Orders are posted with batch report on 01.11.16 and confirm update on deferral date = Yes
      SalesHeader1.SETFILTER("No.",'%1|%2',SalesHeader1."No.",SalesHeader2."No.");
      REPORT.RUN(REPORT::"Batch Post Sales Orders",TRUE,FALSE,SalesHeader1);

      // [THEN] Confirm is called once
      Assert.AreEqual(1,LibraryVariableStorage.DequeueInteger,ConfirmCallOnceErr);

      // [THEN] Posting Date of Purchase Invoices is 01.11.16
      VerifyInvoicePostingDate(DocNo1,NewPostDate);
      VerifyInvoicePostingDate(DocNo2,NewPostDate);

      // [THEN] The deferrals are posted according to schedule from 01.11.16
      VerifyPostedInvoiceDeferralsAndGL(DocNo1,DeferralTemplateCode,AccNo,AmtToDefer1,AmtToDefer1,2,3,NewPostDate);
      VerifyPostedInvoiceDeferralsAndGL(DocNo2,DeferralTemplateCode,AccNo,AmtToDefer2,AmtToDefer2,2,3,NewPostDate);
    END;

    [Test]
    [HandlerFunctions(BatchPostSalesCreditMemosRequestPageHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE TestPostBatchTwoCreditMemosWithDeferralConfirmYes@126();
    VAR
      SalesHeader1@1002 : Record 36;
      SalesHeader2@1005 : Record 36;
      DeferralTemplateCode@1000 : Code[10];
      DocNo1@1001 : Code[20];
      DocNo2@1007 : Code[20];
      AccNo@1004 : Code[20];
      ItemNo@1010 : Code[20];
      AmtToDefer1@1003 : Decimal;
      AmtToDefer2@1006 : Decimal;
      NewPostDate@1008 : Date;
    BEGIN
      // [FEATURE] [Post Document] [Batch Posting]
      // [SCENARIO 382285] Batch Posting of Deferral Credit Memos with updated Posting Date should update deferral schedule with Confirm Yes
      Initialize;

      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Two Credit Memos with Posting Date = 01.10.16
      CreateSalesDocument(SalesHeader1,AmtToDefer1,DocNo1,SalesHeader1."Document Type"::"Credit Memo",ItemNo);
      CreateSalesDocument(SalesHeader2,AmtToDefer2,DocNo2,SalesHeader2."Document Type"::"Credit Memo",ItemNo);

      SetupBatchPostingReportParameters(NewPostDate,SalesHeader1."Posting Date",0,TRUE);
      COMMIT;

      // [WHEN] Credit Memos are posted with batch report on 01.11.16 and confirm update on deferral date = Yes
      SalesHeader1.SETFILTER("No.",'%1|%2',SalesHeader1."No.",SalesHeader2."No.");
      REPORT.RUN(REPORT::"Batch Post Sales Credit Memos",TRUE,FALSE,SalesHeader1);

      // [THEN] Confirm is called once
      Assert.AreEqual(1,LibraryVariableStorage.DequeueInteger,ConfirmCallOnceErr);

      // [THEN] Posting Date of Posted Credit Memos is 01.11.16
      VerifyCrMemoPostingDate(DocNo1,NewPostDate);
      VerifyCrMemoPostingDate(DocNo2,NewPostDate);

      // [THEN] The deferrals are posted according to schedule from 01.11.16
      VerifyPostedCrMemosDeferralsAndGL(
        SalesDocType::"Posted Credit Memo",DocNo1,DeferralTemplateCode,AccNo,AmtToDefer1,AmtToDefer1,2,3,NewPostDate);
      VerifyPostedCrMemosDeferralsAndGL(
        SalesDocType::"Posted Credit Memo",DocNo2,DeferralTemplateCode,AccNo,AmtToDefer2,AmtToDefer2,2,3,NewPostDate);
    END;

    [Test]
    [HandlerFunctions(BatchPostSalesInvoicesRequestPageHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE TestPostBatchTwoInvoicesWithDeferralConfirmNo@122();
    VAR
      SalesHeader1@1002 : Record 36;
      SalesHeader2@1005 : Record 36;
      DeferralTemplateCode@1000 : Code[10];
      DocNo1@1001 : Code[20];
      DocNo2@1007 : Code[20];
      AccNo@1004 : Code[20];
      ItemNo@1010 : Code[20];
      AmtToDefer1@1003 : Decimal;
      AmtToDefer2@1006 : Decimal;
      NewPostDate@1008 : Date;
    BEGIN
      // [FEATURE] [Post Document] [Batch Posting]
      // [SCENARIO 382285] Batch Posting of Deferral Sales Invoices with updated Posting Date should update deferral schedule with Confirm No
      Initialize;

      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Two Sales Invoices with Posting Date = 01.10.16
      CreateSalesDocument(SalesHeader1,AmtToDefer1,DocNo1,SalesHeader1."Document Type"::Invoice,ItemNo);
      CreateSalesDocument(SalesHeader2,AmtToDefer2,DocNo2,SalesHeader2."Document Type"::Invoice,ItemNo);

      SetupBatchPostingReportParameters(NewPostDate,SalesHeader1."Posting Date",0,FALSE);
      COMMIT;

      // [WHEN] Sales Invoices are posted with batch report on 01.11.16 and confirm update on deferral date = No
      SalesHeader1.SETFILTER("No.",'%1|%2',SalesHeader1."No.",SalesHeader2."No.");
      REPORT.RUN(REPORT::"Batch Post Sales Invoices",TRUE,FALSE,SalesHeader1);

      // [THEN] Confirm is called once
      Assert.AreEqual(1,LibraryVariableStorage.DequeueInteger,ConfirmCallOnceErr);

      // [THEN] Posting Date of Purchase Invoices is 01.11.16
      VerifyInvoicePostingDate(DocNo1,NewPostDate);
      VerifyInvoicePostingDate(DocNo2,NewPostDate);

      // [THEN] The deferrals are posted according to schedule from 01.10.16
      VerifyPostedInvoiceDeferralsAndGL(
        DocNo1,DeferralTemplateCode,AccNo,AmtToDefer1,AmtToDefer1,2,3,SalesHeader1."Posting Date");
      VerifyPostedInvoiceDeferralsAndGL(
        DocNo2,DeferralTemplateCode,AccNo,AmtToDefer2,AmtToDefer2,2,3,SalesHeader2."Posting Date");
    END;

    [Test]
    [HandlerFunctions(BatchPostSalesOrdersRequestPageHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE TestPostBatchTwoOrdersWithDeferralConfirmNo@120();
    VAR
      SalesHeader1@1002 : Record 36;
      SalesHeader2@1005 : Record 36;
      DeferralTemplateCode@1000 : Code[10];
      DocNo1@1001 : Code[20];
      DocNo2@1007 : Code[20];
      AccNo@1004 : Code[20];
      ItemNo@1010 : Code[20];
      AmtToDefer1@1003 : Decimal;
      AmtToDefer2@1006 : Decimal;
      NewPostDate@1008 : Date;
    BEGIN
      // [FEATURE] [Post Document] [Batch Posting]
      // [SCENARIO 382285] Batch Posting of Deferral Sales Orders with updated Posting Date should update deferral schedule with Confirm No
      Initialize;

      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Two Sales Orders with Posting Date = 01.10.16
      CreateSalesDocument(SalesHeader1,AmtToDefer1,DocNo1,SalesHeader1."Document Type"::Order,ItemNo);
      CreateSalesDocument(SalesHeader2,AmtToDefer2,DocNo2,SalesHeader2."Document Type"::Order,ItemNo);

      SetupBatchPostingReportParameters(NewPostDate,SalesHeader1."Posting Date",0,FALSE);
      COMMIT;

      // [WHEN] Sales Orders are posted with batch report on 01.11.16 and confirm update on deferral date = No
      SalesHeader1.SETFILTER("No.",'%1|%2',SalesHeader1."No.",SalesHeader2."No.");
      REPORT.RUN(REPORT::"Batch Post Sales Orders",TRUE,FALSE,SalesHeader1);

      // [THEN] Confirm is called once
      Assert.AreEqual(1,LibraryVariableStorage.DequeueInteger,ConfirmCallOnceErr);

      // [THEN] Posting Date of Purchase Invoices is 01.11.16
      VerifyInvoicePostingDate(DocNo1,NewPostDate);
      VerifyInvoicePostingDate(DocNo2,NewPostDate);

      // [THEN] The deferrals are posted according to schedule from 01.10.16
      VerifyPostedInvoiceDeferralsAndGL(
        DocNo1,DeferralTemplateCode,AccNo,AmtToDefer1,AmtToDefer1,2,3,SalesHeader1."Posting Date");
      VerifyPostedInvoiceDeferralsAndGL(
        DocNo2,DeferralTemplateCode,AccNo,AmtToDefer2,AmtToDefer2,2,3,SalesHeader2."Posting Date");
    END;

    [Test]
    [HandlerFunctions(BatchPostSalesCreditMemosRequestPageHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE TestPostBatchTwoCreditMemosWithDeferralConfirmNo@116();
    VAR
      SalesHeader1@1002 : Record 36;
      SalesHeader2@1005 : Record 36;
      DeferralTemplateCode@1000 : Code[10];
      DocNo1@1001 : Code[20];
      DocNo2@1007 : Code[20];
      AccNo@1004 : Code[20];
      ItemNo@1010 : Code[20];
      AmtToDefer1@1003 : Decimal;
      AmtToDefer2@1006 : Decimal;
      NewPostDate@1008 : Date;
    BEGIN
      // [FEATURE] [Post Document] [Batch Posting]
      // [SCENARIO 382285] Batch Posting of Deferral Credit Memos with updated Posting Date should update deferral schedule with Confirm No
      Initialize;

      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Two Credit Memos with Posting Date = 01.10.16
      CreateSalesDocument(SalesHeader1,AmtToDefer1,DocNo1,SalesHeader1."Document Type"::"Credit Memo",ItemNo);
      CreateSalesDocument(SalesHeader2,AmtToDefer2,DocNo2,SalesHeader2."Document Type"::"Credit Memo",ItemNo);

      SetupBatchPostingReportParameters(NewPostDate,SalesHeader1."Posting Date",0,FALSE);
      COMMIT;

      // [WHEN] Credit Memos are posted with batch report on 01.11.16 and confirm update on deferral date = No
      SalesHeader1.SETFILTER("No.",'%1|%2',SalesHeader1."No.",SalesHeader2."No.");
      REPORT.RUN(REPORT::"Batch Post Sales Credit Memos",TRUE,FALSE,SalesHeader1);

      // [THEN] Confirm is called once
      Assert.AreEqual(1,LibraryVariableStorage.DequeueInteger,ConfirmCallOnceErr);

      // [THEN] Posting Date of Posted Credit Memos is 01.11.16
      VerifyCrMemoPostingDate(DocNo1,NewPostDate);
      VerifyCrMemoPostingDate(DocNo2,NewPostDate);

      // [THEN] The deferrals are posted according to schedule from 01.10.16
      VerifyPostedCrMemosDeferralsAndGL(
        SalesDocType::"Posted Credit Memo",DocNo1,DeferralTemplateCode,
        AccNo,AmtToDefer1,AmtToDefer1,2,3,SalesHeader1."Posting Date");
      VerifyPostedCrMemosDeferralsAndGL(
        SalesDocType::"Posted Credit Memo",DocNo2,DeferralTemplateCode,
        AccNo,AmtToDefer2,AmtToDefer2,2,3,SalesHeader1."Posting Date");
    END;

    [Test]
    PROCEDURE TestPostInvoiceWithDeferralDeletesDeferralHeaderAndLines@114();
    VAR
      SalesHeader@1007 : Record 36;
      SalesLine@1008 : Record 37;
      DeferralTemplateCode@1000 : Code[10];
      DocNo@1001 : Code[20];
      AccNo@1004 : Code[20];
      OriginalDocNo@1002 : Code[20];
      ItemNo@1006 : Code[20];
      AmtToDefer@1003 : Decimal;
      LineNo@1005 : Integer;
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 159878] When a Sales Invoice is posted, the Deferral Header and Deferral Line records are deleted
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Create Sales Line for Item
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Invoice,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      AmtToDefer := SalesLine.GetDeferralAmount;
      OriginalDocNo := SalesHeader."No.";
      LineNo := SalesLine."Line No.";

      // [WHEN] Document is posted
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] The deferrals were moved to the Sales Invoice Line and Posted Deferral tables
      VerifyPostedInvoiceDeferralsAndGL(DocNo,DeferralTemplateCode,AccNo,AmtToDefer,AmtToDefer,2,3,SetDateDay(1,WORKDATE));

      // [THEN] Deferrals were removed from the Deferral Header and Deferral Line Tables
      VerifyDeferralHeaderLinesRemoved(SalesDocType::Invoice,OriginalDocNo,LineNo);
    END;

    [Test]
    PROCEDURE TestPostInvoiceWithCurrencyAndDeferral@89();
    VAR
      SalesHeader@1007 : Record 36;
      SalesLine@1008 : Record 37;
      CurrExchRate@1005 : Record 330;
      DeferralTemplateCode@1003 : Code[10];
      DocNo@1002 : Code[20];
      AccNo@1001 : Code[20];
      ItemNo@1006 : Code[20];
      AmtToDefer@1000 : Decimal;
      AmtToDeferLCY@1004 : Decimal;
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127736] When Sales Invoice with currency posts, GL accounts for deferrals are created
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Creating Sales Line for Item should default deferral code
      CreateSalesDocWithCurrencyAndLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Invoice,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      AmtToDefer := SalesLine.GetDeferralAmount;
      AmtToDeferLCY :=
        ROUND(CurrExchRate.ExchangeAmtFCYToLCY(SetDateDay(1,WORKDATE),
            SalesHeader."Currency Code",AmtToDefer,SalesHeader."Currency Factor"));

      // [WHEN] Document is posted
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] The deferrals were moved to the Sales Invoice Line and Posted Deferral tables - GL is correct
      VerifyPostedInvoiceDeferralsAndGL(DocNo,DeferralTemplateCode,AccNo,AmtToDefer,AmtToDeferLCY,2,3,SetDateDay(1,WORKDATE));
    END;

    [Test]
    PROCEDURE TestPostInvoiceTwoLinesWithDeferral@95();
    VAR
      SalesHeader@1007 : Record 36;
      SalesLine@1008 : Record 37;
      Item@1001 : Record 27;
      DeferralTemplateCode@1004 : Code[10];
      DocNo@1003 : Code[20];
      AccNo@1002 : Code[20];
      ItemNo@1006 : Code[20];
      GLSum@1000 : Decimal;
      GLCount@1005 : Integer;
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127736] When a Sales Invoice is posted with multiple lines of the same type,
      // the general ledger accounts for the deferrals are combined when they are created
      // [GIVEN] User has assigned a default deferral code to two differnt Items
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      CreateItemWithUnitPrice(Item);
      Item.VALIDATE("Default Deferral Template Code",DeferralTemplateCode);
      Item.MODIFY(TRUE);
      ItemNo := Item."No.";
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Creating Sales Line for Item should default deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Invoice,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      // [GIVEN] Add the second item to the document
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,2);
      SalesHeader.CALCFIELDS(Amount);

      // [WHEN] Document is posted
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] The deferrals were posted to GL
      GLCalcSum(DocNo,AccNo,SetDateDay(1,WORKDATE),PeriodDate(SetDateDay(1,WORKDATE),2),GLCount,GLSum);
      Assert.AreEqual(3,GLCount,'An incorrect number of lines was posted');
      Assert.AreEqual(0,GLSum,'An incorrect amount was posted');

      // [THEN] G/L Entries for deferral periods are posted according to Deferral Schedule (TFS 378831)
      VerifyGLForDeferralPeriod(DocNo,AccNo,-SalesHeader.Amount);
    END;

    [Test]
    PROCEDURE TestPostInvoiceWithPartialDeferral@101();
    VAR
      SalesHeader@1009 : Record 36;
      SalesLine@1010 : Record 37;
      GenPostingSetup@1001 : Record 252;
      DeferralHeader@1004 : Record 1701;
      SalesAccount@1002 : Code[20];
      DeferralTemplateCode@1008 : Code[10];
      DocNo@1007 : Code[20];
      AccNo@1006 : Code[20];
      ItemNo@1000 : Code[20];
      AmtToDefer@1005 : Decimal;
      SalesAmount@1003 : Decimal;
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127736] When a Sales Invoice is posted with a partial deferral, the sales accounts is reduced by the deferral and balance posted to first period
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Creating Sales Line for Item should default deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Invoice,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      AmtToDefer := ROUND(SalesLine.GetDeferralAmount * 0.7);
      SalesAmount := SalesLine.GetDeferralAmount - AmtToDefer;
      ModifyDeferral(SalesLine,DeferralHeader."Calc. Method"::"Straight-Line",2,
        AmtToDefer,SetDateDay(1,WORKDATE));
      GenPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");
      SalesAccount := GenPostingSetup."Sales Account";

      // [WHEN] Document is posted
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] The deferrals were moved to the Sales Invoice Line and Posted Deferral tables - GL & Sales is correct
      VerifyPostedInvoiceDeferralsAndGLWithSalesAmt(
        DocNo,DeferralTemplateCode,AccNo,SalesAccount,AmtToDefer,AmtToDefer,1,2,2,3,SalesAmount);
    END;

    [Test]
    PROCEDURE TestPostInvoiceWithDeferralNoDeferralHeader@87();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      DeferralHeader@1001 : Record 1701;
      DeferralTemplateCode@1005 : Code[10];
      ItemNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127736] When a Sales Invoice will not post if the deferral header record is not created
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Creating Sales Line for Item should default deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Invoice,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      FindDeferralHeader(SalesLine,DeferralHeader);
      DeferralHeader.DELETE;

      // [WHEN] Document is posted
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] The error specifying the No and Deferral Code is given
      Assert.ExpectedError(STRSUBSTNO(NoDeferralScheduleErr,ItemNo,DeferralTemplateCode));
    END;

    [Test]
    PROCEDURE TestPostInvoiceWithDeferralDeferralHeaderZero@86();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      DeferralHeader@1002 : Record 1701;
      DeferralTemplateCode@1000 : Code[10];
      ItemNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127736] When a Sales Invoice will not post if the deferral header Amount To Defer is Zero
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Creating Sales Line for Item should default deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Invoice,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      FindDeferralHeader(SalesLine,DeferralHeader);
      DeferralHeader."Amount to Defer" := 0;
      DeferralHeader.MODIFY;

      // [WHEN] Document is posted
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] The error specifying the No and Deferral Code is given
      Assert.ExpectedError(STRSUBSTNO(NoDeferralScheduleErr,ItemNo,DeferralTemplateCode));
    END;

    [Test]
    PROCEDURE TestPostInvoiceWithDeferralNoDeferralLines@88();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      DeferralHeader@1003 : Record 1701;
      DeferralLine@1002 : Record 1702;
      DeferralTemplateCode@1000 : Code[10];
      ItemNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127736] When a Sales Invoice will not post if the deferral schedule does not have any lines
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Creating Sales Line for Item should default deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Invoice,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      FindDeferralHeader(SalesLine,DeferralHeader);
      RangeDeferralLines(DeferralHeader,DeferralLine);
      DeferralLine.DELETEALL;

      // [WHEN] Document is posted
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] The error specifying the No and Deferral Code is given
      Assert.ExpectedError(STRSUBSTNO(NoDeferralScheduleErr,ItemNo,DeferralTemplateCode));
    END;

    [Test]
    PROCEDURE TestPostInvoiceWithDeferralOneZeroDeferralLine@97();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      DeferralHeader@1003 : Record 1701;
      DeferralLine@1002 : Record 1702;
      DeferralTemplateCode@1000 : Code[10];
      ItemNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127736] When a Sales Invoice will not post if one of the deferral schedule lines has a zero amount
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Creating Sales Line for Item should default deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Invoice,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      FindDeferralHeader(SalesLine,DeferralHeader);
      RangeDeferralLines(DeferralHeader,DeferralLine);
      IF DeferralLine.FINDFIRST THEN BEGIN
        DeferralLine.Amount := 0.0;
        DeferralLine."Amount (LCY)" := 0.0;
        DeferralLine.MODIFY;
      END;

      // [WHEN] Document is posted
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] The error specifying the No and Deferral Code is given
      Assert.ExpectedError(STRSUBSTNO(ZeroDeferralAmtErr,ItemNo,DeferralTemplateCode));
    END;

    [Test]
    PROCEDURE TestPostCreditMemoWithDeferral@47();
    VAR
      SalesHeader@1009 : Record 36;
      SalesLine@1010 : Record 37;
      SalesCrMemoLine@1008 : Record 115;
      DeferralTemplateCode@1000 : Code[10];
      DocNo@1001 : Code[20];
      AccNo@1002 : Code[20];
      ItemNo@1007 : Code[20];
      AmtToDefer@1003 : Decimal;
      GLSum@1004 : Decimal;
      GLCount@1005 : Integer;
      LineNo@1006 : Integer;
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127736] When a Credit Memo is posted, the general ledger accounts for the deferrals are created
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",3);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Creating Sales Line for Item should default deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::"Credit Memo",SalesLine.Type::Item,ItemNo,SetDateDay(15,WORKDATE));
      AmtToDefer := SalesLine.GetDeferralAmount;

      // [WHEN] Document is posted
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] The deferrals were moved to the Sales Credit Memo and Posted Deferral tables
      FindSalesCrMemoLine(SalesCrMemoLine,DocNo);
      LineNo := SalesCrMemoLine."Line No.";
      SalesCrMemoLine.TESTFIELD("Deferral Code",DeferralTemplateCode);
      ValidatePostedDeferralSchedule(SalesDocType::"Posted Credit Memo",DocNo,
        LineNo,DeferralTemplateCode,SetDateDay(15,WORKDATE),AmtToDefer,AmtToDefer,3);

      // [THEN] The deferrals were posted to GL
      GLCalcSum(DocNo,AccNo,SetDateDay(15,WORKDATE),PeriodDate(SetDateDay(1,WORKDATE),3),GLCount,GLSum);
      Assert.AreEqual(5,GLCount,'An incorrect number of lines was posted');
      Assert.AreEqual(0,GLSum,'An incorrect amount was posted');
    END;

    [Test]
    PROCEDURE TestPostCreditMemoWithPartialDeferral@62();
    VAR
      SalesHeader@1015 : Record 36;
      SalesLine@1016 : Record 37;
      DeferralHeader@1013 : Record 1701;
      GenPostingSetup@1003 : Record 252;
      SalesCrMemoLine@1014 : Record 115;
      GLAccount@1010 : Record 15;
      SalesAmount@1002 : Decimal;
      GLSalesAmount@1001 : Decimal;
      SalesAccount@1000 : Code[20];
      DeferralTemplateCode@1009 : Code[10];
      DocNo@1008 : Code[20];
      AccNo@1007 : Code[20];
      ItemNo@1012 : Code[20];
      AmtToDefer@1006 : Decimal;
      GLSum@1005 : Decimal;
      GLCount@1004 : Integer;
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127736] When a Credit Memo is posted with a partial deferral, the correct Sales Credit Memo Account is posted to with correct amounts
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",3);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Creating Sales Line for Item should default deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::"Credit Memo",SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      AmtToDefer := ROUND(SalesLine.GetDeferralAmount * 0.7);
      SalesAmount := SalesLine.GetDeferralAmount - AmtToDefer;
      ModifyDeferral(SalesLine,DeferralHeader."Calc. Method"::"Straight-Line",2,
        AmtToDefer,SetDateDay(1,WORKDATE));

      // [GIVEN] Sales Credit Memo Account updated
      GenPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");
      CreateGLAccount(GLAccount);
      SalesAccount := GLAccount."No.";
      GenPostingSetup.VALIDATE("Sales Credit Memo Account",SalesAccount);
      GenPostingSetup.MODIFY;

      // [WHEN] Document is posted
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] The deferrals were moved to the Sales Credit Memo and Posted Deferral tables
      FindSalesCrMemoLine(SalesCrMemoLine,DocNo);
      SalesCrMemoLine.TESTFIELD("Deferral Code",DeferralTemplateCode);
      ValidatePostedDeferralSchedule(SalesDocType::"Posted Credit Memo",DocNo,
        SalesCrMemoLine."Line No.",DeferralTemplateCode,SetDateDay(1,WORKDATE),AmtToDefer,AmtToDefer,2);

      // [THEN] The amount not deferred was posted to GL for the sales credit memo account
      GLCalcSalesAmount(DocNo,SalesAccount,SetDateDay(1,WORKDATE),PeriodDate(SetDateDay(1,WORKDATE),3),GLCount,GLSum,GLSalesAmount);
      Assert.AreEqual(3,GLCount,'An incorrect number of lines was posted');
      Assert.AreEqual(SalesAmount,ABS(GLSalesAmount),'An incorrect Amount was posted for sales');

      // [THEN] The deferrals were posted to GL
      GLCalcSum(DocNo,AccNo,SetDateDay(1,WORKDATE),PeriodDate(SetDateDay(1,WORKDATE),3),GLCount,GLSum);
      Assert.AreEqual(2,GLCount,'An incorrect number of lines was posted');
      Assert.AreEqual(0,GLSum,'An incorrect amount was posted');
    END;

    [Test]
    PROCEDURE TestPostReturnOrderWithDeferral@55();
    VAR
      SalesHeader@1009 : Record 36;
      SalesLine@1010 : Record 37;
      SalesCrMemoLine@1008 : Record 115;
      DeferralTemplateCode@1005 : Code[10];
      DocNo@1004 : Code[20];
      AccNo@1003 : Code[20];
      ItemNo@1007 : Code[20];
      AmtToDefer@1002 : Decimal;
      GLSum@1001 : Decimal;
      GLCount@1000 : Integer;
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127736] When a Return Order is posted, the general ledger accounts for the deferrals are created
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",3);

      // [GIVEN] Creating Sales Line for Item should default deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::"Return Order",SalesLine.Type::Item,ItemNo,SetDateDay(15,WORKDATE));
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);
      AmtToDefer := SalesLine.GetDeferralAmount;

      // [WHEN] Document is posted
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] The deferrals were moved to the Sales Credit Memo and Posted Deferral tables
      FindSalesCrMemoLine(SalesCrMemoLine,DocNo);
      SalesCrMemoLine.TESTFIELD("Deferral Code",DeferralTemplateCode);
      ValidatePostedDeferralSchedule(SalesDocType::"Posted Credit Memo",DocNo,
        SalesCrMemoLine."Line No.",DeferralTemplateCode,SetDateDay(15,WORKDATE),AmtToDefer,AmtToDefer,3);

      // [THEN] The deferrals were posted to GL
      GLCalcSum(DocNo,AccNo,SetDateDay(15,WORKDATE),PeriodDate(SetDateDay(1,WORKDATE),3),GLCount,GLSum);
      Assert.AreEqual(5,GLCount,'An incorrect number of lines was posted');
      Assert.AreEqual(0,GLSum,'An incorrect amount was posted');
    END;

    [Test]
    PROCEDURE TestPostOrderWithDeferral@103();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1006 : Record 37;
      DeferralTemplateCode@1005 : Code[10];
      DocNo@1004 : Code[20];
      AccNo@1003 : Code[20];
      ItemNo@1000 : Code[20];
      AmtToDefer@1002 : Decimal;
    BEGIN
      // [FEATURE] [Post Document] [Orders]
      // [SCENARIO 159878] When a Order is Shipped & Invoiced, G/L entries post to deferral account
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Create Sales Line for Item
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Order,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      AmtToDefer := SalesLine.GetDeferralAmount;
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [WHEN] Invoice the Sales Order
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Deferral code is in Sales Invoice Line
      // [THEN] Posted Deferral header and Line tables created
      // [THEN] G/L Entries are posted to Deferral Account
      VerifyPostedInvoiceDeferralsAndGL(DocNo,DeferralTemplateCode,AccNo,AmtToDefer,AmtToDefer,2,3,SetDateDay(1,WORKDATE));
    END;

    [Test]
    PROCEDURE TestPostPartialOrderWithDeferral@106();
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      DeferralTemplateCode@1003 : Code[10];
      DocNo@1002 : Code[20];
      AccNo@1001 : Code[20];
      ItemNo@1004 : Code[20];
      AmtToDefer@1000 : Decimal;
    BEGIN
      // [FEATURE] [Post Document] [Partial Invoice]
      // [SCENARIO 159878] When partial Order is Shipped-Invoiced,  G/L entries post to deferral account for partial amts only
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Create Sales Line for Item with partial qtys Shipped/Invoiced
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Order,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      UpdateQtyToShipInvoiceOnSalesLine(SalesLine,5,2,1);
      AmtToDefer := GetInvoiceQtyAmtToDefer(SalesLine,SalesLine.GetDeferralAmount,SalesHeader."Currency Code");

      // [WHEN] Invoice the partial Sales Order
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Posted Deferral header and Line tables are for the partial quantities
      // [THEN] G/L Entries are posted to Deferral Account
      VerifyPostedInvoiceDeferralsAndGL(DocNo,DeferralTemplateCode,AccNo,AmtToDefer,AmtToDefer,2,3,SetDateDay(1,WORKDATE));
    END;

    [Test]
    PROCEDURE TestPostPartialOrderWithCurrencyAndDeferral@194();
    VAR
      SalesHeader@1007 : Record 36;
      SalesLine@1008 : Record 37;
      CurrExchRate@1005 : Record 330;
      DeferralTemplateCode@1003 : Code[10];
      DocNo@1002 : Code[20];
      AccNo@1001 : Code[20];
      ItemNo@1006 : Code[20];
      AmtToDefer@1000 : Decimal;
      AmtToDeferLCY@1004 : Decimal;
    BEGIN
      // [FEATURE] [Post Document] [Partial Invoice]
      // [SCENARIO 159878] When partial order with currency posts,  G/L entries post to deferral account
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Create Sales Line for Item with partial qtys Shipped/Invoiced with currency amounts
      CreateSalesDocWithCurrencyAndLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Order,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      UpdateQtyToShipInvoiceOnSalesLine(SalesLine,6,3,2);
      AmtToDefer := GetInvoiceQtyAmtToDefer(SalesLine,SalesLine.GetDeferralAmount,SalesHeader."Currency Code");
      AmtToDeferLCY :=
        ROUND(CurrExchRate.ExchangeAmtFCYToLCY(SetDateDay(1,WORKDATE),
            SalesHeader."Currency Code",AmtToDefer,SalesHeader."Currency Factor"));
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [WHEN] Invoice the Sales Order with currency
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Posted Deferral header and Line tables are for the partial quantities and appropriate currency
      // [THEN] G/L Entries are posted to Deferral Account
      VerifyPostedInvoiceDeferralsAndGL(DocNo,DeferralTemplateCode,AccNo,AmtToDefer,AmtToDeferLCY,2,3,SetDateDay(1,WORKDATE));
    END;

    [Test]
    PROCEDURE TestPostPartialOrderTwoLinesWithDeferral@193();
    VAR
      SalesHeader@1007 : Record 36;
      SalesLine@1008 : Record 37;
      Item@1005 : Record 27;
      DeferralTemplateCode@1000 : Code[10];
      AccNo@1001 : Code[20];
      DocNo@1002 : Code[20];
      ItemNo@1006 : Code[20];
      GLSum@1003 : Decimal;
      GLCount@1004 : Integer;
    BEGIN
      // [FEATURE] [Post Document] [Partial Invoice]
      // [SCENARIO 159878] When partial Order is posted with multiple lines/same type, G/L entries for deferral account are combined
      // [GIVEN] User has assigned a default deferral code to two different Items
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      CreateItemWithUnitPrice(Item);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);
      Item.VALIDATE("Default Deferral Template Code",DeferralTemplateCode);
      Item.MODIFY(TRUE);
      ItemNo := Item."No.";

      // [GIVEN] Create Sales Line for Item with partial qtys Shipped/Invoiced
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Order,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      UpdateQtyToShipInvoiceOnSalesLine(SalesLine,5,3,2);

      // [GIVEN] Add the second item to the document
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,2);
      UpdateQtyToShipInvoiceOnSalesLine(SalesLine,4,2,1);

      // [WHEN] Invoice the partial Sales Order
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] G/L Entries are combined for the deferral account from both lines
      GLCalcSum(DocNo,AccNo,SetDateDay(1,WORKDATE),PeriodDate(SetDateDay(1,WORKDATE),2),GLCount,GLSum);
      Assert.AreEqual(3,GLCount,'An incorrect number of lines was posted');
      Assert.AreEqual(0,GLSum,'An incorrect amount was posted');
    END;

    [Test]
    PROCEDURE TestPostPartialOrderWithPartialDeferral@191();
    VAR
      SalesHeader@1009 : Record 36;
      SalesLine@1010 : Record 37;
      GenPostingSetup@1001 : Record 252;
      DeferralHeader@1008 : Record 1701;
      SalesAccount@1002 : Code[20];
      DeferralTemplateCode@1007 : Code[10];
      DocNo@1006 : Code[20];
      AccNo@1005 : Code[20];
      ItemNo@1003 : Code[20];
      AmtToDefer@1004 : Decimal;
      SalesAmount@1000 : Decimal;
    BEGIN
      // [FEATURE] [Post Document] [Partial Invoice]
      // [SCENARIO 159878] When a Sales Order is posted with a partial deferral, the sales accounts is reduced by the deferral and balance posted to first period
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Create Sales Line with Deferral for 70%
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Order,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      UpdateQtyToShipInvoiceOnSalesLine(SalesLine,5,1,1);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);
      AmtToDefer := ROUND(SalesLine.GetDeferralAmount * 0.7);
      ModifyDeferral(SalesLine,DeferralHeader."Calc. Method"::"Straight-Line",2,
        AmtToDefer,SetDateDay(1,WORKDATE));
      AmtToDefer := GetInvoiceQtyAmtToDefer(SalesLine,AmtToDefer,SalesHeader."Currency Code");
      SalesAmount := GetInvoiceQtyAmtToDefer(SalesLine,SalesLine.GetDeferralAmount,SalesHeader."Currency Code") - AmtToDefer;
      GenPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");
      SalesAccount := GenPostingSetup."Sales Account";

      // [WHEN] Invoice the partial order
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] G/L Entries for sales account is reduced by amt deferred which is posted directly to deferral account
      VerifyPostedInvoiceDeferralsAndGLWithSalesAmt(DocNo,
        DeferralTemplateCode,AccNo,SalesAccount,AmtToDefer,AmtToDefer,1,2,2,3,SalesAmount);
    END;

    [Test]
    PROCEDURE TestPostPartialOrderWithDeferralMultipleTimes@112();
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      DeferralTemplateCode@1003 : Code[10];
      DocNo@1002 : Code[20];
      AccNo@1001 : Code[20];
      ItemNo@1004 : Code[20];
      AmtToDefer@1000 : Decimal;
    BEGIN
      // [FEATURE] [Post Document] [Partial Invoice]
      // [SCENARIO 159878] When partial Order is Shipped-Invoiced multiple times, the G/L entries post to deferral account for partial amounts
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Create Sales Line with partial quantities
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Order,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      UpdateQtyToShipInvoiceOnSalesLine(SalesLine,5,2,1);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);
      AmtToDefer := GetInvoiceQtyAmtToDefer(SalesLine,SalesLine.GetDeferralAmount,SalesHeader."Currency Code");

      // [WHEN] Invoice the partial order the first time
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [WHEN] The Order Qty to Invoice is updated again
      FindSalesLine(SalesHeader,SalesLine);
      UpdateQtyToShipInvoiceOnSalesLine(SalesLine,5,3,2);
      AmtToDefer := GetInvoiceQtyAmtToDefer(SalesLine,SalesLine.GetDeferralAmount,SalesHeader."Currency Code");

      // [WHEN] Invoice the partial order the second time
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Posted Deferral header and Line tables are for the partial quantities from second order
      // [THEN] G/L Entries are posted to Deferral Account
      VerifyPostedInvoiceDeferralsAndGL(DocNo,DeferralTemplateCode,AccNo,AmtToDefer,AmtToDefer,2,3,SetDateDay(1,WORKDATE));
    END;

    [Test]
    PROCEDURE TestOpenSalesInvoiceDeferralSchedulePos@65();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      GLAccount@1000 : Record 15;
      SalesInvoice@1001 : TestPage 43;
      DeferralTemplateCode@1004 : Code[10];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127732] Entering a Sales Invoice with GL Account allows editing of the deferral code and accessing schedule
      // [GIVEN] User has created a Sales Document with one line item for GL Account
      CreateGLAccount(GLAccount);
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Invoice,SalesLine.Type::"G/L Account",GLAccount."No.",SetDateDay(1,WORKDATE));
      DeferralTemplateCode := CreateDeferralCode(CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [WHEN] Open the Sales Invoice as edit with the document
      SalesInvoice.OPENEDIT;
      SalesInvoice.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesInvoice.SalesLines.FIRST;

      // [THEN] Deferral Code can be entered for GL Account
      SalesLine.VALIDATE("Deferral Code",DeferralTemplateCode);

      // [THEN] Deferral Schedule can be opened for GL Account
      SalesInvoice.SalesLines.DeferralSchedule.INVOKE;

      SalesInvoice.CLOSE;
    END;

    [Test]
    PROCEDURE TestOpenSalesInvoiceDeferralScheduleNeg@70();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      SalesInvoice@1001 : TestPage 43;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127732] Entering a Sales Invoice with Fixed Asset does not allow editing of the deferral code or accessing schedule
      // [GIVEN] User has created a Sales Document
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CreateCustomer);

      // [WHEN] Open the Sales Invoice as edit with the document
      SalesInvoice.OPENEDIT;
      SalesInvoice.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesInvoice.SalesLines.Type.VALUE(FORMAT(SalesLine.Type::"Fixed Asset"));

      // [THEN] Deferral Code and Deferral Schedule menu are not enabled
      Assert.IsFalse(SalesInvoice.SalesLines."Deferral Code".ENABLED,'Deferral Code should not be enabled');
      Assert.IsFalse(SalesInvoice.SalesLines.DeferralSchedule.ENABLED,'Deferral Schedule should NOT be enabled');

      SalesInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(UpdateDeferralSchedulePeriodHandler)]
    PROCEDURE TestEditSalesInvoiceDeferralScheduleIsRecalculated@73();
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      DeferralHeader@1004 : Record 1701;
      DeferralLine@1003 : Record 1702;
      SalesInvoice@1001 : TestPage 43;
      DeferralTemplateCode@1002 : Code[10];
      ItemNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127732] Updating Deferral Schedule period updates the deferral lines
      Initialize;

      // [GIVEN] User has created a Sales Document with one line item for Item that has a default deferral code
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Invoice,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      COMMIT;

      // [GIVEN] Two periods are created
      FindDeferralHeader(SalesLine,DeferralHeader);
      RangeDeferralLines(DeferralHeader,DeferralLine);
      Assert.AreEqual(2,DeferralLine.COUNT,'An incorrect number of lines was created');

      // [GIVEN] Open the Sales Invoice as edit with the document
      SalesInvoice.OPENEDIT;
      SalesInvoice.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesInvoice.SalesLines.FIRST;
      LibraryVariableStorage.Enqueue(3);

      // [WHEN] Deferral Schedule is updated - happens in the handler function
      SalesInvoice.SalesLines.DeferralSchedule.INVOKE;

      // [THEN] Three periods have created three deferral lines
      FindDeferralHeader(SalesLine,DeferralHeader);
      RangeDeferralLines(DeferralHeader,DeferralLine);
      Assert.AreEqual(3,DeferralLine.COUNT,'An incorrect number of lines was recalculated');
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleHandler)]
    PROCEDURE TestOpenSalesOrderDeferralSchedulePos@74();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      GLAccount@1002 : Record 15;
      SalesOrder@1001 : TestPage 42;
      DeferralTemplateCode@1000 : Code[10];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127732] Entering a Sales Order with GL Account allows editing of the deferral code and accessing schedule
      Initialize;

      // [GIVEN] User has created a Sales Document with one line item for GL Account
      CreateGLAccount(GLAccount);
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Order,SalesLine.Type::"G/L Account",GLAccount."No.",SetDateDay(1,WORKDATE));
      DeferralTemplateCode := CreateDeferralCode(CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [WHEN] Open the Sales Order as edit with the document
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesOrder.SalesLines.FIRST;

      // [THEN] Deferral Code can be entered for GL Account
      SalesOrder.SalesLines."Deferral Code".SETVALUE(DeferralTemplateCode);
      LibraryVariableStorage.Enqueue(SalesLine.GetDeferralAmount);

      // [THEN] Deferral Schedule can be opened for GL Account
      SalesOrder.SalesLines.DeferralSchedule.INVOKE;
      SalesOrder.CLOSE;
    END;

    [Test]
    PROCEDURE TestOpenSalesOrderDeferralScheduleNeg@67();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      SalesOrder@1001 : TestPage 42;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127732] Entering a Sales Order with Fixed Asset does not allow editing of the deferral code or accessing schedule
      // [GIVEN] User has created a Sales Document
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomer);

      // [WHEN] Open the Sales Order as edit with the document
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesOrder.SalesLines.Type.VALUE(FORMAT(SalesLine.Type::"Fixed Asset"));

      // [THEN] Deferral Code and Deferral Schedule menu are not enabled
      Assert.IsFalse(SalesOrder.SalesLines."Deferral Code".ENABLED,'Deferral Code should not be enabled');
      Assert.IsFalse(SalesOrder.SalesLines.DeferralSchedule.ENABLED,'Deferral Schedule should NOT be enabled');

      SalesOrder.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleHandler)]
    PROCEDURE TestOpenSalesCreditMemoDeferralSchedulePos@79();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      GLAccount@1000 : Record 15;
      SalesCreditMemo@1001 : TestPage 44;
      DeferralTemplateCode@1002 : Code[10];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127732] Entering a Sales Credit Memo with GL Account allows editing of the deferral code and accessing schedule
      // [GIVEN] User has created a Sales Document with one line item for GL Account
      CreateGLAccount(GLAccount);
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::"Credit Memo",SalesLine.Type::"G/L Account",GLAccount."No.",SetDateDay(1,WORKDATE));
      DeferralTemplateCode := CreateDeferralCode(CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [WHEN] Open the Sales Credit Memo as edit with the document
      SalesCreditMemo.OPENEDIT;
      SalesCreditMemo.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesCreditMemo.SalesLines.FIRST;

      // [THEN] Deferral Code can be entered for GL Account
      SalesCreditMemo.SalesLines."Deferral Code".SETVALUE(DeferralTemplateCode);
      LibraryVariableStorage.Enqueue(SalesLine.GetDeferralAmount);

      // [THEN] Deferral Schedule can be opened for GL Account
      SalesCreditMemo.SalesLines.DeferralSchedule.INVOKE;

      SalesCreditMemo.CLOSE;
    END;

    [Test]
    PROCEDURE TestOpenSalesCreditMemoDeferralScheduleNeg@78();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      SalesCreditMemo@1001 : TestPage 44;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127732] Entering a Sales Credit Memo with Fixed Asset does not allow editing of the deferral code or accessing schedule
      // [GIVEN] User has created a Sales Document
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",CreateCustomer);

      // [WHEN] Open the Sales Invoice as edit with the document
      SalesCreditMemo.OPENEDIT;
      SalesCreditMemo.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesCreditMemo.SalesLines.Type.VALUE(FORMAT(SalesLine.Type::"Fixed Asset"));

      // [THEN] Deferral Code and Deferral Schedule menu are not enabled
      Assert.IsFalse(SalesCreditMemo.SalesLines."Deferral Code".ENABLED,'Deferral Code should not be enabled');
      Assert.IsFalse(SalesCreditMemo.SalesLines.DeferralSchedule.ENABLED,'Deferral Schedule should NOT be enabled');

      SalesCreditMemo.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleHandler)]
    PROCEDURE TestOpenSalesReturnOrderDeferralSchedulePos@83();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      GLAccount@1000 : Record 15;
      SalesReturnOrder@1001 : TestPage 6630;
      DeferralTemplateCode@1002 : Code[10];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127732] Entering a Sales Return Order with GL Account allows editing of the deferral code and accessing schedule
      // [GIVEN] User has created a Sales Document with one line item for GL Account
      CreateGLAccount(GLAccount);
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::"Return Order",SalesLine.Type::"G/L Account",GLAccount."No.",SetDateDay(1,WORKDATE));
      DeferralTemplateCode := CreateDeferralCode(CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [WHEN] Open the Sales Return Order as edit with the document
      SalesReturnOrder.OPENEDIT;
      SalesReturnOrder.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesReturnOrder.SalesLines.FIRST;

      // [THEN] Deferral Code can be entered for GL Account
      SalesReturnOrder.SalesLines."Deferral Code".SETVALUE(DeferralTemplateCode);
      LibraryVariableStorage.Enqueue(SalesLine.GetDeferralAmount);

      // [THEN] Deferral Schedule can be opened for GL Account
      SalesReturnOrder.SalesLines.DeferralSchedule.INVOKE;
      SalesReturnOrder.CLOSE;
    END;

    [Test]
    PROCEDURE TestOpenSalesReturnOrderDeferralScheduleNeg@82();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      SalesReturnOrder@1001 : TestPage 6630;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127732] Entering a Sales Return Order with Fixed Asset does not allow editing of the deferral code or accessing schedule
      // [GIVEN] User has created a Sales Document
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",CreateCustomer);

      // [WHEN] Open the Sales Return Order as edit with the document
      SalesReturnOrder.OPENEDIT;
      SalesReturnOrder.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesReturnOrder.SalesLines.Type.VALUE(FORMAT(SalesLine.Type::"Fixed Asset"));

      // [THEN] Deferral Code and Deferral Schedule menu are not enabled
      Assert.IsFalse(SalesReturnOrder.SalesLines."Deferral Code".ENABLED,'Deferral Code should not be enabled');
      Assert.IsFalse(SalesReturnOrder.SalesLines.DeferralSchedule.ENABLED,'Deferral Schedule should NOT be enabled');

      SalesReturnOrder.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleViewHandler)]
    PROCEDURE TestOpenPostedSalesInvoiceDeferralSchedulePos@80();
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      SalesInvHeader@1003 : Record 112;
      PostedSalesInvoice@1001 : TestPage 132;
      DeferralTemplateCode@1002 : Code[10];
      DocNo@1000 : Code[20];
      ItemNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127732] View deferrals for posted invoice
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      PrepareSalesReceivableSetup(StockWarningSetup,CreditWarningSetup);

      // [GIVEN] Create and post the sales invoice with the default deferral
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Invoice,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      SalesInvHeader.GET(DocNo);

      // [WHEN] Open the Posted Sales Invoice
      PostedSalesInvoice.OPENVIEW;
      PostedSalesInvoice.FILTER.SETFILTER("No.",DocNo);
      PostedSalesInvoice.SalesInvLines.FIRST;

      // [THEN] Deferral Schedule can be opened for line
      PostedSalesInvoice.SalesInvLines.DeferralSchedule.INVOKE;

      PostedSalesInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleViewHandler)]
    PROCEDURE TestOpenPostedSalesCreditMemoDeferralSchedulePos@96();
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      SalesCrMemoHeader@1004 : Record 114;
      PostedSalesCreditMemo@1001 : TestPage 134;
      DeferralTemplateCode@1000 : Code[10];
      DocNo@1002 : Code[20];
      ItemNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127732] View deferrals for posted Credit Memo
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      PrepareSalesReceivableSetup(StockWarningSetup,CreditWarningSetup);

      // [GIVEN] Create and post the sales Credit Memo with the default deferral
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::"Credit Memo",SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      SalesCrMemoHeader.GET(DocNo);

      // [WHEN] Open the Posted Sales Invoice
      PostedSalesCreditMemo.OPENVIEW;
      PostedSalesCreditMemo.FILTER.SETFILTER("No.",DocNo);
      PostedSalesCreditMemo.SalesCrMemoLines.FIRST;

      // [THEN] Deferral Schedule can be opened for line
      PostedSalesCreditMemo.SalesCrMemoLines.DeferralSchedule.INVOKE;

      PostedSalesCreditMemo.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleHandler)]
    PROCEDURE TestOpenMiniSalesCreditMemoDeferralSchedulePos@91();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      GLAccount@1002 : Record 15;
      MiniSalesCreditMemo@1001 : TestPage 1319;
      DeferralTemplateCode@1000 : Code[10];
    BEGIN
      // [SCENARIO 127732] [UI] Entering a Credit Memo on the Mini Sales Credit Memo with GL Account allows editing of the deferral code and accessing schedule
      // [GIVEN] User has created a Sales Document with one line item for GL Account
      CreateGLAccount(GLAccount);
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::"Credit Memo",SalesLine.Type::"G/L Account",GLAccount."No.",SetDateDay(1,WORKDATE));
      DeferralTemplateCode := CreateDeferralCode(CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [WHEN] Open the Sales Credit Memo as edit with the document
      MiniSalesCreditMemo.OPENEDIT;
      MiniSalesCreditMemo.FILTER.SETFILTER("No.",SalesHeader."No.");
      MiniSalesCreditMemo.SalesLines.FIRST;

      // [THEN] Deferral Code can be entered for GL Account
      MiniSalesCreditMemo.SalesLines."Deferral Code".SETVALUE(DeferralTemplateCode);
      LibraryVariableStorage.Enqueue(SalesLine.GetDeferralAmount);

      // [THEN] Deferral Schedule can be opened for GL Account
      MiniSalesCreditMemo.SalesLines.DeferralSchedule.INVOKE;

      MiniSalesCreditMemo.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleViewHandler)]
    PROCEDURE TestOpenMiniPostedSalesInvoiceDeferralSchedulePos@93();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      MiniPostedSalesInvoice@1001 : TestPage 1307;
      DocNo@1003 : Code[20];
      DeferralTemplateCode@1000 : Code[10];
      ItemNo@1002 : Code[20];
    BEGIN
      // [SCENARIO 127732] [UI] View deferrals for posted invoice through the Mini Posted Sales Invoice page
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      PrepareSalesReceivableSetup(StockWarningSetup,CreditWarningSetup);

      // [GIVEN] Create and post the sales invoice with the default deferral
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Invoice,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [WHEN] Open the Posted Sales Invoice
      MiniPostedSalesInvoice.OPENVIEW;
      MiniPostedSalesInvoice.FILTER.SETFILTER("No.",DocNo);
      MiniPostedSalesInvoice.SalesInvLines.FIRST;

      // [THEN] Deferral Schedule can be opened for line
      MiniPostedSalesInvoice.SalesInvLines.DeferralSchedule.INVOKE;

      MiniPostedSalesInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleViewHandler)]
    PROCEDURE TestOpenMiniPostedSalesCreditMemoDeferralSchedulePos@94();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      MiniPostedSalesCreditMemo@1001 : TestPage 1322;
      DocNo@1003 : Code[20];
      DeferralTemplateCode@1000 : Code[10];
      ItemNo@1002 : Code[20];
    BEGIN
      // [SCENARIO 127732] [UI] View deferrals for posted Credit Memo through the Mini Posted Sales Credit Memo page
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      PrepareSalesReceivableSetup(StockWarningSetup,CreditWarningSetup);

      // [GIVEN] Create and post the sales Credit Memo with the default deferral
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::"Credit Memo",SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [WHEN] Open the Posted Sales Invoice
      MiniPostedSalesCreditMemo.OPENVIEW;
      MiniPostedSalesCreditMemo.FILTER.SETFILTER("No.",DocNo);
      MiniPostedSalesCreditMemo.SalesCrLines.FIRST;

      // [THEN] Deferral Schedule can be opened for line
      MiniPostedSalesCreditMemo.SalesCrLines.DeferralSchedule.INVOKE;

      MiniPostedSalesCreditMemo.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleArchiveHandler)]
    PROCEDURE TestOpenSalesOrderArchiveDeferralSchedulePos@81();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      SalesHeaderArchive@1002 : Record 5107;
      SalesOrderArchive@1001 : TestPage 5159;
      DeferralTemplateCode@1000 : Code[10];
      ItemNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127732] View deferrals for Archived Sales Order
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Creating Sales Line for Item should default deferral code
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::Order,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      // [GIVEN] Document is archived
      ArchiveManagement.StoreSalesDocument(SalesHeader,FALSE);
      FindSalesOrderArchive(SalesHeaderArchive,SalesHeader."No.");

      // [WHEN] Open the Posted Sales Order Archive
      SalesOrderArchive.OPENVIEW;
      SalesOrderArchive.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesOrderArchive.FILTER.SETFILTER("Doc. No. Occurrence",'1');
      SalesOrderArchive.FILTER.SETFILTER("Version No.",'1');
      SalesOrderArchive.SalesLinesArchive.FIRST;

      // [THEN] Deferral Schedule Archive can be opened for line
      SalesOrderArchive.SalesLinesArchive.DeferralSchedule.INVOKE;

      SalesOrderArchive.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleArchiveHandler)]
    PROCEDURE TestOpenSalesReturnOrderArchiveDeferralSchedulePos@77();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      SalesHeaderArchive@1002 : Record 5107;
      SalesReturnOrderArchive@1000 : TestPage 6627;
      DeferralTemplateCode@1001 : Code[10];
      ItemNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127732]  View archive deferrals for return order
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Create and archive the sales return order with the default deferral
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        SalesHeader."Document Type"::"Return Order",SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      ArchiveManagement.StoreSalesDocument(SalesHeader,FALSE);
      FindSalesReturnOrderArchive(SalesHeaderArchive,SalesHeader."No.");

      // [WHEN] Open the Posted Sales Invoice
      SalesReturnOrderArchive.OPENVIEW;
      SalesReturnOrderArchive.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesReturnOrderArchive.FILTER.SETFILTER("Doc. No. Occurrence",'1');
      SalesReturnOrderArchive.FILTER.SETFILTER("Version No.",'1');
      SalesReturnOrderArchive.SalesLinesArchive.FIRST;

      // [THEN] Deferral Schedule Archive can be opened for line
      SalesReturnOrderArchive.SalesLinesArchive.DeferralSchedule.INVOKE;

      SalesReturnOrderArchive.CLOSE;
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateDeferralCode@49(CalcMethod@1004 : 'Straight-Line,Equal per Period,Days per Period,User-Defined';StartDate@1003 : 'Posting Date,Beginning of Period,End of Period,Beginning of Next Period';NumOfPeriods@1002 : Integer) : Code[10];
    BEGIN
      EXIT(LibraryERM.CreateDeferralTemplateCode(CalcMethod,StartDate,NumOfPeriods));
    END;

    LOCAL PROCEDURE CreateCustomer@7() : Code[20];
    VAR
      Customer@1000 : Record 18;
      LibrarySales@1001 : Codeunit 130509;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateItem@2(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
    END;

    LOCAL PROCEDURE CreateItemWithUnitPrice@17(VAR Item@1001 : Record 27);
    BEGIN
      LibraryInventory.CreateItemWithUnitPriceAndUnitCost(Item,
        LibraryRandom.RandDec(1000,2),
        LibraryRandom.RandDec(1000,2));
    END;

    LOCAL PROCEDURE CreateItemWithDefaultDeferralCode@42(VAR DefaultDeferralCode@1000 : Code[10];VAR ItemNo@1001 : Code[20];DefaultCalcMethod@1003 : Option;DefaultStartDate@1005 : Option;DefaultNoOfPeriods@1004 : Integer);
    VAR
      Item@1002 : Record 27;
    BEGIN
      DefaultDeferralCode := CreateDeferralCode(DefaultCalcMethod,DefaultStartDate,DefaultNoOfPeriods);

      CreateItemWithUnitPrice(Item);
      Item.VALIDATE("Default Deferral Template Code",DefaultDeferralCode);
      Item.MODIFY(TRUE);
      ItemNo := Item."No.";
    END;

    LOCAL PROCEDURE CreateGLAccountWithDefaultDeferralCode@71(VAR DefaultDeferralCode@1000 : Code[10];VAR No@1001 : Code[20];DefaultCalcMethod@1003 : Option;DefaultStartDate@1005 : Option;DefaultNoOfPeriods@1004 : Integer);
    VAR
      GLAccount@1006 : Record 15;
    BEGIN
      DefaultDeferralCode := CreateDeferralCode(DefaultCalcMethod,DefaultStartDate,DefaultNoOfPeriods);

      CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Default Deferral Template Code",DefaultDeferralCode);
      GLAccount.MODIFY(TRUE);
      No := GLAccount."No.";
    END;

    LOCAL PROCEDURE CreateGLAccount@5(VAR GLAccount@1000 : Record 15);
    VAR
      No@1001 : Code[20];
    BEGIN
      No := LibraryERM.CreateGLAccountWithSalesSetup;
      GLAccount.GET(No);
    END;

    LOCAL PROCEDURE CreateResource@6(VAR Resource@1000 : Record 156);
    BEGIN
      LibraryResource.CreateResourceNew(Resource);
    END;

    LOCAL PROCEDURE CreateSalesDocWithLine@9(VAR SalesHeader@1002 : Record 36;VAR SalesLine@1001 : Record 37;DocumentType@1004 : Option;SalesLineType@1005 : ' ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)';No@1003 : Code[20];PostingDate@1007 : Date);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CreateCustomer);
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLineType,No,2);
      CASE SalesLine.Type OF
        SalesLine.Type::"G/L Account",
        SalesLine.Type::Resource:
          BEGIN
            SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(1000,2));
            SalesLine.MODIFY(TRUE);
          END;
      END;
    END;

    LOCAL PROCEDURE CreateSalesHeaderForCustomer@22(VAR SalesHeader@1000 : Record 36;DocumentType@1001 : Integer;PostingDate@1003 : Date;CustomerCode@1002 : Code[20]);
    BEGIN
      CLEAR(SalesHeader);
      SalesHeader.INIT;
      SalesHeader.VALIDATE("Document Type",DocumentType);
      SalesHeader.VALIDATE("Sell-to Customer No.",CustomerCode);
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDocument@130(VAR SalesHeader@1003 : Record 36;VAR AmtToDefer@1000 : Decimal;VAR PostingDocNo@1001 : Code[20];DocumentType@1005 : Option;ItemNo@1006 : Code[20]);
    VAR
      SalesLine@1002 : Record 37;
      NoSeriesManagement@1004 : Codeunit 396;
    BEGIN
      CreateSalesDocWithLine(SalesHeader,SalesLine,
        DocumentType,SalesLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      AmtToDefer := SalesLine.GetDeferralAmount;
      PostingDocNo := NoSeriesManagement.GetNextNo(SalesHeader."Posting No. Series",SalesHeader."Posting Date",FALSE);
    END;

    LOCAL PROCEDURE DeleteSalesDoc@15(VAR SalesHeader@1000 : Record 36);
    BEGIN
      SalesHeader.DELETE(TRUE);
    END;

    LOCAL PROCEDURE SetDateDay@16(Day@1000 : Integer;StartDate@1001 : Date) : Date;
    BEGIN
      // Use the workdate but set to a specific day of that month
      EXIT(DMY2DATE(Day,DATE2DMY(StartDate,2),DATE2DMY(StartDate,3)));
    END;

    LOCAL PROCEDURE DeferralLineSetRange@18(VAR DeferralLine@1000 : Record 1702;DocType@1001 : Integer;DocNo@1002 : Code[20];LineNo@1003 : Integer);
    BEGIN
      DeferralLine.SETRANGE("Deferral Doc. Type",DeferralUtilities.GetSalesDeferralDocType);
      DeferralLine.SETRANGE("Gen. Jnl. Template Name",'');
      DeferralLine.SETRANGE("Gen. Jnl. Batch Name",'');
      DeferralLine.SETRANGE("Document Type",DocType);
      DeferralLine.SETRANGE("Document No.",DocNo);
      DeferralLine.SETRANGE("Line No.",LineNo);
    END;

    LOCAL PROCEDURE ValidateDeferralSchedule@19(DocType@1002 : Integer;DocNo@1001 : Code[20];LineNo@1000 : Integer;DeferralTemplateCode@1005 : Code[10];HeaderPostingDate@1006 : Date;HeaderAmountToDefer@1007 : Decimal;NoOfPeriods@1009 : Integer);
    VAR
      DeferralHeader@1004 : Record 1701;
      DeferralLine@1003 : Record 1702;
      Period@1011 : Integer;
      DeferralAmount@1012 : Decimal;
      PostingDate@1013 : Date;
    BEGIN
      DeferralHeader.GET(DeferralUtilities.GetSalesDeferralDocType,'','',DocType,DocNo,LineNo);
      DeferralHeader.TESTFIELD("Deferral Code",DeferralTemplateCode);
      DeferralHeader.TESTFIELD("Start Date",HeaderPostingDate);
      DeferralHeader.TESTFIELD("Amount to Defer",HeaderAmountToDefer);
      DeferralHeader.TESTFIELD("No. of Periods",NoOfPeriods);

      DeferralLineSetRange(DeferralLine,DocType,DocNo,LineNo);
      CLEAR(DeferralAmount);
      Period := 0;
      IF DeferralLine.FINDSET THEN BEGIN
        REPEAT
          IF Period = 0 THEN
            PostingDate := HeaderPostingDate
          ELSE
            PostingDate := SetDateDay(1,HeaderPostingDate);
          PostingDate := PeriodDate(PostingDate,Period);
          DeferralLine.TESTFIELD("Posting Date",PostingDate);
          DeferralAmount := DeferralAmount + DeferralLine.Amount;
          Period := Period + 1;
        UNTIL DeferralLine.NEXT = 0;
      END;
      DeferralHeader.TESTFIELD("Amount to Defer",DeferralAmount);
    END;

    LOCAL PROCEDURE ValidateDeferralScheduleDoesNotExist@21(DocType@1002 : Integer;DocNo@1001 : Code[20];LineNo@1000 : Integer);
    VAR
      DeferralHeader@1005 : Record 1701;
      DeferralLine@1003 : Record 1702;
    BEGIN
      ASSERTERROR DeferralHeader.GET(DeferralUtilities.GetSalesDeferralDocType,'','',DocType,DocNo,LineNo);

      DeferralLineSetRange(DeferralLine,DocType,DocNo,LineNo);
      ASSERTERROR DeferralLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CopyDoc@23(SalesHeader@1000 : Record 36;DocType@1001 : Integer;DocNo@1004 : Code[20];IncludeHeader@1003 : Boolean;RecalculateLines@1002 : Boolean);
    VAR
      CopySalesDoc@1005 : Report 292;
    BEGIN
      CLEAR(CopySalesDoc);
      CopySalesDoc.InitializeRequest(ConvertDocType(DocType),DocNo,IncludeHeader,RecalculateLines);
      CopySalesDoc.SetSalesHeader(SalesHeader);
      CopySalesDoc.USEREQUESTPAGE(FALSE);
      CopySalesDoc.RUNMODAL;
    END;

    LOCAL PROCEDURE ConvertDocType@24(DocType@1000 : Integer) : Integer;
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      CASE DocType OF
        SalesHeader."Document Type"::Quote:
          EXIT(CopyDocType::Quote);
        SalesHeader."Document Type"::"Blanket Order":
          EXIT(CopyDocType::"Blanket Order");
        SalesHeader."Document Type"::Order:
          EXIT(CopyDocType::Order);
        SalesHeader."Document Type"::Invoice:
          EXIT(CopyDocType::Invoice);
        SalesHeader."Document Type"::"Return Order":
          EXIT(CopyDocType::"Return Order");
        SalesHeader."Document Type"::"Credit Memo":
          EXIT(CopyDocType::"Credit Memo");
        ELSE
          EXIT(DocType);
      END;
    END;

    LOCAL PROCEDURE PrepareSalesReceivableSetup@25(VAR StockWarningSetup@1002 : Boolean;VAR CreditWarningSetup@1001 : Option);
    VAR
      SalesReceivablesSetup@1003 : Record 311;
    BEGIN
      StockWarningSetup := FALSE;
      SetupStockWarning(StockWarningSetup);

      CreditWarningSetup := SalesReceivablesSetup."Credit Warnings"::"No Warning";
      SetupCreditWarning(CreditWarningSetup);
    END;

    LOCAL PROCEDURE SetupStockWarning@26(VAR Option@1000 : Boolean);
    VAR
      SalesReceivablesSetup@1002 : Record 311;
      OrigianlOption@1001 : Boolean;
    BEGIN
      SalesReceivablesSetup.GET;
      OrigianlOption := SalesReceivablesSetup."Stockout Warning";
      SalesReceivablesSetup.VALIDATE("Stockout Warning",Option);
      SalesReceivablesSetup.MODIFY(TRUE);
      Option := OrigianlOption;
    END;

    LOCAL PROCEDURE SetupCreditWarning@27(VAR Option@1000 : Option);
    VAR
      SalesReceivablesSetup@1002 : Record 311;
      OrigianlOption@1001 : Option;
    BEGIN
      SalesReceivablesSetup.GET;
      OrigianlOption := SalesReceivablesSetup."Credit Warnings";
      SalesReceivablesSetup.VALIDATE("Credit Warnings",Option);
      SalesReceivablesSetup.MODIFY(TRUE);
      Option := OrigianlOption;
    END;

    LOCAL PROCEDURE ValidateDeferralHeader@28(DeferralHeader@1004 : Record 1701;DeferralCode@1003 : Code[10];AmountToDefer@1002 : Decimal;CalcMethod@1001 : Option;StartDate@1000 : Date;NoOfPeriods@1005 : Integer;ScheduleDesc@1006 : Text[50];CurrencyCode@1007 : Code[10]);
    BEGIN
      DeferralHeader.TESTFIELD("Deferral Code",DeferralCode);
      DeferralHeader.TESTFIELD("Amount to Defer",AmountToDefer);
      DeferralHeader.TESTFIELD("Calc. Method",CalcMethod);
      DeferralHeader.TESTFIELD("Start Date",StartDate);
      DeferralHeader.TESTFIELD("No. of Periods",NoOfPeriods);
      DeferralHeader.TESTFIELD("Schedule Description",ScheduleDesc);
      DeferralHeader.TESTFIELD("Currency Code",CurrencyCode);
    END;

    LOCAL PROCEDURE ValidateDeferralLine@29(DeferralLine@1003 : Record 1702;PostingDate@1002 : Date;Desc@1001 : Text[50];Amt@1000 : Decimal;CurrencyCode@1004 : Code[10]);
    BEGIN
      DeferralLine.TESTFIELD("Posting Date",PostingDate);
      DeferralLine.TESTFIELD(Description,Desc);
      DeferralLine.TESTFIELD(Amount,Amt);
      DeferralLine.TESTFIELD("Currency Code",CurrencyCode);
    END;

    LOCAL PROCEDURE VerifyDeferralsAreEqual@32(SalesLineOrig@1001 : Record 37;SalesLineDest@1000 : Record 37);
    VAR
      DeferralHeaderOrig@1002 : Record 1701;
      DeferralHeaderDest@1003 : Record 1701;
      DeferralLineOrig@1004 : Record 1702;
      DeferralLineDest@1005 : Record 1702;
    BEGIN
      FindDeferralHeader(SalesLineOrig,DeferralHeaderOrig);
      FindDeferralHeader(SalesLineDest,DeferralHeaderDest);

      ValidateDeferralHeader(DeferralHeaderDest,
        DeferralHeaderOrig."Deferral Code",
        DeferralHeaderOrig."Amount to Defer",
        DeferralHeaderOrig."Calc. Method",
        DeferralHeaderOrig."Start Date",
        DeferralHeaderOrig."No. of Periods",
        DeferralHeaderOrig."Schedule Description",
        DeferralHeaderOrig."Currency Code");

      RangeDeferralLines(DeferralHeaderDest,DeferralLineDest);
      RangeDeferralLines(DeferralHeaderOrig,DeferralLineOrig);
      REPEAT
        ValidateDeferralLine(DeferralLineDest,DeferralLineOrig."Posting Date",
          DeferralLineOrig.Description,DeferralLineOrig.Amount,DeferralLineOrig."Currency Code");
        DeferralLineDest.NEXT;
      UNTIL DeferralLineOrig.NEXT = 0;
    END;

    LOCAL PROCEDURE FindDeferralHeader@33(SalesLine@1000 : Record 37;VAR DeferralHeader@1001 : Record 1701);
    BEGIN
      DeferralHeader.GET(DeferralUtilities.GetSalesDeferralDocType,'','',
        SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
    END;

    LOCAL PROCEDURE RangeDeferralLines@34(DeferralHeader@1000 : Record 1701;VAR DeferralLine@1001 : Record 1702);
    BEGIN
      DeferralLine.SETRANGE("Deferral Doc. Type",DeferralHeader."Deferral Doc. Type");
      DeferralLine.SETRANGE("Gen. Jnl. Template Name",DeferralHeader."Gen. Jnl. Template Name");
      DeferralLine.SETRANGE("Gen. Jnl. Batch Name",DeferralHeader."Gen. Jnl. Batch Name");
      DeferralLine.SETRANGE("Document Type",DeferralHeader."Document Type");
      DeferralLine.SETRANGE("Document No.",DeferralHeader."Document No.");
      DeferralLine.SETRANGE("Line No.",DeferralHeader."Line No.");
      DeferralLine.FIND('-');
    END;

    LOCAL PROCEDURE VerifyPostedDeferralsAreEqual@36(SalesInvLine@1001 : Record 113;SalesLine@1000 : Record 37);
    VAR
      PostedDeferralHeader@1002 : Record 1704;
      DeferralHeader@1003 : Record 1701;
      PostedDeferralLine@1004 : Record 1705;
      DeferralLine@1005 : Record 1702;
    BEGIN
      FindPostedDeferralHeader(SalesInvLine,PostedDeferralHeader);
      FindDeferralHeader(SalesLine,DeferralHeader);

      ValidateDeferralHeader(DeferralHeader,
        PostedDeferralHeader."Deferral Code",
        PostedDeferralHeader."Amount to Defer",
        PostedDeferralHeader."Calc. Method",
        PostedDeferralHeader."Start Date",
        PostedDeferralHeader."No. of Periods",
        PostedDeferralHeader."Schedule Description",
        PostedDeferralHeader."Currency Code");

      RangeDeferralLines(DeferralHeader,DeferralLine);
      RangePostedDeferralLines(PostedDeferralHeader,PostedDeferralLine);
      REPEAT
        ValidateDeferralLine(DeferralLine,PostedDeferralLine."Posting Date",PostedDeferralLine.Description,
          PostedDeferralLine.Amount,PostedDeferralLine."Currency Code");
        DeferralLine.NEXT;
      UNTIL PostedDeferralLine.NEXT = 0;
    END;

    LOCAL PROCEDURE FindPostedDeferralHeader@35(SalesInvLine@1000 : Record 113;VAR PostedDeferralHeader@1001 : Record 1704);
    BEGIN
      PostedDeferralHeader.GET(DeferralUtilities.GetSalesDeferralDocType,'','',
        CopyDocType::"Posted Invoice",SalesInvLine."Document No.",SalesInvLine."Line No.");
    END;

    LOCAL PROCEDURE RangePostedDeferralLines@31(PostedDeferralHeader@1000 : Record 1704;VAR PostedDeferralLine@1001 : Record 1705);
    BEGIN
      PostedDeferralLine.SETRANGE("Deferral Doc. Type",PostedDeferralHeader."Deferral Doc. Type");
      PostedDeferralLine.SETRANGE("Gen. Jnl. Document No.",PostedDeferralHeader."Gen. Jnl. Document No.");
      PostedDeferralLine.SETRANGE("Account No.",PostedDeferralHeader."Account No.");
      PostedDeferralLine.SETRANGE("Document Type",PostedDeferralHeader."Document Type");
      PostedDeferralLine.SETRANGE("Document No.",PostedDeferralHeader."Document No.");
      PostedDeferralLine.SETRANGE("Line No.",PostedDeferralHeader."Line No.");
      PostedDeferralLine.FIND('-');
    END;

    LOCAL PROCEDURE ModifyDeferral@39(SalesLine@1000 : Record 37;CalcMethod@1002 : Option;NoOfPeriods@1003 : Integer;DeferralAmount@1004 : Decimal;StartDate@1005 : Date);
    VAR
      DeferralHeader@1001 : Record 1701;
    BEGIN
      DeferralHeader.GET(DeferralUtilities.GetSalesDeferralDocType,'','',
        SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      DeferralUtilities.SetDeferralRecords(DeferralHeader,DeferralUtilities.GetSalesDeferralDocType,'','',
        SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",
        CalcMethod,NoOfPeriods,DeferralAmount,StartDate,
        DeferralHeader."Deferral Code",DeferralHeader."Schedule Description",
        SalesLine.GetDeferralAmount,TRUE,DeferralHeader."Currency Code");
      DeferralUtilities.CreateDeferralSchedule(DeferralHeader."Deferral Code",DeferralHeader."Deferral Doc. Type",
        DeferralHeader."Gen. Jnl. Template Name",DeferralHeader."Gen. Jnl. Batch Name",
        DeferralHeader."Document Type",DeferralHeader."Document No.",DeferralHeader."Line No.",
        DeferralHeader."Amount to Defer",DeferralHeader."Calc. Method",DeferralHeader."Start Date",
        DeferralHeader."No. of Periods",FALSE,DeferralHeader."Schedule Description",FALSE,DeferralHeader."Currency Code");
    END;

    LOCAL PROCEDURE VerifyDeferralArchivesAreEqual@45(SalesLineArchive@1001 : Record 5108;SalesLine@1000 : Record 37);
    VAR
      DeferralHeaderArchive@1002 : Record 5127;
      DeferralHeader@1003 : Record 1701;
      DeferralLineArchive@1004 : Record 5128;
      DeferralLine@1005 : Record 1702;
    BEGIN
      FindDeferralHeaderArchive(SalesLineArchive,DeferralHeaderArchive);
      FindDeferralHeader(SalesLine,DeferralHeader);

      ValidateDeferralHeader(DeferralHeader,
        DeferralHeaderArchive."Deferral Code",
        DeferralHeaderArchive."Amount to Defer",
        DeferralHeaderArchive."Calc. Method",
        DeferralHeaderArchive."Start Date",
        DeferralHeaderArchive."No. of Periods",
        DeferralHeaderArchive."Schedule Description",
        DeferralHeaderArchive."Currency Code");

      RangeDeferralLines(DeferralHeader,DeferralLine);
      RangeDeferralLineArchives(DeferralHeaderArchive,DeferralLineArchive);
      REPEAT
        ValidateDeferralLine(DeferralLine,DeferralLineArchive."Posting Date",DeferralLineArchive.Description,
          DeferralLineArchive.Amount,DeferralLineArchive."Currency Code");
        DeferralLine.NEXT;
      UNTIL DeferralLineArchive.NEXT = 0;
    END;

    LOCAL PROCEDURE FindDeferralHeaderArchive@44(SalesLineArchive@1000 : Record 5108;VAR DeferralHeaderArchive@1001 : Record 5127);
    BEGIN
      DeferralHeaderArchive.GET(DeferralUtilities.GetSalesDeferralDocType,
        SalesLineArchive."Document Type",SalesLineArchive."Document No.",
        SalesLineArchive."Doc. No. Occurrence",SalesLineArchive."Version No.",SalesLineArchive."Line No.");
    END;

    LOCAL PROCEDURE RangeDeferralLineArchives@43(DeferralHeaderArchive@1000 : Record 5127;VAR DeferralLineArchive@1001 : Record 5128);
    BEGIN
      DeferralLineArchive.SETRANGE("Deferral Doc. Type",DeferralHeaderArchive."Deferral Doc. Type");
      DeferralLineArchive.SETRANGE("Document Type",DeferralHeaderArchive."Document Type");
      DeferralLineArchive.SETRANGE("Document No.",DeferralHeaderArchive."Document No.");
      DeferralLineArchive.SETRANGE("Line No.",DeferralHeaderArchive."Line No.");
      DeferralLineArchive.SETRANGE("Doc. No. Occurrence",DeferralHeaderArchive."Doc. No. Occurrence");
      DeferralLineArchive.SETRANGE("Version No.",DeferralHeaderArchive."Version No.");
      DeferralLineArchive.FIND('-');
    END;

    LOCAL PROCEDURE FindSalesLine@51(SalesHeader@1001 : Record 36;VAR SalesLine@1002 : Record 37);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FIND('-');
    END;

    LOCAL PROCEDURE FindSalesLineArchive@52(SalesHeader@1001 : Record 36;VAR SalesLineArchive@1000 : Record 5108);
    BEGIN
      SalesLineArchive.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLineArchive.SETRANGE("Document No.",SalesHeader."No.");
      SalesLineArchive.SETRANGE("Doc. No. Occurrence",1);
      SalesLineArchive.SETRANGE("Version No.",1);
      SalesLineArchive.FIND('-');
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmMessageHandler@121(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@37(Question@1000 : Text[1024]);
    BEGIN
    END;

    LOCAL PROCEDURE FindSalesOrderArchive@53(VAR SalesHeaderArchive@1000 : Record 5107;No@1001 : Code[20]);
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      SalesHeaderArchive.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeaderArchive.SETRANGE("No.",No);
      SalesHeaderArchive.FINDFIRST;
    END;

    LOCAL PROCEDURE DeleteSalesOrderArchive@48(No@1000 : Code[20]);
    VAR
      SalesHeaderArchive@1002 : Record 5107;
      DeleteSalesOrderVersions@1001 : Report 5180;
    BEGIN
      FindSalesOrderArchive(SalesHeaderArchive,No);
      DeleteSalesOrderVersions.USEREQUESTPAGE(FALSE);
      DeleteSalesOrderVersions.SETTABLEVIEW(SalesHeaderArchive);
      DeleteSalesOrderVersions.RUN;
    END;

    LOCAL PROCEDURE FindSalesReturnOrderArchive@75(VAR SalesHeaderArchive@1000 : Record 5107;No@1001 : Code[20]);
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      SalesHeaderArchive.SETRANGE("Document Type",SalesHeader."Document Type"::"Return Order");
      SalesHeaderArchive.SETRANGE("No.",No);
      SalesHeaderArchive.FINDFIRST;
    END;

    LOCAL PROCEDURE ValidateDeferralArchiveScheduleDoesNotExist@50(DocType@1002 : Integer;DocNo@1001 : Code[20];LineNo@1000 : Integer);
    VAR
      DeferralHeaderArchive@1004 : Record 5127;
      DeferralLineArchive@1003 : Record 5128;
    BEGIN
      ASSERTERROR DeferralHeaderArchive.GET(DeferralUtilities.GetSalesDeferralDocType,'','',DocType,DocNo,LineNo);

      DeferralLineArchive.SETRANGE("Deferral Doc. Type",DeferralUtilities.GetSalesDeferralDocType);
      DeferralLineArchive.SETRANGE("Document Type",DocType);
      DeferralLineArchive.SETRANGE("Document No.",DocNo);
      DeferralLineArchive.SETRANGE("Line No.",LineNo);
      ASSERTERROR DeferralLineArchive.FINDFIRST;
    END;

    LOCAL PROCEDURE ValidatePostedDeferralSchedule@57(DocType@1002 : Integer;DocNo@1001 : Code[20];LineNo@1000 : Integer;DeferralTemplateCode@1005 : Code[10];HeaderPostingDate@1006 : Date;HeaderAmountToDefer@1007 : Decimal;HeaderAmountToDeferLCY@1008 : Decimal;NoOfPeriods@1009 : Integer);
    VAR
      PostedDeferralHeader@1004 : Record 1704;
      PostedDeferralLine@1003 : Record 1705;
      Period@1011 : Integer;
      DeferralAmount@1012 : Decimal;
      PostingDate@1013 : Date;
    BEGIN
      PostedDeferralHeader.GET(DeferralUtilities.GetSalesDeferralDocType,'','',DocType,DocNo,LineNo);
      PostedDeferralHeader.TESTFIELD("Deferral Code",DeferralTemplateCode);
      PostedDeferralHeader.TESTFIELD("Start Date",HeaderPostingDate);
      PostedDeferralHeader.TESTFIELD("Amount to Defer",HeaderAmountToDefer);
      PostedDeferralHeader.TESTFIELD("Amount to Defer (LCY)",HeaderAmountToDeferLCY);
      PostedDeferralHeader.TESTFIELD("No. of Periods",NoOfPeriods);

      RangePostedDeferralLines(PostedDeferralHeader,PostedDeferralLine);
      CLEAR(DeferralAmount);
      Period := 0;
      IF PostedDeferralLine.FINDSET THEN BEGIN
        REPEAT
          IF Period = 0 THEN
            PostingDate := HeaderPostingDate
          ELSE
            PostingDate := SetDateDay(1,HeaderPostingDate);
          PostingDate := PeriodDate(PostingDate,Period);
          PostedDeferralLine.TESTFIELD("Posting Date",PostingDate);
          DeferralAmount := DeferralAmount + PostedDeferralLine.Amount;
          Period := Period + 1;
        UNTIL PostedDeferralLine.NEXT = 0;
      END;
      PostedDeferralHeader.TESTFIELD("Amount to Defer",DeferralAmount);
    END;

    LOCAL PROCEDURE FindSalesInvoiceLine@56(VAR SalesInvLine@1003 : Record 113;No@1001 : Code[20]);
    BEGIN
      SalesInvLine.SETRANGE("Document No.",No);
      SalesInvLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesCrMemoLine@58(VAR SalesCrMemoLine@1003 : Record 115;No@1001 : Code[20]);
    BEGIN
      SalesCrMemoLine.SETRANGE("Document No.",No);
      SalesCrMemoLine.FINDFIRST;
    END;

    LOCAL PROCEDURE GetDeferralTemplateAccount@59(DeferralTemplateCode@1000 : Code[10]) : Code[20];
    VAR
      DeferralTemplate@1001 : Record 1700;
    BEGIN
      DeferralTemplate.GET(DeferralTemplateCode);
      EXIT(DeferralTemplate."Deferral Account");
    END;

    LOCAL PROCEDURE GLCalcSum@61(DocNo@1000 : Code[20];AccNo@1005 : Code[20];StartPostDate@1001 : Date;EndPostDate@1004 : Date;VAR RecCount@1002 : Integer;VAR AccAmt@1003 : Decimal);
    VAR
      GLEntry@1006 : Record 17;
    BEGIN
      CLEAR(AccAmt);
      CLEAR(GLEntry);
      GLEntry.SETRANGE("Document No.",DocNo);
      GLEntry.SETRANGE("G/L Account No.",AccNo);
      GLEntry.SETRANGE("Posting Date",StartPostDate,EndPostDate);
      RecCount := GLEntry.COUNT;
      IF GLEntry.FINDSET THEN
        REPEAT
          AccAmt := AccAmt + GLEntry.Amount;
        UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE PeriodDate@60(PostingDate@1000 : Date;Period@1001 : Integer) : Date;
    VAR
      Expr@1002 : Text[50];
    BEGIN
      // Expr := '<' + FORMAT(Period) + 'M>';
      // EXIT(CALCDATE(Expr,PostingDate));
      Expr := FORMAT(Period);
      EXIT(CALCDATE('<' + Expr + 'M>',PostingDate));
    END;

    [ModalPageHandler]
    PROCEDURE DeferralScheduleHandler@72(VAR DeferralSchedule@1000 : TestPage 1702);
    BEGIN
      // Modal Page Handler.
      DeferralSchedule."Amount to Defer".ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
    END;

    [ModalPageHandler]
    PROCEDURE UpdateDeferralSchedulePeriodHandler@98(VAR DeferralSchedule@1000 : TestPage 1702);
    BEGIN
      // Modal Page Handler.
      DeferralSchedule."No. of Periods".SETVALUE(LibraryVariableStorage.DequeueInteger);
      DeferralSchedule.CalculateSchedule.INVOKE;
      DeferralSchedule.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DeferralScheduleViewHandler@84(VAR DeferralScheduleView@1000 : TestPage 1704);
    BEGIN
      // Modal Page Handler.
      DeferralScheduleView.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DeferralScheduleArchiveHandler@92(VAR DeferralScheduleArchive@1000 : TestPage 1706);
    BEGIN
      // Modal Page Handler.
      DeferralScheduleArchive.OK.INVOKE;
    END;

    LOCAL PROCEDURE GLCalcSalesAmount@99(DocNo@1000 : Code[20];AccNo@1005 : Code[20];StartPostDate@1001 : Date;EndPostDate@1004 : Date;VAR RecCount@1002 : Integer;VAR AccAmt@1003 : Decimal;VAR SalesAmt@1006 : Decimal);
    VAR
      GLEntry@1007 : Record 17;
    BEGIN
      CLEAR(AccAmt);
      CLEAR(GLEntry);
      GLEntry.SETRANGE("Document No.",DocNo);
      GLEntry.SETRANGE("G/L Account No.",AccNo);
      GLEntry.SETRANGE("Posting Date",StartPostDate,EndPostDate);
      RecCount := GLEntry.COUNT;
      IF GLEntry.FINDSET THEN BEGIN
        SalesAmt := GLEntry.Amount;
        REPEAT
          AccAmt := AccAmt + GLEntry.Amount;
        UNTIL GLEntry.NEXT = 0;
      END;
    END;

    PROCEDURE ValidateReturnsDeferralStartDate@90(DocType@1002 : Integer;DocNo@1001 : Code[20];LineNo@1000 : Integer;RetDeferralStartDate@1008 : Date;VAR DeferralAmount@1003 : Decimal);
    VAR
      DeferralLine@1004 : Record 1702;
      Period@1005 : Integer;
      PostingDate@1006 : Date;
    BEGIN
      CLEAR(DeferralAmount);
      DeferralLine.SETRANGE("Deferral Doc. Type",DeferralUtilities.GetSalesDeferralDocType);
      DeferralLine.SETRANGE("Gen. Jnl. Template Name",'');
      DeferralLine.SETRANGE("Gen. Jnl. Batch Name",'');
      DeferralLine.SETRANGE("Document Type",DocType);
      DeferralLine.SETRANGE("Document No.",DocNo);
      DeferralLine.SETRANGE("Line No.",LineNo);
      Period := 0;
      IF DeferralLine.FINDSET THEN BEGIN
        REPEAT
          IF Period = 0 THEN
            PostingDate := RetDeferralStartDate
          ELSE
            PostingDate := SetDateDay(1,RetDeferralStartDate);
          PostingDate := PeriodDate(PostingDate,Period);
          DeferralLine.TESTFIELD("Posting Date",PostingDate);
          DeferralAmount := DeferralAmount + DeferralLine.Amount;
          Period := Period + 1;
        UNTIL DeferralLine.NEXT = 0;
      END;
    END;

    PROCEDURE GetStartDate@46(DeferralStartOption@1002 : Option;StartDate@1000 : Date) AdjustedStartDate : Date;
    VAR
      AccountingPeriod@1001 : Record 50;
      DeferralTemplate@1003 : Record 1700;
    BEGIN
      CASE DeferralStartOption OF
        DeferralTemplate."Start Date"::"Posting Date":
          AdjustedStartDate := StartDate;
        DeferralTemplate."Start Date"::"Beginning of Period":
          BEGIN
            AccountingPeriod.SETRANGE("Starting Date",0D,StartDate);
            IF AccountingPeriod.FINDLAST THEN
              AdjustedStartDate := AccountingPeriod."Starting Date";
          END;
        DeferralTemplate."Start Date"::"End of Period":
          BEGIN
            AccountingPeriod.SETFILTER("Starting Date",'>%1',StartDate);
            IF AccountingPeriod.FINDFIRST THEN
              AdjustedStartDate := CALCDATE('<-1D>',AccountingPeriod."Starting Date");
          END;
        DeferralTemplate."Start Date"::"Beginning of Next Period":
          BEGIN
            AccountingPeriod.SETFILTER("Starting Date",'>%1',StartDate);
            IF AccountingPeriod.FINDFIRST THEN
              AdjustedStartDate := AccountingPeriod."Starting Date";
          END;
      END;
    END;

    LOCAL PROCEDURE CreateCurrency@76() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateSalesDocWithCurrencyAndLine@102(VAR SalesHeader@1002 : Record 36;VAR SalesLine@1001 : Record 37;DocumentType@1004 : Option;SalesLineType@1005 : ' ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)';No@1003 : Code[20];PostingDate@1007 : Date);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CreateCustomer);
      SalesHeader.VALIDATE("Currency Code",CreateCurrency);
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLineType,No,2);
      CASE SalesLine.Type OF
        SalesLine.Type::"G/L Account",
        SalesLine.Type::Resource:
          BEGIN
            SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(1000,2));
            SalesLine.MODIFY(TRUE);
          END;
      END;
    END;

    LOCAL PROCEDURE UpdateQtyToShipInvoiceOnSalesLine@107(VAR SalesLine@1001 : Record 37;Quantity@1000 : Decimal;QuantityToShip@1002 : Decimal;QuantityToInvoice@1003 : Decimal);
    BEGIN
      SalesLine.VALIDATE(Quantity,Quantity);
      SalesLine.VALIDATE("Qty. to Ship",QuantityToShip);
      SalesLine.VALIDATE("Qty. to Invoice",QuantityToInvoice);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetInvoiceQtyAmtToDefer@109(VAR SalesLine@1000 : Record 37;DeferralAmount@1003 : Decimal;CurrencyCode@1001 : Code[20]) : Decimal;
    VAR
      Currency@1002 : Record 4;
    BEGIN
      IF CurrencyCode = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        Currency.GET(CurrencyCode);
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
      EXIT(ROUND(DeferralAmount *
          SalesLine."Qty. to Invoice" / SalesLine.Quantity,Currency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE GetCombinedDeferralLines@118(VAR TempPostedDeferralLine@1000 : TEMPORARY Record 1705;DocNo@1002 : Code[20]);
    VAR
      PostedDeferralLine@1001 : Record 1705;
    BEGIN
      PostedDeferralLine.SETRANGE("Document No.",DocNo);
      PostedDeferralLine.FINDSET;
      REPEAT
        TempPostedDeferralLine.SETRANGE("Document No.",DocNo);
        TempPostedDeferralLine.SETRANGE("Posting Date",PostedDeferralLine."Posting Date");
        IF NOT TempPostedDeferralLine.FINDFIRST THEN BEGIN
          TempPostedDeferralLine.INIT;
          TempPostedDeferralLine."Document No." := DocNo;
          TempPostedDeferralLine."Posting Date" := PostedDeferralLine."Posting Date";
          TempPostedDeferralLine.INSERT;
        END;
        TempPostedDeferralLine.Amount += PostedDeferralLine.Amount;
        TempPostedDeferralLine.MODIFY;
      UNTIL PostedDeferralLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SetupBatchPostingReportParameters@124(VAR NewPostingDate@1000 : Date;PostingDate@1003 : Date;ConfirmCnt@1001 : Integer;ConfirmValue@1002 : Boolean);
    BEGIN
      NewPostingDate := CALCDATE('<+1M>',PostingDate);
      LibraryVariableStorage.Enqueue(NewPostingDate);
      LibraryVariableStorage.Enqueue(ConfirmCnt);
      LibraryVariableStorage.Enqueue(ConfirmValue);
    END;

    LOCAL PROCEDURE VerifyPostedInvoiceDeferralsAndGL@108(DocNo@1000 : Code[20];DeferralTemplateCode@1003 : Code[10];AccNo@1005 : Code[20];AmtToDefer@1004 : Decimal;AmtToDeferLCY@1008 : Decimal;NoOfPeriods@1009 : Integer;GLRecordCount@1010 : Integer;PostingDate@1011 : Date);
    VAR
      SalesInvLine@1001 : Record 113;
      GLSum@1006 : Decimal;
      GLCount@1002 : Integer;
    BEGIN
      // The deferrals were moved to the Posted Invoice Line and Posted Deferral tables
      FindSalesInvoiceLine(SalesInvLine,DocNo);
      SalesInvLine.TESTFIELD("Deferral Code",DeferralTemplateCode);
      ValidatePostedDeferralSchedule(SalesDocType::"Posted Invoice",DocNo,
        SalesInvLine."Line No.",DeferralTemplateCode,PostingDate,AmtToDefer,AmtToDeferLCY,NoOfPeriods);

      // The correct deferrals were posted to GL
      GLCalcSum(DocNo,AccNo,PostingDate,PeriodDate(PostingDate,NoOfPeriods),GLCount,GLSum);
      Assert.AreEqual(GLRecordCount,GLCount,'An incorrect number of lines was posted');
      Assert.AreEqual(0,GLSum,'An incorrect amount was posted');
    END;

    LOCAL PROCEDURE VerifyPostedInvoiceDeferralsAndGLWithSalesAmt@110(DocNo@1000 : Code[20];DeferralTemplateCode@1003 : Code[10];AccNo@1005 : Code[20];SalesAccount@1012 : Code[20];AmtToDefer@1004 : Decimal;AmtToDeferLCY@1008 : Decimal;Day@1007 : Integer;NoOfPeriods@1009 : Integer;GLRecordCount@1010 : Integer;SalesRecordCount@1011 : Integer;SalesAmount@1013 : Decimal);
    VAR
      SalesInvLine@1001 : Record 113;
      GLSalesAmount@1014 : Decimal;
      GLSum@1006 : Decimal;
      GLCount@1002 : Integer;
    BEGIN
      // The deferrals were moved to the Sales Invoice Line and Posted Deferral tables
      FindSalesInvoiceLine(SalesInvLine,DocNo);
      SalesInvLine.TESTFIELD("Deferral Code",DeferralTemplateCode);
      ValidatePostedDeferralSchedule(SalesDocType::"Posted Invoice",DocNo,
        SalesInvLine."Line No.",DeferralTemplateCode,SetDateDay(Day,WORKDATE),AmtToDefer,AmtToDeferLCY,NoOfPeriods);

      // The amount not deferred was posted to GL for the sales account
      GLCalcSalesAmount(DocNo,SalesAccount,
        SetDateDay(Day,WORKDATE),PeriodDate(SetDateDay(Day,WORKDATE),NoOfPeriods),GLCount,GLSum,GLSalesAmount);
      Assert.AreEqual(SalesRecordCount,GLCount,'An incorrect number of lines was posted');
      Assert.AreEqual(SalesAmount,ABS(GLSalesAmount),'An incorrect Amount was posted for sales');

      // The deferrals account was updated
      GLCalcSum(DocNo,AccNo,SetDateDay(Day,WORKDATE),PeriodDate(SetDateDay(Day,WORKDATE),NoOfPeriods),GLCount,GLSum);
      Assert.AreEqual(GLRecordCount,GLCount,'An incorrect number of lines was posted');
      Assert.AreEqual(0,GLSum,'An incorrect amount was posted');
    END;

    LOCAL PROCEDURE VerifyDeferralHeaderLinesRemoved@111(DocType@1004 : Option;DocNo@1000 : Code[20];LineNo@1005 : Integer);
    VAR
      DeferralHeader@1001 : Record 1701;
      DeferralLine@1003 : Record 1702;
      DeferralUtilities@1002 : Codeunit 1720;
    BEGIN
      ASSERTERROR DeferralHeader.GET(DeferralUtilities.GetSalesDeferralDocType,'','',DocType,DocNo,LineNo);
      ASSERTERROR LibraryERM.FindDeferralLine(DeferralLine,DeferralUtilities.GetSalesDeferralDocType,'','',DocType,DocNo,LineNo);
    END;

    LOCAL PROCEDURE VerifyPostedCrMemosDeferralsAndGL@142(DocType@1007 : Option;DocNo@1000 : Code[20];DeferralTemplateCode@1003 : Code[10];AccNo@1005 : Code[20];AmtToDefer@1004 : Decimal;AmtToDeferLCY@1008 : Decimal;NoOfPeriods@1009 : Integer;GLRecordCount@1010 : Integer;PostingDate@1011 : Date);
    VAR
      SalesCrMemoLine@1001 : Record 115;
      GLSum@1006 : Decimal;
      GLCount@1002 : Integer;
    BEGIN
      // The deferrals were moved to the Posted Credit Memo Line and Posted Deferral tables
      FindSalesCrMemoLine(SalesCrMemoLine,DocNo);
      SalesCrMemoLine.TESTFIELD("Deferral Code",DeferralTemplateCode);
      ValidatePostedDeferralSchedule(
        DocType,DocNo,
        SalesCrMemoLine."Line No.",DeferralTemplateCode,PostingDate,AmtToDefer,AmtToDeferLCY,NoOfPeriods);

      // The correct deferrals were posted to GL
      GLCalcSum(DocNo,AccNo,PostingDate,PeriodDate(PostingDate,NoOfPeriods),GLCount,GLSum);
      Assert.AreEqual(GLRecordCount,GLCount,'An incorrect number of lines was posted');
      Assert.AreEqual(0,GLSum,'An incorrect amount was posted');
    END;

    LOCAL PROCEDURE VerifyGLForDeferralPeriod@117(DocNo@1000 : Code[20];AccNo@1001 : Code[20];SalesAmt@1002 : Decimal);
    VAR
      TempPostedDeferralLine@1003 : TEMPORARY Record 1705;
      GLEntry@1004 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Document No.",DocNo);
        SETRANGE("G/L Account No.",AccNo);
        SETRANGE("Gen. Posting Type","Gen. Posting Type"::Sale);
        CALCSUMS(Amount);
        TESTFIELD(Amount,SalesAmt);

        GetCombinedDeferralLines(TempPostedDeferralLine,DocNo);
        TempPostedDeferralLine.RESET;
        TempPostedDeferralLine.FINDSET;
        SETRANGE("Gen. Posting Type","Gen. Posting Type"::" ");
        REPEAT
          SETRANGE("Posting Date",TempPostedDeferralLine."Posting Date");
          FINDFIRST;
          TESTFIELD(Amount,TempPostedDeferralLine.Amount);
        UNTIL TempPostedDeferralLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyInvoicePostingDate@125(DocNo@1000 : Code[20];PostingDate@1001 : Date);
    VAR
      SalesInvoiceHeader@1002 : Record 112;
    BEGIN
      SalesInvoiceHeader.GET(DocNo);
      SalesInvoiceHeader.TESTFIELD("Posting Date",PostingDate);
    END;

    LOCAL PROCEDURE VerifyCrMemoPostingDate@123(DocNo@1001 : Code[20];PostingDate@1000 : Date);
    VAR
      SalesCrMemoHeader@1002 : Record 114;
    BEGIN
      SalesCrMemoHeader.GET(DocNo);
      SalesCrMemoHeader.TESTFIELD("Posting Date",PostingDate);
    END;

    [RequestPageHandler]
    PROCEDURE BatchPostSalesInvoicesRequestPageHandler@140(VAR BatchPostSalesInvoices@1000 : TestRequestPage 297);
    BEGIN
      BatchPostSalesInvoices.ReplacePostingDate.SETVALUE(TRUE);
      BatchPostSalesInvoices.PostingDate.SETVALUE(LibraryVariableStorage.DequeueDate);
      BatchPostSalesInvoices.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE BatchPostSalesOrdersRequestPageHandler@119(VAR BatchPostSalesOrders@1000 : TestRequestPage 296);
    BEGIN
      BatchPostSalesOrders.Ship.SETVALUE(TRUE);
      BatchPostSalesOrders.Invoice.SETVALUE(TRUE);
      BatchPostSalesOrders.ReplacePostingDate.SETVALUE(TRUE);
      BatchPostSalesOrders.PostingDate.SETVALUE(LibraryVariableStorage.DequeueDate);
      BatchPostSalesOrders.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE BatchPostSalesCreditMemosRequestPageHandler@131(VAR BatchPostSalesCreditMemos@1000 : TestRequestPage 298);
    BEGIN
      BatchPostSalesCreditMemos.ReplacePostingDate.SETVALUE(TRUE);
      BatchPostSalesCreditMemos.PostingDate.SETVALUE(LibraryVariableStorage.DequeueDate);
      BatchPostSalesCreditMemos.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@136(Question@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Assert.ExpectedMessage(DeferralLineQst,Question);
      LibraryVariableStorage.Enqueue(LibraryVariableStorage.DequeueInteger + 1); // count of handler call's
      Reply := LibraryVariableStorage.DequeueBoolean;
    END;

    BEGIN
    {
      // [FEATURE] [Revenue Expense Deferral] [Sales]
    }
    END.
  }
}

