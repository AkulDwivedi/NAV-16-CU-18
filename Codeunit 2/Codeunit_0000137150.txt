OBJECT Codeunit 137150 SCM Warehouse UOM
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 6550=rimd;
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalTemplate@1029 : Record 82;
      ItemJournalBatch@1008 : Record 233;
      OutputItemJournalTemplate@1044 : Record 82;
      OutputItemJournalBatch@1043 : Record 233;
      ItemTrackingCode@1014 : Record 6502;
      ItemTrackingCode2@1024 : Record 6502;
      ItemTrackingCode3@1005 : Record 6502;
      ItemTrackingCode4@1033 : Record 6502;
      WarehouseEmployee@1007 : Record 7301;
      LocationBlue@1045 : Record 14;
      LocationGreen@1021 : Record 14;
      LocationIntransit@1020 : Record 14;
      LocationYellow@1017 : Record 14;
      LocationSilver@1011 : Record 14;
      LocationWhite@1015 : Record 14;
      LocationWhite2@1013 : Record 14;
      LocationWhite3@1018 : Record 14;
      WarehouseJournalTemplate@1026 : Record 7309;
      WarehouseJournalBatch@1025 : Record 7310;
      Assert@1002 : Codeunit 130000;
      LibraryManufacturing@1032 : Codeunit 132202;
      LibraryWarehouse@1009 : Codeunit 132204;
      LibraryInventory@1016 : Codeunit 132201;
      LibrarySales@1037 : Codeunit 130509;
      LibraryPurchase@1038 : Codeunit 130512;
      LibraryAssembly@1064 : Codeunit 132207;
      LibraryUtility@1010 : Codeunit 131000;
      LibraryPatterns@1047 : Codeunit 132212;
      LibraryItemTracking@1048 : Codeunit 130502;
      LibraryRandom@1006 : Codeunit 130440;
      LibraryVariableStorage@1012 : Codeunit 131004;
      isInitialized@1000 : Boolean;
      ExceedsAvailableCapacity@1004 : TextConst '@@@="%1= Field Caption,%2= Current capacity value,%3= Available Capacity,%4= Table Caption, %5= Field value.";ENU=%1 to place (%2) exceeds the available capacity (%3) on %4 %5.';
      BinContentMustBeDeleted@1019 : TextConst 'ENU=Bin Content must be deleted.';
      QuantityMustBeSame@1027 : TextConst 'ENU=Quantity must be same.';
      BinConfirmMessage@1028 : TextConst 'ENU=\Do you still want to use this Bin ?';
      BlockMovementError@1030 : TextConst '@@@="%1 = Block Movement Value,%2 = Location Value,%3 = Bin Value,%4 = Item Value,%5 = Unit of Measure Value";ENU="Block Movement must not be %1 in Bin Content Location Code=''%2'',Bin Code=''%3'',Item No.=''%4'',Variant Code='''',Unit of Measure Code=''%5''."';
      ExpirationDateError@1031 : TextConst '@@@="%1 = Date Value, %2 = Inventory Put Away No., %3 = Line No. ";ENU="Expiration Date must not be %1 in Warehouse Activity Line Activity Type=''Invt. Put-away'',No.=''%2'',Line No.=''%3''."';
      ExpiredItemMsg@1049 : TextConst 'ENU=Some items were not included in the pick due to their expiration date.';
      PutAwayCreated@1023 : TextConst 'ENU=Number of Invt. Put-away activities created';
      PickCreated@1022 : TextConst 'ENU=Number of Invt. Pick activities created';
      InboundWarehouseCreated@1034 : TextConst 'ENU=Inbound Whse. Requests are created';
      PostJournalLines@1036 : TextConst 'ENU=Do you want to register and post the journal lines?';
      LinesRegistered@1035 : TextConst 'ENU=The journal lines were successfully registered';
      ChangeAffectExistingEntries@1039 : TextConst 'ENU=The change will not affect existing entries';
      TransferOrderDeleted@1040 : TextConst '@@@="%1 = Transfer Order No.";ENU=The transfer order %1 has been deleted';
      ProductionOrderCreated@1042 : TextConst 'ENU=Released Prod. Order';
      NothingToHandle@1046 : TextConst 'ENU=Nothing to handle.';
      JournalLinesPostedMsg@1050 : TextConst 'ENU=The journal lines were successfully posted.';
      CouldNotFindBinErr@1056 : TextConst 'ENU=Could not find Bin next to %1.';
      WrongTotalQtyErr@1051 : TextConst 'ENU=Wrong total quantity in registered pick lines.';
      ItemTrackingLineHandling@1052 : 'Create,Use Existing';
      LotsAssignment@1055 : 'Partial,Complete';
      WhseActivLineQtyErr@1057 : TextConst 'ENU=Quantity in Warehouse Activity Line is not correct.';
      UnitOfMeasureCodeErr@1170000000 : TextConst 'ENU=Unit of Measure Code should be same';
      QuantityErr@1053 : TextConst 'ENU=Quantity is incorrect';
      ItemNoErr@1041 : TextConst 'ENU=Item No is incorrect';
      WhseReceiveIsRequiredErr@1054 : TextConst 'ENU=Warehouse Receive is required for Line No.';
      WhseShipmentIsRequiredErr@1058 : TextConst 'ENU=Warehouse Shipment is required for Line No.';
      BomLineType@1059 : ' ,Item,Production BOM';
      CannotModifyUOMWithWhseEntriesErr@1060 : TextConst '@@@="%1 = Item Unit of Measure %2 = Code %3 = Item No.";ENU=You cannot modify Item Unit of Measure';
      QtyToHandleErr@1061 : TextConst '@@@="%1 = Qty. to Handle";ENU=%1 must have a value';
      ItemTrackingMode@1062 : ' ,Assign Lot No.,Select Lot No.,Select Entries,Assign Lot And Serial,Split Lot No.,Assign Serial No.,Select Multiple Lot No.';
      QuantityBaseAvailableMustNotBeLessErr@1063 : TextConst 'ENU=Quantity (Base) available must not be less than';
      WhsePickCreatedTxt@1065 : TextConst 'ENU=Pick activity no.';

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE TFS360360_CreatePurcahseCreditMemoUsingCopyForLocationWithDirectedPutAwayPick@232();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // [SCENARIO 360360.1] You can create Purchase Credit Memo for a Location with Directed Put-away and Pick using Copy Document (Purchase Line)
      Initialize;

      // [GIVEN] Create Purchase Order
      CreateReleasedPurchaseOrder(PurchaseHeader);
      // [GIVEN] Create and PostPost Whse. Receipt
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);

      // [WHEN] Create Credit Memo using Copy Purchase Order
      ASSERTERROR CreateCreditMemoUsingCopyPurchase(PurchaseHeader."No.");

      // [THEN] Verify last error
      Assert.ExpectedError(WhseShipmentIsRequiredErr);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ProductionJournalHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE TFS360360_CreateSalesCreditMemoUsingCopyForLocationWithDirectedPutAwayPick@235();
    VAR
      SalesHeaderNo@1002 : Code[20];
    BEGIN
      // [SCENARIO 360360.2] You can create Sales Credit Memo for a Location with Directed Put-away and Pick using Copy Document (Sales Line)
      Initialize;

      // [GIVEN] Create a Movement Worksheet, Sales Order, Post Whse. Shipment, create Sales Credit Memo
      CreateAndPostWhseShptFromSalesOrderUsingMovement(SalesHeaderNo);

      // [WHEN] Create Credit Memo using Copy Sales Order
      ASSERTERROR CreateCreditMemoUsingCopySales(SalesHeaderNo);

      // [THEN] Verify last error
      Assert.ExpectedError(WhseReceiveIsRequiredErr);
    END;

    [Normal]
    LOCAL PROCEDURE TFS339073@176(ILEQuantity@1004 : Decimal;QtyPerUOM@1017 : Decimal;TransferQty@1016 : Decimal;CrossDockQty@1001 : Decimal);
    VAR
      ReservEntry@1014 : Record 337;
      WhseCrossDockOpportunity@1010 : Record 5768;
      WarehouseReceiptLine@1009 : Record 7317;
      SalesHeader@1007 : Record 36;
      SalesLine@1008 : Record 37;
      ItemUnitOfMeasure@1005 : Record 5404;
      Item@1000 : Record 27;
      TransferHeader@1006 : Record 5740;
      TransferLine@1013 : Record 5741;
      WarehouseActivityLine@1003 : Record 5767;
      LotNo1@1012 : Code[20];
      LotNo2@1015 : Code[20];
    BEGIN
      ILEQuantity := 10;

      // Setup : Create lot tracked item, with additional UOM used for put-away.
      Initialize;
      CreateItem(Item,ItemTrackingCode.Code);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",QtyPerUOM);
      UpdateItemUOM(Item,Item."Base Unit of Measure",Item."Base Unit of Measure",ItemUnitOfMeasure.Code);

      // Post positive adjustment in non-warehouse location.
      LotNo1 := LibraryUtility.GenerateRandomCode(WarehouseActivityLine.FIELDNO("Lot No."),DATABASE::"Warehouse Activity Line");
      LibraryPatterns.POSTPositiveAdjustmentWithItemTracking(Item,LocationBlue.Code,'',ILEQuantity,WORKDATE,'',LotNo1);
      LibraryPatterns.POSTPositiveAdjustmentWithItemTracking(Item,LocationBlue.Code,'',ILEQuantity,WORKDATE,'',LotNo1);

      LotNo2 := LibraryUtility.GenerateRandomCode(WarehouseActivityLine.FIELDNO("Lot No."),DATABASE::"Warehouse Activity Line");
      LibraryPatterns.POSTPositiveAdjustmentWithItemTracking(Item,LocationBlue.Code,'',ILEQuantity,WORKDATE,'',LotNo2);
      LibraryPatterns.POSTPositiveAdjustmentWithItemTracking(Item,LocationBlue.Code,'',ILEQuantity,WORKDATE,'',LotNo2);

      // Create transfer order to WHITE, post shipment, create whse. receipt.
      CreateAndReleaseTransferOrder(TransferHeader,LocationBlue.Code,LocationWhite.Code,Item."No.",TransferQty,ItemUnitOfMeasure.Code);
      TransferLine.SETRANGE("Document No.",TransferHeader."No.");
      TransferLine.FINDFIRST;

      // Split the transfer quantity across lots or not.
      IF TransferQty * QtyPerUOM <= 2 * ILEQuantity THEN
        LibraryItemTracking.CreateTransferOrderItemTracking(ReservEntry,TransferLine,'',LotNo1,TransferQty * QtyPerUOM)
      ELSE BEGIN
        LibraryItemTracking.CreateTransferOrderItemTracking(ReservEntry,TransferLine,'',LotNo1,2 * ILEQuantity);
        LibraryItemTracking.CreateTransferOrderItemTracking(
          ReservEntry,TransferLine,'',LotNo2,TransferQty * QtyPerUOM - 2 * ILEQuantity);
      END;
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);

      LibraryWarehouse.CreateWhseReceiptFromTO(TransferHeader);

      // Force cross-dock.
      IF CrossDockQty > 0 THEN
        CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",Item."Base Unit of Measure",LocationWhite.Code,CrossDockQty,FALSE);
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Inbound Transfer",TransferHeader."No.");
      LibraryWarehouse.CalculateCrossDockLines(
        WhseCrossDockOpportunity,'',WarehouseReceiptLine."No.",WarehouseReceiptLine."Location Code");

      // Exercise: Post receipt.
      LibraryVariableStorage.Enqueue(STRSUBSTNO(TransferOrderDeleted,TransferHeader."No."));  // Enqueue for MessageHandler.
      PostWarehouseReceipt(WarehouseReceiptLine."No.");

      // Verify: Put-away lines.
      // Put-away is not split across lots.
      IF TransferQty * QtyPerUOM <= 2 * ILEQuantity THEN BEGIN
        VerifyWhseActivityLine(
          WarehouseActivityLine,TransferHeader."No.",LotNo1,WarehouseActivityLine."Action Type"::Take,TransferQty * QtyPerUOM);

        IF CrossDockQty > 0 THEN BEGIN
          WarehouseActivityLine.SETRANGE("Bin Code",LocationWhite."Cross-Dock Bin Code");
          VerifyWhseActivityLine(
            WarehouseActivityLine,TransferHeader."No.",LotNo1,WarehouseActivityLine."Action Type"::Place,CrossDockQty);

          WarehouseActivityLine.SETFILTER("Bin Code",'<>%1',LocationWhite."Cross-Dock Bin Code");
          VerifyWhseActivityLine(
            WarehouseActivityLine,TransferHeader."No.",LotNo1,WarehouseActivityLine."Action Type"::Place,
            TransferQty * QtyPerUOM - CrossDockQty);
        END ELSE BEGIN
          WarehouseActivityLine.SETFILTER("Bin Code",'<>%1',LocationWhite."Cross-Dock Bin Code");
          VerifyWhseActivityLine(
            WarehouseActivityLine,TransferHeader."No.",LotNo1,WarehouseActivityLine."Action Type"::Place,TransferQty * QtyPerUOM);
        END;

        // Put-away is split across lots.
      END ELSE BEGIN
        VerifyWhseActivityLine(
          WarehouseActivityLine,TransferHeader."No.",LotNo1,WarehouseActivityLine."Action Type"::Take,2 * ILEQuantity);
        VerifyWhseActivityLine(
          WarehouseActivityLine,TransferHeader."No.",LotNo2,WarehouseActivityLine."Action Type"::Take,
          TransferQty * QtyPerUOM - 2 * ILEQuantity);

        // How is the cross dock qty distributed across lots?
        CASE TRUE OF
          (CrossDockQty > 0) AND (CrossDockQty <= 2 * ILEQuantity):
            // Cross dock qty consumes only from Lot 1.
            BEGIN
              WarehouseActivityLine.SETRANGE("Bin Code",LocationWhite."Cross-Dock Bin Code");
              VerifyWhseActivityLine(
                WarehouseActivityLine,TransferHeader."No.",LotNo1,WarehouseActivityLine."Action Type"::Place,CrossDockQty);

              WarehouseActivityLine.SETFILTER("Bin Code",'<>%1',LocationWhite."Cross-Dock Bin Code");
              VerifyWhseActivityLine(
                WarehouseActivityLine,TransferHeader."No.",LotNo1,WarehouseActivityLine."Action Type"::Place,
                2 * ILEQuantity - CrossDockQty);
              VerifyWhseActivityLine(
                WarehouseActivityLine,TransferHeader."No.",LotNo2,WarehouseActivityLine."Action Type"::Place,
                TransferQty * QtyPerUOM - 2 * ILEQuantity);
            END;
          (CrossDockQty > 0) AND (CrossDockQty > 2 * ILEQuantity) AND (CrossDockQty <= TransferQty * QtyPerUOM):
            // Cross dock qty consumes Lot 1 entirely and Lot 2 partially.
            BEGIN
              WarehouseActivityLine.SETRANGE("Bin Code",LocationWhite."Cross-Dock Bin Code");
              VerifyWhseActivityLine(
                WarehouseActivityLine,TransferHeader."No.",LotNo1,WarehouseActivityLine."Action Type"::Place,2 * ILEQuantity);
              VerifyWhseActivityLine(
                WarehouseActivityLine,TransferHeader."No.",LotNo2,WarehouseActivityLine."Action Type"::Place,
                CrossDockQty - 2 * ILEQuantity);

              WarehouseActivityLine.SETFILTER("Bin Code",'<>%1',LocationWhite."Cross-Dock Bin Code");
              VerifyWhseActivityLine(
                WarehouseActivityLine,TransferHeader."No.",LotNo2,WarehouseActivityLine."Action Type"::Place,
                TransferQty * QtyPerUOM - CrossDockQty);
              ASSERTERROR VerifyWhseActivityLine(
                  WarehouseActivityLine,TransferHeader."No.",LotNo1,WarehouseActivityLine."Action Type"::Place,0);
              Assert.AssertNothingInsideFilter;
            END;
          (CrossDockQty > 0) AND (CrossDockQty > 2 * ILEQuantity) AND (CrossDockQty > TransferQty * QtyPerUOM):
            // Cross dock qty consumes both Lot 1 and Lot 2.
            BEGIN
              WarehouseActivityLine.SETRANGE("Bin Code",LocationWhite."Cross-Dock Bin Code");
              VerifyWhseActivityLine(
                WarehouseActivityLine,TransferHeader."No.",LotNo1,WarehouseActivityLine."Action Type"::Place,2 * ILEQuantity);
              VerifyWhseActivityLine(
                WarehouseActivityLine,TransferHeader."No.",LotNo2,WarehouseActivityLine."Action Type"::Place,
                TransferQty * QtyPerUOM - 2 * ILEQuantity);

              WarehouseActivityLine.SETFILTER("Bin Code",'<>%1',LocationWhite."Cross-Dock Bin Code");
              ASSERTERROR VerifyWhseActivityLine(
                  WarehouseActivityLine,TransferHeader."No.",LotNo1,WarehouseActivityLine."Action Type"::Place,0);
              Assert.AssertNothingInsideFilter;
              ASSERTERROR VerifyWhseActivityLine(
                  WarehouseActivityLine,TransferHeader."No.",LotNo2,WarehouseActivityLine."Action Type"::Place,0);
              Assert.AssertNothingInsideFilter;
            END;
          CrossDockQty = 0:
            BEGIN
              VerifyWhseActivityLine(
                WarehouseActivityLine,TransferHeader."No.",LotNo1,WarehouseActivityLine."Action Type"::Place,2 * ILEQuantity);
              VerifyWhseActivityLine(
                WarehouseActivityLine,TransferHeader."No.",LotNo2,WarehouseActivityLine."Action Type"::Place,
                TransferQty * QtyPerUOM - 2 * ILEQuantity);
            END;
        END;
      END;
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TFS339073_SameLotSameILEWithoutCrossDock@219();
    BEGIN
      TFS339073(10,8,1,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TFS339073_SameLotSameILECrossDock@220();
    BEGIN
      TFS339073(10,8,1,5);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TFS339073_SameLotSplitILEWithoutCrossDock@211();
    BEGIN
      TFS339073(10,12,1,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TFS339073_SameLotSplitILECrossDock@214();
    BEGIN
      TFS339073(10,12,1,5);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TFS339073_TwoLotsWithoutCrossDock@215();
    BEGIN
      TFS339073(10,12,2,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TFS339073_TwoLotsCrossDockFirstLot@216();
    BEGIN
      TFS339073(10,12,2,15);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TFS339073_TwoLotsCrossDockBothLots@217();
    BEGIN
      TFS339073(10,12,2,22);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TFS339073_TwoLotsCrossDockWholeQty@218();
    BEGIN
      TFS339073(10,12,2,25);
    END;

    [Test]
    PROCEDURE BinContentDeletedAfterRegisteringPick@1();
    VAR
      Item@1001 : Record 27;
      ItemUnitOfMeasure@1000 : Record 5404;
      Bin@1002 : Record 7354;
      BinContent@1010 : Record 7302;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      WarehouseActivityLine@1009 : Record 5767;
      Quantity@1006 : Decimal;
    BEGIN
      // Setup : Create Sales Order, Warehouse Shipment and Pick.
      Initialize;
      CreateItem(Item,'');
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(5) + 1);  // Value required for multiple UOM with different conversion rate.
      FindBin(Bin,LocationWhite.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
      Quantity := LibraryRandom.RandDec(100,2);
      UpdateInventoryUsingWarehouseJournal(
        Bin,Item,Item."Base Unit of Measure",Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",FALSE,ItemTrackingMode::" ",
        WORKDATE);
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",ItemUnitOfMeasure.Code,Bin."Location Code",Quantity,FALSE);  // Use FALSE for without Tracking.
      CreatePickFromWarehouseShipment(SalesHeader);

      // Exercise : Register Pick.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // Verify : Verify empty Bin Content must be deleted.
      FindBinContent(BinContent,Bin,Item."No.");
      Assert.IsTrue(BinContent.ISEMPTY,BinContentMustBeDeleted);
    END;

    [Test]
    PROCEDURE QuantityToPlaceExceedsAvailableCapacityError@13();
    VAR
      Bin@1002 : Record 7354;
      BinContent@1010 : Record 7302;
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      PurchaseHeader@1004 : Record 38;
      WarehouseActivityLine@1009 : Record 5767;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup : Create Bin Content with maximum Quantity. Create and release Purchase Order with multiple UOM.
      Initialize;
      CreateItem(Item,'');
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(5) + 1);  // Value required for multiple UOM with different conversion rate.
      FindBin(Bin,LocationWhite.Code,TRUE,FALSE,FALSE);  // Find RECEIVE Bin.
      CreateBinContent(BinContent,Bin,Item."No.",Item."Base Unit of Measure",LibraryRandom.RandDec(100,2));
      CreateBinContent(BinContent,Bin,Item."No.",ItemUnitOfMeasure.Code,BinContent."Max. Qty.");
      Quantity := BinContent."Max. Qty." + LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",ItemUnitOfMeasure.Code,'',LocationWhite.Code,Quantity,FALSE);  // Use FALSE for without Tracking.

      // Exercise.
      ASSERTERROR CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);

      // Verify : Verify exceeds available capacity error message.
      Assert.ExpectedError(
        STRSUBSTNO(
          ExceedsAvailableCapacity,WarehouseActivityLine.FIELDCAPTION("Qty. (Base)"),
          Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",
          BinContent."Max. Qty." * ItemUnitOfMeasure."Qty. per Unit of Measure",BinContent.TABLECAPTION,BinContent."Bin Code"));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE WarehousePickFromSalesOrderUsingLotItemTrackingWithMultipleUOM@135();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      PurchaseHeader@1004 : Record 38;
      SalesHeader@1006 : Record 36;
      SalesLine@1008 : Record 37;
      WarehouseActivityLine@1009 : Record 5767;
      RegisteredWhseActivityLine@1002 : Record 5773;
    BEGIN
      // Setup : Create and release Purchase Order with multiple UOM. Create Warehouse Receipt and Put Away. Create Sales Order, Warehouse Shipment and Pick.
      Initialize;
      CreateItem(Item,ItemTrackingCode.Code);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(5) + 1);  // Value required for multiple UOM with different conversion rate.
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",Item."Base Unit of Measure",ItemUnitOfMeasure.Code,LocationWhite.Code,
        ItemUnitOfMeasure."Qty. per Unit of Measure",TRUE);
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Lot No.");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,Item."No.",Item."Base Unit of Measure",LocationWhite.Code,
        ItemUnitOfMeasure."Qty. per Unit of Measure" / 2,TRUE);  // Quantity must be less than available Inventory. Use TRUE for with Tracking.
      CreatePickFromWarehouseShipment(SalesHeader);

      // Exercise : Register Pick.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // Verify.
      VerifyRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",RegisteredWhseActivityLine."Activity Type"::Pick,
        RegisteredWhseActivityLine."Action Type"::Take,SalesLine."Qty. per Unit of Measure",
        ItemUnitOfMeasure."Qty. per Unit of Measure",ItemUnitOfMeasure.Code);

      VerifyRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",RegisteredWhseActivityLine."Activity Type"::Pick,
        RegisteredWhseActivityLine."Action Type"::Place,SalesLine.Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",
        ItemUnitOfMeasure."Qty. per Unit of Measure",Item."Base Unit of Measure");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE WarehousePutAwayFromPurchaseOrderUsingLotItemTrackingWithPutAwayUOM@146();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasureSales@1001 : Record 5404;
      ItemUnitOfMeasurePutAway@1002 : Record 5404;
      PurchaseHeader@1004 : Record 38;
      WarehouseActivityLine@1009 : Record 5767;
      RegisteredWhseActivityLine@1003 : Record 5773;
      Quantity@1005 : Decimal;
    BEGIN
      // Setup : Create and release Purchase Order with multiple UOM. Create Warehouse Receipt and Put Away.
      Initialize;
      CreateItemWithMultipleUOM(Item,ItemUnitOfMeasureSales,ItemUnitOfMeasurePutAway,ItemTrackingCode.Code);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",Item."Purch. Unit of Measure",Item."Put-away Unit of Measure Code",LocationWhite.Code,Quantity,TRUE);  // Use TRUE for with Tracking.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);

      // Exercise : Register Put-Away.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Verify.
      VerifyRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Activity Type"::"Put-away",
        RegisteredWhseActivityLine."Action Type"::Take,Quantity,Quantity,Item."Purch. Unit of Measure");

      VerifyRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Activity Type"::"Put-away",
        RegisteredWhseActivityLine."Action Type"::Place,Quantity / ItemUnitOfMeasurePutAway."Qty. per Unit of Measure",Quantity,
        ItemUnitOfMeasurePutAway.Code);  // Value required for test.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE WarehouseShipmentFromSalesOrderUsingLotItemTrackingWithPutAwayUOM@10();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasureSales@1001 : Record 5404;
      ItemUnitOfMeasurePutAway@1002 : Record 5404;
      PurchaseHeader@1004 : Record 38;
      SalesHeader@1006 : Record 36;
      SalesLine@1008 : Record 37;
      WarehouseActivityLine@1009 : Record 5767;
      WarehouseShipmentHeader@1012 : Record 7320;
      WarehouseShipmentLine@1011 : Record 7321;
      WarehouseEntry@1005 : Record 7312;
      TempReservationEntry@1010 : TEMPORARY Record 337;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup : Create and release Purchase Order with multiple UOM. Create Warehouse Receipt and Put Away. Create Sales Order, Warehouse Shipment and Pick.
      Initialize;
      CreateItemWithMultipleUOM(Item,ItemUnitOfMeasureSales,ItemUnitOfMeasurePutAway,ItemTrackingCode.Code);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",Item."Purch. Unit of Measure",Item."Put-away Unit of Measure Code",LocationWhite2.Code,Quantity,
        TRUE);  // Use TRUE for with Tracking.
      CopyReservationEntry(TempReservationEntry,Item."No.");
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Lot No.");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateSalesLineWithUOM(SalesLine,SalesHeader,Item."No.",Item."Purch. Unit of Measure",LocationWhite2.Code,Quantity,TRUE,TRUE);  // Use TRUE for with Tracking.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Lot No.");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateSalesLineWithUOM(
        SalesLine,SalesHeader,Item."No.",Item."Put-away Unit of Measure Code",LocationWhite2.Code,Quantity / 2,TRUE,FALSE);  // Use Quantity / 2 for splitting into 2 lines required for test case.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Lot No.");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateSalesLineWithUOM(
        SalesLine,SalesHeader,Item."No.",Item."Put-away Unit of Measure Code",LocationWhite2.Code,Quantity / 2,TRUE,FALSE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // Exercise.
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);  // Use FALSE for only Shipment.

      // Verify : Warehouse Entries for Location, Bin, Lot No., Quantity and Quantity (Base).
      TempReservationEntry.FINDSET;
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::"Positive Adjmt.",Item."No.",Item."Purch. Unit of Measure",LocationWhite2.Code,
        LocationWhite2."Receipt Bin Code",TempReservationEntry."Lot No.",Quantity,Quantity);
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::"Negative Adjmt.",Item."No.",Item."Purch. Unit of Measure",LocationWhite2.Code,
        LocationWhite2."Shipment Bin Code",TempReservationEntry."Lot No.",-Quantity,-Quantity);
      TempReservationEntry.NEXT;
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::"Positive Adjmt.",Item."No.",Item."Put-away Unit of Measure Code",LocationWhite2.Code,
        LocationWhite2."Receipt Bin Code",
        TempReservationEntry."Lot No.",Quantity,Quantity * ItemUnitOfMeasurePutAway."Qty. per Unit of Measure");
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::"Negative Adjmt.",Item."No.",Item."Put-away Unit of Measure Code",LocationWhite2.Code,
        LocationWhite2."Shipment Bin Code",TempReservationEntry."Lot No.",-SalesLine.Quantity,-SalesLine."Quantity (Base)");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE WarehouseShipmentFromSalesOrderUsingLotItemTrackingWithMultipleUOM@68();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      PurchaseHeader@1004 : Record 38;
      SalesLine@1008 : Record 37;
      WarehouseActivityLine@1009 : Record 5767;
      ItemLedgerEntry@1002 : Record 32;
      TempReservationEntry@1005 : TEMPORARY Record 337;
    BEGIN
      // Setup : Create and release Purchase Order with multiple UOM. Create Warehouse Receipt and Put Away.
      Initialize;
      CreateItem(Item,ItemTrackingCode.Code);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(5) + 1);  // Value required for multiple UOM with different conversion rate.
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",Item."Base Unit of Measure",ItemUnitOfMeasure.Code,LocationWhite2.Code,
        ItemUnitOfMeasure."Qty. per Unit of Measure",TRUE);
      CopyReservationEntry(TempReservationEntry,Item."No.");
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Exercise.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Lot No.");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateAndPostWarehouseShipmentFromSalesOrder(
        SalesLine,Item."No.",Item."Base Unit of Measure",LocationWhite2.Code,ItemUnitOfMeasure."Qty. per Unit of Measure" / 2,TRUE);

      // Verify : Item Ledger Entries for Location, Lot No., Quantity and Remaining Quantity.
      TempReservationEntry.FINDSET;
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Purchase,Item."No.",Item."Base Unit of Measure",LocationWhite2.Code,
        TempReservationEntry."Lot No.",ItemUnitOfMeasure."Qty. per Unit of Measure",ItemUnitOfMeasure."Qty. per Unit of Measure");
      TempReservationEntry.NEXT;
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Purchase,Item."No.",ItemUnitOfMeasure.Code,LocationWhite2.Code,TempReservationEntry."Lot No.",
        ItemUnitOfMeasure."Qty. per Unit of Measure" * ItemUnitOfMeasure."Qty. per Unit of Measure",
        ItemUnitOfMeasure."Qty. per Unit of Measure" * ItemUnitOfMeasure."Qty. per Unit of Measure" - SalesLine.Quantity);
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Sale,Item."No.",Item."Base Unit of Measure",LocationWhite2.Code,TempReservationEntry."Lot No.",
        -SalesLine.Quantity,0);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PartialWarehouseShipmentFromSalesOrderUsingLotItemTracking@42();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      PurchaseHeader@1004 : Record 38;
      RegisteredWhseActivityLine@1002 : Record 5773;
      SalesLine@1008 : Record 37;
      WarehouseActivityLine@1009 : Record 5767;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup : Create and release Purchase Order with multiple UOM. Create Warehouse Receipt and Put Away.
      Initialize;
      CreateItem(Item,ItemTrackingCode.Code);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandDec(10,5) + 1);  // Decimal value required for multiple UOM with different conversion rate.
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",ItemUnitOfMeasure.Code,'',LocationWhite2.Code,Quantity,TRUE);  // Use TRUE for with Tracking.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Exercise.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Lot No.");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateAndPostWarehouseShipmentFromSalesOrder(SalesLine,Item."No.",ItemUnitOfMeasure.Code,LocationWhite2.Code,Quantity / 2,TRUE);  // Use Quantity / 2 for partial posting. Use TRUE for with Tracking.

      // Verify.
      VerifyRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesLine."Document No.",
        RegisteredWhseActivityLine."Activity Type"::Pick,
        RegisteredWhseActivityLine."Action Type"::Take,SalesLine.Quantity,SalesLine."Quantity (Base)",
        SalesLine."Unit of Measure Code");

      VerifyRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesLine."Document No.",
        RegisteredWhseActivityLine."Activity Type"::Pick,
        RegisteredWhseActivityLine."Action Type"::Place,SalesLine.Quantity,SalesLine."Quantity (Base)",
        SalesLine."Unit of Measure Code");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE FullWarehouseShipmentFromSalesOrderUsingLotItemTracking@27();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      PurchaseHeader@1004 : Record 38;
      SalesLine@1008 : Record 37;
      WarehouseActivityLine@1009 : Record 5767;
      ItemLedgerEntry@1003 : Record 32;
      TempReservationEntry@1006 : TEMPORARY Record 337;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup : Create and release Purchase Order with multiple UOM. Create Warehouse Receipt and Put Away. Create Sales Order, Warehouse Shipment and Pick. Post Warehouse Shipment.
      Initialize;
      CreateItem(Item,ItemTrackingCode.Code);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandDec(10,5) + 1);  // Decimal value required for multiple UOM with different conversion rate.
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",ItemUnitOfMeasure.Code,'',LocationWhite3.Code,Quantity,TRUE);  // Use TRUE for with Tracking.
      CopyReservationEntry(TempReservationEntry,Item."No.");
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Lot No.");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateAndPostWarehouseShipmentFromSalesOrder(SalesLine,Item."No.",ItemUnitOfMeasure.Code,LocationWhite3.Code,Quantity / 2,TRUE);  // Use Quantity / 2 for partial posting. Use TRUE for with Tracking.

      // Exercise.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Lot No.");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateAndPostWarehouseShipmentFromSalesOrder(SalesLine,Item."No.",ItemUnitOfMeasure.Code,LocationWhite3.Code,Quantity / 2,TRUE);

      // Verify : Item Ledger Entries for Location, Lot No., Quantity and Remaining Quantity.
      TempReservationEntry.FINDFIRST;
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Purchase,Item."No.",ItemUnitOfMeasure.Code,LocationWhite3.Code,TempReservationEntry."Lot No.",
        ROUND(Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",0.00001),0);
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Sale,Item."No.",ItemUnitOfMeasure.Code,LocationWhite3.Code,TempReservationEntry."Lot No.",
        -SalesLine."Quantity (Base)",0);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE WarehouseShipmentFromSalesOrderUsingMultipleLotNoWithMultipleUOM@33();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      PurchaseHeader@1004 : Record 38;
      RegisteredWhseActivityLine@1002 : Record 5773;
      SalesLine@1008 : Record 37;
      WarehouseActivityLine@1009 : Record 5767;
    BEGIN
      // Setup : Create and release Purchase Order with multiple UOM. Create Warehouse Receipt and Put Away.
      Initialize;
      CreateItem(Item,ItemTrackingCode.Code);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(5) + 1);  // Value required for multiple UOM with different conversion rate.
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",Item."Base Unit of Measure",Item."Base Unit of Measure",LocationWhite3.Code,
        ItemUnitOfMeasure."Qty. per Unit of Measure",TRUE);  // Use TRUE for with Tracking.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Exercise.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateAndPostWarehouseShipmentFromSalesOrder(SalesLine,Item."No.",ItemUnitOfMeasure.Code,LocationWhite3.Code,2,TRUE);  // 2 required for the 2 Purchase Lines.

      // Verify.
      VerifyRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesLine."Document No.",
        RegisteredWhseActivityLine."Activity Type"::Pick,
        RegisteredWhseActivityLine."Action Type"::Take,SalesLine.Quantity,SalesLine."Quantity (Base)" / 2,Item."Base Unit of Measure");

      VerifyRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesLine."Document No.",
        RegisteredWhseActivityLine."Activity Type"::Pick,
        RegisteredWhseActivityLine."Action Type"::Place,SalesLine.Quantity / 2,SalesLine."Quantity (Base)" / 2,ItemUnitOfMeasure.Code);
    END;

    [Test]
    PROCEDURE WarehouseShipmentFromSalesOrderWithDifferentSalesAndPurchaseUOM@83();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasurePurchase@1003 : Record 5404;
      ItemUnitOfMeasureSales@1001 : Record 5404;
      ItemUnitOfMeasurePutAway@1002 : Record 5404;
      PurchaseHeader@1004 : Record 38;
      SalesLine@1008 : Record 37;
      WarehouseActivityLine@1009 : Record 5767;
      ItemLedgerEntry@1006 : Record 32;
      Quantity@1005 : Decimal;
    BEGIN
      // Setup : Create Item with multiple UOM without Item Tracking. Create and release Purchase Order with multiple UOM. Create Warehouse Receipt and Put Away.
      Initialize;
      CreateItemWithMultipleUOM(Item,ItemUnitOfMeasureSales,ItemUnitOfMeasurePutAway,'');
      CreateItemUnitOfMeasure(ItemUnitOfMeasurePurchase,Item."No.",LibraryRandom.RandDec(10,2) + 1);  // Value required for multiple UOM with different conversion rate.
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",ItemUnitOfMeasurePurchase.Code,'',LocationWhite3.Code,Quantity,FALSE);  // Use FALSE for without Tracking.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Exercise.
      CreateAndPostWarehouseShipmentFromSalesOrder(
        SalesLine,Item."No.",Item."Sales Unit of Measure",LocationWhite3.Code,
        Quantity * ItemUnitOfMeasurePurchase."Qty. per Unit of Measure" / ItemUnitOfMeasureSales."Qty. per Unit of Measure",FALSE);  // Use FALSE for without Tracking.

      // Verify : Item Ledger Entries for Location, Quantity and Remaining Quantity.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Purchase,Item."No.",ItemUnitOfMeasurePurchase.Code,LocationWhite3.Code,'',
        Quantity * ItemUnitOfMeasurePurchase."Qty. per Unit of Measure",0);
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Sale,Item."No.",ItemUnitOfMeasureSales.Code,LocationWhite3.Code,'',
        -SalesLine."Quantity (Base)",0);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler,ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE WarehousePickFromSalesOrderUsingSameExpirationDateWithPickAccordingToFEFO@99();
    BEGIN
      // Setup.
      Initialize;
      WarehousePickFromSalesOrderUsingLotItemTracking(TRUE,TRUE);  // Use Pick According To FEFO as True.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler,ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE WarehousePickFromSalesOrderUsingDifferentExpirationDateWithPickAccordingToFEFO@12();
    BEGIN
      // Setup.
      Initialize;
      WarehousePickFromSalesOrderUsingLotItemTracking(TRUE,FALSE);  // Use Pick According To FEFO as True.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler,ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE WarehousePickFromSalesOrderUsingDifferentExpirationDateWithoutPickAccordingToFEFO@30();
    BEGIN
      // Setup.
      Initialize;
      WarehousePickFromSalesOrderUsingLotItemTracking(FALSE,TRUE);  // Use Pick According To FEFO as False.
    END;

    LOCAL PROCEDURE WarehousePickFromSalesOrderUsingLotItemTracking@74(PickAccordingToFEFO@1006 : Boolean;SameExpirationDate@1007 : Boolean);
    VAR
      Bin@1005 : Record 7354;
      Item@1004 : Record 27;
      ItemUnitOfMeasureSales@1003 : Record 5404;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      WarehouseActivityLine@1000 : Record 5767;
      ExpirationDates@1009 : ARRAY [3] OF Date;
      OldPickAccordingToFEFO@1010 : Boolean;
    BEGIN
      // Update Pick According to FEFO on Location. Create Item and update Inventory with Strict Expiration Posting Item Tracking Code. Create Pick from Sales Order.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite2,OldPickAccordingToFEFO,PickAccordingToFEFO);
      CreateItem(Item,ItemTrackingCode2.Code);
      CreateItemUnitOfMeasure(ItemUnitOfMeasureSales,Item."No.",LibraryRandom.RandInt(5) + 1);  // Value required for multiple UOM with different conversion rate.
      UpdateItemUOM(Item,Item."Base Unit of Measure",ItemUnitOfMeasureSales.Code,ItemUnitOfMeasureSales.Code);
      FindBin(Bin,LocationWhite2.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
      ExpirationDates[1] := WORKDATE;
      ExpirationDates[2] := WORKDATE;
      ExpirationDates[3] := WORKDATE;
      IF NOT SameExpirationDate THEN BEGIN
        ExpirationDates[2] := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
        ExpirationDates[3] := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',ExpirationDates[3]);  // Value required for test.
      END;

      UpdateInventoryUsingWarehouseJournal(
        Bin,Item,ItemUnitOfMeasureSales.Code,ItemUnitOfMeasureSales."Qty. per Unit of Measure",TRUE,
        ItemTrackingMode::"Assign Lot No.",ExpirationDates[1]);
      UpdateInventoryUsingWarehouseJournal(
        Bin,Item,ItemUnitOfMeasureSales.Code,ItemUnitOfMeasureSales."Qty. per Unit of Measure",TRUE,
        ItemTrackingMode::"Assign Lot No.",ExpirationDates[2]);
      UpdateInventoryUsingWarehouseJournal(
        Bin,Item,Item."Base Unit of Measure",ItemUnitOfMeasureSales."Qty. per Unit of Measure",TRUE,
        ItemTrackingMode::"Assign Lot No.",ExpirationDates[3]);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,Item."No.",ItemUnitOfMeasureSales.Code,Bin."Location Code",
        ItemUnitOfMeasureSales."Qty. per Unit of Measure" + 1,TRUE);
      CreatePickFromWarehouseShipment(SalesHeader);

      // Exercise.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // Verify : Verify Lot No., Expiration Date and Quantity (Base) on Warehouse Activity Lines.
      VerifyRegisteredWhseActivityLines(SalesLine,SameExpirationDate);

      // Tear down.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite2,OldPickAccordingToFEFO,OldPickAccordingToFEFO);
    END;

    [Test]
    [HandlerFunctions(CubageAndWeightExceedConfirmHandler)]
    PROCEDURE CubageToPlaceExceedsAvailableCapacityError@14();
    BEGIN
      // Setup.
      Initialize;
      MaximumCubageAndWeightOnWarehousePutAway(LibraryRandom.RandInt(5),0);  // Value required for Maximum Cubage.
    END;

    [Test]
    [HandlerFunctions(CubageAndWeightExceedConfirmHandler)]
    PROCEDURE WeightToPlaceExceedsAvailableCapacityError@44();
    BEGIN
      // Setup.
      Initialize;
      MaximumCubageAndWeightOnWarehousePutAway(0,LibraryRandom.RandInt(5));  // Value required for Maximum Weight.
    END;

    LOCAL PROCEDURE MaximumCubageAndWeightOnWarehousePutAway@51(Length@1009 : Decimal;Weight@1006 : Decimal);
    VAR
      Item@1005 : Record 27;
      Bin@1004 : Record 7354;
      ItemUnitOfMeasure@1003 : Record 5404;
      PurchaseHeader@1002 : Record 38;
      ExpectedError@1010 : Text[1024];
      Quantity@1000 : Decimal;
    BEGIN
      // Create Item with Unit Of Measure having Cubage and Weight. Create and release Purchase Order. Create and post Warehouse Receipt.
      CreateItem(Item,'');
      UpdateCubageAndWeightOnItemUOM(ItemUnitOfMeasure,Item,Length,Weight);  // Use same Length, Width and Height.
      UpdateBinWithMaximumCubageAndWeight(
        Bin,LocationWhite.Code,LocationWhite."Receipt Bin Code",ItemUnitOfMeasure.Cubage,ItemUnitOfMeasure.Weight);
      Quantity := LibraryRandom.RandInt(100) + 1;  // Quantity must be greater than 1 required for test.
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",ItemUnitOfMeasure.Code,'',LocationWhite.Code,Quantity,FALSE);  // Use FALSE for without Tracking.
      ExpectedError :=
        STRSUBSTNO(
          ExceedsAvailableCapacity,ItemUnitOfMeasure.FIELDCAPTION(Cubage),Quantity * ItemUnitOfMeasure.Cubage,
          ItemUnitOfMeasure.Cubage,Bin.TABLECAPTION,Bin.Code);
      IF Weight <> 0 THEN
        ExpectedError :=
          STRSUBSTNO(
            ExceedsAvailableCapacity,ItemUnitOfMeasure.FIELDCAPTION(Weight),Quantity * ItemUnitOfMeasure.Weight,
            ItemUnitOfMeasure.Weight,Bin.TABLECAPTION,Bin.Code);

      LibraryVariableStorage.Enqueue(ExpectedError + BinConfirmMessage);  // Enqueue ExpectedError at index 1 for CubageAndWeightExceedConfirmHandler.

      // Exercise :
      ASSERTERROR CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);

      // Verify : Verification is performed on CubageAndWeightExceedConfirmHandler.
      Assert.ExpectedError(ExpectedError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE UOMConversionOnMovementWorksheetUsingLotItemTracking@19();
    BEGIN
      // Setup.
      Initialize;
      UOMConversionOnMovementUsingItemTracking(FALSE);  // Use Movement as False.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE UOMConversionOnMovementUsingLotItemTracking@62();
    BEGIN
      // Setup.
      Initialize;
      UOMConversionOnMovementUsingItemTracking(TRUE);  // Use Movement as True.
    END;

    LOCAL PROCEDURE UOMConversionOnMovementUsingItemTracking@23(Movement@1006 : Boolean);
    VAR
      Item@1005 : Record 27;
      PurchaseHeader@1004 : Record 38;
      ItemUnitOfMeasure@1003 : Record 5404;
      WarehouseActivityLine@1002 : Record 5767;
      WhseWorksheetLine@1001 : Record 7326;
      TempReservationEntry@1007 : TEMPORARY Record 337;
      Quantity@1000 : Decimal;
    BEGIN
      // Create Item with multiple UOM with Item Tracking. Create and release Purchase Order. Create Warehouse Receipt and Put Away.
      CreateItem(Item,ItemTrackingCode.Code);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(5) + 1);  // Value required for multiple UOM with different conversion rate.
      UpdateItemUOM(Item,ItemUnitOfMeasure.Code,'','');
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",ItemUnitOfMeasure.Code,'',LocationWhite3.Code,Quantity,TRUE);  // Use FALSE for without Tracking.
      CopyReservationEntry(TempReservationEntry,Item."No.");
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Exercise.
      GetBinContentOnMovementWorksheet(WhseWorksheetLine,LocationWhite3.Code,Item."No.");
      IF Movement THEN
        CreateMovement(WhseWorksheetLine,Item."No.",ItemTrackingMode::" ",FALSE);

      // Verify : UOM conversion on Movement Lines.
      IF Movement THEN BEGIN
        TempReservationEntry.FINDFIRST;
        VerifyMovementLine(
          WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",
          ItemUnitOfMeasure.Code,TempReservationEntry."Lot No.");
        VerifyMovementLine(
          WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity,Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",
          ItemUnitOfMeasure.Code,TempReservationEntry."Lot No.");
      END ELSE
        VerifyWhseWorksheetLine(
          WhseWorksheetLine,Item."No.",Quantity,Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",ItemUnitOfMeasure.Code);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE UOMConversionOnMovementUsingLotItemTrackingWithFEFO@28();
    VAR
      Bin@1006 : Record 7354;
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1002 : Record 5404;
      WhseWorksheetLine@1005 : Record 7326;
      WarehouseActivityLine@1001 : Record 5767;
      ItemLedgerEntry@1007 : Record 32;
      Quantity@1003 : Decimal;
      OldPickAccordingToFEFO@1008 : Boolean;
    BEGIN
      // Setup : Update Pick According to FEFO on Location. Create Item and update Inventory with Strict Expiration Posting Item Tracking Code. Get Bin Content on Movement Worksheet.
      Initialize;
      UpdatePickAccordingToFEFOOnLocation(LocationWhite2,OldPickAccordingToFEFO,TRUE);
      CreateItem(Item,ItemTrackingCode2.Code);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(5) + 1);  // Value required for multiple UOM with different conversion rate.
      UpdateItemUOM(Item,ItemUnitOfMeasure.Code,ItemUnitOfMeasure.Code,'');
      FindBin(Bin,LocationWhite2.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
      Quantity := LibraryRandom.RandDec(100,2);
      UpdateInventoryUsingWarehouseJournal(Bin,Item,ItemUnitOfMeasure.Code,Quantity,TRUE,ItemTrackingMode::"Assign Lot No.",WORKDATE);
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::"Positive Adjmt.",Item."No.",ItemUnitOfMeasure.Code);
      GetBinContentOnMovementWorksheet(WhseWorksheetLine,LocationWhite2.Code,Item."No.");

      // Exercise : Create Movement.
      CreateMovement(WhseWorksheetLine,Item."No.",ItemTrackingMode::" ",FALSE);

      // Verify : UOM conversion on Movement Lines.
      VerifyMovementLine(
        WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",
        ItemUnitOfMeasure.Code,ItemLedgerEntry."Lot No.");
      VerifyMovementLine(
        WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity,Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",
        ItemUnitOfMeasure.Code,ItemLedgerEntry."Lot No.");

      // Tear down.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite2,OldPickAccordingToFEFO,OldPickAccordingToFEFO);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE PutAwayUOMConversionOnBinContentAfterRegisterPutAwayWithItemTracking@24();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseAdjustmentWithPutAwayUOMAfterRegisterPutAway(ItemTrackingCode2.Code,TRUE,FALSE);  // Use Item Tracking as True and Post Warehouse Adjustment as False.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,WhseItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PutAwayUOMConversionOnItemLedgerEntryAfterPostWarehouseAdjustmentWithItemTracking@25();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseAdjustmentWithPutAwayUOMAfterRegisterPutAway(ItemTrackingCode2.Code,TRUE,TRUE);  // Use Item Tracking as True and Post Warehouse Adjustment as True.
    END;

    [Test]
    PROCEDURE PutAwayUOMConversionOnBinContentAfterRegisterPutAway@81();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseAdjustmentWithPutAwayUOMAfterRegisterPutAway('',FALSE,FALSE);  // Use Item Tracking as False and Post Warehouse Adjustment as False.
    END;

    [Test]
    PROCEDURE PutAwayUOMConversionOnItemLedgerEntryAfterPostWarehouseAdjustment@82();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseAdjustmentWithPutAwayUOMAfterRegisterPutAway('',FALSE,TRUE);  // Use Item Tracking as False and Post Warehouse Adjustment as True.
    END;

    LOCAL PROCEDURE PostWarehouseAdjustmentWithPutAwayUOMAfterRegisterPutAway@36(ItemTrackingCode@1010 : Code[10];Tracking@1011 : Boolean;PostWarehouseAdjustment@1009 : Boolean);
    VAR
      Bin@1008 : Record 7354;
      Item@1006 : Record 27;
      ItemUnitOfMeasurePutAway@1005 : Record 5404;
      PurchaseHeader@1004 : Record 38;
      WarehouseActivityLine@1003 : Record 5767;
      RegisteredWhseActivityLine@1002 : Record 5773;
      ItemLedgerEntry@1001 : Record 32;
      TempReservationEntry@1012 : TEMPORARY Record 337;
      Quantity@1000 : Decimal;
    BEGIN
      // Create Item with Strict Expiration Posting Item Tracking Code. Create and Update Put Away UOM. Create and post Warehouse Receipt from Purchase Order.
      CreateItem(Item,ItemTrackingCode);
      CreateItemUnitOfMeasure(ItemUnitOfMeasurePutAway,Item."No.",LibraryRandom.RandInt(5) + 1);  // Value required for multiple UOM with different conversion rate.
      UpdateItemUOM(Item,'','',ItemUnitOfMeasurePutAway.Code);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",Item."Base Unit of Measure",'',LocationWhite3.Code,Quantity,Tracking);  // Use TRUE for with Tracking.
      IF Tracking THEN BEGIN
        CopyReservationEntry(TempReservationEntry,Item."No.");
        TempReservationEntry.FINDFIRST;
      END;
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);

      // Exercise : Register Put-Away.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
      FindRegisteredWhseActivityLine(
        RegisteredWhseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",RegisteredWhseActivityLine."Action Type"::Place);
      Bin.GET(RegisteredWhseActivityLine."Location Code",RegisteredWhseActivityLine."Bin Code");
      IF PostWarehouseAdjustment THEN
        UpdateInventoryUsingWarehouseJournal(
          Bin,Item,ItemUnitOfMeasurePutAway.Code,-Quantity / ItemUnitOfMeasurePutAway."Qty. per Unit of Measure",Tracking,
          ItemTrackingMode::"Select Lot No.",WORKDATE);

      // Verify : Bin Content and Item Ledger Entry for Put Away UOM conversion.
      IF PostWarehouseAdjustment THEN BEGIN
        VerifyItemLedgerEntry(
          ItemLedgerEntry."Entry Type"::Purchase,Item."No.",Item."Base Unit of Measure",LocationWhite3.Code,
          TempReservationEntry."Lot No.",Quantity,0);  // Use 0 for Remaining Quantity.
        VerifyItemLedgerEntry(
          ItemLedgerEntry."Entry Type"::"Negative Adjmt.",Item."No.",ItemUnitOfMeasurePutAway.Code,LocationWhite3.Code,
          TempReservationEntry."Lot No.",-Quantity,0);  // Use 0 for Remaining Quantity.
      END ELSE
        VerifyBinContent(Bin,Item."No.",Quantity / ItemUnitOfMeasurePutAway."Qty. per Unit of Measure",ItemUnitOfMeasurePutAway.Code);
    END;

    [Test]
    PROCEDURE RegisterPutAwayWithMoreThanMaximumQuantity@41();
    VAR
      Bin@1002 : Record 7354;
      BinContent@1010 : Record 7302;
      Item@1000 : Record 27;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      WarehouseActivityLine@1009 : Record 5767;
      ItemVariant@1001 : Record 5401;
      RegisteredWhseActivityLine@1006 : Record 5773;
    BEGIN
      // Setup : Create Bin Content with maximum Quantity. Create and release Purchase Order with Item Variant.
      Initialize;
      CreateItem(Item,'');
      CreateBinWithBinRanking(Bin,LocationWhite.Code,0,TRUE,FALSE,FALSE,FALSE);  // Create RECEIVE Bin Value required for test.
      UpdateReceiptBinOnLocation(LocationWhite,Bin.Code);
      CreateBinContent(BinContent,Bin,Item."No.",Item."Base Unit of Measure",LibraryRandom.RandDec(100,2));
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLineWithUOM(
        PurchaseLine,PurchaseHeader,Item."No.",Item."Base Unit of Measure",LocationWhite.Code,
        BinContent."Max. Qty." + LibraryRandom.RandDec(100,2),FALSE,ItemTrackingMode::"Assign Lot No.");  // Value required for test.
      UpdateItemVariantOnPurchaseLine(PurchaseLine,ItemVariant.Code);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);

      // Exercise : Register Put Away.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Verify.
      VerifyRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Activity Type"::"Put-away",
        RegisteredWhseActivityLine."Action Type"::Take,PurchaseLine.Quantity,PurchaseLine.Quantity,Item."Base Unit of Measure");

      VerifyRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Activity Type"::"Put-away",
        RegisteredWhseActivityLine."Action Type"::Place,PurchaseLine.Quantity,PurchaseLine.Quantity,Item."Base Unit of Measure");
    END;

    [Test]
    PROCEDURE RegisterPutAwayWithBinRanking@38();
    VAR
      Bin@1002 : Record 7354;
      Item@1000 : Record 27;
      PurchaseHeader@1003 : Record 38;
      RegisteredWhseActivityLine@1008 : Record 5773;
      WarehouseActivityLine@1007 : Record 5767;
      WarehouseReceiptHeader@1005 : Record 7316;
      WarehouseSourceFilter@1006 : Record 5771;
      Quantity@1004 : Decimal;
    BEGIN
      // Setup : Create Bin with highest Bin Ranking. Create and post Warehouse Receipt from Purchase Order.
      Initialize;
      CreateItem(Item,'');
      CreateBinWithBinRanking(Bin,LocationWhite.Code,LibraryRandom.RandInt(100) + 200,FALSE,FALSE,TRUE,TRUE);  // Create PICK Bin Value required for test.
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",Item."Base Unit of Measure",'',LocationWhite.Code,Quantity,FALSE);  // Use FALSE for without Tracking.
      CreateWarehouseReceiptHeaderWithLocation(WarehouseReceiptHeader,LocationWhite.Code);
      LibraryWarehouse.GetSourceDocumentsReceipt(WarehouseReceiptHeader,WarehouseSourceFilter,LocationWhite.Code);
      PostWarehouseReceipt(WarehouseReceiptHeader."No.");

      // Exercise : Register Put Away.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Verify : Verify Bin with Bin Ranking.
      FindRegisteredWhseActivityLine(
        RegisteredWhseActivityLine,RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Activity Type"::"Put-away",RegisteredWhseActivityLine."Action Type"::Place);
      RegisteredWhseActivityLine.TESTFIELD("Bin Code",Bin.Code);
    END;

    [Test]
    PROCEDURE MovementWithBlockMovementAsAllOnBinContent@37();
    VAR
      BinContent@1000 : Record 7302;
    BEGIN
      // Setup.
      Initialize;
      MovementWithBlockMovementOnBinContent(BinContent."Block Movement"::All);
    END;

    [Test]
    PROCEDURE MovementWithBlockMovementAsOutboundlOnBinContent@71();
    VAR
      BinContent@1000 : Record 7302;
    BEGIN
      // Setup.
      Initialize;
      MovementWithBlockMovementOnBinContent(BinContent."Block Movement"::Outbound);
    END;

    [Test]
    PROCEDURE MovementWithBlockMovementAsInboundlOnBinContent@73();
    VAR
      BinContent@1000 : Record 7302;
    BEGIN
      // Setup.
      Initialize;
      MovementWithBlockMovementOnBinContent(BinContent."Block Movement"::Inbound);
    END;

    LOCAL PROCEDURE MovementWithBlockMovementOnBinContent@55(BlockMovement@1008 : Option);
    VAR
      Bin@1007 : Record 7354;
      BinContent@1006 : Record 7302;
      Item@1005 : Record 27;
      PurchaseHeader@1004 : Record 38;
      RegisteredWhseActivityLine@1003 : Record 5773;
      WarehouseActivityLine@1002 : Record 5767;
      WhseWorksheetLine@1001 : Record 7326;
      Quantity@1000 : Decimal;
      BackupDefaultLocationCode@1010 : Code[20];
    BEGIN
      // Create and post Warehouse Receipt from Purchase Order. Update Block Movement on Bin Content.
      CreateItem(Item,'');
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",Item."Base Unit of Measure",'',LocationWhite2.Code,Quantity,FALSE);  // Use FALSE for without Tracking.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
      FindRegisteredWhseActivityLine(
        RegisteredWhseActivityLine,RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Activity Type"::"Put-away",RegisteredWhseActivityLine."Action Type"::Place);
      Bin.GET(LocationWhite2.Code,RegisteredWhseActivityLine."Bin Code");
      UpdateBlockMovementOnBinContent(BinContent,Bin,Item."No.",BlockMovement);
      BackupDefaultLocationCode := UpdateDefaultLocationOnWarehouseEmployee(Bin."Location Code"); // Default Location required

      // Exercise : Create Movement from Movement Worksheet Line.
      IF BinContent."Block Movement" = BinContent."Block Movement"::Inbound THEN BEGIN
        CreateMovementWorksheetLine(Bin,Item."No.",Quantity);
        CreateMovement(WhseWorksheetLine,Item."No.",ItemTrackingMode::" ",FALSE);
      END ELSE
        ASSERTERROR CreateMovementWorksheetLine(Bin,Item."No.",Quantity);

      UpdateDefaultLocationOnWarehouseEmployee(BackupDefaultLocationCode); // Restore previous Default Location

      // Verify : Movement Line and error message.
      IF BinContent."Block Movement" = BinContent."Block Movement"::Inbound THEN BEGIN
        VerifyMovementLine(WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,Quantity,Item."Base Unit of Measure",'');
        VerifyMovementLine(WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity,Quantity,Item."Base Unit of Measure",'');
      END ELSE
        Assert.ExpectedError(
          STRSUBSTNO(
            BlockMovementError,BinContent."Block Movement",BinContent."Location Code",BinContent."Bin Code",BinContent."Item No.",
            BinContent."Unit of Measure Code"));
    END;

    [Test]
    PROCEDURE CrossDockBinContentAfterRegisterPutAway@34();
    VAR
      Bin@1004 : Record 7354;
      Item@1000 : Record 27;
      PurchaseHeader@1002 : Record 38;
      WarehouseActivityLine@1003 : Record 5767;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup : Create and release Purchase Order. Create and post Warehouse Receipt. Update Cross Dock Bin on Put Away Line.
      Initialize;
      CreateItem(Item,'');
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",Item."Base Unit of Measure",'',LocationWhite.Code,Quantity,FALSE);  // Use FALSE for without Tracking.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);
      Bin.GET(LocationWhite.Code,LocationWhite."Cross-Dock Bin Code");  // Find Cross Dock Bin.
      UpdateBinOnWarehouseActivityLine(
        Bin,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place);

      // Exercise : Register Put away.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Verify : Cross Dock Bin Content.
      VerifyBinContent(Bin,Item."No.",Quantity,Item."Base Unit of Measure");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,MessageHandler)]
    PROCEDURE UpdateDifferentExpirationDatesOnInventoryPutAwayErrorUsingLotAndSerialItemTracking@70();
    BEGIN
      // Setup.
      Initialize;
      InventoryPickWithLotAndSerialItemTracking(TRUE);  // Use True for error.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,MessageHandler)]
    PROCEDURE PostInventoryPickUsingLotAndSerialItemTracking@69();
    BEGIN
      // Setup.
      Initialize;
      InventoryPickWithLotAndSerialItemTracking(FALSE);
    END;

    [HandlerFunctions(MessageHandler)]
    LOCAL PROCEDURE InventoryPickWithLotAndSerialItemTracking@67(ShowError@1008 : Boolean);
    VAR
      Bin@1007 : Record 7354;
      Item@1006 : Record 27;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      WarehouseActivityHeader@1003 : Record 5766;
      WarehouseActivityLine@1002 : Record 5767;
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      Quantity@1010 : Decimal;
      ExpirationDate@1011 : Date;
    BEGIN
      // Create Item with Serial and Lot Item Tracking. Create Inventory Put Away from Purchase Order.
      CreateItem(Item,ItemTrackingCode3.Code);  // Lot Serial Both.
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      Quantity := LibraryRandom.RandInt(100);  // Value required for test.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLineWithUOM(
        PurchaseLine,PurchaseHeader,Item."No.",Item."Base Unit of Measure",LocationSilver.Code,Quantity,TRUE,
        ItemTrackingMode::"Assign Lot And Serial");
      UpdateBinOnPurchaseLine(PurchaseLine,Bin.Code);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      UpdateExpirationDateOnReservationEntry(Item."No.");
      LibraryVariableStorage.Enqueue(PutAwayCreated);  // Enqueue for MessageHandler.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",TRUE,FALSE,FALSE);
      ExpirationDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);

      // Exercise.
      IF ShowError THEN
        ASSERTERROR UpdateExpirationDateOnInventoryPutAway(WarehouseActivityLine,PurchaseHeader."No.",ExpirationDate)
      ELSE BEGIN
        UpdateExpirationDateOnInventoryPutAway(WarehouseActivityLine,PurchaseHeader."No.",WORKDATE);
        UpdateQuantityToHandleAndPostInventoryActivity(
          WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
          WarehouseActivityLine."Activity Type"::"Invt. Put-away",FALSE);
        LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
        CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",Item."Base Unit of Measure",Bin."Location Code",Quantity,TRUE);  // Use TRUE for with Tracking.
        LibraryVariableStorage.Enqueue(PickCreated);  // Enqueue for MessageHandler.
        LibraryWarehouse.CreateInvtPutPickMovement(
          WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);
        UpdateQuantityToHandleAndPostInventoryActivity(
          WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          WarehouseActivityLine."Activity Type"::"Invt. Pick",FALSE);
      END;

      // Verify : Error message and Posted Inventory Pick Line.
      IF ShowError THEN
        Assert.ExpectedError(
          STRSUBSTNO(ExpirationDateError,ExpirationDate,WarehouseActivityLine."No.",WarehouseActivityLine."Line No."))
      ELSE
        VerifyPostedInventoryPickLine(Bin,SalesHeader."No.",Item."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PostInventoryPutAwayFromProductionOrder@66();
    VAR
      Bin@1004 : Record 7354;
      Bin2@1007 : Record 7354;
      ParentItem@1000 : Record 27;
      ComponentItem@1001 : Record 27;
      RoutingHeader@1002 : Record 99000763;
      ProductionBOMHeader@1003 : Record 99000771;
      ItemJournalLine@1005 : Record 83;
      ProductionOrder@1006 : Record 5405;
      WarehouseActivityLine@1009 : Record 5767;
      ItemLedgerEntry@1010 : Record 32;
      WarehouseEntry@1011 : Record 7312;
      Quantity@1012 : Decimal;
    BEGIN
      // Setup : Create and refresh Released Production Order.
      Initialize;
      CreateItem(ParentItem,'');
      CreateItem(ComponentItem,'');
      CreateAndCertifiyRouting(RoutingHeader);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ComponentItem."No.",ComponentItem."Base Unit of Measure",1,BomLineType::Item);
      UpdateProductionBomAndRoutingOnItem(ParentItem,ProductionBOMHeader."No.",RoutingHeader."No.");
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      Quantity := LibraryRandom.RandInt(100);  // Value required for test.
      CreateAndPostItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",ComponentItem."No.",Quantity,Bin."Location Code",Bin.Code,
        FALSE);
      LibraryWarehouse.CreateBin(Bin2,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      CreateAndRefreshProductionOrder(ProductionOrder,ParentItem."No.",LocationSilver.Code,Bin2.Code,Quantity);

      // Exercise : Change Bin on Production Order Line.
      UpdateBinOnProdOrderLine(ParentItem."No.",Bin.Code);
      LibraryVariableStorage.Enqueue(InboundWarehouseCreated);  // Enqueue for MessageHandler.
      LibraryWarehouse.CreateInboundWhseReqFromProdO(ProductionOrder);
      LibraryVariableStorage.Enqueue(PutAwayCreated);  // Enqueue for MessageHandler.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityLine."Source Document"::"Prod. Output",ProductionOrder."No.",TRUE,FALSE,FALSE);
      UpdateQuantityToHandleAndPostInventoryActivity(
        WarehouseActivityLine."Source Document"::"Prod. Output",ProductionOrder."No.",
        WarehouseActivityLine."Activity Type"::"Invt. Put-away",FALSE);

      // Verify.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Output,ParentItem."No.",ParentItem."Base Unit of Measure",LocationSilver.Code,'',Quantity,
        Quantity);
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::"Positive Adjmt.",ParentItem."No.",ParentItem."Base Unit of Measure",LocationSilver.Code,
        Bin.Code,'',Quantity,Quantity);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler,CubageAndWeightExceedConfirmHandler,MessageHandler)]
    PROCEDURE SplitLotNoUsingWarehouseReclassJournal@61();
    VAR
      Bin@1001 : Record 7354;
      Item@1000 : Record 27;
      ItemLedgerEntry@1003 : Record 32;
      WarehouseEntry@1007 : Record 7312;
      LotNo@1004 : Code[20];
      NewLotNo@1005 : Code[20];
      NewLotNo2@1006 : Code[20];
      Quantity@1008 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      CreateItem(Item,ItemTrackingCode.Code);
      FindBin(Bin,LocationWhite.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
      Quantity := LibraryRandom.RandInt(100);
      UpdateInventoryUsingWarehouseJournal(
        Bin,Item,Item."Base Unit of Measure",Quantity,TRUE,ItemTrackingMode::"Assign Lot No.",WORKDATE);
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::"Positive Adjmt.",Item."No.",Item."Base Unit of Measure");
      LotNo := ItemLedgerEntry."Lot No.";

      // Exercise : Split Item Tracking Line on Warehouse Reclassification Journal.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Split Lot No.");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(LotNo);
      CreateAndRegisterWarehouseReclassJournal(Bin,Item."No.",Quantity,NewLotNo,NewLotNo2);

      // Verify : Warehouse Entry for Split Item Tracking Line.
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::Movement,Item."No.",Item."Base Unit of Measure",LocationWhite.Code,Bin.Code,NewLotNo,
        Quantity / 2,Quantity / 2);
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::Movement,Item."No.",Item."Base Unit of Measure",LocationWhite.Code,Bin.Code,NewLotNo2,
        Quantity / 2,Quantity / 2);

      // Verify : Item Ledger Entry for Split Item Tracking Line.
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Transfer,Item."No.",Item."Base Unit of Measure");
      VerifyItemLedgerEntries(ItemLedgerEntry,LocationWhite.Code,LotNo,-Quantity / 2); // Quantity of LotNo = -Quantity of NewLotNo = -Quantity / 2
      VerifyItemLedgerEntries(ItemLedgerEntry,LocationWhite.Code,NewLotNo,Quantity / 2);
      VerifyItemLedgerEntries(ItemLedgerEntry,LocationWhite.Code,LotNo,-Quantity / 2); // Quantity of LotNo = -Quantity of NewLotNo2 = -Quantity / 2
      VerifyItemLedgerEntries(ItemLedgerEntry,LocationWhite.Code,NewLotNo2,Quantity / 2);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,MessageHandler)]
    PROCEDURE ReservationEntryAfterPostingSalesOrderAndItemJournal@59();
    VAR
      Item@1011 : Record 27;
      SalesHeader@1010 : Record 36;
      SalesLine@1009 : Record 37;
      ItemJournalLine@1008 : Record 83;
      ItemLedgerEntry@1007 : Record 32;
      ReservationEntry@1006 : Record 337;
    BEGIN
      // Setup.
      Initialize;
      CreateItem(Item,ItemTrackingCode.Code);
      LibraryVariableStorage.Enqueue(ChangeAffectExistingEntries);  // Enqueue for MessageHandler.
      UpdateOrderTrackingPolicyAsTrackingOnlyOnItem(Item);
      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,Item."No.",Item."Base Unit of Measure",LocationYellow.Code,LibraryRandom.RandInt(100),FALSE);  // Use FALSE for with Tracking.

      // Exercise.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateAndPostItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",
        SalesLine.Quantity + LibraryRandom.RandInt(100),LocationYellow.Code,'',TRUE);

      // Verify.
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::"Positive Adjmt.",Item."No.",Item."Base Unit of Measure");
      VerifyReservationEntry(
        Item."No.",LocationYellow.Code,ItemLedgerEntry."Lot No.",ReservationEntry."Reservation Status"::Tracking,SalesLine.Quantity);
      VerifyReservationEntry(
        Item."No.",LocationYellow.Code,ItemLedgerEntry."Lot No.",ReservationEntry."Reservation Status"::Surplus,
        ItemJournalLine.Quantity - SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,MessageHandler)]
    PROCEDURE ReservationEntryAfterPostingWarehouseReceiptAndShipmentFromTransferOrder@58();
    VAR
      Item@1011 : Record 27;
      SalesHeader@1010 : Record 36;
      SalesLine@1009 : Record 37;
      ItemJournalLine@1008 : Record 83;
      ItemLedgerEntry@1007 : Record 32;
      ReservationEntry@1006 : Record 337;
      TransferHeader@1005 : Record 5740;
      WarehouseShipmentHeader@1004 : Record 7320;
      WarehouseShipmentLine@1003 : Record 7321;
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      // Setup : Create and release Sales Order. Create and post Item Journal Line. Create and release Transfer Order.
      Initialize;
      CreateItem(Item,ItemTrackingCode.Code);
      LibraryVariableStorage.Enqueue(ChangeAffectExistingEntries);  // Enqueue for MessageHandler.
      UpdateOrderTrackingPolicyAsTrackingOnlyOnItem(Item);
      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,Item."No.",Item."Base Unit of Measure",LocationYellow.Code,LibraryRandom.RandInt(100),FALSE);  // Use FALSE for with Tracking.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateAndPostItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",
        SalesLine.Quantity + LibraryRandom.RandInt(100),LocationYellow.Code,'',TRUE);
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::"Positive Adjmt.",Item."No.",Item."Base Unit of Measure");
      CreateAndReleaseTransferOrder(
        TransferHeader,LocationYellow.Code,LocationGreen.Code,Item."No.",ItemJournalLine.Quantity,Item."Base Unit of Measure");

      // Exercise : Create and post Warehouse Shipment and Receipt from Transfer Order.
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.");
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Outbound Transfer",TransferHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick);
      UpdateLotNoOnWarehouseActivityLine(WarehouseActivityLine,ItemLedgerEntry."Lot No.");
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Outbound Transfer",
        TransferHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);  // Use FALSE for only Shipment.
      CreateAndPostWarehouseReceiptFromTransferOrder(TransferHeader);

      // Verify.
      VerifyReservationEntry(
        Item."No.",LocationGreen.Code,ItemLedgerEntry."Lot No.",ReservationEntry."Reservation Status"::Surplus,
        ItemJournalLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE BinReplenishmentWithPutPickBinType@117();
    BEGIN
      // Setup.
      Initialize;
      MovementAndPickAfterBinReplenishmentWithDifferentBinType(FALSE,TRUE,TRUE,FALSE,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE MovementAfterBinReplenishmentWithPutPickBinTypeUsingLotItemTracking@116();
    BEGIN
      // Setup.
      Initialize;
      MovementAndPickAfterBinReplenishmentWithDifferentBinType(FALSE,TRUE,TRUE,TRUE,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE RegisterMovementAfterBinReplenishmentWithPutPickBinTypeUsingLotItemTracking@114();
    BEGIN
      // Setup.
      Initialize;
      MovementAndPickAfterBinReplenishmentWithDifferentBinType(FALSE,TRUE,TRUE,TRUE,TRUE,FALSE);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE BinReplenishmentWithShipBinType@112();
    BEGIN
      // Setup.
      Initialize;
      MovementAndPickAfterBinReplenishmentWithDifferentBinType(TRUE,FALSE,FALSE,FALSE,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE MovementAfterBinReplenishmentWithShipBinTypeUsingLotItemTracking@109();
    BEGIN
      // Setup.
      Initialize;
      MovementAndPickAfterBinReplenishmentWithDifferentBinType(TRUE,FALSE,FALSE,TRUE,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE RegisterMovementAfterBinReplenishmentWithShipBinTypeUsingLotItemTracking@107();
    BEGIN
      // Setup.
      Initialize;
      MovementAndPickAfterBinReplenishmentWithDifferentBinType(TRUE,FALSE,FALSE,TRUE,TRUE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,WhseItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PickAfterBinReplenishmentWithShipBinTypeUsingLotItemTracking@104();
    BEGIN
      // Setup.
      Initialize;
      MovementAndPickAfterBinReplenishmentWithDifferentBinType(TRUE,FALSE,FALSE,TRUE,TRUE,TRUE);
    END;

    LOCAL PROCEDURE MovementAndPickAfterBinReplenishmentWithDifferentBinType@102(Ship@1016 : Boolean;PutAway@1015 : Boolean;Pick@1014 : Boolean;Movement@1005 : Boolean;RegisterMovement@1006 : Boolean;CreateWarehousePick@1017 : Boolean);
    VAR
      Bin@1001 : Record 7354;
      Bin2@1002 : Record 7354;
      Bin3@1018 : Record 7354;
      BinContent@1004 : Record 7302;
      Item@1000 : Record 27;
      SalesHeader@1019 : Record 36;
      SalesLine@1020 : Record 37;
      WhseWorksheetLine@1007 : Record 7326;
      WarehouseActivityLine@1010 : Record 5767;
      RegisteredWhseActivityLine@1012 : Record 5773;
      LotNo@1008 : Code[20];
      LotNo2@1021 : Code[20];
      Quantity@1013 : Decimal;
    BEGIN
      // Create Item with Lot Item Tracking. Update Inventory on different Zone and Bin.
      CreateItem(Item,ItemTrackingCode.Code);
      CreateBinWithBinRanking(Bin,LocationWhite.Code,LibraryRandom.RandInt(100),FALSE,FALSE,TRUE,FALSE);  // Create BULK Bin Value required for test.
      CreateBinWithBinRanking(Bin2,LocationWhite.Code,Bin."Bin Ranking" + LibraryRandom.RandInt(100),FALSE,Ship,PutAway,Pick);  // Create PICK / SHIP Bin Value required for test.
      Quantity := LibraryRandom.RandInt(100);
      CreateBinContent(BinContent,Bin2,Item."No.",Item."Base Unit of Measure",Quantity + LibraryRandom.RandInt(100));
      UpdateInventoryUsingWarehouseJournal(
        Bin2,Item,Item."Base Unit of Measure",Quantity,TRUE,ItemTrackingMode::"Assign Lot No.",WORKDATE);
      UpdateInventoryUsingWarehouseJournal(
        Bin,Item,Item."Base Unit of Measure",Quantity,TRUE,ItemTrackingMode::"Assign Lot No.",WORKDATE);

      // Exercise.
      CalculateBinReplenishmentOnMovementWorksheet(Item."No.",LocationWhite.Code);

      // Verify.
      VerifyWhseWorksheetLine(WhseWorksheetLine,Item."No.",Quantity,Quantity,Item."Base Unit of Measure");

      IF Movement THEN BEGIN
        // Exercise.
        CreateMovement(WhseWorksheetLine,Item."No.",ItemTrackingMode::"Select Lot No.",TRUE);

        // Verify.
        DequeueLotNo(LotNo);
        VerifyMovementLine(WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,Quantity,Item."Base Unit of Measure",LotNo);
        VerifyMovementLine(WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity,Quantity,Item."Base Unit of Measure",LotNo);
      END;

      IF RegisterMovement THEN BEGIN
        // Exercise.
        RegisterWarehouseMovement(Item."No.",'');

        // Verify.
        VerifyRegisteredMovementLine(Bin,RegisteredWhseActivityLine."Action Type"::Take,Item."No.",Quantity,LotNo);
        VerifyRegisteredMovementLine(Bin2,RegisteredWhseActivityLine."Action Type"::Place,Item."No.",Quantity,LotNo);
      END;

      IF CreateWarehousePick THEN BEGIN
        // Exercise.
        FindBin(Bin3,LocationWhite.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
        CreateWhseWorksheetLine(WhseWorksheetLine,Bin2,Bin3,Item."No.",Quantity * 2);  // Value required for test.
        CreateMovement(WhseWorksheetLine,Item."No.",ItemTrackingMode::"Select Multiple Lot No.",TRUE);
        RegisterWarehouseMovement(Item."No.",WhseWorksheetLine."Worksheet Template Name");
        DequeueLotNo(LotNo);
        DequeueLotNo(LotNo2);
        LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
        CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",Item."Base Unit of Measure",Bin."Location Code",Quantity * 2,TRUE);  // Value required for test.
        CreatePickFromWarehouseShipment(SalesHeader);

        // Verify.
        VerifyPickLine(
          WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take,
          WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",Item."Base Unit of Measure",LotNo,
          Quantity);
        VerifyPickLine(
          WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Place,
          WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",Item."Base Unit of Measure",LotNo,
          Quantity);
        VerifyPickLine(
          WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take,
          WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",Item."Base Unit of Measure",LotNo2,
          Quantity);
        VerifyPickLine(
          WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Place,
          WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",Item."Base Unit of Measure",LotNo2,
          Quantity);
      END;
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE PickFromWarehouseShipmentWithReservation@128();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      SalesHeader@1002 : Record 36;
      WarehouseActivityLine@1004 : Record 5767;
      Quantity@1006 : Decimal;
      Quantity2@1007 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      CreateItem(Item,'');
      Quantity := LibraryRandom.RandInt(100);
      Quantity2 := Quantity + LibraryRandom.RandInt(100);  // Value required for test.
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",Item."Base Unit of Measure",'',LocationWhite3.Code,Quantity2,FALSE);
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
      CreatePickFromWarehouseShipmentWithReservation(SalesHeader,Item,LocationWhite3.Code,Quantity);
      UpdateQuantityToHandleOnWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",
        SalesHeader."No.",Quantity / 2);  // Value required for test.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
      DeleteWarehouseActivity(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");

      // Exercise.
      CreatePickFromWarehouseShipmentWithReservation(
        SalesHeader,Item,LocationWhite3.Code,Quantity2 - Quantity + LibraryRandom.RandInt(100));  // Value required for test.

      // Verify.
      VerifyPickLine(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take,
        WarehouseActivityLine."Source Document"::"Sales Order",
        SalesHeader."No.",Item."No.",Item."Base Unit of Measure",'',Quantity2 - Quantity);  // Value required for test.
      VerifyPickLine(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Place,
        WarehouseActivityLine."Source Document"::"Sales Order",
        SalesHeader."No.",Item."No.",Item."Base Unit of Measure",'',Quantity2 - Quantity);  // Value required for test.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,MessageHandler)]
    PROCEDURE InventoryPickWithReservation@126();
    VAR
      Bin@1003 : Record 7354;
      Item@1000 : Record 27;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      SalesHeader@1008 : Record 36;
      WarehouseActivityHeader@1006 : Record 5766;
      WarehouseActivityLine@1007 : Record 5767;
      Quantity@1001 : Decimal;
      Quantity2@1002 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      CreateItem(Item,'');
      Quantity := LibraryRandom.RandInt(100);
      Quantity2 := Quantity + LibraryRandom.RandInt(100);  // Value required for test.
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLineWithUOM(
        PurchaseLine,PurchaseHeader,Item."No.",Item."Base Unit of Measure",LocationSilver.Code,Quantity2,FALSE,ItemTrackingMode::" ");
      UpdateBinOnPurchaseLine(PurchaseLine,Bin.Code);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryVariableStorage.Enqueue(PutAwayCreated);  // Enqueue for MessageHandler.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Purchase Order",PurchaseHeader."No.",TRUE,FALSE,FALSE);
      UpdateQuantityToHandleAndPostInventoryActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Invt. Put-away",FALSE);
      CreateInventoryPickWithReservation(SalesHeader,Item,LocationSilver.Code,Quantity);
      UpdateQuantityToHandleAndPostInventoryActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::"Invt. Pick",
        TRUE);  // Value required for test.
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::"Invt. Pick");
      DeleteWarehouseActivity(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");

      // Exercise.
      CreateInventoryPickWithReservation(
        SalesHeader,Item,LocationSilver.Code,Quantity2 - Quantity + LibraryRandom.RandInt(100));  // Value required for test.

      // Verify.
      VerifyPickLine(
        WarehouseActivityLine."Activity Type"::"Invt. Pick",WarehouseActivityLine."Action Type"::Take,
        WarehouseActivityLine."Source Document"::"Sales Order",
        SalesHeader."No.",Item."No.",Item."Base Unit of Measure",'',Quantity2 - Quantity);  // Value required for test.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ReservationPageHandler)]
    PROCEDURE PickFromWarehouseShipmentWithReservationUsingLotItemTracking@125();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      SalesHeader@1002 : Record 36;
      WarehouseActivityLine@1003 : Record 5767;
      Quantity@1004 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      CreateItem(Item,ItemTrackingCode.Code);
      Quantity := LibraryRandom.RandInt(100);
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",Item."Base Unit of Measure",Item."Base Unit of Measure",LocationWhite3.Code,Quantity,TRUE);
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
      CreateAndReleaseSalesOrderWithReservation(SalesHeader,Item,LocationWhite3.Code,Quantity);

      // Exercise.
      CreatePickFromWarehouseShipmentWithReservation(SalesHeader,Item,LocationWhite3.Code,Quantity);

      // Verify.
      VerifyPickLine(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take,
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",Item."Base Unit of Measure",'',Quantity);
      VerifyPickLine(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Place,
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",Item."Base Unit of Measure",'',Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PutAwayUOMConversionOnPickLine@150();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasurePutAway@1001 : Record 5404;
      PurchaseHeader@1003 : Record 38;
      SalesLine@1008 : Record 37;
      WarehouseActivityLine@1005 : Record 5767;
      RegisteredWhseActivityLine@1004 : Record 5773;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup : Create Item with Lot Item Tracking Code. Create and Update Put Away UOM. Create and post Warehouse Receipt from Purchase Order.
      Initialize;
      CreateItem(Item,ItemTrackingCode.Code);
      CreateItemUnitOfMeasure(ItemUnitOfMeasurePutAway,Item."No.",LibraryRandom.RandInt(5) + 1);  // Value required for multiple UOM with different conversion rate.
      UpdateItemUOM(Item,'','',ItemUnitOfMeasurePutAway.Code);
      Quantity := LibraryRandom.RandInt(100);  // Value required for test.
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",Item."Base Unit of Measure",'',LocationWhite3.Code,Quantity,TRUE);  // Use TRUE for with Tracking.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Exercise : Create and post Warehouse Shipment From Sales Order.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateAndPostWarehouseShipmentFromSalesOrder(SalesLine,Item."No.",Item."Base Unit of Measure",LocationWhite3.Code,Quantity,TRUE);  // Use True for with Item Tracking.

      // Verify : Verify Put Away UOM Conversion on Registered Warehouse Lines.
      VerifyRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesLine."Document No.",
        RegisteredWhseActivityLine."Activity Type"::Pick,
        RegisteredWhseActivityLine."Action Type"::Take,Quantity / ItemUnitOfMeasurePutAway."Qty. per Unit of Measure",Quantity,
        ItemUnitOfMeasurePutAway.Code);  // Value required for test.
      VerifyRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesLine."Document No.",
        RegisteredWhseActivityLine."Activity Type"::Pick,RegisteredWhseActivityLine."Action Type"::Place,Quantity,Quantity,
        Item."Base Unit of Measure");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,MessageHandler)]
    PROCEDURE PickFromWarehouseShipmentAfterPostingOutputFromProductionOrderUsingSerialItemTracking@148();
    BEGIN
      // Setup.
      Initialize;
      RegisterPickAndPostWarehouseShipmentAfterPostingOutputFromProductionOrderUsingSerialItemTracking(FALSE,FALSE);  // Use Register Pick as FALSE and Post Warehouse Shipment as FALSE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,MessageHandler)]
    PROCEDURE RegisterPickFromWarehouseShipmentAfterPostingOutputFromProductionOrderUsingSerialItemTracking@147();
    BEGIN
      // Setup.
      Initialize;
      RegisterPickAndPostWarehouseShipmentAfterPostingOutputFromProductionOrderUsingSerialItemTracking(TRUE,FALSE);  // Use Register Pick as TRUE and Post Warehouse Shipment as FALSE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,MessageHandler)]
    PROCEDURE PostWarehouseShipmentAfterPostingOutputFromProductionOrderUsingSerialItemTracking@145();
    BEGIN
      // Setup.
      Initialize;
      RegisterPickAndPostWarehouseShipmentAfterPostingOutputFromProductionOrderUsingSerialItemTracking(TRUE,TRUE);  // Use Register Pick as TRUE and Post Warehouse Shipment as TRUE.
    END;

    LOCAL PROCEDURE RegisterPickAndPostWarehouseShipmentAfterPostingOutputFromProductionOrderUsingSerialItemTracking@144(RegisterPick@1013 : Boolean;PostWarehouseShipment@1014 : Boolean);
    VAR
      Bin@1012 : Record 7354;
      Item@1011 : Record 27;
      ItemJournalLine@1010 : Record 83;
      ProductionOrder@1009 : Record 5405;
      ProdOrderLine@1008 : Record 5406;
      SalesHeader@1007 : Record 36;
      SalesLine@1006 : Record 37;
      WarehouseActivityLine@1005 : Record 5767;
      WarehouseShipmentHeader@1004 : Record 7320;
      WarehouseShipmentLine@1003 : Record 7321;
      OrderType@1002 : 'ItemOrder,ProjectOrder';
      Quantity@1001 : Decimal;
      Quantity2@1000 : Decimal;
      OldAlwaysCreatePickLine@1015 : Boolean;
    BEGIN
      // Create Item with Serial Item Tracking. Create Warehouse Shipment from Sales Order. Create Production Order from Sales Order. Create and Post Output for Production Order.
      CreateItem(Item,ItemTrackingCode4.Code);
      UpdateAlwaysCreatePickLineOnLocation(LocationWhite3,OldAlwaysCreatePickLine,TRUE);
      Quantity := LibraryRandom.RandInt(5);
      Quantity2 := Quantity + LibraryRandom.RandInt(5);  // Value required for test.
      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,Item."No.",Item."Base Unit of Measure",LocationWhite3.Code,Quantity + Quantity2,FALSE);  // Value required for test.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      LibraryVariableStorage.Enqueue(ProductionOrderCreated);  // Enqueue for MessageHandler.
      LibraryManufacturing.CreateProductionOrderFromSalesOrder(SalesHeader,ProductionOrder.Status::Released,OrderType::ItemOrder);
      FindProductionOrderLine(ProdOrderLine,Item."No.");
      CreateAndPostOutputJournalLineWithItemTracking(ItemJournalLine,ProdOrderLine,Quantity);
      CreateAndPostOutputJournalLineWithItemTracking(ItemJournalLine,ProdOrderLine,Quantity2);

      // Exercise.
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // Verify.
      VerifyPickLines(WarehouseActivityLine."Action Type"::Take,SalesHeader."No.",Item."No.");
      VerifyPickLines(WarehouseActivityLine."Action Type"::Place,SalesHeader."No.",Item."No.");

      IF RegisterPick THEN BEGIN
        // Exercise.
        Bin.GET(LocationWhite3.Code,LocationWhite3."To-Production Bin Code");
        UpdateBinOnWarehouseActivityLine(
          Bin,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick,
          WarehouseActivityLine."Action Type"::Take);
        RegisterWarehouseActivity(
          WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

        // Verify.
        VerifyRegisteredPickLines(WarehouseActivityLine."Action Type"::Take,SalesHeader."No.",Item."No.");
        VerifyRegisteredPickLines(WarehouseActivityLine."Action Type"::Place,SalesHeader."No.",Item."No.");
      END;

      IF PostWarehouseShipment THEN BEGIN
        // Exercise.
        LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);  // Use FALSE for only Shipment.

        // Verify.
        VerifyPostedWarehouseShipmentLine(SalesHeader."No.",Item."No.",Quantity + Quantity2);  // Value required for test.
      END;

      // Tear down.
      UpdateAlwaysCreatePickLineOnLocation(LocationWhite3,OldAlwaysCreatePickLine,OldAlwaysCreatePickLine);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,WhseItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,ReservationPageHandler,CubageAndWeightExceedConfirmHandler,ItemTrackingListPageHandler,MessageHandler)]
    PROCEDURE InventoryPickFromProductionOrderAfterReserveProductionComponent@143();
    VAR
      Bin@1003 : Record 7354;
      Bin2@1008 : Record 7354;
      ComponentItem@1001 : Record 27;
      ItemJournalLine@1011 : Record 83;
      ItemLedgerEntry@1005 : Record 32;
      ParentItem@1000 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
      ProductionOrder@1006 : Record 5405;
      ReservationEntry@1009 : Record 337;
      WarehouseActivityLine@1010 : Record 5767;
      Quantity@1004 : Decimal;
    BEGIN
      // Setup : Create Parent Item and Component Item with Lot Item Tracking. Update Inventory of Component Item on different Location. Create and refresh Production Order. Reserve Production Order Component.
      Initialize;
      CreateItem(ParentItem,'');
      CreateItem(ComponentItem,ItemTrackingCode.Code);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ComponentItem."No.",ComponentItem."Base Unit of Measure",1,BomLineType::Item);
      UpdateProductionBomAndRoutingOnItem(ParentItem,ProductionBOMHeader."No.",'');
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      Quantity := LibraryRandom.RandInt(100);  // Value required for test.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateAndPostItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",ComponentItem."No.",Quantity,Bin."Location Code",Bin.Code,
        TRUE);
      Bin2.GET(LocationWhite3.Code,LocationWhite3."To-Production Bin Code");
      UpdateInventoryUsingWarehouseJournal(
        Bin2,ComponentItem,ComponentItem."Base Unit of Measure",Quantity,TRUE,ItemTrackingMode::"Assign Lot No.",WORKDATE);
      CreateAndRefreshProductionOrder(ProductionOrder,ParentItem."No.",LocationSilver.Code,Bin.Code,Quantity);
      ReserveProductionOrderComponent(ComponentItem."No.");

      // Exercise.
      LibraryVariableStorage.Enqueue(PickCreated);  // Enqueue for MessageHandler.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,TRUE,FALSE);

      // Verify.
      FindItemLedgerEntry(
        ItemLedgerEntry,ItemLedgerEntry."Entry Type"::"Positive Adjmt.",ComponentItem."No.",ComponentItem."Base Unit of Measure");
      VerifyPickLine(
        WarehouseActivityLine."Activity Type"::"Invt. Pick",WarehouseActivityLine."Action Type"::Take,
        WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",ComponentItem."No.",
        ComponentItem."Base Unit of Measure",ItemLedgerEntry."Lot No.",Quantity);
      VerifyReservationEntry(
        ComponentItem."No.",LocationSilver.Code,ItemLedgerEntry."Lot No.",ReservationEntry."Reservation Status"::Reservation,
        -Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostWarehouseShipmentWithDifferentPickCreatedByWarehouseShipmentAndPickWorksheetUsingLotItemTracking@142();
    BEGIN
      // Setup.
      Initialize;
      WarehouseShipmentWithDifferentPicksUsingLotItemTracking(TRUE);  // Use Pick Worksheet as TRUE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ReservationEntryAfterPostingPartialWarehouseShipmentWithPartialPickUsingLotItemTracking@139();
    BEGIN
      // Setup.
      Initialize;
      WarehouseShipmentWithDifferentPicksUsingLotItemTracking(FALSE);  // Use Pick Worksheet as FALSE.
    END;

    LOCAL PROCEDURE WarehouseShipmentWithDifferentPicksUsingLotItemTracking@137(WithPickWorksheet@1012 : Boolean);
    VAR
      Item@1011 : Record 27;
      ItemLedgerEntry@1010 : Record 32;
      PurchaseHeader@1009 : Record 38;
      ReservationEntry@1008 : Record 337;
      SalesHeader@1007 : Record 36;
      SalesLine@1006 : Record 37;
      WarehouseActivityLine@1005 : Record 5767;
      WarehouseShipmentLine@1003 : Record 7321;
      Quantity@1001 : Decimal;
      Quantity2@1000 : Decimal;
    BEGIN
      // Create Item with Lot Item Tracking. Create and post Warehouse Receipt from Purchase Order. Create Pick from Warehouse Shipment. Register partial Pick.
      CreateItem(Item,ItemTrackingCode.Code);
      Quantity := LibraryRandom.RandInt(100);
      Quantity2 := Quantity + LibraryRandom.RandInt(100);  // Value required for test.
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",Item."Base Unit of Measure",'',LocationWhite3.Code,Quantity + Quantity2,TRUE);  // Value required for test.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,Item."No.",Item."Base Unit of Measure",LocationWhite3.Code,Quantity + Quantity2,TRUE);  // Value required for test.
      CreatePickFromWarehouseShipment(SalesHeader);
      UpdateQuantityToHandleOnWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",Quantity);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      IF WithPickWorksheet THEN BEGIN
        // Exercise : Delete remaining Pick. Create and register Pick for remaining Quantity from Pick Worksheet. Post Warehouse Shipment.
        DeleteWarehouseActivity(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
        GetWarehouseDocumentOnPickWorksheet(Item."No.",LocationWhite3.Code,FALSE);
        RegisterWarehouseActivity(
          WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
        FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
        PostWarehouseShipment(WarehouseShipmentLine."No.");

        // Verify.
        VerifyPostedWarehouseShipmentLine(SalesHeader."No.",Item."No.",Quantity + Quantity2);  // Value required for test.
      END ELSE BEGIN
        // Exercise : Update Quantity To Ship on Warehouse Shipment Line and post Warehouse Shipment.
        FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
        UpdateQuantityToShipOnWarehouseShipmentLine(WarehouseShipmentLine,Quantity / 2);  // Value required for test.
        PostWarehouseShipment(WarehouseShipmentLine."No.");

        // Verify.
        FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Purchase,Item."No.",Item."Base Unit of Measure");
        VerifyReservationEntry(
          Item."No.",LocationWhite3.Code,ItemLedgerEntry."Lot No.",ReservationEntry."Reservation Status"::Surplus,
          -(Quantity + Quantity2 - Quantity / 2));  // Value required for test.
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,ReservationPageHandler,ItemTrackingListPageHandler,MenuHandler,CubageAndWeightExceedConfirmHandler)]
    PROCEDURE PickFromWarehouseShipmentAfterPostingTransferOrderUsingLotItemTracking@166();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchaseHeader2@1007 : Record 38;
      SalesHeader@1002 : Record 36;
      TransferHeader@1004 : Record 5740;
      WarehouseActivityLine@1008 : Record 5767;
      WarehouseShipmentHeader@1009 : Record 7320;
      WarehouseShipmentLine@1010 : Record 7321;
      Quantity@1011 : Decimal;
      Quantity2@1012 : Decimal;
    BEGIN
      // Setup : Create Item with Lot Item Tracking. Create and post Purchase Order on Location Blue. Create and release Sales Order on Location White. Create Warehouse Shipment.
      // Create and post Transfer Order from Location Blue to Location White. Create and post Warehouse Receipt on Location Blue.
      Initialize;
      CreateItem(Item,ItemTrackingCode.Code);
      Quantity := LibraryRandom.RandInt(10);
      Quantity2 := Quantity + LibraryRandom.RandInt(10);  // Value required for test.
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",Item."Base Unit of Measure",'',LocationBlue.Code,Quantity,TRUE);  // Use True for Item Tracking.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Post as Receive.
      CreateAndReleaseSalesOrderWithShipmentDate(SalesHeader,Item,LocationWhite3.Code,Quantity + Quantity2);  // Value required for test.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      CreateAndReleaseTransferOrder(
        TransferHeader,LocationBlue.Code,LocationWhite3.Code,Item."No.",Quantity,Item."Base Unit of Measure");
      ReserveQuantityAndPostTransferOrder(TransferHeader);
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader2,Item."No.",Item."Base Unit of Measure",'',LocationWhite3.Code,Quantity2,TRUE);  // Use True for Item Tracking.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader2);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader2."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Exercise.
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // Verify : Pick is created only for available Quantity.
      VerifyPickLine(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take,
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",Item."Base Unit of Measure",'',Quantity2);
      VerifyPickLine(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Place,
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",Item."Base Unit of Measure",'',Quantity2);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE PickFromWarehouseShipmentOnlyForNonExpiredQuantity@165();
    VAR
      Bin@1001 : Record 7354;
      Item@1000 : Record 27;
      ItemLedgerEntry@1008 : Record 32;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      WarehouseActivityLine@1005 : Record 5767;
      Quantity@1006 : Decimal;
      Quantity2@1007 : Decimal;
      OldPickAccordingToFEFO@1009 : Boolean;
    BEGIN
      // Setup : Update Pick According to FEFO on Location. Create Item and update Inventory with Strict Expiration Posting Item Tracking Code. Create and release Sales Order.
      Initialize;
      UpdatePickAccordingToFEFOOnLocation(LocationWhite3,OldPickAccordingToFEFO,TRUE);
      CreateItem(Item,ItemTrackingCode2.Code);
      FindBin(Bin,LocationWhite3.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
      Quantity := LibraryRandom.RandInt(10);
      Quantity2 := Quantity + LibraryRandom.RandInt(10);  // Value required for test.
      UpdateInventoryUsingWarehouseJournal(
        Bin,Item,Item."Base Unit of Measure",Quantity,TRUE,ItemTrackingMode::"Assign Lot No.",
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE));  // Value required for test.
      UpdateInventoryUsingWarehouseJournal(
        Bin,Item,Item."Base Unit of Measure",Quantity2,TRUE,ItemTrackingMode::"Assign Lot No.",
        CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE));  // Value required for test.
      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,Item."No.",Item."Base Unit of Measure",Bin."Location Code",Quantity + Quantity2,FALSE);  // Value required for test.

      // Exercise.
      CreatePickFromWarehouseShipment(SalesHeader);

      // Verify : Pick is created only for Non Expired Quantity.
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::"Positive Adjmt.",Item."No.",Item."Base Unit of Measure");
      VerifyPickLine(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take,
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",Item."Base Unit of Measure",
        ItemLedgerEntry."Lot No.",Quantity);
      VerifyPickLine(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Place,
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",Item."Base Unit of Measure",
        ItemLedgerEntry."Lot No.",Quantity);

      // Tear down.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite3,OldPickAccordingToFEFO,OldPickAccordingToFEFO);
    END;

    [Test]
    PROCEDURE PickFromCombineWarehouseShipmentForSalesOrderWithDifferentUOM@164();
    VAR
      Bin@1001 : Record 7354;
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1004 : Record 5404;
      SalesHeader@1005 : Record 36;
      SalesHeader2@1007 : Record 36;
      SalesLine@1006 : Record 37;
      WarehouseActivityLine@1010 : Record 5767;
      WarehouseShipmentHeader@1008 : Record 7320;
      Quantity@1002 : Decimal;
      Quantity2@1011 : Decimal;
    BEGIN
      // Setup : Create Item with multiple UOM. Create a combine Warehouse Shipment for two Sales Order with different UOM.
      Initialize;
      CreateItem(Item,'');
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(5) + 1);  // Value required for multiple UOM with different conversion rate.
      FindBin(Bin,LocationWhite3.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
      Quantity := LibraryRandom.RandInt(10);
      Quantity2 := Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure";  // Value required for test.
      UpdateInventoryUsingWarehouseJournal(Bin,Item,Item."Base Unit of Measure",Quantity2,FALSE,ItemTrackingMode::" ",WORKDATE);  // Value required for test.
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",Item."Base Unit of Measure",Bin."Location Code",Quantity,FALSE);
      CreateAndReleaseSalesOrder(SalesHeader2,SalesLine,Item."No.",ItemUnitOfMeasure.Code,Bin."Location Code",Quantity,FALSE);
      CreateWarehouseShipmentWithGetSourceDocument(WarehouseShipmentHeader,Item."No.",Bin."Location Code");

      // Exercise.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify.
      VerifyPickLine(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take,
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",Item."Base Unit of Measure",'',Quantity);
      VerifyPickLine(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Place,
        WarehouseActivityLine."Source Document"::"Sales Order",
        SalesHeader2."No.",Item."No.",ItemUnitOfMeasure.Code,'',(Quantity2 - Quantity) / ItemUnitOfMeasure."Qty. per Unit of Measure");  // Value required for test.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,ItemTrackingLinesPageHandler)]
    PROCEDURE PickFromWarehouseShipmentWithQuantityAvailableOnDifferentBinUsingLotItemTracking@163();
    VAR
      Bin@1001 : Record 7354;
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1005 : Record 5404;
      RegisteredWhseActivityLine@1008 : Record 5773;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      WarehouseActivityLine@1006 : Record 5767;
      Quantity@1007 : Decimal;
    BEGIN
      // Setup : Create Item with Lot Item Tracking. Update Inventory on different Bin. Create and release Sales Order. Create Pick from Warehouse Shipment.
      Initialize;
      CreateItem(Item,ItemTrackingCode.Code);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(10) + 1);  // Value required for multiple UOM with different conversion rate.
      Quantity := ItemUnitOfMeasure."Qty. per Unit of Measure" * ItemUnitOfMeasure."Qty. per Unit of Measure";  // Value required for test.
      FindBin(Bin,LocationWhite3.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
      UpdateInventoryUsingWarehouseJournal(
        Bin,Item,Item."Base Unit of Measure",Quantity / 2,TRUE,ItemTrackingMode::"Assign Lot No.",WORKDATE);  // Value required for test.
      Bin.NEXT;  // Find Next PICK Bin.
      UpdateInventoryUsingWarehouseJournal(
        Bin,Item,Item."Base Unit of Measure",Quantity / 2,TRUE,ItemTrackingMode::"Assign Lot No.",WORKDATE);  // Value required for test.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,Item."No.",ItemUnitOfMeasure.Code,Bin."Location Code",ItemUnitOfMeasure."Qty. per Unit of Measure",TRUE);
      CreatePickFromWarehouseShipment(SalesHeader);

      // Exercise.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // Verify.
      VerifyRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",RegisteredWhseActivityLine."Activity Type"::Pick,
        RegisteredWhseActivityLine."Action Type"::Take,Quantity / 2,Quantity / 2,Item."Base Unit of Measure");  // Value required for test.
      VerifyRegisteredWhseActivityLine(
        RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",RegisteredWhseActivityLine."Activity Type"::Pick,
        RegisteredWhseActivityLine."Action Type"::Place,SalesLine.Quantity / 2,SalesLine."Quantity (Base)" / 2,ItemUnitOfMeasure.Code);  // Value required for test.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,ItemTrackingLinesPageHandler)]
    PROCEDURE PickFromWarehouseShipmentWithExpirationCalculationOnItem@162();
    VAR
      Bin@1006 : Record 7354;
      Item@1005 : Record 27;
      ItemLedgerEntry@1007 : Record 32;
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      WarehouseActivityLine@1001 : Record 5767;
      Quantity@1004 : Decimal;
      OldPickAccordingToFEFO@1008 : Boolean;
    BEGIN
      // Setup : Update Pick According to FEFO on Location. Create Item. Update Expiration Calculation on Item. Create and release Sales Order.
      Initialize;
      UpdatePickAccordingToFEFOOnLocation(LocationWhite3,OldPickAccordingToFEFO,TRUE);
      CreateItem(Item,ItemTrackingCode.Code);
      UpdateExpirationCalculationOnItem(Item);
      FindBin(Bin,LocationWhite3.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
      Quantity := LibraryRandom.RandInt(10);
      UpdateInventoryUsingWarehouseJournal(Bin,Item,Item."Base Unit of Measure",Quantity,TRUE,ItemTrackingMode::"Assign Lot No.",0D);  // Value required for test.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,Item."No.",Item."Base Unit of Measure",Bin."Location Code",
        Quantity + LibraryRandom.RandInt(10),TRUE);  // Value required for test.

      // Exercise.
      CreatePickFromWarehouseShipment(SalesHeader);

      // Verify : Verify Expiration Date on Item Ledger Entry and related Pick lines.
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::"Positive Adjmt.",Item."No.",Item."Base Unit of Measure");
      ItemLedgerEntry.TESTFIELD("Expiration Date",CALCDATE(Item."Expiration Calculation",WORKDATE));
      VerifyPickLine(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take,
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",Item."Base Unit of Measure",
        ItemLedgerEntry."Lot No.",Quantity);
      VerifyPickLine(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Place,
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",Item."Base Unit of Measure",
        ItemLedgerEntry."Lot No.",Quantity);

      // Tear down.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite3,OldPickAccordingToFEFO,OldPickAccordingToFEFO);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE PickFromWarehouseShipmentWithQuantityAvailableOnBlockedBinContent@174();
    VAR
      Bin@1007 : Record 7354;
      BinContent@1006 : Record 7302;
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      RegisteredWhseActivityLine@1008 : Record 5773;
      SalesHeader@1004 : Record 36;
      WarehouseActivityLine@1003 : Record 5767;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup : Create Item. Create and post Warehouse Receipt from Purchase Order. Block Outbound movement on Bin Content.
      Initialize;
      CreateItem(Item,'');
      Quantity := LibraryRandom.RandInt(100);
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",Item."Base Unit of Measure",'',LocationWhite3.Code,Quantity,FALSE);  // Use FALSE for without Tracking.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
      FindRegisteredWhseActivityLine(
        RegisteredWhseActivityLine,RegisteredWhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        RegisteredWhseActivityLine."Activity Type"::"Put-away",RegisteredWhseActivityLine."Action Type"::Place);
      Bin.GET(LocationWhite3.Code,RegisteredWhseActivityLine."Bin Code");
      UpdateBlockMovementOnBinContent(BinContent,Bin,Item."No.",BinContent."Block Movement"::Outbound);

      // Exercise.
      ASSERTERROR CreatePickFromWarehouseShipmentWithReservation(SalesHeader,Item,LocationWhite3.Code,Quantity);

      // Verify : Verify Nothing to handle error message.
      Assert.ExpectedError(NothingToHandle);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ProductionJournalHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE RegisterPickFromWarehouseShipmentCreatedBeforeMoveSerialTrackedItemFromProdcutionBinToPickBin@178();
    VAR
      SalesHeaderNo@1000 : Code[20];
    BEGIN
      Initialize;
      RegisterPickFromWarehouseShipmentCreatedBeforeMoveItemFromProdcutionBinToPickBin(
        SalesHeaderNo,ItemTrackingMode::"Assign Serial No.",ItemTrackingCode4.Code,TRUE,FALSE); // Use Serial Item Tracking.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ProductionJournalHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE RegisterPickFromWarehouseShipmentCreatedBeforeMoveLotTrackedItemFromProdcutionBinToPickBin@187();
    VAR
      SalesHeaderNo@1001 : Code[20];
    BEGIN
      Initialize;
      RegisterPickFromWarehouseShipmentCreatedBeforeMoveItemFromProdcutionBinToPickBin(
        SalesHeaderNo,ItemTrackingMode::"Assign Lot No.",ItemTrackingCode.Code,FALSE,TRUE); // Use Lot Item Tracking.
    END;

    LOCAL PROCEDURE RegisterPickFromWarehouseShipmentCreatedBeforeMoveItemFromProdcutionBinToPickBin@186(VAR SalesHeaderNo@1012 : Code[20];ItemTrackingModePar@1000 : Option;ItemTrackingCode@1003 : Code[10];Serial@1001 : Boolean;Lot@1002 : Boolean);
    VAR
      ComponentItem@1010 : Record 27;
      ParentItem@1009 : Record 27;
      ItemLedgerEntry@1008 : Record 32;
      PurchaseHeader@1006 : Record 38;
      SalesHeader@1005 : Record 36;
      SalesLine@1004 : Record 37;
    BEGIN
      // Setup : Create BOM with Item Tracking.
      CreateItemWithProductionBOMWithItemTracking(ParentItem,ComponentItem,ItemTrackingCode);

      // Exercise: Create Purchase Order for Child Item with Item Tracking.
      // Create and post Warehouse Receipt. Create and Register Put-Away.
      CreateAndRegisterPutAwayFromPurchaseOrder(
        PurchaseHeader,LocationWhite,ComponentItem."No.",ItemTrackingModePar,LibraryRandom.RandInt(5));

      // Create Sales Order for Parent Item with Item Tracking.
      CreateAndReleaseSalesOrderWithItemTracking(SalesHeader,SalesLine,ParentItem."No.",
        LocationWhite.Code,1,TRUE,ItemTrackingModePar); // 1 is used to avoid complexity when update Serial/Lot No. for registering pick.

      // Create Whse. Shipment from Sales Order.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // Create Prod. Order from Sales Order. Create Pick from Prod. Order. Register Pick. Post Production Journal.
      FindItemLedgerEntry(
        ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Purchase,ComponentItem."No.",ComponentItem."Base Unit of Measure");
      CreateAndRegisterPickFromProductionOrder(SalesHeader,ItemLedgerEntry,ParentItem."No.",Serial,Lot);

      // Move ParentItem From Production Bin to Pick Bin with Item Tracking.
      CreateAndRegisterWarehouseMovement(LocationWhite.Code,ParentItem."No.");

      // Verify: It is able to create and register Pick from previous Warehouse Shipment.
      CreateAndRegisterPickFromWarehouseShipment(SalesHeader);
      SalesHeaderNo := SalesHeader."No.";
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostPartialWarehouseShipmentWithPartialPickFromTransferOrderUsingLotItemTracking@197();
    VAR
      ItemTracking@1000 : ' ,Lot,Serial';
    BEGIN
      // For Lot, the Qty is important to trigger the issue, here I use hardcode 5.
      Initialize;
      PostPartialWarehouseShipmentWithPartialPickFromTransferOrderUsingItemTracking(
        ItemTrackingMode::"Assign Lot No.",ItemTrackingCode.Code,5,ItemTracking::Lot); // Use Lot Item Tracking.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostPartialWarehouseShipmentWithPartialPickFromTransferOrderUsingSerialItemTracking@199();
    VAR
      ItemTracking@1000 : ' ,Lot,Serial';
    BEGIN
      // For Serial, it triggers issue first time with partial pick, 2 is ok for test and avoid complexity.
      Initialize;
      PostPartialWarehouseShipmentWithPartialPickFromTransferOrderUsingItemTracking(
        ItemTrackingMode::"Assign Serial No.",ItemTrackingCode4.Code,2,ItemTracking::Serial); // Use Serial Item Tracking.
    END;

    LOCAL PROCEDURE PostPartialWarehouseShipmentWithPartialPickFromTransferOrderUsingItemTracking@201(ItemTrackingModePar@1003 : Option;ItemTrackingCode@1006 : Code[10];Qty@1007 : Decimal;ItemTracking@1002 : ' ,Lot,Serial');
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      TransferHeader@1004 : Record 5740;
      WarehouseShipmentHeader@1009 : Record 7320;
      WarehouseShipmentLine@1008 : Record 7321;
    BEGIN
      // Setup : Create Item with Item Tracking. Create and post Warehouse Receipt. Create and Register Put-Away.
      CreateItem(Item,ItemTrackingCode);
      CreateAndRegisterPutAwayFromPurchaseOrder(PurchaseHeader,LocationWhite,Item."No.",ItemTrackingModePar,Qty);

      // Create and release Transfer Order from Location White to Location Blue with item tracking.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries"); // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      CreateAndReleaseTransferOrderWithItemTracking(
        TransferHeader,LocationWhite.Code,LocationBlue.Code,Item."No.",Qty,TRUE);

      // Exercise : Create Warehouse Shipment from Transfer Order, create Pick from Warehouse Shipment.
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.");

      // Verify : Verify Warehouse Shipment can be posted for partial registered Pick with item tracking.
      CASE ItemTracking OF
        ItemTracking::Lot:
          UpdateQtyToHandleAndPostWarehouseShipmentForLot(TransferHeader,WarehouseShipmentHeader);
        ItemTracking::Serial:
          UpdateQtyToHandleAndPostWarehouseShipmentForSerial(TransferHeader,WarehouseShipmentHeader);
      END;
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE PickFromSalesOrderUsingLotItemTrackingWithExpirationDate@200();
    VAR
      Bin@1000 : Record 7354;
      Item@1001 : Record 27;
      Item2@1007 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      WarehouseActivityLine@1009 : Record 5767;
      WarehouseActivityLine2@1011 : Record 5767;
      Quantity@1006 : Decimal;
    BEGIN
      // Setup : Create two items. Find the Pick Bin.
      Initialize;
      CreateItem(Item,ItemTrackingCode2.Code);
      CreateItem(Item2,'');
      Quantity := LibraryRandom.RandInt(10); // Intger type required for Serial No.
      FindBin(Bin,LocationWhite.Code,FALSE,TRUE,TRUE); // Find PICK Bin.

      // Create and register Warehouse Item Journal using Item Tracking Line with Expiration Date < WORKDATE for Item.
      UpdateInventoryUsingWarehouseJournal(
        Bin,Item,Item."Base Unit of Measure",Quantity,TRUE,ItemTrackingMode::"Assign Lot No.",
        CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));

      // Create and register Warehouse Item Journal using Item Tracking Line with Expiration Date > WORKDATE for Item.
      // To make sure there are available items not expired for pick.
      UpdateInventoryUsingWarehouseJournal(
        Bin,Item,Item."Base Unit of Measure",Quantity,TRUE,ItemTrackingMode::"Assign Lot No.",
        CALCDATE('<+' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));

      // Create and register Warehouse Item Journal for Item2 without Item Tracking.
      UpdateInventoryUsingWarehouseJournal(
        Bin,Item2,Item2."Base Unit of Measure",Quantity,FALSE,ItemTrackingMode::" ",0D);

      // Create and release Sales Order with two lines for Item and Item2.
      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,Item."No.",Item."Base Unit of Measure",LocationWhite.Code,Quantity,FALSE); // Use FALSE for without Tracking.
      CreateSalesLineForReleasedSalesOrder(
        SalesLine,SalesHeader,Item2."No.",Item2."Base Unit of Measure",LocationWhite.Code,Quantity,FALSE,FALSE); // Use FALSE for without Tracking and no Expiration Date.

      // Exercise : Create Pick from Warehouse Shipment.
      CreatePickFromWarehouseShipmentWithExpirationDate(SalesHeader);

      FindWarehousePickLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",
        Item."No.",WarehouseActivityLine."Activity Type"::Pick);
      FindWarehousePickLine(
        WarehouseActivityLine2,WarehouseActivityLine2."Source Document"::"Sales Order",
        Item2."No.",WarehouseActivityLine2."Activity Type"::Pick);

      // Verify : Verify Item and Item2 were both picked into the same document.
      WarehouseActivityLine.TESTFIELD("No.",WarehouseActivityLine2."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesWithLotNoPageHandler)]
    PROCEDURE PickFromWarehouseShipmentAfterReleasingTransferOrderUsingLotWarehouseTracking@246();
    VAR
      Item@1000 : Record 27;
      TempWarehouseEntry@1006 : TEMPORARY Record 7312;
      TransferHeader@1004 : Record 5740;
      WarehouseShipmentHeader@1009 : Record 7320;
      WarehouseShipmentLine@1010 : Record 7321;
      WarehouseActivityLine@1001 : Record 5767;
      SmallerQtyPerUnitOfMeasure@1003 : Decimal;
    BEGIN
      // Setup : Create Item with multiple UOMs and Lot Item Tracking which has enabled Warehouse Item Tracking.
      // Create and release Purchase Order on Location White with multiple UOMS and Lots.
      // Create Warehouse Receipt on Location White, create Warehouse Put-Away.
      // Create and release Transfer Order from Location White to Location Blue. Assign Lot Item Tracking to each line in two steps. Release Transfer Order.
      // Create Warehouse Shipment from Transfer Order, generate Warehouse Pick.

      Initialize;
      AddBinsToLocation(LocationWhite.Code,FALSE,FALSE,TRUE,TRUE,FALSE,2);
      CreateItem(Item,ItemTrackingCode.Code);
      SmallerQtyPerUnitOfMeasure := LibraryRandom.RandDecInDecimalRange(0.2,0.9,1);
      CreateAdditionalItemUOM(Item."No.",SmallerQtyPerUnitOfMeasure);
      CreateAdditionalItemUOM(
        Item."No.",SmallerQtyPerUnitOfMeasure * 10 * LibraryRandom.RandIntInRange(1,4));

      PrepareDataForWarehouse(
        TempWarehouseEntry,Item,LibraryRandom.RandIntInRange(3,10),TRUE,2);
      CreatePurchaseOrderAndPutAwayWithData(TempWarehouseEntry);
      ReorganizeDataForWarehouse(TempWarehouseEntry);
      CreateAndReleaseTransferOrderWithData(TransferHeader,TempWarehouseEntry,LocationBlue.Code,LotsAssignment::Partial);
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.");

      // Exercise : Register Pick.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Outbound Transfer",
        TransferHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // Verify : Pick is registered successfully, and calculated total base quantity equals to total base quantity in initial data.
      VerifyRegisteredPickLinesWithData(
        TempWarehouseEntry,WarehouseActivityLine."Activity Type"::Pick,TransferHeader."No.");
    END;

    [Test]
    PROCEDURE CreatePickFromPickWorksheetWithPerWhseDocument@222();
    VAR
      Item@1000 : Record 27;
      Bin@1001 : Record 7354;
      BinContent@1007 : Record 7302;
      WarehouseActivityLine@1008 : Record 5767;
      SalesHeaderNo@1006 : ARRAY [2] OF Code[20];
      Quantity@1004 : Decimal;
      i@1002 : Integer;
    BEGIN
      // Setup: Create two Items and Sales Orders. Create and release Warehouse Shipment from each Sales Order.
      // Run Get Warehouse Document in Pick Worksheet to get all created Warehouse Shipments.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      FindBin(Bin,LocationWhite.Code,FALSE,TRUE,TRUE); // Find PICK Bin.
      FOR i := 1 TO 2 DO BEGIN
        CreateItem(Item,'');
        UpdateInventoryUsingWarehouseJournal(
          Bin,Item,Item."Base Unit of Measure",Quantity,FALSE,ItemTrackingMode::" ",WORKDATE);
        SalesHeaderNo[i] := CreateAndReleaseWarehouseShipmentFromSalesOrder(
            Item."No.",Item."Base Unit of Measure",Bin."Location Code",Quantity);
      END;

      // Update Block Movement for the 2nd Item in Bin Content.
      UpdateBlockMovementOnBinContent(BinContent,Bin,Item."No.",BinContent."Block Movement"::Outbound);

      // Exercise: Get Warehouse Document on Pick Worksheet.
      // Create Pick from Pick Worksheet with Per Whse. Document is TRUE.
      GetWarehouseDocumentOnPickWorksheet('',LocationWhite.Code,TRUE); // Blank for Item No.

      // Verify: Verify Pick can be created successfully.
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeaderNo[1],
        WarehouseActivityLine."Activity Type"::Pick);
      Assert.AreEqual(Quantity,WarehouseActivityLine.Quantity,WhseActivLineQtyErr);
    END;

    [Test]
    [HandlerFunctions(BOMCostSharesPageHandler)]
    PROCEDURE BOMCostSharesWithMultipleUOM@1170000000();
    VAR
      ItemUnitOfMeasure@1004 : Record 5404;
      ParentItem@1003 : Record 27;
      ComponentItem@1002 : Record 27;
      ProductionBOMHeader@1001 : Record 99000771;
    BEGIN
      // Setup: Create Parent Item and Component Item. Create Unit of Measure of Parent Item.
      // Create Production BOM with the new created Unit of Measure for Parent Item.
      Initialize;
      CreateItem(ParentItem,'');
      CreateItem(ComponentItem,'');
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,ParentItem."No.",LibraryRandom.RandInt(5) + 1); // Value required for multiple UOM with different conversion rate.
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ComponentItem."No.",ItemUnitOfMeasure.Code,1,BomLineType::Item);
      UpdateProductionBomAndRoutingOnItem(ParentItem,ProductionBOMHeader."No.",'');
      LibraryVariableStorage.Enqueue(ParentItem."Base Unit of Measure"); // Enqueue Value to verify the Unit of Measure Code.

      // Exercise: Run BOM Cost Shares Page.
      RunBOMCostSharesPage(ParentItem);

      // Verify: Verify the Unit of Measure Code on BOM Cost Shares page through BOMCostSharesPageHandler.
    END;

    [Test]
    [HandlerFunctions(MultipleBOMCostSharesPageHandler)]
    PROCEDURE MultipleBOMCostSharesWithMultipleUOM@212();
    VAR
      ItemUnitOfMeasure@1004 : Record 5404;
      TopItemUnitOfMeasure@1005 : Record 5404;
      ParentItem@1003 : Record 27;
      TopParentItem@1000 : Record 27;
      ComponentItem@1002 : Record 27;
      TopBOMQtyPer@1001 : Decimal;
      QtyPer@1006 : Decimal;
    BEGIN
      // Setup: Create Parent Item and Component Item. Create Unit of Measure of Parent Item.
      // Create Production BOM with the new created Unit of Measure for Parent Item.
      // Create Unit of Measure of Top Parent Item.Create Production BOM with the new created Unit of Measure for Top Parent Item.
      Initialize;
      CreateItem(TopParentItem,'');
      CreateItem(ParentItem,'');
      CreateItem(ComponentItem,'');
      CreateAndCertifyProductionBOMWithUOM(ItemUnitOfMeasure,ParentItem,ComponentItem."No.",TopBOMQtyPer,BomLineType::Item);
      CreateAndCertifyProductionBOMWithUOM(TopItemUnitOfMeasure,TopParentItem,ParentItem."No.",QtyPer,BomLineType::Item);

      // Enqueue Values for MultipleBOMCostSharesPageHandler to verify values on page BOM Cost Shares.
      EnqueueValuesToVerifyBOMCostSharesPage(
        TopParentItem."No.",TopParentItem."Base Unit of Measure",TopItemUnitOfMeasure.Code,1,1,0);
      EnqueueValuesToVerifyBOMCostSharesPage(
        ParentItem."No.",ParentItem."Base Unit of Measure",ItemUnitOfMeasure.Code,
        TopBOMQtyPer / TopItemUnitOfMeasure."Qty. per Unit of Measure",
        TopBOMQtyPer / TopItemUnitOfMeasure."Qty. per Unit of Measure",TopBOMQtyPer);

      EnqueueValuesToVerifyBOMCostSharesPage(
        ComponentItem."No.",ComponentItem."Base Unit of Measure",'',QtyPer / ItemUnitOfMeasure."Qty. per Unit of Measure",
        TopBOMQtyPer / TopItemUnitOfMeasure."Qty. per Unit of Measure" * QtyPer / ItemUnitOfMeasure."Qty. per Unit of Measure",QtyPer);

      // Exercise: Run BOM Cost Shares Page.
      RunBOMCostSharesPage(TopParentItem);

      // Verify: Verify values on BOM Cost Shares page through MultipleBOMCostSharesPageHandler.
    END;

    [Test]
    PROCEDURE QtyPerTopItemInBOMCostSharesWithPhantomBOM@251();
    VAR
      TopParentItem@1005 : Record 27;
      ComponentItem@1001 : Record 27;
      TopItemUnitOfMeasure@1006 : Record 5404;
      ItemUnitOfMeasure@1002 : Record 5404;
      ProductionBOMHeader@1003 : Record 99000771;
      BOMBuffer@1008 : Record 5870;
      CalcBOMTree@1007 : Codeunit 5870;
      QtyPer@1000 : Decimal;
      ParentBOMHeaderNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Production BOM] [Cost Shares]
      // [SCENARIO 363019] BOM Cost Shares report is generated for a BOM including a phantom BOM as a component
      Initialize;

      QtyPer := LibraryRandom.RandIntInRange(2,10);

      // [GIVEN] Component Item with Unit of Measure = "Y"
      CreateItem(ComponentItem,'');
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,ComponentItem."No.",LibraryRandom.RandIntInRange(2,10));

      // [GIVEN] Production BOM "A" including the component Item, "Qty. per" = "Q"
      CreateAndCertifyProductionBOM(
        ProductionBOMHeader,ComponentItem."No.",ItemUnitOfMeasure.Code,QtyPer,BomLineType::Item);
      ParentBOMHeaderNo := ProductionBOMHeader."No.";

      // [GIVEN] Production BOM "B" including Production BOM "A" with type = "Production BOM"
      // [GIVEN] Top Item with Unit of Measure = "X", Production BOM No = "B"
      CreateItem(TopParentItem,'');
      CreateItemUnitOfMeasure(TopItemUnitOfMeasure,TopParentItem."No.",LibraryRandom.RandIntInRange(2,10));
      CreateAndCertifyProductionBOM(
        ProductionBOMHeader,ParentBOMHeaderNo,TopItemUnitOfMeasure.Code,QtyPer,BomLineType::"Production BOM");
      UpdateProductionBomAndRoutingOnItem(TopParentItem,ProductionBOMHeader."No." ,'');

      // [WHEN] Generate BOM Cost Shares
      CalcBOMTree.GenerateTreeForItem(TopParentItem,BOMBuffer,31129998D,0);

      // [THEN] "Qty. per Top Item" in the component line is "Q"
      FindBOMBufferLine(BOMBuffer,ComponentItem."No.");
      Assert.AreEqual(QtyPer,BOMBuffer."Qty. per Top Item",QuantityMustBeSame);
    END;

    [Test]
    PROCEDURE QtyPerTopItemInPhantomBOMIsMultipliedByParentQtyPer@237();
    VAR
      ComponentItem@1000 : Record 27;
      ParentItem@1001 : Record 27;
      ItemUnitOfMeasure@1002 : Record 5404;
      ProductionBOMHeader@1003 : Record 99000771;
      BOMBuffer@1006 : Record 5870;
      CalcBOMTree@1005 : Codeunit 5870;
      UOMMgt@1008 : Codeunit 5402;
      ComponentQtyPer@1004 : Decimal;
      PhantomBOMQtyPer@1007 : Decimal;
    BEGIN
      // [FEATURE] [Production BOM] [Cost Shares]
      // [SCENARIO 363174] Qty. per BOM Line and Qty. per Parent in Cost Shares report are multiplied by phantom bom "quantity per" for phantom bom lines
      Initialize;

      // [GIVEN] Low-level component item
      ComponentQtyPer := LibraryRandom.RandIntInRange(2,10);
      PhantomBOMQtyPer := LibraryRandom.RandIntInRange(2,10);

      CreateItem(ComponentItem,'');

      // [GIVEN] Production BOM "A" including the component Item, "Qty. per" = "Q1"
      CreateAndCertifyProductionBOM(
        ProductionBOMHeader,ComponentItem."No.",ComponentItem."Base Unit of Measure",ComponentQtyPer,BomLineType::Item);

      // [GIVEN] Top Item with Unit of Measure = "X", additional unit of measure with "Base UoM Quantity" = "Q2"
      CreateItem(ParentItem,'');
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,ParentItem."No.",LibraryRandom.RandIntInRange(2,10));
      // [GIVEN] Production BOM "B" including Production BOM "A" with type = "Production BOM" (phantom BOM), "Qantity per" = "Q3"
      CreateAndCertifyProductionBOM(
        ProductionBOMHeader,ProductionBOMHeader."No.",ItemUnitOfMeasure.Code,PhantomBOMQtyPer,BomLineType::"Production BOM");
      UpdateProductionBomAndRoutingOnItem(ParentItem,ProductionBOMHeader."No." ,'');

      // [WHEN] Generate BOM Cost Shares
      CalcBOMTree.GenerateTreeForItem(ParentItem,BOMBuffer,31129998D,0);

      FindBOMBufferLine(BOMBuffer,ComponentItem."No.");

      // [THEN] Component item's "Quantity per BOM Line = "Q1" * "Q3"
      Assert.AreEqual(ComponentQtyPer * PhantomBOMQtyPer,BOMBuffer."Qty. per BOM Line",QuantityMustBeSame);
      // [THEN] Component item's "Quantity per Parent" = "Q1" * "Q3" / "Q2"
      Assert.AreEqual(
        ComponentQtyPer * PhantomBOMQtyPer / UOMMgt.GetQtyPerUnitOfMeasure(ParentItem,ItemUnitOfMeasure.Code),
        BOMBuffer."Qty. per Parent",QuantityMustBeSame);
    END;

    [Test]
    [HandlerFunctions(ItemUOMHandler)]
    PROCEDURE OpenItemUnitOfMeasurePageWithNoTransactions@238();
    VAR
      Item@1000 : Record 27;
      ItemUOM@1002 : Record 5404;
    BEGIN
      // [FEATURE] [Item Unit of Measure]
      // [SCENARIO 371765] "Item Unit of Measure" Page should take "Base Unit of Measure" from Item if Item has no transaction
      Initialize;

      // [GIVEN] Item with "Base Unit Of Measure" = "X"
      LibraryInventory.CreateItem(Item);

      // [WHEN] Open "Item Unit of Measure" Page
      // [THEN] Page is opened with "Unit Of Measure" = "X"
      LibraryVariableStorage.Enqueue(Item."Base Unit of Measure");
      ItemUOM.SETRANGE("Item No.",Item."No.");
      PAGE.RUNMODAL(0,ItemUOM);
    END;

    [Test]
    [HandlerFunctions(ItemUOMHandler)]
    PROCEDURE OpenItemUnitOfMeasurePageWithDifferentTransactions@253();
    VAR
      Item@1000 : Record 27;
      ItemUOM1@1002 : Record 5404;
      ItemUOM2@1003 : Record 5404;
      PurchaseHeader@1004 : Record 38;
    BEGIN
      // [FEATURE] [Item Unit of Measure]
      // [SCENARIO 371765] "Item Unit of Measure" Page should take correct "Unit of Measure" from Item if Item has multiple transaction with different UOM
      Initialize;

      // [GIVEN] Item with "Base Unit Of Measure" = "X", secondary UOM = "Y"
      // [GIVEN] Purchase Order Line for Item with UOM = "X"
      // [GIVEN] Purchase Order Line for Item with UOM = "Y"
      CreateItemWithMultipleUOM(Item,ItemUOM1,ItemUOM2,'');
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",Item."Purch. Unit of Measure",Item."Put-away Unit of Measure Code",
        LocationWhite3.Code,LibraryRandom.RandDec(100,2),FALSE);

      // [WHEN] Open "Item Unit of Measure" Page
      // [THEN] Page is opened with Unit Of Measure = "X"
      LibraryVariableStorage.Enqueue(ItemUOM1.Code);
      ItemUOM1.SETRANGE("Item No.",Item."No.");
      PAGE.RUNMODAL(0,ItemUOM1);
    END;

    [Test]
    PROCEDURE DeleteItemUnitOfMeasure@255();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
    BEGIN
      // [FEATURE] [Item Unit of Measure]
      // [SCENARIO 374969] Deleting Item Unit of Measure should be prohibited if Item has Warehouse Adjustment Entries
      Initialize;

      // [GIVEN] Item with secondary UoM = "X"
      LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(10));

      // [GIVEN] Warehouse Adjustment Entry for Item in UoM = "X"
      MockWarehouseAdjustmentEntry(ItemUnitOfMeasure);

      // [WHEN] Delete Item UoM "X"
      ASSERTERROR ItemUnitOfMeasure.DELETE(TRUE);

      // [THEN] Error is thrown: "Cannot modify Item Unit of Measure"
      Assert.ExpectedError(CannotModifyUOMWithWhseEntriesErr);
    END;

    [Test]
    PROCEDURE RenameItemUnitOfMeasure@256();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
    BEGIN
      // [FEATURE] [Item Unit of Measure]
      // [SCENARIO 374969] Renaming Item Unit of Measure should be prohibited if Item has Warehouse Adjustment Entries
      Initialize;

      // [GIVEN] Item with secondary UoM = "X"
      LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(10));

      // [GIVEN] Warehouse Adjustment Entry for Item in UoM = "X"
      MockWarehouseAdjustmentEntry(ItemUnitOfMeasure);

      // [WHEN] Rename Item UoM "X" to "Y"
      ASSERTERROR ItemUnitOfMeasure.RENAME(Item."No.",LibraryUtility.GenerateGUID);

      // [THEN] Error is thrown: "Cannot modify Item Unit of Measure"
      Assert.ExpectedError(CannotModifyUOMWithWhseEntriesErr);
    END;

    [Test]
    PROCEDURE DeleteItemUnitOfMeasureWhileOrderLineExists@258();
    VAR
      Item@1001 : Record 27;
      ItemUnitOfMeasure@1000 : Record 5404;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // [FEATURE] [Item Unit of Measure]
      // [SCENARIO 375608] Deleting Item Unit of Measure should be prohibited if there is Order Line for that Item

      // [GIVEN] Item with secondary UoM = "X"
      LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(10));

      // [GIVEN] Sales Order for Item in UoM = "X"
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",ItemUnitOfMeasure.Code,'',LibraryRandom.RandInt(10),FALSE);

      // [WHEN] Delete Item UoM "X"
      ASSERTERROR ItemUnitOfMeasure.DELETE(TRUE);

      // [THEN] Error is thrown: "Cannot modify Item Unit of Measure"
      Assert.ExpectedError(CannotModifyUOMWithWhseEntriesErr);
    END;

    [Test]
    PROCEDURE MovementChangeUOM@263();
    VAR
      Item@1000 : Record 27;
      ItemUOM@1001 : ARRAY [2] OF Record 5404;
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseActivityLine@1004 : Record 5767;
      WarehouseMovement@1003 : TestPage 7315;
    BEGIN
      // [FEATURE] [Movement] [Item Unit of Measure]
      // [SCENARIO 375782] Cannot change Unit of Measure for Movement Place line when "Qty. to Handle" = 0.

      // [GIVEN] Warehouse Movement for Item with multiple UOMs, "Qty. to Handle" = 0
      Initialize;
      CreateItemWithMultipleUOM(Item,ItemUOM[1],ItemUOM[2],'');
      MockMovement(WarehouseActivityHeader,Item."No.",ItemUOM[1]."Qty. per Unit of Measure");

      // [WHEN] Change Unit of Measure for Place line
      WarehouseMovement.TRAP;
      WarehouseMovement.OPENEDIT;
      WarehouseMovement.GOTORECORD(WarehouseActivityHeader);
      WarehouseMovement.WhseMovLines.LAST;
      ASSERTERROR WarehouseMovement.WhseMovLines.Action1903867104.INVOKE; // Change Unit of Measure

      // [THEN] Error message regarding "Qty. to Handle" = 0
      Assert.ExpectedError(
        STRSUBSTNO(QtyToHandleErr,WarehouseActivityLine.FIELDCAPTION("Qty. to Handle")));
    END;

    [Test]
    PROCEDURE QtyPerOnItemUnitOfMeasureInFinishedProdOrderLine@7();
    VAR
      ItemUnitOfMeasure@1001 : Record 5404;
      Item@1000 : Record 27;
      QtyPer@1002 : Decimal;
    BEGIN
      // [FEATURE] [Item Unit of Measure] [Production Order]
      // [SCENARIO 377099] It should be possible to change "Qty. per Unit of Measure" of Item Unit of Measure if there are Finished Prod Order Lines with posted Partial Consumption using this UoM
      Initialize;

      // [GIVEN] Nonbase Item UoM "A" with "Qty. per Unit of Measure" = "X"
      LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(100));
      UpdateItemUOM(Item,Item."Base Unit of Measure",Item."Base Unit of Measure",ItemUnitOfMeasure.Code);

      // [GIVEN] Finished Production Order Line with partial posted consumption in UoM = "A"
      MockFinProdOrderLine(Item."No.",ItemUnitOfMeasure.Code);

      // [WHEN] Change "Qty. per Unit of Measure" of Item UoM "A" to "Y"
      QtyPer := LibraryRandom.RandInt(100);
      ItemUnitOfMeasure.VALIDATE("Qty. per Unit of Measure",QtyPer);
      ItemUnitOfMeasure.MODIFY(TRUE);

      // [THEN] Item UoM "A" has "Qty. per Unit of Measure" = "Y"
      ItemUnitOfMeasure.TESTFIELD("Qty. per Unit of Measure",QtyPer);
    END;

    [Test]
    PROCEDURE QtyPerOnItemUnitOfMeasureInFinishedProdOrder2@40();
    VAR
      ItemUnitOfMeasure@1001 : Record 5404;
      Item@1000 : Record 27;
      QtyPer@1002 : Decimal;
    BEGIN
      // [FEATURE] [Item Unit of Measure] [Production Order]
      // [SCENARIO 377214] It should be possible to change "Qty. per Unit of Measure" of Item Unit of Measure if there are Finished Prod Order Components with posted Partial Consumption using this UoM
      Initialize;

      // [GIVEN] Nonbase Item UoM "A" with "Qty. per Unit of Measure" = "X"
      LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(100));
      UpdateItemUOM(Item,Item."Base Unit of Measure",Item."Base Unit of Measure",ItemUnitOfMeasure.Code);

      // [GIVEN] Finished Production Order Component with partial posted consumption in UoM = "A"
      MockFinProdOrderComp(Item."No.",ItemUnitOfMeasure.Code);

      // [WHEN] Change "Qty. per Unit of Measure" of Item UoM "A" to "Y"
      QtyPer := LibraryRandom.RandInt(100);
      ItemUnitOfMeasure.VALIDATE("Qty. per Unit of Measure",QtyPer);
      ItemUnitOfMeasure.MODIFY(TRUE);

      // [THEN] Item UoM "A" has "Qty. per Unit of Measure" = "Y"
      ItemUnitOfMeasure.TESTFIELD("Qty. per Unit of Measure",QtyPer);
    END;

    [Test]
    PROCEDURE ForInventoryInDifferentUOMRegisterPickWhenOtherPickExists@275();
    VAR
      Item@1000 : Record 27;
      BaseItemUnitOfMeasure@1001 : Record 5404;
      NonBaseItemUnitOfMeasure@1005 : Record 5404;
      SalesHeader@1006 : ARRAY [2] OF Record 36;
      WarehouseActivityLine@1009 : Record 5767;
      QtyPer@1007 : Decimal;
      BaseUOMPurchQty@1010 : Decimal;
      NonBaseUOMPurchQty@1011 : Decimal;
      BaseUOMSalesQty@1012 : ARRAY [2] OF Decimal;
    BEGIN
      // [FEATURE] [Item Unit of Measure] [SCM] [Warehouse] [Pick]
      // [SCENARIO 380472] It should be possible to register Pick when other Picks exist according to total quantity base available in warehouse and not to take into account the quantities in different UOMs.
      Initialize;

      BaseUOMSalesQty[1] := LibraryRandom.RandIntInRange(2,10);
      BaseUOMPurchQty := BaseUOMSalesQty[1] + LibraryRandom.RandInt(BaseUOMSalesQty[1] - 1);
      NonBaseUOMPurchQty := LibraryRandom.RandInt(10);
      QtyPer := LibraryRandom.RandIntInRange(5,10);
      BaseUOMSalesQty[2] := BaseUOMPurchQty + (NonBaseUOMPurchQty * QtyPer) - BaseUOMSalesQty[1];

      // [GIVEN] Item with additional Unit of Measure. Base UOM - PCS, Non base - BOX, "Quantity Per" = 6.
      CreateItemWithNonBaseUOM(Item,BaseItemUnitOfMeasure,NonBaseItemUnitOfMeasure,QtyPer);

      // [GIVEN] Registered Put-away for this Item in both UOM - 5 PCS and 2 BOX.
      RegisterPutAwayForItemWithTwoUOM(
        LocationWhite2.Code,Item."No.",Item."Base Unit of Measure",BaseUOMPurchQty,NonBaseItemUnitOfMeasure.Code,NonBaseUOMPurchQty);

      // [GIVEN] Two Picks for two Sales Orders - P1 and P2, both in base UOM. P1 - 4 PCS, P2 - 13 PCS. Total pick quantity (4 + 13) is equal to total quantity available in warehouse (5 + 2 * 6).
      CreateSalesOrderAndPick(SalesHeader[1],LocationWhite2.Code,Item."No.",Item."Base Unit of Measure",BaseUOMSalesQty[1]);
      CreateSalesOrderAndPick(SalesHeader[2],LocationWhite2.Code,Item."No.",Item."Base Unit of Measure",BaseUOMSalesQty[2]);

      // [WHEN] Register pick P1, then P2. Sequence is important for test.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader[1]."No.",WarehouseActivityLine."Activity Type"::Pick);

      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader[2]."No.",WarehouseActivityLine."Activity Type"::Pick);

      // [THEN] Both Picks are registered without errors.

      // [THEN] Quantity picked in Pick document P1 is 4. Quantity picked in Pick document P2 is 13.
      Assert.AreEqual(
        BaseUOMSalesQty[1],
        CalcTakenForPickQtyBaseOfItemWithUOMInSalesOrder(SalesHeader[1]."No.",Item."No.",BaseItemUnitOfMeasure.Code),WrongTotalQtyErr);
      Assert.AreEqual(
        BaseUOMSalesQty[2],
        CalcTakenForPickQtyBaseOfItemWithUOMInSalesOrder(SalesHeader[2]."No.",Item."No.",BaseItemUnitOfMeasure.Code),WrongTotalQtyErr);
    END;

    [Test]
    PROCEDURE RegisterPickWhenNegativeAdjustmentExists@271();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1006 : Record 36;
      WarehouseActivityLineTake@1009 : Record 5767;
      WarehouseActivityLinePlace@1004 : Record 5767;
      PurchQty@1010 : Decimal;
      SalesQty@1012 : Decimal;
      NegativeAdjstmntQty@1001 : Decimal;
      RegisterPickQty@1003 : Decimal;
    BEGIN
      // [FEATURE] [Item Unit of Measure] [SCM] [Warehouse] [Pick]
      // [SCENARIO 380472] Registering a Pick should not be allowed when difference between Quantity in Warehouse Ledger Entry and Quantity of Negative Adjustment in Warehouse Journal is less then Quantity for Pick.
      Initialize;

      SalesQty := LibraryRandom.RandIntInRange(5,10);
      PurchQty := SalesQty;
      NegativeAdjstmntQty := LibraryRandom.RandInt(SalesQty - 1);
      RegisterPickQty := SalesQty - NegativeAdjstmntQty;

      LibraryInventory.CreateItem(Item);

      // [GIVEN] Registered Put-away for Item - 5 PCS.
      RegisterPutAwayForItem(LocationWhite2.Code,Item."No.",PurchQty);

      // [GIVEN] Pick for this Item - 5 PCS.
      CreateSalesOrderAndPick(SalesHeader,LocationWhite2.Code,Item."No.",Item."Base Unit of Measure",SalesQty);

      FindWarehouseActivityLinesPairForPick(
        WarehouseActivityLineTake,WarehouseActivityLinePlace,
        WarehouseActivityLineTake."Source Document"::"Sales Order",SalesHeader."No.");

      // [GIVEN] Negative Adjustment - 2 PCS.
      CreateNegativeAdjmtWarehouseJournalLine(Item,LocationWhite2.Code,
        WarehouseActivityLineTake."Bin Code",NegativeAdjstmntQty);

      // [WHEN] Try to register Pick

      // [THEN] Error 'Quantity (Base) available must not be less than ...' occurs.
      WITH WarehouseActivityLineTake DO
        ASSERTERROR RegisterWarehouseActivity("Source Document"::"Sales Order",SalesHeader."No.","Activity Type"::Pick);

      Assert.ExpectedError(QuantityBaseAvailableMustNotBeLessErr);

      // [WHEN] Update "Qty. to Handle" for Pick = 3 and try to register Pick
      UpdateQtyToHandleOnWarehouseActivityLinesPair(WarehouseActivityLineTake,WarehouseActivityLinePlace,RegisterPickQty);

      RegisterWarehouseActivity(
        WarehouseActivityLineTake."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLineTake."Activity Type"::Pick);

      // [THEN] Pick is registered without errors.

      // [THEN] Picked base quantity is equal to the "Qty. to Handle" for Pick = 3.
      Assert.AreEqual(
        RegisterPickQty,
        CalcTakenForPickQtyBaseOfItemWithUOMInSalesOrder(SalesHeader."No.",Item."No.",Item."Base Unit of Measure"),
        WrongTotalQtyErr);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE RegisterPickWhenNegativeAdjustmentAndATOExists@301();
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1002 : Record 27;
      SalesHeader@1006 : Record 36;
      WarehouseActivityLineTake@1009 : Record 5767;
      WarehouseActivityLinePlace@1004 : Record 5767;
      PurchQty@1010 : Decimal;
      SalesQty@1012 : Decimal;
      AssemblySalesQty@1008 : Decimal;
      InAssemblySalesQty@1007 : Decimal;
      RegisterPickQty@1003 : Decimal;
      QtyPer@1005 : Decimal;
      NegativeAdjstmntQty@1001 : Decimal;
    BEGIN
      // [FEATURE] [Item Unit of Measure] [SCM] [Warehouse] [Pick] [Assembly]
      // [SCENARIO 380472] Registering a Pick should not be allowed when difference between Quantity in Warehouse Ledger Entry and sum of Quantity of Negative Adjustment in Warehouse Journal and Quantity in ATO is less then Quantity for Pick.
      Initialize;

      QtyPer := LibraryRandom.RandIntInRange(2,5);
      SalesQty := LibraryRandom.RandIntInRange(10,30);
      AssemblySalesQty := LibraryRandom.RandIntInRange(1,5);
      InAssemblySalesQty := AssemblySalesQty * QtyPer;
      PurchQty := SalesQty + InAssemblySalesQty;
      RegisterPickQty := SalesQty - InAssemblySalesQty;
      NegativeAdjstmntQty := LibraryRandom.RandInt(SalesQty - 1);

      // [GIVEN] Assembled Item with one Component
      CreateAssembledItem(ParentItem,ChildItem,QtyPer);

      // [GIVEN] Registered Put-away for Component Item - 30 PCS.
      RegisterPutAwayForItem(LocationWhite2.Code,ChildItem."No.",PurchQty);

      // [GIVEN] Pick for ATO of this Component Item - 10 PCS.
      CreateAssembledItemSalesOrderAndAssemblyOrderPick(LocationWhite2.Code,ParentItem."No.",AssemblySalesQty);

      // [GIVEN] Pick for Sales Order this Component Item - 20 PCS.
      CreateSalesOrderAndPick(SalesHeader,LocationWhite2.Code,ChildItem."No.",ChildItem."Base Unit of Measure",SalesQty);

      FindWarehouseActivityLinesPairForPick(
        WarehouseActivityLineTake,WarehouseActivityLinePlace,
        WarehouseActivityLineTake."Source Document"::"Sales Order",SalesHeader."No.");

      // [GIVEN] Negative Adjustment - 2 PCS.
      CreateNegativeAdjmtWarehouseJournalLine(
        ChildItem,LocationWhite2.Code,WarehouseActivityLineTake."Bin Code",NegativeAdjstmntQty);

      // [WHEN] Try to register Pick

      // [THEN] Error 'Quantity (Base) available must not be less than ...' occurs.
      WITH WarehouseActivityLineTake DO
        ASSERTERROR RegisterWarehouseActivity("Source Document"::"Sales Order",SalesHeader."No.","Activity Type"::Pick);

      Assert.ExpectedError(QuantityBaseAvailableMustNotBeLessErr);

      // [WHEN] Update "Qty. to Handle" for Pick = 10 and try to register Pick
      UpdateQtyToHandleOnWarehouseActivityLinesPair(WarehouseActivityLineTake,WarehouseActivityLinePlace,RegisterPickQty);

      RegisterWarehouseActivity(
        WarehouseActivityLineTake."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLineTake."Activity Type"::Pick);

      // [THEN] Pick is registered without errors.

      // [THEN] Picked base quantity is equal to the "Qty. to Handle" for Pick = 10.
      Assert.AreEqual(
        RegisterPickQty,
        CalcTakenForPickQtyBaseOfItemWithUOMInSalesOrder(SalesHeader."No.",ChildItem."No.",ChildItem."Base Unit of Measure"),
        WrongTotalQtyErr);
    END;

    [Test]
    PROCEDURE CreatePickActionTypeTakeCorrectBinsForDifferentUOMsAndRanking@269();
    VAR
      Location@1007 : Record 14;
      Item@1000 : Record 27;
      SalesHeader@1006 : Record 36;
      WarehouseShipmentHeader@1004 : Record 7320;
      WarehouseActivityLine@1005 : Record 5767;
      ItemLedgerEntry@1008 : Record 32;
      QtyPer@1002 : Decimal;
      NoOfBins@1009 : Integer;
      PurchItemInLineBaseQty@1001 : Decimal;
      TotalPurchItemBaseQty@1003 : Decimal;
      SalesQtyInSalesUOM@1012 : ARRAY [2] OF Decimal;
    BEGIN
      // [FEATURE] [Item Unit of Measure] [Pick] [Bin Ranking]
      // [SCENARIO 381799] When UOMs of Warehouse Shipment are unaliquot to the quantities placed in bins can create warehouse pick correctly and post warehouse shipment.
      Initialize;

      // [GIVEN] WMS Location W with three Bins BIN1, BIN2, BIN3. BIN1 (first according to default sorting Bin) has maximal Bin Ranking.
      NoOfBins := 3;
      CreateFullWarehouseSetupWithNumberOfBinsAndSetRanking(Location,NoOfBins);

      // [GIVEN] Item I with Sales Unit Of Measure SUOM that Quantity Per is greater than one.
      QtyPer := LibraryRandom.RandIntInRange(5,10);
      CreateItemWithSalesUOM(Item,QtyPer);

      // [GIVEN] Purchased Item I is placed at Warehouse W in different bins. Quantities in Bins are not aliquot to the SUOM Quantity Per.
      PurchItemInLineBaseQty := QtyPer * LibraryRandom.RandIntInRange(10,100) + 1;
      TotalPurchItemBaseQty := PurchItemInLineBaseQty * NoOfBins;

      // [GIVEN] The Sales Order SO of Item I with two lines with SUOM. The total Quantity (Base) of SO covers the total inventory of Item I.
      SalesQtyInSalesUOM[1] :=
        LibraryRandom.RandIntInRange(PurchItemInLineBaseQty,TotalPurchItemBaseQty - PurchItemInLineBaseQty) / QtyPer;
      SalesQtyInSalesUOM[2] := TotalPurchItemBaseQty / QtyPer - SalesQtyInSalesUOM[1];

      // [WHEN] Realese Sales Order and create shipment and pick
      CreateWarehouseShipmentAndPickForItemAtLocationFromDifferentBins(
        SalesHeader,WarehouseShipmentHeader,Location.Code,Item."No.",NoOfBins,PurchItemInLineBaseQty,SalesQtyInSalesUOM);

      FindWarehouseActivityLineWithActionType(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take);

      // [THEN] The pick contains only one line Action Type Take for BIN1.
      // [THEN] The pick contains only one line Action Type Take for BIN2.
      // [THEN] The pick contains two lines Action Type Take for BIN3.
      VerifyWarehouseActivityLineActionPickActivityTake(WarehouseActivityLine);

      // [GIVEN] Register Warehouse Pick.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // [WHEN] Post Warehouse Shipment
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,TRUE);

      // [THEN] The purchased Item I is sold completely and there is no any open Item Ledger Entry for I.
      ItemLedgerEntry.INIT;
      ItemLedgerEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgerEntry.SETRANGE(Open,TRUE);
      Assert.RecordIsEmpty(ItemLedgerEntry);
    END;

    [Test]
    PROCEDURE PutAwayWithAutomaticBreakbulkToPutAwayUOM@264();
    VAR
      Location@1002 : Record 14;
      WarehouseEmployee@1003 : Record 7301;
      Bin@1005 : Record 7354;
      BinContent@1009 : Record 7302;
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      PurchaseHeader@1004 : Record 38;
      WarehouseActivityLine@1008 : Record 5767;
      QtyPerUOM@1006 : Decimal;
      PurchQty@1007 : Decimal;
    BEGIN
      // [FEATURE] [Put-Away] [Breakbulk] [Item Unit of Measure]
      // [SCENARIO 216337] If a receipt is posted in a larger unit of measure, a put-away with automatically suggested breakbulk to the put-away unit of measure, can be registered.
      Initialize;
      QtyPerUOM := LibraryRandom.RandIntInRange(5,10);
      PurchQty := LibraryRandom.RandIntInRange(10,20);

      // [GIVEN] Full WMS location "L" with Allow Breakbulk = FALSE.
      LibraryWarehouse.CreateFullWMSLocation(Location,1);
      Location.VALIDATE("Allow Breakbulk",FALSE);
      Location.MODIFY(TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);

      // [GIVEN] Item with Base Unit of Measure = "PCS" and alternate Unit of Measure = "BOX". "BOX" contains "X" units of "PCS".
      // [GIVEN] Put-away Unit of Measure Code in the item is "PCS".
      LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",QtyPerUOM);
      UpdateItemUOM(Item,ItemUnitOfMeasure.Code,'',Item."Base Unit of Measure");

      // [GIVEN] Posted receipt for "Y" units of "BOX".
      CreateAndReleasePurchaseOrder(PurchaseHeader,Location.Code,Item."No.",PurchQty);
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);

      // [WHEN] Register Put-away.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // [THEN] The Put-away is successfully registered. "X" * "Y" units of "PCS" are placed into the storage bin.
      FindBin(Bin,Location.Code,FALSE,TRUE,TRUE);
      VerifyBinContent(Bin,Item."No.",PurchQty * QtyPerUOM,Item."Put-away Unit of Measure Code");

      // [THEN] Receive bin is empty.
      FindBin(Bin,Location.Code,TRUE,FALSE,FALSE);
      FindBinContent(BinContent,Bin,Item."No.");
      Assert.RecordIsEmpty(BinContent);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      CreateLocationSetup;
      NoSeriesSetup;
      ItemJournalSetup;
      OutputJournalSetup;
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE,FALSE);  // Lot Item Tracking.
      CreateItemTrackingCode(ItemTrackingCode2,FALSE,TRUE,TRUE);  // Lot With Strict Expiration Posting Item Tracking.
      CreateItemTrackingCode(ItemTrackingCode3,TRUE,TRUE,FALSE);  // Both Lot and Serial Item Tracking.
      CreateItemTrackingCode(ItemTrackingCode4,TRUE,FALSE,FALSE);  // Serial Item Tracking.
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      WarehouseSetup@1002 : Record 5769;
      PurchasesPayablesSetup@1003 : Record 312;
      SalesSetup@1001 : Record 311;
    BEGIN
      LibraryWarehouse.NoSeriesSetup(WarehouseSetup);
      WarehouseSetup.VALIDATE(
        "Receipt Posting Policy",WarehouseSetup."Receipt Posting Policy"::"Stop and show the first posting error");
      WarehouseSetup.MODIFY(TRUE);

      SalesSetup.GET;
      SalesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@75();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OutputJournalSetup@168();
    BEGIN
      CLEAR(OutputItemJournalTemplate);
      OutputItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(OutputItemJournalTemplate,OutputItemJournalTemplate.Type::Output);
      OutputItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      OutputItemJournalTemplate.MODIFY(TRUE);

      CLEAR(OutputItemJournalBatch);
      OutputItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(
        OutputItemJournalBatch,OutputItemJournalTemplate.Type,OutputItemJournalTemplate.Name);
      OutputItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationSetup@92();
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      CreateFullWarehouseSetup(LocationWhite);  // Location: White.
      LocationWhite.VALIDATE("Bin Capacity Policy",LocationWhite."Bin Capacity Policy"::"Prohibit More Than Max. Cap.");
      LocationWhite.MODIFY(TRUE);
      CreateFullWarehouseSetup(LocationWhite2);  // New White Location is required for Test with multiple UOM.
      CreateFullWarehouseSetup(LocationWhite3);  // New White Location is required for Test with multiple UOM.
      LibraryWarehouse.CreateLocationWMS(LocationSilver,TRUE,TRUE,TRUE,FALSE,FALSE);
      LibraryWarehouse.CreateLocationWMS(LocationYellow,FALSE,TRUE,TRUE,TRUE,TRUE);
      LibraryWarehouse.CreateLocationWMS(LocationGreen,FALSE,TRUE,TRUE,TRUE,TRUE);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationBlue);
      LibraryWarehouse.CreateInTransitLocation(LocationIntransit);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationWhite.Code,TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationWhite2.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationWhite3.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationSilver.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationYellow.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationGreen.Code,FALSE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateFullWarehouseSetup@60(VAR Location@1000 : Record 14);
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,2);  // Value used for number of bin per zone.
    END;

    LOCAL PROCEDURE CreateFullWarehouseSetupWithNumberOfBinsAndSetRanking@273(VAR Location@1000 : Record 14;NumberOfBins@1001 : Integer);
    VAR
      Zone@1002 : Record 7300;
      WarehouseEmployeeLoc@1004 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,NumberOfBins);
      WarehouseEmployeeLoc.SETRANGE("User ID",USERID);
      WarehouseEmployeeLoc.DELETEALL(TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployeeLoc,Location.Code,TRUE);
      LibraryInventory.UpdateInventoryPostingSetup(Location);
      Zone.SETRANGE("Location Code",Location.Code);
      Zone.FINDSET;
      REPEAT
        SetBinRankingForFirstBinAtZone(Zone);
      UNTIL Zone.NEXT = 0;
    END;

    LOCAL PROCEDURE SetBinRankingForFirstBinAtZone@274(Zone@1000 : Record 7300);
    VAR
      Bin@1003 : Record 7354;
    BEGIN
      Bin.SETRANGE("Location Code",Zone."Location Code");
      Bin.SETRANGE("Zone Code",Zone.Code);
      Bin.FINDFIRST;
      Bin.VALIDATE("Bin Ranking",100);
      Bin.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE WarehouseJournalSetup@106(LocationCode@1000 : Code[10]);
    BEGIN
      CLEAR(WarehouseJournalTemplate);
      WarehouseJournalTemplate.INIT;
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Item);
      WarehouseJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalTemplate.MODIFY(TRUE);

      CLEAR(WarehouseJournalBatch);
      WarehouseJournalBatch.INIT;
      LibraryWarehouse.SelectWhseJournalBatchName(
        WarehouseJournalBatch,WarehouseJournalTemplate.Type,WarehouseJournalTemplate.Name,LocationCode);
      WarehouseJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAdditionalItemUOM@208(ItemNo@1001 : Code[20];QtyPerUnitOfMeasure@1002 : Decimal);
    VAR
      ItemUnitOfMeasure@1000 : Record 5404;
      UnitOfMeasure@1005 : Record 204;
    BEGIN
      UnitOfMeasure.SETFILTER(Code,GetItemUOMCodeFilter(ItemNo));
      UnitOfMeasure.FINDFIRST;
      LibraryInventory.CreateItemUnitOfMeasure(ItemUnitOfMeasure,ItemNo,UnitOfMeasure.Code,QtyPerUnitOfMeasure);
    END;

    LOCAL PROCEDURE PrepareDataForWarehouse@213(VAR TempWarehouseEntry@1000 : TEMPORARY Record 7312;Item@1006 : Record 27;NumberOfBins@1001 : Integer;UseLots@1002 : Boolean;NumberOfEqualLots@1003 : Integer);
    VAR
      Bin@1004 : Record 7354;
      ItemUnitOfMeasure@1005 : Record 5404;
      Counter@1010 : Integer;
      UseBaseUOM@1007 : Boolean;
    BEGIN
      WITH ItemUnitOfMeasure DO BEGIN
        SETCURRENTKEY("Item No.","Qty. per Unit of Measure");
        SETRANGE("Item No.",Item."No.");
        SETFILTER(Code,'<>' + Item."Base Unit of Measure");
        ASCENDING(FALSE);
        FINDSET;
      END;
      WITH TempWarehouseEntry DO BEGIN
        IF UseLots THEN
          "Lot No." := LibraryUtility.GenerateGUID;
        FOR Counter := 1 TO NumberOfBins DO BEGIN
          "Entry No." += 1;
          "Line No." += 10000;
          Dedicated := TRUE; // "New Line" flag
          "Location Code" := LocationWhite.Code;
          "Item No." := Item."No.";

          IF UseBaseUOM THEN BEGIN
            "Unit of Measure Code" := Item."Base Unit of Measure";
            "Qty. per Unit of Measure" := 1;
          END ELSE BEGIN
            "Unit of Measure Code" := ItemUnitOfMeasure.Code;
            "Qty. per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure";
          END;
          UseBaseUOM := ItemUnitOfMeasure.NEXT = 0;

          VALIDATE(Quantity,10 * LibraryRandom.RandIntInRange(1,10));
          IF UseLots AND (NumberOfEqualLots <= 0) THEN
            "Lot No." := LibraryUtility.GenerateGUID;
          FindNextBin("Bin Code",Bin,LocationWhite.Code,FALSE,TRUE,TRUE);  // Find PICK Bin.
          VALIDATE("Bin Code",Bin.Code);
          INSERT;
          NumberOfEqualLots -= 1;
        END;
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseOrderAndPutAwayWithData@247(VAR TempWarehouseEntry@1000 : TEMPORARY Record 7312);
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      WarehouseActivityLine@1003 : Record 5767;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      WITH TempWarehouseEntry DO BEGIN
        FINDSET;
        REPEAT
          CreatePurchaseLineWithUOMAndLotNo(
            PurchaseLine,PurchaseHeader,"Item No.","Unit of Measure Code","Location Code",
            Quantity,"Lot No.");
        UNTIL NEXT = 0;
      END;
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);
      PlaceToBinsAndRegisterWarehouseActivity(
        TempWarehouseEntry,WarehouseActivityLine."Source Document"::"Purchase Order",
        PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE ReorganizeDataForWarehouse@241(VAR TempWarehouseEntry@1000 : TEMPORARY Record 7312);
    VAR
      QtyToShipBase@1003 : Decimal;
      FirstLotNo@1002 : Code[20];
    BEGIN
      WITH TempWarehouseEntry DO BEGIN
        RESET;
        FINDFIRST;
        // First line
        FirstLotNo := "Lot No.";
        QtyToShipBase := "Qty. per Unit of Measure" - 1;
        SetQtyAndLotValues(TempWarehouseEntry,Quantity - 1,'');
        MODIFY;
        NEXT;
        // Second line
        SetQtyAndLotValues(
          TempWarehouseEntry,Quantity + ROUND(QtyToShipBase / "Qty. per Unit of Measure",0.00001),'');
        MODIFY;
        FINDLAST;
        // Last line
        "Entry No." += 1;
        Dedicated := FALSE; // "New Line" flag
        SetQtyAndLotValues(TempWarehouseEntry,ROUND(1 / "Qty. per Unit of Measure",0.00001),FirstLotNo);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateAndReleaseTransferOrderWithData@243(VAR TransferHeader@1008 : Record 5740;VAR TempWarehouseEntry@1000 : TEMPORARY Record 7312;ToLocationCode@1001 : Code[10];LotsAssignment@1006 : 'Partial,Complete');
    VAR
      TransferLine@1003 : Record 5741;
      PartQuantity@1007 : Decimal;
      Direction@1005 : 'Outbound,Inbound';
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,LocationWhite.Code,ToLocationCode,LocationIntransit.Code);
      WITH TempWarehouseEntry DO BEGIN
        FINDSET;
        REPEAT
          ProcessTransferLineWithData(TempWarehouseEntry,TransferHeader,TransferLine);
          CASE LotsAssignment OF
            LotsAssignment::Partial:
              BEGIN
                PartQuantity := LibraryRandom.RandIntInRange(1,Quantity * TransferLine."Qty. per Unit of Measure");
                LibraryVariableStorage.Enqueue(ItemTrackingLineHandling::Create);
                LibraryVariableStorage.Enqueue("Lot No.");
                LibraryVariableStorage.Enqueue(PartQuantity);
                TransferLine.OpenItemTrackingLines(Direction::Outbound);

                LibraryVariableStorage.Enqueue(ItemTrackingLineHandling::"Use Existing");
                LibraryVariableStorage.Enqueue("Lot No.");
                LibraryVariableStorage.Enqueue(Quantity * TransferLine."Qty. per Unit of Measure");
                TransferLine.OpenItemTrackingLines(Direction::Outbound);
              END;
            LotsAssignment::Complete:
              BEGIN
                LibraryVariableStorage.Enqueue(ItemTrackingLineHandling::Create);
                LibraryVariableStorage.Enqueue("Lot No.");
                LibraryVariableStorage.Enqueue(Quantity * TransferLine."Qty. per Unit of Measure");
                TransferLine.OpenItemTrackingLines(Direction::Outbound);
              END;
          END;
        UNTIL NEXT = 0;
      END;
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE AddBinsToLocation@245(LocationCode@1000 : Code[10];Receive@1002 : Boolean;Ship@1006 : Boolean;PutAway@1003 : Boolean;Pick@1004 : Boolean;IsCrossDock@1007 : Boolean;NumberOfBins@1005 : Integer);
    VAR
      Bin@1001 : Record 7354;
    BEGIN
      FindBin(Bin,LocationCode,Receive,PutAway,Pick);
      LibraryWarehouse.CreateNumberOfBins(
        LocationCode,LibraryWarehouse.GetZoneForBin(LocationCode,Bin.Code),
        LibraryWarehouse.SelectBinType(Receive,Ship,PutAway,Pick),NumberOfBins,IsCrossDock);
    END;

    LOCAL PROCEDURE ProcessTransferLineWithData@240(VAR TempWarehouseEntry@1000 : TEMPORARY Record 7312;TransferHeader@1001 : Record 5740;VAR TransferLine@1002 : Record 5741);
    BEGIN
      WITH TempWarehouseEntry DO BEGIN
        IF Dedicated THEN BEGIN // "New Line" flag
          LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,"Item No.",Quantity);
          TransferLine.VALIDATE("Unit of Measure Code","Unit of Measure Code");
        END ELSE
          TransferLine.VALIDATE(Quantity,TransferLine.Quantity + Quantity);
      END;
      TransferLine.MODIFY;
    END;

    LOCAL PROCEDURE GetTotalBaseQtyOfData@227(VAR TempWarehouseEntry@1000 : TEMPORARY Record 7312;VAR BinCodeFilter@1001 : Text) Result : Decimal;
    BEGIN
      BinCodeFilter := '<>''''';
      WITH TempWarehouseEntry DO BEGIN
        FINDSET;
        REPEAT
          BinCodeFilter += '&<>' + "Bin Code";
          Result += Quantity * "Qty. per Unit of Measure";
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetTotalBaseQty@234(VAR RegisteredWhseActivityLine@1000 : Record 5773;BinCodeFilter@1001 : Text) Result : Decimal;
    BEGIN
      WITH RegisteredWhseActivityLine DO BEGIN
        SETRANGE("Action Type","Action Type"::Place);
        SETFILTER("Bin Code",BinCodeFilter);
        FINDSET;
        REPEAT
          Result += Quantity * "Qty. per Unit of Measure";
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetItemUOMCodeFilter@262(ItemNo@1000 : Code[20]) Result : Text;
    VAR
      ItemUnitOfMeasure@1001 : Record 5404;
    BEGIN
      Result := '<>''''';
      WITH ItemUnitOfMeasure DO BEGIN
        SETRANGE("Item No.",ItemNo);
        FINDSET;
        REPEAT
          Result += '&<>' + Code;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE SetQtyAndLotValues@272(VAR TempWarehouseEntry@1000 : TEMPORARY Record 7312;Qty@1001 : Decimal;LotNo@1002 : Code[20]);
    BEGIN
      TempWarehouseEntry.VALIDATE(Quantity,Qty);
      IF LotNo <> '' THEN
        TempWarehouseEntry.VALIDATE("Lot No.",LotNo);
    END;

    LOCAL PROCEDURE CalculateBinReplenishmentOnMovementWorksheet@119(ItemNo@1004 : Code[20];LocationCode@1003 : Code[10]);
    VAR
      WhseWorksheetTemplate@1000 : Record 7328;
      WhseWorksheetName@1001 : Record 7327;
      BinContent@1002 : Record 7302;
    BEGIN
      LibraryWarehouse.SelectWhseWorksheetTemplate(WhseWorksheetTemplate,WhseWorksheetTemplate.Type::Movement);
      LibraryWarehouse.SelectWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationWhite.Code);
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.FINDFIRST;
      LibraryWarehouse.CalculateBinReplenishment(BinContent,WhseWorksheetName,LocationCode,TRUE,FALSE,FALSE);
    END;

    LOCAL PROCEDURE CopyReservationEntry@9(VAR ReservationEntry2@1000 : Record 337;ItemNo@1001 : Code[20]);
    VAR
      ReservationEntry@1002 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.FINDSET;
      REPEAT
        ReservationEntry2.INIT;
        ReservationEntry2 := ReservationEntry;
        ReservationEntry2.INSERT;
      UNTIL ReservationEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@91(VAR ProductionBOMHeader@1000 : Record 99000771;ItemNo@1170000001 : Code[20];UnitOfMeasureCode@1170000000 : Code[10];QtyPer@1001 : Decimal;Type@1005 : Option);
    VAR
      ProductionBOMLine@1002 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,UnitOfMeasureCode);
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',Type,ItemNo,QtyPer);  // Value required for test.
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOMWithUOM@221(VAR ItemUnitOfMeasure@1004 : Record 5404;VAR ParentItem@1006 : Record 27;ComponentItemNo@1007 : Code[20];VAR QtyPer@1000 : Decimal;Type@1002 : Option);
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
    BEGIN
      QtyPer := LibraryRandom.RandIntInRange(2,10);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,ParentItem."No.",LibraryRandom.RandIntInRange(2,10));
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ComponentItemNo,ItemUnitOfMeasure.Code,QtyPer,Type);
      UpdateProductionBomAndRoutingOnItem(ParentItem,ProductionBOMHeader."No.",'');
    END;

    LOCAL PROCEDURE CreateAndCertifiyRouting@89(VAR RoutingHeader@1000 : Record 99000763);
    VAR
      RoutingLine@1001 : Record 99000764;
      WorkCenter@1002 : Record 99000754;
    BEGIN
      WorkCenter.FINDFIRST;
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'',FORMAT(LibraryRandom.RandInt(10)),RoutingLine.Type::"Work Center",WorkCenter."No.");
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@94(VAR ItemJournalLine@1000 : Record 83;EntryType@1004 : Option;ItemNo@1003 : Code[20];Quantity@1005 : Decimal;LocationCode@1001 : Code[10];BinCode@1006 : Code[20];Tracking@1002 : Boolean);
    BEGIN
      ItemJournalBatch.VALIDATE("No. Series",'');
      ItemJournalBatch.MODIFY(TRUE);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
      IF Tracking THEN
        ItemJournalLine.OpenItemTrackingLines(FALSE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostOutputJournalLineWithItemTracking@153(VAR ItemJournalLine@1000 : Record 83;ProdOrderLine@1001 : Record 5406;OutputQuantity@1002 : Decimal);
    BEGIN
      LibraryInventory.ClearItemJournal(OutputItemJournalTemplate,OutputItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::Output,ProdOrderLine."Item No.",0);  // Use 0 for Quantity.
      ItemJournalLine.VALIDATE("Source No.",ProdOrderLine."Item No.");
      ItemJournalLine.VALIDATE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.VALIDATE("Order No.",ProdOrderLine."Prod. Order No.");
      ItemJournalLine.VALIDATE("Order Line No.",ProdOrderLine."Line No.");
      ItemJournalLine.VALIDATE("Location Code",ProdOrderLine."Location Code");
      ItemJournalLine.VALIDATE("Bin Code",ProdOrderLine."Bin Code");
      ItemJournalLine.VALIDATE("Output Quantity",OutputQuantity);
      ItemJournalLine.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Serial No.");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      ItemJournalLine.OpenItemTrackingLines(FALSE);
      LibraryInventory.PostItemJournalLine(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateReleasedPurchaseOrder@236(VAR PurchaseHeader@1000 : Record 38);
    VAR
      Item@1007 : Record 27;
      ItemUnitOfMeasure@1011 : Record 5404;
      Quantity@1013 : Decimal;
    BEGIN
      CreateItem(Item,ItemTrackingCode.Code);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandDec(10,5) + 1);  // Decimal value required for multiple UOM with different conversion rate.
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrderWithMultipleUOM(
        PurchaseHeader,Item."No.",ItemUnitOfMeasure.Code,'',LocationWhite.Code,Quantity,TRUE);  // Use TRUE for with Tracking.
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentAndPickForItemAtLocationFromDifferentBins@334(VAR SalesHeader@1002 : Record 36;VAR WarehouseShipmentHeader@1001 : Record 7320;LocationCode@1005 : Code[10];ItemNo@1007 : Code[20];NoOfPurchLines@1006 : Integer;PurchItemInLineBaseQty@1000 : Decimal;SalesQtyInSalesUOM@1004 : ARRAY [2] OF Decimal);
    VAR
      PurchaseHeader@1009 : Record 38;
    BEGIN
      CreateAndReleasePurchaseOrderAtLocationWithQtyOfLinesForTheSameItem(
        PurchaseHeader,LocationCode,ItemNo,PurchItemInLineBaseQty,NoOfPurchLines);
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);
      PlacePutawayToPickZoneDifferentBins(PurchaseHeader."No.");
      CreateAndReleaseSalesOrderAtLocationWithTwoLinesOfSingleItem(SalesHeader,ItemNo,LocationCode,SalesQtyInSalesUOM);
      CreateWarehouseShipmentAndPickFromSalesOrder(WarehouseShipmentHeader,SalesHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentAndPickFromSalesOrder@304(VAR WarehouseShipmentHeader@1001 : Record 7320;SalesHeader@1000 : Record 36);
    VAR
      WarehouseShipmentLine@1002 : Record 7321;
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseReceiptFromPurchaseOrder@97(PurchaseHeader@1000 : Record 38);
    VAR
      WarehouseReceiptLine@1001 : Record 7317;
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      PostWarehouseReceipt(WarehouseReceiptLine."No.");
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseReceiptFromTransferOrder@101(VAR TransferHeader@1000 : Record 5740);
    VAR
      WarehouseReceiptLine@1001 : Record 7317;
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromTO(TransferHeader);
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Inbound Transfer",TransferHeader."No.");
      LibraryVariableStorage.Enqueue(STRSUBSTNO(TransferOrderDeleted,TransferHeader."No."));  // Enqueue for MessageHandler.
      PostWarehouseReceipt(WarehouseReceiptLine."No.");
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseShipmentFromSalesOrder@29(VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];ItemUnitOfMeasureCode@1003 : Code[10];LocationCode@1004 : Code[10];Quantity@1005 : Decimal;Tracking@1008 : Boolean);
    VAR
      SalesHeader@1000 : Record 36;
      WarehouseShipmentHeader@1006 : Record 7320;
      WarehouseShipmentLine@1009 : Record 7321;
      WarehouseActivityLine@1007 : Record 5767;
    BEGIN
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,ItemNo,ItemUnitOfMeasureCode,LocationCode,Quantity,Tracking);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);  // Use FALSE for only Shipment.
    END;

    LOCAL PROCEDURE CreateAndPostWhseShptFromSalesOrderUsingMovement@230(VAR SalesHeaderNo@1002 : Code[20]);
    BEGIN
      RegisterPickFromWarehouseShipmentCreatedBeforeMoveItemFromProdcutionBinToPickBin(
        SalesHeaderNo,ItemTrackingMode::"Assign Lot No.",ItemTrackingCode.Code,FALSE,TRUE); // Use Lot Item Tracking.

      PostAndInvoiceWhseShpt(SalesHeaderNo);
    END;

    LOCAL PROCEDURE CreateAndRefreshProductionOrder@98(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];LocationCode@1003 : Code[10];BinCode@1004 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.VALIDATE("Bin Code",BinCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndRegisterWarehouseReclassJournal@95(Bin@1000 : Record 7354;ItemNo@1001 : Code[20];Quantity@1007 : Decimal;VAR NewLotNo@1004 : Code[20];VAR NewLotNo2@1003 : Code[20]);
    VAR
      WhseReclassificationJournal@1002 : TestPage 7365;
      DequeueVariable@1005 : Variant;
    BEGIN
      WhseReclassificationJournal.OPENEDIT;
      WhseReclassificationJournal."Item No.".SETVALUE(ItemNo);
      WhseReclassificationJournal."From Zone Code".SETVALUE(Bin."Zone Code");
      WhseReclassificationJournal."From Bin Code".SETVALUE(Bin.Code);
      WhseReclassificationJournal."To Zone Code".SETVALUE(Bin."Zone Code");
      WhseReclassificationJournal."To Bin Code".SETVALUE(Bin.Code);
      WhseReclassificationJournal.Quantity.SETVALUE(Quantity);
      WhseReclassificationJournal.ItemTrackingLines.INVOKE;
      LibraryVariableStorage.Dequeue(DequeueVariable);
      NewLotNo := DequeueVariable;
      LibraryVariableStorage.Dequeue(DequeueVariable);
      NewLotNo2 := DequeueVariable;
      LibraryVariableStorage.Enqueue(PostJournalLines);  // Enqueue for MessageHandler.
      LibraryVariableStorage.Enqueue(LinesRegistered);  // Enqueue for MessageHandler.
      WhseReclassificationJournal.Register.INVOKE;
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithMultipleUOM@90(VAR PurchaseHeader@1000 : Record 38;ItemNo@1002 : Code[20];UnitOfMeasureCode@1003 : Code[10];UnitOfMeasureCode2@1004 : Code[10];LocationCode@1006 : Code[10];Quantity@1005 : Decimal;Tracking@1007 : Boolean);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      IF UnitOfMeasureCode <> '' THEN
        CreatePurchaseLineWithUOM(
          PurchaseLine,PurchaseHeader,ItemNo,UnitOfMeasureCode,LocationCode,Quantity,Tracking,ItemTrackingMode::"Assign Lot No.");
      IF UnitOfMeasureCode2 <> '' THEN
        CreatePurchaseLineWithUOM(
          PurchaseLine,PurchaseHeader,ItemNo,UnitOfMeasureCode2,LocationCode,Quantity,Tracking,ItemTrackingMode::"Assign Lot No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithTwoUOM@285(VAR PurchaseHeader@1000 : Record 38;LocationCode@1006 : Code[10];ItemNo@1002 : Code[20];UnitOfMeasure1Code@1003 : Code[10];Quantity1@1005 : Decimal;UnitOfMeasure2Code@1004 : Code[10];Quantity2@1007 : Decimal);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLineWithUOM(
        PurchaseLine,PurchaseHeader,ItemNo,UnitOfMeasure1Code,LocationCode,Quantity1,FALSE,ItemTrackingMode::" ");
      CreatePurchaseLineWithUOM(
        PurchaseLine,PurchaseHeader,ItemNo,UnitOfMeasure2Code,LocationCode,Quantity2,FALSE,ItemTrackingMode::" ");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@294(VAR PurchaseHeader@1000 : Record 38;LocationCode@1006 : Code[10];ItemNo@1002 : Code[20];Quantity@1005 : Decimal);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderAtLocationWithQtyOfLinesForTheSameItem@298(VAR PurchaseHeader@1000 : Record 38;LocationCode@1006 : Code[10];ItemNo@1002 : Code[20];QuantityOfItemInLine@1005 : Decimal;QuantityOfLines@1003 : Integer);
    VAR
      PurchaseLine@1001 : Record 39;
      i@1004 : Integer;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      PurchaseHeader.VALIDATE("Location Code",LocationCode);
      PurchaseHeader.MODIFY(TRUE);
      FOR i := 1 TO QuantityOfLines DO
        LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,QuantityOfItemInLine);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithItemTracking@179(VAR PurchaseHeader@1000 : Record 38;ItemNo@1002 : Code[20];LocationCode@1006 : Code[10];Quantity@1005 : Decimal;Tracking@1007 : Boolean;ItemTrackingModePar@1003 : Option);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
      IF Tracking THEN BEGIN
        LibraryVariableStorage.Enqueue(ItemTrackingModePar); // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
        PurchaseLine.OpenItemTrackingLines;
      END;
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithItemTracking@183(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];LocationCode@1004 : Code[10];Quantity@1003 : Decimal;Tracking@1006 : Boolean;ItemTrackingModePar@1007 : Option);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
      IF Tracking THEN BEGIN
        LibraryVariableStorage.Enqueue(ItemTrackingModePar); // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
        SalesLine.OpenItemTrackingLines;
      END;
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrder@18(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];UnitOfMeasureCode@1005 : Code[10];LocationCode@1004 : Code[10];Quantity@1003 : Decimal;Tracking@1006 : Boolean);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      CreateSalesLineWithUOM(SalesLine,SalesHeader,ItemNo,UnitOfMeasureCode,LocationCode,Quantity,Tracking,FALSE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithReservation@129(VAR SalesHeader@1000 : Record 36;Item@1002 : Record 27;LocationCode@1003 : Code[10];Quantity@1004 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      CLEAR(SalesHeader);  // Required for multiple Sales Order.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      CreateSalesLineWithUOM(SalesLine,SalesHeader,Item."No.",Item."Base Unit of Measure",LocationCode,Quantity,FALSE,FALSE);
      SalesLine.ShowReservation;
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithShipmentDate@169(VAR SalesHeader@1000 : Record 36;Item@1002 : Record 27;LocationCode@1004 : Code[10];Quantity@1003 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      CreateSalesLineWithUOM(SalesLine,SalesHeader,Item."No.",Item."Base Unit of Measure",LocationCode,Quantity,FALSE,FALSE);
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));  // Value required for test.
      SalesLine.MODIFY(TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderAtLocationWithTwoLinesOfSingleItem@321(VAR SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20];LocationCode@1004 : Code[10];Quantity@1003 : ARRAY [2] OF Decimal);
    VAR
      SalesLine@1001 : Record 37;
      i@1005 : Integer;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.MODIFY(TRUE);
      FOR i := 1 TO 2 DO
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity[i]);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseTransferOrder@167(VAR TransferHeader@1000 : Record 5740;FromLocationCode@1002 : Code[10];ToLocationCode@1003 : Code[10];ItemNo@1004 : Code[20];Quantity@1005 : Decimal;ItemUnitOfMeasure@1006 : Code[10]);
    VAR
      TransferLine@1001 : Record 5741;
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocationCode,LocationIntransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      TransferLine.VALIDATE("Unit of Measure Code",ItemUnitOfMeasure);
      TransferLine.MODIFY(TRUE);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseTransferOrderWithItemTracking@198(VAR TransferHeader@1000 : Record 5740;FromLocationCode@1002 : Code[10];ToLocationCode@1003 : Code[10];ItemNo@1004 : Code[20];Quantity@1005 : Decimal;LastLotNo@1008 : Boolean);
    VAR
      TransferLine@1001 : Record 5741;
      Direction@1006 : 'Outbound,Inbound';
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocationCode,LocationIntransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      LibraryVariableStorage.Enqueue(LastLotNo); // Enqueue LastLotNo for ItemTrackingSummaryPageHandler.
      TransferLine.OpenItemTrackingLines(Direction::Outbound);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseWarehouseShipmentFromSalesOrder@226(ItemNo@1004 : Code[20];BaseUnitofMeasure@1005 : Code[10];LocationCode@1002 : Code[10];Quantity@1003 : Decimal) : Code[20];
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,ItemNo,BaseUnitofMeasure,LocationCode,Quantity,FALSE); // Use FALSE for without Tracking.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindAndReleaseWarehouseShipmentLine(SalesHeader."No.");
      EXIT(SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreateSalesOrderAndPick@336(VAR SalesHeader@1000 : Record 36;LocationCode@1001 : Code[10];ItemNo@1004 : Code[20];UnitofMeasure@1005 : Code[10];Quantity@1003 : Decimal);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,ItemNo,UnitofMeasure,LocationCode,Quantity,FALSE); // Use FALSE for without Tracking.
      CreatePickFromWarehouseShipment(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAssembledItemSalesOrderAndAssemblyOrderPick@305(LocationCode@1001 : Code[10];ItemNo@1004 : Code[20];Quantity@1003 : Decimal);
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      AssemblyHeader@1005 : Record 900;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("Shipment Date",WORKDATE + 1);
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.MODIFY(TRUE);

      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Qty. to Assemble to Order",Quantity);
      SalesLine.VALIDATE("Shipment Date",WORKDATE + 1);
      SalesLine.MODIFY(TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      AssemblyHeader.SETRANGE("Item No.",ItemNo);
      AssemblyHeader.FINDFIRST;
      LibraryAssembly.ReleaseAO(AssemblyHeader);

      LibraryVariableStorage.Enqueue(WhsePickCreatedTxt); // Enqueue for MessageHandler.

      LibraryAssembly.CreateWhsePick(AssemblyHeader,USERID,0,FALSE,FALSE,FALSE);
    END;

    LOCAL PROCEDURE CreateBinWithBinRanking@111(VAR Bin@1001 : Record 7354;LocationCode@1006 : Code[10];BinRanking@1002 : Integer;Receive@1005 : Boolean;Ship@1007 : Boolean;PutAway@1004 : Boolean;Pick@1003 : Boolean);
    VAR
      Zone@1000 : Record 7300;
    BEGIN
      FindZone(Zone,LocationCode,LibraryWarehouse.SelectBinType(Receive,Ship,PutAway,Pick));
      LibraryWarehouse.CreateBin(Bin,Zone."Location Code",LibraryUtility.GenerateGUID,Zone.Code,Zone."Bin Type Code");
      Bin.VALIDATE("Bin Ranking",BinRanking);
      Bin.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBinContent@17(VAR BinContent@1000 : Record 7302;Bin@1001 : Record 7354;ItemNo@1002 : Code[20];UnitOfMeasureCode@1003 : Code[10];MaxQty@1004 : Decimal);
    BEGIN
      LibraryWarehouse.CreateBinContent(BinContent,Bin."Location Code",Bin."Zone Code",Bin.Code,ItemNo,'',UnitOfMeasureCode);
      BinContent.VALIDATE(Fixed,TRUE);
      BinContent.VALIDATE("Bin Type Code",Bin."Bin Type Code");
      BinContent.VALIDATE("Bin Ranking",Bin."Bin Ranking");
      BinContent.VALIDATE("Min. Qty.",MaxQty);
      BinContent.VALIDATE("Max. Qty.",MaxQty);
      BinContent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithProductionBOMWithItemTracking@195(VAR ParentItem@1000 : Record 27;VAR ComponentItem@1001 : Record 27;ItemTrackingCode@1003 : Code[10]);
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
    BEGIN
      CreateItem(ParentItem,ItemTrackingCode);
      CreateItem(ComponentItem,ItemTrackingCode);
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ComponentItem."No.",ComponentItem."Base Unit of Measure",1,BomLineType::Item);
      UpdateProductionBomAndRoutingOnItem(ParentItem,ProductionBOMHeader."No.",'');
    END;

    LOCAL PROCEDURE CreateInventoryPickWithReservation@133(VAR SalesHeader@1000 : Record 36;Item@1002 : Record 27;LocationCode@1005 : Code[10];Quantity@1003 : Decimal);
    VAR
      WarehouseActivityHeader@1004 : Record 5766;
    BEGIN
      CreateAndReleaseSalesOrderWithReservation(SalesHeader,Item,LocationCode,Quantity);
      LibraryVariableStorage.Enqueue(PickCreated);  // Enqueue for MessageHandler.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateItem@5(VAR Item@1000 : Record 27;ItemTrackingCode@1002 : Code[10]);
    BEGIN
      IF ItemTrackingCode <> '' THEN
        LibraryInventory.CreateTrackedItem(
          Item,LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,ItemTrackingCode)
      ELSE
        LibraryInventory.CreateItem(Item);
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@54(VAR ItemTrackingCode@1001 : Record 6502;Serial@1002 : Boolean;Lot@1003 : Boolean;StrictExpirationPosting@1000 : Boolean);
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,Serial,Lot);
      ItemTrackingCode.VALIDATE("SN Warehouse Tracking",Serial);
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",Lot);
      ItemTrackingCode.VALIDATE("Man. Expir. Date Entry Reqd.",StrictExpirationPosting);
      ItemTrackingCode.VALIDATE("Strict Expiration Posting",StrictExpirationPosting);
      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemUnitOfMeasure@6(VAR ItemUnitOfMeasure@1000 : Record 5404;ItemNo@1001 : Code[20];QtyPerUnitOfMeasure@1003 : Decimal);
    BEGIN
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,ItemNo,QtyPerUnitOfMeasure);
    END;

    LOCAL PROCEDURE CreateItemWithMultipleUOM@85(VAR Item@1000 : Record 27;VAR ItemUnitOfMeasureSales@1001 : Record 5404;VAR ItemUnitOfMeasurePutAway@1002 : Record 5404;ItemTrackingCode@1003 : Code[10]);
    BEGIN
      CreateItem(Item,ItemTrackingCode);
      CreateItemUnitOfMeasure(ItemUnitOfMeasureSales,Item."No.",LibraryRandom.RandInt(5) + 1);  // Value required for multiple UOM with different conversion rate.
      CreateItemUnitOfMeasure(ItemUnitOfMeasurePutAway,Item."No.",LibraryRandom.RandInt(5) + 1);  // Value required for multiple UOM with different conversion rate.
      UpdateItemUOM(Item,Item."Base Unit of Measure",ItemUnitOfMeasureSales.Code,ItemUnitOfMeasurePutAway.Code);
    END;

    LOCAL PROCEDURE CreateItemWithNonBaseUOM@279(VAR Item@1000 : Record 27;VAR BaseItemUnitOfMeasure@1001 : Record 5404;VAR NonBaseItemUnitOfMeasure@1002 : Record 5404;QtyPer@1003 : Decimal);
    BEGIN
      CreateItem(Item,'');
      CreateItemUnitOfMeasure(NonBaseItemUnitOfMeasure,Item."No.",QtyPer);
      BaseItemUnitOfMeasure.GET(Item."No.",Item."Base Unit of Measure");
    END;

    LOCAL PROCEDURE CreateItemWithSalesUOM@352(VAR Item@1000 : Record 27;QtyPer@1003 : Decimal);
    VAR
      UnitOfMeasure@1002 : Record 204;
      ItemUnitOfMeasure@1013 : Record 5404;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",UnitOfMeasure.Code,QtyPer);
      Item.VALIDATE("Sales Unit of Measure",ItemUnitOfMeasure.Code);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAssembledItem@268(VAR ParentItem@1001 : Record 27;VAR ChildItem@1000 : Record 27;QtyPer@1002 : Integer);
    VAR
      BOMComponent@1003 : Record 90;
    BEGIN
      LibraryInventory.CreateItem(ParentItem);
      ParentItem.VALIDATE("Replenishment System",ParentItem."Replenishment System"::Assembly);
      ParentItem.VALIDATE("Assembly Policy",ParentItem."Assembly Policy"::"Assemble-to-Order");
      ParentItem.MODIFY(TRUE);

      LibraryInventory.CreateItem(ChildItem);

      LibraryManufacturing.CreateBOMComponent(
        BOMComponent,ParentItem."No.",BOMComponent.Type::Item,ChildItem."No.",1,ParentItem."Base Unit of Measure");
      BOMComponent.VALIDATE("Quantity per",QtyPer);
      BOMComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMovement@21(VAR WhseWorksheetLine@1000 : Record 7326;ItemNo@1001 : Code[20];ItemTrackingModePar@1003 : Option;Tracking@1002 : Boolean);
    BEGIN
      WhseWorksheetLine.SETRANGE("Item No.",ItemNo);
      WhseWorksheetLine.FINDFIRST;
      IF Tracking THEN BEGIN
        LibraryVariableStorage.Enqueue(ItemTrackingModePar);
        LibraryVariableStorage.Enqueue(FALSE);
        WhseWorksheetLine.OpenItemTrackingLines;
      END;
      LibraryWarehouse.WhseSourceCreateDocument(WhseWorksheetLine,0,FALSE,FALSE,FALSE);
    END;

    LOCAL PROCEDURE CreateMovementWorksheetLine@49(Bin@1002 : Record 7354;ItemNo@1001 : Code[20];Quantity@1004 : Decimal);
    VAR
      Bin2@1003 : Record 7354;
      MovementWorksheet@1000 : TestPage 7351;
    BEGIN
      MovementWorksheet.OPENEDIT;
      MovementWorksheet."Item No.".SETVALUE(ItemNo);
      MovementWorksheet."From Zone Code".SETVALUE(Bin."Zone Code");
      MovementWorksheet."From Bin Code".SETVALUE(Bin.Code);
      FindBin(Bin2,Bin."Location Code",FALSE,TRUE,FALSE);  // Find BULK Bin.
      MovementWorksheet."To Zone Code".SETVALUE(Bin2."Zone Code");
      MovementWorksheet."To Bin Code".SETVALUE(Bin2.Code);
      MovementWorksheet.Quantity.SETVALUE(Quantity);
      MovementWorksheet.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateAndRegisterWarehouseMovement@185(LocationCode@1000 : Code[10];ItemNo@1001 : Code[20]);
    VAR
      Bin@1002 : Record 7354;
      WhseWorksheetLine@1003 : Record 7326;
    BEGIN
      FindBin(Bin,LocationWhite.Code,FALSE,TRUE,TRUE); // Find PICK Bin.
      GetBinContentOnMovementWorksheet(WhseWorksheetLine,LocationCode,ItemNo);
      WITH WhseWorksheetLine DO BEGIN
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        VALIDATE("To Zone Code",Bin."Zone Code");
        VALIDATE("To Bin Code",Bin.Code);
        MODIFY(TRUE);
      END;
      CreateMovement(WhseWorksheetLine,ItemNo,ItemTrackingMode::" ",FALSE);
      RegisterWarehouseMovement(ItemNo,'');
    END;

    LOCAL PROCEDURE CreateAndRegisterPutAwayFromPurchaseOrder@190(VAR PurchaseHeader@1000 : Record 38;Location@1003 : Record 14;ItemNo@1001 : Code[20];ItemTrackingModePar@1002 : Option;Qty@1006 : Decimal);
    VAR
      WarehouseActivityLine@1004 : Record 5767;
      Bin@1005 : Record 7354;
    BEGIN
      CreateAndReleasePurchaseOrderWithItemTracking(PurchaseHeader,ItemNo,Location.Code,Qty,TRUE,ItemTrackingModePar);
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);

      Bin.GET(Location.Code,Location."Cross-Dock Bin Code"); // Find Cross Dock Bin.
      UpdateBinOnWarehouseActivityLine(
        Bin,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place);

      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",
        PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE CreateAndRegisterPickFromProductionOrder@192(VAR SalesHeader@1005 : Record 36;ItemLedgerEntry@1009 : Record 32;ItemNo@1006 : Code[20];Serial@1007 : Boolean;Lot@1008 : Boolean);
    VAR
      ProductionOrder@1004 : Record 5405;
      WarehouseActivityLine@1002 : Record 5767;
      OrderType@1001 : 'ItemOrder,ProjectOrder';
    BEGIN
      LibraryVariableStorage.Enqueue(ProductionOrderCreated); // Enqueue for MessageHandler.
      LibraryManufacturing.CreateProductionOrderFromSalesOrder(SalesHeader,ProductionOrder.Status::Released,OrderType::ItemOrder);
      FindProductionOrder(ProductionOrder,ProductionOrder.Status::Released,ItemNo);
      LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);

      UpdateTrackingNoOnWarehouseActivityLine(
        WarehouseActivityLine,ItemLedgerEntry,
        ProductionOrder."No.",WarehouseActivityLine."Action Type"::Take,Serial,Lot);
      UpdateTrackingNoOnWarehouseActivityLine(
        WarehouseActivityLine,ItemLedgerEntry,
        ProductionOrder."No.",WarehouseActivityLine."Action Type"::Place,Serial,Lot);

      RegisterWarehouseActivity(WarehouseActivityLine."Source Document"::"Prod. Consumption",
        ProductionOrder."No.",WarehouseActivityLine."Activity Type"::Pick);

      // Open Production Journal and Post. Handler used -ProductionJournalHandler.
      OpenProductionJournalForReleasedProductionOrder(ItemNo);
    END;

    LOCAL PROCEDURE CreateAndRegisterPickFromWarehouseShipment@194(VAR SalesHeader@1003 : Record 36);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
    END;

    LOCAL PROCEDURE CreatePick@47(VAR WarehouseShipmentHeader@1000 : Record 7320;SourceDocument@1003 : Option;SourceNo@1001 : Code[20]);
    VAR
      WarehouseShipmentLine@1002 : Record 7321;
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,SourceDocument,SourceNo);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreatePickFromWarehouseShipment@32(SalesHeader@1000 : Record 36);
    VAR
      WarehouseShipmentHeader@1007 : Record 7320;
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreatePickFromWarehouseShipmentWithExpirationDate@204(SalesHeader@1000 : Record 36);
    VAR
      WarehouseShipmentHeader@1007 : Record 7320;
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      LibraryVariableStorage.Enqueue(ExpiredItemMsg); // Enqueue value for MessageHandler.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreatePickFromWarehouseShipmentWithReservation@130(VAR SalesHeader@1000 : Record 36;Item@1002 : Record 27;LocationCode@1004 : Code[10];Quantity@1003 : Decimal);
    BEGIN
      CreateAndReleaseSalesOrderWithReservation(SalesHeader,Item,LocationCode,Quantity);
      CreatePickFromWarehouseShipment(SalesHeader);
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithUOM@72(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1001 : Record 38;ItemNo@1002 : Code[20];UnitOfMeasureCode@1004 : Code[10];LocationCode@1005 : Code[10];Quantity@1003 : Decimal;Tracking@1006 : Boolean;ItemTrackingModePar@1009 : Option);
    VAR
      ReservationEntry@1007 : Record 337;
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
      IF Tracking THEN BEGIN
        LibraryVariableStorage.Enqueue(ItemTrackingModePar);  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
        PurchaseLine.OpenItemTrackingLines;
        ReservationEntry.SETRANGE("Item No.",ItemNo);
        ReservationEntry.MODIFYALL("Expiration Date",WORKDATE,TRUE);
      END
    END;

    LOCAL PROCEDURE CreateCreditMemoUsingCopyPurchase@231(PurchHeaderNo@1000 : Code[20]);
    VAR
      PurchaseHeader@1001 : Record 38;
      CopyDocMgt@1003 : Codeunit 6620;
      DocType@1002 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
    BEGIN
      WITH PurchaseHeader DO BEGIN
        INIT;
        VALIDATE("Document Type","Document Type"::"Credit Memo");
        INSERT(TRUE);
      END;

      CopyDocMgt.SetProperties(
        TRUE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);
      DocType := DocType::"Posted Receipt";

      CopyDocMgt.CopyPurchDoc(DocType,GetPurchRcptNo(PurchHeaderNo),PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateCreditMemoUsingCopySales@249(SalesHeaderNo@1000 : Code[20]);
    VAR
      SalesHeader@1002 : Record 36;
      CopyDocMgt@1003 : Codeunit 6620;
      DocType@1001 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
    BEGIN
      WITH SalesHeader DO BEGIN
        INIT;
        VALIDATE("Document Type","Document Type"::"Credit Memo");
        INSERT(TRUE);
      END;

      CopyDocMgt.SetProperties(
        TRUE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);
      DocType := DocType::"Posted Invoice";

      CopyDocMgt.CopySalesDoc(DocType,GetSalesInvoiceNo(SalesHeaderNo),SalesHeader);
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithUOMAndLotNo@229(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1001 : Record 38;ItemNo@1002 : Code[20];UnitOfMeasureCode@1004 : Code[10];LocationCode@1005 : Code[10];Quantity@1003 : Decimal;LotNo@1009 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);

      IF LotNo = '' THEN
        EXIT;

      LibraryVariableStorage.Enqueue(ItemTrackingLineHandling::Create);
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(PurchaseLine."Quantity (Base)");
      PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE PlaceToBinsAndRegisterWarehouseActivity@233(VAR TempWarehouseEntry@1003 : TEMPORARY Record 7312;SourceDocument@1002 : Option;SourceNo@1001 : Code[20];ActivityType@1000 : Option);
    VAR
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Action Type","Action Type"::Place);
        FINDSET;
        REPEAT
          TempWarehouseEntry.SETRANGE("Line No.","Source Line No.");
          TempWarehouseEntry.FINDFIRST;
          VALIDATE(
            "Zone Code",
            LibraryWarehouse.GetZoneForBin(TempWarehouseEntry."Location Code",TempWarehouseEntry."Bin Code"));
          VALIDATE("Bin Code",TempWarehouseEntry."Bin Code");
          MODIFY;
        UNTIL NEXT = 0;
      END;
      RegisterWarehouseActivity(SourceDocument,SourceNo,ActivityType);
    END;

    LOCAL PROCEDURE CreateSalesLineWithUOM@78(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;ItemNo@1002 : Code[20];UnitOfMeasureCode@1004 : Code[10];LocationCode@1005 : Code[10];Quantity@1003 : Decimal;Tracking@1006 : Boolean;LastLotNo@1007 : Boolean);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
      IF Tracking THEN BEGIN
        LibraryVariableStorage.Enqueue(LastLotNo);  // Enqueue LastLotNo at index 1 for ItemTrackingSummaryPageHandler.
        SalesLine.OpenItemTrackingLines;
      END
    END;

    LOCAL PROCEDURE CreateSalesLineForReleasedSalesOrder@202(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;ItemNo@1002 : Code[20];UnitOfMeasureCode@1004 : Code[10];LocationCode@1005 : Code[10];Quantity@1003 : Decimal;Tracking@1006 : Boolean;LastLotNo@1007 : Boolean);
    BEGIN
      LibrarySales.ReopenSalesDocument(SalesHeader);
      CreateSalesLineWithUOM(SalesLine,SalesHeader,ItemNo,UnitOfMeasureCode,LocationCode,Quantity,Tracking,LastLotNo);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptHeaderWithLocation@45(VAR WarehouseReceiptHeader@1000 : Record 7316;LocationCode@1001 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateWarehouseReceiptHeader(WarehouseReceiptHeader);
      WarehouseReceiptHeader.VALIDATE("Location Code",LocationCode);
      WarehouseReceiptHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentHeaderWithLocation@173(VAR WarehouseShipmentHeader@1000 : Record 7320;LocationCode@1001 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader.VALIDATE("Location Code",LocationCode);
      WarehouseShipmentHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentWithGetSourceDocument@171(VAR WarehouseShipmentHeader@1000 : Record 7320;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10]);
    VAR
      WarehouseSourceFilter@1001 : Record 5771;
    BEGIN
      CreateWarehouseShipmentHeaderWithLocation(WarehouseShipmentHeader,LocationCode);
      LibraryWarehouse.CreateWarehouseSourceFilter(WarehouseSourceFilter,WarehouseSourceFilter.Type::Outbound);
      WarehouseSourceFilter.VALIDATE("Sales Orders",TRUE);
      WarehouseSourceFilter.VALIDATE("Item No. Filter",ItemNo);
      WarehouseSourceFilter.MODIFY(TRUE);
      LibraryWarehouse.GetSourceDocumentsShipment(WarehouseShipmentHeader,WarehouseSourceFilter,LocationWhite3.Code);
    END;

    LOCAL PROCEDURE CreateWhseWorksheetLine@127(VAR WhseWorksheetLine@1000 : Record 7326;FromBin@1002 : Record 7354;ToBin@1003 : Record 7354;ItemNo@1001 : Code[20];Quantity@1004 : Decimal);
    BEGIN
      LibraryWarehouse.CreateWhseWorksheetLine(
        WhseWorksheetLine,WhseWorksheetLine."Worksheet Template Name",WhseWorksheetLine.Name,LocationWhite.Code,0);
      WhseWorksheetLine.VALIDATE("Item No.",ItemNo);
      WhseWorksheetLine.VALIDATE("From Zone Code",FromBin."Zone Code");
      WhseWorksheetLine.VALIDATE("From Bin Code",FromBin.Code);
      WhseWorksheetLine.VALIDATE("To Zone Code",ToBin."Zone Code");
      WhseWorksheetLine.VALIDATE("To Bin Code",ToBin.Code);
      WhseWorksheetLine.VALIDATE(Quantity,Quantity);
      WhseWorksheetLine.VALIDATE("Qty. to Handle",Quantity);
      WhseWorksheetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateNegativeAdjmtWarehouseJournalLine@284(Item@1002 : Record 27;LocationCode@1000 : Code[10];BinCode@1005 : Code[20];Quantity@1003 : Decimal);
    VAR
      Bin@1004 : Record 7354;
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      Bin.GET(LocationCode,BinCode);
      WarehouseJournalSetup(Bin."Location Code");
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",
        Bin."Zone Code",'',WarehouseJournalLine."Entry Type"::"Negative Adjmt.",Item."No.",-Quantity);
      WarehouseJournalLine.VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
      WarehouseJournalLine.VALIDATE("Bin Code",Bin.Code);
      WarehouseJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE MockMovement@260(VAR WarehouseActivityHeader@1000 : Record 5766;ItemNo@1001 : Code[20];QtyBase@1003 : Decimal);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
      Bin@1004 : Record 7354;
    BEGIN
      CLEAR(WarehouseActivityHeader);
      WITH WarehouseActivityHeader DO BEGIN
        VALIDATE("Location Code",LocationWhite.Code);
        VALIDATE(Type,Type::Movement);
        INSERT(TRUE);
      END;

      FindBin(Bin,LocationWhite.Code,FALSE,TRUE,TRUE); // Pick Bin
      MockWhseActivityLine(
        WarehouseActivityHeader,WarehouseActivityLine."Action Type"::Take,ItemNo,Bin.Code,QtyBase,0);
      FindBin(Bin,LocationWhite.Code,TRUE,FALSE,FALSE); // Receive Bin
      MockWhseActivityLine(
        WarehouseActivityHeader,WarehouseActivityLine."Action Type"::Place,ItemNo,Bin.Code,QtyBase,0);
    END;

    LOCAL PROCEDURE MockWhseActivityLine@261(WarehouseActivityHeader@1000 : Record 5766;ActionType@1004 : Option;ItemNo@1001 : Code[20];BinCode@1005 : Code[20];QtyBase@1003 : Decimal;QtyToHandleBase@1007 : Decimal);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        "Activity Type" := WarehouseActivityHeader.Type;
        "No." := WarehouseActivityHeader."No.";

        SETRANGE("Activity Type","Activity Type");
        SETRANGE("No.","No.");
        IF FINDLAST THEN;

        INIT;
        "Line No." := "Line No." + 10000;
        "Action Type" := ActionType;
        "Location Code" := WarehouseActivityHeader."Location Code";
        "Bin Code" := BinCode;
        "Item No." := ItemNo;
        "Qty. (Base)" := QtyBase;
        "Qty. to Handle (Base)" := QtyToHandleBase;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockFinProdOrderLine@265(ItemNo@1001 : Code[20];ItemUoMCode@1002 : Code[10]);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      WITH ProdOrderLine DO BEGIN
        INIT;
        Status := Status::Finished;
        "Item No." := ItemNo;
        "Remaining Quantity" := LibraryRandom.RandInt(5);
        "Unit of Measure Code" := ItemUoMCode;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockFinProdOrderComp@254(ItemNo@1001 : Code[20];ItemUoMCode@1002 : Code[10]);
    VAR
      ProdOrderComp@1000 : Record 5407;
    BEGIN
      WITH ProdOrderComp DO BEGIN
        INIT;
        Status := Status::Finished;
        "Item No." := ItemNo;
        "Remaining Quantity" := LibraryRandom.RandInt(5);
        "Unit of Measure Code" := ItemUoMCode;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE DeleteWarehouseActivity@132(ActivityType@1001 : Option;No@1002 : Code[20]);
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      WarehouseActivityHeader.GET(ActivityType,No);
      WarehouseActivityHeader.DELETE(TRUE);
    END;

    LOCAL PROCEDURE DequeueLotNo@134(VAR LotNo@1001 : Code[20]);
    VAR
      DequeueVariable@1000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LotNo := DequeueVariable;
    END;

    LOCAL PROCEDURE EnqueueValuesToVerifyBOMCostSharesPage@223(ItemNo@1002 : Code[20];UnitofMeasureCode@1004 : Code[10];BOMUnitofMeasureCode@1003 : Code[10];QtyPerParent@1001 : Decimal;QtyPerTopItem@1000 : Decimal;BOMLineQtyPer@1005 : Decimal);
    BEGIN
      LibraryVariableStorage.Enqueue(ItemNo);
      LibraryVariableStorage.Enqueue(UnitofMeasureCode);
      LibraryVariableStorage.Enqueue(BOMUnitofMeasureCode);
      LibraryVariableStorage.Enqueue(QtyPerParent);
      LibraryVariableStorage.Enqueue(QtyPerTopItem);
      LibraryVariableStorage.Enqueue(BOMLineQtyPer);
    END;

    LOCAL PROCEDURE GetSalesInvoiceNo@248(SalesHeaderNo@1000 : Code[20]) : Code[20];
    VAR
      SalesInvoiceHeader@1001 : Record 112;
    BEGIN
      WITH SalesInvoiceHeader DO BEGIN
        SETRANGE("Order No.",SalesHeaderNo);
        FINDFIRST;
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE GetPurchRcptNo@259(PurchHeaderNo@1001 : Code[20]) : Code[20];
    VAR
      PurchRcptHeader@1000 : Record 120;
    BEGIN
      WITH PurchRcptHeader DO BEGIN
        SETRANGE("Order No.",PurchHeaderNo);
        FINDFIRST;
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE FillWhseItemTrackingLines@115(VAR WhseItemTrackingLines@1001 : TestPage 6550;OldLotNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      NewLotNo@1000 : Code[20];
    BEGIN
      NewLotNo := LibraryUtility.GenerateGUID;
      LibraryVariableStorage.Enqueue(NewLotNo);  // Enqueue NewLotNo.
      WhseItemTrackingLines."Lot No.".SETVALUE(OldLotNo);
      WhseItemTrackingLines."New Lot No.".SETVALUE(NewLotNo);
      WhseItemTrackingLines.Quantity.SETVALUE(Quantity);
    END;

    LOCAL PROCEDURE FindBin@3(VAR Bin@1000 : Record 7354;LocationCode@1001 : Code[10];Receive@1006 : Boolean;PutAway@1004 : Boolean;Pick@1002 : Boolean);
    VAR
      Zone@1003 : Record 7300;
    BEGIN
      FindZone(Zone,LocationCode,LibraryWarehouse.SelectBinType(Receive,FALSE,PutAway,Pick));
      LibraryWarehouse.FindBin(Bin,Zone."Location Code",Zone.Code,1) // Use 1 for Index.
    END;

    LOCAL PROCEDURE FindNextBin@242(BinCode@1005 : Code[20];VAR Bin@1000 : Record 7354;LocationCode@1001 : Code[10];Receive@1006 : Boolean;PutAway@1004 : Boolean;Pick@1002 : Boolean);
    VAR
      Zone@1003 : Record 7300;
    BEGIN
      FindZone(Zone,LocationCode,LibraryWarehouse.SelectBinType(Receive,FALSE,PutAway,Pick));
      LibraryWarehouse.FindBin(Bin,Zone."Location Code",Zone.Code,1); // Use 1 for Index.
      IF BinCode = '' THEN
        EXIT;
      WITH Bin DO BEGIN
        FINDSET;
        REPEAT
          IF Code = BinCode THEN
            IF NEXT = 0 THEN
              Assert.Fail(STRSUBSTNO(CouldNotFindBinErr,BinCode))
            ELSE
              EXIT;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FindBinContent@16(VAR BinContent@1000 : Record 7302;Bin@1001 : Record 7354;ItemNo@1002 : Code[20]);
    BEGIN
      BinContent.SETRANGE("Location Code",Bin."Location Code");
      BinContent.SETRANGE("Zone Code",Bin."Zone Code");
      BinContent.SETRANGE("Bin Code",Bin.Code);
      BinContent.SETRANGE("Item No.",ItemNo);
    END;

    LOCAL PROCEDURE FindBOMBufferLine@252(VAR BOMBuffer@1000 : Record 5870;ItemNo@1001 : Code[20]);
    BEGIN
      WITH  BOMBuffer DO BEGIN
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",ItemNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@149(VAR ItemLedgerEntry@1000 : Record 32;EntryType@1001 : Option;ItemNo@1002 : Code[20];UnitOfMeasureCode@1003 : Code[10]);
    BEGIN
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Unit of Measure Code",UnitOfMeasureCode);
      ItemLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindProductionOrderLine@152(VAR ProdOrderLine@1000 : Record 5406;ItemNo@1001 : Code[20]);
    BEGIN
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      ProdOrderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindProductionOrder@189(VAR ProductionOrder@1000 : Record 5405;Status@1001 : Option;SourceNo@1002 : Code[20]);
    BEGIN
      ProductionOrder.SETRANGE(Status,Status);
      ProductionOrder.SETRANGE("Source No.",SourceNo);
      ProductionOrder.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityLineForPick@191(VAR WarehouseActivityLine@1001 : Record 5767;SourceDocument@1000 : Option;SourceNo@1002 : Code[20];ActivityType@1003 : Option;ActionType@1004 : Option);
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Source Document",SourceDocument);
        SETRANGE("Source No.",SourceNo);
        SETRANGE("Activity Type",ActivityType);
        SETRANGE("Action Type",ActionType);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindWarehouseActivityLinesPairForPick@277(VAR WarehouseActivityLineTake@1001 : Record 5767;VAR WarehouseActivityLinePlace@1005 : Record 5767;SourceDocument@1000 : Option;SourceNo@1002 : Code[20]);
    BEGIN
      FindWarehouseActivityLineForPick(
        WarehouseActivityLineTake,SourceDocument,SourceNo,WarehouseActivityLineTake."Activity Type"::Pick,
        WarehouseActivityLineTake."Action Type"::Take);
      FindWarehouseActivityLineForPick(
        WarehouseActivityLinePlace,SourceDocument,SourceNo,WarehouseActivityLinePlace."Activity Type"::Pick,
        WarehouseActivityLinePlace."Action Type"::Place);
    END;

    LOCAL PROCEDURE FindRegisteredWhseActivityLine@35(VAR RegisteredWhseActivityLine@1001 : Record 5773;SourceDocument@1000 : Option;SourceNo@1002 : Code[20];ActivityType@1003 : Option;ActionType@1004 : Option);
    BEGIN
      RegisteredWhseActivityLine.SETRANGE("Source Document",SourceDocument);
      RegisteredWhseActivityLine.SETRANGE("Source No.",SourceNo);
      RegisteredWhseActivityLine.SETRANGE("Activity Type",ActivityType);
      RegisteredWhseActivityLine.SETRANGE("Action Type",ActionType);
      RegisteredWhseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindZone@2(VAR Zone@1000 : Record 7300;LocationCode@1001 : Code[10];BinTypeCode@1002 : Code[10]);
    BEGIN
      Zone.SETRANGE("Location Code",LocationCode);
      Zone.SETRANGE("Bin Type Code",BinTypeCode);
      Zone.SETRANGE("Cross-Dock Bin Zone",FALSE);
      Zone.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityLine@8(VAR WarehouseActivityLine@1001 : Record 5767;SourceDocument@1000 : Option;SourceNo@1002 : Code[20];ActivityType@1003 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source Document",SourceDocument);
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityLineWithActionType@296(VAR WarehouseActivityLine@1001 : Record 5767;SourceDocument@1000 : Option;SourceNo@1002 : Code[20];ActivityType@1003 : Option;ActionType@1004 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
    END;

    LOCAL PROCEDURE FindWarehousePickLine@207(VAR WarehouseActivityLine@1001 : Record 5767;SourceDocument@1000 : Option;ItemNo@1002 : Code[20];ActivityType@1003 : Option);
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Source Document",SourceDocument);
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Activity Type",ActivityType);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindWarehouseReceiptLine@11(VAR WarehouseReceiptLine@1002 : Record 7317;SourceDocument@1001 : Option;SourceNo@1000 : Code[20]);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseShipmentLine@141(VAR WarehouseShipmentLine@1002 : Record 7321;SourceDocument@1001 : Option;SourceNo@1000 : Code[20]);
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Document",SourceDocument);
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindAndReleaseWarehouseShipmentLine@224(SalesHeaderNo@1000 : Code[20]);
    VAR
      WarehouseShipmentHeader@1002 : Record 7320;
      WarehouseShipmentLine@1001 : Record 7321;
      WhseShipmentRelease@1003 : Codeunit 7310;
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeaderNo);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      WhseShipmentRelease.Release(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE GetBinContentOnMovementWorksheet@39(VAR WhseWorksheetLine@1001 : Record 7326;LocationCode@1005 : Code[10];ItemNo@1006 : Code[20]);
    VAR
      WhseWorksheetTemplate@1004 : Record 7328;
      WhseWorksheetName@1003 : Record 7327;
      BinContent@1002 : Record 7302;
      WhseInternalPutAwayHeader@1000 : Record 7331;
    BEGIN
      LibraryWarehouse.SelectWhseWorksheetTemplate(WhseWorksheetTemplate,WhseWorksheetTemplate.Type::Movement);
      LibraryWarehouse.SelectWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
      WhseWorksheetLine.DELETEALL(TRUE);
      WhseWorksheetLine.INIT;
      WhseWorksheetLine.VALIDATE("Worksheet Template Name",WhseWorksheetName."Worksheet Template Name");
      WhseWorksheetLine.VALIDATE(Name,WhseWorksheetName.Name);
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      WhseInternalPutAwayHeader.INIT;
      LibraryWarehouse.WhseGetBinContent(BinContent,WhseWorksheetLine,WhseInternalPutAwayHeader,0);  // Use 0 for Movement Worksheet.
    END;

    LOCAL PROCEDURE GetWarehouseDocumentOnPickWorksheet@158(ItemNo@1005 : Code[20];LocationCode@1003 : Code[10];PerWhseDoc@1006 : Boolean);
    VAR
      WhseWorksheetTemplate@1001 : Record 7328;
      WhseWorksheetName@1000 : Record 7327;
      WhsePickRequest@1002 : Record 7325;
      WhseWorksheetLine@1004 : Record 7326;
    BEGIN
      LibraryWarehouse.SelectWhseWorksheetTemplate(WhseWorksheetTemplate,WhseWorksheetTemplate.Type::Pick);
      LibraryWarehouse.SelectWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
      WhsePickRequest.SETRANGE("Location Code",LocationCode);
      LibraryWarehouse.GetOutboundSourceDocuments(WhsePickRequest,WhseWorksheetName,LocationCode);
      IF ItemNo <> '' THEN BEGIN
        WhseWorksheetLine.SETRANGE("Item No.",ItemNo);
        WhseWorksheetLine.FINDFIRST;
      END;
      LibraryWarehouse.CreatePickFromPickWorksheet(
        WhseWorksheetLine,WhseWorksheetLine."Line No.",WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,
        LocationCode,'',0,0,0,FALSE,FALSE,FALSE,FALSE,PerWhseDoc,FALSE,FALSE);
    END;

    LOCAL PROCEDURE CalcTakenForPickQtyBaseOfItemWithUOMInSalesOrder@328(DocNo@1006 : Code[20];ItemNo@1005 : Code[20];UOMCode@1003 : Code[10]) : Decimal;
    VAR
      RegisteredWhseActivityLine@1000 : Record 5773;
    BEGIN
      WITH RegisteredWhseActivityLine DO BEGIN
        SETRANGE("Source Document","Source Document"::"Sales Order");
        SETRANGE("Source No.",DocNo);
        SETRANGE("Activity Type","Activity Type"::Pick);
        SETRANGE("Action Type","Action Type"::Take);
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Unit of Measure Code",UOMCode);
        CALCSUMS("Qty. (Base)");
        EXIT("Qty. (Base)");
      END;
    END;

    LOCAL PROCEDURE RegisterPutAwayForItemWithTwoUOM@342(LocationCode@1006 : Code[10];ItemNo@1005 : Code[20];UnitOfMeasure1Code@1004 : Code[10];Quantity1@1003 : Decimal;UnitOfMeasure2Code@1002 : Code[10];Quantity2@1001 : Decimal);
    VAR
      PurchaseHeader@1000 : Record 38;
      WarehouseActivityLine@1007 : Record 5767;
    BEGIN
      CreateAndReleasePurchaseOrderWithTwoUOM(
        PurchaseHeader,LocationCode,ItemNo,UnitOfMeasure1Code,Quantity1,UnitOfMeasure2Code,Quantity2);

      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",
        PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE RegisterPutAwayForItem@278(LocationCode@1006 : Code[10];ItemNo@1005 : Code[20];Quantity@1003 : Decimal);
    VAR
      PurchaseHeader@1000 : Record 38;
      WarehouseActivityLine@1007 : Record 5767;
    BEGIN
      CreateAndReleasePurchaseOrder(PurchaseHeader,LocationCode,ItemNo,Quantity);

      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",
        PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE MockWarehouseAdjustmentEntry@257(ItemUnitOfMeasure@1001 : Record 5404);
    VAR
      WarehouseEntry@1000 : Record 7312;
      Bin@1002 : Record 7354;
      NewEntryNo@1003 : Integer;
    BEGIN
      Bin.GET(LocationWhite.Code,LocationWhite."Adjustment Bin Code");
      WITH WarehouseEntry DO BEGIN
        FINDLAST;
        NewEntryNo := "Entry No." + 1;
        INIT;
        "Entry No." := NewEntryNo;
        "Item No." := ItemUnitOfMeasure."Item No.";
        "Unit of Measure Code" := ItemUnitOfMeasure.Code;
        "Zone Code" := Bin."Zone Code";
        INSERT;
      END;
    END;

    LOCAL PROCEDURE OpenProductionJournalForReleasedProductionOrder@184(ItemNo@1000 : Code[20]);
    VAR
      ReleasedProductionOrder@1001 : TestPage 99000831;
    BEGIN
      ReleasedProductionOrder.OPENEDIT;
      ReleasedProductionOrder.FILTER.SETFILTER("Source No.",ItemNo);
      ReleasedProductionOrder.ProdOrderLines.ProductionJournal.INVOKE; // Open Production Journal.
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@22(WarehouseReceiptNo@1000 : Code[20]);
    VAR
      WarehouseReceiptHeader@1001 : Record 7316;
    BEGIN
      WarehouseReceiptHeader.GET(WarehouseReceiptNo);
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE PostWarehouseShipment@159(WarehouseShipmentNo@1001 : Code[20]);
    VAR
      WarehouseShipmentHeader@1000 : Record 7320;
    BEGIN
      WarehouseShipmentHeader.GET(WarehouseShipmentNo);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);  // Use FALSE for only Shipment.
    END;

    LOCAL PROCEDURE PostAndInvoiceWhseShpt@239(SalesHeaderNo@1002 : Code[20]);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
      WarehouseShipmentHeader@1000 : Record 7320;
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeaderNo);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,TRUE);
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@46(SourceDocument@1004 : Option;SourceNo@1002 : Code[20];ActivityType@1001 : Option);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE RegisterWarehouseMovement@121(ItemNo@1001 : Code[20];SourceNo@1002 : Code[20]);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::" ",SourceNo,WarehouseActivityLine."Activity Type"::Movement);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE ReserveProductionOrderComponent@157(ItemNo@1001 : Code[20]);
    VAR
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);
      ProdOrderComponent.FINDFIRST;
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(FALSE);
      ProdOrderComponent.OpenItemTrackingLines;
      LibraryVariableStorage.Enqueue(LibraryInventory.GetReservConfirmText);  // Enqueue for MessageHandler.
      ProdOrderComponent.ShowReservation;
    END;

    LOCAL PROCEDURE ReserveQuantityAndPostTransferOrder@170(VAR TransferHeader@1001 : Record 5740);
    VAR
      TransferLine@1000 : Record 5741;
    BEGIN
      TransferLine.SETRANGE("Document No.",TransferHeader."No.");
      TransferLine.FINDFIRST;
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(FALSE);
      TransferLine.OpenItemTrackingLines(0);  // Use 0 for Shipment Item Tracking.
      LibraryVariableStorage.Enqueue(LibraryInventory.GetReservConfirmText);
      TransferLine.ShowReservation;
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE RunBOMCostSharesPage@209(VAR Item@1000 : Record 27);
    VAR
      BOMCostShares@1001 : Page 5872;
    BEGIN
      BOMCostShares.InitItem(Item);
      BOMCostShares.RUN;
    END;

    LOCAL PROCEDURE PlacePutawayToPickZoneDifferentBins@281(PurchaseOrderNo@1000 : Code[20]);
    VAR
      Bin@1015 : Record 7354;
      WarehouseActivityLine@1007 : Record 5767;
    BEGIN
      FindWarehouseActivityLineWithActionType(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseOrderNo,
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place);

      FindBin(Bin,WarehouseActivityLine."Location Code",FALSE,TRUE,TRUE);

      Bin.FINDSET;
      REPEAT
        WarehouseActivityLine.VALIDATE("Zone Code",Bin."Zone Code");
        WarehouseActivityLine.VALIDATE("Bin Code",Bin.Code);
        WarehouseActivityLine.MODIFY(TRUE);
      UNTIL (WarehouseActivityLine.NEXT = 0) AND (Bin.NEXT = 0);

      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseOrderNo,WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE UpdateAlwaysCreatePickLineOnLocation@151(VAR Location@1000 : Record 14;VAR OldAlwaysCreatePickLine@1001 : Boolean;NewAlwaysCreatePickLine@1002 : Boolean);
    BEGIN
      OldAlwaysCreatePickLine := Location."Always Create Pick Line";
      Location.VALIDATE("Always Create Pick Line",NewAlwaysCreatePickLine);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinOnProdOrderLine@110(ItemNo@1001 : Code[20];BinCode@1002 : Code[20]);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      ProdOrderLine.FINDFIRST;
      ProdOrderLine.VALIDATE("Bin Code",BinCode);
      ProdOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinOnPurchaseLine@76(VAR PurchaseLine@1000 : Record 39;BinCode@1001 : Code[20]);
    BEGIN
      PurchaseLine.VALIDATE("Bin Code",BinCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinOnWarehouseActivityLine@56(Bin@1004 : Record 7354;SourceDocument@1003 : Option;SourceNo@1002 : Code[20];ActivityType@1001 : Option;ActionType@1005 : Option);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityLine.FINDSET;
      REPEAT
        WarehouseActivityLine.VALIDATE("Zone Code",Bin."Zone Code");
        WarehouseActivityLine.VALIDATE("Bin Code",Bin.Code);
        WarehouseActivityLine.MODIFY(TRUE);
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateBinWithMaximumCubageAndWeight@26(VAR Bin@1000 : Record 7354;LocationCode@1001 : Code[10];BinCode@1004 : Code[20];MaximumCubage@1002 : Decimal;MaximumWeight@1003 : Decimal);
    BEGIN
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.SETRANGE(Code,BinCode);
      Bin.FINDFIRST;
      Bin.VALIDATE("Maximum Cubage",MaximumCubage);
      Bin.VALIDATE("Maximum Weight",MaximumWeight);
      Bin.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBlockMovementOnBinContent@48(VAR BinContent@1000 : Record 7302;Bin@1001 : Record 7354;ItemNo@1002 : Code[20];BlockMovement@1003 : Option);
    BEGIN
      FindBinContent(BinContent,Bin,ItemNo);
      BinContent.FINDFIRST;
      BinContent.VALIDATE("Block Movement",BlockMovement);
      BinContent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCubageAndWeightOnItemUOM@20(VAR ItemUnitOfMeasure@1000 : Record 5404;Item@1005 : Record 27;Length@1001 : Decimal;Weight@1004 : Decimal);
    BEGIN
      ItemUnitOfMeasure.GET(Item."No.",Item."Base Unit of Measure");
      ItemUnitOfMeasure.VALIDATE(Length,Length);
      ItemUnitOfMeasure.VALIDATE(Width,Length);
      ItemUnitOfMeasure.VALIDATE(Height,Length);
      ItemUnitOfMeasure.VALIDATE(Weight,Weight);
      ItemUnitOfMeasure.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDefaultLocationOnWarehouseEmployee@250(LocationCode@1001 : Code[20]) PreviousDefaultLocationCode : Code[20];
    VAR
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      WITH WarehouseEmployee DO BEGIN
        SETRANGE("User ID",USERID);
        SETRANGE(Default,TRUE);
        FINDFIRST;
        VALIDATE(Default,FALSE);
        MODIFY(TRUE);
        PreviousDefaultLocationCode := "Location Code";

        SETRANGE(Default,FALSE);
        SETRANGE("Location Code",LocationCode);
        FINDFIRST;
        VALIDATE(Default,TRUE);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateExpirationCalculationOnItem@172(VAR Item@1001 : Record 27);
    VAR
      ExpirationCalculation@1000 : DateFormula;
    BEGIN
      EVALUATE(ExpirationCalculation,FORMAT(LibraryRandom.RandInt(5)) + 'M');  // Value required for test.
      Item.VALIDATE("Expiration Calculation",ExpirationCalculation);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateExpirationDateOnReservationEntry@84(ItemNo@1001 : Code[20]);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.FINDLAST;
      ReservationEntry.VALIDATE("Expiration Date",0D);  // Value required for test.
      ReservationEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateExpirationDateOnInventoryPutAway@80(VAR WarehouseActivityLine@1000 : Record 5767;SourceNo@1001 : Code[20];ExpirationDate@1002 : Date);
    BEGIN
      WarehouseActivityLine.SETRANGE("Expiration Date",0D);
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,
        WarehouseActivityLine."Activity Type"::"Invt. Put-away");
      WarehouseActivityLine.VALIDATE("Expiration Date",ExpirationDate);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateExpirationDateOnWhseItemTrackingLine@88(ItemNo@1001 : Code[20];ExpirationDate@1003 : Date);
    VAR
      WhseItemTrackingLine@1000 : Record 6550;
    BEGIN
      WhseItemTrackingLine.SETRANGE("Item No.",ItemNo);
      WhseItemTrackingLine.FINDFIRST;
      WhseItemTrackingLine.VALIDATE("Expiration Date",ExpirationDate);
      WhseItemTrackingLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePickAccordingToFEFOOnLocation@63(VAR Location@1000 : Record 14;VAR OldPickAccordingToFEFO@1001 : Boolean;NewPickAccordingToFEFO@1002 : Boolean);
    BEGIN
      OldPickAccordingToFEFO := Location."Pick According to FEFO";
      Location.VALIDATE("Pick According to FEFO",NewPickAccordingToFEFO);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInventoryUsingWarehouseJournal@113(Bin@1000 : Record 7354;Item@1002 : Record 27;UnitOfMeasureCode@1004 : Code[10];Quantity@1003 : Decimal;Tracking@1005 : Boolean;ItemTrackingModePar@1006 : Option;ExpirationDate@1007 : Date);
    VAR
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      WarehouseJournalSetup(Bin."Location Code");
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",
        Bin."Zone Code",'',WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);
      WarehouseJournalLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      WarehouseJournalLine.VALIDATE("Bin Code",Bin.Code);
      WarehouseJournalLine.MODIFY(TRUE);
      IF Tracking THEN BEGIN
        LibraryVariableStorage.Enqueue(ItemTrackingModePar);  // Enqueue ItemTrackingMode for WhseItemTrackingLinesPageHandler.
        IF ItemTrackingModePar = ItemTrackingMode::"Select Lot No." THEN
          LibraryVariableStorage.Enqueue(FALSE);
        WarehouseJournalLine.OpenItemTrackingLines;
        IF (ItemTrackingModePar = ItemTrackingMode::"Assign Lot No.") AND (ExpirationDate <> 0D) THEN
          UpdateExpirationDateOnWhseItemTrackingLine(Item."No.",ExpirationDate)
      END;
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",TRUE);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateItemUOM@79(VAR Item@1000 : Record 27;PurchUnitOfMeasure@1003 : Code[10];SalesUnitOfMeasure@1001 : Code[10];PutAwayUnitOfMeasureCode@1002 : Code[10]);
    BEGIN
      Item.VALIDATE("Purch. Unit of Measure",PurchUnitOfMeasure);
      Item.VALIDATE("Sales Unit of Measure",SalesUnitOfMeasure);
      Item.VALIDATE("Put-away Unit of Measure Code",PutAwayUnitOfMeasureCode);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemVariantOnPurchaseLine@43(VAR PurchaseLine@1000 : Record 39;VariantCode@1001 : Code[10]);
    BEGIN
      PurchaseLine.VALIDATE("Variant Code",VariantCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateLotNoOnWarehouseActivityLine@100(VAR WarehouseActivityLine@1000 : Record 5767;LotNo@1001 : Code[20]);
    BEGIN
      WarehouseActivityLine.VALIDATE("Lot No.",LotNo);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSerialNoOnWarehouseActivityLine@188(VAR WarehouseActivityLine@1000 : Record 5767;SerialNo@1001 : Code[20]);
    BEGIN
      WarehouseActivityLine.VALIDATE("Serial No.",SerialNo);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateTrackingNoOnWarehouseActivityLine@193(VAR WarehouseActivityLine@1000 : Record 5767;ItemLedgerEntry@1005 : Record 32;DocumentNo@1001 : Code[20];ActionType@1004 : Option;Serial@1002 : Boolean;Lot@1003 : Boolean);
    BEGIN
      FindWarehouseActivityLineForPick(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Prod. Consumption",DocumentNo,
        WarehouseActivityLine."Activity Type"::Pick,ActionType);
      IF Serial THEN
        UpdateSerialNoOnWarehouseActivityLine(WarehouseActivityLine,ItemLedgerEntry."Serial No.");
      IF Lot THEN
        UpdateLotNoOnWarehouseActivityLine(WarehouseActivityLine,ItemLedgerEntry."Lot No.");
    END;

    LOCAL PROCEDURE UpdateOrderTrackingPolicyAsTrackingOnlyOnItem@140(VAR Item@1000 : Record 27);
    BEGIN
      Item.VALIDATE("Order Tracking Policy",Item."Order Tracking Policy"::"Tracking Only");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProductionBomAndRoutingOnItem@93(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20];RoutingNo@1002 : Code[20]);
    BEGIN
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.VALIDATE("Routing No.",RoutingNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateReceiptBinOnLocation@105(Location@1001 : Record 14;ReceiptBinCode@1000 : Code[20]);
    BEGIN
      Location.VALIDATE("Receipt Bin Code",ReceiptBinCode);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityToHandleAndPostInventoryActivity@86(SourceDocument@1003 : Option;SourceNo@1002 : Code[20];ActivityType@1001 : Option;Partial@1005 : Boolean);
    VAR
      WarehouseActivityHeader@1004 : Record 5766;
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityLine.FINDSET;
      REPEAT
        WarehouseActivityLine.VALIDATE("Qty. to Handle",WarehouseActivityLine.Quantity);
        IF Partial THEN
          WarehouseActivityLine.VALIDATE("Qty. to Handle",WarehouseActivityLine.Quantity / 2);  // Value required for test.
        WarehouseActivityLine.MODIFY(TRUE);
      UNTIL WarehouseActivityLine.NEXT = 0;

      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,TRUE);  // Post as Invoice.
    END;

    LOCAL PROCEDURE UpdateQuantityToHandleOnWarehouseActivityLine@131(VAR WarehouseActivityLine@1000 : Record 5767;SourceDocumentType@1003 : Option;SourceNo@1002 : Code[20];Quantity@1001 : Decimal);
    BEGIN
      FindWarehouseActivityLine(
        WarehouseActivityLine,SourceDocumentType,SourceNo,WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityLine.FINDSET;
      REPEAT
        WarehouseActivityLine.VALIDATE("Qty. to Handle",Quantity);
        WarehouseActivityLine.MODIFY(TRUE);
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateQuantityToHandleOnWarehouseActivityLine2@203(VAR WarehouseActivityLine@1000 : Record 5767;SourceDocumentType@1003 : Option;SourceNo@1002 : Code[20];ActionType@1004 : Option;Quantity@1001 : Decimal);
    BEGIN
      FindWarehouseActivityLineForPick(
        WarehouseActivityLine,SourceDocumentType,SourceNo,WarehouseActivityLine."Activity Type"::Pick,ActionType);
      WarehouseActivityLine.VALIDATE("Qty. to Handle",Quantity);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQtyToHandleAndPostWarehouseShipmentForLot@205(VAR TransferHeader@1005 : Record 5740;VAR WarehouseShipmentHeader@1003 : Record 7320);
    VAR
      WarehouseActivityLine@1004 : Record 5767;
      WarehouseShipmentLine@1002 : Record 7321;
      i@1000 : Integer;
    BEGIN
      // For Lot: it triggers error message when you process transfer order and try to post second time warehouse shipment for partial registered pick.
      // Here I should update Qty. to Handle and post Shipment for two times.
      FOR i := 1 TO 2 DO BEGIN
        UpdateQuantityToHandleOnWarehouseActivityLine(
          WarehouseActivityLine,WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.",1); // 1 is required for test.
        RegisterWarehouseActivity(
          WarehouseActivityLine."Source Document"::"Outbound Transfer",
          TransferHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
        LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE); // Use FALSE for only Shipment.
      END;
    END;

    LOCAL PROCEDURE UpdateQtyToHandleAndPostWarehouseShipmentForSerial@206(VAR TransferHeader@1010 : Record 5740;VAR WarehouseShipmentHeader@1009 : Record 7320);
    VAR
      WarehouseActivityLine@1004 : Record 5767;
      WarehouseShipmentLine@1002 : Record 7321;
    BEGIN
      // For Serial: it triggers error message when you process transfer order and try to post first time warehouse shipment for partial registered pick.
      // Here I just update Qty. to Handle and post Shipment for one time.
      UpdateQuantityToHandleOnWarehouseActivityLine2(
        WarehouseActivityLine,WarehouseShipmentLine."Source Document"::"Outbound Transfer",
        TransferHeader."No.",WarehouseActivityLine."Action Type"::Take,0); // 0 is required for test.
      UpdateQuantityToHandleOnWarehouseActivityLine2(
        WarehouseActivityLine,WarehouseShipmentLine."Source Document"::"Outbound Transfer",
        TransferHeader."No.",WarehouseActivityLine."Action Type"::Place,0); // 0 is required for test.

      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Outbound Transfer",
        TransferHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE); // Use FALSE for only Shipment.
    END;

    LOCAL PROCEDURE UpdateQuantityToShipOnWarehouseShipmentLine@160(VAR WarehouseShipmentLine@1000 : Record 7321;QuantityToShip@1001 : Decimal);
    BEGIN
      WarehouseShipmentLine.VALIDATE("Qty. to Ship",QuantityToShip);
      WarehouseShipmentLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQtyToHandleOnWarehouseActivityLinesPair@290(VAR WarehouseActivityLineTake@1001 : Record 5767;VAR WarehouseActivityLinePlace@1000 : Record 5767;QtyToHandle@1002 : Decimal);
    BEGIN
      WarehouseActivityLineTake.VALIDATE("Qty. to Handle",QtyToHandle);
      WarehouseActivityLineTake.MODIFY(TRUE);
      WarehouseActivityLinePlace.VALIDATE("Qty. to Handle",QtyToHandle);
      WarehouseActivityLinePlace.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyBinContent@103(Bin@1001 : Record 7354;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;UnitOfMeasureCode@1004 : Code[10]);
    VAR
      BinContent@1000 : Record 7302;
    BEGIN
      FindBinContent(BinContent,Bin,ItemNo);
      BinContent.FINDFIRST;
      BinContent.CALCFIELDS(Quantity);
      BinContent.TESTFIELD(Quantity,Quantity);
      BinContent.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@138(EntryType@1003 : Option;ItemNo@1001 : Code[20];UnitOfMeasureCode@1004 : Code[10];LocationCode@1005 : Code[10];LotNo@1006 : Code[20];Quantity@1002 : Decimal;RemainingQuantity@1007 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,EntryType,ItemNo,UnitOfMeasureCode);
      ItemLedgerEntry.TESTFIELD("Location Code",LocationCode);
      ItemLedgerEntry.TESTFIELD("Lot No.",LotNo);
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
      ItemLedgerEntry.TESTFIELD("Remaining Quantity",RemainingQuantity);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntries@177(VAR ItemLedgerEntry@1006 : Record 32;LocationCode@1003 : Code[10];LotNo@1002 : Code[20];Quantity@1001 : Decimal);
    BEGIN
      ItemLedgerEntry.TESTFIELD("Location Code",LocationCode);
      ItemLedgerEntry.TESTFIELD("Lot No.",LotNo);
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
      ItemLedgerEntry.NEXT;
    END;

    LOCAL PROCEDURE VerifyMovementLine@77(ActionType@1000 : Option;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;QtyBase@1004 : Decimal;UnitOfMeasureCode@1005 : Code[10];LotNo@1006 : Code[20]);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::" ",'',WarehouseActivityLine."Activity Type"::Movement);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
      WarehouseActivityLine.TESTFIELD("Qty. (Base)",QtyBase);
      WarehouseActivityLine.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
      WarehouseActivityLine.TESTFIELD("Lot No.",LotNo);
    END;

    LOCAL PROCEDURE VerifyPostedInventoryPickLine@87(Bin@1001 : Record 7354;SourceNo@1000 : Code[20];ItemNo@1002 : Code[20]);
    VAR
      PostedInvtPickLine@1005 : Record 7343;
    BEGIN
      PostedInvtPickLine.SETRANGE("Source No.",SourceNo);
      PostedInvtPickLine.SETRANGE("Location Code",Bin."Location Code");
      PostedInvtPickLine.SETRANGE("Bin Code",Bin.Code);
      PostedInvtPickLine.FINDSET;
      REPEAT
        PostedInvtPickLine.TESTFIELD("Item No.",ItemNo);
        PostedInvtPickLine.TESTFIELD("Expiration Date",WORKDATE);  // Value required for test.
        PostedInvtPickLine.TESTFIELD(Quantity,1);  // Value required for test.
        PostedInvtPickLine.TESTFIELD("Lot No.");
        PostedInvtPickLine.TESTFIELD("Serial No.");
      UNTIL PostedInvtPickLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPostedWarehouseShipmentLine@156(SourceNo@1001 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      PostedWhseShipmentLine@1000 : Record 7323;
    BEGIN
      PostedWhseShipmentLine.SETRANGE("Source Document",PostedWhseShipmentLine."Source Document"::"Sales Order");
      PostedWhseShipmentLine.SETRANGE("Source No.",SourceNo);
      PostedWhseShipmentLine.SETRANGE("Item No.",ItemNo);
      PostedWhseShipmentLine.FINDFIRST;
      PostedWhseShipmentLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyRegisteredMovementLine@122(Bin@1004 : Record 7354;ActionType@1000 : Option;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LotNo@1006 : Code[20]);
    VAR
      RegisteredWhseActivityLine@1001 : Record 5773;
    BEGIN
      RegisteredWhseActivityLine.SETRANGE("Item No.",ItemNo);
      FindRegisteredWhseActivityLine(
        RegisteredWhseActivityLine,RegisteredWhseActivityLine."Source Document",'',
        RegisteredWhseActivityLine."Activity Type"::Movement,ActionType);
      RegisteredWhseActivityLine.TESTFIELD("Location Code",Bin."Location Code");
      RegisteredWhseActivityLine.TESTFIELD("Zone Code",Bin."Zone Code");
      RegisteredWhseActivityLine.TESTFIELD("Bin Code",Bin.Code);
      RegisteredWhseActivityLine.TESTFIELD(Quantity,Quantity);
      RegisteredWhseActivityLine.TESTFIELD("Lot No.",LotNo);
    END;

    LOCAL PROCEDURE VerifyRegisteredPickLines@155(ActionType@1000 : Option;SourceNo@1002 : Code[20];ItemNo@1003 : Code[20]);
    VAR
      RegisteredWhseActivityLine@1001 : Record 5773;
    BEGIN
      FindRegisteredWhseActivityLine(
        RegisteredWhseActivityLine,RegisteredWhseActivityLine."Source Document"::"Sales Order",SourceNo,
        RegisteredWhseActivityLine."Activity Type"::Pick,ActionType);
      RegisteredWhseActivityLine.FINDSET;
      REPEAT
        RegisteredWhseActivityLine.TESTFIELD("Item No.",ItemNo);
        RegisteredWhseActivityLine.TESTFIELD(Quantity,1);  // Value required for Serial No. Item Tracking.
        RegisteredWhseActivityLine.TESTFIELD("Serial No.");
      UNTIL RegisteredWhseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyRegisteredPickLinesWithData@291(VAR TempWarehouseEntry@1004 : TEMPORARY Record 7312;ActionType@1000 : Option;SourceNo@1002 : Code[20]);
    VAR
      RegisteredWhseActivityLine@1001 : Record 5773;
      InitialTotalQty@1005 : Decimal;
      BinCodeFilter@1006 : Text;
    BEGIN
      FindRegisteredWhseActivityLine(
        RegisteredWhseActivityLine,RegisteredWhseActivityLine."Source Document"::"Outbound Transfer",SourceNo,
        RegisteredWhseActivityLine."Activity Type"::Pick,ActionType);
      InitialTotalQty := GetTotalBaseQtyOfData(TempWarehouseEntry,BinCodeFilter);
      Assert.AreEqual(
        InitialTotalQty,GetTotalBaseQty(RegisteredWhseActivityLine,BinCodeFilter),WrongTotalQtyErr);
    END;

    LOCAL PROCEDURE VerifyRegisteredWhseActivityLines@64(SalesLine@1001 : Record 37;SameExpirationDate@1003 : Boolean);
    VAR
      RegisteredWhseActivityLine@1000 : Record 5773;
      ItemLedgerEntry@1004 : Record 32;
      Quantity@1002 : Decimal;
    BEGIN
      FindRegisteredWhseActivityLine(
        RegisteredWhseActivityLine,RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesLine."Document No.",
        RegisteredWhseActivityLine."Activity Type"::Pick,RegisteredWhseActivityLine."Action Type"::Take);
      RegisteredWhseActivityLine.FINDSET;
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::"Positive Adjmt.");
      ItemLedgerEntry.SETRANGE("Item No.",SalesLine."No.");
      ItemLedgerEntry.FINDSET;
      IF NOT SameExpirationDate THEN
        ItemLedgerEntry.NEXT;
      REPEAT
        RegisteredWhseActivityLine.TESTFIELD("Item No.",SalesLine."No.");
        RegisteredWhseActivityLine.TESTFIELD("Lot No.",ItemLedgerEntry."Lot No.");
        RegisteredWhseActivityLine.TESTFIELD("Expiration Date",ItemLedgerEntry."Expiration Date");
        Quantity += RegisteredWhseActivityLine."Qty. (Base)";
        ItemLedgerEntry.NEXT;
      UNTIL RegisteredWhseActivityLine.NEXT = 0;
      Assert.AreEqual(SalesLine.Quantity,Quantity / SalesLine."Qty. per Unit of Measure",QuantityMustBeSame);
    END;

    LOCAL PROCEDURE VerifyRegisteredWhseActivityLine@65(SourceDocument@1001 : Option;SourceNo@1002 : Code[20];ActivityType@1003 : Option;ActionType@1004 : Option;Quantity@1005 : Decimal;QtyBase@1006 : Decimal;UnitOfMeasureCode@1007 : Code[10]);
    VAR
      RegisteredWhseActivityLine@1000 : Record 5773;
    BEGIN
      FindRegisteredWhseActivityLine(RegisteredWhseActivityLine,SourceDocument,SourceNo,ActivityType,ActionType);
      RegisteredWhseActivityLine.TESTFIELD(Quantity,Quantity);
      RegisteredWhseActivityLine.TESTFIELD("Qty. (Base)",QtyBase);
      RegisteredWhseActivityLine.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
    END;

    LOCAL PROCEDURE VerifyReservationEntry@96(ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];LotNo@1005 : Code[20];ReservationStatus@1001 : Option;Quantity@1004 : Decimal);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE("Location Code",LocationCode);
      ReservationEntry.SETRANGE("Reservation Status",ReservationStatus);
      ReservationEntry.SETRANGE("Lot No.",LotNo);
      ReservationEntry.FINDFIRST;
      ReservationEntry.VALIDATE("Quantity (Base)",Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseEntry@50(EntryType@1006 : Option;ItemNo@1001 : Code[20];UnitOfMeasureCode@1002 : Code[10];LocationCode@1003 : Code[10];BinCode@1007 : Code[20];LotNo@1008 : Code[20];Quantity@1004 : Decimal;QtyBase@1005 : Decimal);
    VAR
      WarehouseEntry@1000 : Record 7312;
    BEGIN
      WarehouseEntry.SETRANGE("Entry Type",EntryType);
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      WarehouseEntry.SETRANGE("Unit of Measure Code",UnitOfMeasureCode);
      WarehouseEntry.SETRANGE("Lot No.",LotNo);
      WarehouseEntry.FINDFIRST;
      WarehouseEntry.TESTFIELD("Location Code",LocationCode);
      WarehouseEntry.TESTFIELD("Bin Code",BinCode);
      WarehouseEntry.TESTFIELD(Quantity,Quantity);
      WarehouseEntry.TESTFIELD("Qty. (Base)",QtyBase);
    END;

    LOCAL PROCEDURE VerifyPickLine@124(ActivityType@1006 : Option;ActionType@1002 : Option;SourceDocument@1007 : Option;SourceNo@1000 : Code[20];ItemNo@1004 : Code[20];UnitOfMeasureCode@1008 : Code[10];LotNo@1003 : Code[20];Quantity@1005 : Decimal);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.SETRANGE("Lot No.",LotNo);
      WarehouseActivityLine.SETRANGE("Unit of Measure Code",UnitOfMeasureCode);
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityLine.TESTFIELD("Item No.",ItemNo);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPickLines@154(ActionType@1000 : Option;SourceNo@1002 : Code[20];ItemNo@1003 : Code[20]);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SourceNo,
        WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityLine.FINDSET;
      REPEAT
        WarehouseActivityLine.TESTFIELD("Item No.",ItemNo);
        WarehouseActivityLine.TESTFIELD(Quantity,1);  // Value required for Serial No. Item Tracking.
        WarehouseActivityLine.TESTFIELD("Serial No.");
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyWhseWorksheetLine@52(VAR WhseWorksheetLine@1000 : Record 7326;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;QtyBase@1003 : Decimal;UnitOfMeasureCode@1004 : Code[10]);
    BEGIN
      WhseWorksheetLine.SETRANGE("Item No.",ItemNo);
      WhseWorksheetLine.FINDFIRST;
      WhseWorksheetLine.TESTFIELD(Quantity,Quantity);
      WhseWorksheetLine.TESTFIELD("Qty. (Base)",QtyBase);
      WhseWorksheetLine.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyWhseActivityLine@180(VAR WarehouseActivityLine@1000 : Record 5767;DocumentNo@1001 : Code[20];LotNo@1002 : Code[20];ActionType@1004 : Option;ExpQty@1006 : Decimal);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source Document",WarehouseActivityLine."Source Document"::"Inbound Transfer");
      WarehouseActivityLine.SETRANGE("Source No.",DocumentNo);
      WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.SETRANGE("Lot No.",LotNo);
      WarehouseActivityLine.FINDFIRST;
      Assert.AreEqual(1,WarehouseActivityLine.COUNT,WarehouseActivityLine.GETFILTERS);
      Assert.AreEqual(ExpQty,WarehouseActivityLine."Qty. (Base)",WarehouseActivityLine.GETFILTERS);
    END;

    LOCAL PROCEDURE VerifyBOMCostSharesPage@225(VAR BOMCostShares@1005 : TestPage 5872);
    VAR
      UnitofMeasureCode@1004 : Variant;
      BOMUnitofMeasureCode@1003 : Variant;
      ItemNo@1002 : Variant;
      QtyPerParent@1001 : Variant;
      QtyPerTopItem@1000 : Variant;
      BOMLineQtyPer@1006 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ItemNo);
      LibraryVariableStorage.Dequeue(UnitofMeasureCode);
      LibraryVariableStorage.Dequeue(BOMUnitofMeasureCode);
      LibraryVariableStorage.Dequeue(QtyPerParent);
      LibraryVariableStorage.Dequeue(QtyPerTopItem);
      LibraryVariableStorage.Dequeue(BOMLineQtyPer);

      Assert.AreEqual(ItemNo,FORMAT(BOMCostShares."No."),ItemNoErr);
      Assert.AreEqual(UnitofMeasureCode,FORMAT(BOMCostShares."Unit of Measure Code"),UnitOfMeasureCodeErr);
      Assert.AreEqual(BOMUnitofMeasureCode,FORMAT(BOMCostShares."BOM Unit of Measure Code"),UnitOfMeasureCodeErr);
      Assert.AreEqual(QtyPerParent,BOMCostShares."Qty. per Parent".ASDECIMAL,QuantityErr);
      Assert.AreEqual(QtyPerTopItem,BOMCostShares."Qty. per Top Item".ASDECIMAL,QuantityErr);
    END;

    LOCAL PROCEDURE VerifyWarehouseActivityLineActionPickActivityTake@270(VAR WarehouseActivityLine@1000 : Record 5767);
    VAR
      Bin@1001 : Record 7354;
      MaxRankingBinCode@1007 : Code[20];
      FirstNotRankingBinCode@1008 : Code[20];
      LastBinCode@1009 : Code[20];
    BEGIN
      Bin.SETRANGE("Location Code",WarehouseActivityLine."Location Code");
      Bin.SETRANGE("Zone Code",WarehouseActivityLine."Zone Code");

      Bin.SETFILTER("Bin Ranking",'>%1',0);
      Bin.FINDFIRST;
      MaxRankingBinCode := Bin.Code;

      Bin.SETFILTER("Bin Ranking",'=%1',0);
      Bin.FINDFIRST;
      FirstNotRankingBinCode := Bin.Code;

      Bin.FINDLAST;
      LastBinCode := Bin.Code;

      WarehouseActivityLine.SETRANGE("Bin Code",MaxRankingBinCode);
      Assert.RecordCount(WarehouseActivityLine,1);

      WarehouseActivityLine.SETRANGE("Bin Code",FirstNotRankingBinCode);
      Assert.RecordCount(WarehouseActivityLine,1);

      WarehouseActivityLine.SETRANGE("Bin Code",LastBinCode);
      Assert.RecordCount(WarehouseActivityLine,2);
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@108(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      DequeueVariable@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      ItemTrackingMode := DequeueVariable;
      CASE ItemTrackingMode OF
        ItemTrackingMode::"Assign Lot No.":
          ItemTrackingLines."Assign Lot No.".INVOKE;
        ItemTrackingMode::"Select Lot No.":
          ItemTrackingLines."Lot No.".ASSISTEDIT;
        ItemTrackingMode::"Select Entries":
          ItemTrackingLines."Select Entries".INVOKE;
        ItemTrackingMode::"Assign Lot And Serial":
          BEGIN
            LibraryVariableStorage.Enqueue(TRUE);
            ItemTrackingLines."Assign Serial No.".INVOKE;
          END;
        ItemTrackingMode::"Assign Serial No.":
          BEGIN
            LibraryVariableStorage.Enqueue(FALSE);
            ItemTrackingLines."Assign Serial No.".INVOKE;
          END;
      END;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesWithLotNoPageHandler@244(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      DequeueLineHandleType@1001 : Variant;
      LotNo@1002 : Variant;
      QuantityBase@1003 : Variant;
      ItemTrackingLineHandleType@1005 : Option;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueLineHandleType);
      ItemTrackingLineHandleType := DequeueLineHandleType;
      LibraryVariableStorage.Dequeue(LotNo);
      LibraryVariableStorage.Dequeue(QuantityBase);

      WITH ItemTrackingLines DO
        CASE ItemTrackingLineHandleType OF
          ItemTrackingLineHandling::Create:
            BEGIN
              LAST;
              NEXT;
              "Lot No.".SETVALUE(LotNo);
              "Quantity (Base)".SETVALUE(QuantityBase);
            END;
          ItemTrackingLineHandling::"Use Existing":
            BEGIN
              FILTER.SETFILTER("Lot No.",LotNo);
              FIRST;
              "Quantity (Base)".SETVALUE(QuantityBase);
            END;
        END;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@118(VAR ItemTrackingSummary@1000 : TestPage 6500);
    VAR
      DequeueVariable@1002 : Variant;
      LastLotNo@1001 : Boolean;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LastLotNo := DequeueVariable;
      IF LastLotNo THEN
        ItemTrackingSummary.FIRST;
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE WhseItemTrackingLinesPageHandler@53(VAR WhseItemTrackingLines@1000 : TestPage 6550);
    VAR
      DequeueVariable@1002 : Variant;
      OldLotNo@1004 : Code[20];
      Quantity@1001 : Decimal;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      ItemTrackingMode := DequeueVariable;
      CASE ItemTrackingMode OF
        ItemTrackingMode::"Assign Lot No.":
          BEGIN
            WhseItemTrackingLines."Lot No.".SETVALUE(LibraryUtility.GenerateGUID);  // Use random Lot No. because value is not important for test.
            WhseItemTrackingLines.Quantity.SETVALUE(WhseItemTrackingLines.Quantity3.ASDECIMAL);
          END;
        ItemTrackingMode::"Select Lot No.":
          BEGIN
            WhseItemTrackingLines."Lot No.".ASSISTEDIT;
            LibraryVariableStorage.Enqueue(WhseItemTrackingLines."Lot No.".VALUE);
          END;
        ItemTrackingMode::"Split Lot No.":
          BEGIN
            Quantity := WhseItemTrackingLines.Quantity3.ASDECIMAL / 2;  // Value required for test.
            LibraryVariableStorage.Dequeue(DequeueVariable);
            OldLotNo := DequeueVariable;
            FillWhseItemTrackingLines(WhseItemTrackingLines,OldLotNo,Quantity);
            WhseItemTrackingLines.NEXT;
            FillWhseItemTrackingLines(WhseItemTrackingLines,OldLotNo,Quantity);
          END;
        ItemTrackingMode::"Select Multiple Lot No.":
          BEGIN
            WhseItemTrackingLines."Lot No.".ASSISTEDIT;
            LibraryVariableStorage.Enqueue(TRUE);
            LibraryVariableStorage.Enqueue(WhseItemTrackingLines."Lot No.".VALUE);
            WhseItemTrackingLines.NEXT;
            WhseItemTrackingLines."Lot No.".ASSISTEDIT;
            LibraryVariableStorage.Enqueue(WhseItemTrackingLines."Lot No.".VALUE);
          END;
      END;
      WhseItemTrackingLines.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE CubageAndWeightExceedConfirmHandler@15(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      DequeueVariable@1002 : Variant;
      LocalConfirmMessage@1003 : Text[1024];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LocalConfirmMessage := DequeueVariable;
      Assert.IsTrue(STRPOS(ConfirmMessage,LocalConfirmMessage) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@57(Message@1000 : Text[1024]);
    VAR
      DequeueVariable@1002 : Variant;
      LocalMessage@1001 : Text[1024];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LocalMessage := DequeueVariable;
      Assert.IsTrue(STRPOS(Message,LocalMessage) > 0,Message);
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreatePageHandler@123(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    VAR
      DequeueVariable@1002 : Variant;
      CreateNewLotNo@1001 : Boolean;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      CreateNewLotNo := DequeueVariable;
      EnterQuantityToCreate.CreateNewLotNo.SETVALUE(CreateNewLotNo);
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@136(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Reserve from Current Line".INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingListPageHandler@161(VAR ItemTrackingList@1000 : TestPage 6507);
    BEGIN
      ItemTrackingList.OK.INVOKE;
    END;

    [StrMenuHandler]
    PROCEDURE MenuHandler@175(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := 1;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@181(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ProductionJournalHandler@182(VAR ProductionJournal@1000 : TestPage 5510);
    BEGIN
      LibraryVariableStorage.Enqueue(JournalLinesPostedMsg); // Required inside MessageHandler.
      ProductionJournal.Post.INVOKE;
      ProductionJournal.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE BOMCostSharesPageHandler@210(VAR BOMCostShares@1000 : TestPage 5872);
    VAR
      UnitofMeasureCode@1006 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(UnitofMeasureCode);
      Assert.AreEqual(UnitofMeasureCode,FORMAT(BOMCostShares."Unit of Measure Code"),UnitOfMeasureCodeErr);
      BOMCostShares.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE MultipleBOMCostSharesPageHandler@228(VAR BOMCostShares@1000 : TestPage 5872);
    BEGIN
      VerifyBOMCostSharesPage(BOMCostShares);

      BOMCostShares.EXPAND(TRUE);
      BOMCostShares.NEXT;
      VerifyBOMCostSharesPage(BOMCostShares);

      BOMCostShares.EXPAND(TRUE);
      BOMCostShares.NEXT;
      VerifyBOMCostSharesPage(BOMCostShares);
      BOMCostShares.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemUOMHandler@120(VAR ItemUnitsofMeasure@1000 : TestPage 5404);
    BEGIN
      ItemUnitsofMeasure.Code.ASSERTEQUALS(LibraryVariableStorage.DequeueText);
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [SCM]
      Test Cases for SCM Warehouse.
        1. Test and verify Bin Content must be deleted, when the Quantity is zero and it is not a Fixed Bin.
        2. Test and verify Quantity Base to place exceeds available capacity error message.
        3. Test and verify Warehouse Pick from Sales Order using Lot Item Tracking with multiple UOM.
        4. Test and verify Warehouse Put Away from Purchase Order using Lot Item Tracking with Put Away UOM.
        5. Test and verify Warehouse Shipment from Sales Order using Lot Item Tracking with Put Away UOM.
        6. Test and verify Warehouse Shipment from Sales Order using Lot Item Tracking with multiple UOM.
        7. Test and verify Partial Warehouse Shipment from Sales Order using Lot Item Tracking with Decimal Conversion Rate.
        8. Test and verify Full Warehouse Shipment from Sales Order using Lot Item Tracking with Decimal Conversion Rate.
        9. Test and verify Warehouse Shipment from Sales Order using multiple Lot No. with multiple UOM.
       10. Test and verify Warehouse Shipment from Sales Order with different Sales and Purchase UOM.
       11. Test and verify Warehouse Pick from Sales Order using same Expiration Date with Pick According to FEFO.
       12. Test and verify Warehouse Pick from Sales Order using different Expiration Date with Pick According to FEFO.
       13. Test and verify Warehouse Pick from Sales Order using different Expiration Date without Pick According to FEFO.
       14. Test and verify Cubage to place exceeds available capacity error message.
       15. Test and verify Weight to place exceeds available capacity error message.
       16. Test and verify UOM conversion on Movement Worksheet using Lot Item Tracking.
       17. Test and verify UOM conversion on Movement using Lot Item Tracking.
       18. Test and verify UOM conversion on Movement using Lot Item Tracking with Expiration Date with Pick According to FEFO.
       19. Test and verify Put Away UOM conversion on Bin Content after Register Put Away with Item Tracking.
       20. Test and verify Put Away UOM conversion on Item Ledger Entry after Post Warehouse Adjustment with Item Tracking.
       21. Test and verify Put Away UOM conversion on Bin Content after Register Put Away.
       22. Test and verify Put Away UOM conversion on Item Ledger Entry after Post Warehouse Adjustment.
       23. Test and verify register Put Away with More Than Maximum Quantity.
       24. Test and verify register Put Away with Bin Ranking.
       25. Test and verify Movement with Block Movement as All on Bin Content.
       26. Test and verify Movement with Block Movement as Outbound on Bin Content.
       27. Test and verify Movement with Block Movement as Inbound on Bin Content.
       28. Test and verify Cross Dock Bin Content after register Put Away.
       29. Test and verify error on updating different Expiration Date on Inventory Put Away using Lot and Serial Item Tracking.
       30. Test and verify post Inventory Pick using Lot and Serial Item Tracking.
       31. Test and verify output posted with Inventory Put Away from Production Order.
       32. Test and verify split Lot using Warehouse Reclassification Journal.
       33. Test and verify Reservation Entry after posting Sales Order and Item Journal.
       34. Test and verify Reservation Entry after posting Warehouse Receipt and Shipment from Transfer Order.
       35. Test and verify Bin Replenishment with Put Pick Bin Type.
       36. Test and verify Movement after Bin Replenishment with Put and Pick Bin Type using Lot Item Tracking.
       37. Test and verify Register Movement after Bin Replenishment with Put and Pick Bin Type using Lot Item Tracking.
       38. Test and verify Bin Replenishment with Ship Bin Type.
       39. Test and verify Movement after Bin Replenishment with Ship Bin Type using Lot Item Tracking.
       40. Test and verify Register Movement after Bin Replenishment with Ship Bin Type using Lot Item Tracking.
       41. Test and verify Pick after Bin Replenishment with Ship Bin Type using Lot Item Tracking.
       42. Test and verify Pick from Warehouse Shipment with Reservation.
       43. Test and verify Inventory Pick with Reservation.
       44. Test and verify Pick from Warehouse Shipment with Reservation using Lot Item Tracking.
       45. Test and verify Put Away UOM Conversion on Pick Line.
       46. Test and verify Pick from Warehouse Shipment after posting Output from Production Order using Serial Item Tracking.
       47. Test and verify register Pick from Warehouse Shipment after posting Output from Production Order using Serial Item Tracking.
       48. Test and verify post Warehouse Shipment after posting Output from Production Order using Serial Item Tracking.
       49. Test and verify Inventory Pick from Production Order after Reserve Production Component.
       50. Test and verify post Warehouse Shipment with different Pick created by Warehouse Shipment and Pick Worksheet using Lot Item Tracking.
       51. Test and verify Reservation Entry after posting Partial Warehouse Shipment with Partial Pick using Lot Item Tracking.
       52. Test and verify Pick from Warehouse Shipment after posting Transfer Order using Lot Item Tracking.
       53. Test and verify Pick from Warehouse Shipment only for Non Expired Quantity.
       54. Test and verify Pick from combine Warehouse Shipment for Sales Order with different UOM.
       55. Test and verify Pick from Warehouse Shipment with Quantity Available on different Bin using Lot Item Tracking.
       56. Test and verify Pick from Warehouse Shipment with Expiration Calculation on Item.
       57. Test and verify Pick from Warehouse Shipment with Quantity Available on Blocked Bin Content.
       58. Test and verify register Pick from Warehouse Shipment created before move item from Production bin to Pick bin using Serial Item Tracking.
       59. Test and verify register Pick from Warehouse Shipment created before move item from Production bin to Pick bin using Lot Item Tracking.
       60. Test and verify Warehouse Shipment can be posted for partial registered Pick using Lot Item Tracking.
       61. Test and verify Warehouse Shipment can be posted for partial registered Pick using Serial Item Tracking.
       62. Test and verify Whse. Pick from Sales Order for a Lot Tracked Item with Expiration Date and a non tracked Item.
       63. Verify that Warehouse Pick created correctly after creating transfer order with partially assigned Lot Item Tracking for multiple UOMs.
       64. Test and verify pick can be created from Pick Worksheet with Per Whse. Document for the Item without Block Movement.
       65. Verify that BOM Cost Shares page should show the right Unit Of Measure for the Top level Item.
       66. Verify that BOM Cost Shares page should show the right values for multiple BOM Level.

        Covers Test Cases for WI - 278110
        -----------------------------------------------------------------
        Test Function Name                                      TFS ID
        -----------------------------------------------------------------
        BinContentDeletedAfterRegisteringPick                   128751
        QuantityToPlaceExceedsAvailableCapacityError            128749

        Covers Test Cases for WI - 286289
        --------------------------------------------------------------------------------------------------
        Test Function Name                                                                          TFS ID
        --------------------------------------------------------------------------------------------------
        WarehousePickFromSalesOrderUsingLotItemTrackingWithMultipleUOM                              142007
        WarehousePutAwayFromPurchaseOrderUsingLotItemTrackingWithPutAwayUOM                  141985,141987
        WarehouseShipmentFromSalesOrderUsingLotItemTrackingWithPutAwayUOM                    141985,141987
        WarehouseShipmentFromSalesOrderUsingLotItemTrackingWithMultipleUOM                          141986
        PartialWarehouseShipmentFromSalesOrderUsingLotItemTracking                                  142009
        FullWarehouseShipmentFromSalesOrderUsingLotItemTracking                              142012,142009
        WarehouseShipmentFromSalesOrderUsingMultipleLotNoWithMultipleUOM                            142006
        WarehouseShipmentFromSalesOrderWithDifferentSalesAndPurchaseUOM                             142014

        Covers Test Cases for WI - 286280
        --------------------------------------------------------------------------------------------------
        Test Function Name                                                                          TFS ID
        --------------------------------------------------------------------------------------------------
        WarehousePickFromSalesOrderUsingSameExpirationDateWithPickAccordingToFEFO                   141990
        WarehousePickFromSalesOrderUsingDifferentExpirationDateWithPickAccordingToFEFO              141988
        WarehousePickFromSalesOrderUsingDifferentExpirationDateWithoutPickAccordingToFEFO           141989

        Covers Test Cases for WI - 286299
        --------------------------------------------------------------------------------------------------
        Test Function Name                                                                          TFS ID
        --------------------------------------------------------------------------------------------------
        CubageToPlaceExceedsAvailableCapacityError                                                  128748
        WeightToPlaceExceedsAvailableCapacityError                                                  128748

        Covers Test Cases for WI - 288175
        --------------------------------------------------------------------------------------------------
        Test Function Name                                                                          TFS ID
        --------------------------------------------------------------------------------------------------
        UOMConversionOnMovementWorksheetUsingLotItemTracking                                        142008
        UOMConversionOnMovementUsingLotItemTracking                                                 143058
        UOMConversionOnMovementUsingLotItemTrackingWithFEFO                                         143079

        Covers Test Cases for WI - 290345
        --------------------------------------------------------------------------------------------------
        Test Function Name                                                                          TFS ID
        --------------------------------------------------------------------------------------------------
        PutAwayUOMConversionOnBinContentAfterRegisterPutAwayWithItemTracking                 203101,203097
        PutAwayUOMConversionOnItemLedgerEntryAfterPostWarehouseAdjustmentWithItemTracking    203101,203097
        PutAwayUOMConversionOnBinContentAfterRegisterPutAway                                 203101,203099
        PutAwayUOMConversionOnItemLedgerEntryAfterPostWarehouseAdjustment                    203101,203099

        Covers Test Cases for WI - 290397
        --------------------------------------------------------------------------------------------------
        Test Function Name                                                                          TFS ID
        --------------------------------------------------------------------------------------------------
        RegisterPutAwayWithMoreThanMaximumQuantity                                                  128760
        RegisterPutAwayWithBinRanking                                                               128768
        MovementWithBlockMovementAsAllOnBinContent                                                  128769
        MovementWithBlockMovementAsOutboundlOnBinContent                                            128769
        MovementWithBlockMovementAsInboundlOnBinContent                                             128769
        CrossDockBinContentAfterRegisterPutAway                                                     135432

        Covers Test Cases for WI - 290406
        --------------------------------------------------------------------------------------------------
        Test Function Name                                                                          TFS ID
        --------------------------------------------------------------------------------------------------
        UpdateDifferentExpirationDatesOnInventoryPutAwayErrorUsingLotAndSerialItemTracking          141518
        PostInventoryPickUsingLotAndSerialItemTracking                                              141518

        Covers Test Cases for WI - 292470
        --------------------------------------------------------------------------------------------------
        Test Function Name                                                                          TFS ID
        --------------------------------------------------------------------------------------------------
        PostInventoryPutAwayFromProductionOrder                                                     266037
        SplitLotNoUsingWarehouseReclassJournal                                                      278420, 340157
        ReservationEntryAfterPostingSalesOrderAndItemJournal                                        242601
        ReservationEntryAfterPostingWarehouseReceiptAndShipmentFromTransferOrder                    242601

        Covers Test Cases for WI - 293229
        --------------------------------------------------------------------------------------------------
        Test Function Name                                                                          TFS ID
        --------------------------------------------------------------------------------------------------
        BinReplenishmentWithPutPickBinType                                                          230489
        MovementAfterBinReplenishmentWithPutPickBinTypeUsingLotItemTracking                         230489
        RegisterMovementAfterBinReplenishmentWithPutPickBinTypeUsingLotItemTracking                 230489
        BinReplenishmentWithShipBinType                                                             230490
        MovementAfterBinReplenishmentWithShipBinTypeUsingLotItemTracking                            230490
        RegisterMovementAfterBinReplenishmentWithShipBinTypeUsingLotItemTracking                    230490
        PickAfterBinReplenishmentWithShipBinTypeUsingLotItemTracking                                230490

        Covers Test Cases for WI - 294085
        --------------------------------------------------------------------------------------------------
        Test Function Name                                                                          TFS ID
        --------------------------------------------------------------------------------------------------
        PickFromWarehouseShipmentWithReservation                                                    163939
        InventoryPickWithReservation                                                                163940
        PickFromWarehouseShipmentWithReservationUsingLotItemTracking                                163976

        Covers Test Cases for WI - 294986
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        PutAwayUOMConversionOnPickLine                                                                         163979
        PickFromWarehouseShipmentAfterPostingOutputFromProductionOrderUsingSerialItemTracking                  163980
        RegisterPickFromWarehouseShipmentAfterPostingOutputFromProductionOrderUsingSerialItemTracking          163980
        PostWarehouseShipmentAfterPostingOutputFromProductionOrderUsingSerialItemTracking                      163980
        InventoryPickFromProductionOrderAfterReserveProductionComponent                                        163981
        PostWarehouseShipmentWithDifferentPickCreatedByWarehouseShipmentAndPickWorksheetUsingLotItemTracking   163982
        ReservationEntryAfterPostingPartialWarehouseShipmentWithPartialPickUsingLotItemTracking                163983

        Covers Test Cases for WI - 295221
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        PickFromWarehouseShipmentAfterPostingTransferOrderUsingLotItemTracking                                 163984
        PickFromWarehouseShipmentOnlyForNonExpiredQuantity                                                     163985

        Covers Test Cases for WI - 295223
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        PickFromCombineWarehouseShipmentForSalesOrderWithDifferentUOM                                          164070
        PickFromWarehouseShipmentWithQuantityAvailableOnDifferentBinUsingLotItemTracking                       164069
        PickFromWarehouseShipmentWithExpirationCalculationOnItem                                               164068
        PickFromWarehouseShipmentWithQuantityAvailableOnBlockedBinContent                                      164057

        Covers Test Cases for WI - 341191
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        RegistePickFromWarehouseShipmentCreatedBeforeMoveSerialTrackedItemFromProdcutionBinToPickBin           341191
        RegistePickFromWarehouseShipmentCreatedBeforeMoveLotTrackedItemFromProdcutionBinToPickBin              341191

        Covers Test Cases for WI - 342854
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        PostPartialWarehouseShipmentWithPartialPickFromTransferOrderUsingLotItemTracking                       342854
        PostPartialWarehouseShipmentWithPartialPickFromTransferOrderUsingSerialItemTracking                    342854

        Covers Test Cases for WI - 70049
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        PickFromSalesOrderUsingLotItemTrackingWithExpirationDate                                                70049
        Covers Test Cases for WI - 77337

        Covers Test Cases for Crete Merge Bug
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        PickFromWarehouseShipmentAfterReleasingTransferOrderUsingLotWarehouseTracking                          78119

        CreatePickFromPickWorksheetWithPerWhseDocument                                                         88437

        Covers Test Cases for Merge Bug - 90391
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        BOMCostSharesWithMultipleUOM                                                                            90391

        Covers Test Cases for Merge Bug - 97748
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                     TFS ID
        -------------------------------------------------------------------------------------------------------------
        MultipleBOMCostSharesWithMultipleUOM                                                                   97748
    }
    END.
  }
}

