OBJECT Codeunit 137047 SCM Warehouse I
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalTemplate@1007 : Record 82;
      ItemJournalBatch@1005 : Record 233;
      Assert@1002 : Codeunit 130000;
      LibraryDimension@1018 : Codeunit 131001;
      LibraryPurchase@1015 : Codeunit 130512;
      LibrarySales@1014 : Codeunit 130509;
      LibraryWarehouse@1009 : Codeunit 132204;
      LibraryInventory@1016 : Codeunit 132201;
      LibraryItemTracking@1022 : Codeunit 130502;
      LibraryUtility@1010 : Codeunit 131000;
      LibraryRandom@1006 : Codeunit 130440;
      LibraryVariableStorage@1023 : Codeunit 131004;
      isInitialized@1000 : Boolean;
      ErrInvalidDimensionOrder@1001 : TextConst 'ENU=The dimensions used in Order %1 are invalid.';
      ErrInvalidDimensionReturnOrder@1004 : TextConst 'ENU=The dimensions used in Return Order %1 are invalid.';
      ErrInvalidDimensionTransfer@1011 : TextConst 'ENU=The dimensions that are used in transfer order %1, line no. %2 are not valid.';
      ErrItemBlocked@1008 : TextConst 'ENU="Blocked must be equal to ''No''  in Item: No.=%1."';
      ErrNoRecord@1012 : TextConst 'ENU="There must not be any record within the filter. "';
      EmptyTableErr@1003 : TextConst 'ENU=There must be %1 records in %2 within the filter %3.';
      SortingOrderErr@1013 : TextConst 'ENU=Wrong sorting order in %1';
      NoWhseReceiptLinesCreatedErr@1017 : TextConst 'ENU=There are no Warehouse Receipt Lines created.';
      NoWhseShipmentLinesCreatedErr@1019 : TextConst 'ENU=There are no Warehouse Shipment Lines created.';
      CannotReclassifyLocationErr@1020 : TextConst '@@@="%1=Location Code";ENU=You cannot reclassify location %1 because it is set up with Directed Put-away and Pick';
      CannotUseLocationErr@1021 : TextConst '@@@="%1=Bin table caption, %2=Location table caption, %3=Location Code, %4=""Directed Put-Away and Pick""";ENU=You cannot use a %1 because %2 %3 is set up with %4';
      ShipmentDateMustNotChangeErr@1024 : TextConst 'ENU=Shipment Date must not be changed when a Warehouse Shipment Line for this Sales Line exists';

    [Test]
    PROCEDURE ShowPostingErrorSalesOrder@24();
    VAR
      WarehouseSetup@1008 : Record 5769;
      Location@1002 : Record 14;
      Item@1001 : Record 27;
      SalesHeader@1000 : Record 36;
      SalesHeader2@1004 : Record 36;
      Customer@1007 : Record 18;
      WarehouseShipmentHeader@1009 : Record 7320;
    BEGIN
      // Setup: Create setups, Item and Customer with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Stop and show the first posting error",
        WarehouseSetup."Receipt Posting Policy"::"Posting errors are not processed");
      CreateItem(Item);
      CreateLocationSetup(Location,FALSE,TRUE,TRUE);
      UpdateItemInventory(Item."No.",Location.Code);
      CreateCustomer(Customer,Location.Code);

      // Create Sales Order Setup. Create Warehouse Shipment using Filters to get Source document.
      CreateSalesSetup(SalesHeader,SalesHeader2,SalesHeader."Document Type"::Order,Item."No.",Location.Code,Customer."No.");
      UseFiltersToGetSrcDocShipment(WarehouseShipmentHeader,Customer."No.",'',Location.Code,'');

      // Exercise: Post Warehouse Shipment.
      ASSERTERROR LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify: Error Message - Dimensions are invalid.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ErrInvalidDimensionOrder,SalesHeader2."No.")) > 0,GETLASTERRORTEXT);

      // Verify that correct shipment line has been posted.
      VerifyPostedShipmentLinesSales(WarehouseShipmentHeader."No.",Item."No.",SalesHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    [HandlerFunctions(StringMenuHandler,ShipLinesMessageHandler)]
    PROCEDURE ErrorNotProcessedSalesOrder@2();
    VAR
      WarehouseSetup@1007 : Record 5769;
      Location@1005 : Record 14;
      Item@1004 : Record 27;
      SalesHeader@1003 : Record 36;
      SalesHeader2@1002 : Record 36;
      Customer@1001 : Record 18;
      WarehouseShipmentHeader@1000 : Record 7320;
    BEGIN
      // Setup: Create setups, Item and Customer with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Posting errors are not processed",
        WarehouseSetup."Receipt Posting Policy"::"Posting errors are not processed");
      CreateItem(Item);
      CreateLocationSetup(Location,FALSE,TRUE,TRUE);
      UpdateItemInventory(Item."No.",Location.Code);
      CreateCustomer(Customer,Location.Code);

      // Create Sales Order Setup. Create Warehouse Shipment using Filters to get Source document.
      CreateSalesSetup(SalesHeader,SalesHeader2,SalesHeader."Document Type"::Order,Item."No.",Location.Code,Customer."No.");
      UseFiltersToGetSrcDocShipment(WarehouseShipmentHeader,Customer."No.",'',Location.Code,'');

      // Exercise: Post Warehouse Shipment such that it generates the posting confirmation message.
      LibraryWarehouse.PostWhseShptWithShipInvoiceMsg(WarehouseShipmentHeader."No.");

      // Verify: Check message inside Handler and verify that correct shipment line has been posted.
      VerifyPostedShipmentLinesSales(WarehouseShipmentHeader."No.",Item."No.",SalesHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    PROCEDURE ShowPostingErrorPurchRetOrder@46();
    VAR
      WarehouseSetup@1008 : Record 5769;
      Location@1002 : Record 14;
      Item@1001 : Record 27;
      PurchaseHeader@1000 : Record 38;
      PurchaseHeader2@1004 : Record 38;
      Vendor@1007 : Record 23;
      WarehouseShipmentHeader@1009 : Record 7320;
    BEGIN
      // Setup: Create setups, Item and Vendor with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Stop and show the first posting error",
        WarehouseSetup."Receipt Posting Policy"::"Posting errors are not processed");
      CreateItem(Item);
      CreateLocationSetup(Location,FALSE,TRUE,TRUE);
      UpdateItemInventory(Item."No.",Location.Code);
      CreateVendor(Vendor,Location.Code);

      // Create Purchase Return Order setup. Create Warehouse Shipment using Filters to get Source document.
      // False - Purchase Return Shipment.
      CreatePurchaseSetup(
        PurchaseHeader,PurchaseHeader2,PurchaseHeader."Document Type"::"Return Order",Item."No.",Location.Code,Vendor."No.");
      UseFiltersToGetSrcDocShipment(WarehouseShipmentHeader,'',Vendor."No.",Location.Code,'');

      // Exercise: Post Warehouse Shipment.
      ASSERTERROR LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify: Error Message - Dimensions are invalid.
      Assert.IsTrue(
        STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ErrInvalidDimensionReturnOrder,PurchaseHeader2."No.")) > 0,GETLASTERRORTEXT);

      // Verify that correct shipment line has been posted.
      VerifyPostedShipmentLinesPurch(WarehouseShipmentHeader."No.",Item."No.",PurchaseHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    [HandlerFunctions(StringMenuHandler,ShipLinesMessageHandler)]
    PROCEDURE ErrorNotProcessedPurchRetOrder@45();
    VAR
      WarehouseSetup@1007 : Record 5769;
      Location@1005 : Record 14;
      Item@1004 : Record 27;
      PurchaseHeader@1003 : Record 38;
      PurchaseHeader2@1002 : Record 38;
      Vendor@1001 : Record 23;
      WarehouseShipmentHeader@1000 : Record 7320;
    BEGIN
      // Setup: Create setups, Item and Vendor with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Posting errors are not processed",
        WarehouseSetup."Receipt Posting Policy"::"Posting errors are not processed");
      CreateItem(Item);
      CreateLocationSetup(Location,FALSE,TRUE,TRUE);
      UpdateItemInventory(Item."No.",Location.Code);
      CreateVendor(Vendor,Location.Code);

      // Create Purchase Return Order setup. Create Warehouse Shipment using Filters to get Source document.
      CreatePurchaseSetup(
        PurchaseHeader,PurchaseHeader2,PurchaseHeader."Document Type"::"Return Order",Item."No.",Location.Code,Vendor."No.");
      UseFiltersToGetSrcDocShipment(WarehouseShipmentHeader,'',Vendor."No.",Location.Code,'');

      // Exercise: Post Warehouse Shipment such that it generates the posting confirmation message.
      LibraryWarehouse.PostWhseShptWithShipInvoiceMsg(WarehouseShipmentHeader."No.");

      // Verify: Check message inside Handler and Verify that correct shipment line has been posted.
      VerifyPostedShipmentLinesPurch(WarehouseShipmentHeader."No.",Item."No.",PurchaseHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    PROCEDURE ShowPostingErrorTransferOrder@36();
    VAR
      WarehouseSetup@1008 : Record 5769;
      LocationFrom@1002 : Record 14;
      LocationTo@1000 : Record 14;
      LocationInTransit@1004 : Record 14;
      Item@1001 : Record 27;
      TransferHeader@1007 : Record 5740;
      TransferHeader2@1005 : Record 5740;
      TransferLine@1006 : Record 5741;
      WarehouseShipmentHeader@1009 : Record 7320;
    BEGIN
      // Setup: Create setups, Item and Transfer Locations.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Stop and show the first posting error",
        WarehouseSetup."Receipt Posting Policy"::"Posting errors are not processed");
      CreateItem(Item);
      CreateTransferLocations(LocationFrom,LocationTo,LocationInTransit);
      UpdateItemInventory(Item."No.",LocationFrom.Code);

      // Create Transfer Order setup. Create Warehouse Shipment using Filters to get Source document.
      CreateTransferOrderSetup(
        TransferHeader,TransferHeader2,Item."No.",LocationFrom.Code,LocationTo.Code,LocationInTransit.Code);
      UseFiltersToGetSrcDocShipment(WarehouseShipmentHeader,'','',LocationFrom.Code,LocationTo.Code);

      // Exercise: Post Warehouse Shipment.
      ASSERTERROR LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify: Error Message - Dimensions are invalid.
      TransferLine.SETRANGE("Document No.",TransferHeader2."No.");
      TransferLine.FINDFIRST;
      Assert.IsTrue(
        STRPOS(GETLASTERRORTEXT,
          STRSUBSTNO(ErrInvalidDimensionTransfer,TransferHeader2."No.",TransferLine."Line No.")) > 0,GETLASTERRORTEXT);

      // Verify that correct shipment line has been posted.
      VerifyPostedShipmentLinesTrans(WarehouseShipmentHeader."No.",Item."No.",TransferHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    [HandlerFunctions(StringMenuHandler,ShipLinesMessageHandler)]
    PROCEDURE ErrorNotProcessedTransferOrder@20();
    VAR
      WarehouseSetup@1008 : Record 5769;
      LocationFrom@1002 : Record 14;
      LocationTo@1000 : Record 14;
      LocationInTransit@1004 : Record 14;
      Item@1001 : Record 27;
      TransferHeader@1007 : Record 5740;
      TransferHeader2@1005 : Record 5740;
      WarehouseShipmentHeader@1009 : Record 7320;
    BEGIN
      // Setup: Create setups, Item and Transfer Locations.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Posting errors are not processed",
        WarehouseSetup."Receipt Posting Policy"::"Posting errors are not processed");
      CreateItem(Item);
      CreateTransferLocations(LocationFrom,LocationTo,LocationInTransit);
      UpdateItemInventory(Item."No.",LocationFrom.Code);

      // Create Transfer Order Setup. Create Warehouse Shipment using Filters to get Source document.
      CreateTransferOrderSetup(
        TransferHeader,TransferHeader2,Item."No.",LocationFrom.Code,LocationTo.Code,LocationInTransit.Code);
      UseFiltersToGetSrcDocShipment(WarehouseShipmentHeader,'','',LocationFrom.Code,LocationTo.Code);

      // Exercise: Post Warehouse Shipment such that it generates the posting confirmation message.
      LibraryWarehouse.PostWhseShptWithShipInvoiceMsg(WarehouseShipmentHeader."No.");

      // Verify: Check message inside Handler and verify that correct shipment line has been posted.
      VerifyPostedShipmentLinesTrans(WarehouseShipmentHeader."No.",Item."No.",TransferHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    PROCEDURE ShowPostingErrorSalesRetOrder@34();
    VAR
      WarehouseSetup@1008 : Record 5769;
      Location@1002 : Record 14;
      Item@1001 : Record 27;
      SalesHeader@1000 : Record 36;
      SalesHeader2@1004 : Record 36;
      Customer@1007 : Record 18;
      WarehouseReceiptHeader@1009 : Record 7316;
    BEGIN
      // Setup: Create setups, Item and Customer with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Posting errors are not processed",
        WarehouseSetup."Receipt Posting Policy"::"Stop and show the first posting error");
      CreateItem(Item);
      CreateLocationSetup(Location,FALSE,TRUE,TRUE);
      UpdateItemInventory(Item."No.",Location.Code);
      CreateCustomer(Customer,Location.Code);

      // Create Sales Return Order setup. Create Warehouse Receipt using Filters to get Source document.
      CreateSalesSetup(
        SalesHeader,SalesHeader2,SalesHeader."Document Type"::"Return Order",Item."No.",Location.Code,Customer."No.");
      UseFiltersToGetSrcDocReceipt(WarehouseReceiptHeader,Customer."No.",'',Location.Code);

      // Exercise: Post Warehouse Receipt.
      ASSERTERROR LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Verify: Error Message - Dimensions are invalid.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ErrInvalidDimensionReturnOrder,SalesHeader2."No.")) > 0,GETLASTERRORTEXT);

      // Verify that correct receipt line has been posted.
      VerifyPostedReceiptLinesSales(WarehouseReceiptHeader."No.",Item."No.",SalesHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SourceDocMessageHandler)]
    PROCEDURE ErrorNotProcessedSalesRetOrder@29();
    VAR
      WarehouseSetup@1007 : Record 5769;
      Location@1005 : Record 14;
      Item@1004 : Record 27;
      SalesHeader@1003 : Record 36;
      SalesHeader2@1002 : Record 36;
      Customer@1001 : Record 18;
      WarehouseReceiptHeader@1000 : Record 7316;
    BEGIN
      // Setup: Create setups, Item and Customer with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Posting errors are not processed",
        WarehouseSetup."Receipt Posting Policy"::"Posting errors are not processed");
      CreateItem(Item);
      CreateLocationSetup(Location,FALSE,TRUE,TRUE);
      UpdateItemInventory(Item."No.",Location.Code);
      CreateCustomer(Customer,Location.Code);

      // Create Sales Return Order setup. Create Warehouse Receipt using Filters to get Source document.
      CreateSalesSetup(
        SalesHeader,SalesHeader2,SalesHeader."Document Type"::"Return Order",Item."No.",Location.Code,Customer."No.");
      UseFiltersToGetSrcDocReceipt(WarehouseReceiptHeader,Customer."No.",'',Location.Code);

      // Exercise: Post Warehouse Receipt such that it generates the posting confirmation message.
      LibraryWarehouse.PostWhseRcptWithConfirmMsg(WarehouseReceiptHeader."No.");

      // Verify: Check message inside Handler and verify that correct receipt line has been posted.
      VerifyPostedReceiptLinesSales(WarehouseReceiptHeader."No.",Item."No.",SalesHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    PROCEDURE ShowPostingErrorPurchaseOrder@53();
    VAR
      WarehouseSetup@1008 : Record 5769;
      Location@1002 : Record 14;
      Item@1001 : Record 27;
      PurchaseHeader@1000 : Record 38;
      PurchaseHeader2@1004 : Record 38;
      Vendor@1007 : Record 23;
      WarehouseReceiptHeader@1009 : Record 7316;
    BEGIN
      // Setup: Create setups, Item and Vendor with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Posting errors are not processed",
        WarehouseSetup."Receipt Posting Policy"::"Stop and show the first posting error");
      CreateItem(Item);
      CreateLocationSetup(Location,FALSE,TRUE,TRUE);
      UpdateItemInventory(Item."No.",Location.Code);
      CreateVendor(Vendor,Location.Code);

      // Create Purchase Order setup. Create Warehouse Receipt using Filters to get Source document.
      CreatePurchaseSetup(
        PurchaseHeader,PurchaseHeader2,PurchaseHeader."Document Type"::Order,Item."No.",Location.Code,Vendor."No.");
      UseFiltersToGetSrcDocReceipt(WarehouseReceiptHeader,'',Vendor."No.",Location.Code);

      // Exercise: Post Warehouse Receipt.
      ASSERTERROR LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Verify: Error Message - Dimensions are invalid.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ErrInvalidDimensionOrder,PurchaseHeader2."No.")) > 0,GETLASTERRORTEXT);

      // Verify that correct receipt line has been posted.
      VerifyPostedReceiptLinesPurch(WarehouseReceiptHeader."No.",Item."No.",PurchaseHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SourceDocMessageHandler)]
    PROCEDURE ErrorNotProcessedPurchaseOrder@49();
    VAR
      WarehouseSetup@1007 : Record 5769;
      Location@1005 : Record 14;
      Item@1004 : Record 27;
      PurchaseHeader@1003 : Record 38;
      PurchaseHeader2@1002 : Record 38;
      Vendor@1001 : Record 23;
      WarehouseReceiptHeader@1000 : Record 7316;
    BEGIN
      // Setup: Create setups, Item and Vendor with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Posting errors are not processed",
        WarehouseSetup."Receipt Posting Policy"::"Posting errors are not processed");
      CreateItem(Item);
      CreateLocationSetup(Location,FALSE,TRUE,TRUE);
      UpdateItemInventory(Item."No.",Location.Code);
      CreateVendor(Vendor,Location.Code);

      // Create Purchase Order setup. Create Warehouse Receipt using Filters to get Source document.
      CreatePurchaseSetup(
        PurchaseHeader,PurchaseHeader2,PurchaseHeader."Document Type"::Order,Item."No.",Location.Code,Vendor."No.");
      UseFiltersToGetSrcDocReceipt(WarehouseReceiptHeader,'',Vendor."No.",Location.Code);

      // Exercise: Post Warehouse Receipt such that it generates the posting confirmation message.
      LibraryWarehouse.PostWhseRcptWithConfirmMsg(WarehouseReceiptHeader."No.");

      // Verify: Check message inside Handler and verify that correct receipt line has been posted.
      VerifyPostedReceiptLinesPurch(WarehouseReceiptHeader."No.",Item."No.",PurchaseHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    PROCEDURE ShowErrorSalesOrderBlocked@60();
    VAR
      WarehouseSetup@1008 : Record 5769;
      Location@1002 : Record 14;
      Item@1001 : Record 27;
      SalesHeader@1000 : Record 36;
      Customer@1007 : Record 18;
      WarehouseShipmentHeader@1009 : Record 7320;
    BEGIN
      // Setup: Create setups, Item, Customer with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Stop and show the first posting error",
        WarehouseSetup."Receipt Posting Policy"::"Posting errors are not processed");
      CreateItem(Item);
      CreateLocationSetup(Location,FALSE,TRUE,TRUE);
      CreateCustomer(Customer,Location.Code);

      // Create Sales Order. Create Warehouse Shipment using Filters to get Source document.
      CreateAndReleaseSalesDocument(SalesHeader,SalesHeader."Document Type"::Order,Item."No.",Location.Code,Customer."No.",TRUE);
      UseFiltersToGetSrcDocShipment(WarehouseShipmentHeader,Customer."No.",'',Location.Code,'');
      BlockItemForPosting(Item."No.",TRUE);

      // Exercise: Post Warehouse Shipment.
      ASSERTERROR LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify: Error Message - Blocked must be 'No' in Item.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ErrItemBlocked,Item."No.")) > 0,GETLASTERRORTEXT);

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    PROCEDURE ShowErrorPurchReturnBlocked@86();
    VAR
      WarehouseSetup@1008 : Record 5769;
      Location@1002 : Record 14;
      Item@1001 : Record 27;
      Item2@1006 : Record 27;
      SalesHeader@1000 : Record 36;
      Customer@1007 : Record 18;
      WarehouseShipmentHeader@1009 : Record 7320;
      Vendor@1003 : Record 23;
      PurchaseHeader@1005 : Record 38;
    BEGIN
      // Setup: Create setups, Item, Customer and Vendor with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Stop and show the first posting error",
        WarehouseSetup."Receipt Posting Policy"::"Posting errors are not processed");
      CreateItem(Item);
      CreateItem(Item2);
      CreateLocationSetup(Location,FALSE,TRUE,TRUE);
      CreateCustomer(Customer,Location.Code);
      CreateVendor(Vendor,Location.Code);

      // Create Sales Order and Purchase Return Order. Create Warehouse Shipment using Filters to get Source document.
      CreateAndReleaseSalesDocument(SalesHeader,SalesHeader."Document Type"::Order,Item."No.",Location.Code,Customer."No.",TRUE);
      CreateAndReleasePurchDocument(
        PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",Item2."No.",Location.Code,Vendor."No.",TRUE);
      UseFiltersToGetSrcDocShipment(WarehouseShipmentHeader,Customer."No.",Vendor."No.",Location.Code,'');
      BlockItemForPosting(Item2."No.",TRUE);

      // Exercise: Post Warehouse Shipment.
      ASSERTERROR LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify: Error Message - Blocked must be 'No' in Item, and posted Sales shipment.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ErrItemBlocked,Item2."No.")) > 0,GETLASTERRORTEXT);
      VerifyPostedShipmentLinesSales(WarehouseShipmentHeader."No.",Item."No.",SalesHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    PROCEDURE ShowErrorSalesPurchRetBlocked@44();
    VAR
      WarehouseSetup@1008 : Record 5769;
      Location@1002 : Record 14;
      Item@1001 : Record 27;
      SalesHeader@1000 : Record 36;
      Customer@1007 : Record 18;
      WarehouseShipmentHeader@1009 : Record 7320;
      Vendor@1003 : Record 23;
      PurchaseHeader@1005 : Record 38;
      PostedWhseShipmentLine@1004 : Record 7323;
    BEGIN
      // Setup: Create setups, Item, Customer, and Vendor with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Stop and show the first posting error",
        WarehouseSetup."Receipt Posting Policy"::"Posting errors are not processed");
      CreateItem(Item);
      CreateLocationSetup(Location,FALSE,TRUE,TRUE);
      CreateCustomer(Customer,Location.Code);
      CreateVendor(Vendor,Location.Code);

      // Create Sales Order and Purchase Return Order. Create Warehouse Shipment using Filters to get Source document.
      CreateAndReleaseSalesDocument(SalesHeader,SalesHeader."Document Type"::Order,Item."No.",Location.Code,Customer."No.",TRUE);
      CreateAndReleasePurchDocument(
        PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",Item."No.",Location.Code,Vendor."No.",TRUE);
      UseFiltersToGetSrcDocShipment(WarehouseShipmentHeader,Customer."No.",Vendor."No.",Location.Code,'');
      BlockItemForPosting(Item."No.",TRUE);

      // Exercise: Post Warehouse Shipment.
      ASSERTERROR LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify: Error Message - Blocked must be 'No' in Item, and posted entries.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ErrItemBlocked,Item."No.")) > 0,GETLASTERRORTEXT);

      // Verify: Verify nothing is posted.
      PostedWhseShipmentLine.SETFILTER("Whse. Shipment No.",'%1',WarehouseShipmentHeader."No.");
      Assert.AreEqual(0,PostedWhseShipmentLine.COUNT,ErrNoRecord);

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    PROCEDURE ShowErrorAndUnblockAllShipment@74();
    VAR
      WarehouseSetup@1008 : Record 5769;
      LocationFrom@1002 : Record 14;
      LocationTo@1010 : Record 14;
      LocationInTransit@1011 : Record 14;
      Item@1001 : Record 27;
      SalesHeader@1000 : Record 36;
      Customer@1007 : Record 18;
      WarehouseShipmentHeader@1009 : Record 7320;
      Vendor@1003 : Record 23;
      PurchaseHeader@1005 : Record 38;
      TransferHeader@1012 : Record 5740;
    BEGIN
      // Setup: Create setups, Item, Customer and Vendor with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Stop and show the first posting error",
        WarehouseSetup."Receipt Posting Policy"::"Posting errors are not processed");
      CreateItem(Item);
      CreateTransferLocations(LocationFrom,LocationTo,LocationInTransit);
      UpdateItemInventory(Item."No.",LocationFrom.Code);
      CreateCustomer(Customer,LocationFrom.Code);
      CreateVendor(Vendor,LocationFrom.Code);

      // Create Sales Order, Purchase Return Order, and Transfer Order.
      // Create Warehouse Shipment using Filters to get Source document.
      CreateAndReleaseSalesDocument(SalesHeader,SalesHeader."Document Type"::Order,Item."No.",LocationFrom.Code,Customer."No.",TRUE);
      CreateAndReleasePurchDocument(
        PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",Item."No.",LocationFrom.Code,Vendor."No.",TRUE);
      CreateAndReleaseTransferOrder(TransferHeader,Item."No.",LocationFrom.Code,LocationTo.Code,LocationInTransit.Code,TRUE);
      UseFiltersToGetSrcDocShipment(WarehouseShipmentHeader,Customer."No.",Vendor."No.",LocationFrom.Code,LocationTo.Code);
      BlockItemForPosting(Item."No.",TRUE);

      // Exercise: Post Warehouse Shipment.
      ASSERTERROR LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify: Error Message - Blocked must be 'No' in Item, and posted entries.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ErrItemBlocked,Item."No.")) > 0,GETLASTERRORTEXT);

      // Exercise: Unblock Item and Post successfully.
      BlockItemForPosting(Item."No.",FALSE);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify: Verify posted shipment lines.
      VerifyPostedShipmentLinesSales(WarehouseShipmentHeader."No.",Item."No.",SalesHeader."No.");
      VerifyPostedShipmentLinesPurch(WarehouseShipmentHeader."No.",Item."No.",PurchaseHeader."No.");
      VerifyPostedShipmentLinesTrans(WarehouseShipmentHeader."No.",Item."No.",TransferHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    [HandlerFunctions(ShipLinesMessageHandler,StringMenuHandler)]
    PROCEDURE ErrNotProcessPostPurchRetTrans@72();
    VAR
      WarehouseSetup@1008 : Record 5769;
      SalesHeader@1000 : Record 36;
      WarehouseShipmentHeader@1009 : Record 7320;
      PurchaseHeader@1005 : Record 38;
      TransferHeader@1012 : Record 5740;
      Item@1001 : Record 27;
    BEGIN
      // Setup: Create setups for Sales, Purchase Return and Transfer with Customer, Vendor Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Posting errors are not processed",
        WarehouseSetup."Receipt Posting Policy"::"Posting errors are not processed");
      ShipmentSalesPurchRetTransfer(
        WarehouseShipmentHeader,SalesHeader,PurchaseHeader,TransferHeader,Item,FALSE,TRUE,TRUE);  // Remove Dimensions in Sales Order.

      // Exercise: Post Warehouse Shipment.
      LibraryWarehouse.PostWhseShptWithShipInvoiceMsg(WarehouseShipmentHeader."No.");

      // Verify: Verify posted shipment lines.
      VerifyPostedShipmentLinesPurch(WarehouseShipmentHeader."No.",Item."No.",PurchaseHeader."No.");  // Purchase Return Order.
      VerifyPostedShipmentLinesTrans(WarehouseShipmentHeader."No.",Item."No.",TransferHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    [HandlerFunctions(ShipLinesMessageHandler,StringMenuHandler)]
    PROCEDURE ErrNotProcessPostSalesOrdTrans@78();
    VAR
      WarehouseSetup@1005 : Record 5769;
      SalesHeader@1004 : Record 36;
      WarehouseShipmentHeader@1003 : Record 7320;
      PurchaseHeader@1002 : Record 38;
      TransferHeader@1001 : Record 5740;
      Item@1000 : Record 27;
    BEGIN
      // Setup: Create setups for Sales, Purchase Return and Transfer with Customer, Vendor Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Posting errors are not processed",
        WarehouseSetup."Receipt Posting Policy"::"Posting errors are not processed");
      ShipmentSalesPurchRetTransfer(
        WarehouseShipmentHeader,SalesHeader,PurchaseHeader,TransferHeader,Item,TRUE,FALSE,TRUE);
      // Remove Dimensions in Purchase Return.

      // Exercise: Post Warehouse Shipment.
      LibraryWarehouse.PostWhseShptWithShipInvoiceMsg(WarehouseShipmentHeader."No.");

      // Verify: Verify posted shipment lines.
      VerifyPostedShipmentLinesSales(WarehouseShipmentHeader."No.",Item."No.",SalesHeader."No.");
      VerifyPostedShipmentLinesTrans(WarehouseShipmentHeader."No.",Item."No.",TransferHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    [HandlerFunctions(ShipLinesMessageHandler,StringMenuHandler)]
    PROCEDURE ErrNotProcessPostSalesPurchRet@79();
    VAR
      WarehouseSetup@1005 : Record 5769;
      SalesHeader@1004 : Record 36;
      WarehouseShipmentHeader@1003 : Record 7320;
      PurchaseHeader@1002 : Record 38;
      TransferHeader@1001 : Record 5740;
      Item@1000 : Record 27;
    BEGIN
      // Setup: Create setups for Sales, Purchase Return and Transfer with Customer, Vendor Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Posting errors are not processed",
        WarehouseSetup."Receipt Posting Policy"::"Posting errors are not processed");
      ShipmentSalesPurchRetTransfer(
        WarehouseShipmentHeader,SalesHeader,PurchaseHeader,TransferHeader,Item,TRUE,TRUE,FALSE);
      // Remove Dimensions in Transfer Order.

      // Exercise: Post Warehouse Shipment.
      LibraryWarehouse.PostWhseShptWithShipInvoiceMsg(WarehouseShipmentHeader."No.");

      // Verify: Verify posted shipment lines.
      VerifyPostedShipmentLinesSales(WarehouseShipmentHeader."No.",Item."No.",SalesHeader."No.");
      VerifyPostedShipmentLinesPurch(WarehouseShipmentHeader."No.",Item."No.",PurchaseHeader."No.");  // Purchase Return Order.

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    PROCEDURE ShowErrorPurchaseOrderBlocked@106();
    VAR
      WarehouseSetup@1008 : Record 5769;
      Location@1002 : Record 14;
      Item@1001 : Record 27;
      PurchaseHeader@1000 : Record 38;
      Vendor@1007 : Record 23;
      WarehouseReceiptHeader@1009 : Record 7316;
    BEGIN
      // Setup: Create setups, Item and Vendor with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Posting errors are not processed",
        WarehouseSetup."Receipt Posting Policy"::"Stop and show the first posting error");
      CreateItem(Item);
      CreateLocationSetup(Location,FALSE,TRUE,TRUE);
      UpdateItemInventory(Item."No.",Location.Code);
      CreateVendor(Vendor,Location.Code);

      // Create Purchase Order setup. Create Warehouse Receipt using Filters to get Source document.
      CreateAndReleasePurchDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,Item."No.",Location.Code,Vendor."No.",TRUE);
      UseFiltersToGetSrcDocReceipt(WarehouseReceiptHeader,'',Vendor."No.",Location.Code);
      BlockItemForPosting(Item."No.",TRUE);

      // Exercise: Post Warehouse Receipt.
      ASSERTERROR LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Verify: Error Message - Item blocked.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ErrItemBlocked,Item."No.")) > 0,GETLASTERRORTEXT);

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    PROCEDURE ShowErrorUnblockSalesRetRcpt@143();
    VAR
      WarehouseSetup@1008 : Record 5769;
      Location@1002 : Record 14;
      Item@1001 : Record 27;
      SalesHeader@1005 : Record 36;
      Customer@1004 : Record 18;
      WarehouseReceiptHeader@1009 : Record 7316;
    BEGIN
      // Setup: Create setups, Item and Customer with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Posting errors are not processed",
        WarehouseSetup."Receipt Posting Policy"::"Stop and show the first posting error");
      CreateItem(Item);
      CreateLocationSetup(Location,FALSE,TRUE,TRUE);
      UpdateItemInventory(Item."No.",Location.Code);
      CreateCustomer(Customer,Location.Code);

      // Create Sales Return Order setup. Create Warehouse Receipt using Filters to get Source document.
      CreateAndReleaseSalesDocument(
        SalesHeader,SalesHeader."Document Type"::"Return Order",Item."No.",Location.Code,Customer."No.",TRUE);
      UseFiltersToGetSrcDocReceipt(WarehouseReceiptHeader,Customer."No.",'',Location.Code);
      BlockItemForPosting(Item."No.",TRUE);

      // Exercise: Post Warehouse Receipt.
      ASSERTERROR LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Verify: Error Message - Blocked must be 'No' in Item.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ErrItemBlocked,Item."No.")) > 0,GETLASTERRORTEXT);

      // Exercise: Unblock Item and Post Receipt.
      BlockItemForPosting(Item."No.",FALSE);
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Verify: Verify correct lines have been posted.
      VerifyPostedReceiptLinesSales(WarehouseReceiptHeader."No.",Item."No.",SalesHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    PROCEDURE ShowErrorPostSalesReturnOrder@115();
    VAR
      WarehouseSetup@1008 : Record 5769;
      Location@1002 : Record 14;
      Item@1001 : Record 27;
      Item2@1003 : Record 27;
      PurchaseHeader@1000 : Record 38;
      SalesHeader@1005 : Record 36;
      Vendor@1007 : Record 23;
      Customer@1004 : Record 18;
      WarehouseReceiptHeader@1009 : Record 7316;
    BEGIN
      // Setup: Create setups, Item, Customer and Vendor with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Posting errors are not processed",
        WarehouseSetup."Receipt Posting Policy"::"Stop and show the first posting error");
      CreateItem(Item);
      CreateItem(Item2);
      CreateLocationSetup(Location,FALSE,TRUE,TRUE);
      UpdateItemInventory(Item."No.",Location.Code);
      CreateCustomer(Customer,Location.Code);
      CreateVendor(Vendor,Location.Code);

      // Create Purchase Order and Sales Return Order setup. Create Warehouse Receipt using Filters to get Source document.
      CreateAndReleasePurchDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,Item."No.",Location.Code,Vendor."No.",TRUE);
      CreateAndReleaseSalesDocument(
        SalesHeader,SalesHeader."Document Type"::"Return Order",Item2."No.",Location.Code,Customer."No.",TRUE);
      UseFiltersToGetSrcDocReceipt(WarehouseReceiptHeader,Customer."No.",Vendor."No.",Location.Code);
      BlockItemForPosting(Item."No.",TRUE);

      // Exercise: Post Warehouse Receipt.
      ASSERTERROR LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Verify: Error Message - Blocked must be 'No' in Item; and posted Sales Return receipt.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ErrItemBlocked,Item."No.")) > 0,GETLASTERRORTEXT);
      VerifyPostedReceiptLinesSales(WarehouseReceiptHeader."No.",Item2."No.",SalesHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    PROCEDURE ShowErrorPurchSalesRetBlocked@137();
    VAR
      WarehouseSetup@1008 : Record 5769;
      Location@1002 : Record 14;
      Item@1001 : Record 27;
      PurchaseHeader@1000 : Record 38;
      SalesHeader@1005 : Record 36;
      Vendor@1007 : Record 23;
      Customer@1004 : Record 18;
      WarehouseReceiptHeader@1009 : Record 7316;
    BEGIN
      // Setup: Create setups, Item, Customer and Vendor with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Posting errors are not processed",
        WarehouseSetup."Receipt Posting Policy"::"Stop and show the first posting error");
      CreateItem(Item);
      CreateLocationSetup(Location,FALSE,TRUE,TRUE);
      CreateCustomer(Customer,Location.Code);
      CreateVendor(Vendor,Location.Code);

      // Create Purchase Order and Sales Return Order setup. Create Warehouse Receipt using Filters to get Source document.
      CreateAndReleasePurchDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,Item."No.",Location.Code,Vendor."No.",TRUE);
      CreateAndReleaseSalesDocument(
        SalesHeader,SalesHeader."Document Type"::"Return Order",Item."No.",Location.Code,Customer."No.",TRUE);
      UseFiltersToGetSrcDocReceipt(WarehouseReceiptHeader,Customer."No.",Vendor."No.",Location.Code);
      BlockItemForPosting(Item."No.",TRUE);

      // Exercise: Post Warehouse Receipt.
      ASSERTERROR LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Verify: Error Message - Blocked must be 'No' in Item.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ErrItemBlocked,Item."No.")) > 0,GETLASTERRORTEXT);

      // Verify: Verify nothing is posted.
      VerifyRcptLineNotExist(WarehouseReceiptHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SourceDocMessageHandler)]
    PROCEDURE ErrNotProcessForPurchSalesRet@153();
    VAR
      WarehouseSetup@1008 : Record 5769;
      Item@1001 : Record 27;
      PurchaseHeader@1000 : Record 38;
      SalesHeader@1005 : Record 36;
      WarehouseReceiptHeader@1009 : Record 7316;
    BEGIN
      // Setup: Create setups, Item, Customer and Vendor with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Posting errors are not processed",
        WarehouseSetup."Receipt Posting Policy"::"Posting errors are not processed");
      ReceiptPurchaseSalesReturn(WarehouseReceiptHeader,Item,SalesHeader,PurchaseHeader,FALSE,FALSE);
      // Dimensions removed from Headers.

      // Exercise: Post Warehouse Receipt.
      LibraryWarehouse.PostWhseRcptWithConfirmMsg(WarehouseReceiptHeader."No.");

      // Verify: Verify Message in handler and that nothing is posted.
      VerifyRcptLineNotExist(WarehouseReceiptHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SourceDocMessageHandler)]
    PROCEDURE ErrNotProcessPostPurchaseOrder@173();
    VAR
      WarehouseSetup@1008 : Record 5769;
      Item@1001 : Record 27;
      PurchaseHeader@1000 : Record 38;
      SalesHeader@1005 : Record 36;
      WarehouseReceiptHeader@1009 : Record 7316;
    BEGIN
      // Setup: Create setups, Item, Customer and Vendor with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Posting errors are not processed",
        WarehouseSetup."Receipt Posting Policy"::"Posting errors are not processed");
      ReceiptPurchaseSalesReturn(WarehouseReceiptHeader,Item,SalesHeader,PurchaseHeader,TRUE,FALSE);  // Sales Dimension removed.

      // Exercise: Post Warehouse Receipt.
      LibraryWarehouse.PostWhseRcptWithConfirmMsg(WarehouseReceiptHeader."No.");

      // Verify: Verify Message in handler and Posted receipt.
      VerifyPostedReceiptLinesPurch(WarehouseReceiptHeader."No.",Item."No.",PurchaseHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,SourceDocMessageHandler)]
    PROCEDURE ErrNotProcessPostSalesRetOrder@174();
    VAR
      WarehouseSetup@1008 : Record 5769;
      Item@1001 : Record 27;
      PurchaseHeader@1000 : Record 38;
      SalesHeader@1005 : Record 36;
      WarehouseReceiptHeader@1009 : Record 7316;
    BEGIN
      // Setup: Create setups, Item, Customer and Vendor with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Posting errors are not processed",
        WarehouseSetup."Receipt Posting Policy"::"Posting errors are not processed");
      ReceiptPurchaseSalesReturn(WarehouseReceiptHeader,Item,SalesHeader,PurchaseHeader,FALSE,TRUE);  // Purchase Dimension removed.

      // Exercise: Post Warehouse Receipt.
      LibraryWarehouse.PostWhseRcptWithConfirmMsg(WarehouseReceiptHeader."No.");

      // Verify: Verify Message in handler and Posted receipt.
      VerifyPostedReceiptLinesSales(WarehouseReceiptHeader."No.",Item."No.",SalesHeader."No.");

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    PROCEDURE WhseShipmentLinesSorting@28();
    VAR
      WarehouseSetup@1008 : Record 5769;
      Location@1002 : Record 14;
      Item@1001 : Record 27;
      PurchaseHeader@1000 : Record 38;
      PurchaseHeader2@1006 : Record 38;
      Vendor@1007 : Record 23;
      Customer@1004 : Record 18;
      WarehouseShipmentHeader@1009 : Record 7320;
      Index@1003 : Integer;
      Count@1005 : Integer;
    BEGIN
      // Setup: Create setups, Item, Customer and Vendor with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Posting errors are not processed",
        WarehouseSetup."Receipt Posting Policy"::"Stop and show the first posting error");
      SetupSortingTestData(Item,Location,Customer,Vendor,Count);

      // Create Purchase Order and Sales Return Order setup. Create Warehouse Shipment using Filters to get Source document.
      FOR Index := 1 TO Count DO
        CreatePurchaseSetup(
          PurchaseHeader,PurchaseHeader2,PurchaseHeader."Document Type"::"Return Order",Item."No.",Location.Code,Vendor."No.");

      UseFiltersToGetSrcDocShipment(WarehouseShipmentHeader,Customer."No.",Vendor."No.",Location.Code,'');

      // Verify
      VerifyWhseShipmentLineSorting(Item."No.",Count * 2);

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    PROCEDURE WhseReceiptLinesSorting@58();
    VAR
      WarehouseSetup@1008 : Record 5769;
      Location@1002 : Record 14;
      Item@1001 : Record 27;
      PurchaseHeader@1000 : Record 38;
      Vendor@1007 : Record 23;
      Customer@1004 : Record 18;
      WarehouseReceiptHeader@1009 : Record 7316;
      Index@1003 : Integer;
      Count@1006 : Integer;
    BEGIN
      // Setup: Create setups, Item, Customer and Vendor with Dimensions.
      Initialize;
      WarehouseSetup.GET;
      UpdateWarehouseSetup(
        WarehouseSetup."Shipment Posting Policy"::"Posting errors are not processed",
        WarehouseSetup."Receipt Posting Policy"::"Stop and show the first posting error");
      SetupSortingTestData(Item,Location,Customer,Vendor,Count);

      // Create Purchase Order and Sales Return Order setup. Create Warehouse Receipt using Filters to get Source document.
      FOR Index := 1 TO Count DO
        CreateAndReleasePurchDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,Item."No.",Location.Code,Vendor."No.",TRUE);

      UseFiltersToGetSrcDocReceipt(WarehouseReceiptHeader,Customer."No.",Vendor."No.",Location.Code);

      // Verify
      VerifyWhseReceiptLineSorting(Item."No.",Count);

      // Teardown.
      UpdateWarehouseSetup(WarehouseSetup."Shipment Posting Policy",WarehouseSetup."Receipt Posting Policy");
    END;

    [Test]
    PROCEDURE WhseRcptFromPurchDocumentNotCreatedWithItemBlocked@59();
    VAR
      Item@1001 : Record 27;
      Location@1002 : Record 14;
      PurchHeader@1000 : Record 38;
    BEGIN
      // [FEATURE] [Warehouse Receipt]
      // [SCENARIO 362752] Action "Create Warehouse Receipt" in purchase order fails if the item in purch. order is blocked

      Initialize;

      // [GIVEN] Create purchase order
      CreateItem(Item);
      CreateLocation(Location,FALSE,FALSE,TRUE);
      CreateAndReleasePurchDocument(
        PurchHeader,PurchHeader."Document Type"::Order,Item."No.",Location.Code,LibraryPurchase.CreateVendorNo,FALSE);
      // [GIVEN] Set item to "Blocked"
      BlockItemForPosting(Item."No.",TRUE);

      // [WHEN] "Create Warehouse Receipt" action is invoked
      ASSERTERROR LibraryWarehouse.CreateWhseReceiptFromPO(PurchHeader);

      // [THEN] Error message: "Blocked must be equal to "No" in Item"
      Assert.ExpectedError(STRSUBSTNO(ErrItemBlocked,Item."No."));
    END;

    [Test]
    PROCEDURE GetSourceDocsDoesNotCreateWhseRcptWithItemBlocked@87();
    VAR
      Item@1001 : Record 27;
      Location@1002 : Record 14;
      PurchHeader@1000 : Record 38;
      WarehouseEmployee@1004 : Record 7301;
      WhseReceiptHeader@1003 : Record 7316;
    BEGIN
      // [FEATURE] [Warehouse Receipt] [Filters to Get Source Documents]
      // [SCENARIO 362752] "Use Filters to get Source Docs" throws error if the source purchase document contains only line with a blocked item

      Initialize;

      // [GIVEN] Create purchase order
      CreateItem(Item);
      CreateLocation(Location,FALSE,FALSE,TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
      CreateAndReleasePurchDocument(
        PurchHeader,PurchHeader."Document Type"::Order,Item."No.",Location.Code,LibraryPurchase.CreateVendorNo,FALSE);
      // [GIVEN] Set item to "Blocked"
      BlockItemForPosting(Item."No.",TRUE);

      // [WHEN] "Filters to Get Source Docs" page is run to create warehouse receipt
      ASSERTERROR UseFiltersToGetSrcDocReceipt(WhseReceiptHeader,'',PurchHeader."Buy-from Vendor No.",Location.Code);

      // [THEN] Error message: "There are no Warehouse Receipt Lines created"
      Assert.ExpectedError(NoWhseReceiptLinesCreatedErr);
    END;

    [Test]
    PROCEDURE GetSourceDocsCreatesWhseRcptWithOneItemBlockedAndOneActive@62();
    VAR
      Item@1001 : ARRAY [2] OF Record 27;
      Location@1002 : Record 14;
      PurchHeader@1000 : Record 38;
      WarehouseEmployee@1004 : Record 7301;
      WhseReceiptHeader@1003 : Record 7316;
    BEGIN
      // [FEATURE] [Warehouse Receipt] [Filters to Get Source Documents]
      // [SCENARIO 362752] "Use Filters to get Source Docs" creates warehouse receipt if the source purch. order has two line with different items, one of which is blocked

      Initialize;

      // [GIVEN] Create two items "I1" and "I2"
      CreateItem(Item[1]);
      CreateItem(Item[2]);
      CreateLocation(Location,FALSE,FALSE,TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
      // [GIVEN] Create purchase order with two lines, each for a different item
      CreatePurchaseDocument(
        PurchHeader,PurchHeader."Document Type"::Order,Item[1]."No.",Location.Code,LibraryPurchase.CreateVendorNo,FALSE);
      CreatePurchaseLine(PurchHeader,Item[2]."No.",Location.Code);
      LibraryPurchase.ReleasePurchaseDocument(PurchHeader);

      // [GIVEN] Set item "I2" to "Blocked"
      BlockItemForPosting(Item[2]."No.",TRUE);

      // [WHEN] Run "Filters to Get Source Docs"
      UseFiltersToGetSrcDocReceipt(WhseReceiptHeader,'',PurchHeader."Buy-from Vendor No.",Location.Code);

      // [THEN] Warehouse receipt line for item "I1" is created, no whse. receipt for "I2"
      VerifyWhseReceiptLineCreated(WhseReceiptHeader."No.",Item[1]."No.");
      VerifyWhseReceiptLineNotCreated(WhseReceiptHeader."No.",Item[2]."No.");
    END;

    [Test]
    PROCEDURE WhseShipFromSalesDocumentNotCreatedWithItemBlocked@67();
    VAR
      Item@1001 : Record 27;
      Location@1002 : Record 14;
      SalesHeader@1000 : Record 36;
    BEGIN
      // [FEATURE] [Warehouse Shipment]
      // [SCENARIO 362752] Action "Create Warehouse Shipment" in sales order fails if the item in sales order is blocked

      Initialize;

      // [GIVEN] Create sales order
      CreateItem(Item);
      CreateLocation(Location,FALSE,TRUE,FALSE);
      CreateAndReleaseSalesDocument(
        SalesHeader,SalesHeader."Document Type"::Order,Item."No.",Location.Code,LibrarySales.CreateCustomerNo,FALSE);
      // [GIVEN] Set item to "Blocked"
      BlockItemForPosting(Item."No.",TRUE);

      // [WHEN] "Create Warehouse Shipment" action is invoked
      ASSERTERROR LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // [THEN] Error message: "Blocked must be equal to "No" in Item"
      Assert.ExpectedError(STRSUBSTNO(ErrItemBlocked,Item."No."));
    END;

    [Test]
    PROCEDURE GetSourceDocsDoesNotCreateWhseShipmentWithItemBlocked@88();
    VAR
      Item@1001 : Record 27;
      Location@1002 : Record 14;
      SalesHeader@1000 : Record 36;
      WarehouseEmployee@1004 : Record 7301;
      WhseShipmentHeader@1003 : Record 7320;
    BEGIN
      // [FEATURE] [Warehouse Shipment] [Filters to Get Source Documents]
      // [SCENARIO 362752] "Use Filters to get Source Docs" throws error if the source sales document contains only line with a blocked item

      Initialize;

      // [GIVEN] Create sales order
      CreateItem(Item);
      CreateLocation(Location,FALSE,TRUE,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
      CreateAndReleaseSalesDocument(
        SalesHeader,SalesHeader."Document Type"::Order,Item."No.",Location.Code,LibrarySales.CreateCustomerNo,FALSE);
      // [GIVEN] Set item to "Blocked"
      BlockItemForPosting(Item."No.",TRUE);

      // [WHEN] "Filters to Get Source Docs" page is run to create warehouse shipment
      ASSERTERROR UseFiltersToGetSrcDocShipment(WhseShipmentHeader,SalesHeader."Sell-to Customer No.",'',Location.Code,'');

      // [THEN] Error message: "There are no Warehouse Shipment Lines created"
      Assert.ExpectedError(NoWhseShipmentLinesCreatedErr);
    END;

    [Test]
    PROCEDURE GetSourceDocsCreatesWhseShipmentWithOneItemBlockedAndOneActive@95();
    VAR
      Item@1001 : ARRAY [2] OF Record 27;
      Location@1002 : Record 14;
      SalesHeader@1000 : Record 36;
      WarehouseEmployee@1004 : Record 7301;
      WhseShipmentHeader@1003 : Record 7320;
    BEGIN
      // [FEATURE] [Warehouse Shipment] [Filters to Get Source Documents]
      // [SCENARIO 362752] "Use Filters to get Source Docs" creates warehouse shipment if the source sales order has two line with different items, one of which is blocked

      Initialize;

      // [GIVEN] Create two items "I1" and "I2"
      CreateItem(Item[1]);
      CreateItem(Item[2]);
      CreateLocation(Location,FALSE,TRUE,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
      // [GIVEN] Create sales order with two lines, each for a different item
      CreateSalesDocument(
        SalesHeader,SalesHeader."Document Type"::Order,Item[1]."No.",Location.Code,LibrarySales.CreateCustomerNo,FALSE);
      CreateSalesLine(SalesHeader,Item[2]."No.",Location.Code);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // [GIVEN] Set item "I2" to "Blocked"
      BlockItemForPosting(Item[2]."No.",TRUE);

      // [WHEN] Run "Filters to Get Source Docs"
      UseFiltersToGetSrcDocShipment(WhseShipmentHeader,SalesHeader."Sell-to Customer No.",'',Location.Code,'');

      // [THEN] Warehouse shipment line for item "I1" is created, no whse. shipment for "I2"
      VerifyWhseShipmentLineCreated(WhseShipmentHeader."No.",Item[1]."No.");
      VerifyWhseShipmentLineNotCreated(WhseShipmentHeader."No.",Item[2]."No.");
    END;

    [Test]
    PROCEDURE AdvancedLocationAcceptedInItemReclassJournalSameLocationCode@70();
    VAR
      Location@1000 : Record 14;
      Item@1004 : Record 27;
      ItemJournalLine@1001 : Record 83;
      xItemJournalLine@1003 : Record 83;
      WMSManagement@1002 : Codeunit 7302;
    BEGIN
      // [FEATURE] [Item Reclassification]
      // [SCENARIO 377752] It should be possible to enter location with "Directed Put-Away and Pick" in item reclassification journal if "Location Code" = "New Location Code"

      Initialize;

      // [GIVEN] Create location "L" with "Directed Put-Away and Pick" = TRUE
      CreateDirectedPutAwayAndPickLocation(Location);
      LibraryInventory.CreateItem(Item);

      // [GIVEN] Create item reclassification journal line
      CreateItemReclassificationJournalLine(ItemJournalLine,Item."No.",0);

      // [GIVEN] Set "Location Code" = "L" in item reclassification journal
      ItemJournalLine.VALIDATE("Location Code",Location.Code);

      // [WHEN] Set = "New Location Code" = "L" in item reclassification journal
      xItemJournalLine := ItemJournalLine;
      ItemJournalLine.VALIDATE("New Location Code",Location.Code);
      WMSManagement.CheckItemJnlLineLocation(ItemJournalLine,xItemJournalLine);

      // [THEN] Value is accepted
      ItemJournalLine.TESTFIELD("New Location Code",Location.Code);
    END;

    [Test]
    PROCEDURE AdvancedLocationNotAcceptedInItemReclassJournalDifferentLocationCodes@77();
    VAR
      Location@1000 : ARRAY [2] OF Record 14;
      Item@1004 : Record 27;
      ItemJournalLine@1001 : Record 83;
      xItemJournalLine@1002 : Record 83;
      WMSManagement@1003 : Codeunit 7302;
    BEGIN
      // [FEATURE] [Item Reclassification]
      // [SCENARIO 377752] It should not be allowed to enter location with "Directed Put-Away and Pick" in item reclassification journal if "Location Code" <> "New Location Code"

      Initialize;

      // [GIVEN] Create 2 locations ("L1" and "L2"), "Directed Put-Away and Pick" = TRUE in both
      CreateDirectedPutAwayAndPickLocation(Location[1]);
      CreateDirectedPutAwayAndPickLocation(Location[2]);
      LibraryInventory.CreateItem(Item);

      // [GIVEN] Create item reclassification journal line
      CreateItemReclassificationJournalLine(ItemJournalLine,Item."No.",0);

      // [GIVEN] Set "Location Code" = "L1" in item reclassification journal
      ItemJournalLine.VALIDATE("Location Code",Location[1].Code);

      // [WHEN] Set "New Location Code" = "L2" in item reclassification journal
      xItemJournalLine := ItemJournalLine;
      ItemJournalLine.VALIDATE("New Location Code",Location[2].Code);
      ASSERTERROR WMSManagement.CheckItemJnlLineLocation(ItemJournalLine,xItemJournalLine);

      // [THEN] Error is thrown
      Assert.ExpectedError(STRSUBSTNO(CannotReclassifyLocationErr,Location[1].Code));
    END;

    [Test]
    PROCEDURE ValidateBinErrorInItemReclassJournalAdvancedLocation@123();
    VAR
      Location@1000 : Record 14;
      ItemJournalLine@1002 : Record 83;
      xItemJournalLine@1003 : Record 83;
      WMSManagement@1001 : Codeunit 7302;
    BEGIN
      // [FEATURE] [Item Reclassification] [Bin]
      // [SCENARIO 377752] It should not be allowed to enter bin code in item reclassification journal if location uses "Directed Put-Away and Pick"

      Initialize;

      // [GIVEN] Create location "L" with "Directed Put-Away and Pick" = TRUE
      // [GIVEN] Create item reclassification journal line for location "L"
      CreateReclassificationSetup(ItemJournalLine);
      Location.GET(ItemJournalLine."Location Code");

      // [WHEN] Try to set bin code in reclassification journal
      xItemJournalLine := ItemJournalLine;
      ItemJournalLine.VALIDATE("Bin Code",Location."Receipt Bin Code");
      ASSERTERROR WMSManagement.CheckItemJnlLineFieldChange(ItemJournalLine,xItemJournalLine,ItemJournalLine.FIELDCAPTION("Bin Code"));

      // [THEN] Error is thrown
      Assert.ExpectedError(
        STRSUBSTNO(
          CannotUseLocationErr,ItemJournalLine.FIELDCAPTION("Bin Code"),LOWERCASE(Location.TABLECAPTION),
          Location.Code,Location.FIELDCAPTION("Directed Put-away and Pick")));
    END;

    [Test]
    PROCEDURE ValidateNewBinErrorInItemReclassJournalAdvancedLocation@130();
    VAR
      Location@1000 : Record 14;
      ItemJournalLine@1002 : Record 83;
      xItemJournalLine@1003 : Record 83;
      WMSManagement@1001 : Codeunit 7302;
    BEGIN
      // [FEATURE] [Item Reclassification] [Bin]
      // [SCENARIO 377752] It should not be allowed to enter new bin code in item reclassification journal if location uses "Directed Put-Away and Pick"

      Initialize;

      // [GIVEN] Create location "L" with "Directed Put-Away and Pick" = TRUE
      // [GIVEN] Create item reclassification journal line for location "L"
      CreateReclassificationSetup(ItemJournalLine);
      Location.GET(ItemJournalLine."Location Code");

      // [WHEN] Try to set new bin code in reclassification journal
      xItemJournalLine := ItemJournalLine;
      ItemJournalLine.VALIDATE("New Bin Code",Location."Shipment Bin Code");
      ASSERTERROR
        WMSManagement.CheckItemJnlLineFieldChange(ItemJournalLine,xItemJournalLine,ItemJournalLine.FIELDCAPTION("New Bin Code"));

      // [THEN] Error is thrown
      Assert.ExpectedError(
        STRSUBSTNO(
          CannotUseLocationErr,ItemJournalLine.FIELDCAPTION("New Bin Code"),LOWERCASE(Location.TABLECAPTION),
          Location.Code,Location.FIELDCAPTION("Directed Put-away and Pick")));
    END;

    [Test]
    PROCEDURE DimensionReclassifiedInItemReclassJournalOnAdvancedLocation@101();
    VAR
      Location@1000 : Record 14;
      Item@1004 : Record 27;
      GeneralLedgerSetup@1012 : Record 98;
      Dimension@1010 : Record 348;
      DimensionValue@1011 : ARRAY [2] OF Record 349;
      DefaultDimension@1009 : Record 352;
      ItemJournalLine@1001 : Record 83;
      WarehouseEmployee@1003 : Record 7301;
      Quantity@1002 : Decimal;
    BEGIN
      // [FEATURE] [Item Reclassification] [Dimension]
      // [SCENARIO 377752] It should be possible to reclassify item ledger entry on a "directed put-away and pick" location via item reclassification journal

      Initialize;

      // [GIVEN] Create location "L" with directed put-away and pick
      LibraryWarehouse.CreateFullWMSLocation(Location,1);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);

      // [GIVEN] Create item "I" with defaul global dimension 1 value = "D1"
      LibraryInventory.CreateItem(Item);
      GeneralLedgerSetup.GET;
      Dimension.GET(GeneralLedgerSetup."Global Dimension 1 Code");
      LibraryDimension.CreateDimensionValue(DimensionValue[1],Dimension.Code);
      LibraryDimension.CreateDimensionValue(DimensionValue[2],Dimension.Code);
      LibraryDimension.CreateDefaultDimension(DefaultDimension,DATABASE::Item,Item."No.",Dimension.Code,DimensionValue[1].Code);

      // [GIVEN] Post positive adjustment of "X" pcs of item "I" on location "L".
      Quantity := LibraryRandom.RandInt(100);
      PostPositiveAdjustmentOnWarehouse(Location,Item,Quantity);

      // [GIVEN] Create item reclassification journal line. Item = "I", Location = "L", Shortcut Dimension 1 Code = "D1", New Shortcut Dimension 1 Code = "D2"
      CreateItemReclassificationJournalLine(ItemJournalLine,Item."No.",Quantity);
      ItemJournalLine.VALIDATE("Location Code",Location.Code);
      ItemJournalLine.VALIDATE("Shortcut Dimension 1 Code",DimensionValue[1].Code);
      ItemJournalLine.VALIDATE("New Shortcut Dimension 1 Code",DimensionValue[2].Code);
      ItemJournalLine.MODIFY(TRUE);

      // [WHEN] Post item reclassification journal
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      // [THEN] Item Inventory with dimension value "D1" = 0, Item Inventory with dimension value "D2" = "X"
      VerifyItemInventory(Item."No.",Location.Code,DimensionValue[1].Code,0);
      VerifyItemInventory(Item."No.",Location.Code,DimensionValue[2].Code,Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE WhsePickReallocatedNonSpecificInventoryReservation@76();
    VAR
      Location@1000 : Record 14;
      Item@1001 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      ItemJournalLine@1005 : Record 83;
      WarehouseActivityHeader@1007 : Record 5766;
      WarehouseActivityLine@1008 : Record 5767;
      LotNo@1009 : ARRAY [2] OF Code[20];
      LotQty@1011 : Integer;
    BEGIN
      // [FEATURE] [Item Tracking] [Reservation] [Late Binding] [Warehouse] [Pick]
      // [SCENARIO 378082] Non-specific reservation on inventory should be reallocated when posting warehouse pick

      Initialize;

      // [GIVEN] Item with lot warehouse tracking
      CreateShipPickLocation(Location);
      CreateItemWithLotWarehouseTracking(Item);

      // [GIVEN] Post inventory stock in two lots: "L1" and "L2", quantity in each lot is "X"
      LotNo[1] := LibraryUtility.GenerateGUID;
      LotNo[2] := LibraryUtility.GenerateGUID;
      LotQty := LibraryRandom.RandIntInRange(100,200);
      CreateItemJournalLine(ItemJournalLine,Item."No.",Location.Code,LotQty * 2);
      AssignLotNoToItemJournalLine(ItemJournalLine,LotNo[1],LotQty);
      AssignLotNoToItemJournalLine(ItemJournalLine,LotNo[2],LotQty);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // [GIVEN] Create sales order "S1", quantity = "X" and run autoreserve. Non-specific reservation created for lot "L1"
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LotQty,Location.Code);
      LibrarySales.AutoReserveSalesLine(SalesLine);

      // [GIVEN] Create second sales order "S2", quantity = "X"
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LotQty,Location.Code);

      // [GIVEN] Create warehouse pick from sales order "S2" and set Lot No. = "L1"
      CreateWhsePickFromSalesOrder(SalesHeader);
      FindWarehouseActivityLine(
        WarehouseActivityLine,DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      WarehouseActivityLine.MODIFYALL("Lot No.",LotNo[1]);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");

      // [WHEN] Post warehouse pick
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);

      // [THEN] "X" pcs are picked
      // [THEN] Reservation for sales order "S1" is reallocated - lot "L2" is reserved
      VerifyPickedQuantity(Item."No.",LotQty);
      VerifyReservedLotNo(Item."No.",LotNo[2]);
    END;

    [Test]
    PROCEDURE CannotUpdateShipmentDateInSalesLineWhseShipmentExists@85();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // [FEATURE] [Warehouse Shipment] [Shipment Date]
      // [SCENARIO 380672] Shipment date cannot be updated in a sales line if there is a warehouse shipment for this line

      Initialize;

      // [GIVEN] Location with "Require Shipment"
      // [GIVEN] Create sales order and warehouse shipment
      CreateSalesOrderWithWarehouseShipment(SalesHeader,SalesLine);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // [WHEN] Modify shipment date in the sales line
      ASSERTERROR SalesLine.VALIDATE("Shipment Date",SalesLine."Shipment Date" + LibraryRandom.RandInt(10));

      // [THEN] Error: Shipment date must not be changed when a warehouse shipment line exists
      Assert.ExpectedError(ShipmentDateMustNotChangeErr);
    END;

    [Test]
    PROCEDURE CanUpdateShipmentDateInSalesLineNoWhseShipment@100();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1003 : Record 37;
      NewShipmentDate@1000 : Date;
    BEGIN
      // [FEATURE] [Warehouse Shipment] [Shipment Date]
      // [SCENARIO 380672] Shipment date in a sales line can be updated if there is no warehouse shipment for this line

      Initialize;

      // [GIVEN] Location with "Require Shipment"
      // [GIVEN] Create sales order without related warehouse shipment
      CreateSalesOrderWithWarehouseShipment(SalesHeader,SalesLine);

      // [WHEN] Modify shipment date in the sales line
      NewShipmentDate := SalesLine."Shipment Date" + LibraryRandom.RandInt(10);
      SalesLine.VALIDATE("Shipment Date",NewShipmentDate);

      // [THEN] Shipment date is updated
      SalesLine.TESTFIELD("Shipment Date",NewShipmentDate);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1059 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      NoSeriesSetup;
      ItemJournalSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AssignLotNoToItemJournalLine@84(ItemJournalLine@1000 : Record 83;LotNo@1001 : Code[20];Qty@1002 : Decimal);
    BEGIN
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(Qty);
      ItemJournalLine.OpenItemTrackingLines(FALSE);
    END;

    LOCAL PROCEDURE SetupSortingTestData@61(VAR Item@1000 : Record 27;VAR Location@1001 : Record 14;VAR Customer@1002 : Record 18;VAR Vendor@1003 : Record 23;VAR Count@1004 : Integer);
    BEGIN
      CreateItem(Item);
      CreateLocationSetup(Location,FALSE,TRUE,TRUE);
      CreateCustomer(Customer,Location.Code);
      CreateVendor(Vendor,Location.Code);
      Count := LibraryRandom.RandIntInRange(5,10);
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      InventorySetup@1000 : Record 313;
      PurchasesPayablesSetup@1005 : Record 312;
      SalesSetup@1004 : Record 311;
      WarehouseSetup@1002 : Record 5769;
    BEGIN
      LibraryInventory.NoSeriesSetup(InventorySetup);
      LibraryWarehouse.NoSeriesSetup(WarehouseSetup);

      SalesSetup.GET;
      SalesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@144();
    BEGIN
      CLEAR(ItemJournalTemplate);
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      CLEAR(ItemJournalBatch);
      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDirectedPutAwayAndPickLocation@93(VAR Location@1000 : Record 14);
    BEGIN
      LibraryWarehouse.CreateLocationWMS(Location,TRUE,TRUE,TRUE,TRUE,TRUE);
      Location.VALIDATE("Directed Put-away and Pick",TRUE);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@82(VAR ItemJournalLine@1000 : Record 83;ItemNo@1003 : Code[20];LocationCode@1002 : Code[10];Quantity@1001 : Decimal);
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithLotWarehouseTracking@83(VAR Item@1000 : Record 27);
    VAR
      ItemTrackingCode@1001 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateLotItem(Item);
      ItemTrackingCode.GET(Item."Item Tracking Code");
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",TRUE);
      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationSetup@35(VAR Location@1005 : Record 14;UseAsInTransit@1001 : Boolean;RequireShipment@1002 : Boolean;RequireReceive@1003 : Boolean);
    VAR
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      CreateLocation(Location,UseAsInTransit,RequireShipment,RequireReceive);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
    END;

    LOCAL PROCEDURE CreateLocation@39(VAR Location@1000 : Record 14;UseAsInTransit@1001 : Boolean;RequireShipment@1003 : Boolean;RequireReceive@1004 : Boolean);
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Use As In-Transit",UseAsInTransit);
      Location.VALIDATE("Require Shipment",RequireShipment);
      Location.VALIDATE("Require Receive",RequireReceive);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReclassificationSetup@145(VAR ItemJournalLine@1001 : Record 83);
    VAR
      Location@1000 : Record 14;
      Item@1002 : Record 27;
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,1);
      LibraryInventory.CreateItem(Item);
      CreateItemReclassificationJournalLine(ItemJournalLine,Item."No.",0);
      ItemJournalLine.VALIDATE("Location Code",Location.Code);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@92(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];Qty@1003 : Decimal;LocationCode@1004 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Qty);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithWarehouseShipment@104(VAR SalesHeader@1002 : Record 36;VAR SalesLine@1003 : Record 37);
    VAR
      Item@1000 : Record 27;
      Location@1001 : Record 14;
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateLocation(Location,FALSE,TRUE,FALSE);
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandInt(100),Location.Code);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE UpdateItemInventory@50(ItemNo@1004 : Code[20];LocationCode@1005 : Code[10]);
    BEGIN
      UpdateItemInventoryFixedQty(ItemNo,LocationCode,LibraryRandom.RandDec(10,2) + 1000);
    END;

    LOCAL PROCEDURE UpdateItemInventoryFixedQty@81(ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];Quantity@1003 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CreateItemJournalLine(ItemJournalLine,ItemNo,LocationCode,Quantity);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateWarehouseSetup@9(ShipmentPostingPolicy@1001 : Option;ReceiptPostingPolicy@1002 : Option);
    VAR
      WarehouseSetup@1000 : Record 5769;
    BEGIN
      WarehouseSetup.GET;
      WarehouseSetup.VALIDATE("Shipment Posting Policy",ShipmentPostingPolicy);
      WarehouseSetup.VALIDATE("Receipt Posting Policy",ReceiptPostingPolicy);
      WarehouseSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItem@6(VAR Item@1001 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateDefaultDimensionForItem(Item."No.");
    END;

    LOCAL PROCEDURE CreateDefaultDimensionForItem@55(ItemNo@1000 : Code[20]);
    VAR
      DefaultDimension@1003 : Record 352;
      Dimension@1002 : Record 348;
      DimensionValue@1001 : Record 349;
    BEGIN
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,ItemNo,Dimension.Code,DimensionValue.Code);
      DefaultDimension.VALIDATE("Value Posting",DefaultDimension."Value Posting"::"Code Mandatory");
      DefaultDimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomer@17(VAR Customer@1000 : Record 18;LocationCode@1001 : Code[10]);
    VAR
      LibrarySales@1002 : Codeunit 130509;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      CreateDefaultDimensionCustomer(Customer."No.");
      Customer.VALIDATE("Location Code",LocationCode);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDefaultDimensionCustomer@1(CustomerNo@1000 : Code[20]);
    VAR
      DefaultDimension@1003 : Record 352;
      Dimension@1002 : Record 348;
      DimensionValue@1001 : Record 349;
    BEGIN
      SelectDimensionValue(Dimension,DimensionValue);
      LibraryDimension.CreateDefaultDimensionCustomer(DefaultDimension,CustomerNo,Dimension.Code,DimensionValue.Code);
      UpdateDefaultDimension(DefaultDimension);
    END;

    LOCAL PROCEDURE SelectDimensionValue@42(VAR Dimension@1001 : Record 348;VAR DimensionValue@1000 : Record 349);
    BEGIN
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
    END;

    LOCAL PROCEDURE UpdateDefaultDimension@41(DefaultDimension@1000 : Record 352);
    BEGIN
      DefaultDimension.VALIDATE("Value Posting",DefaultDimension."Value Posting"::"Code Mandatory");
      DefaultDimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesSetup@5(VAR SalesHeader@1000 : Record 36;VAR SalesHeader2@1001 : Record 36;DocumentType@1005 : Option;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];CustomerNo@1004 : Code[20]);
    BEGIN
      // Create and Release Sales Document with and without Dimensions.
      CreateAndReleaseSalesDocument(SalesHeader,DocumentType,ItemNo,LocationCode,CustomerNo,TRUE);
      CreateAndReleaseSalesDocument(SalesHeader2,DocumentType,ItemNo,LocationCode,CustomerNo,FALSE);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesDocument@38(VAR SalesHeader@1000 : Record 36;DocumentType@1005 : Option;ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];CustomerNo@1003 : Code[20];DimensionSetEntryRequired@1004 : Boolean);
    BEGIN
      CreateSalesDocument(SalesHeader,DocumentType,ItemNo,LocationCode,CustomerNo,DimensionSetEntryRequired);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateItemReclassificationJournalLine@94(VAR ItemJournalLine@1002 : Record 83;ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    VAR
      ItemJournalTemplate@1001 : Record 82;
      ItemJournalBatch@1000 : Record 233;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Transfer);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::Transfer,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateSalesDocument@48(VAR SalesHeader@1000 : Record 36;DocumentType@1006 : Option;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];CustomerNo@1004 : Code[20];DimensionSetEntryRequired@1005 : Boolean);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      UpdateSalesHeader(SalesHeader,DimensionSetEntryRequired);
      CreateSalesLine(SalesHeader,ItemNo,LocationCode);
    END;

    LOCAL PROCEDURE CreateSalesLine@96(VAR SalesHeader@1000 : Record 36;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesHeader@30(VAR SalesHeader@1000 : Record 36;DimensionSetEntryRequired@1001 : Boolean);
    BEGIN
      IF NOT DimensionSetEntryRequired THEN BEGIN
        SalesHeader.VALIDATE("Dimension Set ID",0);
        SalesHeader.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentHeader@11(VAR WarehouseShipmentHeader@1000 : Record 7320;LocationCode@1001 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader.VALIDATE("Location Code",LocationCode);
      WarehouseShipmentHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptHeader@64(VAR WarehouseReceiptHeader@1000 : Record 7316;LocationCode@1001 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateWarehouseReceiptHeader(WarehouseReceiptHeader);
      WarehouseReceiptHeader.VALIDATE("Location Code",LocationCode);
      WarehouseReceiptHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UseFiltersToGetSrcDocShipment@57(VAR WarehouseShipmentHeader@1003 : Record 7320;SellToCustomerNo@1001 : Code[20];BuyFromVendorNo@1005 : Code[20];TransferFrom@1004 : Code[10];TransferTo@1000 : Code[10]);
    VAR
      WarehouseSourceFilter@1006 : Record 5771;
    BEGIN
      CreateWarehouseShipmentHeader(WarehouseShipmentHeader,TransferFrom);
      LibraryWarehouse.CreateWarehouseSourceFilter(WarehouseSourceFilter,WarehouseSourceFilter.Type::Outbound);
      UpdateSourceFilterSales(WarehouseSourceFilter,SellToCustomerNo);
      UpdateSourceFilterPurchase(WarehouseSourceFilter,BuyFromVendorNo);
      UpdateSourceFilterTransfer(WarehouseSourceFilter,TransferFrom,TransferTo);
      LibraryWarehouse.GetSourceDocumentsShipment(WarehouseShipmentHeader,WarehouseSourceFilter,TransferFrom);
    END;

    LOCAL PROCEDURE UseFiltersToGetSrcDocReceipt@66(VAR WarehouseReceiptHeader@1003 : Record 7316;SellToCustomerNo@1001 : Code[20];BuyFromVendorNo@1005 : Code[20];LocationCode@1000 : Code[10]);
    VAR
      WarehouseSourceFilter@1002 : Record 5771;
    BEGIN
      CreateWarehouseReceiptHeader(WarehouseReceiptHeader,LocationCode);
      LibraryWarehouse.CreateWarehouseSourceFilter(WarehouseSourceFilter,WarehouseSourceFilter.Type::Inbound);
      UpdateSourceFilterPurchase(WarehouseSourceFilter,BuyFromVendorNo);
      UpdateSourceFilterSales(WarehouseSourceFilter,SellToCustomerNo);
      LibraryWarehouse.GetSourceDocumentsReceipt(WarehouseReceiptHeader,WarehouseSourceFilter,LocationCode);
    END;

    LOCAL PROCEDURE UpdateSourceFilterSales@12(VAR WarehouseSourceFilter@1001 : Record 5771;SellToCustomerNoFilter@1000 : Code[20]);
    BEGIN
      WarehouseSourceFilter.VALIDATE("Sell-to Customer No. Filter",SellToCustomerNoFilter);
      WarehouseSourceFilter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSourceFilterPurchase@14(VAR WarehouseSourceFilter@1001 : Record 5771;BuyFromVendorNoFilter@1000 : Code[20]);
    BEGIN
      WarehouseSourceFilter.VALIDATE("Buy-from Vendor No. Filter",BuyFromVendorNoFilter);
      WarehouseSourceFilter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSourceFilterTransfer@15(VAR WarehouseSourceFilter@1000 : Record 5771;TransferFromCodeFilter@1003 : Code[10];TransferToCodeFilter@1002 : Code[10]);
    BEGIN
      WarehouseSourceFilter.VALIDATE("Transfer-from Code Filter",TransferFromCodeFilter);
      WarehouseSourceFilter.VALIDATE("Transfer-to Code Filter",TransferToCodeFilter);
      WarehouseSourceFilter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendor@25(VAR Vendor@1000 : Record 23;LocationCode@1001 : Code[10]);
    VAR
      LibraryPurchase@1002 : Codeunit 130512;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      CreateDefaultDimensionVendor(Vendor."No.");
      Vendor.VALIDATE("Location Code",LocationCode);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDefaultDimensionVendor@32(VendorNo@1000 : Code[20]);
    VAR
      DefaultDimension@1003 : Record 352;
      Dimension@1002 : Record 348;
      DimensionValue@1001 : Record 349;
    BEGIN
      SelectDimensionValue(Dimension,DimensionValue);
      LibraryDimension.CreateDefaultDimensionVendor(DefaultDimension,VendorNo,Dimension.Code,DimensionValue.Code);
      UpdateDefaultDimension(DefaultDimension);
    END;

    LOCAL PROCEDURE CreatePurchaseSetup@16(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseHeader2@1001 : Record 38;DocumentType@1005 : Option;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];VendorNo@1004 : Code[20]);
    BEGIN
      // Create and Release Purchase Document with and without Dimensions.
      CreateAndReleasePurchDocument(PurchaseHeader,DocumentType,ItemNo,LocationCode,VendorNo,TRUE);
      CreateAndReleasePurchDocument(PurchaseHeader2,DocumentType,ItemNo,LocationCode,VendorNo,FALSE);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchDocument@22(VAR PurchaseHeader@1000 : Record 38;DocumentType@1005 : Option;ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];VendorNo@1003 : Code[20];DimensionSetEntryRequired@1004 : Boolean);
    BEGIN
      CreatePurchaseDocument(PurchaseHeader,DocumentType,ItemNo,LocationCode,VendorNo,DimensionSetEntryRequired);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@33(VAR PurchaseHeader@1000 : Record 38;DocumentType@1006 : Option;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];VendorNo@1004 : Code[20];DimensionSetEntryRequired@1005 : Boolean);
    BEGIN
      CLEAR(PurchaseHeader);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      UpdatePurchaseHeader(PurchaseHeader,DimensionSetEntryRequired);
      CreatePurchaseLine(PurchaseHeader,ItemNo,LocationCode);
    END;

    LOCAL PROCEDURE UpdatePurchaseHeader@23(VAR PurchaseHeader@1000 : Record 38;DimensionSetEntryRequired@1001 : Boolean);
    BEGIN
      IF NOT DimensionSetEntryRequired THEN BEGIN
        PurchaseHeader.VALIDATE("Dimension Set ID",0);
        PurchaseHeader.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseLine@63(VAR PurchaseHeader@1000 : Record 38;ItemNo@1003 : Code[20];LocationCode@1004 : Code[10]);
    VAR
      PurchaseLine@1005 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTransferLocations@56(VAR LocationFrom@1000 : Record 14;VAR LocationTo@1001 : Record 14;VAR LocationInTransit@1002 : Record 14);
    BEGIN
      CreateLocationSetup(LocationFrom,FALSE,TRUE,TRUE);  // Booleans: In Transit, Require Shipment, Require Receive.
      CreateLocationSetup(LocationTo,FALSE,TRUE,TRUE);
      CreateLocationSetup(LocationInTransit,TRUE,FALSE,FALSE);
    END;

    LOCAL PROCEDURE CreateTransferOrderSetup@43(VAR TransferHeader@1000 : Record 5740;VAR TransferHeader2@1001 : Record 5740;ItemNo@1002 : Code[20];LocationFrom@1003 : Code[10];LocationTo@1004 : Code[10];LocationInTransit@1005 : Code[10]);
    BEGIN
      // Create and Release Transfer Order with and without Dimensions.
      CreateAndReleaseTransferOrder(TransferHeader,ItemNo,LocationFrom,LocationTo,LocationInTransit,TRUE);
      CreateAndReleaseTransferOrder(TransferHeader2,ItemNo,LocationFrom,LocationTo,LocationInTransit,FALSE);
    END;

    LOCAL PROCEDURE CreateAndReleaseTransferOrder@40(VAR TransferHeader@1005 : Record 5740;ItemNo@1004 : Code[20];LocationFrom@1003 : Code[10];LocationTo@1000 : Code[10];LocationInTransit@1006 : Code[10];DimensionSetEntryRequired@1002 : Boolean);
    BEGIN
      CreateTransferOrder(TransferHeader,ItemNo,LocationFrom,LocationTo,LocationInTransit,DimensionSetEntryRequired);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateShipPickLocation@80(VAR Location@1000 : Record 14);
    BEGIN
      CreateLocation(Location,FALSE,TRUE,FALSE);
      Location.VALIDATE("Require Pick",TRUE);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTransferOrder@47(VAR TransferHeader@1000 : Record 5740;ItemNo@1002 : Code[20];LocationFrom@1003 : Code[10];LocationTo@1004 : Code[10];LocationInTransit@1006 : Code[10];DimensionSetEntryRequired@1005 : Boolean);
    VAR
      TransferLine@1001 : Record 5741;
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,LocationFrom,LocationTo,LocationInTransit);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,LibraryRandom.RandDec(10,2));
      UpdateTransferLine(TransferLine,DimensionSetEntryRequired);
    END;

    LOCAL PROCEDURE CreateWhseJournalLine@108(VAR WarehouseJournalLine@1000 : Record 7311;LocationCode@1003 : Code[10];BinCode@1004 : Code[20];ItemNo@1005 : Code[20];Quantity@1006 : Decimal);
    VAR
      WarehouseJournalTemplate@1001 : Record 7309;
      WarehouseJournalBatch@1002 : Record 7310;
    BEGIN
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Item);
      LibraryWarehouse.CreateWhseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Name,LocationCode);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationCode,'',
        BinCode,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateWhsePickFromSalesOrder@117(VAR SalesHeader@1000 : Record 36);
    VAR
      WarehouseShipmentHeader@1001 : Record 7320;
    BEGIN
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      WarehouseShipmentHeader.GET(
        LibraryWarehouse.FindWhseShipmentNoBySourceDoc(DATABASE::"Sales Line",SalesHeader."Document Type",SalesHeader."No."));
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE PostPositiveAdjustmentOnWarehouse@110(Location@1000 : Record 14;Item@1002 : Record 27;Quantity@1003 : Decimal);
    VAR
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      CreateWhseJournalLine(WarehouseJournalLine,Location.Code,Location."Receipt Bin Code",Item."No.",Quantity);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",Location.Code,TRUE);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateTransferLine@3(VAR TransferLine@1000 : Record 5741;DimensionSetEntryRequired@1001 : Boolean);
    BEGIN
      IF NOT DimensionSetEntryRequired THEN BEGIN
        TransferLine.VALIDATE("Dimension Set ID",0);
        TransferLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE SelectPostedWhseShipmentLine@19(VAR PostedWhseShipmentLine@1000 : Record 7323;WhseShipmentNo@1002 : Code[20];SourceDocument@1003 : Option;ItemNo@1001 : Code[20]);
    BEGIN
      PostedWhseShipmentLine.SETRANGE("Whse. Shipment No.",WhseShipmentNo);
      PostedWhseShipmentLine.SETRANGE("Source Document",SourceDocument);
      PostedWhseShipmentLine.SETRANGE("Item No.",ItemNo);
      PostedWhseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectSalesLine@26(VAR SalesLine@1000 : Record 37;DocumentType@1003 : Option;DocumentNo@1002 : Code[20];No@1001 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.SETRANGE("No.",No);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectPurchaseLine@27(VAR PurchaseLine@1000 : Record 39;DocumentType@1001 : Option;DocumentNo@1002 : Code[20];No@1003 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",DocumentType);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.SETRANGE("No.",No);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE BlockItemForPosting@71(ItemNo@1000 : Code[20];Blocked@1001 : Boolean);
    VAR
      Item@1002 : Record 27;
    BEGIN
      // Block and Unblock Item.
      Item.GET(ItemNo);
      Item.VALIDATE(Blocked,Blocked);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ShipmentSalesPurchRetTransfer@65(VAR WarehouseShipmentHeader@1000 : Record 7320;VAR SalesHeader@1001 : Record 36;VAR PurchaseHeader@1002 : Record 38;VAR TransferHeader@1003 : Record 5740;VAR Item@1007 : Record 27;SalesDimension@1004 : Boolean;PurchaseReturnDimension@1005 : Boolean;TransferDimension@1006 : Boolean);
    VAR
      LocationFrom@1013 : Record 14;
      LocationTo@1012 : Record 14;
      LocationInTransit@1011 : Record 14;
      Customer@1009 : Record 18;
      Vendor@1008 : Record 23;
    BEGIN
      CreateItem(Item);
      CreateTransferLocations(LocationFrom,LocationTo,LocationInTransit);
      UpdateItemInventory(Item."No.",LocationFrom.Code);
      CreateCustomer(Customer,LocationFrom.Code);
      CreateVendor(Vendor,LocationFrom.Code);

      // Create Sales Order, Purchase Return Order, and Transfer Order.
      // Create Warehouse Shipment using Filters to get Source document.
      CreateAndReleaseSalesDocument(
        SalesHeader,SalesHeader."Document Type"::Order,Item."No.",LocationFrom.Code,Customer."No.",SalesDimension);
      CreateAndReleasePurchDocument(
        PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",Item."No.",LocationFrom.Code,Vendor."No.",
        PurchaseReturnDimension);
      CreateAndReleaseTransferOrder(
        TransferHeader,Item."No.",LocationFrom.Code,LocationTo.Code,LocationInTransit.Code,TransferDimension);
      UseFiltersToGetSrcDocShipment(WarehouseShipmentHeader,Customer."No.",Vendor."No.",LocationFrom.Code,LocationTo.Code);
    END;

    LOCAL PROCEDURE ReceiptPurchaseSalesReturn@191(VAR WarehouseReceiptHeader@1002 : Record 7316;VAR Item@1003 : Record 27;VAR SalesHeader@1004 : Record 36;VAR PurchaseHeader@1005 : Record 38;PurchaseDimension@1000 : Boolean;SalesReturnDimension@1001 : Boolean);
    VAR
      Location@1006 : Record 14;
      Customer@1007 : Record 18;
      Vendor@1008 : Record 23;
    BEGIN
      CreateItem(Item);
      CreateLocationSetup(Location,FALSE,TRUE,TRUE);
      UpdateItemInventory(Item."No.",Location.Code);
      CreateCustomer(Customer,Location.Code);
      CreateVendor(Vendor,Location.Code);

      // Create Purchase Order and Sales Return Order setup without Dimensions.
      // Create Warehouse Receipt using Filters to get Source document.
      CreateAndReleasePurchDocument(
        PurchaseHeader,PurchaseHeader."Document Type"::Order,Item."No.",Location.Code,Vendor."No.",PurchaseDimension);
      CreateAndReleaseSalesDocument(
        SalesHeader,SalesHeader."Document Type"::"Return Order",Item."No.",Location.Code,Customer."No.",SalesReturnDimension);
      UseFiltersToGetSrcDocReceipt(WarehouseReceiptHeader,Customer."No.",Vendor."No.",Location.Code);
    END;

    LOCAL PROCEDURE FilterWhseReceiptLines@73(VAR WhseReceiptLine@1000 : Record 7317;DocumentNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    BEGIN
      WhseReceiptLine.SETRANGE("No.",DocumentNo);
      WhseReceiptLine.SETRANGE("Item No.",ItemNo);
    END;

    LOCAL PROCEDURE FilterWhseShipmentLines@75(VAR WhseShipmentLine@1002 : Record 7321;DocumentNo@1001 : Code[20];ItemNo@1000 : Code[20]);
    BEGIN
      WhseShipmentLine.SETRANGE("No.",DocumentNo);
      WhseShipmentLine.SETRANGE("Item No.",ItemNo);
    END;

    LOCAL PROCEDURE FindWarehouseActivityLine@112(VAR WarehouseActivityLine@1004 : Record 5767;SourceType@1000 : Integer;SourceSubtype@1001 : Option;SourceNo@1002 : Code[20];SourceLineNo@1003 : Integer);
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceNo);
        SETRANGE("Source Line No.",SourceLineNo);
        FINDSET;
      END;
    END;

    LOCAL PROCEDURE VerifyItemInventory@114(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];GlobalDimension1Code@1002 : Code[20];ExpectedQuantity@1003 : Decimal);
    VAR
      Item@1004 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      Item.SETRANGE("Location Filter",LocationCode);
      Item.SETRANGE("Global Dimension 1 Filter",GlobalDimension1Code);
      Item.CALCFIELDS(Inventory);
      Item.TESTFIELD(Inventory,ExpectedQuantity);
    END;

    LOCAL PROCEDURE VerifyPickedQuantity@109(ItemNo@1001 : Code[20];QtyPicked@1002 : Decimal);
    VAR
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      WITH WarehouseShipmentLine DO BEGIN
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        TESTFIELD("Qty. Picked",QtyPicked);
      END;
    END;

    LOCAL PROCEDURE VerifyPostedShipmentLinesSales@18(WhseShipmentNo@1000 : Code[20];ItemNo@1001 : Code[20];DocumentNo@1002 : Code[20]);
    VAR
      PostedWhseShipmentLine@1004 : Record 7323;
      SalesLine@1003 : Record 37;
    BEGIN
      SelectPostedWhseShipmentLine(
        PostedWhseShipmentLine,WhseShipmentNo,PostedWhseShipmentLine."Source Document"::"Sales Order",ItemNo);
      SelectSalesLine(SalesLine,SalesLine."Document Type"::Order,DocumentNo,ItemNo);
      PostedWhseShipmentLine.TESTFIELD(Quantity,SalesLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedShipmentLinesPurch@7(WhseShipmentNo@1000 : Code[20];ItemNo@1001 : Code[20];DocumentNo@1002 : Code[20]);
    VAR
      PostedWhseShipmentLine@1004 : Record 7323;
      PurchaseLine@1003 : Record 39;
    BEGIN
      SelectPostedWhseShipmentLine(
        PostedWhseShipmentLine,WhseShipmentNo,PostedWhseShipmentLine."Source Document"::"Purchase Return Order",ItemNo);
      SelectPurchaseLine(PurchaseLine,PurchaseLine."Document Type"::"Return Order",DocumentNo,ItemNo);
      PostedWhseShipmentLine.TESTFIELD(Quantity,PurchaseLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedShipmentLinesTrans@10(WhseShipmentNo@1000 : Code[20];ItemNo@1001 : Code[20];DocumentNo@1002 : Code[20]);
    VAR
      PostedWhseShipmentLine@1004 : Record 7323;
      TransferLine@1003 : Record 5741;
    BEGIN
      SelectPostedWhseShipmentLine(
        PostedWhseShipmentLine,WhseShipmentNo,PostedWhseShipmentLine."Source Document"::"Outbound Transfer",ItemNo);
      TransferLine.SETRANGE("Document No.",DocumentNo);
      TransferLine.SETRANGE("Item No.",ItemNo);
      TransferLine.FINDFIRST;
      PostedWhseShipmentLine.TESTFIELD(Quantity,TransferLine.Quantity);
    END;

    LOCAL PROCEDURE SelectPostedWhseReceiptLine@54(VAR PostedWhseReceiptLine@1000 : Record 7319;WhseReceiptNo@1001 : Code[20];SourceDocument@1003 : Option;ItemNo@1002 : Code[20]);
    BEGIN
      PostedWhseReceiptLine.SETRANGE("Whse. Receipt No.",WhseReceiptNo);
      PostedWhseReceiptLine.SETRANGE("Source Document",SourceDocument);
      PostedWhseReceiptLine.SETRANGE("Item No.",ItemNo);
      PostedWhseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyPostedReceiptLinesSales@52(WhseReceiptNo@1000 : Code[20];ItemNo@1001 : Code[20];DocumentNo@1002 : Code[20]);
    VAR
      PostedWhseReceiptLine@1004 : Record 7319;
      SalesLine@1003 : Record 37;
    BEGIN
      SelectPostedWhseReceiptLine(
        PostedWhseReceiptLine,WhseReceiptNo,PostedWhseReceiptLine."Source Document"::"Sales Return Order",ItemNo);
      SelectSalesLine(SalesLine,SalesLine."Document Type"::"Return Order",DocumentNo,ItemNo);
      PostedWhseReceiptLine.TESTFIELD(Quantity,SalesLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedReceiptLinesPurch@51(WhseReceiptNo@1000 : Code[20];ItemNo@1001 : Code[20];DocumentNo@1002 : Code[20]);
    VAR
      PostedWhseReceiptLine@1004 : Record 7319;
      PurchaseLine@1003 : Record 39;
    BEGIN
      SelectPostedWhseReceiptLine(
        PostedWhseReceiptLine,WhseReceiptNo,PostedWhseReceiptLine."Source Document"::"Purchase Order",ItemNo);
      SelectPurchaseLine(PurchaseLine,PurchaseLine."Document Type"::Order,DocumentNo,ItemNo);
      PostedWhseReceiptLine.TESTFIELD(Quantity,PurchaseLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyRcptLineNotExist@193(WhseReceiptNo@1000 : Code[20]);
    VAR
      PostedWhseReceiptLine@1001 : Record 7319;
    BEGIN
      PostedWhseReceiptLine.SETFILTER("Whse. Receipt No.",'%1',WhseReceiptNo);
      Assert.AreEqual(0,PostedWhseReceiptLine.COUNT,ErrNoRecord);
    END;

    LOCAL PROCEDURE VerifyReservedLotNo@105(ItemNo@1001 : Code[20];LotNo@1002 : Code[20]);
    VAR
      ReservEntry@1000 : Record 337;
    BEGIN
      WITH ReservEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Source Type",DATABASE::"Item Ledger Entry");
        FINDFIRST;
        TESTFIELD("Lot No.",LotNo);
      END;
    END;

    LOCAL PROCEDURE VerifyWhseShipmentLineSorting@69(ItemNo@1001 : Code[20];DocCount@1002 : Integer);
    VAR
      WarehouseShipmentLine@1000 : Record 7321;
      SortingSequenceNo@1003 : Integer;
    BEGIN
      WITH WarehouseShipmentLine DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETFILTER("Sorting Sequence No.",'<>%1',0);
        Assert.AreEqual(
          DocCount,
          COUNT,
          STRSUBSTNO(EmptyTableErr,DocCount,TABLECAPTION,GETFILTERS));
        FINDSET;
        SortingSequenceNo := "Sorting Sequence No.";
        WHILE NEXT <> 0 DO BEGIN
          Assert.IsTrue("Sorting Sequence No." > SortingSequenceNo,STRSUBSTNO(SortingOrderErr,TABLECAPTION));
          SortingSequenceNo := "Sorting Sequence No.";
        END;
      END;
    END;

    LOCAL PROCEDURE VerifyWhseReceiptLineSorting@68(ItemNo@1002 : Code[20];DocCount@1001 : Integer);
    VAR
      WarehouseReceiptLine@1000 : Record 7317;
      SortingSequenceNo@1003 : Integer;
    BEGIN
      WITH WarehouseReceiptLine DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETFILTER("Sorting Sequence No.",'<>%1',0);
        Assert.AreEqual(
          DocCount,
          COUNT,
          STRSUBSTNO(EmptyTableErr,DocCount,TABLECAPTION,GETFILTERS));
        FINDSET;
        SortingSequenceNo := "Sorting Sequence No.";
        WHILE NEXT <> 0 DO BEGIN
          Assert.IsTrue("Sorting Sequence No." > SortingSequenceNo,STRSUBSTNO(SortingOrderErr,TABLECAPTION));
          SortingSequenceNo := "Sorting Sequence No.";
        END;
      END;
    END;

    LOCAL PROCEDURE VerifyWhseReceiptLineCreated@89(DocumentNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    VAR
      WhseReceiptLine@1000 : Record 7317;
    BEGIN
      WITH WhseReceiptLine DO BEGIN
        FilterWhseReceiptLines(WhseReceiptLine,DocumentNo,ItemNo);
        Assert.IsFalse(ISEMPTY,STRSUBSTNO(EmptyTableErr,1,TABLECAPTION,GETFILTER("No.")));
      END;
    END;

    LOCAL PROCEDURE VerifyWhseReceiptLineNotCreated@90(DocumentNo@1002 : Code[20];ItemNo@1001 : Code[20]);
    VAR
      WhseReceiptLine@1000 : Record 7317;
    BEGIN
      WITH WhseReceiptLine DO BEGIN
        FilterWhseReceiptLines(WhseReceiptLine,DocumentNo,ItemNo);
        Assert.IsTrue(ISEMPTY,ErrNoRecord);
      END;
    END;

    LOCAL PROCEDURE VerifyWhseShipmentLineCreated@97(DocumentNo@1001 : Code[20];ItemNo@1000 : Code[20]);
    VAR
      WhseShipmentLine@1002 : Record 7321;
    BEGIN
      WITH WhseShipmentLine DO BEGIN
        FilterWhseShipmentLines(WhseShipmentLine,DocumentNo,ItemNo);
        Assert.IsFalse(ISEMPTY,STRSUBSTNO(EmptyTableErr,1,TABLECAPTION,GETFILTER("No.")));
      END;
    END;

    LOCAL PROCEDURE VerifyWhseShipmentLineNotCreated@98(DocumentNo@1001 : Code[20];ItemNo@1000 : Code[20]);
    VAR
      WhseShipmentLine@1002 : Record 7321;
    BEGIN
      WITH WhseShipmentLine DO BEGIN
        FilterWhseShipmentLines(WhseShipmentLine,DocumentNo,ItemNo);
        Assert.IsTrue(ISEMPTY,ErrNoRecord);
      END;
    END;

    [StrMenuHandler]
    PROCEDURE StringMenuHandler@8(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instructions@1002 : Text[1024]);
    BEGIN
      Choice := 1;  // Ship Only.
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@21(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(Question,'Do you want to post the receipt?') > 0,Question);
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE ShipLinesMessageHandler@13(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,'Ship lines have been posted.') > 0,Message);
    END;

    [MessageHandler]
    PROCEDURE SourceDocMessageHandler@37(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,'Number of source documents posted:') > 0,Message);
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@99(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLines.NEW;
      ItemTrackingLines."Lot No.".SETVALUE(LibraryVariableStorage.DequeueText);
      ItemTrackingLines."Quantity (Base)".SETVALUE(LibraryVariableStorage.DequeueDecimal);
      ItemTrackingLines.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [SCM]
      Unsupported version tags:
      US: Unable to Execute
      CA: Unable to Execute
      IN: Unable to Execute

      Test various Warehouse scenarios for Shipment Posting policy:
        1. Verify Shipment from Sales Order when Shipment Posting Policy field - Stop and show the first posting error.
        2. Verify Shipment from Sales Order when Shipment Posting Policy field - Posting errors are not processed.
        3. Verify Shipment from Purchase Return Order when Shipment Posting Policy field - Stop and show the first posting error.
        4. Verify Shipment from Purchase Return Order when Shipment Posting Policy field - Posting errors are not processed.
        5. Verify Shipment from Outbound Transfer Order when Shipment Posting Policy field - Stop and show the first posting error.
        6. Verify Shipment from Outbound Transfer Order when Shipment Posting Policy field - Posting errors are not processed.
        7. Verify Receipt from Sales Return Order when Receipt Posting Policy field - Stop and show the first posting error.
        8. Verify Receipt from Sales Return Order when Receipt Posting Policy field - Posting errors are not processed.
        9. Verify Receipt from Purchase Order when Receipt Posting Policy field - Stop and show the first posting error.
       10. Verify Receipt from Purchase Order when Receipt Posting Policy field - Posting errors are not processed.
       11. Verify Shipment from Sales Order with blocked item when Shipment Posting Policy field - Stop and show the first posting error.
       12. Verify Shipment from Sales Order, Purchase Return has blocked item when Shipment Posting Policy field -
           Stop and show the first posting error.
       13. Verify nothing posted for Shipment from Sales Order and Purchase Return with Item block when Shipment Posting Policy field -
           Stop and show the first posting error.
       14. Verify Shipment from Sales Order, Purchase Return and Transfer with Item block error when Shipment Posting Policy field -
           Stop and show the first posting error.
       15. Verify Shipment from Sales Order with Dimension error, Purchase Return and Transfer Order when Shipment Posting Policy field -
           Posting errors are not processed.
       16. Verify Shipment from Sales Order, Purchase Return with Dimension error and Transfer Order when Shipment Posting Policy field -
           Posting errors are not processed.
       17. Verify Shipment from Sales Order, Purchase Return and Transfer Order with Dimension error when Shipment Posting Policy field -
           Posting errors are not processed.
       18. Verify Receipt from Purchase Order with blocked item when Receipt Posting Policy field - Stop and show the first posting error.
       19. Verify Receipt from Sales Return with blocked item when Receipt Posting Policy field - Stop and show the first posting error.
       20. Verify Receipt from Sales Return Order; Purchase Order has blocked item when Receipt Posting Policy field -
           Stop and show the first posting error.
       21. Verify nothing posted for Receipt from Purchase Order and Sales Return with Item block when Shipment Posting Policy field -
           Stop and show the first posting error.
       22. Verify nothing posted for Receipt from Purchase Order and Sales Return with Dimension error when Shipment Posting Policy -
           Posting errors are not processed.
       23. Verify Receipt from Purchase Order when Sales Return has Dimension error and Shipment Posting Policy field-
           Posting errors are not processed.
       24. Verify Receipt from Sales Return when Purchase Order has Dimension error and Shipment Posting Policy field -
           Posting errors are not processed.
       25. Verifies line sorting after Warehouse Source Document (Shipment/Receipt) is created

        Covers Test Cases:
        -------------------------------------------------------------------------
        Test Function Name                        TFS ID
        -------------------------------------------------------------------------
        ShowPostingErrorSalesOrder                232879
        ErrorNotProcessedSalesOrder               232879
        ShowPostingErrorPurchRetOrder             232880
        ErrorNotProcessedPurchRetOrder            232880
        ShowPostingErrorTransferOrder             232881
        ErrorNotProcessedTransferOrder            232881
        ShowPostingErrorSalesRetOrder             232882
        ErrorNotProcessedSalesRetOrder            232882
        ShowPostingErrorPurchaseOrder             232883
        ErrorNotProcessedPurchaseOrder            232883
        ShowErrorSalesOrderBlocked                233815
        ShowErrorPurchReturnBlocked               233815
        ShowErrorSalesPurchRetBlocked             233815
        ShowErrorAndUnblockAllShipment            233815
        ErrNotProcessPostPurchRetTrans            233815
        ErrNotProcessPostSalesOrdTrans            233815
        ErrNotProcessPostSalesPurchRet            233815
        ShowErrorPurchaseOrderBlocked             233823
        ShowErrorUnblockSalesRetRcpt              233823
        ShowErrorPostSalesReturnOrder             233823
        ShowErrorPurchSalesRetBlocked             233823
        ErrNotProcessForPurchSalesRet             233823
        ErrNotProcessPostPurchaseOrder            233823
        ErrNotProcessPostSalesRetOrder            233823
        WhseShipmentLinesSorting                  73529
        WhseReceiptLinesSorting                   73529
    }
    END.
  }
}

