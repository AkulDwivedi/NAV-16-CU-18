OBJECT Codeunit 144064 TDS TCS Document Transaction
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CompanyInformation@1500005 : Record 79;
      GLSetup@1500014 : Record 98;
      LibraryERM@1500012 : Codeunit 131300;
      LibraryReportDataset@1500003 : Codeunit 131007;
      LibrarySetupStorage@1500010 : Codeunit 131009;
      LibraryJournals@1500001 : Codeunit 131306;
      LibraryPurchase@1500002 : Codeunit 130512;
      LibrarySales@1500008 : Codeunit 130509;
      LibraryRandom@1500013 : Codeunit 130440;
      LibraryTDS@1500000 : Codeunit 143000;
      LibraryTCS@1500004 : Codeunit 143008;
      LibraryVariableStorage@1500006 : Codeunit 131004;
      LibraryUtility@1500007 : Codeunit 131000;
      Assert@1500009 : Codeunit 130000;
      isInitialized@1500011 : Boolean;
      TDSValueErr@1500016 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=The TDS Amounts %1 is incorrect in %2.';
      FinancialYearQuarter@1500015 : ' ,Q1,Q2,Q3,Q4';
      ValueErr@1500017 : TextConst 'ENU=Values does not match';
      OriginalRRRNo@1500018 : Text;

    [Test]
    [HandlerFunctions(GenerateCertificateNosRequestPageHandler,ConfirmHandlerTrue,MessageHandler,Form27QRequestPageHandler)]
    PROCEDURE VerifyForm27QReportAfterPayment@1500001();
    VAR
      TdsNatureOfDeduction@1500007 : Record 13726;
      NodNocHeader@1500006 : Record 13786;
      TDSSetup@1500004 : Record 13728;
      IncomeTaxAccountingPeriod@1500012 : Record 13724;
      GenJournalLine@1500002 : Record 81;
      GenJournalLine2@1500013 : Record 81;
      TDSAccount@1500000 : Code[20];
      ChallanNo@1500003 : Code[10];
    BEGIN
      // [SCENARIO 164303] TDS - Tax Deducted at Source - TCN E3: Check if system is generating Form 27Q by complete information
      // [FEATURE] [TDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,TDS Nature of deduction,Assesse Code,TDS Setup For TDS Payment and to Generate form 27Q Report
      InitializeSetup(IncomeTaxAccountingPeriod,NodNocHeader,TdsNatureOfDeduction,TDSSetup,TDSAccount,TRUE);

      // [WHEN] Create General Journal with Foreign Currency and post payment after that update TDS register,Challan details and run Form 27Q Report
      CreatePaymentVoucherandPost(GenJournalLine,NodNocHeader."No.",TdsNatureOfDeduction.Code,TRUE,
        IncomeTaxAccountingPeriod."Starting Date");
      CreatePaymentJnlAndPay(GenJournalLine2,TDSAccount,'',TRUE,IncomeTaxAccountingPeriod."Starting Date",0);
      ChallanNo :=
        LibraryTDS.UpdateChallanDetails(
          GenJournalLine."Document No.",GenJournalLine2."Document No.",IncomeTaxAccountingPeriod."Starting Date");
      LibraryTDS.RunUpdateChallanRegister(ChallanNo,LibraryRandom.RandDec(3000,1));
      RunGenerateCertificateNos(NodNocHeader."No.",TdsNatureOfDeduction."TDS Group",IncomeTaxAccountingPeriod."Starting Date",TRUE);
      LibraryTDS.Form26QForm27QReportFieldsValidation;
      EnqueueValuesInFormReqPageHandlers(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
      REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Created TDS Register Details with Challan No.,Challan date, BSR Code,TDS Group
      VerifyValuesOnForm27QPreview(GenJournalLine2."Document No.",TdsNatureOfDeduction."TDS Group");
    END;

    [Test]
    [HandlerFunctions(Form27QRequestPageHandler)]
    PROCEDURE VerifyForm27QReportDetailsAfterPayment@1500002();
    VAR
      TdsNatureOfDeduction@1500007 : Record 13726;
      NodNocHeader@1500006 : Record 13786;
      TDSSetup@1500004 : Record 13728;
      IncomeTaxAccountingPeriod@1500012 : Record 13724;
      GenJournalLine@1500002 : Record 81;
      GenJournalLine2@1500013 : Record 81;
      TDSAccount@1500000 : Code[20];
      ChallanNo@1500001 : Code[20];
    BEGIN
      // [SCENARIO 164332] Validate generation of e-TDS for Non-residents (27Q) in print format with the mandatory fields
      // [FEATURE] [TDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,TDS Nature of deduction,Assesse Code,TDS Setup For TDS Payment and to Generate form 27Q Report
      InitializeSetup(IncomeTaxAccountingPeriod,NodNocHeader,TdsNatureOfDeduction,TDSSetup,TDSAccount,TRUE);

      // [WHEN] Create Bank Payment with Foreign Currency and post payment after that update TDS register,Challan details and run Form 27Q Report
      CreatePaymentVoucherandPost(
        GenJournalLine,NodNocHeader."No.",TdsNatureOfDeduction.Code,FALSE,IncomeTaxAccountingPeriod."Starting Date");
      CreatePaymentJnlAndPay(GenJournalLine2,TDSAccount,'',TRUE,IncomeTaxAccountingPeriod."Starting Date",0);
      ChallanNo := LibraryTDS.UpdateChallanDetails(GenJournalLine."Document No.",GenJournalLine2."Document No.",WORKDATE);
      LibraryTDS.RunUpdateChallanRegister(ChallanNo,1000);
      LibraryTDS.Form26QForm27QReportFieldsValidation;
      EnqueueValuesInFormReqPageHandlers(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
      REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Created Batch Header with Deductor Phone No.,Deductor E-Mail,Responsible Person Phone No.,Responsible Person E-Mail.
      VerifyReportData;
    END;

    [Test]
    [HandlerFunctions(Form26QRequestPageHandler)]
    PROCEDURE VerifyForm26QReportDetailsAfterPayment@1500006();
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      NodNocHeader@1500004 : Record 13786;
      TDSSetup@1500001 : Record 13728;
      TdsNatureOfDeduction@1500002 : Record 13726;
      GenJournalLine@1500005 : Record 81;
      GenJournalLine2@1500006 : Record 81;
      TDSAccount@1500009 : Code[20];
      ChallanNo@1500003 : Code[20];
    BEGIN
      // [SCENARIO 164363] Validate generation of e-TDS (26Q) in print format with the mandatory fields
      // [FEATURE] [TDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,TDS Nature of deduction,Assesse Code,TDS Setup For TDS Payment and to Generate form 26Q Report
      InitializeSetup(IncomeTaxAccountingPeriod,NodNocHeader,TdsNatureOfDeduction,TDSSetup,TDSAccount,FALSE);

      // [WHEN] Create Bank Payment and post payment after that update TDS register,Challan details and run Form 26Q Report
      CreatePaymentVoucherandPost(
        GenJournalLine,NodNocHeader."No.",TdsNatureOfDeduction.Code,FALSE,IncomeTaxAccountingPeriod."Starting Date");
      CreatePaymentJnlAndPay(GenJournalLine2,TDSAccount,'',TRUE,IncomeTaxAccountingPeriod."Starting Date",0);
      ChallanNo :=
        LibraryTDS.UpdateChallanDetails(
          GenJournalLine."Document No.",GenJournalLine2."Document No.",IncomeTaxAccountingPeriod."Starting Date");
      LibraryTDS.RunUpdateChallanRegister(ChallanNo,LibraryRandom.RandInt(2000));
      LibraryTDS.Form26QForm27QReportFieldsValidation;
      EnqueueValuesInFormReqPageHandlers(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
      REPORT.RUN(REPORT::"Form 26Q");

      // [THEN] Created Batch Header with Deductor Phone No.,Deductor E-Mail,Responsible Person Phone No.,Responsible Person E-Mail.
      VerifyReportData;
    END;

    [Test]
    [HandlerFunctions(UpdateChallanDetailsRequestPageHandler,Form27EQRequestPageHandler)]
    PROCEDURE VerifyForm27EQReportDetailsAfterPayment@1500008();
    VAR
      NodNocHeader@1500000 : Record 13786;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      AssesseeCode@1500003 : Record 13727;
      SalesHeader@1500004 : Record 36;
      GenJournalLine@1500005 : Record 81;
      DocumentNo@1500006 : Code[20];
    BEGIN
      // [SCENARIO 164364] e-filing changes with respect to FVU 3.3 - Validate generation of e-TCS (27EQ) in print format with the mandatory fields
      // [FEATURE] [TCS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,TCS Nature of Collection,Assesse Code,TCS Setup For TCS Payment and to Generate form 27EQ Report
      Initialize;
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,TRUE);
      LibraryTCS.UpdateAccountNumberInTCSSetup(TCSSetup);

      // [WHEN] Create Sales Invoice and Post,Update TCS challan details
      DocumentNo :=
        CreateAndPostSalesDocWithTCS(SalesHeader,NodNocHeader."No.",TcsNatureOfCollection.Code,
          SalesHeader."Document Type"::Invoice);
      CreatePaymentJnlAndPay(GenJournalLine,TCSSetup."TCS Account No.",TcsNatureOfCollection.Code,FALSE,WORKDATE,0);
      UpdateTCSChallanDtls(GenJournalLine."Document No.",WORKDATE);
      LibraryTCS.Form27EQReportFieldsValidation;
      EnqueueValuesInFormReqPageHandlersInForm27EQ(DocumentNo);
      REPORT.RUN(REPORT::"Form 27EQ");

      // [THEN] Created TCS Batch Header with TCS Collector Phone No.,TCS Collector E-Mail,Responsible Person Phone No.,Responsible Person E-Mail.
      VerifyReportDataInForm27EQ;
    END;

    [Test]
    [HandlerFunctions(UpdateChallanDetailsRequestPageHandler,GenerateTCSCertificateNosRequestPageHandler,ConfirmHandlerTrue,MessageHandler,Form27EQRequestPageHandler,GenerateeTCSRequestPageHandler,UpdateTCSFilingStatusRequestPageHandler)]
    PROCEDURE VerifyGenerateETCSReportDetailsAfterUpdateChallanRegister@1500005();
    VAR
      NodNocHeader@1500000 : Record 13786;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      AssesseeCode@1500003 : Record 13727;
      SalesHeader@1500004 : Record 36;
      GenJournalLine@1500005 : Record 81;
      DocumentNo@1500006 : Code[20];
    BEGIN
      // [SCENARIO 163777] Check if the system is modifying Challan details after generation of form 27EQ and filing of e-TCS
      // [FEATURE] [Generate e-TCS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,TCS Nature of Collection,Assesse Code,TCS Setup For TCS Payment and to Generate form 27EQ Report
      Initialize;
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,TRUE);
      LibraryTCS.UpdateAccountNumberInTCSSetup(TCSSetup);

      // [WHEN] Create Sales order and Post, Update TCS Challan Details,Generate Certificate Nos,Update e-TCS  Status
      DocumentNo :=
        CreateAndPostSalesDocWithTCS(SalesHeader,NodNocHeader."No.",TcsNatureOfCollection.Code,SalesHeader."Document Type"::Order);
      CreatePaymentJnlAndPay(GenJournalLine,TCSSetup."TCS Account No.",TcsNatureOfCollection.Code,FALSE,WORKDATE,0);
      UpdateTCSChallanDtls(GenJournalLine."Document No.",TODAY);
      RunGenerateCertificateNos(NodNocHeader."No.",TcsNatureOfCollection."TCS Type",WORKDATE,FALSE);
      LibraryTCS.Form27EQReportFieldsValidation;
      EnqueueValuesInFormReqPageHandlersInForm27EQ(DocumentNo);
      REPORT.RUN(REPORT::"Form 27EQ");
      GenerateeTCS;
      UpdateTCSFilingStatus;

      // [THEN] Created Challan register ,Form 27eq Entries And updated Challan details in the register
      VerifyeTCSChallanRegister(GenJournalLine."Document No.");
    END;

    [Test]
    [HandlerFunctions(Form26QRequestPageHandler,GenerateeTDSRequestPageHandler,ConfirmHandlerTrue)]
    PROCEDURE VerifyForm26QReportDetailsWithPANAppliedVendor@1500019();
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      Vendor@1500010 : Record 23;
      NodNocHeader@1500004 : Record 13786;
      TDSSetup@1500001 : Record 13728;
      TdsNatureOfDeduction@1500002 : Record 13726;
      GenJournalLine@1500005 : Record 81;
      GenJournalLine2@1500006 : Record 81;
      TDSAccount@1500009 : Code[20];
      ChallanNo@1500003 : Code[20];
    BEGIN
      // [SCENARIO 164339] Validate TDS amount when invalid PAN is defined in a vendor who is a Transporter
      // [FEATURE] [TDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,TDS Nature of deduction,Assesse Code,TDS Setup For TDS Payment and to Generate form 26Q Report
      Initialize;
      LibraryTDS.UpdateTDSNilChallanInGeneralLedgerSetup;
      CreateIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateForeignVendorWithPANAPPLIED(Vendor,'','');
      LibraryTDS.CreateAssesseeandNODNOCSetup(
        NodNocHeader,TdsNatureOfDeduction,TDSSetup,'',Vendor."No.",
        NodNocHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");
      TDSAccount := LibraryTDS.CreateAndUpdateTDSAccNo(TDSSetup);

      // [WHEN] Create Bank Payment and post payment after that update TDS register,Challan details and run Form 26Q Report
      CreatePaymentVoucherandPost(
        GenJournalLine,NodNocHeader."No.",TdsNatureOfDeduction.Code,FALSE,IncomeTaxAccountingPeriod."Starting Date");
      CreatePaymentJnlAndPay(GenJournalLine2,TDSAccount,'',TRUE,IncomeTaxAccountingPeriod."Starting Date",0);
      ChallanNo := LibraryTDS.UpdateChallanDetails(GenJournalLine."Document No.",GenJournalLine2."Document No.",TODAY);
      LibraryTDS.RunUpdateChallanRegister(ChallanNo,LibraryRandom.RandInt(2000));
      LibraryTDS.Form26QForm27QReportFieldsValidation;
      EnqueueValuesInFormReqPageHandlers(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
      REPORT.RUN(REPORT::"Form 26Q");
      GenerateeTDSUsingPage(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",TRUE,FALSE);

      // [THEN] Created Form 26Q Entries With Deductee P.A.N As PAN Applied & Total Incl.Shecess Amount
      VerifyReportDataInForm26Q(GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE VerifyGeneralJournalsWithTDSAppliedBeforePosting@1500029();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      NodNocHeader@1500002 : Record 13786;
      TdsNatureOfDeduction@1500001 : Record 13726;
      TdsSetup@1500000 : Record 13728;
      GenJournalLine@1500005 : Record 81;
      ExpectedGenJournalLine@1500006 : Record 81;
      GenJournalLine2@1500009 : Record 81;
      ExpectedGenJournalLine2@1500008 : Record 81;
      TDSAccount@1500004 : Code[20];
      Amount@1500007 : Decimal;
    BEGIN
      // [SCENARIO 164228] This test case tests if the program is calculating TDS related amount successfully normally in the following forms:Invoice received from Vendor in General Journal/Purchase Journal
      // [FEATURE] [TDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,TDS Nature of deduction,Assesse Code,TDS Setup For General Journal & Payment Journals
      InitializeSetup(IncomeTaxAccountingPeriod,NodNocHeader,TdsNatureOfDeduction,TdsSetup,TDSAccount,FALSE);

      // [WHEN] Create General Journals & Payment Journals With TDS Applied
      Amount := LibraryRandom.RandDec(1000,2);
      LibraryJournals.CreateGenJournalLineWithBatch(GenJournalLine,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Vendor,NodNocHeader."No.",-Amount);
      ValidateGeneralJournalsWithPartyTDSNatureCodes(GenJournalLine,IncomeTaxAccountingPeriod."Starting Date",
        NodNocHeader."No.",TdsNatureOfDeduction.Code);
      CalcTDSAmountsforJournalLine(ExpectedGenJournalLine,TdsSetup,-Amount);
      CreatePaymentJournalsWithTds(GenJournalLine2,TDSAccount,IncomeTaxAccountingPeriod."Starting Date",-Amount,FALSE);
      ValidateGeneralJournalsWithPartyTDSNatureCodes(GenJournalLine2,IncomeTaxAccountingPeriod."Starting Date",
        NodNocHeader."No.",TdsNatureOfDeduction.Code);
      CalcTDSAmountsforJournalLine(ExpectedGenJournalLine2,TdsSetup,-Amount);

      // [THEN] Created General Journal Lines And Purchase  Journals By using TDSNatureofdeduction,TDS Setup
      VerifyGenJnlLinesPurchtJnlLines(ExpectedGenJournalLine,GenJournalLine,ExpectedGenJournalLine2,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(Form26QRequestPageHandler,GenerateeTDSRequestPageHandler,ConfirmHandlerTrue,UpdateTDSFilingStatusRequestPageHandler,ReturnModalPageHandler)]
    PROCEDURE VerifyReturnStatusIneTDSGenerationOfForm26Q@1500012();
    VAR
      IncomeTaxAccountingPeriod@1500007 : Record 13724;
      NodNocHeader@1500006 : Record 13786;
      TDSSetup@1500005 : Record 13728;
      TdsNatureOfDeduction@1500004 : Record 13726;
      GenJournalLine@1500003 : Record 81;
      GenJournalLine2@1500002 : Record 81;
      TDSAccount@1500001 : Code[20];
      ChallanNo@1500000 : Code[20];
    BEGIN
      // [SCENARIO 164288] Check if system is generating e-TDS (Form 26Q)
      // [FEATURE] [TDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,TDS Nature of deduction,Assesse Code,TDS Setup For TDS Payment and to Generate form 26Q Report
      InitializeSetup(IncomeTaxAccountingPeriod,NodNocHeader,TdsNatureOfDeduction,TDSSetup,TDSAccount,FALSE);

      // [WHEN] Create Bank Payment and post payment after that update TDS register,Challan details and run Form 26Q Report
      CreatePaymentVoucherandPost(
        GenJournalLine,NodNocHeader."No.",TdsNatureOfDeduction.Code,FALSE,IncomeTaxAccountingPeriod."Starting Date");
      CreatePaymentJnlAndPay(GenJournalLine2,TDSAccount,'',TRUE,IncomeTaxAccountingPeriod."Starting Date",0);
      ChallanNo :=
        LibraryTDS.UpdateChallanDetails(
          GenJournalLine."Document No.",GenJournalLine2."Document No.",IncomeTaxAccountingPeriod."Starting Date");
      LibraryTDS.RunUpdateChallanRegister(ChallanNo,LibraryRandom.RandInt(2000));
      LibraryTDS.Form26QForm27QReportFieldsValidation;
      EnqueueValuesInFormReqPageHandlers(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
      REPORT.RUN(REPORT::"Form 26Q");
      GenerateeTDSUsingPage(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",TRUE,TRUE);

      // [THEN] Created Return Status records with financial year ,Assessment Year, Old Provisional No. and Filed Status to yes
      VerifyReturnStatusInGeneratedFile(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
    END;

    LOCAL PROCEDURE Initialize@1500039();
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;
      LibraryTDS.CreateDeductoryCodeAndUpdateOnCompanyInformation(CompanyInformation);
      GLSetup.GET;
      isInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE InitializeSetup@1500000(VAR IncomeTaxAccountingPeriod@1500002 : Record 13724;VAR NodNocHeader@1500003 : Record 13786;VAR TdsNatureOfDeduction@1500004 : Record 13726;VAR TDSSetup@1500005 : Record 13728;VAR TDSAccount@1500007 : Code[20];ForeignVendor@1500006 : Boolean);
    BEGIN
      Initialize;
      LibraryTDS.UpdateTDSNilChallanInGeneralLedgerSetup;
      CreateIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      CreateNodNocWithVendor(NodNocHeader,TdsNatureOfDeduction,TDSSetup,ForeignVendor,IncomeTaxAccountingPeriod."Starting Date");
      TDSAccount := LibraryTDS.CreateAndUpdateTDSAccNo(TDSSetup);
    END;

    LOCAL PROCEDURE CreateIncomeTaxAccountingPeriod@1500059(VAR IncomeTaxAccountingPeriod@1500000 : Record 13724);
    VAR
      IncomeTaxPeriodSetup@1500001 : Record 16501;
    BEGIN
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
    END;

    LOCAL PROCEDURE CreateForeignVendor@1500036(VAR Vendor@1500000 : Record 23;CountryCode@1500002 : Code[10];CurrencyCode@1500001 : Code[10]);
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.VALIDATE("Country/Region Code",CountryCode);
      Vendor.VALIDATE("P.A.N. Status",Vendor."P.A.N. Status"::" ");
      Vendor.VALIDATE("P.A.N. No.",LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("P.A.N. No."),DATABASE::Vendor));
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePaymentVoucherandPost@1500022(VAR GenJournalLine@1500002 : Record 81;VendorNo@1500004 : Code[20];TdsNatureOfDeductionCode@1500005 : Code[10];PaymentVoucher@1500006 : Boolean;PostingDate@1500003 : Date);
    VAR
      GenJournalTemplate@1500000 : Record 80;
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      IF PaymentVoucher THEN BEGIN
        GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
        GenJournalTemplate.MODIFY(TRUE);
      END;
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      WITH GenJournalLine DO BEGIN
        IF PaymentVoucher THEN
          LibraryERM.CreateGeneralJnlLineWithBalAcc(
            GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,"Document Type"::Invoice,"Account Type"::Vendor,
            VendorNo,"Bal. Account Type"::"G/L Account",
            LibraryERM.CreateGLAccountNo,-LibraryRandom.RandDec(10000,2))
        ELSE
          LibraryERM.CreateGeneralJnlLineWithBalAcc(
            GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,"Document Type"::Payment,"Account Type"::Vendor,
            VendorNo,"Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,LibraryRandom.RandDec(10000,2));
        ValidateGeneralJournalsWithPartyTDSNatureCodes(GenJournalLine,PostingDate,VendorNo,TdsNatureOfDeductionCode);
      END;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreatePaymentJnlAndPay@1500007(VAR GenJournalLine@1500002 : Record 81;GLAccount@1500003 : Code[20];TcsNatureCode@1500007 : Code[10];TDSTCS@1500005 : Boolean;PostingDate@1500004 : Date;AmountPar@1500008 : Decimal);
    VAR
      TcsEntry@1500006 : Record 16514;
    BEGIN
      WITH GenJournalLine DO BEGIN
        CreatePaymentJournalsWithTds(GenJournalLine,GLAccount,PostingDate,AmountPar,TRUE);
        IF TDSTCS THEN BEGIN
          VALIDATE("T.A.N. No.",CompanyInformation."T.A.N. No.");
          VALIDATE("Pay TDS",TRUE);
          MODIFY(TRUE);
          LibraryTDS.PayTDS(GenJournalLine);
          COMMIT;
        END ELSE BEGIN
          TcsEntry.SETRANGE("TCS Nature of Collection",TcsNatureCode);
          TcsEntry.FINDLAST;
          TcsEntry.VALIDATE("Pay TCS Document No." ,"Document No.");
          TcsEntry.MODIFY;
          VALIDATE(Amount,TcsEntry."Bal. TCS Including SHE CESS");
          VALIDATE("T.C.A.N. No.",CompanyInformation."T.C.A.N. No.");
          VALIDATE("Pay TCS",TRUE);
          MODIFY(TRUE);
        END;
      END;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateNodNocWithVendor@1500003(VAR NodNocHeader@1500006 : Record 13786;VAR TdsNatureOfDeduction@1500005 : Record 13726;VAR TDSSetup@1500004 : Record 13728;ForeignVendor@1500000 : Boolean;PostingDate@1500003 : Date);
    VAR
      CountryRegion@1500002 : Record 9;
      Vendor@1500001 : Record 23;
    BEGIN
      IF ForeignVendor THEN BEGIN
        LibraryERM.CreateCountryRegion(CountryRegion);
        CreateForeignVendor(Vendor,CountryRegion.Code,LibraryERM.CreateCurrencyWithExchangeRate(PostingDate,1,2));
        LibraryTDS.CreateAssesseeandNODNOCSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,CountryRegion.Code,Vendor."No.",
          NodNocHeader.Type::Vendor,PostingDate)
      END ELSE
        LibraryTDS.CreateAssesseeandNODNOCSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,'',LibraryTDS.CreateVendorWithPostingSetup,
          NodNocHeader.Type::Vendor,PostingDate);
    END;

    LOCAL PROCEDURE CreateSalesLine@1500009(SalesHeader@1500000 : Record 36;TcsNatureOfCode@1500002 : Code[10]);
    VAR
      SalesLine@1500001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,'',LibraryRandom.RandInt(10));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandInt(1000));
      SalesLine.VALIDATE("TCS Nature of Collection",TcsNatureOfCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePaymentJournalsWithTds@1500025(VAR GenJournalLine@1500002 : Record 81;GLAccount@1500003 : Code[20];PostingDate@1500004 : Date;AmountPar@1500005 : Decimal;Payment@1500006 : Boolean);
    VAR
      GenJournalTemplate@1500001 : Record 80;
      GenJournalBatch@1500000 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      IF Payment THEN
        GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::Payments)
      ELSE
        GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::Purchases);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      WITH GenJournalLine DO BEGIN
        LibraryERM.CreateGeneralJnlLineWithBalAcc(
          GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,"Document Type"::Payment,
          "Account Type"::"G/L Account",GLAccount,"Bal. Account Type"::"Bank Account",
          LibraryERM.CreateBankAccountNo,AmountPar);
        IF NOT Payment THEN
          VALIDATE("Document Type","Document Type"::Invoice);
        VALIDATE("Posting Date",PostingDate);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocWithTCS@1500062(VAR SalesHeader@1500001 : Record 36;NodNocCode@1500002 : Code[20];TcsNatureOfCode@1500003 : Code[10];DocumentType@1500005 : Option) : Code[20];
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,NodNocCode);
      CreateSalesLine(SalesHeader,TcsNatureOfCode);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CalcTDSAmountsforJournalLine@1500042(VAR GenJournalLine@1500003 : Record 81;TDSSetup@1500005 : Record 13728;TaxBaseAmount@1500004 : Decimal);
    BEGIN
      WITH GenJournalLine DO BEGIN
        "TDS/TCS Base Amount" := TaxBaseAmount;
        "TDS/TCS Amount" := LibraryTDS.RoundTDS(TDSSetup."TDS %" / 100 * "TDS/TCS Base Amount");
        "Surcharge Amount" := LibraryTDS.RoundTDS(TDSSetup."Surcharge %" / 100 * "TDS/TCS Amount");
        "eCESS on TDS/TCS Amount" := LibraryTDS.RoundTDS(TDSSetup."eCESS %" / 100 * ("TDS/TCS Amount" + "Surcharge Amount"));
        "SHE Cess on TDS/TCS Amount" := LibraryTDS.RoundTDS(TDSSetup."SHE Cess %" / 100 * ("TDS/TCS Amount" + "Surcharge Amount"));
        "Total TDS/TCS Incl. SHE CESS" :=
          "TDS/TCS Amount" + "eCESS on TDS/TCS Amount" + "SHE Cess on TDS/TCS Amount" + "Surcharge Amount";
      END;
    END;

    LOCAL PROCEDURE FindTCSBatchHeader@1500017(VAR TcsBatchHeader@1500003 : Record 16515;FinYear@1500002 : Code[6];Quarter@1500001 : Option);
    BEGIN
      TcsBatchHeader.SETRANGE("Collector T.C.A.N. No.",CompanyInformation."T.C.A.N. No.");
      TcsBatchHeader.SETRANGE("Financial Year",FinYear);
      TcsBatchHeader.SETRANGE(Quarter,Quarter);
      TcsBatchHeader.FINDLAST;
    END;

    LOCAL PROCEDURE GenerateeTDSUsingPage@1500426(FinancialYearForeTDSTCS@1500200 : Code[6];Resident@1500000 : Boolean;FileeTDS@1500002 : Boolean) FileName : Text;
    VAR
      FileManagement@1500202 : Codeunit 419;
      GenerateeTDS@1500001 : TestPage 16507;
    BEGIN
      LibraryVariableStorage.Enqueue(FinancialYearForeTDSTCS);
      FileName := FileManagement.ServerTempFileName('.txt');
      LibraryVariableStorage.Enqueue(FileName);
      GenerateeTDS.OPENEDIT;
      GenerateeTDS.FormNo.SETVALUE(LibraryTDS.GetFormNo(Resident));
      GenerateeTDS.eTDS.INVOKE;
      IF FileeTDS THEN BEGIN
        EnqueueValuesInFormReqPageHandlers(FinancialYearForeTDSTCS);
        GenerateeTDS."File e-TDS".INVOKE;
        GenerateeTDS.Action1500008.INVOKE;
      END;
    END;

    LOCAL PROCEDURE UpdateTCSFilingStatus@1500060();
    VAR
      UpdateFilingStatus@1500003 : TestPage 16528;
    BEGIN
      UpdateFilingStatus.OPENEDIT;
      UpdateFilingStatus.GenerateForm.SETVALUE(TRUE);
      UpdateFilingStatus."File e-TDS".INVOKE;
    END;

    LOCAL PROCEDURE UpdateTCSChallanDtls@1500013(PaymentDocNo@1500000 : Code[20];PostingDate@1500002 : Date);
    VAR
      UpdateChallanDetails@1500001 : TestPage 16525;
    BEGIN
      LibraryVariableStorage.Enqueue(PaymentDocNo);
      LibraryVariableStorage.Enqueue(PostingDate);
      UpdateChallanDetails.OPENEDIT;
      UpdateChallanDetails.Action1280008.INVOKE;
    END;

    LOCAL PROCEDURE ValidateGeneralJournalsWithPartyTDSNatureCodes@1500038(VAR GenJournalLine@1500000 : Record 81;PostingDate@1500001 : Date;VendorNo@1500002 : Code[20];TdsNatureOfdeductionCode@1500003 : Code[10]);
    BEGIN
      WITH GenJournalLine DO BEGIN
        VALIDATE("Posting Date",PostingDate);
        VALIDATE("Party Type","Party Type"::Vendor);
        VALIDATE("Party Code",VendorNo);
        VALIDATE("TDS Nature of Deduction",TdsNatureOfdeductionCode);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE EnqueueValuesInFormReqPageHandlers@1500442(FinancialYearForeTDSTCS@1500124 : Code[6]);
    VAR
      CompanyInformation@1500125 : Record 79;
    BEGIN
      CompanyInformation.GET;
      LibraryVariableStorage.Enqueue(CompanyInformation."T.A.N. No.");
      LibraryVariableStorage.Enqueue(FinancialYearForeTDSTCS);
    END;

    LOCAL PROCEDURE EnqueueValuesInFormReqPageHandlersInForm27EQ@1500015(DocumentNo@1500001 : Code[20]);
    VAR
      Form27EQEntry@1500002 : Record 16517;
    BEGIN
      Form27EQEntry.SETRANGE("Document No.",DocumentNo);
      Form27EQEntry.FINDFIRST;
      LibraryVariableStorage.Enqueue(Form27EQEntry."Financial Year");
    END;

    LOCAL PROCEDURE EnqueueValuesinGenerateCertNosReqPageHandler@1500010(CustVendNo@1500215 : Code[20];PostingDate@1500000 : Date;TDSTCSType@1500216 : Option);
    VAR
      IncomeTaxPeriodSetup@1500219 : Record 16501;
    BEGIN
      WITH IncomeTaxPeriodSetup DO BEGIN
        SETRANGE("Starting Date",PostingDate);
        FINDFIRST;
        LibraryVariableStorage.Enqueue(CustVendNo);
        LibraryVariableStorage.Enqueue(TDSTCSType);
        LibraryVariableStorage.Enqueue("Starting Date");
        LibraryVariableStorage.Enqueue("Ending Date");
      END;
    END;

    [RequestPageHandler]
    PROCEDURE Form27QRequestPageHandler@1500489(VAR Form27Q@1500109 : TestRequestPage 16511);
    VAR
      TANLocation@1500110 : Variant;
      FinancialYear@1500111 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TANLocation);
      LibraryVariableStorage.Dequeue(FinancialYear);
      Form27Q.TANLocation.SETVALUE(TANLocation);
      Form27Q.ReportFrequency.SETVALUE(FinancialYearQuarter::Q1);
      Form27Q.FinancialYear.SETVALUE(FinancialYear);
      Form27Q.FullName.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      Form27Q.Designation.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      Form27Q.PrintingDate.SETVALUE(WORKDATE);
      Form27Q.MobileNo.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      Form27Q."PAN No.".SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      Form27Q.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE Form26QRequestPageHandler@1500068(VAR Form26Q@1500004 : TestRequestPage 16505);
    VAR
      TANLocation@1500000 : Variant;
      FinancialYear@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TANLocation);
      LibraryVariableStorage.Dequeue(FinancialYear);
      Form26Q.TANLocation.SETVALUE(TANLocation);
      Form26Q.ReportFrequency.SETVALUE(FinancialYearQuarter::Q1);
      Form26Q.FinancialYear.SETVALUE(FinancialYear);
      Form26Q.FullName.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      Form26Q.Designation.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      Form26Q.PrintingDate.SETVALUE(WORKDATE);
      Form26Q.MobileNo.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      Form26Q."PAN No.".SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      Form26Q.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE Form27EQRequestPageHandler@1500016(VAR Form27EQ@1500004 : TestRequestPage 16518);
    VAR
      FinancialYear@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FinancialYear);
      Form27EQ.Control1500010.SETVALUE(CompanyInformation."T.C.A.N. No.");
      Form27EQ."PAN No.".SETVALUE(CompanyInformation."P.A.N. No.");
      Form27EQ.Control1500004.SETVALUE(FinancialYearQuarter::Q1);
      Form27EQ.Control1500012.SETVALUE(FinancialYear);
      Form27EQ.Control1500002.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      Form27EQ.Control1500001.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      Form27EQ.Control1500000.SETVALUE(WORKDATE);
      Form27EQ.Control1500009.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      Form27EQ.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE GenerateeTDSRequestPageHandler@1500490(VAR GenerateeTDS@1500104 : TestRequestPage 16508);
    VAR
      FinancialYear@1500106 : Variant;
      FileName@1500107 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(FileName);
      GenerateeTDS.FileName.SETVALUE(FileName);
      GenerateeTDS.TANLocation.SETVALUE(CompanyInformation."T.A.N. No.");
      GenerateeTDS.ReportFrequency.SETVALUE(FinancialYearQuarter::Q1);
      GenerateeTDS.FinancialYear.SETVALUE(FinancialYear);
      GenerateeTDS."PAN No.".SETVALUE(CompanyInformation."P.A.N. No.");
      GenerateeTDS.FullName.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      GenerateeTDS.Designation.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      GenerateeTDS.PrintingDate.SETVALUE(WORKDATE);
      GenerateeTDS.NameOfReturnPreparationUtility.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      GenerateeTDS.Email.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      GenerateeTDS.MobileNo.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      GenerateeTDS.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateCertificateNosRequestPageHandler@1500461(VAR GenerateCertificateNos@1500118 : TestRequestPage 13720);
    VAR
      Party@1500119 : Variant;
      TDSGroupCode@1500120 : Variant;
      StartingDate@1500121 : Variant;
      EndingDate@1500122 : Variant;
      PartyType@1500123 : ' ,Party,Customer,Vendor';
    BEGIN
      LibraryVariableStorage.Dequeue(Party);
      LibraryVariableStorage.Dequeue(TDSGroupCode);
      LibraryVariableStorage.Dequeue(StartingDate);
      LibraryVariableStorage.Dequeue(EndingDate);
      GenerateCertificateNos.PartyType.SETVALUE(PartyType::Vendor);
      GenerateCertificateNos.Party.SETVALUE(Party);
      GenerateCertificateNos.TDSGroup.SETVALUE(TDSGroupCode);
      GenerateCertificateNos.StartingDate.SETVALUE(StartingDate);
      GenerateCertificateNos.EndingDate.SETVALUE(EndingDate);
      GenerateCertificateNos.ReceiptNumber.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(8,0));
      GenerateCertificateNos.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateTCSCertificateNosRequestPageHandler@1500021(VAR GenerateCertificateNos@1500118 : TestRequestPage 16517);
    VAR
      Party@1500119 : Variant;
      TCSType@1500120 : Variant;
      StartingDate@1500121 : Variant;
      EndingDate@1500122 : Variant;
      PartyType@1500123 : ' ,Party,Customer,Vendor';
    BEGIN
      LibraryVariableStorage.Dequeue(Party);
      LibraryVariableStorage.Dequeue(TCSType);
      LibraryVariableStorage.Dequeue(StartingDate);
      LibraryVariableStorage.Dequeue(EndingDate);
      GenerateCertificateNos.PartyType.SETVALUE(PartyType::Customer);
      GenerateCertificateNos.Control1280005.SETVALUE(Party);
      GenerateCertificateNos.Control1280007.SETVALUE(TCSType);
      GenerateCertificateNos.StartDate.SETVALUE(StartingDate);
      GenerateCertificateNos.EndDate.SETVALUE(EndingDate);
      GenerateCertificateNos.ReceiptNumber.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(8,0));
      GenerateCertificateNos.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateeTCSRequestPageHandler@1500020(VAR GenerateeTCS@1500005 : TestRequestPage 16524);
    VAR
      FileName@1500002 : Variant;
      TCANLocation@1500000 : Variant;
      FinancialYearQuarter@1500003 : Variant;
      FinancialYear@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FileName);
      LibraryVariableStorage.Dequeue(TCANLocation);
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);
      LibraryVariableStorage.Dequeue(FinancialYear);
      GenerateeTCS.FileName.SETVALUE(FileName);
      GenerateeTCS.Control1500009.SETVALUE(TCANLocation);
      GenerateeTCS."P.A.N No.".SETVALUE(CompanyInformation."P.A.N. No.");
      GenerateeTCS.Control1500005.SETVALUE(FinancialYearQuarter);
      GenerateeTCS.Control1500013.SETVALUE(FinancialYear);
      GenerateeTCS.Control1500000.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      GenerateeTCS.Control1500002.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      GenerateeTCS.Control1500011.SETVALUE(WORKDATE);
      GenerateeTCS.Control2.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      GenerateeTCS.Control1500015.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      GenerateeTCS.Control1500017.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      GenerateeTCS.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE UpdateChallanDetailsRequestPageHandler@1500089(VAR UpdateChallanDetails@1500005 : TestRequestPage 16520);
    VAR
      PaymentDocNo@1500000 : Variant;
      PostingDate@1500002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(PaymentDocNo);
      LibraryVariableStorage.Dequeue(PostingDate);
      UpdateChallanDetails.Control1500001.SETVALUE(PaymentDocNo);
      UpdateChallanDetails.Control1500002.SETVALUE(FORMAT(LibraryRandom.RandInt(1000)));
      UpdateChallanDetails.Control1500004.SETVALUE(PostingDate);
      UpdateChallanDetails.Control1500007.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      UpdateChallanDetails.Control1500009.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,7));
      UpdateChallanDetails.Control1500010.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(3,0));
      UpdateChallanDetails.Control1500012.SETVALUE(PostingDate);
      UpdateChallanDetails.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE UpdateTCSFilingStatusRequestPageHandler@1500090(VAR UpdateTcsFiling@1500005 : TestRequestPage 16525);
    BEGIN
      UpdateTcsFiling.Control1500009.SETVALUE(CompanyInformation."T.C.A.N. No.");
      UpdateTcsFiling.Control1500001.SETVALUE(FinancialYearQuarter::Q1);
      UpdateTcsFiling.Control1500000.SETVALUE(LibraryTCS.GetCurrentFinancialYear);
      UpdateTcsFiling.Control1500004.SETVALUE(WORKDATE);
      UpdateTcsFiling.Control1500006.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(3,0));
      UpdateTcsFiling.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE UpdateTDSFilingStatusRequestPageHandler@1500031(VAR UpdateFilingStatus@1500005 : TestRequestPage 16501);
    VAR
      TANLocation@1500000 : Variant;
      FinancialYear@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TANLocation);
      LibraryVariableStorage.Dequeue(FinancialYear);
      UpdateFilingStatus.Control1500009.SETVALUE(TANLocation);
      UpdateFilingStatus.Control1500002.SETVALUE(FinancialYear);
      UpdateFilingStatus.Control1500000.SETVALUE(FinancialYearQuarter::Q1);
      UpdateFilingStatus.Control1500004.SETVALUE(WORKDATE);
      OriginalRRRNo := LibraryUtility.GenerateRandomAlphabeticText(3,0);
      UpdateFilingStatus.Control1500006.SETVALUE(OriginalRRRNo);
      UpdateFilingStatus.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReturnModalPageHandler@1500056(VAR ReturnStatus@1500000 : TestPage 16508);
    BEGIN
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@1500054(QuestionText@1500000 : Text;VAR Relpy@1500001 : Boolean);
    BEGIN
      Relpy := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500502(Msg@1560501 : Text);
    BEGIN
    END;

    LOCAL PROCEDURE GenerateeTCS@1500067() FileName : Text;
    VAR
      TcsBatchHeader@1500005 : Record 16515;
      GenerateETCS@1500002 : TestPage 16528;
      CurrentQtr@1500000 : Option;
    BEGIN
      COMMIT;
      FileName := TEMPORARYPATH + LibraryUtility.GenerateGUID + '.txt';
      LibraryTCS.GetCurrentQuarter(CurrentQtr);
      FindTCSBatchHeader(TcsBatchHeader,LibraryTCS.GetCurrentFinancialYear,CurrentQtr);
      LibraryVariableStorage.Enqueue(FileName);
      LibraryVariableStorage.Enqueue(TcsBatchHeader."Collector T.C.A.N. No.");
      LibraryVariableStorage.Enqueue(TcsBatchHeader.Quarter);
      LibraryVariableStorage.Enqueue(TcsBatchHeader."Financial Year");
      COMMIT;
      GenerateETCS.OPENEDIT;
      GenerateETCS.GenerateForm.SETVALUE(TRUE);
      COMMIT;
      GenerateETCS.Action1500005.INVOKE;
    END;

    LOCAL PROCEDURE RunGenerateCertificateNos@1500011(NodNocHeaderNo@1500130 : Code[20];TDSTCSGroupCode@1500131 : Option;PostingDate@1500000 : Date;TDSTCSCertificate@1500001 : Boolean);
    BEGIN
      EnqueueValuesinGenerateCertNosReqPageHandler(NodNocHeaderNo,PostingDate,TDSTCSGroupCode);
      COMMIT;
      IF TDSTCSCertificate THEN
        REPORT.RUN(REPORT::"Generate Certificate Nos.")
      ELSE
        REPORT.RUN(REPORT::"Generate TCS Certificate Nos.");
    END;

    LOCAL PROCEDURE VerifyValuesOnForm27QPreview@1500437(DocumentNo@1500000 : Code[20];TDSGroupCode@1500001 : Option);
    VAR
      TDSGroup@1500002 : Record 13731;
      ChallanRegister@1500003 : Record 16504;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      TDSGroup.SETRANGE("TDS Group",TDSGroupCode);
      TDSGroup.FINDFIRST;
      ChallanRegister.SETRANGE("Pay TDS Document No.",DocumentNo);
      ChallanRegister.FINDFIRST;
      LibraryReportDataset.AssertElementWithValueExists('Form_26Q_27Q_Entry__TDS_Section_',FORMAT(TDSGroup."TDS Section"));
      LibraryReportDataset.AssertElementWithValueExists(
        'Challan_Register__TDS_Interest_Amount_',ChallanRegister."TDS Interest Amount");
      LibraryReportDataset.AssertElementWithValueExists('Challan_Register__Challan_No__',ChallanRegister."Challan No.");
      LibraryReportDataset.AssertElementWithValueExists('Challan_Register__Challan_Date_',FORMAT(ChallanRegister."Challan Date"));
      LibraryReportDataset.AssertElementWithValueExists('Challan_Register__BSR_Code_',ChallanRegister."BSR Code");
    END;

    LOCAL PROCEDURE VerifyReportData@1500004();
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      CompanyInformation.GET;
      LibraryReportDataset.AssertElementWithValueExists('Batch_Header__Deductor_Phone_No__',CompanyInformation."Phone No.");
      LibraryReportDataset.AssertElementWithValueExists('Batch_Header__Deductor_E_Mail_',CompanyInformation."E-Mail");
      LibraryReportDataset.AssertElementWithValueExists('Batch_Header__Responsible_Person_E_Mail_',CompanyInformation."E-Mail");
      LibraryReportDataset.AssertElementWithValueExists('Batch_Header__Responsible_Person_Phone_No__',CompanyInformation."Phone No.");
    END;

    LOCAL PROCEDURE VerifyReportDataInForm27EQ@1500018();
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      CompanyInformation.GET;
      LibraryReportDataset.AssertElementWithValueExists('TCS_Batch_Header__Collector_Phone_No__',CompanyInformation."Phone No.");
      LibraryReportDataset.AssertElementWithValueExists('TCS_Batch_Header__Collector_E_Mail_',CompanyInformation."E-Mail");
      LibraryReportDataset.AssertElementWithValueExists('TCS_Batch_Header__Responsible_Person_Phone_No__',
        CompanyInformation."Phone No.");
      LibraryReportDataset.AssertElementWithValueExists('TCS_Batch_Header__Responsible_Person_E_Mail_',CompanyInformation."E-Mail");
    END;

    LOCAL PROCEDURE VerifyReportDataInForm26Q@1500024(DocumentNo@1500000 : Code[20]);
    VAR
      Form26Q27QEntry@1500002 : Record 16505;
    BEGIN
      Form26Q27QEntry.SETRANGE("Document No.",DocumentNo);
      Form26Q27QEntry.FINDFIRST;
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('Form_26Q_27Q_Entry__Deductee_P_A_N__No__',
        Form26Q27QEntry."Deductee P.A.N. No.");
      LibraryReportDataset.AssertElementWithValueExists('Form_26Q_27Q_Entry__Form_26Q_27Q_Entry___Total_TDS_Including_SHE_CESS_',
        Form26Q27QEntry."Total TDS Including SHE CESS");
    END;

    LOCAL PROCEDURE VerifyReturnStatusInGeneratedFile@1500023(FinancialYear@1500000 : Code[10]);
    VAR
      BatchHeader@1500001 : Record 16503;
    BEGIN
      BatchHeader.SETRANGE("Financial Year",FinancialYear);
      BatchHeader.FINDFIRST;
      Assert.AreEqual(TRUE,BatchHeader.Filed,ValueErr);
      Assert.AreEqual(WORKDATE,BatchHeader."Filing Date",ValueErr);
      Assert.AreEqual(OriginalRRRNo,BatchHeader."Original RRR No.",ValueErr);
    END;

    LOCAL PROCEDURE VerifyeTCSChallanRegister@1500026(DocumentNo@1500000 : Code[20]);
    VAR
      TcsChallanRegister@1500001 : Record 16516;
    BEGIN
      TcsChallanRegister.SETRANGE("Pay TCS Document No.",DocumentNo);
      TcsChallanRegister.FINDFIRST;
      TcsChallanRegister.TESTFIELD(Filed);
    END;

    LOCAL PROCEDURE VerifyGenJnlLinesPurchtJnlLines@1500044(ExpectedGenJournalLine@1500000 : Record 81;GenJournalLine@1500001 : Record 81;ExpectedGenJournalLine2@1500002 : Record 81;GenJournalLine2@1500003 : Record 81);
    BEGIN
      Assert.AreNearlyEqual(
        ExpectedGenJournalLine."Total TDS/TCS Incl. SHE CESS",
        GenJournalLine."Total TDS/TCS Incl. SHE CESS",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(
          TDSValueErr,GenJournalLine.FIELDNAME("Total TDS/TCS Incl. SHE CESS"),ExpectedGenJournalLine."Total TDS/TCS Incl. SHE CESS"));
      Assert.AreNearlyEqual(
        ExpectedGenJournalLine2."Total TDS/TCS Incl. SHE CESS",
        GenJournalLine2."Total TDS/TCS Incl. SHE CESS",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(
          TDSValueErr,GenJournalLine2.FIELDNAME("Total TDS/TCS Incl. SHE CESS"),ExpectedGenJournalLine2."Total TDS/TCS Incl. SHE CESS"));
    END;

    BEGIN
    END.
  }
}

