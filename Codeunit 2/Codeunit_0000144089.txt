OBJECT Codeunit 144089 Unit Price Incl. of Tax
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Item@1500001 : Record 27;
      LibraryInventory@1500002 : Codeunit 132201;
      LibraryRandom@1500005 : Codeunit 130440;
      LibraryUtility@1500006 : Codeunit 131000;
      LibraryERM@1500004 : Codeunit 131300;
      LibrarySales@1500003 : Codeunit 130509;
      Assert@1500007 : Codeunit 130000;
      IsInitialized@1500000 : Boolean;
      TaxErr@1500008 : TextConst 'ENU=Are not equal';

    [Test]
    [HandlerFunctions(GetShipmentLinesHandler)]
    PROCEDURE TestUnitPriceInclOfTaxInSales@1500001();
    VAR
      SalesHeader@1500000 : Record 36;
      SalesLine@1500001 : Record 37;
      SalesHeader2@1500004 : Record 36;
      SalesLine2@1500005 : Record 37;
      SalesPrice@1500002 : Record 7002;
      StructureHeader@1500003 : Record 13792;
      StructureDetails@1500006 : Record 13793;
    BEGIN
      // [SCENARIO 381474] Unit Price Incl. of Tax is incorrect in Sales Invoice
      // [FEATURE] [SalesTransaction]

      // [GIVEN] Created PIT Structure , Item with Unit Of Measure and Sales Price
      Initialize;
      LibrarySales.CreateSalesPrice(
        SalesPrice,Item."No.",SalesPrice."Sales Type"::"All Customers",'',0D,'','',Item."Base Unit of Measure",0.0,
        LibraryRandom.RandDecInDecimalRange(20,25,2));
      CreateStructure(StructureHeader);
      UpdateStructure(StructureHeader,StructureDetails);
      UpdateSalesPrices(SalesPrice,StructureHeader);

      // [WHEN] Create Sales Order and Invoice them by fetching shipment lines
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      UpdateSalesStructure(SalesHeader,StructureHeader);
      UpdateSalesLine(SalesLine);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      LibrarySales.CreateSalesHeader(SalesHeader2,SalesHeader2."Document Type"::Invoice,SalesHeader."Sell-to Customer No.");
      SalesLine2.VALIDATE("Document Type",SalesHeader2."Document Type");
      SalesLine2.VALIDATE("Document No.",SalesHeader2."No.");
      LibrarySales.GetShipmentLines(SalesLine2);

      // [THEN] Verified Unit Price Incl. Of Tax are same in Sales Order and Sales Invoice
      VerifyUnitPriceInclOfTax(SalesHeader2,SalesLine,SalesLine2);
    END;

    LOCAL PROCEDURE Initialize@1500008();
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryInventory.CreateItem(Item);
      IsInitialized := TRUE;
      COMMIT
    END;

    LOCAL PROCEDURE CreateSalesDocument@1500027(VAR SalesHeader@1500000 : Record 36;VAR SalesLine@1500001 : Record 37;DocumentType@1500002 : Option;CustomerCode@1500003 : Code[20]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerCode);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDecInDecimalRange(1,5,2));
    END;

    LOCAL PROCEDURE CreateStructure@1500023(VAR StructureHeader@1500000 : Record 13792);
    VAR
      TaxChargeGroupDetails@1500002 : Record 13791;
      StructureDetails@1500003 : Record 13793;
    BEGIN
      LibraryERM.CreateStructureHeader(StructureHeader);
      CreateTaxChargeGroupDetails(TaxChargeGroupDetails);
      LibraryERM.CreateStructureDetails(
        StructureDetails,StructureHeader.Code,1,0,TaxChargeGroupDetails."Tax/Charge Group",TaxChargeGroupDetails."Tax/Charge Code");
    END;

    LOCAL PROCEDURE CreateTaxChargeGroupDetails@1500031(VAR TaxChargeGroupDetails@1500000 : Record 13791);
    BEGIN
      TaxChargeGroupDetails.INIT;
      TaxChargeGroupDetails.VALIDATE(
        "Tax/Charge Code",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(TaxChargeGroupDetails.FIELDNO("Tax/Charge Code"),DATABASE::"Tax/Charge Group Details"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Tax/Charge Group Details",TaxChargeGroupDetails.FIELDNO("Tax/Charge Code"))));
      TaxChargeGroupDetails.VALIDATE(Description,LibraryUtility.GenerateRandomText(10));
      TaxChargeGroupDetails.INSERT(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesStructure@1500054(VAR SalesHeader@1500002 : Record 36;VAR StructureHeader@1500001 : Record 13792);
    BEGIN
      SalesHeader.VALIDATE(Structure,StructureHeader.Code);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateStructure@1500004(VAR StructureHeader@1500000 : Record 13792;VAR StructureDetails@1500001 : Record 13793);
    BEGIN
      StructureDetails.SETRANGE(Code,StructureHeader.Code);
      StructureDetails.FINDFIRST;
      StructureDetails.VALIDATE("Include PIT Calculation",TRUE);
      StructureDetails.VALIDATE("Account No.",LibraryERM.CreateGLAccountNo);
      StructureDetails.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesPrices@1500000(VAR SalesPrice@1500000 : Record 7002;VAR StructureHeader@1500001 : Record 13792);
    BEGIN
      SalesPrice.VALIDATE("PIT Structure",StructureHeader.Code);
      SalesPrice.VALIDATE("Price Inclusive of Tax",TRUE);
      SalesPrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesLine@1500021(VAR SalesLine@1500000 : Record 37);
    BEGIN
      SalesLine.VALIDATE("Unit Price Incl. of Tax",LibraryRandom.RandDecInDecimalRange(25,30,2));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyUnitPriceInclOfTax@1500035(VAR SalesHeader@1500002 : Record 36;VAR SalesLine@1500000 : Record 37;VAR SalesLine2@1500001 : Record 37);
    BEGIN
      SalesLine2.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine2.SETFILTER("No.",'<>%1','');
      SalesLine2.FINDFIRST;
      Assert.AreEqual(SalesLine."Unit Price Incl. of Tax",SalesLine2."Unit Price Incl. of Tax",TaxErr);
    END;

    [ModalPageHandler]
    PROCEDURE GetShipmentLinesHandler@1500014(VAR GetShipmentLines@1500000 : TestPage 5708);
    BEGIN
      GetShipmentLines.OK.INVOKE;
    END;

    BEGIN
    END.
  }
}

