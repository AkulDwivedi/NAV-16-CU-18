OBJECT Codeunit 144053 TDS - Document Transactions
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CompanyInformation@1500013 : Record 79;
      CustLedgerEntry@1500007 : Record 21;
      LibraryTDS@1500003 : Codeunit 143000;
      LibraryERM@1500002 : Codeunit 131300;
      LibraryReportDataset@1500018 : Codeunit 131007;
      LibraryRandom@1500001 : Codeunit 130440;
      LibraryPurchase@1500004 : Codeunit 130512;
      LibraryUtility@1500005 : Codeunit 131000;
      LibrarySales@1500006 : Codeunit 130509;
      LibrarySetupStorage@1500015 : Codeunit 131009;
      LibraryVariableStorage@1500016 : Codeunit 131004;
      Assert@1500009 : Codeunit 130000;
      isInitialized@1500000 : Boolean;
      TDSCertErr@1500008 : TextConst '@@@="%1 = Certificate No.";ENU=Certificate Details for Certificate No. %1 should be same as entered earlier.';
      TANErr@1500012 : TextConst 'ENU=No records found for the given  T.A.N No..';
      FinYearErr@1500011 : TextConst 'ENU=No records found for the given  Financial Year.';
      ValueNotFoundErr@1500010 : TextConst 'ENU=Value Not Found.';
      ReportFrequency@1500022 : ' ,Q1,Q2,Q3,Q4';
      FinancialYear@1500021 : Code[6];
      TANNo@1500020 : Code[10];
      FileName@1500023 : Text;

    [Test]
    [HandlerFunctions(UpdatePageHandler)]
    PROCEDURE CheckTDSTaxDeductedAtSource@1500001();
    VAR
      GenJournalLine@1500009 : Record 81;
      TDSSetup@1500008 : Record 13728;
      TdsNatureOfDeduction@1500007 : Record 13726;
      NodNocHeader@1500006 : Record 13786;
      Vendor@1500005 : Record 23;
      IncomeTaxPeriodSetup@1500003 : Record 16501;
      IncomeTaxAccountingPeriod@1500002 : Record 13724;
      CountryRegion@1500001 : Record 9;
      SalesHeader@1500011 : Record 36;
      SalesLine@1500012 : Record 37;
      Amount@1500000 : Decimal;
      CurrencyCode@1500004 : Code[10];
      CustomerNo@1500013 : Code[20];
    BEGIN
      // [SCENARIO 164326] TDS - Tax Deducted at Source - TCN G3: Verify deleting entry from Assign TDS Cert details window and generating entry in Update TDS Certificate
      // [FEATURE] [Payment Journal,Sales Order]
      Initialize;

      // [GIVEN] Created NODNOC Setup With TDS Group and TDS Nauture of Deduction,Structure.
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateCountryRegion(CountryRegion);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      CurrencyCode := CreateCurrencyCode(IncomeTaxAccountingPeriod."Starting Date");
      CreateForeignVendor(Vendor,CurrencyCode,CountryRegion.Code);
      CustomerNo := LibrarySales.CreateCustomerNo;
      LibraryTDS.CreateAssesseeandNODNOCSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,CountryRegion.Code,Vendor."No.",
        NodNocHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Create Payment Journal and Post, Create Sales Order and Post
      CreatePaymentJournalDocument(
        GenJournalLine,GenJournalLine."Document Type"::Payment,-Amount,CustomerNo,
        '',IncomeTaxAccountingPeriod."Starting Date");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CustomerNo,SalesLine.Type::"G/L Account",Amount);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Verify TDS Certificate Receivable and Certificate Received.
      UpdateTDSCertDetailsAndVerifyTDSCertificateReceivable(CustomerNo,Amount);
    END;

    [Test]
    [HandlerFunctions(UpdatePageHandler)]
    PROCEDURE CheckTDSCertReceivedGroupTotal@1500002();
    VAR
      GenJournalLine@1500009 : Record 81;
      TDSSetup@1500008 : Record 13728;
      TdsNatureOfDeduction@1500007 : Record 13726;
      NodNocHeader@1500006 : Record 13786;
      Vendor@1500005 : Record 23;
      IncomeTaxPeriodSetup@1500003 : Record 16501;
      IncomeTaxAccountingPeriod@1500002 : Record 13724;
      CountryRegion@1500001 : Record 9;
      SalesHeader@1500011 : Record 36;
      SalesLine@1500012 : Record 37;
      Amount@1500000 : Decimal;
      CurrencyCode@1500004 : Code[10];
      CustomerNo@1500013 : Code[20];
    BEGIN
      // [SCENARIO 164329] TDS - Tax Deducted at Source - TCN G6: Check if the system is generating values correctly in TDS cert. Received Group Total field and Total field of TDS Certificate Summary report.
      // [FEATURE] [Payment Journal,Sales Order]
      Initialize;

      // [GIVEN] Created NODNOC Setup With TDS Group and TDS Nauture of Deduction,Structure.
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateCountryRegion(CountryRegion);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      CurrencyCode := CreateCurrencyCode(IncomeTaxAccountingPeriod."Starting Date");
      CreateForeignVendor(Vendor,CurrencyCode,CountryRegion.Code);
      CustomerNo := LibrarySales.CreateCustomerNo;
      LibraryTDS.CreateAssesseeandNODNOCSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,CountryRegion.Code,Vendor."No.",
        NodNocHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Create Payment Journal and Post, Create Sales Order and Post
      CreatePaymentJournalDocument(
        GenJournalLine,GenJournalLine."Document Type"::Payment,-Amount,CustomerNo,
        '',IncomeTaxAccountingPeriod."Starting Date");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateSalesOrder(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CustomerNo,SalesLine.Type::"G/L Account",Amount);
      SalesHeader.VALIDATE("TDS Certificate Receivable",TRUE);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Verify TDS Certificate Receivable and Certificate Received.
      UpdateTDSCertDetailsAndVerifyTDSCertificateReceivable(CustomerNo,Amount);
    END;

    [Test]
    [HandlerFunctions(GenerateCertificateNosRequestPageHandler,ConfirmHandlerTrue,MessageHandler,Form27QRequestPageHandler)]
    PROCEDURE VerifyForm27QReportAfterPaymentWtihWrongParameters@1500006();
    VAR
      TdsNatureOfDeduction@1500007 : Record 13726;
      NodNocHeader@1500006 : Record 13786;
      TDSSetup@1500004 : Record 13728;
      TDSGroup@1500003 : Record 13731;
      Vendor@1500009 : Record 23;
      IncomeTaxAccountingPeriod@1500012 : Record 13724;
      IncomeTaxAccountingPeriod2@1500005 : Record 13724;
      GenJournalLine@1500002 : Record 81;
      GenJournalLine2@1500013 : Record 81;
      ChallanRegister@1500014 : Record 16504;
      ChallanNo@1500000 : Code[20];
    BEGIN
      // [SCENARIO 164304] TDS - Tax Deducted at Source - TCN E3: Check if system is generating Form 27Q by partial information
      // [FEATURE] [TDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,TDS Nature of deduction,Assesse Code,TDS Setup For TDS Payment and to Generate form 27Q Report
      InitializeSetup(IncomeTaxAccountingPeriod,Vendor,NodNocHeader,TdsNatureOfDeduction,TDSSetup,TDSGroup);

      // [WHEN] Create General Journal with Foreign Currency and post payment after that update TDS register,Challan details and run Form 27Q Report
      ChallanRegister.DELETEALL;
      CreateAndPostGeneralLinesWithNatureOfDeduction(GenJournalLine,TdsNatureOfDeduction,Vendor."No.");
      CreatePaymentJnlWithPayTDS(GenJournalLine2,TDSGroup);
      ChallanNo := LibraryTDS.UpdateChallanDetails(GenJournalLine."Document No.",GenJournalLine2."Document No.",WORKDATE);
      LibraryTDS.RunUpdateChallanRegister(ChallanNo,LibraryRandom.RandDec(200,1));
      RunGenerateCertificateNos(NodNocHeader."No.",TdsNatureOfDeduction."TDS Group");
      LibraryTDS.Form26QForm27QReportFieldsValidation;

      // [WHEN] Generate Form 27Q Report With Wrong TAN
      UpdateForm26QandeTDSFieldValues(1,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",ReportFrequency::Q1);
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Expected Error : Wrong TAN No
      Assert.ExpectedError(TANErr);

      // [WHEN] Generate Form 27Q Report With Wrong Financial Year
      IncomeTaxAccountingPeriod2.FINDFIRST;
      UpdateForm26QandeTDSFieldValues(2,IncomeTaxAccountingPeriod2."Financial Year for eTDS/TCS",ReportFrequency::Q1);
      ASSERTERROR REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Expected Error : Wrong Financial Error
      Assert.ExpectedError(FinYearErr);

      // [WHEN] Generate Form 27Q Report
      UpdateForm26QandeTDSFieldValues(2,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",ReportFrequency::Q1);
      REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Updated TDS Challan Details ,TDS Register Details,Generated Certificate details and verifying the Form 27Q Report Details
      ChallanRegister.SETRANGE("Challan No.",ChallanNo);
      ChallanRegister.FINDFIRST;
      VerifyValuesOnForm27QPreview(ChallanRegister,TDSGroup);
    END;

    [Test]
    [HandlerFunctions(Form26QRequestPageHandler,GenerateeTDSRequestPageHandler,ConfirmHandlerTrue)]
    PROCEDURE VerifyForm26QWhenThresholdApplicable@1500004();
    VAR
      GenJournalLine@1500006 : Record 81;
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      NodNocHeader@1500002 : Record 13786;
      TdsNatureOfDeduction@1500003 : Record 13726;
      TDSGroup@1500004 : Record 13731;
      FormNo@1500005 : '26Q,27Q';
    BEGIN
      // [SCENARIO 163837] Verify Form 26 Q report as per new format in case of vendor when threshold is applicable
      // [FEATURE] [TDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,TDS Nature of deduction,Assesse Code,TDS Setup For TDS Payment and to Generate form 27Q Report
      InitializeSetupWithThresholdForForm26QWithVendor(IncomeTaxAccountingPeriod,NodNocHeader,TdsNatureOfDeduction,TDSGroup);

      // [WHEN] Creat Bank Payment Voucher and Post
      CreateBankPaymentVoucher(
        GenJournalLine,NodNocHeader."No.",TdsNatureOfDeduction.Code,IncomeTaxAccountingPeriod."Starting Date");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateTDSDocumentsAndRunForm26QWithDiffAccPeriod(GenJournalLine,TDSGroup,IncomeTaxAccountingPeriod);
      GenerateeTDSUsingPage(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",TRUE);

      // [THEN] Verify eTDS File With TANNo.
      VerifyValuesOnBatchHeader(FormNo::"26Q",CompanyInformation."T.A.N. No.");
    END;

    [Test]
    [HandlerFunctions(Form26QRequestPageHandler,GenerateeTDSRequestPageHandler,ConfirmHandlerTrue)]
    PROCEDURE VerifyForm26QWithPartyWhenThresholdApplicable@1500003();
    VAR
      GenJournalLine@1500006 : Record 81;
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      NodNocHeader@1500002 : Record 13786;
      TdsNatureOfDeduction@1500003 : Record 13726;
      TDSGroup@1500004 : Record 13731;
      FormNo@1500005 : '26Q,27Q';
    BEGIN
      // [SCENARIO 163840] Verify Form 26 Q report as per new format in case of Party when threshold is applicable
      // [FEATURE] [TDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,TDS Nature of deduction,Assesse Code,TDS Setup For TDS Payment and to Generate form 27Q Report
      InitializeSetupWithThresholdForForm26QWithParty(IncomeTaxAccountingPeriod,NodNocHeader,TdsNatureOfDeduction,TDSGroup);

      // [WHEN] Creat Bank Payment Voucher and Post
      CreateBankPaymentVoucherWithParty(
        GenJournalLine,NodNocHeader."No.",TdsNatureOfDeduction.Code,IncomeTaxAccountingPeriod."Starting Date");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateTDSDocumentsAndRunForm26QWithDiffAccPeriod(GenJournalLine,TDSGroup,IncomeTaxAccountingPeriod);
      GenerateeTDSUsingPage(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",TRUE);

      // [THEN] Verify eTDS File With TANNo.
      VerifyValuesOnBatchHeader(FormNo::"26Q",CompanyInformation."T.A.N. No.");
    END;

    [Test]
    [HandlerFunctions(Form26QRequestPageHandler,GenerateeTDSRequestPageHandler)]
    PROCEDURE VerifyForm26QWhenThreholdNotApplicable@1500023();
    VAR
      GenJournalLine@1500007 : Record 81;
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      TDSGroup@1500002 : Record 13731;
      TdsNatureOfDeduction@1500004 : Record 13726;
      NodNocHeader@1500005 : Record 13786;
      FormNo@1500001 : '26Q,27Q';
    BEGIN
      // [SCENARIO 163839] IN - New TDS & TCS e-filing changes with respect to FVU 3.3 - Verify Form 26 Q report as per new format in case of vendor when threshold is not applicable
      // [FEATURE] [TDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,TDS Nature of deduction,Assesse Code,TDS Setup For TDS Payment and to Generate form 27Q Report
      InitializeSetupWithoutThresholdForForm26QWithVendor(
        IncomeTaxAccountingPeriod,NodNocHeader,TdsNatureOfDeduction,TDSGroup);

      // [WHEN] Create Bank Payment Vocuher and Post
      GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::Vendor);
      GenJournalLine.VALIDATE("Account No.",NodNocHeader."No.");
      CreateBankPaymentVoucherWithNatureOfDeduction(
        GenJournalLine,IncomeTaxAccountingPeriod."Starting Date",TdsNatureOfDeduction.Code,
        GenJournalLine."Party Type"::Vendor,NodNocHeader."No.");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateTDSDocumentsAndRunForm26Q(GenJournalLine,TDSGroup,IncomeTaxAccountingPeriod);
      GenerateeTDSUsingPage(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",TRUE);

      // [THEN] Verify eTDS File,Form26Q With TANNo.
      VerifyValuesOnBatchHeader(FormNo::"26Q",CompanyInformation."T.A.N. No.");
      VerifyValuesOnForm26QPreview(GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(Form26QRequestPageHandler,GenerateeTDSRequestPageHandler)]
    PROCEDURE VerifyForm26QWithPartyWhenThreholdNotApplicable@1500042();
    VAR
      GenJournalLine@1500007 : Record 81;
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      TDSGroup@1500002 : Record 13731;
      TdsNatureOfDeduction@1500004 : Record 13726;
      NodNocHeader@1500005 : Record 13786;
      FormNo@1500001 : '26Q,27Q';
    BEGIN
      // [SCENARIO 163841] IN - New TDS & TCS e-filing changes with respect to FVU 3.3 - Verify Form 26 Q report as per new format in case of Party when threshold is not applicable
      // [FEATURE] [TDS Transactions]

      // [GIVEN] Created Income Tax accounting period ,NODNOC ,TDS Nature of deduction,Assesse Code,TDS Setup For TDS Payment and to Generate form 27Q Report
      InitializeSetupWithoutThresholdForForm26QWithParty(
        IncomeTaxAccountingPeriod,NodNocHeader,TdsNatureOfDeduction,TDSGroup);

      // [WHEN] Create Bank Payment Vocuher and Post
      GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Account No.",LibraryERM.CreateGLAccountNo);
      CreateBankPaymentVoucherWithNatureOfDeduction(
        GenJournalLine,IncomeTaxAccountingPeriod."Starting Date",TdsNatureOfDeduction.Code,
        GenJournalLine."Party Type"::Party,NodNocHeader."No.");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateTDSDocumentsAndRunForm26Q(GenJournalLine,TDSGroup,IncomeTaxAccountingPeriod);
      GenerateeTDSUsingPage(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",TRUE);

      // [THEN] Verify eTDS File,Form26Q With TANNo.
      VerifyValuesOnBatchHeader(FormNo::"26Q",CompanyInformation."T.A.N. No.");
      VerifyValuesOnForm26QPreview(GenJournalLine.Amount);
    END;

    LOCAL PROCEDURE Initialize@1501020();
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;

      CompanyInformation.GET;
      LibraryTDS.CreateDeductoryCodeAndUpdateOnCompanyInformation(CompanyInformation);

      isInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE InitializeSetup@1500007(VAR IncomeTaxAccountingPeriod@1500002 : Record 13724;VAR Vendor@1500001 : Record 23;VAR NodNocHeader@1500003 : Record 13786;VAR TdsNatureOfDeduction@1500004 : Record 13726;VAR TDSSetup@1500005 : Record 13728;VAR TDSGroup@1500006 : Record 13731);
    VAR
      CountryRegion@1500000 : Record 9;
      CurrencyCode@1500007 : Code[10];
    BEGIN
      Initialize;
      LibraryTDS.UpdateTDSNilChallanInGeneralLedgerSetup;
      LibraryERM.CreateCountryRegion(CountryRegion);
      CreateIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod,WORKDATE);
      CurrencyCode := CreateCurrencyCode(IncomeTaxAccountingPeriod."Starting Date");
      CreateForeignVendor(Vendor,CurrencyCode,CountryRegion.Code);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,CountryRegion.Code,Vendor."No.",
        NodNocHeader.Type::Vendor,WORKDATE);
      UpdateAccountNumberInTDSGroup(TdsNatureOfDeduction."TDS Group",TDSGroup);
    END;

    LOCAL PROCEDURE InitializeSetupWithThresholdForForm26QWithVendor@1500031(VAR IncomeTaxAccountingPeriod@1500004 : Record 13724;VAR NodNocHeader@1500003 : Record 13786;VAR TdsNatureOfDeduction@1500002 : Record 13726;VAR TDSGroup@1500001 : Record 13731);
    BEGIN
      CreateDiffAccountingPeriodAndUpdateGLSetup(IncomeTaxAccountingPeriod);
      CreateVendorAndUpdateTDSSetup(NodNocHeader,TdsNatureOfDeduction,TDSGroup,IncomeTaxAccountingPeriod);
    END;

    LOCAL PROCEDURE InitializeSetupWithoutThresholdForForm26QWithVendor@1500052(VAR IncomeTaxAccountingPeriod@1500003 : Record 13724;VAR NodNocHeader@1500002 : Record 13786;VAR TdsNatureOfDeduction@1500001 : Record 13726;VAR TDSGroup@1500000 : Record 13731);
    BEGIN
      CreateAccountingPeriodAndUpdateGLSetup(IncomeTaxAccountingPeriod);
      CreateVendorAndUpdateTDSSetup(NodNocHeader,TdsNatureOfDeduction,TDSGroup,IncomeTaxAccountingPeriod);
    END;

    LOCAL PROCEDURE InitializeSetupWithoutThresholdForForm26QWithParty@1500011(VAR IncomeTaxAccountingPeriod@1500000 : Record 13724;VAR NodNocHeader@1500002 : Record 13786;VAR TdsNatureOfDeduction@1500003 : Record 13726;VAR TDSGroup@1500005 : Record 13731);
    BEGIN
      CreateAccountingPeriodAndUpdateGLSetup(IncomeTaxAccountingPeriod);
      CreatePartyAndUpdateTDSSetup(NodNocHeader,TdsNatureOfDeduction,TDSGroup,IncomeTaxAccountingPeriod);
    END;

    LOCAL PROCEDURE InitializeSetupWithThresholdForForm26QWithParty@1500043(VAR IncomeTaxAccountingPeriod@1500000 : Record 13724;VAR NodNocHeader@1500002 : Record 13786;VAR TdsNatureOfDeduction@1500003 : Record 13726;VAR TDSGroup@1500005 : Record 13731);
    BEGIN
      CreateDiffAccountingPeriodAndUpdateGLSetup(IncomeTaxAccountingPeriod);
      CreatePartyAndUpdateTDSSetup(NodNocHeader,TdsNatureOfDeduction,TDSGroup,IncomeTaxAccountingPeriod);
    END;

    LOCAL PROCEDURE CreateAccountingPeriodAndUpdateGLSetup@1500009(VAR IncomeTaxAccountingPeriod@1500000 : Record 13724);
    BEGIN
      Initialize;
      LibraryTDS.UpdateTDSNilChallanInGeneralLedgerSetup;
      CreateIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod,WORKDATE);
    END;

    LOCAL PROCEDURE CreateDiffAccountingPeriodAndUpdateGLSetup@1500010(VAR IncomeTaxAccountingPeriod@1500000 : Record 13724);
    BEGIN
      Initialize;
      LibraryTDS.UpdateTDSNilChallanInGeneralLedgerSetup;
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriodQuarters(IncomeTaxAccountingPeriod."No.");
    END;

    LOCAL PROCEDURE CreateVendorAndUpdateTDSSetup@1500048(VAR NodNocHeader@1500003 : Record 13786;VAR TdsNatureOfDeduction@1500002 : Record 13726;VAR TDSGroup@1500001 : Record 13731;VAR IncomeTaxAccountingPeriod@1500000 : Record 13724);
    VAR
      Vendor@1500004 : Record 23;
      TDSSetup@1500006 : Record 13728;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("P.A.N. No.",CompanyInformation."P.A.N. No.");
      Vendor.MODIFY(TRUE);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,'',Vendor."No.",
        NodNocHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");
      UpdateAccountNumberInTDSGroup(TdsNatureOfDeduction."TDS Group",TDSGroup);
    END;

    LOCAL PROCEDURE CreatePartyAndUpdateTDSSetup@1500053(VAR NodNocHeader@1500003 : Record 13786;VAR TdsNatureOfDeduction@1500002 : Record 13726;VAR TDSGroup@1500001 : Record 13731;VAR IncomeTaxAccountingPeriod@1500000 : Record 13724);
    VAR
      Party@1500004 : Record 13730;
      TDSSetup@1500005 : Record 13728;
    BEGIN
      LibraryTDS.CreateParty(Party);
      Party.VALIDATE("P.A.N. No.",CompanyInformation."P.A.N. No.");
      Party.MODIFY(TRUE);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,'',Party.Code,
        NodNocHeader.Type::Party,IncomeTaxAccountingPeriod."Starting Date");
      UpdateAccountNumberInTDSGroup(TdsNatureOfDeduction."TDS Group",TDSGroup);
    END;

    LOCAL PROCEDURE CreateCurrencyCode@1500020(StartingDate@1500001 : Date) : Code[10];
    VAR
      Currency@1500021 : Record 4;
    BEGIN
      WITH Currency DO BEGIN
        GET(CreateCurrencyWithRandomExchRates(StartingDate));
        VALIDATE("Invoice Rounding Precision",0.01);
        MODIFY(TRUE);
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE CreateForeignVendor@1500032(VAR Vendor@1500000 : Record 23;CurrencyCode@1500001 : Code[10];CountryCode@1500002 : Code[10]);
    VAR
      VendorNo@1500003 : Code[20];
    BEGIN
      VendorNo := CreateVendor;
      Vendor.GET(VendorNo);
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.VALIDATE("Country/Region Code",CountryCode);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCurrencyWithRandomExchRates@1500022(StartingDate@1500000 : Date) : Code[10];
    VAR
      CurrencyCode@1500024 : Code[10];
    BEGIN
      CurrencyCode := CreateCurrencyWithGLAccountSetup;
      CreateRandomExchangeRate(CurrencyCode,StartingDate);
      EXIT(CurrencyCode);
    END;

    LOCAL PROCEDURE CreateCurrencyWithGLAccountSetup@1500025() : Code[10];
    VAR
      Currency@1500026 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      WITH Currency DO BEGIN
        VALIDATE("Residual Gains Account",LibraryERM.CreateGLAccountNo);
        VALIDATE("Residual Losses Account","Residual Gains Account");
        VALIDATE("Realized G/L Gains Account",LibraryERM.CreateGLAccountNo);
        VALIDATE("Realized G/L Losses Account","Realized G/L Gains Account");
        VALIDATE("Realized Gains Acc.",LibraryERM.CreateGLAccountNo);
        VALIDATE("Realized Losses Acc.","Realized Gains Acc.");
        VALIDATE("Unrealized Gains Acc.",LibraryERM.CreateGLAccountNo);
        VALIDATE("Unrealized Losses Acc.","Unrealized Gains Acc.");
        MODIFY(TRUE);
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE CreateRandomExchangeRate@1500027(CurrencyCode@1500029 : Code[10];StartingDate@1500000 : Date);
    VAR
      CurrencyExchangeRate@1500028 : Record 330;
    BEGIN
      CurrencyExchangeRate.INIT;
      CurrencyExchangeRate.VALIDATE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.VALIDATE("Starting Date",StartingDate);
      CurrencyExchangeRate.INSERT(TRUE);

      // Using RANDOM Exchange Rate Amount and Adjustment Exchange Rate, between 100 and 400 (Standard Value).
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",100 * LibraryRandom.RandInt(4));
      CurrencyExchangeRate.VALIDATE("Adjustment Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount");

      // Relational Exch. Rate Amount and Relational Adjmt Exch Rate Amt always greater than Exchange Rate Amount.
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",2 * CurrencyExchangeRate."Exchange Rate Amount");
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePaymentJournalDocument@1500029(VAR GenJournalLine@1500030 : Record 81;DocumentType@1500003 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';Amount@1500001 : Decimal;VendorNo@1500002 : Code[20];CodeContractor@1500000 : Code[10];PostingDate@1500005 : Date);
    VAR
      GenJournalBatch@1500031 : Record 232;
      GenJournalTemplate@1500004 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      CreateGeneralJournalLineWithBatch(
        GenJournalLine,DocumentType,Amount,GenJournalBatch."Journal Template Name",
        GenJournalBatch.Name,VendorNo,CodeContractor,PostingDate);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLineWithBatch@1500008(VAR GenJournalLine@1500032 : Record 81;DocumentType@1500002 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';Amount@1500004 : Decimal;JournalTemplateName@1500001 : Code[10];JournalBatchName@1500000 : Code[10];CustomerNo@1500033 : Code[20];CodeContractor@1500034 : Code[10];PostingDate@1500003 : Date);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,JournalTemplateName,JournalBatchName,DocumentType,GenJournalLine."Account Type"::Customer,CustomerNo,Amount);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Customer);
      GenJournalLine.VALIDATE("Party Code",CustomerNo);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@1500442(VAR SalesHeader@1500921 : Record 36;VAR SalesLine@1500931 : Record 37;DocumentType@1500951 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';CustomerNo@1500961 : Code[20];LineType@1500971 : Option;Amount@1500981 : Decimal);
    VAR
      GenBusinessPostingGroup@1500000 : Record 250;
      GenProductPostingGroup@1500001 : Record 251;
      GeneralPostingSetup@1500002 : Record 252;
    BEGIN
      LibraryERM.CreateGenBusPostingGroup(GenBusinessPostingGroup);
      LibraryERM.CreateGenProdPostingGroup(GenProductPostingGroup);
      LibraryERM.CreateGeneralPostingSetup(GeneralPostingSetup,GenBusinessPostingGroup.Code,GenProductPostingGroup.Code);
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      SalesHeader.VALIDATE("Gen. Bus. Posting Group",GenBusinessPostingGroup.Code);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,LineType,LibraryERM.CreateGLAccountNo,LibraryRandom.RandDec(1,2));
      SalesLine.VALIDATE("Unit Price",Amount);
      SalesLine.VALIDATE("Gen. Prod. Posting Group",GenProductPostingGroup.Code);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendor@1500035() : Code[20];
    VAR
      Vendor@1500036 : Record 23;
      GeneralPostingSetup@1500037 : Record 252;
      GenBusinessPostingGroup@1500000 : Record 250;
      GenProductPostingGroup@1500001 : Record 251;
    BEGIN
      LibraryERM.CreateGenBusPostingGroup(GenBusinessPostingGroup);
      LibraryERM.CreateGenProdPostingGroup(GenProductPostingGroup);
      LibraryERM.CreateGeneralPostingSetup(GeneralPostingSetup,GenBusinessPostingGroup.Code,GenProductPostingGroup.Code);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      Vendor.VALIDATE("P.A.N. No.",LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("P.A.N. No."),DATABASE::Vendor));
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateAndPostGeneralLinesWithNatureOfDeduction@1500024(VAR GenJournalLine@1500002 : Record 81;TdsNatureOfDeduction@1500006 : Record 13726;VendorNo@1500003 : Code[20]);
    VAR
      GenJournalTemplate@1500000 : Record 80;
      GenJournalBatch@1500001 : Record 232;
      Amount@1500004 : Decimal;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      Amount := LibraryRandom.RandDec(10000,0);
      LibraryERM.CreateGeneralJnlLineWithBalAcc(
        GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Vendor,VendorNo,GenJournalLine."Bal. Account Type"::"G/L Account",
        LibraryERM.CreateGLAccountNo,-Amount);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",VendorNo);
      GenJournalLine.VALIDATE("TDS Nature of Deduction",TdsNatureOfDeduction.Code);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreatePaymentJnlWithPayTDS@1500049(VAR GenJournalLine@1500002 : Record 81;TDSGroup@1500003 : Record 13731);
    VAR
      GenJournalTemplate@1500000 : Record 80;
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::Payments);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLineWithBalAcc(
        GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::"G/L Account",TDSGroup."TDS Account",GenJournalLine."Bal. Account Type"::"Bank Account",
        LibraryERM.CreateBankAccountNo,0);
      GenJournalLine.VALIDATE("T.A.N. No.",CompanyInformation."T.A.N. No.");
      GenJournalLine.MODIFY(TRUE);
      LibraryTDS.PayTDS(GenJournalLine);
      COMMIT;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateBankPaymentVoucher@1500012(VAR GenJournalLine@1500010 : Record 81;VendorNo@1500003 : Code[20];TdsNatureOfDeductionCode@1500004 : Code[10];PostingDate@1500000 : Date);
    VAR
      GenJournalBatch@1500002 : Record 232;
      GenJournalTemplate@1500001 : Record 80;
      DateFormula@1500005 : DateFormula;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      CreateBankPaymentVoucherLine(GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,
        VendorNo,TdsNatureOfDeductionCode,DateFormula,PostingDate);
      EVALUATE(DateFormula,'<+3M>');
      CreateBankPaymentVoucherLine(GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,
        VendorNo,TdsNatureOfDeductionCode,DateFormula,PostingDate);
      EVALUATE(DateFormula,'<+6M>');
      CreateBankPaymentVoucherLine(GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,
        VendorNo,TdsNatureOfDeductionCode,DateFormula,PostingDate);
    END;

    LOCAL PROCEDURE CreateTDSDocumentsAndRunForm26QWithDiffAccPeriod@1500063(GenJournalLine@1500001 : Record 81;TDSGroup@1500006 : Record 13731;IncomeTaxAccountingPeriod@1500007 : Record 13724);
    VAR
      GenJnlLinePayment@1500005 : Record 81;
      DateFormula@1500002 : DateFormula;
    BEGIN
      EVALUATE(DateFormula,'<+9M>');
      CreateBankPaymentVoucherWithPayTDS(GenJnlLinePayment,TDSGroup,CALCDATE(DateFormula,IncomeTaxAccountingPeriod."Starting Date"));
      RunAndUpdateChallanRegister(GenJournalLine,GenJnlLinePayment);
      UpdateForm26QandeTDSFieldValues(2,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",ReportFrequency::Q3);
      REPORT.RUN(REPORT::"Form 26Q");
    END;

    LOCAL PROCEDURE CreateTDSDocumentsAndRunForm26Q@1500064(GenJournalLine@1500003 : Record 81;TDSGroup@1500002 : Record 13731;IncomeTaxAccountingPeriod@1500001 : Record 13724);
    VAR
      GenJournalLine2@1500004 : Record 81;
    BEGIN
      CreateBankPaymentVoucherWithPayTDS(GenJournalLine2,TDSGroup,IncomeTaxAccountingPeriod."Starting Date");
      RunAndUpdateChallanRegister(GenJournalLine,GenJournalLine2);
      UpdateForm26QandeTDSFieldValues(2,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",ReportFrequency::Q1);
      REPORT.RUN(REPORT::"Form 26Q");
    END;

    LOCAL PROCEDURE RunAndUpdateChallanRegister@1500026(GenJournalLine@1500004 : Record 81;GenJnlLinePayment@1500003 : Record 81);
    VAR
      ChallanRegister@1500000 : Record 16504;
      ChallanNo@1500001 : Code[10];
    BEGIN
      ChallanRegister.DELETEALL;
      ChallanNo := LibraryTDS.UpdateChallanDetails(GenJournalLine."Document No.",GenJnlLinePayment."Document No.",WORKDATE);
      LibraryTDS.RunUpdateChallanRegister(ChallanNo,LibraryRandom.RandDec(200,1));
      LibraryTDS.Form26QForm27QReportFieldsValidation;
    END;

    LOCAL PROCEDURE CreateBankPaymentVoucherWithParty@1500015(VAR GenJournalLine@1500010 : Record 81;PartyNo@1500003 : Code[20];TDSNatureOfDeductionCode@1500004 : Code[10];PostingDate@1500000 : Date);
    VAR
      GenJournalBatch@1500002 : Record 232;
      GenJournalTemplate@1500001 : Record 80;
      GLAccount@1500005 : Record 15;
      DateFormula@1500006 : DateFormula;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      CreateBankPaymentVoucherLineWithParty(GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,
        PartyNo,TDSNatureOfDeductionCode,DateFormula,PostingDate,GLAccount."No.");
      EVALUATE(DateFormula,'<+3M>');
      CreateBankPaymentVoucherLineWithParty(GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,
        PartyNo,TDSNatureOfDeductionCode,DateFormula,PostingDate,GLAccount."No.");
      EVALUATE(DateFormula,'<+6M>');
      CreateBankPaymentVoucherLineWithParty(GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,
        PartyNo,TDSNatureOfDeductionCode,DateFormula,PostingDate,GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateBankPaymentVoucherLineWithParty@1500028(VAR GenJournalLine@1500007 : Record 81;GenJournalTemplateName@1500005 : Code[10];GenJournalBatchName@1500006 : Code[10];PartyNo@1500000 : Code[20];TDSNatureOfDeductionCode@1500001 : Code[10];Quarter@1500003 : DateFormula;PostingDate@1500004 : Date;GLAccNo@1500009 : Code[20]);
    BEGIN
      LibraryERM.CreateGeneralJnlLineWithBalAcc(GenJournalLine,GenJournalTemplateName,
        GenJournalBatchName,GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",GLAccNo,
        GenJournalLine."Bal. Account Type"::"Bank Account",LibraryERM.CreateBankAccountNo,LibraryRandom.RandDec(10000,2));
      UpdateJournalLine(
        GenJournalLine,CALCDATE(Quarter,PostingDate),GenJournalLine."Party Type"::Party,PartyNo,TDSNatureOfDeductionCode);
    END;

    LOCAL PROCEDURE CreateBankPaymentVoucherWithNatureOfDeduction@1500016(VAR GenJournalLine@1500002 : Record 81;PostingDate@1500004 : Date;TDSNatureOfDeduction@1500005 : Code[10];PartyType@1500003 : Option;PartyNo@1500007 : Code[20]);
    VAR
      GenJournalTemplate@1500000 : Record 80;
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      CreateAndUpdateGenJournalTemplate(GenJournalTemplate,GenJournalBatch);
      LibraryERM.CreateGeneralJnlLineWithBalAcc(
        GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type",GenJournalLine."Account No.",GenJournalLine."Bal. Account Type"::"Bank Account",
        LibraryERM.CreateBankAccountNo,LibraryRandom.RandDec(5000,2));
      UpdateJournalLine(GenJournalLine,PostingDate,PartyType,PartyNo,TDSNatureOfDeduction);
    END;

    LOCAL PROCEDURE CreateIncomeTaxAccountingPeriod@1500059(VAR IncomeTaxAccountingPeriod@1500000 : Record 13724;StartingDate@1500001 : Date);
    BEGIN
      LibraryERM.CreateIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      IncomeTaxAccountingPeriod.VALIDATE("Starting Date",StartingDate);
      IncomeTaxAccountingPeriod.VALIDATE("Ending Date",CALCDATE('<1Y>',StartingDate));
      IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS" :=
        FORMAT(DATE2DMY(IncomeTaxAccountingPeriod."Starting Date",3)) +
        FORMAT(IncomeTaxAccountingPeriod."Ending Date",2,'<year,2>');
      IncomeTaxAccountingPeriod.MODIFY(TRUE);
      CreateIncomeTaxPeriodSetup(IncomeTaxAccountingPeriod."No.");
    END;

    LOCAL PROCEDURE CreateIncomeTaxPeriodSetup@1500061(IncomeTaxAccountingPeriodNo@1500000 : Integer);
    VAR
      IncomeTaxPeriodSetup@1500001 : Record 16501;
    BEGIN
      LibraryERM.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriodNo,IncomeTaxPeriodSetup.Quarter::Q1);
      IncomeTaxPeriodSetup."Starting Date" := WORKDATE;
      IncomeTaxPeriodSetup."Ending Date" := LibraryRandom.RandDate(2);
      IncomeTaxPeriodSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBankPaymentVoucherLine@1500017(VAR GenJournalLine@1500007 : Record 81;GenJournalTemplateName@1500005 : Code[10];GenJournalBatchName@1500006 : Code[10];VendorNo@1500000 : Code[20];TDSNatureOfDeductionCode@1500001 : Code[10];Quarter@1500003 : DateFormula;PostingDate@1500004 : Date);
    BEGIN
      LibraryERM.CreateGeneralJnlLineWithBalAcc(GenJournalLine,GenJournalTemplateName,
        GenJournalBatchName,GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Vendor,VendorNo,
        GenJournalLine."Bal. Account Type"::"Bank Account",LibraryERM.CreateBankAccountNo,LibraryRandom.RandInt(10000));
      UpdateJournalLine(
        GenJournalLine,CALCDATE(Quarter,PostingDate),GenJournalLine."Party Type"::Vendor,VendorNo,TDSNatureOfDeductionCode);
    END;

    LOCAL PROCEDURE CreateBankPaymentVoucherWithPayTDS@1500019(VAR GenJournalLine@1500002 : Record 81;TDSGroup@1500003 : Record 13731;Date@1500004 : Date);
    VAR
      GenJournalTemplate@1500000 : Record 80;
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      CreateAndUpdateGenJournalTemplate(GenJournalTemplate,GenJournalBatch);
      LibraryERM.CreateGeneralJnlLineWithBalAcc(
        GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::"G/L Account",TDSGroup."TDS Account",GenJournalLine."Bal. Account Type"::"Bank Account",
        LibraryERM.CreateBankAccountNo,0);
      UpdateJournalLine(GenJournalLine,Date,GenJournalLine."Party Type"::" ",'','');
      LibraryTDS.PayTDS(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CheckAssignTDS@1500005(CustomerNo@1500000 : Code[20]);
    VAR
      CustLedgerEntry@1500001 : Record 21;
    BEGIN
      CustLedgerEntry.RESET;
      CustLedgerEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETFILTER("Document No.",'<>%1','');
      CustLedgerEntry.VALIDATE("TDS Certificate Receivable",FALSE);
      CustLedgerEntry.FINDFIRST;
      CustLedgerEntry.VALIDATE("TDS Certificate Receivable",TRUE);
      CustLedgerEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CheckUpdateTDSCertDetail@1500000(CustLedgerEntry@1500000 : Record 21;CustNo@1500002 : Code[20];CertNo@1500003 : Code[10];CertDate@1500004 : Date;CertAmount@1500005 : Decimal;FinYear@1500006 : Integer;TDSRcvGroup@1500007 : Option);
    VAR
      CustLedgEntry@1500001 : Record 21;
    BEGIN
      IF CustLedgerEntry."TDS Certificate Received" THEN BEGIN
        CustLedgEntry.RESET;
        CustLedgEntry.SETCURRENTKEY("Customer No.","TDS Receivable Group","Certificate No.","TDS Certificate Received");
        CustLedgEntry.SETRANGE("Customer No.",CustNo);
        CustLedgEntry.SETRANGE("Certificate No.",CertNo);
        IF CustLedgEntry.FINDFIRST THEN
          IF (CustLedgEntry."TDS Certificate Rcpt Date" <> CertDate) OR (CustLedgEntry."TDS Certificate Amount" <> CertAmount) OR
             (CustLedgEntry."Financial Year" <> FinYear) OR (CustLedgEntry."TDS Receivable Group" <> TDSRcvGroup)
          THEN
            ERROR(TDSCertErr,CertNo);
        CustLedgEntry.RESET;
        CustLedgEntry.GET(CustLedgerEntry."Entry No.");
        CustLedgEntry."Certificate No." := CertNo;
        CustLedgEntry."TDS Certificate Rcpt Date" := CertDate;
        CustLedgEntry."TDS Certificate Amount" := CertAmount;
        CustLedgEntry."Financial Year" := FinYear;
        CustLedgEntry."TDS Receivable Group" := TDSRcvGroup;
        CustLedgEntry."Certificate Received" := TRUE;
        CustLedgEntry.MODIFY;
      END;
    END;

    LOCAL PROCEDURE EnqueueValuesinGenerateCertNosReqPageHandler@1500422(VendorNo@1500215 : Code[20];TDSGroupCode@1500216 : Option;StartingDate@1500217 : Date);
    VAR
      IncomeTaxPeriodSetup@1500219 : Record 16501;
    BEGIN
      WITH IncomeTaxPeriodSetup DO BEGIN
        SETRANGE("Starting Date",StartingDate);
        FINDFIRST;
        LibraryVariableStorage.Enqueue(VendorNo);
        LibraryVariableStorage.Enqueue(TDSGroupCode);
        LibraryVariableStorage.Enqueue("Starting Date");
        LibraryVariableStorage.Enqueue("Ending Date");
      END;
    END;

    LOCAL PROCEDURE GenerateeTDSUsingPage@1500013(FinancialYearForeTDSTCS@1500000 : Code[6];Resident@1500001 : Boolean);
    VAR
      FileManagement@1500004 : Codeunit 419;
      GenerateeTDS@1500003 : TestPage 16507;
    BEGIN
      LibraryVariableStorage.Enqueue(CompanyInformation."T.A.N. No.");
      LibraryVariableStorage.Enqueue(FinancialYearForeTDSTCS);
      FileName := FileManagement.ServerTempFileName('.txt');
      LibraryVariableStorage.Enqueue(FileName);
      GenerateeTDS.OPENEDIT;
      GenerateeTDS.FormNo.SETVALUE(LibraryTDS.GetFormNo(Resident));
      GenerateeTDS.eTDS.INVOKE;
    END;

    LOCAL PROCEDURE RunGenerateCertificateNos@1500441(NodNocHeaderNo@1500130 : Code[20];TdsNatureDeductionTDSGroup@1500131 : Option);
    BEGIN
      EnqueueValuesinGenerateCertNosReqPageHandler(NodNocHeaderNo,TdsNatureDeductionTDSGroup,WORKDATE);
      COMMIT;
      REPORT.RUN(REPORT::"Generate Certificate Nos.");
    END;

    LOCAL PROCEDURE UpdateTDSCertDetailsAndVerifyTDSCertificateReceivable@1500039(CustNo@1500000 : Code[20];Amount@1500001 : Decimal);
    VAR
      UpdateTDSCertDetails@1500002 : Page 16499;
    BEGIN
      UpdateTDSCertDetails.SetCertificateDetail(LibraryUtility.GenerateGUID,WORKDATE,CustNo,Amount,DATE2DMY(WORKDATE,3),1);
      CheckAssignTDS(CustNo);
      CustLedgerEntry.RESET;
      CustLedgerEntry.SETRANGE("Customer No.",CustNo);
      CustLedgerEntry.SETRANGE("TDS Certificate Receivable",TRUE);
      CustLedgerEntry.SETRANGE("TDS Certificate Received",FALSE);
      CustLedgerEntry.SETRANGE("TDS Receivable Group",CustLedgerEntry."TDS Receivable Group"::" ");
      CustLedgerEntry.SETRANGE("Certificate No.",'');
      CustLedgerEntry.FINDFIRST;
      PAGE.RUNMODAL(PAGE::"Update TDS Cert. Details",CustLedgerEntry);
      CustLedgerEntry.VALIDATE("TDS Certificate Receivable",FALSE);
      CustLedgerEntry.MODIFY(TRUE);
      CheckUpdateTDSCertDetail(CustLedgerEntry,CustNo,'',WORKDATE,0,0,CustLedgerEntry."TDS Receivable Group"::Contractor);
    END;

    [ModalPageHandler]
    PROCEDURE UpdatePageHandler@1500045(VAR UpdateTDSCertDetails@1500000 : TestPage 16499);
    BEGIN
      UpdateTDSCertDetails.FILTER.SETFILTER("Customer No.",CustLedgerEntry."Customer No.");
      UpdateTDSCertDetails.FILTER.SETFILTER("TDS Certificate Receivable",FORMAT(CustLedgerEntry."TDS Certificate Receivable"));
      UpdateTDSCertDetails.FILTER.SETFILTER("TDS Certificate Received",FORMAT(CustLedgerEntry."TDS Certificate Received"));
      UpdateTDSCertDetails.Action1500033.INVOKE;
    END;

    LOCAL PROCEDURE UpdateAccountNumberInTDSGroup@1500075(TDSGroupCode@1500001 : Option;VAR TDSGroup@1500000 : Record 13731);
    BEGIN
      TDSGroup.SETRANGE("TDS Group",TDSGroupCode);
      TDSGroup.FINDFIRST;
      TDSGroup.VALIDATE("TDS Account",LibraryERM.CreateGLAccountNo);
      TDSGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateGenJournalTemplate@1500050(VAR GenJournalTemplate@1500000 : Record 80;VAR GenJournalBatch@1500001 : Record 232);
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::General);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE UpdateJournalLine@1500056(VAR GenJournalLine@1500000 : Record 81;Date@1500004 : Date;PartyType@1500001 : Option;PartyNo@1500002 : Code[20];TDSNatureOfDeduction@1500003 : Code[10]);
    BEGIN
      WITH GenJournalLine DO BEGIN
        VALIDATE("Posting Date",Date);
        VALIDATE("Party Type",PartyType);
        VALIDATE("Party Code",PartyNo);
        VALIDATE("TDS Nature of Deduction",TDSNatureOfDeduction);
        VALIDATE("T.A.N. No.",CompanyInformation."T.A.N. No.");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE VerifyValuesOnForm27QPreview@1500437(ChallanRegister@1500000 : Record 16504;TDSGroup@1500001 : Record 13731);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('Form_26Q_27Q_Entry__TDS_Section_',FORMAT(TDSGroup."TDS Section"));
      LibraryReportDataset.AssertElementWithValueExists(
        'Challan_Register__TDS_Interest_Amount_',ChallanRegister."TDS Interest Amount");
      LibraryReportDataset.AssertElementWithValueExists('Challan_Register__Challan_No__',ChallanRegister."Challan No.");
      LibraryReportDataset.AssertElementWithValueExists('Challan_Register__Challan_Date_',FORMAT(ChallanRegister."Challan Date"));
      LibraryReportDataset.AssertElementWithValueExists('Challan_Register__BSR_Code_',ChallanRegister."BSR Code");
    END;

    LOCAL PROCEDURE VerifyValuesOnForm26QPreview@1500018(Amount@1500001 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('PAN_No',FORMAT(CompanyInformation."P.A.N. No."));
      LibraryReportDataset.AssertElementWithValueExists(
        'Challan_Register__Challan_Register__Quarter','Q1');
      LibraryReportDataset.AssertElementWithValueExists('ABS__TDS_Base_Amount__',Amount);
    END;

    LOCAL PROCEDURE VerifyValuesOnBatchHeader@1500021(FormNo@1500001 : '26Q,27Q';TANNo@1500000 : Code[10]);
    VAR
      BatchHeader@1500002 : Record 16503;
    BEGIN
      BatchHeader.SETRANGE("Form No.",FormNo);
      BatchHeader.FINDLAST;
      Assert.AreEqual(
        TANNo,BatchHeader."Deductor T.A.N. No.",STRSUBSTNO(TANNo,
          BatchHeader."Deductor T.A.N. No.",ValueNotFoundErr));
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@1500054(QuestionText@1500000 : Text[1024];VAR Relpy@1500001 : Boolean);
    BEGIN
      Relpy := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500502(Msg@1560501 : Text);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE GenerateCertificateNosRequestPageHandler@1500461(VAR GenerateCertificateNos@1500118 : TestRequestPage 13720);
    VAR
      Party@1500119 : Variant;
      TDSGroupCode@1500120 : Variant;
      StartingDate@1500121 : Variant;
      EndingDate@1500122 : Variant;
      PartyType@1500123 : ' ,Party,Customer,Vendor';
    BEGIN
      LibraryVariableStorage.Dequeue(Party);
      LibraryVariableStorage.Dequeue(TDSGroupCode);
      LibraryVariableStorage.Dequeue(StartingDate);
      LibraryVariableStorage.Dequeue(EndingDate);
      GenerateCertificateNos.PartyType.SETVALUE(PartyType::Vendor);
      GenerateCertificateNos.Party.SETVALUE(Party);
      GenerateCertificateNos.TDSGroup.SETVALUE(TDSGroupCode);
      GenerateCertificateNos.StartingDate.SETVALUE(StartingDate);
      GenerateCertificateNos.EndingDate.SETVALUE(EndingDate);
      GenerateCertificateNos.ReceiptNumber.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(8,0));
      GenerateCertificateNos.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE Form27QRequestPageHandler@1500489(VAR Form27Q@1500109 : TestRequestPage 16511);
    BEGIN
      Form27Q.TANLocation.SETVALUE(TANNo);
      Form27Q.ReportFrequency.SETVALUE(ReportFrequency);
      Form27Q.FinancialYear.SETVALUE(FinancialYear);
      Form27Q.FullName.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      Form27Q.Designation.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      Form27Q.PrintingDate.SETVALUE(WORKDATE);
      Form27Q.MobileNo.SETVALUE(LibraryRandom.RandIntInRange(1000000000,999999999));
      Form27Q."PAN No.".SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      Form27Q.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE Form26QRequestPageHandler@1500037(VAR Form26Q@1500000 : TestRequestPage 16505);
    BEGIN
      Form26Q.TANLocation.SETVALUE(TANNo);
      Form26Q.ReportFrequency.SETVALUE(ReportFrequency);
      Form26Q.FinancialYear.SETVALUE(FinancialYear);
      Form26Q.FullName.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      Form26Q.Designation.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      Form26Q.PrintingDate.SETVALUE(WORKDATE);
      Form26Q.MobileNo.SETVALUE(LibraryRandom.RandIntInRange(1000000000,999999999));
      Form26Q."PAN No.".SETVALUE(CompanyInformation."P.A.N. No.");
      Form26Q.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE GenerateeTDSRequestPageHandler@1500036(VAR GenerateeTDS@1500000 : TestRequestPage 16508);
    BEGIN
      GenerateeTDS.FileName.SETVALUE(FileName);
      GenerateeTDS.TANLocation.SETVALUE(TANNo);
      GenerateeTDS.ReportFrequency.SETVALUE(ReportFrequency);
      GenerateeTDS.FinancialYear.SETVALUE(FinancialYear);
      GenerateeTDS.FullName.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      GenerateeTDS.Designation.SETVALUE(LibraryUtility.GenerateRandomAlphabeticText(10,0));
      GenerateeTDS.PrintingDate.SETVALUE(WORKDATE);
      GenerateeTDS.NameOfReturnPreparationUtility.SETVALUE(TANNo);
      GenerateeTDS."PAN No.".SETVALUE(CompanyInformation."P.A.N. No.");
      GenerateeTDS.Email.SETVALUE(TANNo);
      GenerateeTDS.MobileNo.SETVALUE(LibraryRandom.RandIntInRange(1000000000,999999999));
      GenerateeTDS.OK.INVOKE;
    END;

    LOCAL PROCEDURE UpdateForm26QandeTDSFieldValues@1500038(FieldNumber@1500000 : Integer;FinancialYearValue@1500001 : Code[6];Quarter@1500003 : ' ,Q1,Q2,Q3,Q4');
    BEGIN
      CompanyInformation.GET;
      FinancialYear := FinancialYearValue;
      ReportFrequency := Quarter;
      CASE FieldNumber OF
        1:
          TANNo := LibraryTDS.CreateTANNo;
        2:
          TANNo := CompanyInformation."T.A.N. No.";
      END;
    END;

    BEGIN
    END.
  }
}

