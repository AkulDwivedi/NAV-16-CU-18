OBJECT Codeunit 134384 ERM Document Posting Error
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryRandom@1002 : Codeunit 130440;
      LibraryERM@1009 : Codeunit 131300;
      LibraryInventory@1010 : Codeunit 132201;
      LibraryPurchase@1007 : Codeunit 130512;
      LibrarySales@1004 : Codeunit 130509;
      IsInitialized@1000 : Boolean;
      SalesOrderPostingErr@1005 : TextConst 'ENU="Amount must be positive in Gen. Journal Line Journal Template Name='''',Journal Batch Name='''',Line No.=''0''."';
      PurchaseInvoicePostingErr@1008 : TextConst 'ENU="Amount must be negative in Gen. Journal Line Journal Template Name='''',Journal Batch Name='''',Line No.=''0''."';
      StatusErr@1001 : TextConst '@@@=.;ENU="Status must be equal to ''Open''  in %1: Document Type=%2, No.=%3. Current value is ''Released''."';

    [Test]
    PROCEDURE SalesOrderWithNegativeValue@1();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Test Sales Order Posting Error for Negative value and Status field.

      // Setup: Create Sales Order with Negative value.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesHeader."Document Type"::Order);

      // Exercise: Post Sales Order.
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Posting Error and Status field.
      Assert.ExpectedError(SalesOrderPostingErr);
      SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
    END;

    [Test]
    PROCEDURE PurchInvoiceWithNegativeValue@5();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Test Purchase Invoice Posting Error for Negative value and Status field.

      // Setup: Create Purchase Invoice with Negative value.
      Initialize;
      CreatePurchDocument(PurchaseHeader,PurchaseHeader."Document Type"::Invoice);

      // Exercise: Post Purchase Invoice.
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Posting Error and Status field.
      Assert.ExpectedError(PurchaseInvoicePostingErr);
      PurchaseHeader.TESTFIELD(Status,PurchaseHeader.Status::Open);
    END;

    [Test]
    PROCEDURE ChangeSellToCustomerOnOrder@2();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Test Release Sales Order not allow changing Sell-to Customer No. field.

      // Setup: Create Sales Order and use Release function.
      Initialize;
      CreateAndReleaseSalesDocument(SalesHeader,SalesHeader."Document Type"::Order);

      // Exercise: Validate Sell to Customer No.
      ASSERTERROR SalesHeader.VALIDATE("Sell-to Customer No.");

      // Verify: Verify Release Sales Order not allow changing field Sell-to Customer No.
      VerifyReleaseSalesDocument(SalesHeader);
    END;

    [Test]
    PROCEDURE ChangeBillToCustomerOnInvoice@9();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Test Release Sales Invoice not allow changing Bill-to Customer No. field.

      // Setup: Create Sales Invoice and use Release function.
      Initialize;
      CreateAndReleaseSalesDocument(SalesHeader,SalesHeader."Document Type"::Invoice);

      // Exercise: Validate Bill-to Customer No.
      ASSERTERROR SalesHeader.VALIDATE("Bill-to Customer No.");

      // Verify: Verify Release Sales Invoice not allow changing field Bill-to Customer No.
      VerifyReleaseSalesDocument(SalesHeader);
    END;

    [Test]
    PROCEDURE ChangePriceIncludingVATOnOrder@3();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Test Release Sales Order not allow changing Prices Including VAT field.

      // Setup: Create Sales Order and use Release function.
      Initialize;
      CreateAndReleaseSalesDocument(SalesHeader,SalesHeader."Document Type"::Order);

      // Exercise: Change Prices Including VAT.
      ASSERTERROR SalesHeader.VALIDATE("Prices Including VAT",TRUE);

      // Verify: Verify Release Sales Order not allow changing Prices Including VAT.
      VerifyReleaseSalesDocument(SalesHeader);
    END;

    [Test]
    [HandlerFunctions(YesConfirmHandler)]
    PROCEDURE ChangePayToVendorOnOrder@11();
    VAR
      GeneralLedgerSetup@1002 : Record 98;
      PurchaseHeader@1000 : Record 38;
      OldBillToSellToVATCalc@1001 : Option;
      VATBusPostingGroup@1004 : Code[10];
    BEGIN
      // Test VAT Business Posting Group not changing on Purchase Order while Change Pay to Vendor field.

      // Setup: Create Purchase Invoice with Negative value.
      Initialize;
      UpdateGenenralLedgerSetup(OldBillToSellToVATCalc,GeneralLedgerSetup."Bill-to/Sell-to VAT Calc."::"Sell-to/Buy-from No.");
      CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order);
      VATBusPostingGroup := PurchaseHeader."VAT Bus. Posting Group";

      // Exercise: Change Pay to Vendor No. on Purchase Header.
      PurchaseHeader.VALIDATE("Pay-to Vendor No.",LibraryPurchase.CreateVendorNo);
      PurchaseHeader.MODIFY(TRUE);

      // Verify: Verify VAT Bus.Posting Group.
      Assert.AreEqual(VATBusPostingGroup,PurchaseHeader."VAT Bus. Posting Group",'Posting Group must match');

      // Tear Down: Roll back General Ledger Setup.
      UpdateGenenralLedgerSetup(OldBillToSellToVATCalc,OldBillToSellToVATCalc);
    END;

    [Test]
    PROCEDURE ChangeCurrencyOnSalesCrMemo@4();
    VAR
      Currency@1000 : Record 4;
      SalesHeader@1002 : Record 36;
    BEGIN
      // Test Release Sales Credit Memo not allow changing Currency Code field.

      // Setup: Create Sales Credit Memo and use Release function.
      Initialize;
      CreateAndReleaseSalesDocument(SalesHeader,SalesHeader."Document Type"::"Credit Memo");
      LibraryERM.FindCurrency(Currency);

      // Exercise: Validate Currency Code
      ASSERTERROR SalesHeader.VALIDATE("Currency Code",Currency.Code);

      // Verify: Verify Release Sales Credit Memo not allow changing Currency Code field.
      VerifyReleaseSalesDocument(SalesHeader);
    END;

    [Test]
    PROCEDURE ChangeBuyFromVendorOnCrMemo@10();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Test Release Purchase Credit Memo not allow changing Buy-from Vendor No. field.

      // Setup: Create Purchase Credit Memo and use Release function.
      Initialize;
      CreateAndReleasePurchDocument(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo");

      // Exercise: Validate Buy-from Vendor No. on Release Purchase Header.
      ASSERTERROR PurchaseHeader.VALIDATE("Buy-from Vendor No.");

      // Verify: Verify Release Purchase Credit Memo not allow changing "Buy-from Vendor No.".
      VerifyReleasePurchDocument(PurchaseHeader);
    END;

    [Test]
    PROCEDURE ChangePayToVendorOnReleaseDoc@12();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Test Release Purchase Order not allow changing Pay-to Vendor No. field.

      // Setup: Create Purchase Order and use Release function.
      Initialize;
      CreateAndReleasePurchDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order);

      // Exercise: Validate Pay to Vendor No. on Purchase Header.
      ASSERTERROR PurchaseHeader.VALIDATE("Pay-to Vendor No.");

      // Verify: Verify Release Purchase Order not allow changing "Pay-to Vendor No.".
      VerifyReleasePurchDocument(PurchaseHeader);
    END;

    [Test]
    PROCEDURE PriceIncludingVATOnPurchOrder@13();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Test Release Purchase Order not allow changing Prices Including VAT field.

      // Setup: Create Purchase Order and use Release function.
      Initialize;
      CreateAndReleasePurchDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order);

      // Exercise: Validate Prices Including VAT on Purchase Header.
      ASSERTERROR PurchaseHeader.VALIDATE("Prices Including VAT",TRUE);

      // Verify: Verify Release Purchase Order not allow changing Prices Including VAT.
      VerifyReleasePurchDocument(PurchaseHeader);
    END;

    [Test]
    PROCEDURE ChangeCurrencyOnPurchInvoice@22();
    VAR
      Currency@1001 : Record 4;
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Test Release Purchase Invoice not allow changing Currency Code field.

      // Setup: Create Purchase Invoice and use Release function.
      Initialize;
      CreateAndReleasePurchDocument(PurchaseHeader,PurchaseHeader."Document Type"::Invoice);
      LibraryERM.FindCurrency(Currency);

      // Exercise: Validate Currency on Purchase Header.
      ASSERTERROR PurchaseHeader.VALIDATE("Currency Code",Currency.Code);

      // Verify: Verify Release Purchase Invoice not allow changing Currency Code field.
      VerifyReleasePurchDocument(PurchaseHeader);
    END;

    [Test]
    PROCEDURE DeleteSalesLineWithNonZeroQty@32();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Verify not possible to delete Released Sales Item Line.

      // Setup: Create and Release Sale Order.
      Initialize;
      CreateAndReleaseSalesDocument(SalesHeader,SalesHeader."Document Type"::Order);
      FindSalesLine(SalesLine,SalesHeader."No.",SalesLine.Type::Item);

      // Exercise: Delete Released Sales Line.
      ASSERTERROR SalesLine.DELETE(TRUE);

      // Verify: Status Error Message.
      VerifyReleaseSalesDocument(SalesHeader);
    END;

    [Test]
    PROCEDURE DeleteSalesLineWithZeroQty@31();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      SalesLine2@1003 : Record 37;
    BEGIN
      // Verify not possible to delete Released Sales Item Line with zero Quantity.

      // Setup: Create Sale Order with multiple Lines and Release Sales Order.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesHeader."Document Type"::Order);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,0);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      FindSalesLine(SalesLine,SalesHeader."No.",SalesLine.Type::Item);

      // Exercise: Delete Zero Quantity Sales Line.
      SalesLine2.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      ASSERTERROR SalesLine2.DELETE(TRUE);

      // Verify: Verify not possible to Delete Released Sales Line.
      VerifyReleaseSalesDocument(SalesHeader);
    END;

    [Test]
    PROCEDURE SalesLineGLAccWithNonZeroQty@30();
    VAR
      Customer@1004 : Record 18;
      GLAccount@1003 : Record 15;
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Verify possible to delete Released Sales G/L Account Line.

      // Setup: Create Sale Order for Type G/L Account and Release Sales Order.
      Initialize;
      LibraryERM.FindGLAccount(GLAccount);
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",GLAccount."No.",LibraryRandom.RandInt(10));
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");

      // Exercise: Delete Released Sales Line.
      SalesLine.DELETE(TRUE);

      // Verify: Verify Sales Line Deleted.
      Assert.IsFalse(
        SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No."),'Sales Line must not Exist.')
    END;

    [Test]
    PROCEDURE AddNewSalesLineInReleaseOrder@29();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Verify not possible to add new Item Line in Released Sales Order with Quantity value zero.

      // Setup: Create and Release Sales Order for Item.
      Initialize;
      CreateAndReleaseSalesDocument(SalesHeader,SalesHeader."Document Type"::Order);

      // Exercise: Add New Item Line in Released Sales Line with Quantity zero.
      ASSERTERROR LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,0);

      // Verify: Verify Error message for not possible to add New Item Line in Released Order.
      VerifyReleaseSalesDocument(SalesHeader);
    END;

    [Test]
    PROCEDURE AddChargeItemInReleaseSalesDoc@28();
    VAR
      ItemCharge@1003 : Record 5800;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Verify possible to add new Charge Item Line in Released Sales Order.

      // Setup: Create and Release Sales Order.
      Initialize;
      LibraryInventory.CreateItemCharge(ItemCharge);
      CreateAndReleaseSalesDocument(SalesHeader,SalesHeader."Document Type"::Order);
      LibrarySales.ReopenSalesDocument(SalesHeader);

      // Exercise: Add New Charge Item Line in Sales Line with Random Quantity.
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"Charge (Item)",ItemCharge."No.",LibraryRandom.RandInt(10));

      // Verify: Verify New Charge Item Line added in Order.
      FindSalesLine(SalesLine,SalesHeader."No.",SalesLine.Type::"Charge (Item)");
    END;

    [Test]
    PROCEDURE DeletePurchLineWithNonZeroQty@27();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Verify not possible to delete Released Purchase Line.

      // Setup: Create and Release Purchase Order.
      Initialize;
      CreateAndReleasePurchDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order);
      FindPurchaseLine(PurchaseLine,PurchaseHeader."No.",PurchaseLine.Type::Item);

      // Exercise: Delete Released Sales Line.
      ASSERTERROR PurchaseLine.DELETE(TRUE);

      // Verify: Verify Error message for not possible to Delete Released Purchase Line.
      VerifyReleasePurchDocument(PurchaseHeader);
    END;

    [Test]
    PROCEDURE DeletePurchLineWithZeroQty@26();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchaseLine2@1003 : Record 39;
    BEGIN
      // Verify not possible to delete Released Purchase Line.

      // Setup: Create Purchase Order for multiple lines and  Release Purchase Order.
      Initialize;
      CreatePurchDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItemNo,0);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      FindPurchaseLine(PurchaseLine2,PurchaseHeader."No.",PurchaseLine.Type::Item);

      // Exercise: Delete Released Purchase Line for zero Quantity.
      ASSERTERROR PurchaseLine2.DELETE(TRUE);

      // Verify: Verify Error message for not possible to Delete Released Purchase Line for zero Quantity.
      VerifyReleasePurchDocument(PurchaseHeader);
    END;

    [Test]
    PROCEDURE PurchLineGLAccWithNonZeroQty@25();
    VAR
      GLAccount@1005 : Record 15;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchaseLine2@1003 : Record 39;
    BEGIN
      // Verify possible to delete Released Purchase Order for Line Type G/L Account.

      // Setup: Create Purchase Order for G/L Account lines. Using Random value for Quantity and Release Purchase Order.
      Initialize;
      LibraryERM.FindGLAccount(GLAccount);
      CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",GLAccount."No.",LibraryRandom.RandInt(10));
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      PurchaseLine2.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);

      // Exercise: Delete Purchase Line.
      PurchaseLine2.DELETE(TRUE);

      // Verify: Verify Purchase Line Deleted.
      Assert.IsFalse(
        PurchaseLine2.GET(
          PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No."),'Purchase Line must not Exist.')
    END;

    [Test]
    PROCEDURE AddNewPurchLineInReleaseOrder@21();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Verify not possible to add new Item Line in Released Purchase Order.

      // Setup: Create and Release Purchase Order.
      Initialize;
      CreateAndReleasePurchDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order);

      // Exercise: Add new Item Line with Random Quantity in Released Purchase Line.
      ASSERTERROR LibraryPurchase.CreatePurchaseLine(
          PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10));

      // Verify: Verify not possible to add new Item Purchase Line in Released Order.
      VerifyReleasePurchDocument(PurchaseHeader);
    END;

    [Test]
    PROCEDURE AddGLAccLineInReleasePurchDoc@19();
    VAR
      GLAccount@1005 : Record 15;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Verify possible to add new G/L Account Line in Released Purchase Order.
      // Setup: Create and Release Purchase Order.
      Initialize;
      LibraryERM.FindGLAccount(GLAccount);
      CreateAndReleasePurchDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order);
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);

      // Exercise: Add new Line Type G/L Account with Random Quantity in Released Purchase Line.
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",GLAccount."No.",LibraryRandom.RandInt(10));

      // Verify: Verify G/L Account Type Line added in Released Order.
      FindPurchaseLine(PurchaseLine,PurchaseHeader."No.",PurchaseLine.Type::"G/L Account");
    END;

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateSalesDocument@16(VAR SalesHeader@1002 : Record 36;DocumentType@1003 : Option);
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      // Unit Price updating with Negative Random value and Quantity with Random Value.
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,'',LibraryRandom.RandInt(10));
      SalesLine.VALIDATE("Unit Price",-LibraryRandom.RandDec(50,2));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesDocument@23(VAR SalesHeader@1000 : Record 36;DocumentType@1001 : Option);
    BEGIN
      CreateSalesDocument(SalesHeader,DocumentType);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreatePurchDocument@6(VAR PurchaseHeader@1002 : Record 38;DocumentType@1004 : Option);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Direct Unit Cost updating with Negative Random value and Quantity with Random Value.
      CreatePurchHeader(PurchaseHeader,DocumentType);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Direct Unit Cost",-LibraryRandom.RandDec(50,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchHeader@20(VAR PurchaseHeader@1001 : Record 38;DocumentType@1000 : Option);
    VAR
      Vendor@1002 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,Vendor."No.");
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchDocument@24(VAR PurchaseHeader@1000 : Record 38;DocumentType@1001 : Option);
    BEGIN
      CreatePurchDocument(PurchaseHeader,DocumentType);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE FindPurchaseLine@34(VAR PurchaseLine@1000 : Record 39;DocumentNo@1001 : Code[20];Type@1002 : Option);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.SETRANGE(Type,Type);
      PurchaseLine.FINDLAST;
    END;

    LOCAL PROCEDURE FindSalesLine@33(VAR SalesLine@1000 : Record 37;DocumentNo@1002 : Code[20];Type@1001 : Option);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.SETRANGE(Type,Type);
      SalesLine.FINDLAST;
    END;

    LOCAL PROCEDURE UpdateGenenralLedgerSetup@7(VAR OldBillToSellToVATCalc@1002 : Option;BillToSellToVATCalc@1001 : Option);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      OldBillToSellToVATCalc := GeneralLedgerSetup."Bill-to/Sell-to VAT Calc.";
      GeneralLedgerSetup.VALIDATE("Bill-to/Sell-to VAT Calc.",BillToSellToVATCalc);
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyReleaseSalesDocument@14(SalesHeader@1000 : Record 36);
    BEGIN
      Assert.ExpectedError(
        STRSUBSTNO(StatusErr,SalesHeader.TABLECAPTION,SalesHeader."Document Type",SalesHeader."No."));
    END;

    LOCAL PROCEDURE VerifyReleasePurchDocument@17(PurchaseHeader@1000 : Record 38);
    BEGIN
      Assert.ExpectedError(
        STRSUBSTNO(StatusErr,PurchaseHeader.TABLECAPTION,PurchaseHeader."Document Type",PurchaseHeader."No."));
    END;

    [ConfirmHandler]
    PROCEDURE YesConfirmHandler@15(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Order] [Status]
      Unsupported version tags:
      NA: Unable to Execute
      ES: Unable to Execute
      DE: Unable to Execute

      Test to verify Posting Error and Release Documents Error for Sales and Purchase and Test Delete and Add possible or not in
      Sales and Purchase documents with different conditions.
        1. Check Sales Order Posting Error with Negative Unit Price and Verify Status.
        2. Check Purchase Invoice Posting Error with Negative Direct Unit Cost and Verify Status.
        3. Test Release Sales Order not allow changing Sell-to Customer No. field.
        4. Test Release Sales Invoice not allow changing Bill-to Customer No. field.
        5. Test Release Sales Order not allow changing Price Including VAT field.
        6. Test VAT Posting Group on Purchase Order while Change Pay to Vendor field.
        7. Test Release Sales Credit Memo not allow changing Currency Code field.
        8. Test Release Purchase Credit Memo not allow changing Buy-from Vendor No. field.
        9. Test Release Purchase Order not allow changing Pay-to Vendor No. field.
       10. Test Release Purchase Order not allow changing Price Including VAT field.
       11. Test Release Purchase Invoice not allow changing Currency Code field.
       12. Check Not possible to delete Released Sales Item Line.
       13. Check Not possible to delete Released Sales Item Line with zero Quantity.
       14. Check possible to delete Released Sales G/L Account Line with Quantity not zero.
       15. Check Not possible to add Type Item on Released Sales Order.
       16. Check possible to add Type Charge Item on Released Sales Order.
       17. Check Not possible to delete Released Purchase Item Line.
       18. Check Not possible to delete Released Purchase Item Line with zero Quantity.
       19. Check possible to delete Released Purchase G/L Account Line.
       20. Check Not possible to add Type Item on Released Purchase Order.
       21. Check possible to add Type Account Lines on Released Purchase Order.

      Covers Test Cases: 206879 and  206888
      ------------------------------------------------------
          Test Function Name                      TFS ID
      ------------------------------------------------------
          SalesOrderWithNegativeValue            127137
          PurchInvoiceWithNegativeValue          127138
          ChangeSellToCustomerOnOrder            126991
          ChangeBillToCustomerOnInvoice          126992
          ChangePriceIncludingVATOnOrder         126993
          ChangePayToVendorOnOrder               126994
          ChangeCurrencyOnSalesCrMemo            126995
          ChangeBuyFromVendorOnCrMemo            126996
          ChangePayToVendorOnReleaseDoc          126997
          PriceIncludingVATOnPurchOrder          126998
          ChangeCurrencyOnPurchInvoice           126999

      Covers Test Cases for WI - 206889
      ------------------------------------------------------
          Test Function Name                      TFS ID
      ------------------------------------------------------
          DeleteSalesLineWithNonZeroQty          127001
          DeleteSalesLineWithZeroQty             127002
          SalesLineGLAccWithNonZeroQty           126846
          AddNewSalesLineInReleaseOrder          126848
          AddChargeItemInReleaseSalesDoc         126849
          DeletePurchLineWithNonZeroQty          126845
          DeletePurchLineWithZeroQty             126844
          PurchLineGLAccWithNonZeroQty           126847
          AddNewPurchLineInReleaseOrder          126850
          AddGLAccLineInReleasePurchDoc          126851
    }
    END.
  }
}

