OBJECT Codeunit 134900 ERM Batch Job
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryPurchase@1005 : Codeunit 130512;
      LibrarySales@1002 : Codeunit 130509;
      LibraryInventory@1004 : Codeunit 132201;
      LibraryWarehouse@1013 : Codeunit 132204;
      LibraryPlanning@1026 : Codeunit 132203;
      LibraryERM@1008 : Codeunit 131300;
      LibraryUtility@1012 : Codeunit 131000;
      LibraryFiscalYear@1014 : Codeunit 131302;
      LibraryVariableStorage@1022 : Codeunit 131004;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryERMCountryData@1025 : Codeunit 131305;
      LibraryAssembly@1033 : Codeunit 132207;
      LibrarySetupStorage@1036 : Codeunit 131009;
      isInitialized@1000 : Boolean;
      AmountErr@1009 : TextConst '@@@="%1=Value";ENU=Amount must be %1.';
      StatusErr@1011 : TextConst '@@@="%1 = TableCaption, %2 = FIELDCaption,%3 =   FIELDValue,%4 = FieldCaption ,%5 =  FIELDValue";ENU="Status must be equal to ''Open''  in %1: %2=%3, %4=%5. Current value is ''Released''."';
      OrderMsg@1023 : TextConst '@@@="%1 = No. Of Posted Orders,%2 =  No. Of Orders";ENU=%1 orders out of a total of %2 have now been posted.';
      SalesHeaderErr@1024 : TextConst 'ENU=You cannot delete the order line because it is associated with purchase order';
      ShipToNameErr@1028 : TextConst '@@@="%1=Field;%2=Value;%3=Value;";ENU=The %1 field on the purchase order %2 must be the same as on sales order %3.';
      DropShipWithShipToAddress2Err@1029 : TextConst 'ENU=Sales Order of Drop Shipment with different Ship-To-Address 2 should be carried to seperate orders.';
      SpecOrderWithShipToAddress2Err@1032 : TextConst 'ENU=Sales Order of Special order with different Ship-To-Address 2 should be carried to the same orders, because its shipment is grouped by Location Code.';
      SpecOrderWithSameLocationCodeErr@1030 : TextConst 'ENU=Sales Order of Special order with the same Location Code should be carried to the same orders.';
      SpecOrderWithDifferentLocationCodeErr@1031 : TextConst 'ENU=Sales Order of Special order with different Location Code should be carried to seperate orders.';
      ILEAmounValueErr@1035 : TextConst '@@@="%1=Value";ENU=Wrong value "Item Ledger Entry" field %1.';
      SelectionRef@1007 : 'All fields,Selected fields';
      UnpaidPrepaymentErr@1018 : TextConst 'ENU=There are unpaid prepayment invoices related to the document';
      NoOfPicksCreatedMsg@1019 : TextConst 'ENU=Number of Invt. Pick activities created';
      YouCannotChangeErr@1016 : TextConst 'ENU=You cannot change Buy-from Vendor No. because the order is associated with one or more sales orders.';

    [Test]
    PROCEDURE DeleteInvdBlanketSalesOrder@1();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // [FEATURE] [Delete Documents] [Blanket Order] [Sales]
      // Test Batch Report Delete Invalid Blanket Sales Orders.

      // Setup: Create Blanket Sales Order, Make Sales Order from Blanket Order and Post as Ship and Invoice.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Blanket Order");
      LibrarySales.BlanketSalesOrderMakeOrder(SalesHeader);
      SalesLine.SETRANGE("Blanket Order No.",SalesLine."Document No.");
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.FINDFIRST;
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Exercise: Delete Invalid Sales Blanket Order.
      DeleteSalesBlanketOrder(SalesHeader,SalesLine."Blanket Order No.");

      // Verify: Verify Invalid Sales Blanket Order deleted.
      Assert.RecordIsEmpty(SalesHeader);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandler)]
    PROCEDURE DeleteInvoicedSalesOrder@6();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      SalesInvoiceSubform@1003 : Page 47;
      DocumentNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Delete Documents] [Order] [Sales]
      // Test whether the "Delete Invoiced Sales Orders" batch job delete Sales Order which is shipped and Invoiced.

      // Setup: Create Sales Order, Post Sales Order as Invoice.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      DocumentNo := SalesHeader."No.";
      LibraryVariableStorage.Enqueue(DocumentNo);

      // Create Invoice for Posted Shipment Line.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,SalesHeader."Bill-to Customer No.");
      SalesLine.VALIDATE("Document Type",SalesLine."Document Type"::Invoice);
      SalesLine.VALIDATE("Document No.",SalesHeader."No.");
      SalesLine.VALIDATE("Sell-to Customer No.",SalesHeader."Bill-to Customer No.");
      SalesInvoiceSubform.SETTABLEVIEW(SalesLine);
      SalesInvoiceSubform.SETRECORD(SalesLine);
      SalesInvoiceSubform.GetShipment;
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Exercise: Run Delete Invoiced Sales Order Batch report for above Order, that is already Ship and Invoice.
      DeleteInvoiceSalesOrder(SalesHeader,DocumentNo);

      // Verify: Verify Invoiced Sales Order deleted.
      Assert.RecordIsEmpty(SalesHeader);
    END;

    [Test]
    PROCEDURE DeleteInvdBlanketPurchaseOrder@3();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // [FEATURE] [Delete Documents] [Blanket Order] [Purchase]
      // Test Batch Report Delete Invalid Blanket Purchase Orders.

      // Setup: Create Blanket Purchase Order, Make Purchase Order from Blanket Order and Post as Receive and Invoice.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Blanket Order",CreateVendor);
      LibraryPurchase.BlanketPurchaseOrderMakeOrder(PurchaseHeader);
      ModifyPurchaseHeader(PurchaseHeader,PurchaseLine,PurchaseHeader."No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise: Delete Invalid Purchase Blanket Order.
      DeleteBlanketPurchaseOrder(PurchaseHeader,PurchaseHeader."Document Type",PurchaseLine."Blanket Order No.");

      // Verify: Verify Invalid Purchase Blanket Order deleted.
      Assert.RecordIsEmpty(PurchaseHeader);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE DeleteArchivedPurchaseOrder@5();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchaseHeaderArchive@1003 : Record 5109;
      DocumentNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Delete Documents] [Order] [Archive] [Purchase]
      // Test Batch Report for Delete Purchase Order Version.

      // Setup: Create Blanket Purchase Order, Make Purchase Order from Blanket Order and Post as Receive and Invoice.
      Initialize;
      LibraryPurchase.SetArchiveQuotesAndOrders(TRUE);
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,CreateVendor);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise: Delete Purchase Order Version.
      DeletePurchaseOrderArchive(PurchaseHeader);

      // Verify: Verify Archived Purchase Order Version deleted.
      PurchaseHeaderArchive.INIT;
      PurchaseHeaderArchive.SETRANGE("No.",DocumentNo);
      Assert.RecordIsEmpty(PurchaseHeaderArchive);
    END;

    [Test]
    PROCEDURE CreateInvoiceAndReminder@2();
    VAR
      ReminderLevel@1000 : Record 293;
      GenJournalLine@1001 : Record 81;
      InterestAmount@1002 : Decimal;
      TotalDays@1009 : Integer;
    BEGIN
      // [FEATURE] [Reminder]
      // Run Create Reminders Batch Job and Check Interest Amount after Post Invoice from General Journal Line.

      // Setup: Create Reminder, General Journal Line with Random Amount and Post it. Find Interest Amount.
      Initialize;
      CreateReminderTerms(ReminderLevel);
      CreateAndPostGenJournalLine(
        GenJournalLine,CreateCustomer(ReminderLevel."Reminder Terms Code"),'',LibraryRandom.RandDec(100,2));
      TotalDays :=
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',
          CALCDATE(ReminderLevel."Grace Period",GenJournalLine."Posting Date")) - GenJournalLine."Posting Date";
      InterestAmount := FindInterestAmount(GenJournalLine."Account No.",TotalDays,GenJournalLine.Amount);

      // Exercise: Create Reminder by Create Reminders Batch Job.
      CreateReminder(GenJournalLine,ReminderLevel."Grace Period");

      // Verify: Verify Interest Amount on Created Reminder Line after Run batch job.
      VerifyReminderLine(GenJournalLine."Document No.",InterestAmount);
    END;

    [Test]
    PROCEDURE CreateIssueFinanceChargeMemo@22();
    VAR
      FinanceChargeMemoNo@1001 : Code[20];
      Amount@1003 : Decimal;
    BEGIN
      // [FEATURE] [Finance Charge Memo]
      // Run Issue Finance Charge Memo Batch Job on Created Finance Charge Memo and Check Amount on that.

      // Setup: Create Finance Charge Memo.
      Initialize;
      Amount := CreateFinanceChargeDocument(FinanceChargeMemoNo);

      // Exercise: Issue Created Finance Charge Memo.
      IssueFinanceChargeMemo(FinanceChargeMemoNo);

      // Verify: Verify Amount After issue Finance Charge Memo.
      VerifyIssuedFinanceChargeMemo(FinanceChargeMemoNo,Amount);
    END;

    [Test]
    PROCEDURE CreateFinanceChargeMemo@21();
    VAR
      FinanceChargeMemoLine@1004 : Record 303;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // [FEATURE] [Finance Charge Memo]
      // Run Create Finance Charge Memo Batch Job on Posted General Line and Verify it.

      // Setup: Create Customer and General Journal Line and Post it.
      Initialize;
      CreateAndPostGenJnlDocument(GenJournalLine);

      // Exercise: Run Create Finance Charge Memo batch Job on Posted General Journal Line.
      CreateFinanceCharge(GenJournalLine."Account No.");

      // Verify: Verify Finance Charge Memo Line after Running Batch Job.
      FinanceChargeMemoLine.INIT;
      FinanceChargeMemoLine.SETRANGE("Document No.",GenJournalLine."Document No.");
      Assert.RecordIsNotEmpty(FinanceChargeMemoLine);
    END;

    [Test]
    PROCEDURE SuggestFinanceChargeMemo@37();
    VAR
      FinanceChargeTerms@1006 : Record 5;
      FinanceChargeMemoHeader@1005 : Record 302;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // [FEATURE] [Finance Charge Memo] [Suggest]
      // Run Suggest Finance Charge Memo Line Batch Job on Posted General Line and Verify it.

      // Setup: Create Customer, General Journal Line and Post it and Create Finance Charge Memo Header.
      Initialize;
      CreateAndPostGenJnlDocument(GenJournalLine);
      LibraryERM.CreateFinanceChargeMemoHeader(FinanceChargeMemoHeader,GenJournalLine."Account No.");
      FinanceChargeMemoHeader.VALIDATE("Document Date",FindFinanceChargeTerms(FinanceChargeTerms,GenJournalLine."Account No."));
      FinanceChargeMemoHeader.MODIFY(TRUE);

      // Exercise: Run Suggest Finance Charge Memo batch job on Create Finance Charge Memo Header.
      SuggestFinChargeMemoLine(FinanceChargeMemoHeader."No.");

      // Verify: Verify Finance Charge Memo Line after Running Suggest Finance Charge Memo Line batch job.
      VerifyFinanceChargeMemoLine(GenJournalLine."Document No.",GenJournalLine.Amount);
    END;

    [Test]
    PROCEDURE CopyDocumentOnSalesInvoice@35();
    VAR
      SalesHeader@1000 : Record 36;
      SalesHeader2@1002 : Record 36;
      SalesLine@1001 : Record 37;
      SalesLine2@1003 : Record 37;
      DocumentType@1006 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
    BEGIN
      // [FEATURE] [Copy Document] [Sales]
      // Check Sales Invoice Line when Copy Document has been done from Sales Order.

      // Setup: Set Stock Out Warning False, Create Sales Order and Release it and Create Sales Invoice Header.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibrarySales.CreateSalesHeader(SalesHeader2,SalesHeader2."Document Type"::Invoice,SalesHeader."Sell-to Customer No.");

      // Exercise: Run Copy Sales Document for Created Sales Order on Created Sales Invoice.
      SalesCopyDocument(SalesHeader2,SalesHeader."No.",DocumentType::Order);

      // Verify: Verify Copied Values on Sales Invoice.
      SalesLine2.SETRANGE("Document Type",SalesHeader2."Document Type");
      SalesLine2.SETRANGE("Document No.",SalesHeader2."No.");
      SalesLine2.FINDFIRST;
      SalesLine2.TESTFIELD("No.",SalesLine."No.");
      SalesLine2.TESTFIELD("Unit Price",SalesLine."Unit Price");

      // Tear Down: Delete Created Sales Invoice.
      SalesHeader2.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE CopyDocumentOnPurchInvoice@31();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchaseHeader2@1001 : Record 38;
      PurchaseLine2@1003 : Record 39;
      DocumentType@1004 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
    BEGIN
      // [FEATURE] [Copy Document] [Purchase]
      // Check Purchase Invoice Line when Copy Document has been done from Purchase Order.

      // Setup: Create Purchase Order and Release it and Create Sales Invoice Header.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,CreateVendor);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader2,PurchaseHeader2."Document Type"::Invoice,PurchaseHeader."Buy-from Vendor No.");

      // Exercise: Run Copy Purchase Document for Created Purchase Order.
      PurchaseCopyDocument(PurchaseHeader2,PurchaseHeader."No.",DocumentType::Order);

      // Verify: Verify Copied Values on Purchase Invoice.
      PurchaseLine2.SETRANGE("Document Type",PurchaseHeader2."Document Type");
      PurchaseLine2.SETRANGE("Document No.",PurchaseHeader2."No.");
      PurchaseLine2.FINDFIRST;
      PurchaseLine2.TESTFIELD("No.",PurchaseLine."No.");
      PurchaseLine2.TESTFIELD("Direct Unit Cost",PurchaseLine."Direct Unit Cost");

      // Tear Down: Delete Created Purchase Invoice and Set Default Values for Stock Out Warning.
      PurchaseHeader2.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE CopyDocumentOnSalesOrder@30();
    VAR
      SalesHeader@1000 : Record 36;
      SalesHeader2@1002 : Record 36;
      SalesLine@1001 : Record 37;
      SalesLine2@1003 : Record 37;
      NoSeriesManagement@1007 : Codeunit 396;
      PostedDocumentNo@1005 : Code[20];
      DocumentType@1006 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
    BEGIN
      // [FEATURE] [Copy Document] [Sales]
      // Check Sales Order Copy Document Error On Release.

      // Setup: Set Stock Out Warning False, Create and Post Sales Invoice, Create Sales Order and Release it.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Invoice);
      PostedDocumentNo := NoSeriesManagement.GetNextNo(SalesHeader."Posting No. Series",WORKDATE,FALSE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      CreateSalesDocument(SalesHeader2,SalesLine2,SalesHeader2."Document Type"::Order);
      LibrarySales.ReleaseSalesDocument(SalesHeader2);

      // Exercise: Run Copy Sales Document for Posted Sales Invoice on Sales Order.
      ASSERTERROR SalesCopyDocument(SalesHeader2,PostedDocumentNo,DocumentType::"Posted Invoice");

      // Verify: Verify Copy Document Error on Sales Order When Order is Released.
      Assert.ExpectedError(
        STRSUBSTNO(StatusErr,SalesHeader2.TABLECAPTION,SalesLine2.FIELDCAPTION("Document Type"),SalesLine2."Document Type",
          SalesHeader2.FIELDCAPTION("No."),SalesLine2."Document No."));
    END;

    [Test]
    PROCEDURE CopyDocumentOnPurchOrder@4();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchaseHeader2@1001 : Record 38;
      PurchaseLine2@1003 : Record 39;
      NoSeriesManagement@1006 : Codeunit 396;
      DocumentType@1004 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
      PostedDocumentNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Copy Document] [Purchase]
      // Check Purchase Order Copy Document Error On Release.

      // Setup: Create And Post Purchase Invoice and Create Purchase Order, Release it.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,CreateVendor);
      PostedDocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Posting No. Series",WORKDATE,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreatePurchaseDocument(PurchaseHeader2,PurchaseLine2,PurchaseHeader2."Document Type"::Order,CreateVendor);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader2);

      // Exercise: Run Copy Purchase Document for Posted Purchase Invoice on Purchase Order.
      ASSERTERROR PurchaseCopyDocument(PurchaseHeader2,PostedDocumentNo,DocumentType::"Posted Invoice");

      // Verify: Verify Copy Document Error on Purchase Order When Order is Released.
      Assert.ExpectedError(
        STRSUBSTNO(StatusErr,PurchaseHeader2.TABLECAPTION,PurchaseLine2.FIELDCAPTION("Document Type"),PurchaseLine2."Document Type",
          PurchaseHeader2.FIELDCAPTION("No."),PurchaseLine2."Document No."));
    END;

    [Test]
    PROCEDURE GetSalesOrdersReport@41();
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      // [FEATURE] [Requisition] [Get Sales Orders]
      // Test Requisition Line after running the Get Sales Orders Batch Job.

      // 1. Setup: Create Sales Order with Drop Shipment True on Sales Line.
      Initialize;
      CreateSalesOrderDropShipment(SalesLine);

      // 2. Exercise: Run the Get Sales Orders Batch Job.
      RunGetSalesOrders(SalesLine);

      // 3. Verify: Verify Requisition Line values as Purchase Line values.
      VerifyRequisitionLine(SalesLine);
    END;

    [Test]
    [HandlerFunctions(SourceDocumentsPageHandler)]
    PROCEDURE GetSourceDocumentsReport@74();
    VAR
      PurchaseLine@1002 : Record 39;
      WarehouseReceiptHeader@1004 : Record 7316;
      WarehouseEmployee@1006 : Record 7301;
      GetSourceDocInbound@1005 : Codeunit 5751;
    BEGIN
      // [FEATURE] [Receipt] [Get Source Documents] [Warehouse]
      // Test Warehouse Receipt Line after running the Get Source Documents Batch Job.

      // 1. Setup: Create Location with Require Receive True, Warehouse Employee for the Location, Purchase Order for same Location and
      // Release it.
      Initialize;
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,CreateLocationRequireReceive,TRUE);
      CreateAndReleasePurchaseOrder(PurchaseLine,WarehouseEmployee."Location Code");
      LibraryVariableStorage.Enqueue(PurchaseLine."Document No.");

      // 2. Exercise: Create Warehouse Receipt Header and run Get Source Documents.
      CreateWarehouseReceiptHeader(WarehouseReceiptHeader,WarehouseEmployee."Location Code");
      GetSourceDocInbound.GetSingleInboundDoc(WarehouseReceiptHeader);

      // 3. Verify: Verify Warehouse Receipt Line values as Purchase Line values.
      VerifyWarehouseReceiptLine(PurchaseLine,WarehouseReceiptHeader."No.");

      // 4. Tear Down: Set Default False for Warehouse Employee.
      WarehouseEmployee.VALIDATE(Default,FALSE);
      WarehouseEmployee.MODIFY(TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE BatchPostSalesOrderReplaceDate@45();
    VAR
      Customer@1000 : Record 18;
      Item@1001 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      SalesInvoiceHeader@1006 : Record 112;
      PostingDate@1003 : Date;
    BEGIN
      // [FEATURE] [Batch Post] [Order] [Sales]
      // Create and post a Sales Order using Batch Post Sales Order and check dates on posted Sales Invoice.

      // 1. Setup: Find Item and Create Customer.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);

      // 2. Exercise: Create Sales Order, release and Post Batch Post Sales.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      // Use Random Quantity because value is not important.
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      COMMIT;

      PostingDate :=
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);  // Use Random because value is not important.
      SalesPostBatch(SalesHeader,PostingDate);

      // 3. Verify: Verify Sales Invoice have correct Posting Date and Document Date.
      SalesInvoiceHeader.SETRANGE("Order No.",SalesHeader."No.");
      SalesInvoiceHeader.FINDFIRST;
      SalesInvoiceHeader.TESTFIELD("Posting Date",PostingDate);
      SalesInvoiceHeader.TESTFIELD("Document Date",PostingDate);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE BatchPostPurchOrderReceive@58();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchRcptLine@1004 : Record 121;
      NoSeriesManagement@1003 : Codeunit 396;
      DocumentNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Batch Post] [Order] [Purchase]
      // Check Batch Post Purchase Order Report with Receive TRUE.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,CreateVendor);
      DocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Receiving No. Series",WORKDATE,FALSE);

      // Exercise: Run Batch Post Purchase Order with Receive.
      RunBatchPostPurchaseOrders(PurchaseHeader."No.",TRUE,FALSE,0D,FALSE,FALSE,FALSE);

      // Verify: Verify Purchase Receipt Lines Fields after Run Batch Post Purchase Order Report.
      PurchRcptLine.GET(DocumentNo,PurchaseLine."Line No.");
      PurchRcptLine.TESTFIELD(Quantity,PurchaseLine.Quantity);
      PurchRcptLine.TESTFIELD("No.",PurchaseLine."No.");
      PurchRcptLine.TESTFIELD("Direct Unit Cost",PurchaseLine."Direct Unit Cost");
      PurchRcptLine.TESTFIELD("Buy-from Vendor No.",PurchaseLine."Buy-from Vendor No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE BatchPostPurchOrderInvoice@57();
    BEGIN
      // [FEATURE] [Batch Post] [Purchase]
      // Check Batch Post Purchase Order Report with Blank Posting Date.
      Initialize;
      BatchPostPurchOrderWithDate(0D);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE BatchPostPurchOrderPostDate@56();
    BEGIN
      // [FEATURE] [Batch Post] [Order] [Purchase]
      // Check Batch Post Purchase Order Report with Work Date.
      Initialize;
      BatchPostPurchOrderWithDate(WORKDATE);
    END;

    LOCAL PROCEDURE BatchPostPurchOrderWithDate@55(PostingDate@1006 : Date);
    VAR
      PurchInvLine@1000 : Record 123;
      PurchaseLine@1001 : Record 39;
      DocumentNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Batch Post] [Order] [Purchase]
      // Setup.
      DocumentNo := CreateAndGetPurchaseDocumentNo(PurchaseLine,CreateVendor);

      // Exercise: Run Batch Post Purchase Order with Receive and Invoice.
      RunBatchPostPurchaseOrders(PurchaseLine."Document No.",TRUE,TRUE,PostingDate,FALSE,FALSE,FALSE);

      // Verify: Verify Posted Purchase Invoice Line with Difference Field's Value.
      PurchInvLine.GET(DocumentNo,PurchaseLine."Line No.");
      PurchInvLine.TESTFIELD(Quantity,PurchaseLine.Quantity);
      PurchInvLine.TESTFIELD("No.",PurchaseLine."No.");
      PurchInvLine.TESTFIELD("Direct Unit Cost",PurchaseLine."Direct Unit Cost");
      PurchInvLine.TESTFIELD("Buy-from Vendor No.",PurchaseLine."Buy-from Vendor No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE BatchPostPurchOrderRepPostDate@54();
    VAR
      PurchInvHeader@1000 : Record 122;
      DocumentNo@1002 : Code[20];
      PostingDate@1008 : Date;
    BEGIN
      // [FEATURE] [Batch Post] [Order] [Replace Posting Date] [Purchase]
      // Check Batch Post Purchase Order Report with Replace Posting Date Option.

      // Create Purchase Order and Run Batch Post Purchase Order Report with Replace Posting Date TRUE.
      Initialize;
      DocumentNo := SetupBatchPostPurchaseOrders(PostingDate,TRUE,FALSE);

      // Verify: Verify Posting Date on Posted Purchase Invoice Header.
      PurchInvHeader.GET(DocumentNo);
      PurchInvHeader.TESTFIELD("Posting Date",PostingDate);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE BatchPostPurchOrdeRepDocDate@53();
    VAR
      PurchInvHeader@1000 : Record 122;
      DocumentNo@1002 : Code[20];
      PostingDate@1008 : Date;
    BEGIN
      // [FEATURE] [Batch Post] [Order] [Replace Posting Date] [Purchase]
      // Check Batch Post Purchase Order Report with Replace Document Date Option.

      // Create Purchase Order and Run Batch Post Purchase Order Report with Replace Document Date TRUE.
      Initialize;
      DocumentNo := SetupBatchPostPurchaseOrders(PostingDate,FALSE,TRUE);

      // Verify: Verify Document Date on Posted Purchase Invoice Header.
      PurchInvHeader.GET(DocumentNo);
      PurchInvHeader.TESTFIELD("Document Date",PostingDate);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE BatchPostPurchOrderInvDisc@52();
    VAR
      PurchaseLine@1001 : Record 39;
      PurchInvLine@1003 : Record 123;
      VendorInvoiceDisc@1000 : Record 24;
      DocumentNo@1002 : Code[20];
      InvDiscountAmount@1010 : Decimal;
    BEGIN
      // [FEATURE] [Batch Post] [Order] [Invoice Discount] [Purchase]
      // Check Batch Post Purchase Order Report with Invoice Discount Option.

      // Setup: Create and Post Purchase Order with Invoice Discount Option.
      Initialize;
      SetupInvoiceDiscount(VendorInvoiceDisc);
      DocumentNo := CreateAndGetPurchaseDocumentNo(PurchaseLine,VendorInvoiceDisc.Code);
      InvDiscountAmount := ROUND(PurchaseLine."Line Amount" * VendorInvoiceDisc."Discount %" / 100);

      // Exercise: Run Batch Post Purchase Order with Receive, Invoice and Invoice Discount.
      RunBatchPostPurchaseOrders(PurchaseLine."Document No.",TRUE,TRUE,WORKDATE,FALSE,FALSE,TRUE);

      // Verify: Verify Invoice Discount on Posted Purchase Invoice Line.
      PurchInvLine.GET(DocumentNo,PurchaseLine."Line No.");
      PurchInvLine.TESTFIELD("Inv. Discount Amount",InvDiscountAmount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,DateCompressGenLedgerHandler,DimensionSelectionHandler)]
    PROCEDURE DateCompressGeneralLedgerBatch@61();
    VAR
      GLRegister@1001 : Record 45;
      GLEntry@1002 : Record 17;
      JournalBatchName@1000 : Code[10];
    BEGIN
      // [FEATURE] [Date Compress] [General Ledger]
      // Test and verify Date Compress General Ledger Report functionality.

      // 1. Setup: Create and Post General Journal Lines.
      Initialize;
      JournalBatchName := CreateAndPostGenJournalLines;

      // 2. Exercise: Find G/L Register. Run Date Compress General Ledger Report.
      FindGLRegister(GLRegister,JournalBatchName);
      REPORT.RUN(REPORT::"Date Compress General Ledger");

      // 3. Verify: G/L Entry must be deleted after running the Date Compress General Ledger Report.
      GLEntry.INIT;
      GLEntry.SETRANGE("Entry No.",GLRegister."From Entry No.",GLRegister."To Entry No.");
      Assert.RecordIsEmpty(GLEntry);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,DateCompressGenLedgerHandler,DimensionSelectionHandler)]
    PROCEDURE DeleteEmptyGLRegistersBatch@70();
    VAR
      GLRegister@1001 : Record 45;
      JournalBatchName@1000 : Code[10];
    BEGIN
      // [FEATURE] [G/L Register]
      // Test and verify Delete Empty G/L Registers Report functionality.

      // 1. Setup: Create and Post General Journal Lines. Run Date Compress General Ledger Report.
      Initialize;
      JournalBatchName := CreateAndPostGenJournalLines;
      REPORT.RUN(REPORT::"Date Compress General Ledger");

      // 2. Exercise: Run Delete Empty G/L Registers Report.
      RunDeleteEmptyGLRegisters;

      // 3. Verify: G/L Register must be deleted after running the Delete Empty G/L Registers Report.
      GLRegister.INIT;
      GLRegister.SETRANGE("Journal Batch Name",JournalBatchName);
      Assert.RecordIsEmpty(GLRegister);
    END;

    [Test]
    [HandlerFunctions(CopyGeneralPostingSetupHandlerWithQueue,ConfirmHandlerTrue)]
    PROCEDURE CopyGeneralPostingSetupWithAllFields@66();
    VAR
      GeneralPostingSetupDestination@1000 : Record 252;
      GeneralPostingSetupSource@1001 : Record 252;
    BEGIN
      // [FEATURE] [Copy General Posting Setup]
      // [SCENARIO 362396] Test and verify functionality of Copy General Posting Setup with copy Option as All fields.

      // [GIVEN] Filled General Posting Setup.
      Initialize;
      CreateGeneralPostingSetup(GeneralPostingSetupSource);
      FillGenPostingSetup(GeneralPostingSetupSource);
      // [GIVEN] Empty General Posting Setup.
      CreateGeneralPostingSetup(GeneralPostingSetupDestination);

      // [WHEN] Run Copy General Posting Setup.
      LibraryVariableStorage.Enqueue(GeneralPostingSetupSource."Gen. Bus. Posting Group");
      LibraryVariableStorage.Enqueue(GeneralPostingSetupSource."Gen. Prod. Posting Group");
      RunCopyGeneralPostingSetup(GeneralPostingSetupDestination);

      // [THEN] Following Setup fields are copied: "Sales Pmt. Tol. Debit Acc.","Sales Pmt. Tol. Credit Acc.",
      // "Purch. Pmt. Tol. Debit Acc.","Purch. Pmt. Tol. Credit Acc.","Sales Prepayments Account",
      // "Purch. Prepayments Account"
      WITH GeneralPostingSetupSource DO
        VerifyValuesOnGenPostingSetupAllFields(
          GeneralPostingSetupDestination,"Sales Account","Sales Pmt. Tol. Debit Acc.","Sales Pmt. Tol. Credit Acc.",
          "Purch. Pmt. Tol. Debit Acc.","Purch. Pmt. Tol. Credit Acc.","Sales Prepayments Account",
          "Purch. Prepayments Account");
    END;

    [Test]
    [HandlerFunctions(CopyGeneralPostingSetupHandler,ConfirmHandlerTrue)]
    PROCEDURE CopyGeneralPostingSetupWithSelectedFields@86();
    VAR
      GeneralPostingSetup@1000 : Record 252;
    BEGIN
      // [FEATURE] [Copy General Posting Setup]
      // Test and verify functionality of Copy General Posting Setup with copy Option as Selected fields.

      // 1. Setup: Create General Posting Setup.
      Initialize;
      CreateGeneralPostingSetup(GeneralPostingSetup);

      // 2. Exercise: Run Copy General Posting Setup with global variables for CopyGeneralPostingSetupHandler.
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(FALSE);
      LibraryVariableStorage.Enqueue(FALSE);
      LibraryVariableStorage.Enqueue(FALSE);
      RunCopyGeneralPostingSetup(GeneralPostingSetup);

      // 3. Verify: Verify that the Setup is correctly copied.
      VerifyValuesOnGenPostingSetupSelectedFields(GeneralPostingSetup,'','','');
    END;

    [Test]
    [HandlerFunctions(CopyVATPostingSetupHandlerWithQueue,ConfirmHandlerTrue)]
    PROCEDURE CopyVATPostingSetupWithAllFields@166();
    VAR
      VATPostingSetupDestination@1000 : Record 325;
      VATPostingSetupSource@1001 : Record 325;
    BEGIN
      // [FEATURE] [Copy VAT Posting Setup]
      // [SCENARIO 362396] Test and verify functionality of Copy VAT Posting Setup with copy Option as All fields.

      // [GIVEN] VAT Posting Setup with "VAT Identifier" = 'Z'
      Initialize;
      CreateVATPostingSetup(VATPostingSetupSource);
      CreateVATPostingSetup(VATPostingSetupDestination);
      UpdateVATIdentifierForVATpostingSetup(VATPostingSetupSource);

      // [WHEN] Run Copy VAT Posting Setup
      LibraryVariableStorage.Enqueue(VATPostingSetupSource."VAT Bus. Posting Group");
      LibraryVariableStorage.Enqueue(VATPostingSetupSource."VAT Prod. Posting Group");
      RunCopyVATPostingSetup(VATPostingSetupDestination);

      // [THEN] New VAT Posting Setup contains "VAT Identifier" = 'Z'
      VerifyValuesOnVATPostingSetup(VATPostingSetupDestination,VATPostingSetupSource."VAT Identifier");
    END;

    [Test]
    PROCEDURE ReminderWithAmountRoundingPrecisionOnCurrency@75();
    VAR
      ReminderLevel@1000 : Record 293;
      GenJournalLine@1001 : Record 81;
      Currency@1004 : Record 4;
      IssuedReminderHeader@1006 : Record 297;
    BEGIN
      // [FEATURE] [Reminder]
      // Test to validate Amount Rounding Precision on Currency of Issued Reminder after create Reminder with Currency.

      // Setup: Find and Update Currency, Create and post General Journal Line, Create Reminder.
      Initialize;
      FindAndUpdateCurrency(Currency);
      CreateReminderTerms(ReminderLevel);
      CreateAndPostGenJournalLine(
        GenJournalLine,CreateCustomer(ReminderLevel."Reminder Terms Code"),Currency.Code,LibraryRandom.RandDec(100,2));
      CreateReminder(GenJournalLine,ReminderLevel."Grace Period");

      // Exercise: Issue Reminder.
      IssueReminder(GenJournalLine."Account No.");

      // Verify: Verify Amount Rounding Precision on Currency of Issued Reminder.
      FindIssuedReminder(IssuedReminderHeader,GenJournalLine."Account No.");
      VerifyCurrencyOnIssuedReminder(IssuedReminderHeader."Currency Code",Currency."Amount Rounding Precision");
    END;

    [Test]
    [HandlerFunctions(BatchPostSalesOrderRequestPageHandler,PostBatchMessageHandler)]
    PROCEDURE RunSalesBatchJob@87();
    VAR
      LineGLAccount@1004 : Record 15;
      VATCalculationType@1001 : 'Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax';
      SalesHeaderNo@1000 : Code[20];
      OrderCounter@1003 : Integer;
    BEGIN
      // [FEATURE] [Batch Post] [Order] [Sales]
      // Verify Message Populated after running Batch Sales Order.

      // Setup: Create and Post Sales Orders.
      Initialize;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      SetCheckPrepmtWhenPostingSales(TRUE);
      LibrarySales.CreatePrepaymentVATSetup(LineGLAccount,VATCalculationType::"Normal VAT");
      FOR OrderCounter := 1 TO LibraryRandom.RandIntInRange(2,5) DO
        SalesHeaderNo := CreateAndPostSalesOrderWithPrepayment(LineGLAccount);

      // Exercise: Post Sales Batch.
      RunPostBatchSalesOrder(SalesHeaderNo);

      // Verify: Verification done in Message Handler for Post Batch: Post Batch Message Handler.

      // TearDown.
      RemovePrepmtVATSetup(LineGLAccount);
    END;

    [Test]
    [HandlerFunctions(PostBatchMessageHandler)]
    PROCEDURE RunPurchaseBatchJob@79();
    VAR
      LineGLAccount@1004 : Record 15;
      VATCalculationType@1003 : 'Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax';
      PurchaseHeaderNo@1000 : Code[20];
      OrderCounter@1001 : Integer;
    BEGIN
      // [FEATURE] [Batch Post] [Order] [Purchase]
      // Setup: Create and Post Purchase Orders.
      Initialize;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      SetCheckPrepmtWhenPostingPurchase(TRUE);
      LibraryPurchase.CreatePrepaymentVATSetup(LineGLAccount,VATCalculationType::"Normal VAT");
      FOR OrderCounter := 1 TO LibraryRandom.RandIntInRange(2,5) DO
        PurchaseHeaderNo := CreateAndPostPurchaseOrderWithPrepayment(LineGLAccount);

      // Exercise: Post Purchase Batch.
      RunBatchPostPurchaseOrders(PurchaseHeaderNo,TRUE,TRUE,WORKDATE,FALSE,FALSE,FALSE);

      // Verify: Verification done in Message Handler for Post Batch: Post Batch Message Handler.

      // TearDown.
      RemovePrepmtVATSetup(LineGLAccount);
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler)]
    PROCEDURE PurchaseLineWithSalesPurchasingCode@105();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      PurchaseHeaderNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Special Order] [Purchase]
      // Verify Purchase Line exist with Purchasing Code and Special Order After Get Special Orders.

      // Setup: Create and Update Sales Order with Purchasing Code.
      Initialize;
      CreateAndUpdatePurchasingCodeOnSalesDocument(SalesHeader,SalesLine);

      // Exercise: Create Purchase Order.Update Sell to Customer on Purchase Header and Get Sales Order for Special Order For Sales Order.
      PurchaseHeaderNo := CreatePurchaseOrderAndGetSpecialOrder(SalesHeader."Sell-to Customer No.");

      // Verify: Verify Purchasing Code and Spacial Order on Purchase Line same as Sales line.
      VerifyPurchasingCodeAndSpecialOrderOnPurchaseLine(SalesLine,PurchaseHeaderNo);
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler,GetShipmentLinesPageHandler)]
    PROCEDURE DeleteSalesOrderAfterGetShipmentLines@111();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // [FEATURE] [Sales] [Shipment] [Get Shipment Lines] [Special Order]
      // [SCENARIO 381247] Stan can delete fully shipped Sales Order tied with Special Order when it is fully Invoiced by another document
      // [GIVEN] Sales order "SO" marked as "Special Order" and linked to purchase order "PO"
      // [GIVEN] "PO" partially received and not invoiced
      // [GIVEN] "SO" shipped fully
      // [GIVEN] Sales invoice "SI" created from shipped "SO" using "Get Shipment Lines"
      // [GIVEN] "SI" fully invoiced
      // [WHEN] Delete "SO"
      // [THEN] Error thrown "You cannot delete the order line because it is associated with purchase order"
      Initialize;
      CreateAndUpdatePurchasingCodeOnSalesDocument(SalesHeader,SalesLine);
      CreatePurchaseOrderAndGetSpecialOrder(SalesHeader."Sell-to Customer No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      CreateAndPostSalesInvoiceUsingGetShipmentLines(SalesHeader."Sell-to Customer No.");

      ASSERTERROR SalesHeader.DELETE(TRUE);

      Assert.ExpectedError(SalesHeaderErr);
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler,GetShipmentLinesPageHandler,DeleteInvoicedSalesOrdersHandler)]
    PROCEDURE DeletePurchaseOrderAfterRunningDeleteInvoicedSalesOrders@107();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1003 : Record 37;
      PurchaseHeader@1004 : Record 38;
      PurchaseHeaderNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Get Shipment Lines] [Special Order] [Sales]
      // Check that Purchase Order can be deleted after running Delete Invoiced Sales Orders Report.

      // Setup: Create Purchase Order and Sales Invoice With Get Shipment Lines.
      Initialize;
      CreateAndUpdatePurchasingCodeOnSalesDocument(SalesHeader,SalesLine);
      PurchaseHeaderNo := CreatePurchaseOrderAndGetSpecialOrder(SalesHeader."Sell-to Customer No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      CreateAndPostSalesInvoiceUsingGetShipmentLines(SalesHeader."Sell-to Customer No.");
      RunDeleteInvoicedSalesOrdersReport(SalesHeader."Document Type",SalesHeader."No.");

      // Exercise: Delete Purchase Order after running Delete Invoiced Sales Orders report.
      PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchaseHeaderNo);
      PurchaseHeader.DELETE(TRUE);

      // Verify: Verify Purchase Order deleted.
      ASSERTERROR PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchaseHeaderNo);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,BatchPostSalesReturnOrdersPageHandler)]
    PROCEDURE SalesRetOrdWithBatchPostAsReceive@116();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      ReturnReceiptLine@1002 : Record 6661;
    BEGIN
      // [FEATURE] [Batch Post] [Return Order] [Sales]
      // Verify Posted Sales Return Order using Batch Post as Receive.

      // Setup: Create Sales Return Order.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order");

      // Exercise: Post Sales Return Order with Batch Post as Receive.
      RunBatchPostSalesReturnOrdersReport(SalesHeader."No.",TRUE,FALSE);

      // Verify: Verify Return Receipt Line.
      ReturnReceiptLine.SETRANGE("Return Order No.",SalesHeader."No.");
      ReturnReceiptLine.FINDFIRST;
      ReturnReceiptLine.TESTFIELD("No.",SalesLine."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,BatchPostSalesReturnOrdersPageHandler)]
    PROCEDURE SalesRetOrdWithBatchPostAsReceiveAndInv@115();
    VAR
      SalesCrMemoLine@1002 : Record 115;
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      // [FEATURE] [Batch Post] [Return Order] [Sales]
      // Verify Posted Sales Return Order using Batch Post as Receive and Invoice.

      // Setup: Create Sales Return Order.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order");

      // Exercise: Post Sales Return Order with Batch Post as Receive and Invoice.
      RunBatchPostSalesReturnOrdersReport(SalesHeader."No.",TRUE,TRUE);

      // Verify: Verify Sales Credit Memo Line.
      SalesCrMemoLine.SETRANGE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
      SalesCrMemoLine.FINDFIRST;
      SalesCrMemoLine.TESTFIELD("No.",SalesLine."No.");
    END;

    [Test]
    PROCEDURE ReqWkshGetSalesOrderAndCarryOutActionMsg@124();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      SalesLine1@1002 : Record 37;
      PurchHeader@1003 : Record 38;
      PurchHeader1@1004 : Record 38;
      RequisitionLine@1005 : Record 246;
      RequisitionWkshName@1006 : Record 245;
      ReqWkshTemplate@1007 : Record 244;
      Location@1008 : Record 14;
    BEGIN
      // [FEATURE] [Special Order] [Drop Shipment] [Carry Out] [Purchase]
      // Setup: Create Sales Order with Special Order Line And Drop Shipment Line.
      Initialize;
      CreateSalesOrderWithSpecialOrderAndDropShipment(SalesHeader);
      CreateReqWkshTemplateName(RequisitionWkshName,ReqWkshTemplate);

      // Exercise: Run Carry Out Action Msg. - Req. batch job.
      // Special order and drop shipment lines should be carried to seperate orders.
      SelectSalesLineWithSpecialOrder(SalesLine,SalesHeader);
      GetSpecialOrderOnReqWksht(SalesLine,RequisitionLine,RequisitionWkshName.Name,ReqWkshTemplate.Name);
      SelectSalesLineWithDropShipment(SalesLine1,SalesHeader);
      GetDropShipmentOnReqWksht(SalesLine1,RequisitionLine,RequisitionWkshName.Name,ReqWkshTemplate.Name);
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');

      // Verify: Verify Purchasing Code, Ship-to Name, Ship-to Address on 1st Purchase Order.
      GetPurchHeader(PurchHeader,SalesLine."No.");
      VerifyPurchasingCodeAndSpecialOrderOnPurchaseLine(SalesLine,PurchHeader."No.");
      Location.GET(SalesHeader."Location Code");
      VerifyPurchShippingDetails(PurchHeader,Location.Name,Location.Address);

      // Verify: Verify Purchasing Code, Ship-to Name, Ship-to Address on 2nd Purchase Order.
      GetPurchHeader(PurchHeader1,SalesLine1."No.");
      VerifyPurchasingCodeAndDropShipmentOnPurchLine(SalesLine1,PurchHeader1."No.");
      VerifyPurchShippingDetails(PurchHeader1,SalesHeader."Ship-to Name",SalesHeader."Ship-to Address");
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler)]
    PROCEDURE PurchOrderRunGetSpecialOrder@125();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      PurchHeader@1003 : Record 38;
      Location@1002 : Record 14;
      DistIntegration@1004 : Codeunit 5702;
    BEGIN
      // [FEATURE] [Special Order] [Drop Shipment] [Sales]
      // Setup: Create Sales Order with Special Order Line And Drop Shipment Line.
      Initialize;
      CreateSalesOrderWithSpecialOrderAndDropShipment(SalesHeader);

      // Exercise: Create Purchase Order. Get Special Order then Get Drop Shipment.
      CreatePurchHeader(PurchHeader,SalesHeader."Sell-to Customer No.",'');
      DistIntegration.GetSpecialOrders(PurchHeader);
      COMMIT;
      ASSERTERROR LibraryPurchase.GetDropShipment(PurchHeader);

      // Verify: Verify Error message.
      Assert.ExpectedError(STRSUBSTNO(ShipToNameErr,PurchHeader.FIELDCAPTION("Ship-to Name"),PurchHeader."No.",SalesHeader."No."));

      // Verify: Verify Purchasing Code, Ship-to Name, Ship-to Address on Purchase Order with Special Order.
      SelectSalesLineWithSpecialOrder(SalesLine,SalesHeader);
      VerifyPurchasingCodeAndSpecialOrderOnPurchaseLine(SalesLine,PurchHeader."No.");
      Location.GET(SalesHeader."Location Code");
      VerifyPurchShippingDetails(PurchHeader,Location.Name,Location.Address);
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler)]
    PROCEDURE PurchOrderRunGetDropShipment@143();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      PurchHeader@1003 : Record 38;
      DistIntegration@1004 : Codeunit 5702;
    BEGIN
      // [FEATURE] [Special Order] [Drop Shipment] [Purchase]
      // Setup: Create Sales Order with Special Order Line And Drop Shipment Line.
      Initialize;
      CreateSalesOrderWithSpecialOrderAndDropShipment(SalesHeader);

      // Exercise: Create Purchase Order. Get Drop Shipment then Get Special Order.
      CreatePurchHeader(PurchHeader,SalesHeader."Sell-to Customer No.",'');
      LibraryPurchase.GetDropShipment(PurchHeader);
      COMMIT;
      ASSERTERROR DistIntegration.GetSpecialOrders(PurchHeader);

      // Verify: Verify Error Message.
      Assert.ExpectedError(STRSUBSTNO(ShipToNameErr,PurchHeader.FIELDCAPTION("Ship-to Name"),PurchHeader."No.",SalesHeader."No."));

      // Verify: Verify Purchasing Code, Ship-to Name, Ship-to Address on Purchase Order with Drop Shipment.
      SelectSalesLineWithDropShipment(SalesLine,SalesHeader);
      VerifyPurchasingCodeAndDropShipmentOnPurchLine(SalesLine,PurchHeader."No.");
      VerifyPurchShippingDetails(PurchHeader,SalesHeader."Ship-to Name",SalesHeader."Ship-to Address");
    END;

    [Test]
    PROCEDURE ReqWkshGetDropShipWithMultipleAddressAndCarryOutActionMsg@152();
    VAR
      SalesHeader@1009 : Record 36;
      SalesHeader2@1010 : Record 36;
      SalesLine@1001 : Record 37;
      SalesLine2@1003 : Record 37;
      PurchHeader@1007 : Record 38;
      PurchHeader2@1008 : Record 38;
    BEGIN
      // [FEATURE] [Drop Shipment] [Carry Out] [Purchase]
      // Setup: Create two Sales Orders of Drop Shipment with Multiple Address..
      Initialize;
      GeneralSetupForReqwkshGetSalesOrder(SalesHeader,SalesHeader2,SalesLine,SalesLine2,FALSE); // FALSE for Drop Shipment
      ModifySalesHeaderWithMultipleAddress(SalesHeader2); // Set up value in Ship-To-Address 2

      // Exercise: Run Carry Out Action Msg. - Req. batch job.
      CarryOutActionMsgOnReqWkshForDropShipmentBatch(SalesHeader,SalesHeader2,SalesLine,SalesLine2);

      // Verify: Verify two Purchase Orders have been created.
      // Drop Shipment lines with different Ship-To-Address 2 should be carried to seperate orders.
      GetPurchHeader(PurchHeader,SalesLine."No.");
      GetPurchHeader(PurchHeader2,SalesLine2."No.");
      Assert.AreNotEqual(PurchHeader."No.",PurchHeader2."No.",DropShipWithShipToAddress2Err);
    END;

    [Test]
    PROCEDURE ReqWkshGetSpecOrderWithMultipleAddressAndCarryOutActionMsg@167();
    VAR
      SalesHeader@1007 : Record 36;
      SalesHeader2@1006 : Record 36;
      SalesLine@1005 : Record 37;
      SalesLine2@1004 : Record 37;
      PurchHeader@1003 : Record 38;
      PurchHeader2@1002 : Record 38;
    BEGIN
      // [FEATURE] [Special Order] [Carry Out] [Purchase]
      // Setup: Create two Sales Orders of Special Order with Multiple Address.
      Initialize;
      GeneralSetupForReqwkshGetSalesOrder(SalesHeader,SalesHeader2,SalesLine,SalesLine2,TRUE); // TRUE for Special Order
      ModifySalesHeaderWithMultipleAddress(SalesHeader2);  // Set up value in Ship-To-Address 2

      // Exercise: Run Carry Out Action Msg. - Req. batch job.
      CarryOutActionMsgOnReqWkshForSpecialOrder(SalesHeader,SalesHeader2,SalesLine,SalesLine2);

      // Verify: Verify one Purchase Order have been created.
      // Special order lines with different Ship-To-Address 2 should be carried to the same orders, because its shipment is grouped by Location Code.
      GetPurchHeader(PurchHeader,SalesLine."No.");
      GetPurchHeader(PurchHeader2,SalesLine2."No.");
      Assert.AreEqual(PurchHeader."No.",PurchHeader2."No.",SpecOrderWithShipToAddress2Err);
    END;

    [Test]
    PROCEDURE ReqWkshGetSpecOrderAndCarryOutActionMsg@147();
    VAR
      SalesHeader@1005 : Record 36;
      SalesHeader2@1004 : Record 36;
      SalesLine@1003 : Record 37;
      SalesLine2@1002 : Record 37;
      PurchHeader@1001 : Record 38;
      PurchHeader2@1000 : Record 38;
    BEGIN
      // [FEATURE] [Special Order] [Carry Out] [Purchase]
      // Setup: Create two Sales Orders of Special Order with same Location Code.
      Initialize;
      GeneralSetupForReqwkshGetSalesOrder(SalesHeader,SalesHeader2,SalesLine,SalesLine2,TRUE); // TRUE for Special Order

      // Exercise: Run Carry Out Action Msg. - Req. batch job.
      CarryOutActionMsgOnReqWkshForSpecialOrder(SalesHeader,SalesHeader2,SalesLine,SalesLine2);

      // Verify: Verify one Purchase Order have been created.
      // Special order lines with same Location Code should be carried to the same orders.
      GetPurchHeader(PurchHeader,SalesLine."No.");
      GetPurchHeader(PurchHeader2,SalesLine2."No.");
      Assert.AreEqual(PurchHeader."No.",PurchHeader2."No.",SpecOrderWithSameLocationCodeErr);
    END;

    [Test]
    PROCEDURE ReqWkshGetSpecOrderWithDifferentLocationAndCarryOutActionMsg@148();
    VAR
      SalesHeader@1005 : Record 36;
      SalesHeader2@1004 : Record 36;
      SalesLine@1003 : Record 37;
      SalesLine2@1002 : Record 37;
      PurchHeader@1001 : Record 38;
      PurchHeader2@1000 : Record 38;
    BEGIN
      // [FEATURE] [Special Order] [Carry Out] [Purchase]
      // Setup: Create two Sales Orders of Special Order  with different Location Code.
      Initialize;
      GeneralSetupForReqwkshGetSalesOrder(SalesHeader,SalesHeader2,SalesLine,SalesLine2,TRUE); // TRUE for Special Order
      ModifySalesOrderWithLocationCode(SalesHeader2,SalesLine2); // set up Location Code of null.

      // Exercise: Run Carry Out Action Msg. - Req. batch job.
      CarryOutActionMsgOnReqWkshForSpecialOrder(SalesHeader,SalesHeader2,SalesLine,SalesLine2);

      // Verify: Verify two Purchase Orders have been created.
      // Special order lines with different Location Code should be carried to seperate orders.
      GetPurchHeader(PurchHeader,SalesLine."No.");
      GetPurchHeader(PurchHeader2,SalesLine2."No.");
      Assert.AreNotEqual(PurchHeader."No.",PurchHeader2."No.",SpecOrderWithDifferentLocationCodeErr);
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler)]
    PROCEDURE DropShipmentWithShipToCodeAndSalesOrderPost@119();
    VAR
      SalesHeader@1000 : Record 36;
      PurchHeader@1001 : Record 38;
      ItemNo@1004 : Code[20];
      CountryCode@1002 : Code[10];
    BEGIN
      // [FEATURE] [Drop Shipment] [Sales]
      Initialize;

      CreateSalesAndPurchOrdersWithDropShipmentAndCountryCode(SalesHeader,PurchHeader,ItemNo,CountryCode);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      VerifyShipmentItemLedgerEntry(ItemNo,CountryCode);
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler)]
    PROCEDURE DropShipmentWithShipToCodeAndPurchOrderPost@138();
    VAR
      SalesHeader@1003 : Record 36;
      PurchHeader@1002 : Record 38;
      ItemNo@1000 : Code[20];
      CountryCode@1001 : Code[10];
    BEGIN
      // [FEATURE] [Drop Shipment] [Purhase]
      Initialize;

      CreateSalesAndPurchOrdersWithDropShipmentAndCountryCode(SalesHeader,PurchHeader,ItemNo,CountryCode);
      LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,FALSE);

      VerifyShipmentItemLedgerEntry(ItemNo,CountryCode);
    END;

    [Test]
    [HandlerFunctions(GetShipmentLinesPageHandler,DeleteInvoicedSalesOrdersHandler,MessageHandler)]
    PROCEDURE DeleteAssemblyOrderAutomaticallyAfterRunningDeleteInvoicedSalesOrders@223();
    VAR
      AssemblyItem@1002 : Record 27;
      SalesHeader@1000 : Record 36;
      AssemblyHeader@1005 : Record 900;
      AssemblyHeaderNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Delete Documents] [Order] [Sales]
      // Verify Assembly Order can be deleted automatically after running Delete Invoiced Sales Orders Report.

      // Setup: Create Assembly ATO Item with component. Create and post Sales Order as ship.
      // Create and post Sales Invoice by Get Shipment Lines.
      Initialize;
      CreateAssemblyItemWithComponent(
        AssemblyItem,LibraryRandom.RandInt(5),AssemblyItem."Assembly Policy"::"Assemble-to-Order");
      AssemblyHeaderNo := CreateAndPostSalesOrder(SalesHeader,AssemblyItem."No.",TRUE,FALSE);
      CreateAndPostSalesInvoiceUsingGetShipmentLines(SalesHeader."Sell-to Customer No.");

      // Exercise: Run report Delete Invoiced Sales Orders.
      RunDeleteInvoicedSalesOrdersReport(SalesHeader."Document Type",SalesHeader."No.");

      // Verify: Verify Assembly Order is deleted.
      AssemblyHeader.SETRANGE("Document Type",AssemblyHeader."Document Type"::Order);
      AssemblyHeader.SETRANGE("No.",AssemblyHeaderNo);
      Assert.RecordIsEmpty(AssemblyHeader);
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler)]
    PROCEDURE DropShipmentPurchOrderPartialPost@159();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1006 : Record 37;
      PurchHeader@1002 : Record 38;
      ItemNo@1000 : Code[20];
      CountryCode@1001 : Code[10];
      QtyToReceive@1004 : Decimal;
      ExpAmount@1005 : Decimal;
    BEGIN
      // [FEATURE] [Drop Shipment] [Purhase]
      // Verify ILE amount after partial posting Purchase Order in case of Drop Shipment
      Initialize;

      CreateSalesAndPurchOrdersWithDropShipmentAndCountryCode(SalesHeader,PurchHeader,ItemNo,CountryCode);

      SelectSalesLineWithDropShipment(SalesLine,SalesHeader);
      QtyToReceive := LibraryRandom.RandDec(SalesLine.Quantity DIV 1,2);
      UpdatePurchLineQtyToReceive(PurchHeader."No.",QtyToReceive);

      LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,FALSE);

      ExpAmount := ROUND(SalesLine.Amount * QtyToReceive / SalesLine.Quantity);
      VerifyPartialDropShipmentSalesILE(ItemNo,ExpAmount);
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler)]
    PROCEDURE DropShipmentSalesOrderPartialPost@160();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1006 : Record 37;
      PurchHeader@1002 : Record 38;
      PurchLine@1007 : Record 39;
      ItemNo@1000 : Code[20];
      CountryCode@1001 : Code[10];
      QtyToShip@1004 : Decimal;
      ExpAmount@1005 : Decimal;
    BEGIN
      // [FEATURE] [Drop Shipment] [Purhase]
      // Verify ILE amount after partial posting Sales Order in case of Drop Shipment
      Initialize;

      CreateSalesAndPurchOrdersWithDropShipmentAndCountryCode(SalesHeader,PurchHeader,ItemNo,CountryCode);

      SelectSalesLineWithDropShipment(SalesLine,SalesHeader);
      QtyToShip := LibraryRandom.RandDec(SalesLine.Quantity DIV 1,2);
      UpdateSalesLineQtyToShip(SalesHeader."No.",QtyToShip);

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      FindPurchLine(PurchLine,PurchHeader."No.");
      ExpAmount := ROUND(PurchLine.Amount * QtyToShip / PurchLine.Quantity);

      VerifyPartialDropShipmentPurchaseILE(ItemNo,ExpAmount);
    END;

    [Test]
    PROCEDURE DropShipmentSalesOrderFCYPurchOrderLCY@151();
    VAR
      Customer@1007 : Record 18;
      SalesHeader@1003 : Record 36;
      SalesLine@1006 : Record 37;
      PurchHeader@1002 : Record 38;
      ValueEntry@1000 : Record 5802;
    BEGIN
      // [FEATURE] [Drop Shipment] [Purchase]
      // [SCENARIO 375430] Amounts should be recalculated to LCY in Value Entries when post Purchase Order for FCY Sales Order with Drop Shipment
      Initialize;

      // [GIVEN] Currency 'HUF' has exch. rates: 3 on 01.07; 4 on 05.07
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE(
        "Currency Code",
        LibraryERM.CreateCurrencyWithExchangeRate(WORKDATE,LibraryRandom.RandDecInRange(10,20,2),1));
      Customer.MODIFY(TRUE);
      LibraryERM.CreateExchangeRate(Customer."Currency Code",WORKDATE + 1,LibraryRandom.RandDecInRange(10,20,2),1);

      // [GIVEN] Sales Order in 'HUF' with "Posting Date" = 01.07, "Drop Shipment" = Yes; "Line Discount Amount" = 2.00, Amount = 300.00
      CreateSalesOrderWithPurchasingCode(
        SalesHeader,SalesLine,
        Customer."No.",CreatePurchasingCodeWithDropShipment,LibraryPurchase.CreateVendorNo);
      SalesLine.VALIDATE("Line Discount %",LibraryRandom.RandInt(3));
      SalesLine.MODIFY(TRUE);

      // [GIVEN] Created a Purchase Order without Currency with Requisition Worksheet
      CarryOutActionMsgOnReqWkshForDropShipment(SalesHeader,SalesLine);
      GetPurchHeader(PurchHeader,SalesLine."No.");
      PurchHeader.VALIDATE("Posting Date",WORKDATE + 1);
      PurchHeader.MODIFY(TRUE);

      // [WHEN] Purchase Order is posted (received) on 05.07
      LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,FALSE);

      // [THEN] 'Sale' Value Entry is posted, where "Sales Amount (Expected)" is 100.00 (300.00 / 3); "Discount Amount" is 0.67 (2,00 / 3)
      ValueEntry.SETRANGE("Item No.",SalesLine."No.");
      ValueEntry.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::Sale);
      ValueEntry.FINDFIRST;
      ValueEntry.TESTFIELD(
        "Sales Amount (Expected)",
        ROUND(LibraryERM.ConvertCurrency(SalesLine.Amount,Customer."Currency Code",'',WORKDATE)));
      ValueEntry.TESTFIELD(
        "Discount Amount",
        -ROUND(LibraryERM.ConvertCurrency(SalesLine."Line Discount Amount",Customer."Currency Code",'',WORKDATE)));
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler)]
    PROCEDURE DropShipmentCopyLinksOnPostingReceiptShipment@168();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1006 : Record 37;
      PurchHeader@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchasingCode@1001 : Code[10];
      ItemNo@1004 : Code[20];
      SalesLink@1010 : Text;
      PurchaseLink@1011 : Text;
    BEGIN
      // [FEATURE] [Drop Shipment] [Sales] [Purchase]
      // [SCENARIO 380611] Links from Sales Orders are copied to Sales Shipment, Links from Purchase Order are copied to Purchase Receipt when post drop shipment
      Initialize;

      // [GIVEN] "Copy Comments Order" set to Yes on Purch/Sales Setup
      UpdateCopyCommentsOnSalesPurchaseSetup;

      // [GIVEN] Sales Order has "Item1" with Quantity = 3, "Qty.to Ship" = 3, "Item2" with Quantity = 5, "Qty.to Ship" = 0
      PurchasingCode := CreatePurchasingCodeWithDropShipment;
      CreateSalesOrderWithPurchasingCode(
        SalesHeader,SalesLine,LibrarySales.CreateCustomerNo,PurchasingCode,LibraryPurchase.CreateVendorNo);
      ItemNo := SalesLine."No.";
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandDecInRange(10,20,2));
      SalesLine.VALIDATE("Purchasing Code",PurchasingCode);
      SalesLine.VALIDATE("Qty. to Ship",0);
      SalesLine.MODIFY(TRUE);

      // [GIVEN] Record Link for Sales Order with value = "SalesLink"
      SalesLink := CreateRecordLink(SalesHeader);

      // [GIVEN] Purchase Order with lines from drop shipment Sales Order, "Item2" has "Qty. to Receive" = 0
      CreatePurchHeader(PurchHeader,SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");
      LibraryPurchase.GetDropShipment(PurchHeader);
      PurchaseLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchaseLine.SETRANGE("No.",SalesLine."No.");
      PurchaseLine.FINDFIRST;
      PurchaseLine.VALIDATE("Qty. to Receive",0);
      PurchaseLine.MODIFY(TRUE);

      // [GIVEN] Record Link for Purchase Order with value = "PurchLink"
      PurchaseLink := CreateRecordLink(PurchHeader);

      // [GIVEN] Posted Purchase Order created receipt and shipment documents for "Item1"
      LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,FALSE);

      // [GIVEN] Updated "Item2" on Sales Line with "Qty.to Ship" = 5
      SalesHeader.FIND;
      LibrarySales.ReopenSalesDocument(SalesHeader);
      SalesLine.FIND;
      SalesLine.VALIDATE("Qty. to Ship",SalesLine.Quantity);
      SalesLine.MODIFY(TRUE);

      // [WHEN] Posted Sales Order created receipt and shipment documents for "Item2"
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [THEN] Posted Sales Shipments for "Item1" and "Item2" has Record Link with value "SalesLink"
      VerifyPostedSalesShipmentLink(SalesHeader."Sell-to Customer No.",ItemNo,SalesLink);
      VerifyPostedSalesShipmentLink(SalesHeader."Sell-to Customer No.",SalesLine."No.",SalesLink);

      // [THEN] Posted Purchase Receipts for "Item1" and "Item2" has Record Link with value "PurchLink"
      VerifyPostedPurchReceiptLink(PurchHeader."Buy-from Vendor No.",ItemNo,PurchaseLink);
      VerifyPostedPurchReceiptLink(PurchHeader."Buy-from Vendor No.",SalesLine."No.",PurchaseLink);
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler)]
    PROCEDURE ArchiveDropShipmentPurchOrder@278();
    VAR
      SalesHeader@1000 : Record 36;
      PurchHeader@1001 : Record 38;
    BEGIN
      // [FEATURE] [Purchase] [Sales] [Drop Shipment] [Document Archieve]
      // [SCENARIO 376804] Purchase Order should be archived when post Sales Order with Drop Shipment

      // [GIVEN] Sales Order and Purchase Order with "Drop Shipment"
      Initialize;
      UpdateArchiveOptionInPurchSetup(TRUE);
      CreateSalesAndPurchOrdersWithDropShipment(SalesHeader,PurchHeader);

      // [WHEN] Post Sales Order
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [THEN] Purchase Order is archived
      VerifyPurchHeaderArchive(PurchHeader."Document Type",PurchHeader."No.");
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler)]
    PROCEDURE ArchieveDropShipmentSalesOrder@249();
    VAR
      SalesHeader@1002 : Record 36;
      PurchHeader@1001 : Record 38;
    BEGIN
      // [FEATURE] [Sales] [Purchase] [Drop Shipment] [Document Archieve]
      // [SCENARIO 376804] Sales Order should be archived when post Purchase Order with Drop Shipment

      // [GIVEN] Sales Order and Purchase Order with "Drop Shipment"
      Initialize;
      UpdateArchiveOptionInSalesSetup(TRUE);
      CreateSalesAndPurchOrdersWithDropShipment(SalesHeader,PurchHeader);

      // [WHEN] Post Purchase Order
      LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,FALSE);

      // [THEN] Sales Order is archived
      VerifySalesHeaderArchive(SalesHeader."Document Type",SalesHeader."No.");
    END;

    [Test]
    PROCEDURE ArchivePostedPurchaseOrder@149();
    VAR
      PurchaseHeader@1007 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [FEATURE] [Purchase] [Archive]
      // [SCENARIO 378218] The archive copy should be created after posting of Purchase Order.
      Initialize;

      // [GIVEN] Set an archiving of Orders as True.
      LibraryPurchase.SetArchiveQuotesAndOrders(TRUE);

      // [GIVEN] Create Purchase Order.
      LibraryPurchase.CreatePurchaseDocumentWithItem(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,'','',LibraryRandom.RandDec(10,2),'',0D);

      // [WHEN] Post Purchase Order.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] The archive copy of Purchase Order is created.
      VerifyArchiveOfPurchOrder(PurchaseHeader,2);
    END;

    [Test]
    PROCEDURE NoArchiveOfUnpostedPurchOrder@91();
    VAR
      PurchaseHeader@1007 : Record 38;
      PurchaseLine@1002 : Record 39;
      Item@1000 : Record 27;
    BEGIN
      // [FEATURE] [Purchase] [Archive]
      // [SCENARIO 378218] The archive copy of Purchase Order should not be created after posting with error.
      Initialize;

      // [GIVEN] Set an archiving of Orders as True.
      LibraryPurchase.SetArchiveQuotesAndOrders(TRUE);

      // [GIVEN] Create Item with empty "Base Unit of Measure".
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Base Unit of Measure",'');
      Item.MODIFY(TRUE);

      // [GIVEN] Create Purchase Order.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      // [GIVEN] Create Purchase Line with empty "Unit of Measure".
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));

      // [WHEN] Post Purchase Order with error.
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      Assert.ExpectedError(Item.FIELDCAPTION("Base Unit of Measure"));

      // [THEN] The archive copy of Purchase Order is not created.
      VerifyArchiveOfPurchOrder(PurchaseHeader,0);
    END;

    [Test]
    PROCEDURE ArchivePostedSalesOrder@90();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      // [FEATURE] [Sales] [Archive]
      // [SCENARIO 378218] The archive copy should be created after posting of Sales Order.
      Initialize;

      // [GIVEN] Set an archiving of Orders as True.
      LibrarySales.SetArchiveQuotesandOrders(TRUE);

      // [GIVEN] Create Sales Order.
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,'','',LibraryRandom.RandDec(10,2),'',0D);

      // [WHEN] Post Sales Order.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] The archive copy of Sales Order is created.
      VerifyArchiveOfSalesOrder(SalesHeader,2);
    END;

    [Test]
    PROCEDURE NoArchiveOfUnpostedSalesOrder@82();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // [FEATURE] [Sales] [Archive]
      // [SCENARIO 378218] The archive copy of Sales Order should not be created after posting with error.
      Initialize;

      // [GIVEN] Set an archiving of Orders as True.
      LibrarySales.SetArchiveQuotesandOrders(TRUE);
      // [GIVEN] Set "Ext. Doc. No. Mandatory" as True.
      LibrarySales.SetExtDocNo(TRUE);

      // [GIVEN] Create Sales Order with empty "External Document No.".
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("External Document No.",'');
      SalesHeader.MODIFY(TRUE);
      // [GIVEN] Create Sales Lines.
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,'',LibraryRandom.RandDec(10,2));

      // [WHEN] Post Sales Order with error.
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      Assert.ExpectedError(SalesHeader.FIELDCAPTION("External Document No."));

      // [THEN] The archive copy of Sales Order is not created.
      VerifyArchiveOfSalesOrder(SalesHeader,0);
    END;

    [Test]
    [HandlerFunctions(ExpectedMessageHandler,CreatePickReportHandler)]
    PROCEDURE InventoryPickCreatedWhenPrepaymentPaid@199();
    VAR
      LineGLAccount@1004 : Record 15;
      Item@1014 : Record 27;
      SalesHeader@1005 : Record 36;
      LocationCode@1015 : Code[10];
      Qty@1016 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Prepayment] [Inventory Pick]
      // [SCENARIO 379696] Invt. Pick should be created when "Check Prepmt. when Posting" is marked and Prepayment is paid.
      Initialize;

      // [GIVEN] "Check Prepmt. when Posting" is marked.
      Qty := LibraryRandom.RandInt(100);
      SetCheckPrepmtWhenPostingSales(TRUE);
      CreatePostingSetup(LineGLAccount);
      // [GIVEN] Location with "Require Pick".
      LocationCode := CreateLocationRequirePick;
      // [GIVEN] Item with "VAT Prod. Posting Group" and Item Inventory in Location.
      CreateItemAndItemInventory(
        Item,LocationCode,Qty,LineGLAccount."Gen. Prod. Posting Group",LineGLAccount."VAT Prod. Posting Group");
      // [GIVEN] Create Sales Order for Item with unpaid Prepayment.
      CreateSalesOrderWithUnpaidPrepayment(SalesHeader,LineGLAccount,LocationCode,Item."No.",Qty);
      // [GIVEN] Create payment and release Sales Order.
      CreatePaymentAndReleaseSalesOrder(SalesHeader);
      COMMIT;

      // [WHEN] Create Inventory Pick
      LibraryVariableStorage.Enqueue(NoOfPicksCreatedMsg);
      SalesHeader.CreateInvtPutAwayPick;

      // [THEN] Message "Number of Invt. Pick activities created..." is appeared.
      RemovePrepmtVATSetup(LineGLAccount);
    END;

    [Test]
    PROCEDURE InventoryPickNotCreatedWhenPrepaymentUnpaid@287();
    VAR
      LineGLAccount@1004 : Record 15;
      VATPostingSetup@1000 : Record 325;
      Item@1014 : Record 27;
      SalesHeader@1005 : Record 36;
      LocationCode@1015 : Code[10];
      Qty@1016 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Prepayment] [Inventory Pick]
      // [SCENARIO 379696] Invt. Pick should not be created when "Check Prepmt. when Posting" is marked and Prepayment is unpaid.
      Initialize;

      // [GIVEN] "Check Prepmt. when Posting" is marked.
      Qty := LibraryRandom.RandInt(100);
      SetCheckPrepmtWhenPostingSales(TRUE);
      LibrarySales.CreatePrepaymentVATSetup(LineGLAccount,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      // [GIVEN] Location with "Require Pick".
      LocationCode := CreateLocationRequirePick;
      // [GIVEN] Item with "VAT Prod. Posting Group".
      LibraryInventory.CreateItemWithPostingSetup(
        Item,LineGLAccount."Gen. Prod. Posting Group",LineGLAccount."VAT Prod. Posting Group");
      // [GIVEN] Create Sales Order for Item with unpaid Prepayment.
      CreateSalesOrderWithUnpaidPrepayment(SalesHeader,LineGLAccount,LocationCode,Item."No.",Qty);

      // [WHEN] Create Inventory Pick
      ASSERTERROR SalesHeader.CreateInvtPutAwayPick;

      // [THEN] Error message "There are unpaid prepayment invoices related to the document..." is appeared.
      Assert.ExpectedError(UnpaidPrepaymentErr);
      RemovePrepmtVATSetup(LineGLAccount);
    END;

    [Test]
    PROCEDURE WhseShipmentCreatedWhenPrepaymentPaid@300();
    VAR
      LineGLAccount@1004 : Record 15;
      WarehouseEmployee@1000 : Record 7301;
      Item@1014 : Record 27;
      SalesHeader@1005 : Record 36;
      LocationCode@1015 : Code[10];
      Qty@1016 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Prepayment] [Warehouse Shipment]
      // [SCENARIO 379696] Whse. Shipment should be created when "Check Prepmt. when Posting" is marked and Prepayment is paid.
      Initialize;

      // [GIVEN] "Check Prepmt. when Posting" is marked.
      Qty := LibraryRandom.RandInt(100);
      SetCheckPrepmtWhenPostingSales(TRUE);
      CreatePostingSetup(LineGLAccount);
      // [GIVEN] Location with "Require Shipment".
      LocationCode := CreateLocationRequireShipment;
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationCode,TRUE);
      // [GIVEN] Item with "VAT Prod. Posting Group" and Item Inventory in Location.
      CreateItemAndItemInventory(
        Item,LocationCode,Qty,LineGLAccount."Gen. Prod. Posting Group",LineGLAccount."VAT Prod. Posting Group");
      // [GIVEN] Create Sales Order for Item with unpaid Prepayment.
      CreateSalesOrderWithUnpaidPrepayment(SalesHeader,LineGLAccount,LocationCode,Item."No.",Qty);
      // [GIVEN] Create payment and release Sales Order.
      CreatePaymentAndReleaseSalesOrder(SalesHeader);

      // [WHEN] Create Warehouse Shipment
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // [THEN] Warehouse Shipment Line with Item is created.
      VerifyWarehouseShipmentLine(SalesHeader."No.",Item."No.",Qty);
      RemovePrepmtVATSetup(LineGLAccount);
    END;

    [Test]
    PROCEDURE WhseShipmentNotCreatedWhenPrepaymentUnpaid@299();
    VAR
      LineGLAccount@1004 : Record 15;
      VATPostingSetup@1000 : Record 325;
      Item@1014 : Record 27;
      SalesHeader@1005 : Record 36;
      LocationCode@1015 : Code[10];
      Qty@1016 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Prepayment] [Warehouse Shipment]
      // [SCENARIO 379696] Whse. Shipment should not be created when "Check Prepmt. when Posting" is marked and Prepayment is unpaid.
      Initialize;

      // [GIVEN] "Check Prepmt. when Posting" is marked.
      Qty := LibraryRandom.RandInt(100);
      SetCheckPrepmtWhenPostingSales(TRUE);
      LibrarySales.CreatePrepaymentVATSetup(LineGLAccount,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      // [GIVEN] Location with "Require Pick".
      LocationCode := CreateLocationRequireShipment;
      // [GIVEN] Item with "VAT Prod. Posting Group".
      LibraryInventory.CreateItemWithPostingSetup(
        Item,LineGLAccount."Gen. Prod. Posting Group",LineGLAccount."VAT Prod. Posting Group");
      // [GIVEN] Create Sales Order for Item with unpaid Prepayment.
      CreateSalesOrderWithUnpaidPrepayment(SalesHeader,LineGLAccount,LocationCode,Item."No.",Qty);

      // [WHEN] Create Warehouse Shipment
      ASSERTERROR LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // [THEN] Error message "There are unpaid prepayment invoices related to the document..." is appeared.
      Assert.ExpectedError(UnpaidPrepaymentErr);
      RemovePrepmtVATSetup(LineGLAccount);
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler)]
    PROCEDURE ChangeBuyFromVendorNoOnPurchOrderWhenDropShipmentSalesOrderIsPosted@191();
    VAR
      SalesHeader@1000 : Record 36;
      PurchaseHeader@1001 : Record 38;
    BEGIN
      // [FEATURE] [Purchase] [Sales] [Drop Shipment]
      // [SCENARIO 207985] "Buy-from Vendor No." should not be allowed to change in Purchase Order when Drop Sales Shipment is already posted
      Initialize;

      // [GIVEN] Sales Order with "Drop Shipment" for customer "C"
      // [GIVEN] Purchase Order for vendor "V" and "Sell to customer No." = "C" and drop shipment lines
      CreateSalesAndPurchOrdersWithDropShipment(SalesHeader,PurchaseHeader);

      // [GIVEN] Sales Shipment is posted
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [WHEN] Update "Buy-from Vendor No." from "V" to "W" on Purchase Order
      PurchaseHeader.FIND;
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);
      ASSERTERROR PurchaseHeader.VALIDATE("Buy-from Vendor No.",LibraryPurchase.CreateVendorNo);

      // [THEN] Error appeared 'You cannot change Buy-from Vendor No. because the order is associated with one or more sales orders.'
      Assert.ExpectedError(YouCannotChangeErr);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateLocalData;
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
      LibrarySetupStorage.Save(DATABASE::"Purchases & Payables Setup");
      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AddComponentInventory@224(VAR AssemblyHeader@1000 : Record 900;ItemNo@1001 : Code[20]);
    BEGIN
      AssemblyHeader.SETRANGE("Item No.",ItemNo);
      AssemblyHeader.FINDFIRST;
      LibraryAssembly.AddCompInventory(AssemblyHeader,WORKDATE,0);
    END;

    LOCAL PROCEDURE CreateSalesAndPurchOrdersWithDropShipment@276(VAR SalesHeader@1000 : Record 36;VAR PurchHeader@1001 : Record 38);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      CreateDropShipmentLine(SalesLine,SalesHeader);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.MODIFY(TRUE);
      CreatePurchHeader(PurchHeader,SalesHeader."Sell-to Customer No.",'');
      LibraryPurchase.GetDropShipment(PurchHeader);
    END;

    LOCAL PROCEDURE CreateSalesAndPurchOrdersWithDropShipmentAndCountryCode@146(VAR SalesHeader@1000 : Record 36;VAR PurchHeader@1001 : Record 38;VAR ItemNo@1002 : Code[20];VAR CountryCode@1003 : Code[10]);
    BEGIN
      CreateSalesOrderWithDropShipAndShipToCode(SalesHeader,ItemNo,CountryCode);
      CreatePurchHeader(PurchHeader,SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");
      LibraryPurchase.GetDropShipment(PurchHeader);
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLines@97() : Code[10];
    VAR
      GenJournalLine@1001 : Record 81;
      GenJournalBatch@1000 : Record 232;
    BEGIN
      // Create Fiscal Year, Close Fiscal Year, General Journal Batch. Create and Post General Journal Lines.
      LibraryFiscalYear.CreateFiscalYear;
      LibraryFiscalYear.CloseFiscalYear;
      CreateGeneralJournalBatch(GenJournalBatch);
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,LibraryFiscalYear.GetLastPostingDate(TRUE));
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',LibraryFiscalYear.GetLastPostingDate(TRUE)));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatch@63(VAR GenJournalBatch@1000 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@62(VAR GenJournalLine@1000 : Record 81;GenJournalBatch@1001 : Record 232;PostingDate@1002 : Date);
    VAR
      GLAccount@1007 : Record 15;
      GLAccount2@1003 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGLAccount(GLAccount2);

      // Use Random for Amount value is not important.
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",LibraryRandom.RandDec(100,2));

      // Value of Document No. is not important.
      GenJournalLine.VALIDATE("Document No.",GenJournalLine."Journal Batch Name" + FORMAT(GenJournalLine."Line No."));
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",GLAccount2."No.");
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralPostingSetup@76(VAR GeneralPostingSetup@1000 : Record 252);
    VAR
      GenBusinessPostingGroup@1001 : Record 250;
      GenProductPostingGroup@1002 : Record 251;
    BEGIN
      LibraryERM.CreateGenBusPostingGroup(GenBusinessPostingGroup);
      LibraryERM.FindGenProductPostingGroup(GenProductPostingGroup);
      LibraryERM.CreateGeneralPostingSetup(GeneralPostingSetup,GenBusinessPostingGroup.Code,GenProductPostingGroup.Code);
    END;

    LOCAL PROCEDURE CreateAndGetPurchaseDocumentNo@51(VAR PurchaseLine@1001 : Record 39;VendorNo@1009 : Code[20]) : Code[20];
    VAR
      PurchaseHeader@1000 : Record 38;
      NoSeriesManagement@1003 : Codeunit 396;
    BEGIN
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,VendorNo);
      EXIT(NoSeriesManagement.GetNextNo(PurchaseHeader."Posting No. Series",WORKDATE,FALSE));
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@96(VAR PurchaseLine@1001 : Record 39;LocationCode@1000 : Code[10]);
    VAR
      PurchaseHeader@1002 : Record 38;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader,LocationCode);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndUpdatePurchasingCodeOnSalesDocument@127(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37);
    BEGIN
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);
      SalesLine.VALIDATE("Purchasing Code",CreatePurchasingCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAssemblyItemWithAssemblyPolicy@225(VAR AssemblyItem@1000 : Record 27;AssemblyPolicy@1001 : Option);
    BEGIN
      LibraryAssembly.CreateItem(AssemblyItem,AssemblyItem."Costing Method"::Standard,
        AssemblyItem."Replenishment System"::Assembly,'','');
      AssemblyItem.VALIDATE("Assembly Policy",AssemblyPolicy);
      AssemblyItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAssemblyItemWithComponent@222(VAR AssemblyItem@1000 : Record 27;AssemblyPolicy@1003 : Option;Quantity@1004 : Decimal);
    VAR
      BOMComponent@1002 : Record 90;
      ComponentItem@1001 : Record 27;
    BEGIN
      CreateAssemblyItemWithAssemblyPolicy(AssemblyItem,AssemblyPolicy);
      LibraryAssembly.CreateItem(
        ComponentItem,ComponentItem."Costing Method"::Standard,ComponentItem."Replenishment System"::Purchase,'','');
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,ComponentItem."No.",AssemblyItem."No.",'',BOMComponent."Resource Usage Type",Quantity,TRUE);
    END;

    LOCAL PROCEDURE CreateItem@9() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(1000,2));
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandDec(1000,2));
      Item.MODIFY;
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemAndItemInventory@186(VAR Item@1004 : Record 27;LocationCode@1002 : Code[10];Qty@1005 : Decimal;GenProdPostingGroup@1006 : Code[10];VATProdPostingGroup@1007 : Code[10]);
    VAR
      ItemJournalTemplate@1001 : Record 82;
      ItemJournalBatch@1000 : Record 233;
      ItemJournalLine@1003 : Record 83;
    BEGIN
      LibraryInventory.CreateItemWithPostingSetup(Item,GenProdPostingGroup,VATProdPostingGroup);
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",
        ItemJournalBatch.Name,ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Qty);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateItemWithVendNo@137(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationRequirePick@187() : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Require Pick",TRUE);
      Location.MODIFY(TRUE);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreateLocationRequireReceive@89() : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      Location.VALIDATE("Require Receive",TRUE);
      Location.MODIFY(TRUE);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreateLocationRequireShipment@190() : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Require Shipment",TRUE);
      Location.MODIFY(TRUE);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreatePaymentAndReleaseSalesOrder@255(VAR SalesHeader@1001 : Record 36);
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      WITH SalesHeader DO BEGIN
        CALCFIELDS("Amount Including VAT");
        LibrarySales.CreatePaymentAndApplytoInvoice(
          GenJournalLine,"Sell-to Customer No.","Last Prepayment No.",-"Amount Including VAT");
      END;
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreatePostingSetup@264(VAR LineGLAccount@1001 : Record 15);
    VAR
      GeneralPostingSetup@1002 : Record 252;
      VATPostingSetup@1000 : Record 325;
    BEGIN
      LibrarySales.CreatePrepaymentVATSetup(LineGLAccount,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibraryERM.CreateGeneralPostingSetup(GeneralPostingSetup,'',LineGLAccount."Gen. Prod. Posting Group");
      GeneralPostingSetup.VALIDATE("Inventory Adjmt. Account",LibraryERM.CreateGLAccountNo);
      GeneralPostingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchasingCode@114() : Code[10];
    VAR
      Purchasing@1000 : Record 5721;
    BEGIN
      LibraryPurchase.CreatePurchasingCode(Purchasing);
      Purchasing.VALIDATE("Special Order",TRUE);
      Purchasing.MODIFY(TRUE);
      EXIT(Purchasing.Code);
    END;

    LOCAL PROCEDURE CreatePurchasingCodeWithDropShipment@162() : Code[10];
    VAR
      Purchasing@1000 : Record 5721;
    BEGIN
      LibraryPurchase.CreatePurchasingCode(Purchasing);
      Purchasing.VALIDATE("Drop Shipment",TRUE);
      Purchasing.MODIFY(TRUE);
      EXIT(Purchasing.Code);
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@7(VAR PurchaseHeader@1002 : Record 38;VAR PurchaseLine@1001 : Record 39;DocumentType@1000 : Option;VendorNo@1004 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@69(VAR PurchaseHeader@1001 : Record 38);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
    END;

    LOCAL PROCEDURE CreatePurchHeader@135(VAR PurchHeader@1000 : Record 38;SellToCustomerNo@1001 : Code[20];ShipToCode@1002 : Code[10]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Order,'');
      PurchHeader.VALIDATE("Sell-to Customer No.",SellToCustomerNo);
      IF ShipToCode <> '' THEN
        PurchHeader.VALIDATE("Ship-to Code",ShipToCode);
      PurchHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@83(VAR PurchaseLine@1002 : Record 39;PurchaseHeader@1001 : Record 38;LocationCode@1003 : Code[10]);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandDec(10,2));
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithPurchasingCode@189(VAR SalesHeader@1004 : Record 36;VAR SalesLine@1003 : Record 37;CustomerNo@1002 : Code[20];PurchasingCode@1000 : Code[10];VendorNo@1001 : Code[20]);
    VAR
      Item@1005 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Vendor No.",VendorNo);
      Item.VALIDATE("Unit Price",LibraryRandom.RandDecInRange(10,20,2));
      Item.MODIFY(TRUE);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDecInRange(10,20,2));
      SalesLine.VALIDATE("Purchasing Code",PurchasingCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithUnpaidPrepayment@200(VAR SalesHeader@1001 : Record 36;LineGLAccount@1000 : Record 15;LocationCode@1004 : Code[10];ItemNo@1005 : Code[20];Qty@1006 : Decimal);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomerWithPrepayment(LineGLAccount));
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Qty);
      WITH SalesLine DO BEGIN
        VALIDATE("Location Code",LocationCode);
        VALIDATE("Unit Price",LibraryRandom.RandDec(1000,2));
        MODIFY(TRUE);
      END;
      LibrarySales.PostSalesPrepaymentInvoice(SalesHeader);
    END;

    LOCAL PROCEDURE CreateDropShipmentLine@136(VAR SalesLine@1000 : Record 37;VAR SalesHeader@1001 : Record 36);
    VAR
      Purchasing@1002 : Record 5721;
      Item@1003 : Record 27;
    BEGIN
      CreateItemWithVendNo(Item);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));
      LibraryPurchase.CreatePurchasingCode(Purchasing);
      Purchasing.VALIDATE("Drop Shipment",TRUE);
      Purchasing.MODIFY(TRUE);
      SalesLine.VALIDATE("Purchasing Code",Purchasing.Code);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSpecialOrderLine@139(VAR SalesLine@1000 : Record 37;VAR SalesHeader@1001 : Record 36);
    VAR
      Purchasing@1002 : Record 5721;
      Item@1003 : Record 27;
    BEGIN
      CreateItemWithVendNo(Item);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));
      LibraryPurchase.CreatePurchasingCode(Purchasing);
      Purchasing.VALIDATE("Special Order",TRUE);
      Purchasing.MODIFY(TRUE);
      SalesLine.VALIDATE("Purchasing Code",Purchasing.Code);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderAndGetSpecialOrder@112(SellToCustomerNo@1001 : Code[20]) : Code[20];
    VAR
      PurchaseHeader@1003 : Record 38;
      DistIntegration@1000 : Codeunit 5702;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(PurchaseHeader.FIELDNO("Vendor Invoice No."),DATABASE::"Purchase Header"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Vendor Invoice No."))));
      PurchaseHeader.VALIDATE("Sell-to Customer No.",SellToCustomerNo);
      PurchaseHeader.MODIFY(TRUE);
      DistIntegration.GetSpecialOrders(PurchaseHeader);
      EXIT(PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreateSalesDocument@10(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1000 : Record 37;DocumentType@1002 : Option);
    BEGIN
      CreateSalesDocumentWithItem(SalesHeader,SalesLine,DocumentType,CreateItem);
    END;

    LOCAL PROCEDURE CreateSalesDocumentWithItem@226(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1000 : Record 37;DocumentType@1002 : Option;ItemNo@1004 : Code[20]);
    VAR
      Customer@1003 : Record 18;
    BEGIN
      // Take Random Quantity for Sales Line.
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,Customer."No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreateCustomer@14(ReminderTermsCode@1004 : Code[10]) : Code[20];
    VAR
      Customer@1001 : Record 18;
      FinanceChargeTerms@1000 : Record 5;
    BEGIN
      FinanceChargeTerms.SETFILTER("Interest Rate",'<>0');
      FinanceChargeTerms.FINDFIRST;
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Reminder Terms Code",ReminderTermsCode);
      Customer.VALIDATE("Fin. Charge Terms Code",FinanceChargeTerms.Code);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithAddress@121(VAR Customer@1001 : Record 18;LocationCode@1000 : Code[10]);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Location Code",LocationCode);
      Customer.VALIDATE(Address,'Address: ' + Customer."No.");
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFinanceChargeDocument@24(VAR FinanceChargeMemoNo@1002 : Code[20]) : Decimal;
    VAR
      FinanceChargeMemoHeader@1003 : Record 302;
      FinanceChargeMemoLine@1001 : Record 303;
    BEGIN
      // Take Random Amount in Finance Charge Memo Line.
      LibraryERM.CreateFinanceChargeMemoHeader(FinanceChargeMemoHeader,CreateCustomer(''));
      LibraryERM.CreateFinanceChargeMemoLine(
        FinanceChargeMemoLine,FinanceChargeMemoHeader."No.",FinanceChargeMemoLine.Type::"G/L Account");
      FinanceChargeMemoLine.VALIDATE("No.",CreateGLAccount);
      FinanceChargeMemoLine.VALIDATE(Amount,LibraryRandom.RandInt(100));
      FinanceChargeMemoLine.MODIFY(TRUE);
      FinanceChargeMemoNo := FinanceChargeMemoHeader."No.";
      EXIT(FinanceChargeMemoLine.Amount);
    END;

    LOCAL PROCEDURE CreateReminderTerms@13(VAR ReminderLevel@1002 : Record 293);
    VAR
      ReminderTerms@1000 : Record 292;
    BEGIN
      LibraryERM.CreateReminderTerms(ReminderTerms);
      CreateReminderLevel(ReminderLevel,ReminderTerms.Code);
    END;

    LOCAL PROCEDURE CreateReminderLevel@12(VAR ReminderLevel@1001 : Record 293;ReminderTermsCode@1003 : Code[10]);
    BEGIN
      // Take Random Grace Period and Additional Fee.
      LibraryERM.CreateReminderLevel(ReminderLevel,ReminderTermsCode);
      EVALUATE(ReminderLevel."Grace Period",'<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>');
      ReminderLevel.VALIDATE("Additional Fee (LCY)",LibraryRandom.RandInt(10));
      ReminderLevel.VALIDATE("Calculate Interest",TRUE);
      ReminderLevel.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLine@17(VAR GenJournalLine@1002 : Record 81;CustomerNo@1003 : Code[20];CurrencyCode@1004 : Code[10];Amount@1001 : Decimal);
    VAR
      GenJournalBatch@1000 : Record 232;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,CustomerNo,Amount);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostGenJnlDocument@34(VAR GenJournalLine@1001 : Record 81);
    VAR
      CustomerNo@1000 : Code[20];
    BEGIN
      CustomerNo := CreateCustomer('');
      CreateAndPostGenJournalLine(GenJournalLine,CustomerNo,'',CalculateAmountOverFinChargeMinimum(CustomerNo));
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrder@227(VAR SalesHeader@1000 : Record 36;ItemNo@1001 : Code[20];Ship@1002 : Boolean;Invoice@1003 : Boolean) : Code[20];
    VAR
      SalesLine@1004 : Record 37;
      AssemblyHeader@1005 : Record 900;
    BEGIN
      CreateSalesDocumentWithItem(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,ItemNo);
      AddComponentInventory(AssemblyHeader,ItemNo);
      LibrarySales.PostSalesDocument(SalesHeader,Ship,Invoice);
      EXIT(AssemblyHeader."No.");
    END;

    LOCAL PROCEDURE CreateReminder@16(GenJournalLine@1001 : Record 81;GracePeriod@1000 : DateFormula);
    VAR
      Customer@1003 : Record 18;
      CreateReminders@1004 : Report 188;
      DocumentDate@1002 : Date;
    BEGIN
      DocumentDate :=
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',CALCDATE(GracePeriod,GenJournalLine."Posting Date"));
      Customer.SETRANGE("No.",GenJournalLine."Account No.");
      CreateReminders.SETTABLEVIEW(Customer);
      CreateReminders.InitializeRequest(DocumentDate,DocumentDate,TRUE,FALSE,FALSE);
      CreateReminders.USEREQUESTPAGE(FALSE);
      CreateReminders.RUN;
    END;

    LOCAL PROCEDURE CreateFinanceCharge@26(CustomerNo@1005 : Code[20]);
    VAR
      Customer@1001 : Record 18;
      FinanceChargeTerms@1000 : Record 5;
      CreateFinanceChargeMemos@1004 : Report 191;
    BEGIN
      Customer.SETRANGE("No.",CustomerNo);
      CreateFinanceChargeMemos.InitializeRequest(WORKDATE,FindFinanceChargeTerms(FinanceChargeTerms,CustomerNo));
      CreateFinanceChargeMemos.SETTABLEVIEW(Customer);
      CreateFinanceChargeMemos.USEREQUESTPAGE(FALSE);
      CreateFinanceChargeMemos.RUN;
    END;

    LOCAL PROCEDURE CreateSalesOrderDropShipment@50(VAR SalesLine@1000 : Record 37);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');

      // Use Random because value is not important.
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2));
      SalesLine.VALIDATE("Drop Shipment",TRUE);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithSpecialOrderAndDropShipment@144(VAR SalesHeader@1000 : Record 36);
    VAR
      Customer@1001 : Record 18;
      SalesLine@1002 : Record 37;
    BEGIN
      CreateCustomerWithAddress(Customer,CreateLocation);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      CreateSpecialOrderLine(SalesLine,SalesHeader);
      CreateDropShipmentLine(SalesLine,SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoiceUsingGetShipmentLines@118(CustomerNo@1000 : Code[20]);
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      SalesLine.VALIDATE("Document Type",SalesHeader."Document Type");
      SalesLine.VALIDATE("Document No.",SalesHeader."No.");
      LibrarySales.GetShipmentLines(SalesLine);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateVendor@94() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptHeader@120(VAR WarehouseReceiptHeader@1001 : Record 7316;LocationCode@1000 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateWarehouseReceiptHeader(WarehouseReceiptHeader);
      WarehouseReceiptHeader.VALIDATE("Location Code",LocationCode);
      WarehouseReceiptHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderWithPrepayment@85(LineGLAccount@1001 : Record 15) : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomerWithPrepayment(LineGLAccount));
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",LineGLAccount."No.",LibraryRandom.RandInt(100));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(1000,2));
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesPrepaymentInvoice(SalesHeader);
      EXIT(SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrderWithPrepayment@103(LineGLAccount@1003 : Record 15) : Code[20];
    VAR
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendorWithPrepayment(LineGLAccount));
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",LineGLAccount."No.",LibraryRandom.RandInt(100));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(1000,2));
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.PostPurchasePrepaymentInvoice(PurchaseHeader);
      EXIT(PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithPrepayment@81(LineGLAccount@1001 : Record 15) : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Gen. Bus. Posting Group",LineGLAccount."Gen. Bus. Posting Group");
      Customer.VALIDATE("VAT Bus. Posting Group",LineGLAccount."VAT Bus. Posting Group");
      Customer.VALIDATE("Prepayment %",LibraryRandom.RandInt(50));
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateGLAccount@130() : Code[20];
    VAR
      GLAccount@1000 : Record 15;
      GeneralPostingSetup@1001 : Record 252;
      VATPostingSetup@1002 : Record 325;
      GenProductPostingGroup@1004 : Record 251;
    BEGIN
      GenProductPostingGroup.SETFILTER("Def. VAT Prod. Posting Group",'<>%1','');
      GenProductPostingGroup.FINDFIRST;
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Posting Type",GLAccount."Gen. Posting Type"::Sale);
      GLAccount.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GenProductPostingGroup.Code);
      GLAccount.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateVendorWithPrepayment@108(LineGLAccount@1001 : Record 15) : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Gen. Bus. Posting Group",LineGLAccount."Gen. Bus. Posting Group");
      Vendor.VALIDATE("VAT Bus. Posting Group",LineGLAccount."VAT Bus. Posting Group");
      Vendor.VALIDATE("Prepayment %",LibraryRandom.RandInt(50));
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateReqWkshTemplateName@132(VAR RequisitionWkshName@1000 : Record 245;VAR ReqWkshTemplate@1001 : Record 244);
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplate.Type::"Req.");
      ReqWkshTemplate.FINDFIRST;
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithDropShipAndShipToCode@153(VAR SalesHeader@1000 : Record 36;VAR ItemNo@1002 : Code[20];VAR CountryCode@1003 : Code[10]);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      WITH SalesHeader DO BEGIN
        LibrarySales.CreateSalesHeader(SalesHeader,"Document Type"::Order,LibrarySales.CreateCustomerNo);
        VALIDATE("Ship-to Code",CreateShipToAddress(CountryCode,"Sell-to Customer No."));
        MODIFY(TRUE);
      END;
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,10 + LibraryRandom.RandDec(10,2));
      ItemNo := SalesLine."No.";
      SalesLine.VALIDATE("Drop Shipment",TRUE);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateShipToAddress@154(VAR CountryCode@1000 : Code[10];CustNo@1001 : Code[20]) : Code[10];
    VAR
      ShipToAddress@1002 : Record 222;
    BEGIN
      CountryCode := CreateNewCountryCode;
      WITH ShipToAddress DO BEGIN
        INIT;
        "Customer No." := CustNo;
        Code := LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::"Ship-to Address");
        "Country/Region Code" := CountryCode;
        INSERT;
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE CreateNewCountryCode@156() : Code[10];
    VAR
      CountryRegion@1000 : Record 9;
    BEGIN
      WITH CountryRegion DO BEGIN
        INIT;
        Code := LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::"Country/Region");
        INSERT;
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE CalculateAmountOverFinChargeMinimum@38(CustomerNo@1001 : Code[20]) : Decimal;
    VAR
      FinanceChargeTerms@1002 : Record 5;
      BaseAmount@1003 : Decimal;
    BEGIN
      FindFinanceChargeTerms(FinanceChargeTerms,CustomerNo);
      IF FinanceChargeTerms."Interest Rate" <> 0 THEN
        BaseAmount := ROUND(FinanceChargeTerms."Minimum Amount (LCY)" / FinanceChargeTerms."Interest Rate" * 100);
      EXIT(BaseAmount + LibraryRandom.RandInt(100));
    END;

    LOCAL PROCEDURE CarryOutActionMsgOnReqWkshForDropShipmentBatch@155(SalesHeader@1006 : Record 36;SalesHeader2@1005 : Record 36;SalesLine@1004 : Record 37;SalesLine2@1003 : Record 37);
    VAR
      RequisitionLine@1002 : Record 246;
      RequisitionWkshName@1001 : Record 245;
      ReqWkshTemplate@1000 : Record 244;
    BEGIN
      CreateReqWkshTemplateName(RequisitionWkshName,ReqWkshTemplate);
      GetSalesOrderForDropShipmentOnReqWksh(RequisitionLine,SalesHeader,SalesLine,RequisitionWkshName.Name,ReqWkshTemplate.Name);
      GetSalesOrderForDropShipmentOnReqWksh(RequisitionLine,SalesHeader2,SalesLine2,RequisitionWkshName.Name,ReqWkshTemplate.Name);
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
    END;

    LOCAL PROCEDURE CarryOutActionMsgOnReqWkshForDropShipment@177(SalesHeader@1006 : Record 36;SalesLine@1004 : Record 37);
    VAR
      RequisitionLine@1002 : Record 246;
      RequisitionWkshName@1001 : Record 245;
      ReqWkshTemplate@1000 : Record 244;
    BEGIN
      CreateReqWkshTemplateName(RequisitionWkshName,ReqWkshTemplate);
      GetSalesOrderForDropShipmentOnReqWksh(RequisitionLine,SalesHeader,SalesLine,RequisitionWkshName.Name,ReqWkshTemplate.Name);
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
    END;

    LOCAL PROCEDURE CarryOutActionMsgOnReqWkshForSpecialOrder@150(SalesHeader@1009 : Record 36;SalesHeader2@1008 : Record 36;SalesLine@1007 : Record 37;SalesLine2@1006 : Record 37);
    VAR
      RequisitionLine@1003 : Record 246;
      RequisitionWkshName@1002 : Record 245;
      ReqWkshTemplate@1001 : Record 244;
    BEGIN
      CreateReqWkshTemplateName(RequisitionWkshName,ReqWkshTemplate);
      GetSalesOrderForSpecialOrderOnReqWksh(RequisitionLine,SalesHeader,SalesLine,RequisitionWkshName.Name,ReqWkshTemplate.Name);
      GetSalesOrderForSpecialOrderOnReqWksh(RequisitionLine,SalesHeader2,SalesLine2,RequisitionWkshName.Name,ReqWkshTemplate.Name);
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
    END;

    LOCAL PROCEDURE DeletePurchaseOrderArchive@33(PurchaseHeader@1001 : Record 38);
    VAR
      PurchaseHeaderArchive@1000 : Record 5109;
      DeletePurchaseOrderVersions@1002 : Report 5178;
    BEGIN
      PurchaseHeaderArchive.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseHeaderArchive.SETRANGE("No.",PurchaseHeader."No.");
      DeletePurchaseOrderVersions.SETTABLEVIEW(PurchaseHeaderArchive);
      DeletePurchaseOrderVersions.USEREQUESTPAGE(FALSE);
      DeletePurchaseOrderVersions.RUN;
    END;

    LOCAL PROCEDURE DeleteBlanketPurchaseOrder@39(VAR PurchaseHeader@1003 : Record 38;DocumentType@1001 : Option;No@1002 : Code[20]);
    VAR
      DeleteInvdBlnktPurchOrders@1000 : Report 491;
    BEGIN
      PurchaseHeader.SETRANGE("Document Type",DocumentType);
      PurchaseHeader.SETRANGE("No.",No);
      DeleteInvdBlnktPurchOrders.SETTABLEVIEW(PurchaseHeader);
      DeleteInvdBlnktPurchOrders.USEREQUESTPAGE(FALSE);
      DeleteInvdBlnktPurchOrders.RUN;
    END;

    LOCAL PROCEDURE DeleteSalesBlanketOrder@23(VAR SalesHeader@1002 : Record 36;BlankedOrderNo@1001 : Code[20]);
    VAR
      DeleteInvdBlnktSalesOrders@1000 : Report 291;
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Blanket Order");
      SalesHeader.SETRANGE("No.",BlankedOrderNo);
      DeleteInvdBlnktSalesOrders.SETTABLEVIEW(SalesHeader);
      DeleteInvdBlnktSalesOrders.USEREQUESTPAGE(FALSE);
      DeleteInvdBlnktSalesOrders.RUN;
    END;

    LOCAL PROCEDURE DeleteInvoiceSalesOrder@32(VAR SalesHeader@1002 : Record 36;DocumentNo@1001 : Code[20]);
    VAR
      DeleteInvoicedSalesOrders@1000 : Report 299;
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE("No.",DocumentNo);
      DeleteInvoicedSalesOrders.SETTABLEVIEW(SalesHeader);
      DeleteInvoicedSalesOrders.USEREQUESTPAGE(FALSE);
      DeleteInvoicedSalesOrders.RUN;
    END;

    LOCAL PROCEDURE FindAndUpdateCurrency@71(VAR Currency@1000 : Record 4);
    BEGIN
      LibraryERM.FindCurrency(Currency);
      Currency.VALIDATE("Amount Rounding Precision",LibraryRandom.RandDec(5,2));  // Use random value for Amount Rounding Precision.
      Currency.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindInterestAmount@19(CustomerNo@1004 : Code[20];TotalDays@1000 : Integer;Amount@1007 : Decimal) : Decimal;
    VAR
      FinanceChargeTerms@1006 : Record 5;
    BEGIN
      FindFinanceChargeTerms(FinanceChargeTerms,CustomerNo);
      Amount := (Amount * FinanceChargeTerms."Interest Rate") / 100;
      EXIT((Amount * TotalDays) / FinanceChargeTerms."Interest Period (Days)");
    END;

    LOCAL PROCEDURE FindIssuedReminder@104(VAR IssuedReminderHeader@1000 : Record 297;CustomerNo@1001 : Code[20]);
    BEGIN
      IssuedReminderHeader.SETRANGE("Customer No.",CustomerNo);
      IssuedReminderHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindFinanceChargeTerms@29(VAR FinanceChargeTerms@1000 : Record 5;CustomerNo@1004 : Code[20]) : Date;
    VAR
      Customer@1005 : Record 18;
    BEGIN
      Customer.GET(CustomerNo);
      FinanceChargeTerms.GET(Customer."Fin. Charge Terms Code");
      EXIT(CALCDATE(FinanceChargeTerms."Grace Period",CALCDATE(FinanceChargeTerms."Due Date Calculation",WORKDATE)));
    END;

    LOCAL PROCEDURE FindRequisitionWkshName@44(VAR RequisitionWkshName@1000 : Record 245);
    BEGIN
      RequisitionWkshName.SETRANGE("Template Type",RequisitionWkshName."Template Type"::"Req.");
      RequisitionWkshName.FINDFIRST;
    END;

    LOCAL PROCEDURE FindGLRegister@65(VAR GLRegister@1000 : Record 45;JournalBatchName@1001 : Code[10]) : Boolean;
    BEGIN
      GLRegister.SETRANGE("Journal Batch Name",JournalBatchName);
      EXIT(GLRegister.FINDFIRST);
    END;

    LOCAL PROCEDURE FindPurchLine@173(VAR PurchaseLine@1001 : Record 39;PurchHeaderNo@1000 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document No.",PurchHeaderNo);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE GetPurchHeader@128(VAR PurchHeader@1000 : Record 38;No@1001 : Code[20]);
    VAR
      PurchLine@1002 : Record 39;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
      PurchLine.SETRANGE(Type,PurchLine.Type::Item);
      PurchLine.SETRANGE("No.",No);
      PurchLine.FINDFIRST;
      PurchHeader.GET(PurchLine."Document Type"::Order,PurchLine."Document No.");
    END;

    LOCAL PROCEDURE GetSpecialOrderOnReqWksht@126(VAR SalesLine@1000 : Record 37;VAR RequisitionLine@1001 : Record 246;RequisitionWkshName@1002 : Code[10];ReqWkshTemplate@1003 : Code[10]);
    BEGIN
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,ReqWkshTemplate,RequisitionWkshName);
      LibraryPlanning.GetSpecialOrder(RequisitionLine,SalesLine."No.");
    END;

    LOCAL PROCEDURE GetDropShipmentOnReqWksht@129(VAR SalesLine@1000 : Record 37;VAR RequisitionLine@1001 : Record 246;RequisitionWkshName@1006 : Code[10];ReqWkshTemplate@1002 : Code[10]);
    VAR
      RetrieveDimensionsFrom@1003 : ARRAY [2] OF 'Item,Sales Line';
    BEGIN
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,ReqWkshTemplate,RequisitionWkshName);
      LibraryPlanning.GetSalesOrders(SalesLine,RequisitionLine,RetrieveDimensionsFrom::"Sales Line");
    END;

    LOCAL PROCEDURE GetSalesOrderForDropShipmentOnReqWksh@161(VAR RequisitionLine@1000 : Record 246;SalesHeader@1003 : Record 36;VAR SalesLine@1002 : Record 37;RequisitionWkshName@1006 : Code[10];ReqWkshTemplateName@1001 : Code[10]);
    BEGIN
      SelectSalesLineWithDropShipment(SalesLine,SalesHeader);
      GetDropShipmentOnReqWksht(SalesLine,RequisitionLine,RequisitionWkshName,ReqWkshTemplateName);
    END;

    LOCAL PROCEDURE GetSalesOrderForSpecialOrderOnReqWksh@158(VAR RequisitionLine@1000 : Record 246;SalesHeader@1006 : Record 36;VAR SalesLine@1002 : Record 37;RequisitionWkshName@1003 : Code[10];ReqWkshTemplateName@1001 : Code[10]);
    BEGIN
      SelectSalesLineWithSpecialOrder(SalesLine,SalesHeader);
      GetSpecialOrderOnReqWksht(SalesLine,RequisitionLine,RequisitionWkshName,ReqWkshTemplateName);
    END;

    LOCAL PROCEDURE GeneralSetupForReqwkshGetSalesOrder@142(VAR SalesHeader@1005 : Record 36;VAR SalesHeader2@1004 : Record 36;VAR SalesLine@1003 : Record 37;VAR SalesLine2@1002 : Record 37;SpecialOrder@1008 : Boolean);
    VAR
      Customer@1006 : Record 18;
      PurchasingCode@1001 : Code[10];
      VendorNo@1000 : Code[20];
    BEGIN
      CreateCustomerWithAddress(Customer,CreateLocation);
      VendorNo := CreateVendor;
      IF SpecialOrder THEN
        PurchasingCode := CreatePurchasingCode
      ELSE
        PurchasingCode := CreatePurchasingCodeWithDropShipment;
      CreateSalesOrderWithPurchasingCode(SalesHeader,SalesLine,Customer."No.",PurchasingCode,VendorNo);
      CreateSalesOrderWithPurchasingCode(SalesHeader2,SalesLine2,Customer."No.",PurchasingCode,VendorNo);
    END;

    LOCAL PROCEDURE IssueFinanceChargeMemo@18(No@1002 : Code[20]);
    VAR
      FinanceChargeMemoHeader@1000 : Record 302;
    BEGIN
      FinanceChargeMemoHeader.GET(No);
      LibraryERM.IssueFinanceChargeMemo(FinanceChargeMemoHeader);
    END;

    LOCAL PROCEDURE IssueReminder@77(CustomerNo@1004 : Code[20]);
    VAR
      ReminderHeader@1003 : Record 295;
      ReminderIssue@1000 : Codeunit 393;
    BEGIN
      ReminderHeader.SETRANGE("Customer No.",CustomerNo);
      ReminderHeader.FINDFIRST;
      ReminderIssue.Set(ReminderHeader,FALSE,WORKDATE);
      ReminderIssue.RUN;
    END;

    LOCAL PROCEDURE ModifyPurchaseHeader@46(VAR PurchaseHeader@1001 : Record 38;PurchaseLine@1000 : Record 39;VendorInvoiceNo@1002 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Blanket Order No.",PurchaseLine."Document No.");
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.FINDFIRST;
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      PurchaseHeader.VALIDATE("Vendor Invoice No.",VendorInvoiceNo);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifySalesHeaderWithMultipleAddress@140(VAR SalesHeader@1000 : Record 36);
    BEGIN
      SalesHeader.VALIDATE("Ship-to Address 2",'Address 2:' + SalesHeader."Sell-to Customer No.");
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifySalesOrderWithLocationCode@145(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37);
    BEGIN
      SalesHeader."Location Code" := '';
      SalesHeader.MODIFY(TRUE);
      SalesLine."Location Code" := '';
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PurchaseCopyDocument@40(PurchaseHeader@1000 : Record 38;DocumentNo@1003 : Code[20];DocumentType@1002 : Option);
    VAR
      CopyPurchaseDocument@1001 : Report 492;
    BEGIN
      CopyPurchaseDocument.SetPurchHeader(PurchaseHeader);
      CopyPurchaseDocument.InitializeRequest(DocumentType,DocumentNo,TRUE,FALSE);
      CopyPurchaseDocument.USEREQUESTPAGE(FALSE);
      CopyPurchaseDocument.RUN;
    END;

    LOCAL PROCEDURE RunPostBatchSalesOrder@102(SalesHeaderNo@1000 : Code[20]);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      COMMIT;  // Commit is used to avoid Test failure.
      SalesHeader.SETRANGE("No.",SalesHeaderNo);
      REPORT.RUN(REPORT::"Batch Post Sales Orders",TRUE,FALSE,SalesHeader);
    END;

    LOCAL PROCEDURE SetCheckPrepmtWhenPostingPurchase@92(CheckPrepmtwhenPosting@1000 : Boolean);
    VAR
      PurchasesPayablesSetup@1001 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Check Prepmt. when Posting",CheckPrepmtwhenPosting);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetCheckPrepmtWhenPostingSales@93(CheckPrepmtwhenPosting@1000 : Boolean);
    VAR
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Check Prepmt. when Posting",CheckPrepmtwhenPosting);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RemovePrepmtVATSetup@163(GLAccount@1000 : Record 15);
    VAR
      GenPostingSetup@1002 : Record 252;
      VATPostingSetup@1001 : Record 325;
    BEGIN
      VATPostingSetup.SETRANGE("VAT Bus. Posting Group",GLAccount."VAT Bus. Posting Group");
      VATPostingSetup.DELETEALL;
      GenPostingSetup.SETRANGE("Gen. Bus. Posting Group",GLAccount."Gen. Bus. Posting Group");
      GenPostingSetup.DELETEALL;
    END;

    LOCAL PROCEDURE RunBatchPostPurchaseOrders@49(No@1002 : Code[20];Receive@1012 : Boolean;Invoice@1013 : Boolean;PostingDate@1014 : Date;ReplacePostingDate@1015 : Boolean;ReplaceDocDate@1016 : Boolean;CalcInvDiscount@1017 : Boolean);
    VAR
      PurchaseHeader@1010 : Record 38;
      BatchPostPurchaseOrders@1008 : Report 496;
    BEGIN
      COMMIT;
      PurchaseHeader.SETRANGE("No.",No);
      BatchPostPurchaseOrders.SETTABLEVIEW(PurchaseHeader);
      BatchPostPurchaseOrders.InitializeRequest(Receive,Invoice,PostingDate,ReplacePostingDate,ReplaceDocDate,CalcInvDiscount);
      BatchPostPurchaseOrders.USEREQUESTPAGE(FALSE);
      BatchPostPurchaseOrders.RUN;
    END;

    LOCAL PROCEDURE RunBatchPostSalesReturnOrdersReport@123(No@1001 : Code[20];Receive@1002 : Boolean;Invoice@1003 : Boolean);
    VAR
      SalesHeader@1004 : Record 36;
      BatchPostSalesReturnOrders@1000 : Report 6655;
    BEGIN
      COMMIT;
      LibraryVariableStorage.Enqueue(Receive);
      LibraryVariableStorage.Enqueue(Invoice);
      SalesHeader.SETRANGE("No.",No);
      BatchPostSalesReturnOrders.SETTABLEVIEW(SalesHeader);
      BatchPostSalesReturnOrders.USEREQUESTPAGE(TRUE);
      BatchPostSalesReturnOrders.RUN;
    END;

    LOCAL PROCEDURE RunGetSalesOrders@42(SalesLine@1005 : Record 37);
    VAR
      RequisitionLine@1004 : Record 246;
      RequisitionWkshName@1003 : Record 245;
      GetSalesOrders@1002 : Report 698;
      RetrieveDimensionsFrom@1000 : 'Item,Sales Line';
    BEGIN
      FindRequisitionWkshName(RequisitionWkshName);
      RequisitionLine.INIT;
      RequisitionLine.VALIDATE("Worksheet Template Name",RequisitionWkshName."Worksheet Template Name");
      RequisitionLine.VALIDATE("Journal Batch Name",RequisitionWkshName.Name);

      SalesLine.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLine.SETRANGE("Document No.",SalesLine."Document No.");
      GetSalesOrders.SETTABLEVIEW(SalesLine);
      GetSalesOrders.SetReqWkshLine(RequisitionLine,0);
      GetSalesOrders.InitializeRequest(RetrieveDimensionsFrom::"Sales Line");
      GetSalesOrders.USEREQUESTPAGE(FALSE);
      GetSalesOrders.RUN;
    END;

    LOCAL PROCEDURE RunDeleteEmptyGLRegisters@88();
    VAR
      DeleteEmptyGLRegisters@1000 : Report 99;
    BEGIN
      DeleteEmptyGLRegisters.USEREQUESTPAGE(FALSE);
      DeleteEmptyGLRegisters.RUN;
    END;

    LOCAL PROCEDURE RunDeleteInvoicedSalesOrdersReport@110(DocumentType@1000 : Option;SalesHeaderNo@1002 : Code[20]);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      SalesHeader.SETRANGE("Document Type",DocumentType);
      SalesHeader.SETRANGE("No.",SalesHeaderNo);
      REPORT.RUN(REPORT::"Delete Invoiced Sales Orders",TRUE,FALSE,SalesHeader);
    END;

    LOCAL PROCEDURE RunCopyGeneralPostingSetup@73(GeneralPostingSetup@1001 : Record 252);
    VAR
      CopyGeneralPostingSetup@1000 : Report 87;
    BEGIN
      COMMIT;  // COMMIT required for batch report.
      CopyGeneralPostingSetup.SetGenPostingSetup(GeneralPostingSetup);
      CopyGeneralPostingSetup.RUN;
    END;

    LOCAL PROCEDURE RunCopyVATPostingSetup@172(VATPostingSetup@1001 : Record 325);
    VAR
      CopyVATPostingSetup@1000 : Report 85;
    BEGIN
      COMMIT;  // COMMIT required for batch report.
      CopyVATPostingSetup.SetVATSetup(VATPostingSetup);
      CopyVATPostingSetup.RUN;
    END;

    LOCAL PROCEDURE SalesCopyDocument@36(SalesHeader@1000 : Record 36;DocumentNo@1003 : Code[20];DocumentType@1002 : Option);
    VAR
      CopySalesDocument@1001 : Report 292;
    BEGIN
      CopySalesDocument.SetSalesHeader(SalesHeader);
      CopySalesDocument.InitializeRequest(DocumentType,DocumentNo,TRUE,FALSE);
      CopySalesDocument.USEREQUESTPAGE(FALSE);
      CopySalesDocument.RUN;
    END;

    LOCAL PROCEDURE SetupInvoiceDiscount@48(VAR VendorInvoiceDisc@1001 : Record 24);
    BEGIN
      // Required Random Value for "Discount %" fields value is not important.
      LibraryERM.CreateInvDiscForVendor(VendorInvoiceDisc,CreateVendor,'',0);
      VendorInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandDec(10,2));
      VendorInvoiceDisc.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SalesPostBatch@47(SalesHeader@1001 : Record 36;PostingDate@1002 : Date);
    VAR
      BatchPostSalesOrders@1000 : Report 296;
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeader.SETRANGE("No.",SalesHeader."No.");
      BatchPostSalesOrders.SETTABLEVIEW(SalesHeader);
      BatchPostSalesOrders.USEREQUESTPAGE(FALSE);
      BatchPostSalesOrders.InitializeRequest(TRUE,TRUE,PostingDate,TRUE,TRUE,FALSE);
      BatchPostSalesOrders.RUN;
    END;

    LOCAL PROCEDURE SelectSalesLineWithSpecialOrder@133(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("Special Order",TRUE);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectSalesLineWithDropShipment@141(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("Drop Shipment",TRUE);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SetupBatchPostPurchaseOrders@60(VAR PostingDate@1002 : Date;ReplacePostingDate@1011 : Boolean;ReplaceDocumentDate@1012 : Boolean) DocumentNo : Code[20];
    VAR
      PurchaseLine@1001 : Record 39;
      LibraryFiscalYear@1006 : Codeunit 131302;
    BEGIN
      // Setup: Create and Post Purchase Order.
      DocumentNo := CreateAndGetPurchaseDocumentNo(PurchaseLine,CreateVendor);
      PostingDate := LibraryFiscalYear.GetFirstPostingDate(TRUE);

      // Exercise.
      RunBatchPostPurchaseOrders(PurchaseLine."Document No.",TRUE,TRUE,PostingDate,ReplacePostingDate,ReplaceDocumentDate,FALSE);
    END;

    LOCAL PROCEDURE SuggestFinChargeMemoLine@27(FinanceChargeMemoHeaderNo@1000 : Code[20]);
    VAR
      FinanceChargeMemoHeader@1002 : Record 302;
      SuggestFinChargeMemoLines@1001 : Report 192;
    BEGIN
      FinanceChargeMemoHeader.SETRANGE("No.",FinanceChargeMemoHeaderNo);
      SuggestFinChargeMemoLines.SETTABLEVIEW(FinanceChargeMemoHeader);
      SuggestFinChargeMemoLines.USEREQUESTPAGE(FALSE);
      SuggestFinChargeMemoLines.RUN;
    END;

    LOCAL PROCEDURE UpdateArchiveOptionInSalesSetup@258(NewArchiveOrders@1001 : Boolean);
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Archive Quotes and Orders",NewArchiveOrders);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateArchiveOptionInPurchSetup@261(NewArchiveOrders@1000 : Boolean);
    VAR
      PurchPayablesSetup@1001 : Record 312;
    BEGIN
      PurchPayablesSetup.GET;
      PurchPayablesSetup.VALIDATE("Archive Quotes and Orders",NewArchiveOrders);
      PurchPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchLineQtyToReceive@169(PurchHeaderNo@1000 : Code[20];QtyToReceive@1002 : Decimal);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      WITH PurchaseLine DO BEGIN
        SETRANGE("Document No.",PurchHeaderNo);
        FINDFIRST;
        VALIDATE("Qty. to Receive",QtyToReceive);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE UpdateSalesLineQtyToShip@165(SalesHeaderNo@1000 : Code[20];QtyToShip@1002 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document No.",SalesHeaderNo);
        FINDFIRST;
        VALIDATE("Qty. to Ship",QtyToShip);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE FillGenPostingSetup@266(VAR GenPostingSetup@1000 : Record 252);
    BEGIN
      WITH GenPostingSetup DO BEGIN
        "Sales Pmt. Tol. Debit Acc." := LibraryERM.CreateGLAccountNo;
        "Sales Pmt. Tol. Credit Acc." := LibraryERM.CreateGLAccountNo;
        "Purch. Pmt. Tol. Debit Acc." := LibraryERM.CreateGLAccountNo;
        "Purch. Pmt. Tol. Credit Acc." := LibraryERM.CreateGLAccountNo;
        "Sales Prepayments Account" := LibraryERM.CreateGLAccountNo;
        "Purch. Prepayments Account" := LibraryERM.CreateGLAccountNo;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE UpdateVATIdentifierForVATpostingSetup@268(VAR VATPostingSetup@1000 : Record 325);
    BEGIN
      VATPostingSetup."VAT Identifier" := LibraryUtility.GenerateRandomCode(13,325);
      VATPostingSetup.MODIFY;
    END;

    LOCAL PROCEDURE UpdateCopyCommentsOnSalesPurchaseSetup@235();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
      PurchasesPayablesSetup@1001 : Record 312;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup."Copy Comments Order to Shpt." := TRUE;
      SalesReceivablesSetup.MODIFY;
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup."Copy Comments Order to Receipt" := TRUE;
      PurchasesPayablesSetup.MODIFY;
    END;

    LOCAL PROCEDURE CreateVATPostingSetup@170(VAR VATPostingSetup@1000 : Record 325);
    VAR
      VATBusPostingGroup@1001 : Record 323;
      VATProdPostingGroup@1002 : Record 324;
    BEGIN
      LibraryERM.CreateVATBusinessPostingGroup(VATBusPostingGroup);
      LibraryERM.CreateVATProductPostingGroup(VATProdPostingGroup);
      LibraryERM.CreateVATPostingSetup(VATPostingSetup,VATBusPostingGroup.Code,VATProdPostingGroup.Code);
    END;

    LOCAL PROCEDURE CreateLocation@78() : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreateRecordLink@196(SourceRecord@1000 : Variant) : Text[250];
    VAR
      RecordLink@1002 : Record 2000000068;
      RecRef@1001 : RecordRef;
    BEGIN
      RecRef.GETTABLE(SourceRecord);
      RecRef.ADDLINK(LibraryUtility.GenerateGUID);
      RecordLink.SETRANGE("Record ID",RecRef.RECORDID);
      RecordLink.FINDFIRST;
      EXIT(RecordLink.URL1);
    END;

    LOCAL PROCEDURE VerifyCurrencyOnIssuedReminder@98(CurrencyCode@1000 : Code[10];AmountRoundingPrecision@1001 : Decimal);
    VAR
      Currency@1003 : Record 4;
    BEGIN
      Currency.GET(CurrencyCode);
      Currency.TESTFIELD("Amount Rounding Precision",AmountRoundingPrecision);
    END;

    LOCAL PROCEDURE VerifyReminderLine@15(DocumentNo@1001 : Code[20];Amount@1003 : Decimal);
    VAR
      ReminderLine@1000 : Record 296;
      Assert@1002 : Codeunit 130000;
    BEGIN
      ReminderLine.SETRANGE("Document No.",DocumentNo);
      ReminderLine.SETRANGE(Type,ReminderLine.Type::"Customer Ledger Entry");
      ReminderLine.FINDFIRST;
      Assert.AreNearlyEqual(Amount,ReminderLine.Amount,LibraryERM.GetAmountRoundingPrecision,STRSUBSTNO(AmountErr,Amount));
    END;

    LOCAL PROCEDURE VerifyRequisitionLine@59(SalesLine@1001 : Record 37);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",SalesLine."No.");
      RequisitionLine.FINDFIRST;
      RequisitionLine.TESTFIELD(Quantity,SalesLine.Quantity);
      RequisitionLine.TESTFIELD("Sales Order No.",SalesLine."Document No.");
      RequisitionLine.TESTFIELD("Sales Order Line No.",SalesLine."Line No.");
      RequisitionLine.TESTFIELD("Sell-to Customer No.",SalesLine."Sell-to Customer No.");
    END;

    LOCAL PROCEDURE VerifyIssuedFinanceChargeMemo@25(PreAssignedNo@1000 : Code[20];Amount@1003 : Decimal);
    VAR
      IssuedFinChargeMemoLine@1001 : Record 305;
      IssuedFinChargeMemoHeader@1002 : Record 304;
    BEGIN
      IssuedFinChargeMemoHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      IssuedFinChargeMemoHeader.FINDFIRST;
      IssuedFinChargeMemoLine.SETRANGE("Finance Charge Memo No.",IssuedFinChargeMemoHeader."No.");
      IssuedFinChargeMemoLine.FINDFIRST;
      Assert.AreEqual(Amount,IssuedFinChargeMemoLine.Amount,STRSUBSTNO(AmountErr,Amount));
    END;

    LOCAL PROCEDURE VerifyFinanceChargeMemoLine@28(DocumentNo@1000 : Code[20];RemainingAmount@1003 : Decimal);
    VAR
      FinanceChargeMemoLine@1002 : Record 303;
    BEGIN
      FinanceChargeMemoLine.SETRANGE("Document No.",DocumentNo);
      FinanceChargeMemoLine.FINDFIRST;
      Assert.AreNearlyEqual(
        RemainingAmount,FinanceChargeMemoLine."Remaining Amount",LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(AmountErr,RemainingAmount));
    END;

    LOCAL PROCEDURE VerifyPurchasingCodeAndSpecialOrderOnPurchaseLine@117(SalesLine@1000 : Record 37;DocumentNo@1001 : Code[20]);
    VAR
      PurchaseLine@1003 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.SETRANGE("No.",SalesLine."No.");
      PurchaseLine.SETRANGE("Special Order Sales No.",SalesLine."Document No.");
      PurchaseLine.FINDFIRST;
      PurchaseLine.TESTFIELD("Purchasing Code",SalesLine."Purchasing Code");
      PurchaseLine.TESTFIELD("Special Order",SalesLine."Special Order");
    END;

    LOCAL PROCEDURE VerifyPurchasingCodeAndDropShipmentOnPurchLine@134(SalesLine@1000 : Record 37;DocumentNo@1001 : Code[20]);
    VAR
      PurchLine@1002 : Record 39;
    BEGIN
      PurchLine.SETRANGE("Document No.",DocumentNo);
      PurchLine.SETRANGE("No.",SalesLine."No.");
      PurchLine.SETRANGE("Sales Order No.",SalesLine."Document No.");
      PurchLine.FINDFIRST;
      PurchLine.TESTFIELD("Purchasing Code",SalesLine."Purchasing Code");
      PurchLine.TESTFIELD("Drop Shipment",SalesLine."Drop Shipment");
    END;

    LOCAL PROCEDURE VerifyWarehouseReceiptLine@99(PurchaseLine@1001 : Record 39;No@1002 : Code[20]);
    VAR
      WarehouseReceiptLine@1000 : Record 7317;
    BEGIN
      WarehouseReceiptLine.SETRANGE("No.",No);
      WarehouseReceiptLine.FINDFIRST;
      WarehouseReceiptLine.TESTFIELD("Source Document",WarehouseReceiptLine."Source Document"::"Purchase Order");
      WarehouseReceiptLine.TESTFIELD("Item No.",PurchaseLine."No.");
      WarehouseReceiptLine.TESTFIELD(Quantity,PurchaseLine.Quantity);
      WarehouseReceiptLine.TESTFIELD("Qty. to Receive",PurchaseLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseShipmentLine@181(SourceNo@1007 : Code[20];ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Document",WarehouseShipmentLine."Source Document"::"Sales Order");
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentLine.TESTFIELD("Item No.",ItemNo);
      WarehouseShipmentLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyValuesOnGenPostingSetupAllFields@80(GeneralPostingSetup@1000 : Record 252;SalesAccount@1011 : Code[20];SalesPmtTolDebitAcc@1004 : Code[20];SalesPmtTolCreditAcc@1005 : Code[20];PurchPmtTolDebitAcc@1006 : Code[20];PurchPmtTolCreditAcc@1007 : Code[20];SalesPrepaymentsAccount@1008 : Code[20];PurchPrepaymentsAccount@1009 : Code[20]);
    BEGIN
      WITH GeneralPostingSetup DO BEGIN
        GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
        Assert.AreEqual("Sales Account",SalesAccount,FIELDCAPTION("Sales Account"));
        Assert.AreEqual("Sales Pmt. Tol. Debit Acc.",SalesPmtTolDebitAcc,FIELDCAPTION("Sales Pmt. Tol. Debit Acc."));
        Assert.AreEqual("Sales Pmt. Tol. Credit Acc.",SalesPmtTolCreditAcc,FIELDCAPTION("Sales Pmt. Tol. Credit Acc."));
        Assert.AreEqual("Purch. Pmt. Tol. Debit Acc.",PurchPmtTolDebitAcc,FIELDCAPTION("Purch. Pmt. Tol. Debit Acc."));
        Assert.AreEqual("Purch. Pmt. Tol. Credit Acc.",PurchPmtTolCreditAcc,FIELDCAPTION("Purch. Pmt. Tol. Credit Acc."));
        Assert.AreEqual("Sales Prepayments Account",SalesPrepaymentsAccount,FIELDCAPTION("Sales Prepayments Account"));
        Assert.AreEqual("Purch. Prepayments Account",PurchPrepaymentsAccount,FIELDCAPTION("Purch. Prepayments Account"));
      END;
    END;

    LOCAL PROCEDURE VerifyValuesOnGenPostingSetupSelectedFields@230(GeneralPostingSetup@1000 : Record 252;PurchAccount@1001 : Code[20];COGSAccount@1002 : Code[20];DirectCostAppliedAccount@1003 : Code[20]);
    VAR
      GenPostingSetupSource@1012 : Record 252;
    BEGIN
      WITH GeneralPostingSetup DO BEGIN
        GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
        GenPostingSetupSource.GET(LibraryVariableStorage.DequeueText,LibraryVariableStorage.DequeueText);
        Assert.AreEqual("Sales Account",GenPostingSetupSource."Sales Account",FIELDCAPTION("Sales Account"));
        Assert.AreEqual("Purch. Account",PurchAccount,FIELDCAPTION("Purch. Account"));
        Assert.AreEqual("COGS Account",COGSAccount,FIELDCAPTION("COGS Account"));
        Assert.AreEqual("Direct Cost Applied Account",DirectCostAppliedAccount,FIELDCAPTION("Direct Cost Applied Account"));
      END;
    END;

    LOCAL PROCEDURE VerifyValuesOnVATPostingSetup@174(VATPostingSetup@1000 : Record 325;VATIdentifier@1001 : Code[10]);
    BEGIN
      VATPostingSetup.GET(VATPostingSetup."VAT Bus. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      VATPostingSetup.TESTFIELD("VAT Identifier",VATIdentifier);
    END;

    LOCAL PROCEDURE VerifyPurchShippingDetails@122(PurchHeader@1000 : Record 38;ShipToName@1001 : Text[50];ShipToAddress@1002 : Text[50]);
    BEGIN
      PurchHeader.TESTFIELD("Ship-to Name",ShipToName);
      PurchHeader.TESTFIELD("Ship-to Address",ShipToAddress);
    END;

    LOCAL PROCEDURE VerifyShipmentItemLedgerEntry@157(ItemNo@1002 : Code[20];CountryCode@1003 : Code[10]);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Document Type","Document Type"::"Sales Shipment");
        SETRANGE("Entry Type","Entry Type"::Sale);
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        Assert.AreEqual(CountryCode,"Country/Region Code",'');
      END;
    END;

    LOCAL PROCEDURE VerifyPartialDropShipmentSalesILE@175(ItemNo@1002 : Code[20];ExpAmount@1001 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Document Type","Document Type"::"Sales Shipment");
        SETRANGE("Entry Type","Entry Type"::Sale);
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        CALCFIELDS("Sales Amount (Expected)");
        Assert.AreEqual(
          ExpAmount,"Sales Amount (Expected)",
          STRSUBSTNO(ILEAmounValueErr,FIELDCAPTION("Sales Amount (Expected)")));
      END;
    END;

    LOCAL PROCEDURE VerifyPartialDropShipmentPurchaseILE@164(ItemNo@1002 : Code[20];ExpAmount@1001 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Document Type","Document Type"::"Purchase Receipt");
        SETRANGE("Entry Type","Entry Type"::Purchase);
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        CALCFIELDS("Purchase Amount (Expected)");
        Assert.AreEqual(
          ExpAmount,"Purchase Amount (Expected)",
          STRSUBSTNO(ILEAmounValueErr,FIELDCAPTION("Purchase Amount (Expected)")));
      END;
    END;

    LOCAL PROCEDURE VerifySalesHeaderArchive@179(DocumentType@1000 : Option;No@1002 : Code[20]);
    VAR
      SalesHeaderArchive@1001 : Record 5107;
    BEGIN
      SalesHeaderArchive.SETRANGE("Document Type",DocumentType);
      SalesHeaderArchive.SETRANGE("No.",No);
      SalesHeaderArchive.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyPurchHeaderArchive@183(DocumentType@1000 : Option;No@1002 : Code[20]);
    VAR
      PurchHeaderArchive@1001 : Record 5109;
    BEGIN
      PurchHeaderArchive.SETRANGE("Document Type",DocumentType);
      PurchHeaderArchive.SETRANGE("No.",No);
      PurchHeaderArchive.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyArchiveOfPurchOrder@64(PurchHeader@1001 : Record 38;ArchiveNumber@1000 : Integer);
    BEGIN
      PurchHeader.CALCFIELDS("No. of Archived Versions");
      PurchHeader.TESTFIELD("No. of Archived Versions",ArchiveNumber);
    END;

    LOCAL PROCEDURE VerifyArchiveOfSalesOrder@43(SalesHeader@1000 : Record 36;ArchiveNumber@1001 : Integer);
    BEGIN
      SalesHeader.CALCFIELDS("No. of Archived Versions");
      SalesHeader.TESTFIELD("No. of Archived Versions",ArchiveNumber);
    END;

    LOCAL PROCEDURE VerifyPostedSalesShipmentLink@217(CustomerNo@1004 : Code[20];ItemNo@1001 : Code[20];Link@1000 : Text);
    VAR
      SalesShipmentHeader@1002 : Record 110;
      SalesShipmentLine@1003 : Record 111;
      RecordLink@1005 : Record 2000000068;
    BEGIN
      SalesShipmentLine.SETRANGE("Sell-to Customer No.",CustomerNo);
      SalesShipmentLine.SETRANGE("No.",ItemNo);
      SalesShipmentLine.SETFILTER("Item Shpt. Entry No.",'<>0',0);
      SalesShipmentLine.FINDFIRST;
      SalesShipmentHeader.GET(SalesShipmentLine."Document No.");
      RecordLink.SETRANGE("Record ID",SalesShipmentHeader.RECORDID);
      RecordLink.FINDFIRST;
      RecordLink.TESTFIELD(URL1,Link);
    END;

    LOCAL PROCEDURE VerifyPostedPurchReceiptLink@218(VendorNo@1004 : Code[20];ItemNo@1003 : Code[20];Link@1002 : Text);
    VAR
      PurchRcptHeader@1000 : Record 120;
      PurchRcptLine@1001 : Record 121;
      RecordLink@1005 : Record 2000000068;
    BEGIN
      PurchRcptLine.SETRANGE("Buy-from Vendor No.",VendorNo);
      PurchRcptLine.SETRANGE("No.",ItemNo);
      PurchRcptLine.SETFILTER("Item Rcpt. Entry No.",'<>0',0);
      PurchRcptLine.FINDFIRST;
      PurchRcptHeader.GET(PurchRcptLine."Document No.");
      RecordLink.SETRANGE("Record ID",PurchRcptHeader.RECORDID);
      RecordLink.FINDFIRST;
      RecordLink.TESTFIELD(URL1,Link);
    END;

    [RequestPageHandler]
    PROCEDURE BatchPostSalesOrderRequestPageHandler@101(VAR BatchPostSalesOrders@1000 : TestRequestPage 296);
    BEGIN
      BatchPostSalesOrders.Ship.SETVALUE(TRUE);
      BatchPostSalesOrders.Invoice.SETVALUE(TRUE);
      BatchPostSalesOrders.PostingDate.SETVALUE(WORKDATE);
      BatchPostSalesOrders.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE BatchPostSalesReturnOrdersPageHandler@131(VAR BatchPostSalesReturnOrders@1000 : TestRequestPage 6655);
    BEGIN
      BatchPostSalesReturnOrders.ReceiveReq.SETVALUE(LibraryVariableStorage.DequeueBoolean);
      BatchPostSalesReturnOrders.InvReq.SETVALUE(LibraryVariableStorage.DequeueBoolean);
      BatchPostSalesReturnOrders.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CreatePickReportHandler@197(VAR CreatePickReqPage@1000 : TestRequestPage 7323);
    BEGIN
      CreatePickReqPage.CInvtPick.SETVALUE(TRUE);
      CreatePickReqPage.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE ExpectedMessageHandler@192(Message@1000 : Text[1024]);
    VAR
      ExpectedMessage@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);
      Assert.ExpectedMessage(ExpectedMessage,Message);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@11(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    [ModalPageHandler]
    PROCEDURE ModalFormHandler@20(VAR GetShipmentLines@1000 : Page 5708;VAR Response@1001 : Action);
    VAR
      SalesShipmentHeader@1002 : Record 110;
      SalesShipmentLine@1003 : Record 111;
    BEGIN
      // Run Get Shipment Lines Form.
      SalesShipmentHeader.SETRANGE("Order No.",LibraryVariableStorage.DequeueText);
      SalesShipmentHeader.FINDFIRST;
      SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHeader."No.");
      SalesShipmentLine.FINDFIRST;
      GetShipmentLines.SETTABLEVIEW(SalesShipmentLine);
      GetShipmentLines.SETRECORD(SalesShipmentLine);
      GetShipmentLines.CreateLines;
    END;

    [ModalPageHandler]
    PROCEDURE SourceDocumentsPageHandler@113(VAR SourceDocuments@1000 : Page 5793;VAR Response@1001 : Action);
    VAR
      WarehouseRequest@1002 : Record 5765;
    BEGIN
      WarehouseRequest.SETRANGE("Source Document",WarehouseRequest."Source Document"::"Purchase Order");
      WarehouseRequest.SETRANGE("Source No.",LibraryVariableStorage.DequeueText);
      WarehouseRequest.FINDFIRST;
      SourceDocuments.SETRECORD(WarehouseRequest);
      Response := ACTION::LookupOK;
    END;

    [RequestPageHandler]
    PROCEDURE DateCompressGenLedgerHandler@68(VAR DateCompressGeneralLedger@1000 : TestRequestPage 98);
    VAR
      DateComprRegister@1002 : Record 87;
    BEGIN
      // Perform Date Compression with Retain field is set to True.
      DateCompressGeneralLedger.Control1.SETVALUE(LibraryFiscalYear.GetLastPostingDate(TRUE));
      DateCompressGeneralLedger.EndingDate.SETVALUE(LibraryFiscalYear.GetLastPostingDate(FALSE));
      DateCompressGeneralLedger.Control3.SETVALUE(DateComprRegister."Period Length"::Week);
      DateCompressGeneralLedger.Control5.SETVALUE(TRUE);
      DateCompressGeneralLedger.Control6.SETVALUE(TRUE);
      DateCompressGeneralLedger.Control7.SETVALUE(TRUE);
      DateCompressGeneralLedger.Control8.SETVALUE(TRUE);
      DateCompressGeneralLedger.Control11.SETVALUE(TRUE);
      DateCompressGeneralLedger.Control12.ASSISTEDIT;
      DateCompressGeneralLedger.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DimensionSelectionHandler@67(VAR DimensionSelectionMultiple@1000 : TestPage 562);
    BEGIN
      // Set Dimension Selection Multiple for all the rows.
      DimensionSelectionMultiple.FIRST;
      REPEAT
        DimensionSelectionMultiple.Selected.SETVALUE(TRUE);
      UNTIL NOT DimensionSelectionMultiple.NEXT;
      DimensionSelectionMultiple.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@72(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE CopyGeneralPostingSetupHandler@84(VAR CopyGeneralPostingSetup@1000 : TestRequestPage 87);
    VAR
      GenPostingSetupSource@1001 : Record 252;
    BEGIN
      GenPostingSetupSource.SETFILTER("Sales Account",'<>%1','');
      GenPostingSetupSource.SETFILTER("Purch. Account",'<>%1','');
      GenPostingSetupSource.SETFILTER("COGS Account",'<>%1','');
      GenPostingSetupSource.SETFILTER("Direct Cost Applied Account",'<>%1','');
      LibraryERM.FindGeneralPostingSetup(GenPostingSetupSource);
      LibraryVariableStorage.Enqueue(GenPostingSetupSource."Gen. Bus. Posting Group");
      LibraryVariableStorage.Enqueue(GenPostingSetupSource."Gen. Prod. Posting Group");
      CopyGeneralPostingSetup.GenBusPostingGroup.SETVALUE(GenPostingSetupSource."Gen. Bus. Posting Group");
      CopyGeneralPostingSetup.GenProdPostingGroup.SETVALUE(GenPostingSetupSource."Gen. Prod. Posting Group");
      CopyGeneralPostingSetup.Copy.SETVALUE(SelectionRef::"Selected fields");
      CopyGeneralPostingSetup.SalesAccounts.SETVALUE(LibraryVariableStorage.DequeueBoolean);
      CopyGeneralPostingSetup.PurchaseAccounts.SETVALUE(LibraryVariableStorage.DequeueBoolean);
      CopyGeneralPostingSetup.InventoryAccounts.SETVALUE(LibraryVariableStorage.DequeueBoolean);
      CopyGeneralPostingSetup.ManufacturingAccounts.SETVALUE(LibraryVariableStorage.DequeueBoolean);
      CopyGeneralPostingSetup.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CopyGeneralPostingSetupHandlerWithQueue@171(VAR CopyGeneralPostingSetup@1000 : TestRequestPage 87);
    BEGIN
      CopyGeneralPostingSetup.GenBusPostingGroup.SETVALUE(LibraryVariableStorage.DequeueText);
      CopyGeneralPostingSetup.GenProdPostingGroup.SETVALUE(LibraryVariableStorage.DequeueText);
      CopyGeneralPostingSetup.Copy.SETVALUE(SelectionRef::"All fields");
      CopyGeneralPostingSetup.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CopyVATPostingSetupHandlerWithQueue@176(VAR CopyVATPostingSetup@1000 : TestRequestPage 85);
    BEGIN
      CopyVATPostingSetup.VATBusPostingGroup.SETVALUE(LibraryVariableStorage.DequeueText);
      CopyVATPostingSetup.VATProdPostingGroup.SETVALUE(LibraryVariableStorage.DequeueText);
      CopyVATPostingSetup.Copy.SETVALUE(SelectionRef::"All fields");

      CopyVATPostingSetup.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE PostBatchMessageHandler@100(Message@1000 : Text[1024]);
    BEGIN
      Assert.ExpectedMessage(STRSUBSTNO(OrderMsg,0,1),Message);
    END;

    [ModalPageHandler]
    PROCEDURE SalesListPageHandler@106(VAR SalesList@1000 : TestPage 45);
    BEGIN
      SalesList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GetShipmentLinesPageHandler@95(VAR GetShipmentLines@1000 : TestPage 5708);
    BEGIN
      GetShipmentLines.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE DeleteInvoicedSalesOrdersHandler@109(VAR DeleteInvoicedSalesOrders@1000 : TestRequestPage 299);
    BEGIN
      DeleteInvoicedSalesOrders.OK.INVOKE;
    END;

    BEGIN
    {
      Check the functionalities of different Batch Reports.
      1.  Test Delete Invalid Blanket Sales Orders Report.
      2.  Test Delete Invalid Blanket Purchase Orders Report.
      3.  Test Delete Archived Purchase Order Versions Report.
      4.  Test Delete Invoiced Sales Orders Report.
      5.  Run Create Reminders Batch Job and Check Interest Amount after Post Invoice from General Journal Line.
      6.  Run Issue Finance Charge Memo Batch Job on Created Finance Charge Memo and Check Amount on that.
      7.  Run Create Finance Charge Memo Batch Job on Posted General Line and Verify it.
      8.  Run Suggest Finance Charge Memo Line Batch Job on Posted General Line and Verify it.
      9.  Check Sales Invoice Line when Copy Document has been done from Sales Order.
      10. Check Purchase Invoice Line when Copy Document has been done from Purchase Order.
      11. Check Sales Order Copy Document Error On Release.
      12. Check Purchase Order Copy Document Error On Release.
      13. Test Requisition Line after running the Get Sales Orders Batch Job.
      14. Test Warehouse Receipt Line after running the Get Source Documents Batch Job.
      15. Create and post a Sales Order using Batch Post Sales Order and check dates on posted sales invoice.
      16. Check Batch Post Purchase Order Report with Receive TRUE.
      17. Check Batch Post Purchase Order Report with Blank Posting Date and Invoice TRUE.
      18. Check Batch Post Purchase Order Report with Blank Posting Date and Receive and Invoice TRUE.
      19. Check Batch Post Purchase Order Report with Replace Posting Date Option.
      20. Check Batch Post Purchase Order Report with Replace Document Date Option.
      21. Check Batch Post Purchase Order Report with Invoice Discount Option.
      22. Test and verify Date Compress General Ledger Report functionality.
      23. Test and verify Delete Empty G/L Registers Report functionality.
      24. Test and verify functionality of Copy General Posting Setup with copy Option as All fields.
      25. Test and verify functionality of Copy General Posting Setup with copy Option as Selected fields.
      26. Test and verify functionality of Copy VAT Posting Setup with copy Option as All fields.
      27. Test to validate Amount Rounding Precision on Currency of Issued Reminder after create Reminder with Currency.
      28. Verify Message Populated after running Batch Sales Order.
      29. Verify Message Populated after running Batch Purchase Order.
      30. Verify Purchase Line exist with Purchasing Code and Special Order After Get Special Orders.
      31. Check that Sales Order can not be deleted after Posting Sales Invoice with Get shipment Lines.
      32. Check that Purchase Order can be deleted after running Delete Invoiced Sales Orders Report.
      33. Verify Posted Sales Return Order using Batch Post as Receive.
      34. Verify Posted Sales Return Order using Batch Post as Receive and Invoice.
      35. Verify  Ship-to Name in Purchase Order shows right after Requisition Worksheets Get Sales Order And Carry Out Action Message.
      36. Verify  Ship-to Name in Purchase Order shows right after Purchase Order Get Special Order directly.
      37. Verify  Ship-to Name in Purchase Order shows right after Purchase Order Get Drop Shipment directly.
      38. Verify Quantity of Purchase Order after Requisition Worksheets Get Drop Shipment with multiple Ship-to-Address And Carry Out Action Message.
      39. Verify Quantity of Purchase Order after Requisition Worksheets Get Special Order with multiple Ship-to-Address And Carry Out Action Message.
      40. Verify Quantity of Purchase Order after Requisition Worksheets Get Special Order with the same Location Code And Carry Out Action Message.
      41. Verify Quantity of Purchase Order after Requisition Worksheets Get Special Order with different Location Code And Carry Out Action Message.
      42. Verify  ILE's Country/Region Code after Post Sales Order with Drop Shipment and Ship-to Code
      43. Verify  ILE's Country/Region Code after Post Purchase Order with Drop Shipment and Ship-to Code
      44. Verify Assembly Order can be deleted automatically after running Delete Invoiced Sales Orders Report.
      45. Verify ILE amount after partial posting Purchase Order in case of Drop Shipment
      46. Verify ILE amount after partial posting Sales Order in case of Drop Shipment

        Covers Test Cases for WI - 120554
        ---------------------------------------------------
        Test Function Name                   TFS ID
        ---------------------------------------------------
        DeleteInvdBlanketSalesOrder           128982
        DeleteInvoicedSalesOrder              128988
        DeleteInvdBlanketPurchaseOrder        128992
        DeleteArchivedPurchaseOrder           129044

        Covers Test Cases for WI - 205829
        ---------------------------------------------------
        Test Function Name                   TFS ID
        ---------------------------------------------------
        CreateInvoiceAndReminder              128975
        CreateIssueFinanceChargeMemo          128980
        CreateFinanceChargeMemo               128978
        SuggestFinanceChargeMemo              128979

        Covers Test Cases for WI - 219037
        ---------------------------------------------------
        Test Function Name                   TFS ID
        ---------------------------------------------------
        CopyDocumentOnSalesInvoice           127124,127126
        CopyDocumentOnPurchInvoice           127124,127125
        CopyDocumentOnSalesOrder             127124,127128
        CopyDocumentOnPurchOrder             127124,127127

        TFS_TS_ID = 238096
        Covers Test cases:
        -------------------------------------------
        Test Function Name                   TFS ID
        -------------------------------------------
        GetSalesOrdersReport                 129005
        GetSourceDocumentsReport             129082

        TFS_TS_ID = 238088
        Covers Test cases:
        -------------------------------------------
        Test Function Name                   TFS ID
        -------------------------------------------
        BatchPostSalesOrderReplaceDate       121590

        TFS_TS_ID = 245277
        Covers Test cases:
        -------------------------------------------------------------------------
        Test Function Name                                              TFS ID
        -------------------------------------------------------------------------
        BatchPostPurchOrderReceive,BatchPostPurchOrderInvoice,
        BatchPostPurchOrderPostDate,BatchPostPurchOrderRepPostDate,
        BatchPostPurchOrdeRepDocDate,BatchPostPurchOrderInvDisc        125319

        TFS_TS_ID = 251017
        Covers Test cases:
        -------------------------------------------
        Test Function Name                   TFS ID
        -------------------------------------------
        DateCompressGeneralLedgerBatch       128971

        TFS_TS_ID = 251019
        Covers Test cases:
        -------------------------------------------
        Test Function Name                   TFS ID
        -------------------------------------------
        DeleteEmptyGLRegistersBatch          128972

        TFS_TS_ID = 264281
        Covers Test cases:
        ----------------------------------------------------------------------------------------
        Test Function Name                                                                TFS ID
        ----------------------------------------------------------------------------------------
        CopyGeneralPostingSetupWithAllFields,CopyGeneralPostingSetupWithSelectedFields    128961

        Covers Test cases:
        ----------------------------------------------------------------------------------------
        Test Function Name                                                                TFS ID
        ----------------------------------------------------------------------------------------
        ReminderWithAmountRoundingPrecisionOnCurrency                                     293142

        BUG_ID = 288738
        Covers Test cases:
        -------------------------------------------------
        Test Function Name                         TFS ID
        -------------------------------------------------
        RunSalesBatchJob,RunPurchaseBatchJob       288737

        BUG_ID = 314904
        Covers Test cases:
        --------------------------------------------------------------------------------------------------
        Test Function Name                                                                 TFS ID
        --------------------------------------------------------------------------------------------------
        PurchaseLineWithSalesPurchasingCode,DeleteSalesOrderAfterGetShipmentLines,
        DeletePurchaseOrderAfterRunningDeleteInvoicedSalesOrders                            314780

        Workitem ID: 315338
        ----------------------------------------------------------------------------------------
        Test Function Name                                                                TFS ID
        ----------------------------------------------------------------------------------------
        SalesRetOrdWithBatchPostAsReceive, SalesRetOrdWithBatchPostAsReceiveAndInv        128209

        Covers Test cases: 333578
        --------------------------------------------------------------------------------------------------
        Test Function Name                                                                 TFS ID
        --------------------------------------------------------------------------------------------------
        ReqWkshGetSalesOrderAndCarryOutActionMsg
        PurchOrderRunGetSpecialOrder
        PurchOrderRunGetDropShipment

        Covers Test cases for Sicily Code Defect
        --------------------------------------------------------------------------------------------------
        Test Function Name                                                                 TFS ID
        --------------------------------------------------------------------------------------------------
        ReqWkshGetDropShipWithMultipleAddressAndCarryOutActionMsg                          49977
        ReqWkshGetSpecOrderWithMultipleAddressAndCarryOutActionMsg                         49977
        ReqWkshGetSpecOrderAndCarryOutActionMsg                                            49977
        ReqWkshGetSpecOrderWithDifferentLocationAndCarryOutActionMsg                       49977

        Workitem ID: 59773
        --------------------------------------------------------------------------------------------------
        Test Function Name                                                                 TFS ID
        --------------------------------------------------------------------------------------------------
        DropShipmentWithShipToCodeAndSalesOrderPost
        DropShipmentWithShipToCodeAndPurchOrderPost

        Covers Test cases: 88214
        --------------------------------------------------------------------------------------------------
        Test Function Name                                                                 TFS ID
        --------------------------------------------------------------------------------------------------
        DeleteAssemblyOrderAutomaticallyAfterRunningDeleteInvoicedSalesOrders              88214

        DropShipmentPurchOrderPartialPost,
        DropShipmentSalesOrderPartialPost                                                  104418
    }
    END.
  }
}

