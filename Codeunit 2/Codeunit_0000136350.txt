OBJECT Codeunit 136350 UT T Job
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 169=rimd,
                TableData 1005=rimd;
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Job@1003 : Record 167;
      JobTask@1002 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      Assert@1000 : Codeunit 130000;
      Text001@1004 : TextConst 'ENU=Rolling back changes...';
      LibraryERM@1013 : Codeunit 131300;
      LibraryJob@1006 : Codeunit 131920;
      LibraryUtility@1007 : Codeunit 131000;
      LibraryDimension@1010 : Codeunit 131001;
      LibraryRandom@1009 : Codeunit 130440;
      IsInitialized@1005 : Boolean;
      IncorrectSourceIDErr@1008 : TextConst 'ENU=Incorrect Source ID.';
      JobTaskDimDoesNotExistErr@1011 : TextConst 'ENU=Job Task Dimension does not exist.';
      JobTaskDimExistsErr@1012 : TextConst 'ENU=Job Task Dimension exists.';
      TimeSheetLinesErr@1014 : TextConst '@@@=You cannot delete job JOB001 because it has open or submitted time sheet lines.;ENU=You cannot delete job %1 because it has open or submitted time sheet lines.';

    LOCAL PROCEDURE Initialize@11();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE SetUp@1(ApplyUsageLink@1001 : Boolean);
    VAR
      JobWIPMethod@1002 : Record 1006;
      LibraryJob@1000 : Codeunit 131920;
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Apply Usage Link",ApplyUsageLink);
      JobWIPMethod.FINDFIRST;
      Job.VALIDATE("WIP Method",JobWIPMethod.Code);
      Job.MODIFY;

      LibraryJob.CreateJobTask(Job,JobTask);

      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
    END;

    LOCAL PROCEDURE TearDown@2();
    BEGIN
      CLEAR(Job);
      CLEAR(JobTask);
      CLEAR(JobPlanningLine);
      ASSERTERROR ERROR(Text001);
      IsInitialized := FALSE;
    END;

    [Test]
    PROCEDURE TestInitialization@3();
    VAR
      JobsSetup@1000 : Record 315;
      JobWIPMethod@1002 : Record 1006;
      LibraryJob@1001 : Codeunit 131920;
      Method@1003 : 'Completed Contract,Cost of Sales,Cost Value,POC,Sales Value';
    BEGIN
      // Verify that Apply Usage Link is initialized correctly.

      // Verify that Apply Usage Link is not set by default, if not set in Jobs Setup.
      Initialize;
      JobsSetup.GET;
      JobsSetup.VALIDATE("Apply Usage Link by Default",FALSE);
      JobsSetup.MODIFY;
      LibraryJob.CreateJob(Job);
      Assert.IsFalse(Job."Apply Usage Link",'Apply Usage link is not FALSE by default.');

      TearDown;

      // Verify that Apply Usage Link is set by default, if set in Jobs Setup.
      Initialize;
      JobsSetup.GET;
      JobsSetup.VALIDATE("Apply Usage Link by Default",TRUE);
      JobsSetup.MODIFY;
      LibraryJob.CreateJob(Job);
      Assert.IsTrue(Job."Apply Usage Link",'Apply Usage link is not TRUE by default.');

      // Verify that the Default WIP Method is set by default, if set in Jobs Setup.
      JobsSetup.GET;
      LibraryJob.GetJobWIPMethod(JobWIPMethod,Method::"Cost Value");
      JobsSetup.VALIDATE("Default WIP Method",JobWIPMethod.Code);
      JobsSetup.VALIDATE("Default WIP Posting Method",JobsSetup."Default WIP Posting Method"::"Per Job Ledger Entry");
      JobsSetup.MODIFY;
      LibraryJob.CreateJob(Job);
      Assert.AreEqual(Job."WIP Method",JobWIPMethod.Code,'The WIP Method is not set to the correct default value.');

      // Verify that the Default WIP Posting Method is set by default, if set in Jobs Setup.
      Assert.AreEqual(Job."WIP Posting Method"::"Per Job Ledger Entry",Job."WIP Posting Method",
        'The WIP Posting Method is not set to the correct default value.');

      TearDown;
    END;

    [Test]
    PROCEDURE TestFieldApplyUsageLink@4();
    VAR
      JobLedgerEntry@1000 : Record 169;
      LibraryJob@1001 : Codeunit 131920;
    BEGIN
      Initialize;
      SetUp(TRUE);

      // Verify that Apply Usage Link can be checked, as long as no Usage has been posted.
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::"Both Schedule and Contract",
        JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
      Job.VALIDATE("Apply Usage Link",TRUE);
      Assert.IsTrue(Job."Apply Usage Link",
        'Apply Usage link cannot be checked, even if no Job Ledger Entries of type Usage exist.');

      // Verify that all Job Planning Lines of type schedule have Usage Link enabled, after the Job's Apply Usage Link was enabled.
      JobPlanningLine.SETRANGE("Job No.",Job."No.");
      JobPlanningLine.SETRANGE("Schedule Line",TRUE);
      JobPlanningLine.SETRANGE("Usage Link",FALSE);
      Assert.IsFalse(JobPlanningLine.FINDFIRST,'Some Job Planning Lines were not updated with Usage Link.');

      // Verify that Apply Usage Link cannot be checked, once Usage has been posted.
      Job.VALIDATE("Apply Usage Link",FALSE);
      Job.MODIFY;
      JobLedgerEntry.INIT;
      JobLedgerEntry."Job No." := Job."No.";
      JobLedgerEntry.INSERT;

      ASSERTERROR Job.VALIDATE("Apply Usage Link",TRUE);

      TearDown;
    END;

    [Test]
    PROCEDURE TestFieldWIPWarnings@6();
    VAR
      JobWIPWarning@1000 : Record 1007;
    BEGIN
      Initialize;
      SetUp(TRUE);

      // Verify that WIP Warnings is false when no warnings exist.
      Assert.IsFalse(Job."WIP Warnings",'WIP Warning is true, even if no warnings exist.');

      // Verify that WIP Warnings is true when warnings exist.
      JobWIPWarning.INIT;
      JobWIPWarning."Job No." := Job."No.";
      JobWIPWarning.INSERT;
      Job.CALCFIELDS("WIP Warnings");
      Assert.IsTrue(Job."WIP Warnings",'WIP Warning is false, even if warnings exist.');

      TearDown;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE TestFieldWIPMethod@10();
    VAR
      JobWIPMethod@1000 : Record 1006;
    BEGIN
      Initialize;
      SetUp(TRUE);

      // Verify that update of WIP Method is reflected on Job Tasks as well.
      JobWIPMethod.FINDFIRST;
      JobTask.SETRANGE("Job No.",Job."No.");
      JobTask.FINDFIRST;
      JobTask.VALIDATE("WIP-Total",JobTask."WIP-Total"::Total);
      JobTask.MODIFY;
      Job.VALIDATE("WIP Method",JobWIPMethod.Code);
      JobTask.FINDFIRST;
      Assert.AreEqual(JobWIPMethod.Code,JobTask."WIP Method",'The WIP Method set on the Job is not propagated to the Job Task Line.');

      WITH Job DO BEGIN
        // Validate that Job WIP Method without "WIP Sales" can't be set when WIP Posting Method is Per Job Ledger Entry.
        CreateJobWIPMethod(JobWIPMethod,FALSE,TRUE);
        VALIDATE("WIP Posting Method","WIP Posting Method"::"Per Job Ledger Entry");
        ASSERTERROR VALIDATE("WIP Method",JobWIPMethod.Code);

        // Validate that Job WIP Method without "WIP Costs" can't be set when WIP Posting Method is Per Job Ledger Entry.
        CreateJobWIPMethod(JobWIPMethod,TRUE,FALSE);
        VALIDATE("WIP Posting Method","WIP Posting Method"::"Per Job Ledger Entry");
        ASSERTERROR VALIDATE("WIP Method",JobWIPMethod.Code);
      END;

      TearDown;
    END;

    [Test]
    PROCEDURE TestFieldWIPPostingMethod@14();
    VAR
      JobLedgerEntry@1000 : Record 169;
      JobWIPEntry@1001 : Record 1004;
      JobWIPMethod@1002 : Record 1006;
    BEGIN
      Initialize;
      SetUp(TRUE);

      WITH Job DO BEGIN
        // Validate that WIP Posting Method can't be changed back to Per Job, once entries have been posted with Per Job Ledger Entry.
        VALIDATE("WIP Posting Method","WIP Posting Method"::"Per Job Ledger Entry");
        JobLedgerEntry.INIT;
        JobLedgerEntry."Job No." := "No.";
        JobLedgerEntry."Amt. Posted to G/L" := RANDOM(1000);
        JobLedgerEntry.INSERT;
        ASSERTERROR VALIDATE("WIP Posting Method","WIP Posting Method"::"Per Job");

        // Validate that WIP Posting Method can't be changed, if Job WIP Entries exist.
        CLEAR(JobWIPEntry);
        JobWIPEntry.INIT;
        IF JobWIPEntry.FINDLAST THEN
          JobWIPEntry."Entry No." += 1
        ELSE
          JobWIPEntry."Entry No." := 1;
        JobWIPEntry."Job No." := "No.";
        JobWIPEntry."WIP Entry Amount" := RANDOM(1000);
        JobWIPEntry.INSERT;
        ASSERTERROR VALIDATE("WIP Posting Method","WIP Posting Method"::"Per Job Ledger Entry");

        // Validate that the Job WIP Method has WIP Sales and WIP Costs enabled, when WIP Posting Method is set to Per Job Ledger Entry.
        VALIDATE("WIP Posting Method","WIP Posting Method"::"Per Job");
        CreateJobWIPMethod(JobWIPMethod,FALSE,TRUE);
        VALIDATE("WIP Method",JobWIPMethod.Code);
        ASSERTERROR VALIDATE("WIP Posting Method","WIP Posting Method"::"Per Job Ledger Entry");

        CreateJobWIPMethod(JobWIPMethod,TRUE,FALSE);
        VALIDATE("WIP Method",JobWIPMethod.Code);
        ASSERTERROR VALIDATE("WIP Posting Method","WIP Posting Method"::"Per Job Ledger Entry");

        CreateJobWIPMethod(JobWIPMethod,TRUE,TRUE);
        VALIDATE("WIP Method",JobWIPMethod.Code);
        VALIDATE("WIP Posting Method","WIP Posting Method"::"Per Job Ledger Entry");
        Assert.AreEqual("WIP Posting Method"::"Per Job Ledger Entry","WIP Posting Method",'WIP Posting Method could not be set.');
      END;

      TearDown;
    END;

    [Test]
    PROCEDURE TestFunctionsCalcRecognized@5();
    VAR
      JobWIPEntry@1000 : Record 1004;
      JobWIPGLEntry@1001 : Record 1005;
    BEGIN
      Initialize;
      SetUp(TRUE);

      // Verify that CalcAccWIPCostsAmount, CalcAccWIPSalesAmount, CalcRecognizedProfitAmount, CalcRecognizedProfitPercentage,
      // CalcRecognizedProfitGLAmount and CalcRecognProfitGLPercentage calculate the correct amount.
      WITH Job DO BEGIN
        CLEAR(JobWIPEntry);
        JobWIPEntry.INIT;
        IF JobWIPEntry.FINDLAST THEN
          JobWIPEntry."Entry No." += 1
        ELSE
          JobWIPEntry."Entry No." := 1;
        JobWIPEntry."Job No." := "No.";
        JobWIPEntry.Type := JobWIPEntry.Type::"Recognized Costs";
        JobWIPEntry.Reverse := FALSE;
        JobWIPEntry."WIP Entry Amount" := RANDOM(1000);
        JobWIPEntry.INSERT;

        CLEAR(JobWIPEntry);
        JobWIPEntry.INIT;
        IF JobWIPEntry.FINDLAST THEN
          JobWIPEntry."Entry No." += 1
        ELSE
          JobWIPEntry."Entry No." := 1;
        JobWIPEntry."Job No." := "No.";
        JobWIPEntry.Type := JobWIPEntry.Type::"Recognized Sales";
        JobWIPEntry.Reverse := FALSE;
        JobWIPEntry."WIP Entry Amount" := RANDOM(1000);
        JobWIPEntry.INSERT;

        CLEAR(JobWIPGLEntry);
        IF JobWIPGLEntry.FINDLAST THEN
          JobWIPGLEntry."Entry No." += 1
        ELSE
          JobWIPGLEntry."Entry No." := 1;
        JobWIPGLEntry.INIT;
        JobWIPGLEntry."Job No." := "No.";
        JobWIPGLEntry.Type := JobWIPGLEntry.Type::"Recognized Costs";
        JobWIPGLEntry.Reverse := FALSE;
        JobWIPGLEntry."WIP Entry Amount" := RANDOM(1000);
        JobWIPGLEntry.INSERT;

        CLEAR(JobWIPGLEntry);
        JobWIPGLEntry.INIT;
        IF JobWIPGLEntry.FINDLAST THEN
          JobWIPGLEntry."Entry No." += 1
        ELSE
          JobWIPGLEntry."Entry No." := 1;
        JobWIPGLEntry."Job No." := "No.";
        JobWIPGLEntry.Type := JobWIPGLEntry.Type::"Recognized Sales";
        JobWIPGLEntry.Reverse := FALSE;
        JobWIPGLEntry."WIP Entry Amount" := RANDOM(1000);
        JobWIPGLEntry.INSERT;

        JobTask."Recognized Sales Amount" := RANDOM(1000);
        JobTask."Recognized Costs Amount" := RANDOM(1000);
        JobTask."Recognized Sales G/L Amount" := RANDOM(1000);
        JobTask."Recognized Costs G/L Amount" := RANDOM(1000);
        JobTask.MODIFY;

        CALCFIELDS("Calc. Recog. Sales Amount","Calc. Recog. Costs Amount",
          "Calc. Recog. Sales G/L Amount","Calc. Recog. Costs G/L Amount",
          "Total WIP Cost Amount","Total WIP Sales Amount",
          "Applied Costs G/L Amount","Applied Sales G/L Amount");

        Assert.AreEqual("Total WIP Cost Amount" + "Applied Costs G/L Amount",CalcAccWIPCostsAmount,
          'CalcAccWIPCostsAmount calculates the wrong amount.');

        Assert.AreEqual("Total WIP Sales Amount" - "Applied Sales G/L Amount",CalcAccWIPSalesAmount,
          'CalcAccWIPSalesAmount calculates the wrong amount.');

        Assert.AreEqual("Calc. Recog. Sales Amount" - "Calc. Recog. Costs Amount",CalcRecognizedProfitAmount,
          'CalcRecognizedProfitAmount calculates the wrong amount.');

        Assert.AreEqual((("Calc. Recog. Sales Amount" - "Calc. Recog. Costs Amount") / "Calc. Recog. Sales Amount") * 100,
          CalcRecognizedProfitPercentage,'CalcRecognizedProfitPercentage calculates the wrong amount.');

        Assert.AreEqual("Calc. Recog. Sales G/L Amount" - "Calc. Recog. Costs G/L Amount",CalcRecognizedProfitGLAmount,
          'CalcRecognizedProfitGLAmount calculates the wrong amount.');

        Assert.AreEqual((("Calc. Recog. Sales G/L Amount" - "Calc. Recog. Costs G/L Amount") / "Calc. Recog. Sales G/L Amount") * 100,
          CalcRecognProfitGLPercentage,'CalcRecognProfitGLPercentage calculates the wrong amount.');
      END;

      TearDown;
    END;

    [Test]
    PROCEDURE TestFunctionCurrencyUpdate@8();
    VAR
      JobPlanningLineInvoice@1000 : Record 1022;
      Currency@1001 : Record 4;
      CurrencyExchangeRate@1002 : Record 330;
    BEGIN
      Initialize;
      SetUp(TRUE);

      // Make sure you can change the currency code on a Job Planning Line through this function.
      Currency.INIT;
      Currency.Code := 'TEST';
      Currency.INSERT;

      CurrencyExchangeRate.INIT;
      CurrencyExchangeRate."Currency Code" := Currency.Code;
      CurrencyExchangeRate."Starting Date" := WORKDATE;
      CurrencyExchangeRate."Exchange Rate Amount" := 1;
      CurrencyExchangeRate."Relational Exch. Rate Amount" := 1;
      CurrencyExchangeRate.INSERT;

      Job."Currency Code" := Currency.Code;
      Job.CurrencyUpdatePlanningLines;

      JobPlanningLine.SETRANGE("Job No.",Job."No.");
      JobPlanningLine.FINDFIRST;

      Assert.AreEqual('TEST',JobPlanningLine."Currency Code",
        'The Currency Code on the Job Planning Line was not set correctly.');

      // Make sure you can't change the currency when the line is transferred to a Sales Invoice.
      CreateJobPlanningLineInvoice(JobPlanningLineInvoice,1);
      JobPlanningLine.CALCFIELDS("Qty. Transferred to Invoice");
      ASSERTERROR Job.CurrencyUpdatePlanningLines;

      TearDown;
    END;

    [Test]
    PROCEDURE TestReservEntrySourceIDOnJobRename@12();
    VAR
      Job@1000 : Record 167;
      JobPlanningReservEntry@1001 : Record 337;
      JobJnlLineReservEntry@1002 : Record 337;
      NewJobNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Reservations]
      // [SCENARIO 361919] Source ID of Reservation Entries is renamed when rename Job No.

      // [GIVEN] Job = "X"
      // [GIVEN] Reservation Entry with Source ID = "X" and Source Type = "Job Planning Line"
      // [GIVEN] Reservation Entry with Source ID = "X" and Source Type = "Job Journal Line"
      Initialize;
      LibraryJob.CreateJob(Job);
      CreateReservEntry(JobPlanningReservEntry,DATABASE::"Job Planning Line",Job."No.");
      CreateReservEntry(JobJnlLineReservEntry,DATABASE::"Job Journal Line",Job."No.");
      NewJobNo := LibraryUtility.GenerateGUID;
      // [WHEN] Job is renamed from "X" to "Y"
      Job.RENAME(NewJobNo);
      // [THEN] Source ID of Reservation Entry with Source Type = "Job Planning Line" is "Y"
      JobPlanningReservEntry.FIND;
      Assert.AreEqual(NewJobNo,JobPlanningReservEntry."Source ID",IncorrectSourceIDErr);
      // [THEN] Source ID of Reservation Entry with Source Type = "Job Journal Line" is "Y"
      JobJnlLineReservEntry.FIND;
      Assert.AreEqual(NewJobNo,JobJnlLineReservEntry."Source ID",IncorrectSourceIDErr);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE JobTaskDimensionOnValidateJobGlobalDimension@13();
    VAR
      DimValue1@1000 : Record 349;
      DimValue2@1002 : Record 349;
    BEGIN
      // [FEATURE] [Dimension]
      // [SCENARIO 363274] Job Task Global Dimensions are updated when validate global dimension in Job

      Initialize;
      // [GIVEN] Job and Job Task with empty global dimensions
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      // [GIVEN] Global Dimension Value Codes "X" and "Y"
      LibraryDimension.CreateDimensionValue(DimValue1,LibraryERM.GetGlobalDimensionCode(1));
      LibraryDimension.CreateDimensionValue(DimValue2,LibraryERM.GetGlobalDimensionCode(2));

      // [WHEN] Set Global Dimension Values "X" and "Y" in Job, confirm update for lines
      UpdateJobGlobalDimensionCode(Job,DimValue1.Code,DimValue2.Code);

      // [THEN] Job Task Global Dimensions is equal to Job Global Dimension Values "X" and "Y"
      VerifyJobTaskDimension(JobTask,DimValue1."Dimension Code",DimValue1.Code);
      VerifyJobTaskDimension(JobTask,DimValue2."Dimension Code",DimValue2.Code);
      VerifyJobTaskGlobalDimensions(JobTask,DimValue1.Code,DimValue2.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmFalseHandler)]
    PROCEDURE JobTaskDimensionOnValidateJobGlobalDimensionCancelConfirm@18();
    VAR
      DimValue1@1000 : Record 349;
      DimValue2@1002 : Record 349;
    BEGIN
      // [FEATURE] [Dimension]
      // [SCENARIO 363274] Job Task Global Dimensions are not updated when validate global dimension in Job and cancel update for lines

      Initialize;
      // [GIVEN] Job and Job Task with empty global dimensions
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      // [GIVEN] Global Dimension Value Codes "X" and "Y"
      LibraryDimension.CreateDimensionValue(DimValue1,LibraryERM.GetGlobalDimensionCode(1));
      LibraryDimension.CreateDimensionValue(DimValue2,LibraryERM.GetGlobalDimensionCode(2));

      // [WHEN] Set Global Dimension Values "X" and "Y" in Job, cancel update for lines
      UpdateJobGlobalDimensionCode(Job,DimValue1.Code,DimValue2.Code);

      // [THEN] No Job Task Dimension
      VerifyJobTaskDimDoesNotExist(JobTask);
      VerifyJobTaskGlobalDimensions(JobTask,'','');
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@7(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmFalseHandler@16(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    LOCAL PROCEDURE CreateJobWIPMethod@19(VAR JobWIPMethod@1000 : Record 1006;WIPCost@1001 : Boolean;WIPSales@1002 : Boolean);
    BEGIN
      JobWIPMethod.INIT;
      JobWIPMethod.Code := 'UTTJOB';
      JobWIPMethod."WIP Cost" := WIPCost;
      JobWIPMethod."WIP Sales" := WIPSales;
      JobWIPMethod.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateJobPlanningLineInvoice@9(VAR JobPlanningLineInvoice@1000 : Record 1022;Qty@1001 : Decimal);
    BEGIN
      JobPlanningLineInvoice.INIT;
      JobPlanningLineInvoice."Job No." := JobPlanningLine."Job No.";
      JobPlanningLineInvoice."Job Task No." := JobPlanningLine."Job Task No.";
      JobPlanningLineInvoice."Job Planning Line No." := JobPlanningLine."Line No.";
      JobPlanningLineInvoice."Document Type" := JobPlanningLineInvoice."Document Type"::"Posted Invoice";
      JobPlanningLineInvoice."Document No." := 'TEST';
      JobPlanningLineInvoice."Line No." := 10000;
      JobPlanningLineInvoice."Quantity Transferred" := Qty;
      JobPlanningLineInvoice."Transferred Date" := WORKDATE;
      JobPlanningLineInvoice.INSERT;
    END;

    LOCAL PROCEDURE CreateReservEntry@15(VAR ReservEntry@1002 : Record 337;TableID@1000 : Integer;SourceID@1001 : Code[20]);
    VAR
      RecRef@1004 : RecordRef;
    BEGIN
      WITH ReservEntry DO BEGIN
        INIT;
        RecRef.GETTABLE(ReservEntry);
        "Entry No." := LibraryUtility.GetNewLineNo(RecRef,FIELDNO("Entry No."));
        "Source Type" := TableID;
        "Source Subtype" := LibraryRandom.RandInt(5);
        "Source ID" := SourceID;
        "Source Ref. No." := LibraryRandom.RandInt(100);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockTimeSheetWithLine@31(VAR TimeSheetLine@1000 : Record 951);
    VAR
      TimeSheetHeader@1001 : Record 950;
    BEGIN
      WITH TimeSheetHeader DO BEGIN
        INIT;
        "No." := LibraryUtility.GenerateGUID;
        "Owner User ID" := USERID;
        "Starting Date" := WORKDATE;
        "Ending Date" := WORKDATE + 7;
        INSERT;
      END;

      WITH TimeSheetLine DO BEGIN
        INIT;
        "Time Sheet No." := TimeSheetHeader."No.";
        "Line No." := 10000;
        Type := Type::Job;
        "Job No." := Job."No.";
        Status := Status::Open;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE UpdateTimeSheetLineStatus@33(VAR TimeSheetLine@1000 : Record 951;NewStatus@1001 : Option);
    BEGIN
      TimeSheetLine.Status := NewStatus;
      TimeSheetLine.MODIFY;
    END;

    LOCAL PROCEDURE UpdateJobGlobalDimensionCode@29(VAR Job@1000 : Record 167;DimValue1Code@1001 : Code[20];DimValue2Code@1002 : Code[20]);
    BEGIN
      Job.VALIDATE("Global Dimension 1 Code",DimValue1Code);
      Job.VALIDATE("Global Dimension 2 Code",DimValue2Code);
      Job.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyJobTaskDimension@40(JobTask@1000 : Record 1001;DimensionCode@1001 : Code[20];DimValueCode@1004 : Code[20]);
    VAR
      JobTaskDimension@1002 : Record 1002;
    BEGIN
      Assert.IsTrue(
        JobTaskDimension.GET(JobTask."Job No.",JobTask."Job Task No.",DimensionCode),JobTaskDimDoesNotExistErr);
      Assert.AreEqual(
        DimValueCode,JobTaskDimension."Dimension Value Code",JobTaskDimension.FIELDCAPTION("Dimension Value Code"));
    END;

    LOCAL PROCEDURE VerifyJobTaskDimDoesNotExist@24(JobTask@1000 : Record 1001);
    VAR
      JobTaskDimension@1001 : Record 1002;
    BEGIN
      JobTaskDimension.SETRANGE("Job No.",JobTask."Job No.");
      JobTaskDimension.SETRANGE("Job Task No.",JobTask."Job Task No.");
      Assert.IsTrue(JobTaskDimension.ISEMPTY,JobTaskDimExistsErr);
    END;

    LOCAL PROCEDURE VerifyJobTaskGlobalDimensions@21(VAR JobTask@1000 : Record 1001;DimValue1Code@1001 : Code[20];DimValue2Code@1002 : Code[20]);
    BEGIN
      JobTask.FIND;
      Assert.AreEqual(
        DimValue1Code,JobTask."Global Dimension 1 Code",JobTask.FIELDCAPTION("Global Dimension 1 Code"));
      Assert.AreEqual(
        DimValue2Code,JobTask."Global Dimension 2 Code",JobTask.FIELDCAPTION("Global Dimension 2 Code"));
    END;

    [Test]
    PROCEDURE TestDeleteJobWithOpenTimeSheetLines@25();
    VAR
      TimeSheetLine@1000 : Record 951;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 217317] Job cannot be deleted if there are Open Time Sheet Lines for that job.
      Initialize;

      // [GIVEN] A Job.
      SetUp(FALSE);

      // [GIVEN] Time Sheet Header with Line.
      // [GIVEN] Time Sheet Line Type = Job.
      MockTimeSheetWithLine(TimeSheetLine);

      // [GIVEN] Time Sheet Line Status = Open.
      TimeSheetLine.TESTFIELD(Status,TimeSheetLine.Status::Open);

      // [WHEN] Delete the Job.
      ASSERTERROR Job.DELETE(TRUE);

      // [THEN] The Job is not deleted and error is invoked: 'You cannot delete job Job."No." because it has open or submitted time sheet lines.'
      Assert.ExpectedError(STRSUBSTNO(TimeSheetLinesErr,Job."No."));
    END;

    [Test]
    PROCEDURE TestDeleteJobWithSubmittedTimeSheetLines@34();
    VAR
      TimeSheetLine@1001 : Record 951;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 217317] Job cannot be deleted if there are Submitted Time Sheet Lines for that job.
      Initialize;

      // [GIVEN] A Job.
      SetUp(FALSE);

      // [GIVEN] Time Sheet Header with Line.
      // [GIVEN] Time Sheet Line Type = Job.
      MockTimeSheetWithLine(TimeSheetLine);

      // [GIVEN] Time Sheet Line Status = Submitted.
      UpdateTimeSheetLineStatus(TimeSheetLine,TimeSheetLine.Status::Submitted);
      TimeSheetLine.TESTFIELD(Status,TimeSheetLine.Status::Submitted);

      // [WHEN] Delete the Job.
      ASSERTERROR Job.DELETE(TRUE);

      // [THEN] The Job is not deleted and error is invoked: 'You cannot delete job Job."No." because it has open or submitted time sheet lines.'
      Assert.ExpectedError(STRSUBSTNO(TimeSheetLinesErr,Job."No."));
    END;

    [Test]
    PROCEDURE TestDeleteJobWithApprovedTimeSheetLines@30();
    VAR
      TimeSheetLine@1000 : Record 951;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 217317] Job can be deleted when there are Time Sheet Lines for that Job with Status = Approved.
      Initialize;

      // [GIVEN] A Job.
      SetUp(FALSE);

      // [GIVEN] Time Sheet Header with Line.
      // [GIVEN] Time Sheet Line Type = Job.
      MockTimeSheetWithLine(TimeSheetLine);

      // [GIVEN] Time Sheet Line Status = Approved.
      UpdateTimeSheetLineStatus(TimeSheetLine,TimeSheetLine.Status::Approved);
      TimeSheetLine.TESTFIELD(Status,TimeSheetLine.Status::Approved);

      // [WHEN] Delete the Job.
      Job.SETRECFILTER;
      Job.DELETE(TRUE);

      // [THEN] The Job is deleted.
      Assert.RecordIsEmpty(Job);
    END;

    [Test]
    PROCEDURE TestDeleteJobWithRejectedTimeSheetLines@28();
    VAR
      TimeSheetLine@1000 : Record 951;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 217317] Job can be deleted when there are Time Sheet Lines for that Job with Status = Rejected.
      Initialize;

      // [GIVEN] A Job.
      SetUp(FALSE);

      // [GIVEN] Time Sheet Header with Line.
      // [GIVEN] Time Sheet Line Type = Job.
      MockTimeSheetWithLine(TimeSheetLine);

      // [GIVEN] Time Sheet Line Status = Rejected.
      UpdateTimeSheetLineStatus(TimeSheetLine,TimeSheetLine.Status::Rejected);
      TimeSheetLine.TESTFIELD(Status,TimeSheetLine.Status::Rejected);

      // [WHEN] Delete the Job.
      Job.SETRECFILTER;
      Job.DELETE(TRUE);

      // [THEN] The Job is deleted.
      Assert.RecordIsEmpty(Job);
    END;

    BEGIN
    {
      // [FEATURE] [Job]
      This unit test codeunit tests all fields added / modified during implementation of
      feature 92820 - "Planning and Execution Jobs and Service" and feature 92860 - "Jobs and WIP Compliance".

      In order to make the unit test orthogonal (i.e. independent) to other functionalities and tests,
      data will be purely artificial (i.e. not real data created by other functionalities such as posting routines and the like).

      Code snippets:
      IF NOT CONFIRM('%1',TRUE,VAR) THEN ERROR('');

      --------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      Test TFS ID
      --------------------------------------------------------------------------------------------------------------------
      TestReservEntrySourceIDOnJobRename                                                                      362172
    }
    END.
  }
}

