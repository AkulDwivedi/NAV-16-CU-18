OBJECT Codeunit 144049 FUV 4.0-4.1
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Vendor@1500016 : Record 23;
      CompanyInformation@1500017 : Record 79;
      Assert@1500000 : Codeunit 130000;
      LibraryERM@1500001 : Codeunit 131300;
      LibraryPurchase@1500002 : Codeunit 130512;
      LibraryUtility@1500003 : Codeunit 131000;
      LibraryTDS@1500005 : Codeunit 143000;
      LibraryVariableStorage@1500007 : Codeunit 131004;
      LibraryReportDataset@1500008 : Codeunit 131007;
      LibraryTextFileValidation@1500009 : Codeunit 131003;
      LibraryRandom@1500010 : Codeunit 130440;
      ValueNotFoundErr@1500011 : TextConst 'ENU=Value not found.';
      LibraryJournals@1500014 : Codeunit 131306;
      PANNo@1500004 : Code[10];
      RowMustExistErr@1500012 : TextConst 'ENU=Row must exist.';
      DeductorAddress@1500013 : Text;
      GeneralJournalTemplateName@1500015 : Code[10];

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler,Form27QRequestPageHandler,GenerateeTDSRequestPageHandler)]
    PROCEDURE F27qRRRNoOnFirstFiledETDS@1500020();
    VAR
      IncomeTaxAccountingPeriodSetup@1500000 : Record 16501;
      ExportedFileName@1500001 : Text;
      FinancialYear@1500002 : Code[6];
      TDSNatureOfDeductionCode@1500004 : Code[10];
      Resident@1500005 : Boolean;
      LastProvNo@1500006 : Text;
    BEGIN
      // Verify that field No. 52 in the batch header is populated with 'N'

      Initialize;
      Resident := FALSE;
      FinancialYear := SetupFiscalYear(WORKDATE);
      TDSNatureOfDeductionCode := SetupTDS(FALSE);

      ExportedFileName :=
        CreateQuarterBatchHeader(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q1,Resident,FALSE);
      LastProvNo := GetLastProvNo;

      // Verify: Verify that field No. 52 is populated in the batch header
      VerifyExportedFileProvisonNo(ExportedFileName,'N',LastProvNo);

      // Tear Down
      RollbackChangesMadeToDataBase;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler,Form27QRequestPageHandler,GenerateeTDSRequestPageHandler,GenerateFileeTDSRequestPageHandler)]
    PROCEDURE F27qRRROnSecondFiledETDS@1500021();
    VAR
      IncomeTaxAccountingPeriodSetup@1500000 : Record 16501;
      ExportedFileName@1500002 : Text;
      FinancialYear@1500003 : Code[6];
      TDSNatureOfDeductionCode@1500005 : Code[10];
      Resident@1500006 : Boolean;
      LastProvNo@1500007 : Text;
    BEGIN
      // Verify that field No. 52 in the batch header is populated with 'Y' for the second quarter of the year

      Initialize;
      Resident := FALSE;
      FinancialYear := SetupFiscalYear(WORKDATE);
      TDSNatureOfDeductionCode := SetupTDS(FALSE);

      CreateQuarterBatchHeader(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q1,Resident,TRUE);
      LastProvNo := GetLastProvNo;
      ExportedFileName :=
        CreateQuarterBatchHeader(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q2,Resident,FALSE);

      // Verify: Verify that field No. 52 is populated in the batch header
      VerifyExportedFileProvisonNo(ExportedFileName,'Y',LastProvNo);

      // Tear Down
      RollbackChangesMadeToDataBase;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler,Form26QRequestPageHandler,GenerateeTDSRequestPageHandler,GenerateFileeTDSRequestPageHandler)]
    PROCEDURE F26qRRRNoAfterMissedETDS@1500022();
    VAR
      IncomeTaxAccountingPeriodSetup@1500000 : Record 16501;
      ExportedFileName@1500001 : Text;
      FinancialYear@1500002 : Code[6];
      TDSNatureOfDeductionCode@1500004 : Code[10];
      Resident@1500005 : Boolean;
      LastProvNo@1500006 : Text;
    BEGIN
      // Verify that field No. 52 in the batch header is populated with 'Y' for the third quarter of the year, and the provision receipt number is collected from Q1

      // Setup: Create setup for Income Tax Accounting Period and Post Purchase orders.
      Initialize;
      Resident := TRUE;
      FinancialYear := SetupFiscalYear(WORKDATE);
      TDSNatureOfDeductionCode := SetupTDS(TRUE);

      CreateQuarterBatchHeader(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q1,Resident,TRUE);
      LastProvNo := GetLastProvNo;
      ExportedFileName :=
        CreateQuarterBatchHeader(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q3,Resident,FALSE);

      // Verify: Verify that field No. 52 is populated in the batch header
      VerifyExportedFileProvisonNo(ExportedFileName,'Y',LastProvNo);

      // Tear Down
      RollbackChangesMadeToDataBase;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler,Form26QRequestPageHandler,GenerateeTDSRequestPageHandler,GenerateFileeTDSRequestPageHandler)]
    PROCEDURE F26qRRRNoOnNextFiledETDS@1500023();
    VAR
      IncomeTaxAccountingPeriodSetup@1500000 : Record 16501;
      ExportedFileName@1500001 : Text;
      FinancialYear@1500002 : Code[6];
      TDSNatureOfDeductionCode@1500004 : Code[10];
      Resident@1500005 : Boolean;
      LastProvNo@1500006 : Text;
    BEGIN
      //1.2

      // Setup: Create setup for Income Tax Accounting Period and Post Purchase orders.
      Initialize;
      Resident := TRUE;
      FinancialYear := SetupFiscalYear(WORKDATE);
      TDSNatureOfDeductionCode := SetupTDS(TRUE);

      CreateQuarterBatchHeader(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q3,Resident,TRUE);
      CreateQuarterBatchHeader(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q4,Resident,TRUE);
      LastProvNo := GetLastProvNo;

      FinancialYear := SetupFiscalYear(CALCDATE('<CQ+1Y>',WORKDATE));

      ExportedFileName :=
        CreateQuarterBatchHeader(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q1,Resident,FALSE);

      // Verify: Verify that field No. 52 is populated in the batch header
      VerifyExportedFileProvisonNo(ExportedFileName,'Y',LastProvNo);

      // Tear Down
      RollbackChangesMadeToDataBase;
      RollbackIncomeTaxPeriodSetup;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo,MessageHandler,Form26QRequestPageHandler,GenerateeTDSRequestPageHandler)]
    PROCEDURE F26qRRRNoAfterNotFiledETDSNeg@1500024();
    VAR
      IncomeTaxAccountingPeriodSetup@1500000 : Record 16501;
      FinancialYear@1500002 : Code[6];
      TDSNatureOfDeductionCode@1500004 : Code[10];
      Resident@1500005 : Boolean;
    BEGIN
      //1.4

      // Setup: Create setup for Income Tax Accounting Period and Post Purchase orders.
      Initialize;
      Resident := TRUE;
      FinancialYear := SetupFiscalYear(WORKDATE);
      TDSNatureOfDeductionCode := SetupTDS(TRUE);

      CreateQuarterBatchHeader(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q1,Resident,FALSE);
      CreateQuarterBatchHeader(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q2,Resident,FALSE);

      // Tear Down
      RollbackChangesMadeToDataBase;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler,Form26QRequestPageHandler,GenerateeTDSRequestPageHandler)]
    PROCEDURE F26qRRRNoAfterNotFiledETDSPos@1500025();
    VAR
      IncomeTaxAccountingPeriodSetup@1500000 : Record 16501;
      ExportedFileName@1500001 : Text;
      FinancialYear@1500002 : Code[6];
      TDSNatureOfDeductionCode@1500004 : Code[10];
      Resident@1500005 : Boolean;
      LastProvNo@1500006 : Text;
    BEGIN
      //1.5

      // Setup: Create setup for Income Tax Accounting Period and Post Purchase orders.
      Initialize;
      Resident := TRUE;
      FinancialYear := SetupFiscalYear(WORKDATE);
      TDSNatureOfDeductionCode := SetupTDS(TRUE);

      CreateQuarterBatchHeader(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q1,Resident,FALSE);
      LastProvNo := GetLastProvNo;
      ExportedFileName :=
        CreateQuarterBatchHeader(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q2,Resident,FALSE);

      // Verify: Verify that field No. 52 is populated in the batch header
      VerifyExportedFileProvisonNo(ExportedFileName,'N',LastProvNo);

      // Tear Down
      RollbackChangesMadeToDataBase;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler,Form26QRequestPageHandler,GenerateeTDSRequestPageHandler,GenerateFileeTDSRequestPageHandler)]
    PROCEDURE F26qCorrectNoOfEntries@1500026();
    VAR
      IncomeTaxAccountingPeriodSetup@1500000 : Record 16501;
      ExportedFileName@1500001 : Text;
      FinancialYear@1500002 : Code[6];
      TDSNatureOfDeductionCode@1500004 : Code[10];
      Resident@1500005 : Boolean;
    BEGIN
      //2.1

      // Setup: Create setup for Income Tax Accounting Period and Post Purchase orders.
      Initialize;
      Resident := TRUE;
      FinancialYear := SetupFiscalYear(WORKDATE);
      TDSNatureOfDeductionCode := SetupTDS(TRUE);

      CreateQuarterBatchHeader(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q1,Resident,TRUE);
      PostPurchasDocPerQuarter(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q1);

      ExportedFileName :=
        CreateQuarterBatchHeader(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q2,Resident,FALSE);

      // Verify:
      VerifyExportedFile(ExportedFileName,'1',2,6);

      // Tear Down
      RollbackChangesMadeToDataBase;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler,Form26QRequestPageHandler,GenerateeTDSRequestPageHandler,GenerateFileeTDSRequestPageHandler,GenerateRevisedeTDSRequestPageHandler)]
    PROCEDURE RevF26qRRRNoOnNextFiledETDS@1500083();
    VAR
      IncomeTaxAccountingPeriodSetup@1500000 : Record 16501;
      ExportedFileName@1500001 : Text;
      FinancialYear@1500002 : Code[6];
      TDSNatureOfDeductionCode@1500004 : Code[10];
      Resident@1500005 : Boolean;
      LastProvNo@1500006 : Text;
    BEGIN
      //1.6

      // Setup: Create setup for Income Tax Accounting Period and Post Purchase orders.
      Initialize;
      Resident := TRUE;
      FinancialYear := SetupFiscalYear(WORKDATE);
      TDSNatureOfDeductionCode := SetupTDS(TRUE);

      CreateQuarterBatchHeader(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q3,Resident,TRUE);
      CreateQuarterBatchHeader(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q4,Resident,TRUE);
      LastProvNo := GetLastProvNo;

      PostPurchasDocPerQuarter(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q4);
      GenerateRevisedeTDSUsingPage(FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q4,Resident);

      FinancialYear := SetupFiscalYear(CALCDATE('<CQ+1Y>',WORKDATE));

      ExportedFileName :=
        CreateQuarterBatchHeader(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxAccountingPeriodSetup.Quarter::Q1,Resident,FALSE);

      // Verify: Verify that field No. 52 is populated in the batch header
      VerifyExportedFileProvisonNo(ExportedFileName,'Y',LastProvNo);

      // Tear Down
      RollbackChangesMadeToDataBase;
      RollbackIncomeTaxPeriodSetup;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler,Form27QRequestPageHandler,GenerateeTDSRequestPageHandler,GenerateFileeTDSRequestPageHandler,GenerateRevisedeTDSRequestPageHandler,Correct27QRequestPageHandler,CorrectDeductorPageHandler,RevisedForm27QRequestPageHandler)]
    PROCEDURE Form27QwithRevisedeTDS@1500000();
    VAR
      IncomeTaxPeriodSetup@1500000 : Record 16501;
      FinancialYear@1500002 : Code[6];
      TDSNatureOfDeductionCode@1500004 : Code[10];
      Resident@1500005 : Boolean;
    BEGIN
      // [SCENARIO 164334] Validate generation of revised e-TDS for Non Residents (27Q) in file format with the mandatory fields
      // [FEATURE] [GENERATE Revised e-TDS]

      // [GIVEN] Created Income Tax Accounting Period & TDS Setup for Non Residents

      Initialize;
      Resident := FALSE;
      FinancialYear := SetupFiscalYear(WORKDATE);
      TDSNatureOfDeductionCode := SetupTDS(Resident);
      DeductorAddress := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10);

      // [WHEN] Create & Post Purchase document, Pay TDS, Run Form27Q and Generate Revised eTDS
      CreateQuarterBatchHeader(TDSNatureOfDeductionCode,FinancialYear,IncomeTaxPeriodSetup.Quarter::Q1,Resident,TRUE);
      Correct27QEntires(FinancialYear,IncomeTaxPeriodSetup.Quarter::Q1);
      PrintRevisedForm27Q(FinancialYear,IncomeTaxPeriodSetup.Quarter::Q1);
      GenerateRevisedeTDSUsingPage(FinancialYear,IncomeTaxPeriodSetup.Quarter::Q1,Resident);

      // [THEN] Address of Deductor is the new updated value in generated file.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Batch_Header__Deductor_Address_',DeductorAddress);
      Assert.IsTrue(LibraryReportDataset.GetNextRow,RowMustExistErr);

      RollbackChangesMadeToDataBase;
      RollbackIncomeTaxPeriodSetup;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler,Form26QRequestPageHandler,GenerateeTDSRequestPageHandler,GenerateFileeTDSRequestPageHandler,GeneralJournalTemplateHandler)]
    PROCEDURE Form26QwithQuarterThresholdlimit@1500005();
    VAR
      TDSAmount@1500010 : Decimal;
      Quarter@1500006 : ' ,Q1,Q2,Q3,Q4';
      FinancialYear@1500002 : Code[6];
      TDSNatureOfDeductionCode@1500004 : Code[10];
      Resident@1500005 : Boolean;
      FirstQuarterAmount@1500001 : Decimal;
      SecondQuarterAmount@1500003 : Decimal;
      ThirdQuarterAmount@1500011 : Decimal;
      FirstDocument@1500007 : Code[20];
      SecondDocument@1500008 : Code[20];
      ThirdDocument@1500009 : Code[20];
    BEGIN
      // [SCENARIO 163850] Validate Form 26Q for quarter where Threshold limit is exceeded in the previous quarter
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period & TDS Setup for Residents

      Initialize;
      Resident := TRUE;
      FinancialYear := SetupFiscalYear(WORKDATE);
      TDSNatureOfDeductionCode := SetupTDS(Resident);
      FirstQuarterAmount := LibraryRandom.RandDec(1000,2);
      SecondQuarterAmount := LibraryRandom.RandDec(2000,2);
      ThirdQuarterAmount := LibraryRandom.RandDec(3000,2);
      UpdateThresholdAmountandOverlook(TDSNatureOfDeductionCode,FirstQuarterAmount + SecondQuarterAmount);

      // [WHEN] Create & Post Bank Payment, Pay TDS, Run Form27Q and Generate Revised eTDS
      FirstDocument :=
        PostBankPaymentPerQuarter(TDSNatureOfDeductionCode,Quarter::Q1,FirstQuarterAmount,FALSE,TDSAmount);
      SecondDocument :=
        PostBankPaymentPerQuarter(TDSNatureOfDeductionCode,Quarter::Q2,SecondQuarterAmount,FALSE,TDSAmount);
      ThirdDocument :=
        PostBankPaymentPerQuarter(TDSNatureOfDeductionCode,Quarter::Q3,ThirdQuarterAmount,TRUE,TDSAmount);
      PostForm26Q27Q(FinancialYear,Quarter::Q3,Resident);
      GenerateeTDSUsingPage(FinancialYear,Quarter::Q3,Resident);
      GenerateFileeTDS(FinancialYear,Quarter::Q3,Resident);

      // [THEN] Posted TDS Amount is Zero for first and Second Payment
      VerifyTDSEntry(FirstDocument,0);
      VerifyTDSEntry(SecondDocument,0);
      VerifyTDSEntry(ThirdDocument,TDSAmount);

      RollbackChangesMadeToDataBase;
      RollbackIncomeTaxPeriodSetup;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler,Form26QRequestPageHandler,GenerateeTDSRequestPageHandler,GenerateFileeTDSRequestPageHandler,GeneralJournalTemplateHandler)]
    PROCEDURE Form26QwithPartyAndThresholdlimit@1500009();
    VAR
      TDSAmount@1500010 : Decimal;
      Quarter@1500006 : ' ,Q1,Q2,Q3,Q4';
      FinancialYear@1500002 : Code[6];
      TDSNatureOfDeductionCode@1500004 : Code[10];
      Resident@1500005 : Boolean;
      FirstQuarterAmount@1500001 : Decimal;
      SecondQuarterAmount@1500003 : Decimal;
      FirstDocument@1500007 : Code[20];
      SecondDocument@1500008 : Code[20];
      ExportedFileName@1500000 : Text;
    BEGIN
      // [SCENARIO 163842,163843] Validate Form 26Q for quarter where Threshold limit is reached during quarter
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period & TDS Setup for Residents
      Initialize;
      Resident := TRUE;
      FinancialYear := SetupFiscalYear(WORKDATE);
      TDSNatureOfDeductionCode := SetupTDSParty(Resident);
      FirstQuarterAmount := LibraryRandom.RandDec(30000,2);
      SecondQuarterAmount := LibraryRandom.RandDec(40000,2);
      UpdateThresholdAmountandOverlook(TDSNatureOfDeductionCode,FirstQuarterAmount);

      // [WHEN] Create & Post Bank Payment, Pay TDS, Run Form27Q and Generate eTDS
      FirstDocument :=
        PostBankPaymentPerQuarterWithParty(TDSNatureOfDeductionCode,Quarter::Q1,FirstQuarterAmount,FALSE,TDSAmount);
      SecondDocument :=
        PostBankPaymentPerQuarterWithParty(TDSNatureOfDeductionCode,Quarter::Q1,SecondQuarterAmount,TRUE,TDSAmount);
      PostForm26Q27Q(FinancialYear,Quarter::Q1,Resident);
      ExportedFileName := GenerateeTDSUsingPage(FinancialYear,Quarter::Q1,Resident);
      GenerateFileeTDS(FinancialYear,Quarter::Q1,Resident);

      // [THEN] Posted TDS Amount is Zero for first document.
      VerifyTDSEntry(FirstDocument,0);
      VerifyTDSEntry(SecondDocument,TDSAmount);
      VerifyExportedFile(ExportedFileName,'1',2,6);

      RollbackChangesMadeToDataBase;
      RollbackIncomeTaxPeriodSetup;
    END;

    LOCAL PROCEDURE Initialize@1500034();
    BEGIN
      LibraryRandom.SetSeed(1);
      LibraryVariableStorage.Clear;
      CLEAR(LibraryTextFileValidation);
      CompanyInformation.GET;
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDoc@1500035(VendorNo@1500003 : Code[20];DirectUnitCost@1500004 : Decimal;TDSNatureOfDeduction@1500005 : Code[10];PostDate@1500006 : Date) PostedDocumentNo : Code[20];
    VAR
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
      NoSeriesManagement@1500002 : Codeunit 396;
      NODNOCLine@150000 : Record 13785;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      NODNOCLine.FINDLAST;
      WITH PurchaseHeader DO BEGIN
        VALIDATE("Vendor Invoice No.","No.");
        VALIDATE("Posting Date",PostDate);
        VALIDATE("Document Date",PostDate);
        IF NODNOCLine."Nature of Remittance" <> '' THEN
          VALIDATE("Currency Code" ,FindCurrencyCode);
        MODIFY(TRUE);
      END;
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",FindGLAccountNo,LibraryRandom.RandDec(10,2));
      WITH PurchaseLine DO BEGIN
        VALIDATE("Direct Unit Cost",DirectUnitCost);
        VALIDATE("TDS Nature of Deduction",TDSNatureOfDeduction);
        VALIDATE("Nature of Remittance",NODNOCLine."Nature of Remittance");
        VALIDATE("Act Applicable",NODNOCLine."Act Applicable");
        IF NODNOCLine."Nature of Remittance" <> '' THEN
          VALIDATE("Country Code",FindCountryRegionCode);
        MODIFY(TRUE);
      END;
      PostedDocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Posting No. Series",WORKDATE,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@1500036(VAR GenJournalLine@1500002 : Record 81;GLAccountNo@1500003 : Code[20];Amount@1500004 : Decimal;AccountType@1500005 : Option;LocationCode@1500006 : Code[10]);
    VAR
      GenJournalBatch@1500000 : Record 232;
      GenJournalTemplate@1500001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::General);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.SETRANGE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalTemplate.FINDFIRST;
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalBatch.VALIDATE("Location Code",LocationCode);
      GenJournalBatch.MODIFY(TRUE);
      WITH GenJournalLine DO BEGIN
        LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
          "Document Type"::Payment,AccountType,GLAccountNo,Amount);
        VALIDATE("Document No.",LibraryUtility.GenerateRandomCode(FIELDNO("Document No."),DATABASE::"Gen. Journal Line"));
        VALIDATE("Bal. Account Type","Bal. Account Type"::"Bank Account");
        VALIDATE("Bal. Account No.",FindBankAccount);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateIncomeTaxAccPeriod@1500037(VAR IncomeTaxAccountingPeriod@1500002 : Record 13724;StartDate@1500003 : Date);
    VAR
      CreateTDSTCSFiscalYear@1500000 : Report 13717;
    BEGIN
      COMMIT;
      CreateTDSTCSFiscalYear.InitializeRequest(StartDate,CALCDATE('<1Y>',StartDate));
      CreateTDSTCSFiscalYear.USEREQUESTPAGE(FALSE);
      CreateTDSTCSFiscalYear.RUN;
      IncomeTaxAccountingPeriod.FINDLAST;
    END;

    LOCAL PROCEDURE CreateIncomeTaxPeriodSetup@1500040(IncomeTaxAccountingPeriodNo@1500001 : Integer;StartingDate@1500002 : Date;QuarterParam@1500003 : Option);
    VAR
      IncomeTaxPeriodSetup@1500000 : Record 16501;
    BEGIN
      WITH IncomeTaxPeriodSetup DO BEGIN
        LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriodNo,QuarterParam);
        "Starting Date" := StartingDate;
        VALIDATE("Ending Date",CALCDATE('<CQ>',StartingDate));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateNODNOCSetup@1500041(VAR NODNOCHeader@1500001 : Record 13786;No@1500002 : Code[20];AssesseeCode@1500003 : Code[10];TDSNatureOfDeduction@1500004 : Code[10];ThresholdAmount@1500005 : Boolean;NatureOfRemittance@1500006 : Code[10];ActApplicable@1500007 : Option);
    VAR
      NODNOCLines@1500000 : Record 13785;
    BEGIN
      LibraryTDS.CreateNODNOCHeader(NODNOCHeader,NODNOCHeader.Type::Vendor,No,AssesseeCode);
      NODNOCHeader.VALIDATE("Assesse Code",AssesseeCode);
      NODNOCHeader.MODIFY(TRUE);
      LibraryTDS.CreateNODNOCLines(NODNOCLines,NODNOCHeader,TDSNatureOfDeduction,ThresholdAmount,NatureOfRemittance,ActApplicable);
      UpdateNODNOCLines(NODNOCLines,NODNOCHeader.Type::Vendor,ThresholdAmount);
    END;

    LOCAL PROCEDURE CreateNODNOCSetupWithParty@1500066(VAR NodNocHeader@1500001 : Record 13786;PartyNo@1500002 : Code[20];AssesseeCode@1500003 : Code[10];TdsNatureOfDeduction@1500004 : Code[10];ThresholdAmount@1500005 : Boolean;NatureOfRemittance@1500006 : Code[10];ActApplicable@1500007 : Option);
    VAR
      NodNocLines@1500000 : Record 13785;
    BEGIN
      LibraryTDS.CreateNODNOCHeader(NodNocHeader,NodNocHeader.Type::Party,PartyNo,AssesseeCode);
      NodNocHeader.VALIDATE("Assesse Code",AssesseeCode);
      NodNocHeader.MODIFY(TRUE);
      LibraryTDS.CreateNODNOCLines(NodNocLines,NodNocHeader,TdsNatureOfDeduction,ThresholdAmount,NatureOfRemittance,ActApplicable);
      UpdateNODNOCLines(NodNocLines,NodNocHeader.Type::Party,ThresholdAmount);
    END;

    LOCAL PROCEDURE CreateTDSNatureDeductionAndTDS@1500042(VAR TDSNatureDeduction@1500001 : Record 13726;TDSGroup@1500002 : Option;AssesseeCode@1500003 : Code[10];TDSPercentage@1500004 : Integer;NatureOfRemittance@1500005 : Code[10];ActApplicable@1500006 : Option;CountryCode@1500007 : Code[10]);
    VAR
      TDSSetup@1500000 : Record 13728;
    BEGIN
      TDSNatureDeduction.Code := LibraryTDS.CreateTDSNatureDeduction(TDSGroup);
      TDSNatureDeduction.VALIDATE("TDS Group",TDSGroup);
      TDSNatureDeduction.MODIFY(TRUE);
      CreateTDSSetup(
        TDSSetup,TDSNatureDeduction.Code,AssesseeCode,WORKDATE,TDSPercentage,NatureOfRemittance,ActApplicable,CountryCode);
    END;

    LOCAL PROCEDURE CreateTDSSetup@1500043(VAR TDSSetup@1500000 : Record 13728;TDSNatureDeductionCode@1500001 : Code[10];AssesseeCode@1500002 : Code[10];EffectiveDate@1500003 : Date;TDSPercentage@1500004 : Decimal;NatureOfRemittance@1500005 : Code[10];ActApplicable@1500006 : Option;CountryCode@1500007 : Code[10]);
    BEGIN
      WITH TDSSetup DO BEGIN
        LibraryTDS.CreateTDSSetup(
          TDSSetup,TDSNatureDeductionCode,AssesseeCode,EffectiveDate,'A',NatureOfRemittance,ActApplicable,CountryCode);
        VALIDATE("TDS %",TDSPercentage);
        VALIDATE("Non PAN TDS %",TDSPercentage);
        VALIDATE("Surcharge %",LibraryRandom.RandInt(5));
        VALIDATE("eCESS %",LibraryRandom.RandInt(5));
        VALIDATE("SHE Cess %",LibraryRandom.RandInt(5));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateVendor@1500044(Transporter@1500002 : Boolean;CurrencyCode@1500003 : Code[10];Resident@1500004 : Boolean) : Code[20];
    VAR
      GeneralPostingSetup@1500000 : Record 252;
      Vendor@1500001 : Record 23;
    BEGIN
      GeneralPostingSetup.SETFILTER("Purch. Account",'<>''''');
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      WITH Vendor DO BEGIN
        LibraryPurchase.CreateVendor(Vendor);
        VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
        VALIDATE("P.A.N. No.",'ACFPH4256B'); // Valid P.A.N. No.
        VALIDATE(Transporter,Transporter);
        VALIDATE("Currency Code",CurrencyCode);
        IF NOT Resident THEN
          VALIDATE("Country/Region Code",FindCountryRegionCode);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateNoseries@1500045() : Code[10];
    VAR
      NoSeries@1500000 : Record 308;
      NoSeriesLine@1500001 : Record 309;
    BEGIN
      LibraryUtility.CreateNoSeries(NoSeries,TRUE,TRUE,FALSE);
      LibraryUtility.CreateNoSeriesLine(NoSeriesLine,NoSeries.Code,'00001','99999');  // Required 5 Digits for Starting No.and Ending No.'s.
      EXIT(NoSeries.Code);
    END;

    LOCAL PROCEDURE CreateSetupForIncomeTaxAccountingPeriod@1500046(VAR IncomeTaxAccountingPeriod@1500001 : Record 13724;StartDate@1500002 : Date);
    BEGIN
      UpdateGeneralLedgerSetup(CreateNoseries);
      CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod,StartDate);
      SetupDeductoryCode;
    END;

    LOCAL PROCEDURE CreateQuarterBatchHeader@1500027(TDSNatureOfDeductionCode@1500001 : Code[10];FinancialYear@1500002 : Code[6];Quarter@1500003 : Option;Resident@1500004 : Boolean;FileeTDS@1500005 : Boolean) : Text;
    VAR
      ExportedFileName@1500000 : Text;
    BEGIN
      // Post and print form 26Q/27Q
      PostPurchasDocPerQuarter(TDSNatureOfDeductionCode,FinancialYear,Quarter);

      // Post Form 26Q/27Q
      PostForm26Q27Q(FinancialYear,Quarter,Resident);

      // Post eTDS
      ExportedFileName := GenerateeTDSUsingPage(FinancialYear,Quarter,Resident);

      // File eTDS
      IF FileeTDS THEN
        GenerateFileeTDS(FinancialYear,Quarter,Resident);

      EXIT(ExportedFileName);
    END;

    LOCAL PROCEDURE CreateandPostBankPayment@1500006(PartyCode@1500002 : Code[20];CodeContractor@1500004 : Code[10];PostingDate@1500001 : Date;Amount@1500008 : Decimal;VAR TDSAmount@1500006 : Decimal) DocumentNo : Code[20];
    VAR
      GenJournalLine@1500007 : Record 81;
      GenJournalTemplate@1500005 : Record 80;
      GenJournalBatch@1500000 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Vendor,PartyCode,
        GenJournalLine."Bal. Account Type"::"Bank Account",LibraryERM.CreateBankAccountNo,Amount);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",PartyCode);
      GenJournalLine.VALIDATE("T.A.N. No.",CompanyInformation."T.A.N. No.");
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.MODIFY(TRUE);
      TDSAmount := GenJournalLine."TDS/TCS Amount";
      GeneralJournalTemplateName := GenJournalLine."Journal Template Name";
      DocumentNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateandPostBankPaymentWithParty@1500038(PartyCode@1500002 : Code[20];CodeContractor@1500004 : Code[10];PostingDate@1500001 : Date;Amount@1500008 : Decimal;VAR TDSAmount@1500006 : Decimal) DocumentNo : Code[20];
    VAR
      GenJournalLine@1500007 : Record 81;
      GenJournalTemplate@1500005 : Record 80;
      GenJournalBatch@1500000 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,
        GenJournalLine."Bal. Account Type"::"Bank Account",LibraryERM.CreateBankAccountNo,Amount);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Party);
      GenJournalLine.VALIDATE("Party Code",PartyCode);
      GenJournalLine.VALIDATE("T.A.N. No.",CompanyInformation."T.A.N. No.");
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.MODIFY(TRUE);
      TDSAmount := GenJournalLine."TDS/TCS Amount";
      GeneralJournalTemplateName := GenJournalLine."Journal Template Name";
      DocumentNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE FindBankAccount@1500048() : Code[20];
    VAR
      BankAccount@1500000 : Record 270;
    BEGIN
      BankAccount.SETFILTER("Currency Code",'');
      LibraryERM.FindBankAccount(BankAccount);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE FindCurrencyCode@1500078() : Code[10];
    VAR
      Currency@1500000 : Record 4;
    BEGIN
      LibraryERM.FindCurrency(Currency);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE FindCountryRegionCode@1500079() : Code[10];
    VAR
      CountryRegion@1500000 : Record 9;
    BEGIN
      CountryRegion.FINDFIRST;
      EXIT(CountryRegion.Code);
    END;

    LOCAL PROCEDURE FindGLAccountNo@1500049() : Code[20];
    VAR
      GLAccount@1500000 : Record 15;
      GeneralPostingSetup@1500001 : Record 252;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryERM.FindGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE GetFormNo@1500084(Resident@1500001 : Boolean) : Integer;
    VAR
      BatchHeader@1500000 : Record 16503;
    BEGIN
      IF Resident THEN
        EXIT(BatchHeader."Form No."::"26Q");
      EXIT(BatchHeader."Form No."::"27Q");
    END;

    LOCAL PROCEDURE GetTDSGroup@1500086(Resident@1500001 : Boolean) : Integer;
    VAR
      TDSGroup@1500000 : Record 13731;
    BEGIN
      IF Resident THEN
        EXIT(TDSGroup."TDS Group"::Contractor);
      EXIT(TDSGroup."TDS Group"::"Payable to Non Residents");
    END;

    LOCAL PROCEDURE GetTDSPayableAccount@1500050(TDSGroupCode@1500001 : Option) : Code[20];
    VAR
      TDSGroup@1500000 : Record 13731;
    BEGIN
      TDSGroup.SETRANGE("TDS Group",TDSGroupCode);
      TDSGroup.FINDFIRST;
      EXIT(TDSGroup."TDS Account");
    END;

    LOCAL PROCEDURE GenerateFileeTDS@1500051(FinancialYearForeTDSTCS@1500002 : Code[6];FinancialYearQuarter@1500003 : Option;Resident@1500004 : Boolean);
    VAR
      GenerateeTDS@1500001 : TestPage 16507;
    BEGIN
      LibraryVariableStorage.Enqueue(CompanyInformation."T.A.N. No.");
      LibraryVariableStorage.Enqueue(FinancialYearForeTDSTCS);
      LibraryVariableStorage.Enqueue(FinancialYearQuarter);
      COMMIT;
      GenerateeTDS.OPENEDIT;
      GenerateeTDS.FormNo.SETVALUE(GetFormNo(Resident));
      GenerateeTDS."File e-TDS".INVOKE;
    END;

    LOCAL PROCEDURE GenerateeTDSUsingPage@1500052(FinancialYearForeTDSTCS@1500003 : Code[6];FinancialYearQuarter@1500004 : Option;Resident@1500005 : Boolean) FileName : Text;
    VAR
      GenerateeTDS@1500001 : TestPage 16507;
      FileManagement@1500002 : Codeunit 419;
    BEGIN
      LibraryVariableStorage.Enqueue(CompanyInformation."T.A.N. No.");
      LibraryVariableStorage.Enqueue(FinancialYearForeTDSTCS);
      LibraryVariableStorage.Enqueue(FinancialYearQuarter);
      FileName := FileManagement.ServerTempFileName('.txt');
      LibraryVariableStorage.Enqueue(FileName);
      COMMIT;
      GenerateeTDS.OPENEDIT;
      GenerateeTDS.FormNo.SETVALUE(GetFormNo(Resident));
      GenerateeTDS.eTDS.INVOKE;
    END;

    LOCAL PROCEDURE GenerateRevisedeTDSUsingPage@1500081(FinancialYearForeTDSTCS@1500003 : Code[6];FinancialYearQuarter@1500004 : Option;Resident@1500005 : Boolean) FileName : Text;
    VAR
      GenerateRevisedeTDS@1500001 : TestPage 16509;
      FileManagement@1500002 : Codeunit 419;
    BEGIN
      LibraryVariableStorage.Enqueue(CompanyInformation."T.A.N. No.");
      LibraryVariableStorage.Enqueue(FinancialYearForeTDSTCS);
      LibraryVariableStorage.Enqueue(FinancialYearQuarter);
      FileName := FileManagement.ServerTempFileName('.txt');
      LibraryVariableStorage.Enqueue(FileName);
      COMMIT;
      GenerateRevisedeTDS.OPENEDIT;
      GenerateRevisedeTDS.FormNo.SETVALUE(GetFormNo(Resident));
      GenerateRevisedeTDS.Action1500006.INVOKE;
    END;

    LOCAL PROCEDURE Correct27QEntires@1500001(FinancialYearForeTDSTCS@1500002 : Code[6];FinancialYearQuarter@1500001 : Option);
    BEGIN
      LibraryVariableStorage.Enqueue(FinancialYearForeTDSTCS);
      LibraryVariableStorage.Enqueue(FinancialYearQuarter);
      COMMIT;
      REPORT.RUN(REPORT::"Correct 26Q/27Q Entries");
    END;

    LOCAL PROCEDURE PrintRevisedForm27Q@1500008(FinancialYearForeTDSTCS@1500001 : Code[6];FinancialYearQuarter@1500000 : Option);
    BEGIN
      LibraryVariableStorage.Enqueue(CompanyInformation."T.A.N. No.");
      LibraryVariableStorage.Enqueue(FinancialYearForeTDSTCS);
      LibraryVariableStorage.Enqueue(FinancialYearQuarter);
      COMMIT;
      REPORT.RUN(REPORT::"Revised Form 27Q");
    END;

    LOCAL PROCEDURE GetThresholdAmount@1500053(TDSGroupCode@1500001 : Option) : Decimal;
    VAR
      TDSGroup@1500000 : Record 13731;
    BEGIN
      WITH TDSGroup DO BEGIN
        SETRANGE("TDS Group",TDSGroupCode);
        FINDFIRST;
        VALIDATE("TDS Threshold Amount",LibraryRandom.RandDecInRange(1000,1500,2));
        MODIFY(TRUE);
        EXIT("TDS Threshold Amount");
      END;
    END;

    LOCAL PROCEDURE UpdateThresholdAmountandOverlook@1500007(TDSNatureOfDeductionCode@1500001 : Code[10];Amount@1500002 : Decimal);
    VAR
      TDSGroup@1500000 : Record 13731;
      TdsNatureOfDeduction@1500003 : Record 13726;
      NodNocLines@1500004 : Record 13785;
    BEGIN
      TdsNatureOfDeduction.SETRANGE(Code,TDSNatureOfDeductionCode);
      TdsNatureOfDeduction.FINDFIRST;
      WITH TDSGroup DO BEGIN
        SETRANGE("TDS Group",TdsNatureOfDeduction."TDS Group");
        FINDFIRST;
        VALIDATE("TDS Threshold Amount",Amount);
        MODIFY(TRUE);
      END;
      NodNocLines.RESET;
      NodNocLines.SETRANGE("NOD/NOC",TDSNatureOfDeductionCode);
      NodNocLines.FINDFIRST;
      NodNocLines.VALIDATE("Threshold Overlook",FALSE);
      NodNocLines.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetWorkDateForQuarter@1500032(QuarterParam@1500001 : Option) : Date;
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      IncomeTaxAccountingPeriodSetup@1500002 : Record 16501;
    BEGIN
      IncomeTaxAccountingPeriod.FINDLAST;
      WITH IncomeTaxAccountingPeriodSetup DO BEGIN
        SETRANGE("No.",IncomeTaxAccountingPeriod."No.");
        SETRANGE(Quarter,QuarterParam);
        FINDLAST;
      END;
      EXIT(IncomeTaxAccountingPeriodSetup."Starting Date");
    END;

    LOCAL PROCEDURE GetLastProvNo@1500085() : Text;
    VAR
      ReturnStatus@1500000 : Record 16503;
    BEGIN
      ReturnStatus.SETRANGE(Filed,TRUE);
      IF ReturnStatus.FINDLAST THEN
        EXIT(ReturnStatus."Original RRR No.");
      EXIT('');
    END;

    LOCAL PROCEDURE PayTDS@1500054(PostedDocumentNo@1500002 : Code[20];PostedDocumentType@1500003 : Option;TDSNatureOfDeduction@1500004 : Option);
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      WITH GenJournalLine DO BEGIN
        CreateGeneralJournalLine(
          GenJournalLine,GetTDSPayableAccount(TDSNatureOfDeduction),0,"Account Type"::"G/L Account",'');
        VALIDATE("T.A.N. No.",CompanyInformation."T.A.N. No.");
        VALIDATE("Pay TDS",TRUE);
        MODIFY(TRUE);
        GeneralJournalTemplateName := "Journal Template Name";
        PostBankPaymentVoucherAfterPayTDS("Journal Batch Name");
      END;
    END;

    LOCAL PROCEDURE PostForm26Q27Q@1500030(FinancialYear@1500000 : Code[6];Quarter@1500001 : Option;Resident@1500002 : Boolean);
    BEGIN
      EnqueueValuesInFormReqPageHandlers(FinancialYear,Quarter,GetWorkDateForQuarter(Quarter));
      COMMIT;
      PANNo := LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("P.A.N. No."),DATABASE::Vendor);
      LibraryTDS.Form26QForm27QReportFieldsValidation;
      IF Resident THEN
        REPORT.RUN(REPORT::"Form 26Q")
      ELSE
        REPORT.RUN(REPORT::"Form 27Q");
    END;

    LOCAL PROCEDURE PostPurchasDocPerQuarter@1500031(TDSNatureOfDeductionCode@1500006 : Code[10];FinancialYear@1500007 : Code[6];Quarter@1500008 : Option);
    VAR
      Vendor@1500000 : Record 23;
      TDSNatureOfDeduction@1500002 : Record 13726;
      NodNocLines@1500001 : Record 13785;
      PurchaseHeader@1500009 : Record 38;
      Amount@1500003 : Decimal;
      PostedDocumentNo@1500004 : Code[10];
      QuarterWorkDate@1500005 : Date;
    BEGIN
      NodNocLines.RESET;
      NodNocLines.SETRANGE("NOD/NOC",TDSNatureOfDeductionCode);
      NodNocLines.FINDFIRST;
      Vendor.GET(NodNocLines."No.");
      QuarterWorkDate := GetWorkDateForQuarter(Quarter);

      TDSNatureOfDeduction.SETRANGE(Code,TDSNatureOfDeductionCode);
      TDSNatureOfDeduction.FINDFIRST;

      Amount := GetThresholdAmount(TDSNatureOfDeduction."TDS Group") + LibraryRandom.RandDec(10,2);
      PostedDocumentNo := CreateAndPostPurchaseDoc(Vendor."No.",Amount,TDSNatureOfDeductionCode,QuarterWorkDate);

      UpdateChallanDetailsAfterTDSPayment(
        PostedDocumentNo,TDSNatureOfDeduction."TDS Group",QuarterWorkDate,PurchaseHeader."Document Type"::Invoice);
    END;

    LOCAL PROCEDURE PostBankPaymentPerQuarter@1500010(TDSNatureOfDeductionCode@1500006 : Code[10];Quarter@1500008 : Option;Amount@1500007 : Decimal;PayTDS@1500003 : Boolean;VAR TDSAmount@1500009 : Decimal) DocumentNo : Code[20];
    VAR
      TDSNatureOfDeduction@1500002 : Record 13726;
      NodNocLines@1500001 : Record 13785;
      GenJournalLine@1500000 : Record 81;
      QuarterWorkDate@1500005 : Date;
    BEGIN
      NodNocLines.SETRANGE("NOD/NOC",TDSNatureOfDeductionCode);
      NodNocLines.FINDFIRST;
      QuarterWorkDate := GetWorkDateForQuarter(Quarter);
      TDSNatureOfDeduction.SETRANGE(Code,TDSNatureOfDeductionCode);
      TDSNatureOfDeduction.FINDFIRST;
      DocumentNo := CreateandPostBankPayment(NodNocLines."No.",TDSNatureOfDeductionCode,QuarterWorkDate,Amount,TDSAmount);
      IF PayTDS THEN
        UpdateChallanDetailsAfterTDSPayment(
          DocumentNo,TDSNatureOfDeduction."TDS Group",QuarterWorkDate,GenJournalLine."Document Type"::Payment);
    END;

    LOCAL PROCEDURE PostBankPaymentPerQuarterWithParty@1500047(TDSNatureOfDeductionCode@1500006 : Code[10];Quarter@1500008 : Option;Amount@1500007 : Decimal;PayTDS@1500003 : Boolean;VAR TDSAmount@1500009 : Decimal) DocumentNo : Code[20];
    VAR
      TdsNatureOfDeduction@1500002 : Record 13726;
      NodNocLines@1500001 : Record 13785;
      GenJournalLine@1500000 : Record 81;
      QuarterWorkDate@1500005 : Date;
    BEGIN
      NodNocLines.SETRANGE("NOD/NOC",TDSNatureOfDeductionCode);
      NodNocLines.FINDFIRST;
      QuarterWorkDate := GetWorkDateForQuarter(Quarter);
      TdsNatureOfDeduction.SETRANGE(Code,TDSNatureOfDeductionCode);
      TdsNatureOfDeduction.FINDFIRST;
      DocumentNo := CreateandPostBankPaymentWithParty(NodNocLines."No.",TDSNatureOfDeductionCode,QuarterWorkDate,Amount,TDSAmount);
      IF PayTDS THEN
        UpdateChallanDetailsAfterTDSPayment(
          DocumentNo,TdsNatureOfDeduction."TDS Group",QuarterWorkDate,GenJournalLine."Document Type"::Payment);
    END;

    LOCAL PROCEDURE PostBankPaymentVoucherAfterPayTDS@1500055(JournalBatchName@1500002 : Code[10]);
    VAR
      BankPaymentVoucher@1500000 : TestPage 16577;
      PayTDS@1500001 : TestPage 13788;
    BEGIN
      COMMIT;
      BankPaymentVoucher.OPENEDIT;
      BankPaymentVoucher.CurrentJnlBatchName.SETVALUE(JournalBatchName);
      PayTDS.TRAP;
      BankPaymentVoucher.TDS.INVOKE;
      PayTDS.Pay.INVOKE;
      BankPaymentVoucher.Post.INVOKE;
    END;

    LOCAL PROCEDURE SetupDeductoryCode@1500057();
    VAR
      DeductorCategory@1500000 : Record 16498;
    BEGIN
      WITH CompanyInformation DO BEGIN
        IF DeductorCategory.FINDFIRST THEN
          VALIDATE("Deductor Category",DeductorCategory.Code)
        ELSE BEGIN
          LibraryTDS.CreateDeductorCategory(DeductorCategory);
          VALIDATE("Deductor Category",DeductorCategory.Code);
        END;
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE SetupFiscalYear@1500028(StartDate@1500003 : Date) : Code[6];
    VAR
      IncomeTaxAccountingPeriod@1500001 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      i@1500004 : Integer;
      Expr@1500005 : Text;
    BEGIN
      GeneralLedgerSetup.GET;
      CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod,StartDate);

      FOR i := 0 TO 3 DO BEGIN
        Expr := STRSUBSTNO('<%1Q>',i);
        CreateIncomeTaxPeriodSetup(IncomeTaxAccountingPeriod."No.",CALCDATE(Expr,StartDate),i + 1);
      END;

      IncomeTaxAccountingPeriod.FINDLAST;
      EXIT(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
    END;

    LOCAL PROCEDURE SetupTDS@1500029(Resident@1500009 : Boolean) : Code[10];
    VAR
      AssesseeCode@1500000 : Code[10];
      TDSNatureOfDeduction@1500001 : Record 13726;
      NODNOCHeader@1500002 : Record 13786;
      NatureOfRemittance@1500004 : Record 13783;
      NatureOfRemittanceCode@1500005 : Code[10];
      CountryRegionCode@1500006 : Code[10];
      ActApplicable@1500007 : Option;
      TDSSetup@1500008 : Record 13728;
    BEGIN
      AssesseeCode := LibraryTDS.CreateAssesseeCode;
      IF NOT Resident THEN BEGIN
        LibraryTDS.CreateNatureOfRemittance(NatureOfRemittance);
        NatureOfRemittanceCode := NatureOfRemittance.Code;
        ActApplicable := TDSSetup."Act Applicable"::IT;
        CountryRegionCode := FindCountryRegionCode;
      END;

      CreateTDSNatureDeductionAndTDS(
        TDSNatureOfDeduction,GetTDSGroup(Resident),AssesseeCode,LibraryRandom.RandInt(5),NatureOfRemittanceCode,
        ActApplicable,CountryRegionCode);
      CreateNODNOCSetup(
        NODNOCHeader,CreateVendor(FALSE,'',Resident),AssesseeCode,TDSNatureOfDeduction.Code,TRUE,NatureOfRemittanceCode,ActApplicable);

      EXIT(TDSNatureOfDeduction.Code);
    END;

    LOCAL PROCEDURE SetupTDSParty@1500014(Resident@1500009 : Boolean) : Code[10];
    VAR
      TdsNatureOfDeduction@1500001 : Record 13726;
      NodNocHeader@1500002 : Record 13786;
      TDSSetup@1500008 : Record 13728;
      TdsNatureOfRemittance@1500004 : Record 13783;
      Party@1500003 : Record 13730;
      NatureOfRemittanceCode@1500005 : Code[10];
      CountryRegionCode@1500006 : Code[10];
      AssesseeCode@1500000 : Code[10];
      ActApplicable@1500007 : Option;
    BEGIN
      LibraryTDS.CreateParty(Party);
      AssesseeCode := LibraryTDS.CreateAssesseeCode;
      IF NOT Resident THEN BEGIN
        LibraryTDS.CreateNatureOfRemittance(TdsNatureOfRemittance);
        NatureOfRemittanceCode := TdsNatureOfRemittance.Code;
        ActApplicable := TDSSetup."Act Applicable"::IT;
        CountryRegionCode := FindCountryRegionCode;
      END;

      CreateTDSNatureDeductionAndTDS(
        TdsNatureOfDeduction,GetTDSGroup(Resident),AssesseeCode,LibraryRandom.RandInt(5),NatureOfRemittanceCode,
        ActApplicable,CountryRegionCode);
      CreateNODNOCSetupWithParty(
        NodNocHeader,Party.Code,AssesseeCode,TdsNatureOfDeduction.Code,TRUE,NatureOfRemittanceCode,ActApplicable);

      EXIT(TdsNatureOfDeduction.Code);
    END;

    LOCAL PROCEDURE UpdateNODNOCLines@1500058(VAR NODNOCLines@1500000 : Record 13785;Type@1500001 : Option;ThresholdOverlook@1500002 : Boolean) : Code[10];
    BEGIN
      WITH NODNOCLines DO BEGIN
        SETRANGE("No.","No.");
        SETRANGE(Type,Type);
        FINDSET;
        MODIFYALL("Concessional Code",'A');
        MODIFYALL("Threshold Overlook",ThresholdOverlook);
        EXIT("Concessional Code");
      END;
    END;

    LOCAL PROCEDURE UpdateChallanDetails@1500060(DocumentNo@1500002 : Code[20];DocumentType@1500003 : Option;WorkingDate@1500004 : Date);
    VAR
      TDSEntry@1500000 : Record 13729;
      UpdateChallanDetails@1500001 : Report 13721;
    BEGIN
      TDSEntry.SETFILTER("Document No.",DocumentNo);
      TDSEntry.FINDLAST;
      UpdateChallanDetails.InitializeRequest(TDSEntry."Pay TDS Document No.",FORMAT(LibraryRandom.RandInt(1000)),WorkingDate,
        LibraryUtility.GenerateGUID,COPYSTR(LibraryUtility.GenerateGUID,1,7),LibraryUtility.GenerateGUID,WorkingDate,1);
      UpdateChallanDetails.USEREQUESTPAGE(FALSE);
      UpdateChallanDetails.RUN;
    END;

    LOCAL PROCEDURE UpdateGeneralLedgerSetup@1500061(TDSNilChallanNos@1500001 : Code[10]);
    VAR
      GeneralLedgerSetup@1500000 : Record 98;
    BEGIN
      WITH GeneralLedgerSetup DO BEGIN
        GET;
        VALIDATE("TDS Nil Challan Nos.",TDSNilChallanNos);
        VALIDATE("Nil Pay TDS Document Nos.","TDS Nil Challan Nos.");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateChallanDetailsAfterTDSPayment@1500062(PostedDocumentNo@1500001 : Code[20];TDSNatureOfDeduction@1500002 : Option;WorkingDate@1500003 : Date;DocumentType@1500004 : Option);
    BEGIN
      PayTDS(PostedDocumentNo,DocumentType,TDSNatureOfDeduction);
      UpdateChallanDetails(PostedDocumentNo,DocumentType,WorkingDate);
    END;

    LOCAL PROCEDURE VerifyExportedFileProvisonNo@1500063(FileName@1500003 : Text;FilledRegularStatementPrevQ@1500004 : Text;LastProvRcpNo@1500005 : Text);
    VAR
      Line@1500000 : Text;
    BEGIN
      Line := LibraryTextFileValidation.ReadLine(FileName,2);
      Assert.AreEqual(LastProvRcpNo,LibraryTextFileValidation.ReadField(Line,9,'^'),'Wrong field 9');
      Assert.AreEqual(FilledRegularStatementPrevQ,LibraryTextFileValidation.ReadField(Line,52,'^'),'Wrong field 52');
    END;

    LOCAL PROCEDURE VerifyExportedFile@1500064(FileName@1500001 : Text;FilledRegularStatementPrevQ@1500002 : Code[10];LineNo@1500003 : Integer;StartingPosition@1500004 : Integer);
    VAR
      ActualValue@1500000 : Text;
    BEGIN
      ActualValue := LibraryTextFileValidation.ReadValueFromLine(FileName,LineNo,StartingPosition,1);
      Assert.AreEqual(FilledRegularStatementPrevQ,ActualValue,ValueNotFoundErr);
    END;

    LOCAL PROCEDURE VerifyTDSEntry@1500013(DocumentNo@1500001 : Code[20];Amount@1500002 : Decimal);
    VAR
      TDSEntry@1500000 : Record 13729;
    BEGIN
      TDSEntry.SETRANGE("Document No.",DocumentNo);
      TDSEntry.FINDFIRST;
      TDSEntry.TESTFIELD("TDS Amount",Amount);
    END;

    LOCAL PROCEDURE RollbackIncomeTaxPeriodSetup@1500065();
    VAR
      IncomeTaxPeriodSetup@1500000 : Record 16501;
      IncomeTaxAccountingPeriod@1500001 : Record 13724;
    BEGIN
      IncomeTaxAccountingPeriod.FINDLAST;
      IncomeTaxAccountingPeriod.DELETE;
      IncomeTaxPeriodSetup.DELETEALL;
    END;

    LOCAL PROCEDURE RollbackChangesMadeToDataBase@1500076();
    VAR
      GeneralLedgerSetup@1500003 : Record 98;
      ChallanRegister@1500004 : Record 16504;
      BatchHeader@1500005 : Record 16503;
      TDSEntry@1500006 : Record 13729;
      Form2627Entry@1500008 : Record 16505;
    BEGIN
      RollbackIncomeTaxPeriodSetup;
      GeneralLedgerSetup.GET;
      ChallanRegister.DELETEALL;
      BatchHeader.DELETEALL;
      TDSEntry.DELETEALL;
      Form2627Entry.DELETEALL;
      COMMIT;

      UpdateGeneralLedgerSetup(GeneralLedgerSetup."TDS Nil Challan Nos.");
    END;

    LOCAL PROCEDURE EnqueueValuesInFormReqPageHandlers@1500067(FinancialYearForeTDSTCS@1500001 : Code[6];FinancialYearQuarter@1500002 : Option;WorkDate@1500003 : Date);
    BEGIN
      LibraryVariableStorage.Enqueue(CompanyInformation."T.A.N. No.");
      LibraryVariableStorage.Enqueue(FinancialYearForeTDSTCS);
      LibraryVariableStorage.Enqueue(FinancialYearQuarter);
      LibraryVariableStorage.Enqueue(WorkDate);
    END;

    [RequestPageHandler]
    PROCEDURE Form26QRequestPageHandler@1500068(VAR Form26Q@1500004 : TestRequestPage 16505);
    VAR
      TANLocation@1500000 : Variant;
      FinancialYear@1500001 : Variant;
      FinancialYearQuarter@1500002 : Variant;
      WorkDate@1500003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TANLocation);
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);
      LibraryVariableStorage.Dequeue(WorkDate);
      Form26Q.TANLocation.SETVALUE(TANLocation);
      Form26Q.ReportFrequency.SETVALUE(FinancialYearQuarter);
      Form26Q.FinancialYear.SETVALUE(FinancialYear);
      Form26Q.FullName.SETVALUE('Abcd');
      Form26Q.Designation.SETVALUE('MNOP');
      Form26Q.PrintingDate.SETVALUE(WorkDate);
      Form26Q.MobileNo.SETVALUE(1234567891);
      Form26Q."PAN No.".SETVALUE(PANNo);
      Form26Q.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE Form27QRequestPageHandler@1500069(VAR Form27Q@1500004 : TestRequestPage 16511);
    VAR
      TANLocation@1500000 : Variant;
      FinancialYear@1500001 : Variant;
      FinancialYearQuarter@1500002 : Variant;
      WorkDate@1500003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TANLocation);
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);
      LibraryVariableStorage.Dequeue(WorkDate);
      Form27Q.TANLocation.SETVALUE(TANLocation);
      Form27Q.ReportFrequency.SETVALUE(FinancialYearQuarter);
      Form27Q.FinancialYear.SETVALUE(FinancialYear);
      Form27Q.FullName.SETVALUE('ABCD');
      Form27Q.Designation.SETVALUE('EFGH');
      Form27Q.PrintingDate.SETVALUE(WorkDate);
      Form27Q.MobileNo.SETVALUE(1234567891);
      Form27Q."PAN No.".SETVALUE(PANNo);
      Form27Q.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE GenerateFileeTDSRequestPageHandler@1500070(VAR GenerateFileeTDS@1500003 : TestRequestPage 16501);
    VAR
      TANLocation@1500000 : Variant;
      FinancialYear@1500001 : Variant;
      FinancialYearQuarter@1500002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TANLocation);
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);

      // T.A.N Location
      GenerateFileeTDS.Control1500009.SETVALUE(TANLocation);
      // Quarter
      GenerateFileeTDS.Control1500000.SETVALUE(FinancialYearQuarter);
      // Financial Year
      GenerateFileeTDS.Control1500002.SETVALUE(FinancialYear);
      // Filing Date
      GenerateFileeTDS.Control1500004.SETVALUE(WORKDATE);
      // Provision Receipt No
      GenerateFileeTDS.Control1500006.SETVALUE(COPYSTR(CREATEGUID,1,15));
      // File eTDS
      GenerateFileeTDS.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateeTDSRequestPageHandler@1500071(VAR GenerateeTDS@1500005 : TestRequestPage 16508);
    VAR
      TANLocation@1500000 : Variant;
      FinancialYear@1500001 : Variant;
      FileName@1500002 : Variant;
      FinancialYearQuarter@1500003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TANLocation);
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);
      LibraryVariableStorage.Dequeue(FileName);

      GenerateeTDS.FileName.SETVALUE(FileName);
      GenerateeTDS.TANLocation.SETVALUE(TANLocation);
      GenerateeTDS.ReportFrequency.SETVALUE(FinancialYearQuarter);
      GenerateeTDS.FinancialYear.SETVALUE(FinancialYear);
      GenerateeTDS.FullName.SETVALUE('ABCD');
      GenerateeTDS.Designation.SETVALUE('EFGH');
      GenerateeTDS.PrintingDate.SETVALUE(WORKDATE);
      GenerateeTDS.NameOfReturnPreparationUtility.SETVALUE('IJKL');
      GenerateeTDS.Email.SETVALUE('MNOP');
      GenerateeTDS.MobileNo.SETVALUE(1234567893);
      GenerateeTDS."PAN No.".SETVALUE(PANNo);
      GenerateeTDS.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateRevisedeTDSRequestPageHandler@1500082(VAR GenerateeTDS@1500005 : TestRequestPage 16509);
    VAR
      TANLocation@1500000 : Variant;
      FinancialYear@1500001 : Variant;
      FileName@1500002 : Variant;
      FinancialYearQuarter@1500003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TANLocation);
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);
      LibraryVariableStorage.Dequeue(FileName);

      GenerateeTDS.FileName.SETVALUE(FileName);
      // T.A.N Location
      GenerateeTDS.Control1500012.SETVALUE(TANLocation);
      // Report Frequency
      GenerateeTDS.Control1500006.SETVALUE(FinancialYearQuarter);
      // FinancialYear
      GenerateeTDS.Control1500004.SETVALUE(FinancialYear);
      // FullName
      GenerateeTDS.Control1500000.SETVALUE('ABCD');
      // Designation
      GenerateeTDS.Control1500002.SETVALUE('EFGH');
      // PrintingDate
      GenerateeTDS.Control1500010.SETVALUE(WORKDATE);
      // NameOfReturnPreparationUtility
      GenerateeTDS.Control1.SETVALUE('IJKL');
      // Email
      GenerateeTDS.Control1500015.SETVALUE('MNOP');
      // MobileNo
      GenerateeTDS.Control1500017.SETVALUE(1234567893);
      // P.A.N. No.
      GenerateeTDS.PANNo.SETVALUE(PANNo);
      GenerateeTDS.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE Correct27QRequestPageHandler@1500002(VAR Correct26q27qEntries@1500005 : TestRequestPage 16502);
    VAR
      FinancialYear@1500001 : Variant;
      FinancialYearQuarter@1500003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);
      Correct26q27qEntries.Control1500002.SETVALUE(FinancialYearQuarter);
      Correct26q27qEntries.Control1500003.SETVALUE(FinancialYear);
      Correct26q27qEntries.Control1500004.SETVALUE(1);
      Correct26q27qEntries.Control1500006.SETVALUE(1);
      Correct26q27qEntries.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RevisedForm27QRequestPageHandler@1500004(VAR RevisedForm27Q@1500113 : TestRequestPage 16504);
    VAR
      TANLocation@1500000 : Variant;
      FinancialYear@1500002 : Variant;
      FinancialYearQuarter@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TANLocation);
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);
      RevisedForm27Q.Control1500008.SETVALUE(TANLocation);
      RevisedForm27Q.Control1500015.SETVALUE(FinancialYearQuarter);
      RevisedForm27Q.Control1500002.SETVALUE(FinancialYear);
      RevisedForm27Q.Control1500006.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20));
      RevisedForm27Q.Control1500007.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      RevisedForm27Q.Control1500000.SETVALUE(WORKDATE);
      RevisedForm27Q.Control1500009.SETVALUE(LibraryRandom.RandIntInRange(1000000000,999999999));
      RevisedForm27Q."PAN No.".SETVALUE(PANNo);
      RevisedForm27Q.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerNo@1500073(Text@1500001 : Text;VAR Reply@1500002 : Boolean);
    VAR
      Text01@1500000 : TextConst 'ENU=Do you want to post the journal lines?';
    BEGIN
      IF Text = Text01 THEN
        Reply := TRUE
      ELSE
        Reply := FALSE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@1500074(Text@1500000 : Text;VAR Reply@1500001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500075(Msg@1500000 : Text);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE CorrectDeductorPageHandler@1500003(VAR CorrectDeductorRecord@1500000 : TestPage 16503);
    BEGIN
      CorrectDeductorRecord."Deductor Address".SETVALUE(DeductorAddress);
      CorrectDeductorRecord."Update Entries".INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GeneralJournalTemplateHandler@1500301(VAR GeneralJournalTemplateHandler@1500302 : TestPage 250);
    BEGIN
      GeneralJournalTemplateHandler.FILTER.SETFILTER(Name,GeneralJournalTemplateName);
      GeneralJournalTemplateHandler.OK.INVOKE;
    END;

    BEGIN
    END.
  }
}

