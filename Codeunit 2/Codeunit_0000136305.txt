OBJECT Codeunit 136305 Job Journal
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            Initialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1007 : Codeunit 130000;
      LibraryInventory@1015 : Codeunit 132201;
      LibraryJob@1002 : Codeunit 131920;
      LibraryERM@1014 : Codeunit 131300;
      LibrarySales@1013 : Codeunit 130509;
      LibraryPurchase@1017 : Codeunit 130512;
      LibraryUtility@1003 : Codeunit 131000;
      LibraryRandom@1032 : Codeunit 130440;
      LibraryResource@1011 : Codeunit 130511;
      LibraryWarehouse@1031 : Codeunit 132204;
      LibraryVariableStorage@1021 : Codeunit 131004;
      Initialized@1000 : Boolean;
      BlankJobNoError@1006 : TextConst '@@@="%1=Field name,%2=Table name,%3=Field,%4=Field value,%5=Field,%6=Field value,%7=Field,%8=Field value,%9=Field,%10=Field value,%11=Field,%12=Field value,%13=Field,%14=Field value";ENU="%1 must have a value in %2: %3=%4, %5=%6, %7=%8, %9=%10, %11=%12, %13=%14. It cannot be zero or empty."';
      JobTaskTypeError@1005 : TextConst '@@@="%1= Field name,%2=Table name,%3=Field,%4=Field value,%5=Field,%6=Field value,%7=Field value";ENU="%1 must be equal to ''Posting''  in %2: %3=%4, %5=%6. Current value is ''%7''."';
      JobPlanningLineError@1008 : TextConst '@@@="%1: Field Caption;%2: Job Planning Type Value;%3:Job No; %4 Job Task No;%5: Line No";ENU="%1 must not be %2 in Job Planning Line Job No.=''%3'',Job Task No.=''%4'',Line No.=''%5''."';
      FieldCodeError@1009 : TextConst 'ENU=%1 cannot be specified when %2 is %3.';
      FieldsBlankError@1012 : TextConst '@@@="%1=Field,%2=TableName,%3=Fieldname,%4=FieldValue,%5=Fieldname,%6=FieldValue,%7=Fieldname,%8=FieldValue,%9=Fieldname,%10=FieldValue";ENU="%1 must have a value in %2: %3=%4, %5=%6, %7=%8, %9=%10. It cannot be zero or empty."';
      JobNo@1010 : Code[20];
      NoSeriesCode@1016 : Code[10];
      TestForBlankValuesPassed@1019 : TextConst 'ENU=It was expected a known failure for ''%1'', since it contains invalid blank field values.';
      RecordNotFound@1018 : TextConst 'ENU=DB:RecordNotFound';
      SourceCodeEqualError@1020 : TextConst '@@@="%1=Field,%2=TableName,%3=Fieldname,%4=TableName";ENU=%1 in %2 must not be equal to %3 in %4.';
      IncorrectFieldValueErr@1004 : TextConst 'RUS=Incorrect field value %1.';
      AmountErr@1001 : TextConst 'ENU=Amount must be right';
      CurrencyDateConfirmTxt@1024 : TextConst 'ENU=The currency dates on all planning lines will be updated based on the invoice posting date because there is a difference in currency exchange rates. Recalculations will be based on the Exch. Calculation setup for the Cost and Price values for the job. Do you want to continue?';

    [Test]
    PROCEDURE UnitCostOnJobJournalLine@7();
    VAR
      Resource@1000 : Record 156;
      JobTask@1006 : Record 1001;
      JobJournalLine@1007 : Record 210;
      ResourceNo@1001 : Code[20];
    BEGIN
      // Test Unit Cost, Unit Price on Job Journal Line.

      // 1. Setup: Create Job with Job Task and Resource.
      Initialize;
      CreateJobWithJobTask(JobTask);
      ResourceNo := LibraryJob.CreateConsumable(0);  // Use 0 for Resource.
      Resource.GET(ResourceNo);

      // 2. Exercise: Create Job Journal Line with created Resource.
      CreateJobJournalLine(JobJournalLine,JobTask,Resource."No.");

      // 3. Verify: Verify values on Job Journal Lines.
      VerifyJobJournalLine(JobJournalLine,Resource,Resource."Base Unit of Measure",1);
    END;

    [Test]
    PROCEDURE ChangeUOMOnJobJournalLine@50();
    VAR
      ResourceUnitOfMeasure@1009 : Record 205;
      Resource@1000 : Record 156;
      JobTask@1006 : Record 1001;
      JobJournalLine@1007 : Record 210;
      ResourceNo@1001 : Code[20];
    BEGIN
      // Test Unit Cost, Unit Price on Job Journal Line after changing Unit of Measure.

      // 1. Setup: Create Job with Job Task, Resource and Create another Resource Unit Of Measure.
      Initialize;
      CreateJobWithJobTask(JobTask);
      ResourceNo := LibraryJob.CreateConsumable(0);  // Use 0 for Resource.
      Resource.GET(ResourceNo);
      CreateResourceUnitOfMeasure(ResourceUnitOfMeasure,Resource);

      // 2. Exercise: Create Job Journal Line with created Resource and Change Unit of Measure on Job Journal Line.
      CreateJobJournalLine(JobJournalLine,JobTask,Resource."No.");
      JobJournalLine.VALIDATE("Unit of Measure Code",ResourceUnitOfMeasure.Code);
      JobJournalLine.MODIFY(TRUE);

      // 3. Verify: Verify values on Job Journal Lines.
      VerifyJobJournalLine(JobJournalLine,Resource,ResourceUnitOfMeasure.Code,ResourceUnitOfMeasure."Qty. per Unit of Measure");
    END;

    [Test]
    PROCEDURE UnitCostOnJobPlanningLine@6();
    VAR
      Resource@1000 : Record 156;
      JobTask@1006 : Record 1001;
      JobPlanningLine@1007 : Record 1003;
      ResourceNo@1001 : Code[20];
    BEGIN
      // Test Unit Cost, Unit Price on Job Planning Line.

      // 1. Setup: Create Job with Job Task and Resource.
      Initialize;
      CreateJobWithJobTask(JobTask);
      ResourceNo := LibraryJob.CreateConsumable(0);  // Use 0 for Resource.
      Resource.GET(ResourceNo);

      // 2. Exercise: Create Job Planning Line with created Resource.
      CreateJobPlanningLine(
        JobPlanningLine,JobTask,JobPlanningLine."Line Type"::Contract,Resource."No.",JobPlanningLine.Type::Resource);

      // 3. Verify: Verify values on Job Planning Lines.
      VerifyCostAndPriceOnJobPlanningLine(JobPlanningLine,Resource,Resource."Base Unit of Measure",1);
    END;

    [Test]
    PROCEDURE ChangeUOMOnJobPlanningLine@1();
    VAR
      ResourceUnitOfMeasure@1009 : Record 205;
      Resource@1000 : Record 156;
      JobTask@1006 : Record 1001;
      JobPlanningLine@1007 : Record 1003;
      ResourceNo@1001 : Code[20];
    BEGIN
      // Test Unit Cost, Unit Price on Job Planning Line after changing Unit of Measure.

      // 1. Setup: Create Job with Job Task, Resource and Create another Resource Unit Of Measure.
      Initialize;
      CreateJobWithJobTask(JobTask);
      ResourceNo := LibraryJob.CreateConsumable(0);  // Use 0 for Resource.
      Resource.GET(ResourceNo);
      CreateResourceUnitOfMeasure(ResourceUnitOfMeasure,Resource);

      // 2. Exercise: Create Job Planning Line with created Resource and Change Unit of Measure on Job Planning Line.
      CreateJobPlanningLineAndModifyUOM(
        JobPlanningLine,JobTask,JobPlanningLine.Type::Resource,Resource."No.",ResourceUnitOfMeasure.Code);

      // 3. Verify: Verify values on Job Planning Lines.
      VerifyCostAndPriceOnJobPlanningLine(
        JobPlanningLine,Resource,ResourceUnitOfMeasure.Code,ResourceUnitOfMeasure."Qty. per Unit of Measure");
    END;

    [Test]
    PROCEDURE UnitCostFactorOnJobGLJournalLine@5();
    VAR
      JobTask@1006 : Record 1001;
      JobGLAccountPrice@1002 : Record 1014;
      GenJournalLine@1003 : Record 81;
      GenJournalBatch@1004 : Record 232;
      JobUnitCost@1000 : Decimal;
      JobUnitPrice@1001 : Decimal;
    BEGIN
      // Test Job Unit Cost, Job Unit Price on Job G/L Journal Line when Unit Cost Factor is defined on Job Card.

      // 1. Setup: Create Job with Job Task and Job G/L Account Price.
      Initialize;
      CreateJobJournalBatch(GenJournalBatch);
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobGLAccountPrice(
        JobGLAccountPrice,JobTask."Job No.",JobTask."Job Task No.",LibraryERM.CreateGLAccountNo,'');
      UpdateUnitCostFactorOnJobGLAccountPrice(JobGLAccountPrice);

      // 2. Exercise: Create Job G/L Journal Line, Taking rounding precision as used in General Journal Line Table rounding precision.
      CreateJobGLJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Bal. Account Type"::"G/L Account",JobGLAccountPrice."G/L Account No.",
        LibraryERM.CreateGLAccountNo,JobGLAccountPrice."Job No.",JobGLAccountPrice."Job Task No.",'');  // Passing Blank for Currency Code.
      JobUnitCost := GenJournalLine.Amount / GenJournalLine."Job Quantity";
      JobUnitPrice :=
        ROUND(
          (GenJournalLine.Amount / GenJournalLine."Job Quantity") * JobGLAccountPrice."Unit Cost Factor",
          LibraryJob.GetUnitAmountRoundingPrecision(GenJournalLine."Currency Code"));

      // 3. Verify: Verify values on Job G/L Journal Lines.
      VerifyJobGLJournalLine(GenJournalLine,JobUnitCost,JobUnitPrice);

      // 4. Tear Down: Delete newly created batch.
      GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
      GenJournalBatch.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE UpdateLineAmountOnJobJournalLine@10();
    VAR
      JobTask@1002 : Record 1001;
      JobJournalLine@1001 : Record 210;
      ResourceNo@1008 : Code[20];
      LineAmount@1000 : Decimal;
      LineDiscountAmount@1003 : Decimal;
      LineDiscountPct@1004 : Decimal;
    BEGIN
      // Test Line Discount Amount and Line Discount Percentage on Job Journal Line after updating Line Amount.

      // 1. Setup: Create Job with Job Task and Job Journal Line.
      Initialize;
      CreateJobWithJobTask(JobTask);
      ResourceNo := LibraryJob.CreateConsumable(0);  // Use 0 for Resource.
      CreateJobJournalLine(JobJournalLine,JobTask,ResourceNo);
      LineAmount := JobJournalLine."Line Amount";

      // 2. Exercise: Update Line Amount on Job Journal Line, Taking rounding precision as used in Job Journal Line Table rounding precision.
      JobJournalLine.VALIDATE("Line Amount",JobJournalLine."Line Amount" - LibraryUtility.GenerateRandomFraction);  // Update Line Amount for generating Line Discount Amount.
      JobJournalLine.MODIFY(TRUE);
      LineDiscountAmount := LineAmount - JobJournalLine."Line Amount";
      LineDiscountPct := ROUND((LineDiscountAmount / LineAmount) * 100,0.00001);

      // 3. Verify: Verify Line Discount Amount and Line Discount Percentage.
      JobJournalLine.GET(JobJournalLine."Journal Template Name",JobJournalLine."Journal Batch Name",JobJournalLine."Line No.");
      JobJournalLine.TESTFIELD("Line Discount Amount",LineDiscountAmount);
      JobJournalLine.TESTFIELD("Line Discount %",LineDiscountPct);

      // 4. Tear Down: Delete newly created batch.
      DeleteJobJournalTemplate(JobJournalLine."Journal Template Name");
    END;

    [Test]
    PROCEDURE JobItemPriceCreation@12();
    VAR
      JobItemPrice@1001 : Record 1013;
    BEGIN
      // Test the creation of Job Item Price.

      // 1. Setup.
      Initialize;

      // 2. Exercise.
      CreateJobItemPrice(JobItemPrice);

      // 3. Verify: To verify the creation of Job Item Price, get the created line.
      JobItemPrice.GET(
        JobItemPrice."Job No.",JobItemPrice."Job Task No.",JobItemPrice."Item No.",JobItemPrice."Variant Code",
        JobItemPrice."Unit of Measure Code",JobItemPrice."Currency Code");
    END;

    [Test]
    PROCEDURE JobItemPriceWithBlankJobNo@23();
    VAR
      Item@1000 : Record 27;
      JobTask@1002 : Record 1001;
      JobItemPrice@1001 : Record 1013;
    BEGIN
      // Test the error message while creating the Job Item Price with blank Job No.

      // 1. Setup.
      Initialize;
      Item.GET(LibraryJob.FindItem);
      CreateJobWithJobTask(JobTask);

      // 2. Exercise: Create the Job Item Price with blank Job No.
      ASSERTERROR LibraryJob.CreateJobItemPrice(JobItemPrice,'',JobTask."Job Task No.",Item."No.",'','',Item."Base Unit of Measure");  // Blank value is for Job No., Currency Code and Variant Code.

      // 3. Verify: Verify error message for Blank Job No.
      WITH JobItemPrice DO
        Assert.ExpectedError(
          STRSUBSTNO(
            BlankJobNoError,FIELDCAPTION("Job No."),TABLECAPTION,FIELDCAPTION("Job No."),'',FIELDCAPTION("Job Task No."),
            "Job Task No.",
            FIELDCAPTION("Item No."),"Item No.",FIELDCAPTION("Variant Code"),"Variant Code",FIELDCAPTION("Unit of Measure Code"),
            "Unit of Measure Code",FIELDCAPTION("Currency Code"),"Currency Code"));
    END;

    [Test]
    PROCEDURE JobItemPriceWithBlankJobTaskNo@18();
    VAR
      Item@1002 : Record 27;
      Job@1000 : Record 167;
      JobItemPrice@1001 : Record 1013;
    BEGIN
      // Test Job Item Price creation with blank Job Task No.

      // 1. Setup.
      Initialize;
      Item.GET(LibraryJob.FindItem);
      LibraryJob.CreateJob(Job);

      // 2. Exercise.
      LibraryJob.CreateJobItemPrice(JobItemPrice,Job."No.",'',Item."No.",'','',Item."Base Unit of Measure");  // Blank value is for Job Task No., Currency Code and Variant Code.

      // 3. Verify.
      JobItemPrice.GET(
        JobItemPrice."Job No.",JobItemPrice."Job Task No.",JobItemPrice."Item No.",JobItemPrice."Variant Code",
        JobItemPrice."Unit of Measure Code",JobItemPrice."Currency Code");
    END;

    [Test]
    PROCEDURE JobItemPriceWithJobTaskNoWithTypeNotPosting@16();
    VAR
      Item@1002 : Record 27;
      JobTask@1000 : Record 1001;
      JobItemPrice@1001 : Record 1013;
    BEGIN
      // Test the error message when create Job Item Price with Job Task No. whose Job Task type is not Posting.

      // 1. Setup.
      Initialize;
      Item.GET(LibraryJob.FindItem);
      CreateJobWithJobTask(JobTask);
      JobTask.VALIDATE("Job Task Type",JobTask."Job Task Type"::"Begin-Total");
      JobTask.MODIFY(TRUE);

      // 2. Exercise.
      ASSERTERROR LibraryJob.CreateJobItemPrice(
          JobItemPrice,JobTask."Job No.",JobTask."Job Task No.",Item."No.",'','',Item."Base Unit of Measure");  // Blank value is for Currency Code and Variant Code.

      // 3. Verify.
      Assert.ExpectedError(
        STRSUBSTNO(
          JobTaskTypeError,JobTask.FIELDCAPTION("Job Task Type"),JobTask.TABLECAPTION,JobTask.FIELDCAPTION("Job No."),
          JobTask."Job No.",JobTask.FIELDCAPTION("Job Task No."),JobTask."Job Task No.",JobTask."Job Task Type"));
    END;

    [Test]
    PROCEDURE UnitPriceOnJobItemPrice@25();
    VAR
      JobItemPrice@1001 : Record 1013;
    BEGIN
      // Test the Unit Price field becomes empty as Unit Cost Factor field is filled on the Job Item Price.

      // 1. Setup: Create Job Item Price with Unit Price.
      Initialize;
      CreateJobItemPrice(JobItemPrice);
      ModifyJobItemPriceForUnitPrice(JobItemPrice,LibraryRandom.RandDec(100,2));  // Use Random value for Unit Price.

      // 2. Exercise.
      ModifyJobItemPriceForUnitCostFactor(JobItemPrice,LibraryRandom.RandDec(100,2));  // Use Random value for Unit Cost Factor.

      // 3. Verify.
      JobItemPrice.TESTFIELD("Unit Price",0);  // Unit Price must be zero.
    END;

    [Test]
    PROCEDURE UnitCostFactorOnJobItemPrice@31();
    VAR
      JobItemPrice@1001 : Record 1013;
    BEGIN
      // Test the Unit Cost Factor field becomes empty as Unit Price field is filled on the Job Item Price.

      // 1. Setup: Create Job Item Price with Unit Cost Factor.
      Initialize;
      CreateJobItemPrice(JobItemPrice);
      ModifyJobItemPriceForUnitCostFactor(JobItemPrice,LibraryRandom.RandDec(100,2));  // Use Random value for Unit Cost Factor.

      // 2. Exercise.
      ModifyJobItemPriceForUnitPrice(JobItemPrice,LibraryRandom.RandDec(100,2));  // Use Random value for Unit Price.

      // 3. Verify.
      JobItemPrice.TESTFIELD("Unit Cost Factor",0);  // Unit Cost Factor must be zero.
    END;

    [Test]
    PROCEDURE JobItemPriceWithBlankItemNo@36();
    VAR
      JobTask@1000 : Record 1001;
      JobItemPrice@1001 : Record 1013;
    BEGIN
      // Test the error message when create Job Item Price with blank Item No.

      // 1. Setup.
      Initialize;
      CreateJobWithJobTask(JobTask);

      // 2. Exercise.
      ASSERTERROR LibraryJob.CreateJobItemPrice(JobItemPrice,JobTask."Job No.",JobTask."Job Task No.",'','','','');  // Blank value is for Item No., Currency Code, Variant Code and Unit of Measure Code.

      // 3. Verify.
      Assert.VerifyFailure(RecordNotFound,STRSUBSTNO(TestForBlankValuesPassed,JobItemPrice.TABLECAPTION));
    END;

    [Test]
    PROCEDURE QuantityErrorForTextTypeJobPlanningLine@26();
    VAR
      JobTask@1001 : Record 1001;
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      // Check Error Message while updating Quantity on Job Planning Line when Type = TEXT.

      // 1. Setup: Find Standard Text, Create Job Planning Line for Job with Text Type.
      Initialize;
      CreateJobWithJobTask(JobTask);
      CreateJobPlanningLineWithTypeText(JobPlanningLine,JobPlanningLine."Line Type"::Schedule,JobTask);

      // 2. Exercise: Try to update Quantity when Type = Text on Job Planning Line.
      ASSERTERROR JobPlanningLine.VALIDATE(Quantity,LibraryRandom.RandInt(10));  // Use Random value.

      // 3. Verify: Verify Error Message.
      Assert.ExpectedError(
        STRSUBSTNO(
          JobPlanningLineError,JobPlanningLine.FIELDCAPTION(Type),JobPlanningLine.Type::Text,JobTask."Job No.",
          JobTask."Job Task No.",JobPlanningLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(JobTransferToSalesInvoiceRequestPageHandler,MessageHandler)]
    PROCEDURE PostingGroupOnJobLedgerEntry@24();
    VAR
      JobTask@1001 : Record 1001;
      JobPlanningLine@1000 : Record 1003;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      JobCreateInvoice@1002 : Codeunit 1002;
      DocumentNo@1008 : Code[20];
    BEGIN
      // Check Job Posting Group In Job Ledger Entry after posting Sales Invoice created from Job Planning Line.

      // 1. Setup: Create Job Planning Line for a new Job, Create Sales Invoice from Job Planning Line and find the created Sales Invoice.
      Initialize;
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Contract,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
      COMMIT;  // Using Commit to prevent Test Failure.
      LibraryVariableStorage.Enqueue(WORKDATE);
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,FALSE);
      FindSalesHeader(SalesHeader,SalesLine."Document Type"::Invoice,JobTask."Job No.",SalesLine.Type::Item);

      // 2. Exercise: Post Sales Invoice created from Job Planning Line.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 3. Verify: Verify that Job Posting Group on Job Ledger Entries has been taken from Item.
      VerifyPostingGroupOnJobLedgerEntry(DocumentNo,JobTask."Job No.",JobPlanningLine."No.");
    END;

    [Test]
    PROCEDURE JobResourcePricesWithTypeResource@33();
    VAR
      JobResourcePrice@1001 : Record 1012;
    BEGIN
      // Test the creation of Job Resource Price with Type Resource.

      // 1. Setup.
      Initialize;

      // 2. Exercise.
      CreateJobResourcePrice(JobResourcePrice,JobResourcePrice.Type::Resource,LibraryResource.CreateResourceNo);

      // 3. Verify: To verify the creation of Job Resource Price.
      JobResourcePrice.GET(
        JobResourcePrice."Job No.",JobResourcePrice."Job Task No.",JobResourcePrice.Type::Resource,JobResourcePrice.Code,
        JobResourcePrice."Work Type Code",JobResourcePrice."Currency Code");
    END;

    [Test]
    PROCEDURE JobResourcePriceWithBlankJobNo@37();
    VAR
      JobResourcePrice@1001 : Record 1012;
      JobTask@1000 : Record 1001;
    BEGIN
      // Test the error message while creating the Job Resource Price with blank Job No.

      // 1. Setup.
      Initialize;
      CreateJobWithJobTask(JobTask);

      // 2. Exercise: Use Blank value for Job No.
      ASSERTERROR LibraryJob.CreateJobResourcePrice(
          JobResourcePrice,'',JobTask."Job Task No.",JobResourcePrice.Type::Resource,LibraryResource.CreateResourceNo,'','');  // Blank value is for Work Type Code and Currency Code.

      // 3. Verify: Verify error message for Blank Job No.
      WITH JobResourcePrice DO
        Assert.ExpectedError(
          STRSUBSTNO(
            BlankJobNoError,FIELDCAPTION("Job No."),TABLECAPTION,FIELDCAPTION("Job No."),'',FIELDCAPTION("Job Task No."),
            "Job Task No.",FIELDCAPTION(Type),Type,FIELDCAPTION(Code),Code,FIELDCAPTION("Work Type Code"),"Work Type Code",
            FIELDCAPTION("Currency Code"),"Currency Code"));
    END;

    [Test]
    PROCEDURE JobResourcePriceWithBlankJobTaskNo@96();
    VAR
      Resource@1002 : Record 156;
      Job@1000 : Record 167;
      JobResourcePrice@1001 : Record 1012;
    BEGIN
      // Test Job Resource Price creation with blank Job Task No.

      // 1. Setup.
      Initialize;
      Resource.GET(LibraryResource.CreateResourceNo);
      LibraryJob.CreateJob(Job);

      // 2. Exercise.
      LibraryJob.CreateJobResourcePrice(JobResourcePrice,Job."No.",'',JobResourcePrice.Type,Resource."No.",'','');  // Blank value is for Job Task No., Work type Code and Currency Code.

      // 3. Verify.
      JobResourcePrice.GET(
        JobResourcePrice."Job No.",JobResourcePrice."Job Task No.",JobResourcePrice.Type,JobResourcePrice.Code,
        JobResourcePrice."Work Type Code",JobResourcePrice."Currency Code");
    END;

    [Test]
    PROCEDURE JobResourcePriceWithJobTaskNoWithTypeNotPosting@109();
    VAR
      Resource@1002 : Record 156;
      JobTask@1000 : Record 1001;
      JobResourcePrice@1001 : Record 1012;
    BEGIN
      // Test the error message when creating Job Resource Price with Job Task No. for Job Task type is not Posting.

      // 1. Setup.
      Initialize;
      Resource.GET(LibraryResource.CreateResourceNo);
      CreateJobWithJobTask(JobTask);
      JobTask.VALIDATE("Job Task Type",JobTask."Job Task Type"::"Begin-Total");
      JobTask.MODIFY(TRUE);

      // 2. Exercise.
      ASSERTERROR LibraryJob.CreateJobResourcePrice(
          JobResourcePrice,JobTask."Job No.",JobTask."Job Task No.",JobResourcePrice.Type::Resource,Resource."No.",'','');  // Blank value is for Work Type Code and Currency Code.

      // 3. Verify.
      Assert.ExpectedError(
        STRSUBSTNO(
          JobTaskTypeError,JobTask.FIELDCAPTION("Job Task Type"),JobTask.TABLECAPTION,JobTask.FIELDCAPTION("Job No."),
          JobTask."Job No.",JobTask.FIELDCAPTION("Job Task No."),JobTask."Job Task No.",JobTask."Job Task Type"));
    END;

    [Test]
    PROCEDURE UnitPriceOnJobResourcePrice@120();
    VAR
      JobResourcePrice@1001 : Record 1012;
    BEGIN
      // Test the Unit Price field becomes empty as Unit Cost Factor field is filled on the Job Resource Price.

      // 1. Setup.
      Initialize;
      CreateJobResourcePrice(JobResourcePrice,JobResourcePrice.Type::Resource,LibraryResource.CreateResourceNo);
      ModifyJobResourcePriceForUnitPrice(JobResourcePrice,LibraryRandom.RandDec(100,2));  // Use Random value for Unit Price.

      // 2. Exercise.
      ModifyJobResourcePriceForUnitCostFactor(JobResourcePrice,LibraryRandom.RandDec(100,2));  // Use Random value for Unit Cost Factor.

      // 3. Verify.
      JobResourcePrice.TESTFIELD("Unit Price",0);  // Unit Price must be empty.
    END;

    [Test]
    PROCEDURE UnitCostFactorOnJobResourcePrice@133();
    VAR
      JobResourcePrice@1001 : Record 1012;
    BEGIN
      // Test the Unit Cost Factor field becomes empty as Unit Price field is filled on the Job Resource Price.

      // 1. Setup.
      Initialize;
      CreateJobResourcePrice(JobResourcePrice,JobResourcePrice.Type::Resource,LibraryResource.CreateResourceNo);
      ModifyJobResourcePriceForUnitCostFactor(JobResourcePrice,LibraryRandom.RandDec(100,2));  // Use Random value for Unit Cost Factor.

      // 2. Exercise.
      ModifyJobResourcePriceForUnitPrice(JobResourcePrice,LibraryRandom.RandDec(100,2));  // Use Random value for Unit Price.

      // 3. Verify.
      JobResourcePrice.TESTFIELD("Unit Cost Factor",0);  // Unit Cost Factor must be empty.
    END;

    [Test]
    PROCEDURE JobResourcePriceWithBlankResourceNo@138();
    VAR
      JobTask@1000 : Record 1001;
      JobResourcePrice@1001 : Record 1012;
    BEGIN
      // Test the error message when creating Job Resource Price with blank Resource No.

      // 1. Setup.
      Initialize;
      CreateJobWithJobTask(JobTask);

      // 2. Exercise.
      ASSERTERROR LibraryJob.CreateJobResourcePrice(
          JobResourcePrice,JobTask."Job No.",JobTask."Job Task No.",JobResourcePrice.Type::Resource,'','','');  // Blank value is for Code, Work Type Code, Currency Code.

      // 3. Verify.
      Assert.VerifyFailure(RecordNotFound,STRSUBSTNO(TestForBlankValuesPassed,JobResourcePrice.TABLECAPTION));
    END;

    [Test]
    PROCEDURE ApplyJobDiscountOnJobResourcePrice@22();
    VAR
      JobResourcePrice@1001 : Record 1012;
      ApplyJobDiscount@1000 : Boolean;
    BEGIN
      // Test the Apply Job Discount field on the Job Resource Price.

      // 1. Setup.
      Initialize;
      CreateJobResourcePrice(JobResourcePrice,JobResourcePrice.Type::Resource,LibraryResource.CreateResourceNo);

      // 2. Exercise.
      JobResourcePrice.VALIDATE("Apply Job Discount",FALSE);
      JobResourcePrice.MODIFY(TRUE);
      ApplyJobDiscount := JobResourcePrice."Apply Job Discount";

      // 3. Verify.
      JobResourcePrice.TESTFIELD("Apply Job Discount",ApplyJobDiscount);
    END;

    [Test]
    PROCEDURE ApplyJobPriceOnJobResourcePrice@41();
    VAR
      JobResourcePrice@1001 : Record 1012;
      ApplyJobPrice@1000 : Boolean;
    BEGIN
      // Test the Apply Job Price field on the Job Resource Price.

      // 1. Setup.
      Initialize;
      CreateJobResourcePrice(JobResourcePrice,JobResourcePrice.Type::Resource,LibraryResource.CreateResourceNo);

      // 2. Exercise.
      JobResourcePrice.VALIDATE("Apply Job Price",FALSE);
      JobResourcePrice.MODIFY(TRUE);
      ApplyJobPrice := JobResourcePrice."Apply Job Price";

      // 3. Verify.
      JobResourcePrice.TESTFIELD("Apply Job Price",ApplyJobPrice);
    END;

    [Test]
    PROCEDURE JobResourcePricesWithTypeGroupResource@66();
    VAR
      JobResourcePrice@1001 : Record 1012;
      ResourceGroup@1000 : Record 152;
    BEGIN
      // Test the creation of Job Resource Price with Type Group(Resource).

      // 1. Setup.
      Initialize;
      LibraryResource.CreateResourceGroup(ResourceGroup);

      // 2. Exercise.
      CreateJobResourcePrice(JobResourcePrice,JobResourcePrice.Type::"Group(Resource)",ResourceGroup."No.");

      // 3. Verify: To verify the creation of Job Resource Price.
      JobResourcePrice.GET(
        JobResourcePrice."Job No.",JobResourcePrice."Job Task No.",JobResourcePrice.Type::"Group(Resource)",JobResourcePrice.Code,
        JobResourcePrice."Work Type Code",JobResourcePrice."Currency Code");
    END;

    [Test]
    PROCEDURE JobResourcePricesWithBlankTypeGroupResource@60();
    VAR
      JobResourcePrice@1001 : Record 1012;
      ResourceGroup@1000 : Record 152;
    BEGIN
      // Test the creation of Job Resource Price with Blank Group Resource in the field Code.

      // 1. Setup.
      Initialize;
      LibraryResource.CreateResourceGroup(ResourceGroup);

      // 2. Exercise.
      ASSERTERROR CreateJobResourcePrice(JobResourcePrice,JobResourcePrice.Type::"Group(Resource)",'');

      // 3. Verify.
      Assert.VerifyFailure(
        RecordNotFound,
        STRSUBSTNO(FieldCodeError,JobResourcePrice.FIELDCAPTION(Code),JobResourcePrice.FIELDCAPTION(Type),JobResourcePrice.Type));
    END;

    [Test]
    PROCEDURE JobResourcePricesWithTypeAll@54();
    VAR
      JobResourcePrice@1001 : Record 1012;
    BEGIN
      // Test the creation of Job Resource Price with Type All.

      // 1. Setup.
      Initialize;

      // 2. Exercise.
      ASSERTERROR CreateJobResourcePrice(JobResourcePrice,JobResourcePrice.Type::All,LibraryResource.CreateResourceNo);

      // 3. Verify.
      Assert.ExpectedError(
        STRSUBSTNO(FieldCodeError,JobResourcePrice.FIELDCAPTION(Code),JobResourcePrice.FIELDCAPTION(Type),JobResourcePrice.Type));
    END;

    [Test]
    PROCEDURE UnitCostFactorOnJobGLAccountPrice@21();
    VAR
      JobGLAccountPrice@1001 : Record 1014;
      JobJournalLine@1002 : Record 210;
      JobTask@1000 : Record 1001;
    BEGIN
      // Check Unit Price on Job Journal Line after updating Unit Cost Factor on Job GL Account Price.

      // 1. Setup.
      Initialize;
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobGLAccountPrice(
        JobGLAccountPrice,JobTask."Job No.",JobTask."Job Task No.",LibraryERM.CreateGLAccountWithSalesSetup,'');
      UpdateUnitCostFactorOnJobGLAccountPrice(JobGLAccountPrice);

      // Exercise: Update Unit Cost on Job Journal Line for G/L Account, take Random Unit Cost.
      UpdateUnitCostOnJobJournalLine(
        JobJournalLine,JobTask,JobGLAccountPrice."G/L Account No.",LibraryRandom.RandDec(100,2));

      // Verify: Verify Unit Price updated on Job Journal Line.
      Assert.AreNearlyEqual(
        JobJournalLine."Unit Cost" * JobGLAccountPrice."Unit Cost Factor",JobJournalLine."Unit Price",0.001,
        'Unit Price Matched Computed Unit Price');
    END;

    [Test]
    PROCEDURE JobGLAccountPriceErrorWithoutJobNo@49();
    VAR
      JobGLAccountPrice@1000 : Record 1014;
    BEGIN
      // Check the error message when Job No. is not filled while creating Job GL Account Price.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Try to create Job GL Account Price without Job No.
      ASSERTERROR LibraryJob.CreateJobGLAccountPrice(JobGLAccountPrice,'','','','');  // Passing blank values for Job No, Job Task No, GL Account No. and Currency Code.

      // 3. Verify: Verify error message when Job No. is not filled for Job GL Account Price.
      WITH JobGLAccountPrice DO
        Assert.ExpectedError(
          STRSUBSTNO(
            FieldsBlankError,FIELDCAPTION("Job No."),TABLECAPTION,FIELDCAPTION("Job No."),'',FIELDCAPTION("Job Task No."),'',
            FIELDCAPTION("G/L Account No."),'',FIELDCAPTION("Currency Code"),''));
    END;

    [Test]
    PROCEDURE JobGLAccountPriceErrorWithoutGLAccountNo@47();
    VAR
      JobGLAccountPrice@1000 : Record 1014;
      JobTask@1001 : Record 1001;
    BEGIN
      // Check the error message when GL Account No. is not filled for Job GL Account Price.

      // 1. Setup.
      Initialize;
      CreateJobWithJobTask(JobTask);

      // 2. Exercise: Try to create Job GL Account Price without GL Account No.
      ASSERTERROR LibraryJob.CreateJobGLAccountPrice(JobGLAccountPrice,JobTask."Job No.",'','','');  // Passing blank values for Job Task No, GL Account No. and Currency Code.

      // 3. Verify: Verify error message when GL Account No. is not filled for Job GL Account Price.
      WITH JobGLAccountPrice DO
        Assert.ExpectedError(
          STRSUBSTNO(
            FieldsBlankError,FIELDCAPTION("G/L Account No."),TABLECAPTION,FIELDCAPTION("Job No."),"Job No.",
            FIELDCAPTION("Job Task No."),'',FIELDCAPTION("G/L Account No."),'',FIELDCAPTION("Currency Code"),''));
    END;

    [Test]
    PROCEDURE JobGLAccountPriceCreation@42();
    VAR
      JobGLAccountPrice@1001 : Record 1014;
      JobTask@1000 : Record 1001;
    BEGIN
      // Check that Job G/L Account Price Created successfully.

      // 1. Setup.
      Initialize;
      CreateJobWithJobTask(JobTask);

      // 2. Exercise.
      LibraryJob.CreateJobGLAccountPrice(JobGLAccountPrice,JobTask."Job No.",'',LibraryERM.CreateGLAccountWithSalesSetup,'');  // Passing blank values for Job Task No. and Currency Code.

      // 3. Verify: Verify that Job GL Account Price created successfully and check its Description.
      JobGLAccountPrice.GET(JobGLAccountPrice."Job No.",'',JobGLAccountPrice."G/L Account No.",'');
    END;

    [Test]
    PROCEDURE UnitCostFactorZeroOnJobGLAccountPrice@146();
    VAR
      JobGLAccountPrice@1001 : Record 1014;
      JobTask@1000 : Record 1001;
    BEGIN
      // Check that Unit Cost Factor becomes Zero after updating Unit Price on Job G/L Account Price.

      // 1. Setup: Create Job GL Account Price with Unit Cost Factor.
      Initialize;
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobGLAccountPrice(
        JobGLAccountPrice,JobTask."Job No.",JobTask."Job Task No.",LibraryERM.CreateGLAccountWithSalesSetup,'');
      UpdateUnitCostFactorOnJobGLAccountPrice(JobGLAccountPrice);

      // 2. Exercise.
      UpdateUnitPriceOnJobGLAccountPrice(JobGLAccountPrice);

      // 3. Verify: Verify that after updating Unit Price, Unit Cost Factor will be Zero.
      JobGLAccountPrice.GET(JobGLAccountPrice."Job No.",JobTask."Job Task No.",JobGLAccountPrice."G/L Account No.",'');
      JobGLAccountPrice.TESTFIELD("Unit Cost Factor",0);
    END;

    [Test]
    PROCEDURE UnitPriceOnJobGLAccountPrice@188();
    VAR
      JobGLAccountPrice@1001 : Record 1014;
      JobTask@1000 : Record 1001;
    BEGIN
      // Check that Unit Price becomes Zero after updating Unit Cost Factor on Job G/L Account Price.

      // 1. Setup: Create Job GL Account Price with Unit Price.
      Initialize;
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobGLAccountPrice(
        JobGLAccountPrice,JobTask."Job No.",JobTask."Job Task No.",LibraryERM.CreateGLAccountWithSalesSetup,'');  // Passing blank value for Currency Code.
      UpdateUnitPriceOnJobGLAccountPrice(JobGLAccountPrice);

      // 2. Exercise.
      UpdateUnitCostFactorOnJobGLAccountPrice(JobGLAccountPrice);

      // 3. Verify: Verify that after updating Unit Cost Factor, Unit Price will be Zero.
      JobGLAccountPrice.GET(JobGLAccountPrice."Job No.",JobTask."Job Task No.",JobGLAccountPrice."G/L Account No.",'');
      JobGLAccountPrice.TESTFIELD("Unit Price",0);
    END;

    [Test]
    PROCEDURE UnitPriceOnJobJournalLineWithCurrency@223();
    VAR
      Currency@1003 : Record 4;
      JobGLAccountPrice@1001 : Record 1014;
      JobJournalLine@1002 : Record 210;
      JobTask@1000 : Record 1001;
    BEGIN
      // Check Unit Price on Job Journal Line when Unit Cost Factor and Currency Code is attached on Job GL Account Price.

      // 1. Setup.
      Initialize;
      LibraryERM.FindCurrency(Currency);
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobGLAccountPrice(
        JobGLAccountPrice,JobTask."Job No.",JobTask."Job Task No.",LibraryERM.CreateGLAccountWithSalesSetup,Currency.Code);
      UpdateUnitCostFactorOnJobGLAccountPrice(JobGLAccountPrice);

      // 2. Exercise: Update Unit Cost on Job Journal Line for G/L Account, take Random Unit Cost.
      UpdateUnitCostOnJobJournalLine(
        JobJournalLine,JobTask,JobGLAccountPrice."G/L Account No.",LibraryRandom.RandDec(100,2));

      // 3. Verify: Verify Unit Price on Job Journal Line.
      JobJournalLine.TESTFIELD(
        "Unit Price",JobJournalLine."Unit Cost" * JobGLAccountPrice."Unit Cost Factor" * Currency."Currency Factor");
    END;

    [Test]
    PROCEDURE UnitPriceOnJobJournalLineWithoutCostFactor@239();
    VAR
      JobGLAccountPrice@1001 : Record 1014;
      JobJournalLine@1002 : Record 210;
      JobTask@1000 : Record 1001;
    BEGIN
      // Check that Unit Price on Job Journal Line updated according to Job GL Account Price's Unit Price.

      // 1. Setup: Create Job GL Account Price with Unit Price.
      Initialize;
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobGLAccountPrice(
        JobGLAccountPrice,JobTask."Job No.",JobTask."Job Task No.",LibraryERM.CreateGLAccountWithSalesSetup,'');  // Passing blank value for Currency Code.
      UpdateUnitPriceOnJobGLAccountPrice(JobGLAccountPrice);

      // 2. Exercise: Create Job Journal Line with Zero Unit Cost.
      UpdateUnitCostOnJobJournalLine(JobJournalLine,JobTask,JobGLAccountPrice."G/L Account No.",0);

      // 3. Verify: Verify Unit Price on Job Journal Line.
      JobJournalLine.TESTFIELD("Unit Price",JobGLAccountPrice."Unit Price");
    END;

    [Test]
    PROCEDURE UnitCostOnJobJournalLineForGLAccount@252();
    VAR
      JobGLAccountPrice@1001 : Record 1014;
      JobJournalLine@1002 : Record 210;
      JobTask@1000 : Record 1001;
    BEGIN
      // Check that Unit Cost on Job Journal Line updated according to Job GL Account Price's Unit Cost.

      // 1. Setup: Create Job GL Account Price with Unit Cost, Create Job Journal Line.
      Initialize;
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobGLAccountPrice(
        JobGLAccountPrice,JobTask."Job No.",JobTask."Job Task No.",LibraryERM.CreateGLAccountWithSalesSetup,'');  // Passing blank value for Currency Code.
      UpdateUnitCostOnJobGLAccountPrice(JobGLAccountPrice);
      LibraryJob.CreateJobJournalLineForType(
        JobJournalLine."Line Type"::" ",JobJournalLine.Type::"G/L Account",JobTask,JobJournalLine);

      // 2. Exercise: Update GL Account No. on Job Journal Line as per Job GL Account Price.
      JobJournalLine.VALIDATE("No.",JobGLAccountPrice."G/L Account No.");
      JobJournalLine.MODIFY(TRUE);

      // 3. Verify: Verify that Unit Cost on Job Journal Line updated according to Job GL Account Price's Unit Cost.
      JobJournalLine.TESTFIELD("Unit Cost",JobGLAccountPrice."Unit Cost");
    END;

    [Test]
    PROCEDURE LineDiscountPctOnJobJournalLine@297();
    VAR
      JobGLAccountPrice@1001 : Record 1014;
      JobTask@1000 : Record 1001;
      JobJournalLine@1003 : Record 210;
    BEGIN
      // Check that Line Discount Percent correctly updated on Job Journal Line when Account Type is GL Account and GL Account used is from Job GL Account Price.

      // 1. Setup: Create Job GL Account Price with Discount Percent.
      Initialize;
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobGLAccountPrice(
        JobGLAccountPrice,JobTask."Job No.",JobTask."Job Task No.",LibraryERM.CreateGLAccountWithSalesSetup,'');  // Passing blank value for Currency Code.
      UpdateLineDiscountPctOnJobGLAccountPrice(JobGLAccountPrice);

      // 2. Exercise: Update Unit Cost on Job Journal Line for G/L Account, take Random Unit Cost.
      UpdateUnitCostOnJobJournalLine(
        JobJournalLine,JobTask,JobGLAccountPrice."G/L Account No.",LibraryRandom.RandDec(100,2));

      // 3. Verify: Verify Discount Percent.
      JobJournalLine.TESTFIELD("Line Discount %",JobGLAccountPrice."Line Discount %");
    END;

    [Test]
    PROCEDURE UnitPriceOnJobPlanningLine@77();
    VAR
      GLAccount@1003 : Record 15;
      JobGLAccountPrice@1001 : Record 1014;
      JobPlanningLine@1002 : Record 1003;
      JobTask@1000 : Record 1001;
    BEGIN
      // Check Unit Price on Job Planning Line updated according to Unit Price on Job GL Account Price.

      // 1. Setup: Create and update Job GL Account Price.
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobGLAccountPrice(
        JobGLAccountPrice,JobTask."Job No.",JobTask."Job Task No.",GLAccount."No.",'');  // Passing blank value for Currency Code.
      UpdateUnitPriceOnJobGLAccountPrice(JobGLAccountPrice);

      // 2. Exercise.
      CreateJobPlanningLine(
        JobPlanningLine,JobTask,JobPlanningLine."Line Type"::Contract,GLAccount."No.",JobPlanningLine.Type::"G/L Account");

      // 3. Verify: Verify Unit Price updated on Job Planning Line.
      JobPlanningLine.TESTFIELD("Unit Price",JobGLAccountPrice."Unit Price");
    END;

    [Test]
    PROCEDURE UnitPriceOnJobPlanningLineWithCurrency@68();
    VAR
      Currency@1003 : Record 4;
      JobGLAccountPrice@1001 : Record 1014;
      JobPlanningLine@1002 : Record 1003;
      JobTask@1000 : Record 1001;
    BEGIN
      // Check Unit Price on Job Planning Line when Unit Cost Factor and Currency Code is attached on Job GL Account Price.

      // 1. Setup: Create Job Task, Find a Currency, Create and update GL Account Price with Currency, Create Job Planning Line for GL Account.
      Initialize;
      LibraryERM.FindCurrency(Currency);
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobGLAccountPrice(
        JobGLAccountPrice,JobTask."Job No.",JobTask."Job Task No.",LibraryERM.CreateGLAccountWithSalesSetup,Currency.Code);
      UpdateUnitCostFactorOnJobGLAccountPrice(JobGLAccountPrice);
      CreateJobPlanningLine(
        JobPlanningLine,JobTask,JobPlanningLine."Line Type"::Contract,JobGLAccountPrice."G/L Account No.",
        JobPlanningLine.Type::"G/L Account");

      // 2. Exercise: Update Unit Cost on Job Planning Line for G/L Account, take Random Unit Cost.
      JobPlanningLine.VALIDATE("Unit Cost",LibraryRandom.RandDec(100,2));
      JobPlanningLine.MODIFY(TRUE);

      // 3. Verify: Verify Unit Price on Job Planning Line.
      JobPlanningLine.TESTFIELD(
        "Unit Price",JobPlanningLine."Unit Cost" * JobGLAccountPrice."Unit Cost Factor" * Currency."Currency Factor");
    END;

    [Test]
    PROCEDURE UnitCostOnJobPlanningLineForGLAccount@93();
    VAR
      JobGLAccountPrice@1001 : Record 1014;
      JobPlanningLine@1002 : Record 1003;
      JobTask@1000 : Record 1001;
    BEGIN
      // Check Unit Cost on Job Planning Line updated according to Unit Cost on Job GL Account Price.

      // 1. Setup.
      Initialize;
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobGLAccountPrice(
        JobGLAccountPrice,JobTask."Job No.",JobTask."Job Task No.",LibraryERM.CreateGLAccountWithSalesSetup,'');  // Passing blank value for Currency Code.
      UpdateUnitCostOnJobGLAccountPrice(JobGLAccountPrice);

      // 2. Exercise.
      CreateJobPlanningLine(
        JobPlanningLine,JobTask,JobPlanningLine."Line Type"::Contract,
        JobGLAccountPrice."G/L Account No.",JobPlanningLine.Type::"G/L Account");

      // 3. Verify: Verify Unit Cost updated on Job Planning Line.
      JobPlanningLine.TESTFIELD("Unit Cost",JobGLAccountPrice."Unit Cost");
    END;

    [Test]
    PROCEDURE LineDiscountPctOnJobPlanningLine@40();
    VAR
      JobGLAccountPrice@1001 : Record 1014;
      JobTask@1000 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
    BEGIN
      // Check that Line Discount Percent correctly updated on Job Planning Line.

      // 1. Setup: Create Job GL Account Price with Discount Percent.
      Initialize;
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobGLAccountPrice(
        JobGLAccountPrice,JobTask."Job No.",JobTask."Job Task No.",LibraryERM.CreateGLAccountWithSalesSetup,'');  // Passing blank value for Currency Code.
      UpdateLineDiscountPctOnJobGLAccountPrice(JobGLAccountPrice);

      // 2. Exercise.
      CreateJobPlanningLine(
        JobPlanningLine,JobTask,JobPlanningLine."Line Type"::Contract,
        JobGLAccountPrice."G/L Account No.",JobPlanningLine.Type::"G/L Account");

      // 3. Verify: Verify Discount Percent on Job Planning Line.
      JobPlanningLine.TESTFIELD("Line Discount %",JobGLAccountPrice."Line Discount %");
    END;

    [Test]
    [HandlerFunctions(JobTransferToSalesInvoiceRequestPageHandler,MessageHandler)]
    PROCEDURE UnitPriceOnSalesInvoiceForJobGLAccountPrice@108();
    VAR
      JobGLAccountPrice@1001 : Record 1014;
      JobPlanningLine@1002 : Record 1003;
      JobTask@1000 : Record 1001;
      SalesLine@1005 : Record 37;
      JobCreateInvoice@1004 : Codeunit 1002;
    BEGIN
      // Check Unit Price on Sales Line created from Job Planning Line using GL Account used for Job GL Account Price.

      // 1. Setup: Create Job GL Price with Discount Percent and Unit Price, Create and Update Job Planning Line.
      Initialize;
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobGLAccountPrice(
        JobGLAccountPrice,JobTask."Job No.",JobTask."Job Task No.",LibraryERM.CreateGLAccountWithSalesSetup,'');  // Passing blank value for Currency Code.
      UpdateUnitPriceOnJobGLAccountPrice(JobGLAccountPrice);
      UpdateJobPlanningLine(JobPlanningLine,JobTask,JobGLAccountPrice."G/L Account No.");
      COMMIT;  // Using Commit to prevent Test Failure.

      // 2. Exercise: Create Sales Invoice from Job Planning Line.
      LibraryVariableStorage.Enqueue(WORKDATE);
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,FALSE);  // Passing False to avoid Credit Memo creation.

      // 3. Verify: Verify Unit Price and Quantity on Sales Line.
      FindSalesLine(SalesLine,SalesLine."Document Type"::Invoice,SalesLine.Type::"G/L Account",JobTask."Job No.");
      SalesLine.TESTFIELD("Unit Price",JobGLAccountPrice."Unit Price");
      SalesLine.TESTFIELD(Quantity,JobPlanningLine.Quantity);
      SalesLine.TESTFIELD("Gen. Prod. Posting Group",JobPlanningLine."Gen. Prod. Posting Group");
    END;

    [Test]
    [HandlerFunctions(JobTransferToSalesInvoiceRequestPageHandler,MessageHandler)]
    PROCEDURE PostedSalesInvoiceForJobGLAccountPrice@44();
    VAR
      JobGLAccountPrice@1001 : Record 1014;
      JobPlanningLine@1002 : Record 1003;
      JobTask@1000 : Record 1001;
      SalesHeader@1005 : Record 36;
      SalesLine@1009 : Record 37;
      JobCreateInvoice@1004 : Codeunit 1002;
      DocumentNo@1006 : Code[20];
    BEGIN
      // Check Unit Price, Discount Percent and Discount Amount on Job Ledger Entry after posting Sales Invoice created from Job Planning Line.

      // 1. Setup: Create Job GL Price with Discount Percent and Unit Price, Create and Update Job Planning Line, Create Sales Invoice from Job Planning Line.
      Initialize;
      CreateJobWithJobTask(JobTask);
      CreateAndUpdateJobGLAccountPrice(JobGLAccountPrice,JobTask);
      UpdateJobPlanningLine(JobPlanningLine,JobTask,JobGLAccountPrice."G/L Account No.");
      COMMIT;  // Using Commit to prevent Test Failure.
      LibraryVariableStorage.Enqueue(WORKDATE);
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,FALSE);  // Passing False to avoid Credit Memo creation.
      FindSalesHeader(SalesHeader,SalesLine."Document Type"::Invoice,JobTask."Job No.",SalesLine.Type::"G/L Account");

      // 2. Exercise: Post Sales Invoice created from Job Planning Line.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 3. Verify: Verify Unit Price after posting Sales Invoice on Job Ledger Entry.
      VerifyDiscountOnJobLedgerEntry(
        DocumentNo,JobTask."Job No.",JobGLAccountPrice."G/L Account No.",JobGLAccountPrice."Unit Price",
        JobGLAccountPrice."Line Discount %",
        ROUND(-JobPlanningLine.Quantity * JobGLAccountPrice."Unit Price" * JobGLAccountPrice."Line Discount %" / 100));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobJournalWithBinAndPositiveQuantity@55();
    VAR
      ItemJournalLine@1001 : Record 83;
      JobJournalLine@1002 : Record 210;
      JobTask@1000 : Record 1001;
      WarehouseEntry@1007 : Record 7312;
    BEGIN
      // Test Warehouse Entry and Bin Content Entry after posting the Job Journal with Bin and positive Quantity.

      // 1. Setup: Create and post Item Journal Lines, Create Job Journal Line with positive Quantity.
      Initialize;
      CreateItemJournalWithBinLocation(ItemJournalLine);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
      CreateJobWithJobTask(JobTask);
      CreateJobJournalLineWithBin(JobJournalLine,JobTask,ItemJournalLine,ItemJournalLine.Quantity - ItemJournalLine.Quantity / 2);

      // 2. Exercise.
      LibraryJob.PostJobJournal(JobJournalLine);

      // 3. Verify.
      VerifyWarehouseEntry(
        WarehouseEntry."Source Document"::"Job Jnl.",WarehouseEntry."Entry Type"::"Negative Adjmt.",JobJournalLine."No.",
        JobJournalLine."Location Code",JobJournalLine."Bin Code",JobJournalLine."Unit of Measure Code",-JobJournalLine.Quantity);
      VerifyBinContentEntry(
        JobJournalLine."No.",JobJournalLine."Location Code",JobJournalLine."Bin Code",
        ItemJournalLine.Quantity - JobJournalLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobJournalWithBinAndNegativeQuantity@52();
    VAR
      ItemJournalLine@1001 : Record 83;
      JobJournalLine@1002 : Record 210;
      JobTask@1000 : Record 1001;
      WarehouseEntry@1007 : Record 7312;
      PositiveQuantity@1003 : Decimal;
    BEGIN
      // Test Warehouse Entry and Bin Content Entry after posting the Job Journal with Bin and negative Quantity.

      // 1. Setup: Create and post Item Journal Lines, Create and Post Job Journal Line with positive Quantity. Create Job Journal Line with negative Quantity.
      Initialize;
      CreateItemJournalWithBinLocation(ItemJournalLine);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
      CreateJobWithJobTask(JobTask);
      CreateJobJournalLineWithBin(JobJournalLine,JobTask,ItemJournalLine,ItemJournalLine.Quantity - ItemJournalLine.Quantity / 2);
      PositiveQuantity := JobJournalLine.Quantity;
      LibraryJob.PostJobJournal(JobJournalLine);
      CreateJobJournalLineWithBin(JobJournalLine,JobTask,ItemJournalLine,-(JobJournalLine.Quantity - JobJournalLine.Quantity / 2));

      // 2. Exercise.
      LibraryJob.PostJobJournal(JobJournalLine);

      // 3. Verify.
      VerifyWarehouseEntry(
        WarehouseEntry."Source Document"::"Job Jnl.",WarehouseEntry."Entry Type"::"Positive Adjmt.",JobJournalLine."No.",
        JobJournalLine."Location Code",JobJournalLine."Bin Code",JobJournalLine."Unit of Measure Code",-JobJournalLine.Quantity);
      VerifyBinContentEntry(
        JobJournalLine."No.",JobJournalLine."Location Code",JobJournalLine."Bin Code",
        ItemJournalLine.Quantity - PositiveQuantity - JobJournalLine.Quantity);
    END;

    [Test]
    PROCEDURE LineDiscountAmountAndPctOnJobJournalLine@51();
    VAR
      JobJournalLine@1001 : Record 210;
      LineAmount@1003 : Decimal;
      LineDiscountAmount@1004 : Decimal;
      LineDiscountPct@1005 : Decimal;
    BEGIN
      // Test the Line Discount Amount and Line Discount% on Job Journal after updating Line Amount.

      // 1. Setup.
      Initialize;
      CreateAndUpdateJobJournalLine(JobJournalLine);
      LineAmount := ROUND(JobJournalLine.Quantity * JobJournalLine."Unit Price (LCY)") - LibraryUtility.GenerateRandomFraction;
      LineDiscountAmount := JobJournalLine."Line Amount" - LineAmount;
      LineDiscountPct := ROUND(LineDiscountAmount * 100 / JobJournalLine."Line Amount",0.00001);  // 0.00001 is used for Rounding Precision.

      // 2. Exercise.
      JobJournalLine.VALIDATE("Line Amount",LineAmount);
      JobJournalLine.MODIFY(TRUE);

      // 3. Verify.
      JobJournalLine.TESTFIELD("Line Discount Amount",LineDiscountAmount);
      JobJournalLine.TESTFIELD("Line Discount %",LineDiscountPct);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler,JobTransferToSalesInvoiceRequestPageHandler)]
    PROCEDURE SalesInvoiceThroughJobPlanningLines@48();
    VAR
      JobJournalLine@1000 : Record 210;
      JobPlanningLine@1002 : Record 1003;
      SalesLine@1004 : Record 37;
      JobCreateInvoice@1003 : Codeunit 1002;
    BEGIN
      // Test the Sales Invoice which is created from Job Planning Lines after posting the Job Journal with updated Line Amount.

      // 1. Setup: Create Job Journal Line and update Line Amount.
      Initialize;
      CreateAndUpdateJobJournalLine(JobJournalLine);
      JobJournalLine.VALIDATE("Line Amount",JobJournalLine."Line Amount" - LibraryUtility.GenerateRandomFraction);
      JobJournalLine.MODIFY(TRUE);
      LibraryJob.PostJobJournal(JobJournalLine);
      FindJobPlanningLine(JobPlanningLine,JobJournalLine."Job No.",JobJournalLine."Job Task No.");

      // 2. Exercise.
      LibraryVariableStorage.Enqueue(WORKDATE);
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,FALSE);

      // 3. Verify.
      FindSalesLine(SalesLine,SalesLine."Document Type"::Invoice,SalesLine.Type::Item,JobJournalLine."Job No.");
      SalesLine.TESTFIELD("Line Discount %",JobJournalLine."Line Discount %");
      SalesLine.TESTFIELD("Line Discount Amount",JobJournalLine."Line Discount Amount");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler,JobTransferToSalesInvoiceRequestPageHandler)]
    PROCEDURE PostingSalesInvoiceThroughJobPlanningLines@45();
    VAR
      JobJournalLine@1000 : Record 210;
      JobPlanningLine@1002 : Record 1003;
      JobLedgerEntry@1006 : Record 169;
      SalesHeader@1004 : Record 36;
      SalesLine@1001 : Record 37;
      JobCreateInvoice@1003 : Codeunit 1002;
      DocumentNo@1005 : Code[20];
    BEGIN
      // Test Job Ledger Entry after posting Sales Invoice which is created from Job Planning Lines after posting the Job Journal with updated Line Amount.

      // 1. Setup: Create Job Journal Line and update Line Amount. Create Sales Invoice through Job Planning Line.
      Initialize;
      CreateAndUpdateJobJournalLine(JobJournalLine);
      JobJournalLine.VALIDATE("Line Amount",JobJournalLine."Line Amount" - LibraryUtility.GenerateRandomFraction);
      JobJournalLine.MODIFY(TRUE);
      LibraryJob.PostJobJournal(JobJournalLine);
      FindJobPlanningLine(JobPlanningLine,JobJournalLine."Job No.",JobJournalLine."Job Task No.");
      LibraryVariableStorage.Enqueue(WORKDATE);
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,FALSE);
      FindSalesHeader(SalesHeader,SalesLine."Document Type"::Invoice,JobJournalLine."Job No.",SalesLine.Type::Item);

      // 2. Exercise: Post Sales Invoice created from Job Planning Line.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 3. Verify.
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,JobJournalLine."Job No.",JobLedgerEntry.Type::Item,JobJournalLine."No.");
      JobLedgerEntry.TESTFIELD("Line Discount %",JobJournalLine."Line Discount %");
      JobLedgerEntry.TESTFIELD("Line Discount Amount",-JobJournalLine."Line Discount Amount");
    END;

    [Test]
    PROCEDURE JobGLJournalWithCurrency@11();
    VAR
      JobTask@1006 : Record 1001;
      GenJournalLine@1003 : Record 81;
      GenJournalBatch@1004 : Record 232;
      Amount@1008 : Decimal;
    BEGIN
      // Test that different Costs updated correctly after Posting Job G/L Journal with Currency Code and Copy VAT Setup to Jnl. Lines = False for Job G/L Journal batch.

      // 1. Setup: Create and Update Job Journal Batch, Job with Job Task and Job Journal Line with Currency Code.
      Initialize;
      CreateAndUpdateJobJournalBatch(GenJournalBatch);
      CreateJobWithJobTask(JobTask);
      CreateJobGLJournalLine(GenJournalLine,GenJournalBatch,GenJournalLine."Bal. Account Type"::"G/L Account",
        LibraryERM.CreateGLAccountNo,LibraryERM.CreateGLAccountNo,JobTask."Job No.",JobTask."Job Task No.",CreateCurrency);
      Amount := LibraryERM.ConvertCurrency(GenJournalLine.Amount,GenJournalLine."Currency Code",'',WORKDATE);  // Calculate Amount in LCY.

      // 2. Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify GL Entries and verify different Costs in Job Ledger Entries.
      VerifyGLEntry(GenJournalLine."Document No.",GenJournalLine."Account No.",Amount);
      VerifyGLEntry(GenJournalLine."Document No.",GenJournalLine."Bal. Account No.",-Amount);
      VerifyDifferentCostsInJobLedgerEntry(GenJournalLine,Amount);
    END;

    [Test]
    [HandlerFunctions(JobJournalTemplateListPageHandler,JobCalcRemainingUsageRequestPageHandler,MessageHandler)]
    PROCEDURE CalcRemainingUsageForJobJournalLine@8();
    VAR
      ItemUnitOfMeasure@1000 : Record 5404;
      JobJournalBatch@1002 : Record 237;
      JobTask@1001 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
      JobJournalLine@1004 : Record 210;
      UnitPrice@1007 : Decimal;
    BEGIN
      // Test that after running Calculate Remaining Usage from Job Journal, correct Quantity, Unit of Measure and Unit Price updated on Job Journal Line.

      // 1. Setup: Create Job Task, Item with Two Unit of Measures, Create Item Price, Create Job Planning Line with second Unit Of Measure.
      Initialize;
      CreateJobWithJobTask(JobTask);
      JobNo := JobTask."Job No.";  // Assign Job No. to Global Variable.
      CreateItemWithTwoUnitOfMeasures(ItemUnitOfMeasure);  // Two Item Unit of Measures needed because the new Item Unit of Measure is used in Test Case.
      UnitPrice := LibraryRandom.RandDec(100,2);  // Take Random Unit Price.
      CreateJobItemPriceWithNewItemAndUnitPrice(JobTask,ItemUnitOfMeasure."Item No.",ItemUnitOfMeasure.Code,UnitPrice);
      CreateJobPlanningLineAndModifyUOM(
        JobPlanningLine,JobTask,JobPlanningLine.Type::Item,ItemUnitOfMeasure."Item No.",ItemUnitOfMeasure.Code);

      // 2. Exercise.
      RunCalcRemainingUsageFromJobJournalPage(JobJournalBatch);

      // 3. Verify: Verify that correct Quantity, Unit Of Measure Code and Unit Price updated on Job Journal Line for Item.
      FindJobJournalLine(JobJournalLine,JobJournalBatch."Journal Template Name",JobJournalBatch.Name);
      JobJournalLine.TESTFIELD(Quantity,JobPlanningLine.Quantity);
      JobJournalLine.TESTFIELD("Unit of Measure Code",ItemUnitOfMeasure.Code);
      JobJournalLine.TESTFIELD("Unit Price",UnitPrice);

      // 4. Tear Down:
      DeleteJobJournalTemplate(JobJournalBatch."Journal Template Name");
    END;

    [Test]
    [HandlerFunctions(JobJournalTemplateListPageHandler,JobCalcRemainingUsageRequestPageHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobLedgerEntriesAfterCalcRemainingUsage@72();
    VAR
      ItemUnitOfMeasure@1000 : Record 5404;
      JobJournalBatch@1005 : Record 237;
      JobTask@1001 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
      JobJournalLine@1004 : Record 210;
      JobLedgerEntry@1002 : Record 169;
      UnitPrice@1007 : Decimal;
    BEGIN
      // Test that after running Calculate Remaining Usage from Job Journal and Posting it, correct Quantity, Unit of Measure and Unit Price updated in Job Ledger Entries.

      // 1. Setup: Create Job Task, Item with Two Unit of Measures, Create Item Price, Create Job Planning Line with other Unit of Measure and Run Calculate Remaining Usage For Job.
      Initialize;
      CreateJobWithJobTask(JobTask);
      JobNo := JobTask."Job No.";  // Assign Job No. to Global Variable.
      CreateItemWithTwoUnitOfMeasures(ItemUnitOfMeasure);
      UnitPrice := LibraryRandom.RandDec(100,2);  // Take Random Unit Price.
      CreateJobItemPriceWithNewItemAndUnitPrice(JobTask,ItemUnitOfMeasure."Item No.",ItemUnitOfMeasure.Code,UnitPrice);
      CreateJobPlanningLineAndModifyUOM(
        JobPlanningLine,JobTask,JobPlanningLine.Type::Item,ItemUnitOfMeasure."Item No.",ItemUnitOfMeasure.Code);
      RunCalcRemainingUsageFromJobJournalPage(JobJournalBatch);
      FindJobJournalLine(JobJournalLine,JobJournalBatch."Journal Template Name",JobJournalBatch.Name);

      // 2. Exercise.
      LibraryJob.PostJobJournal(JobJournalLine);

      // 3. Verify: Verify that Job Ledger Entry carries correct Quantity, Unit Of Measure Code and Unit Price for Item.
      FindJobLedgerEntry(
        JobLedgerEntry,JobJournalLine."Document No.",JobTask."Job No.",JobLedgerEntry.Type::Item,ItemUnitOfMeasure."Item No.");
      JobLedgerEntry.TESTFIELD(Quantity,JobPlanningLine.Quantity);
      JobLedgerEntry.TESTFIELD("Unit of Measure Code",ItemUnitOfMeasure.Code);
      JobLedgerEntry.TESTFIELD("Unit Price",UnitPrice);

      // 4. Tear Down: Delete the Job Journal Template created.
      DeleteJobJournalTemplate(JobJournalBatch."Journal Template Name");
    END;

    [Test]
    PROCEDURE DiscountUpdationOnJobPlanningLine@74();
    VAR
      JobPlanningLine@1001 : Record 1003;
      LineAmount@1003 : Decimal;
      LineDiscountAmount@1004 : Decimal;
    BEGIN
      // Test Line Discount Amount and Line Amount on Job Planning Line for GL Account when Line Discount Percent mentioned on Job Planning Line.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Create Job Planning Line with Line Discount Percent and Unit Price.
      CreateJobPlanningLineWithUnitPriceAndLineDiscountPct(JobPlanningLine,LibraryRandom.RandInt(10));  // Take Random Value for Discount Percent.
      LineDiscountAmount := ROUND(JobPlanningLine."Unit Price" * JobPlanningLine.Quantity * JobPlanningLine."Line Discount %" / 100);
      LineAmount := (JobPlanningLine."Unit Price" * JobPlanningLine.Quantity) - LineDiscountAmount;

      // 3. Verify: Verify Line Discount Amount and Line Amount on Job Planning Line.
      VerifyAmountsOnJobPlanningLine(JobPlanningLine,LineAmount,LineDiscountAmount);
    END;

    [Test]
    PROCEDURE NegativeQuantityUpdationOnJobPlanningLine@104();
    VAR
      JobPlanningLine@1001 : Record 1003;
      LineAmount@1003 : Decimal;
      LineDiscountAmount@1004 : Decimal;
    BEGIN
      // Test Line Discount Amount and Line Amount updated correctly for GL Account when Quantity updated with negative sign.

      // Setup: Create Job Planning Line for GL Account with Line Discount Percent and Unit Price. Calculate Line Discount Amount and Line Amount.
      Initialize;
      CreateJobPlanningLineWithUnitPriceAndLineDiscountPct(JobPlanningLine,LibraryRandom.RandInt(10));  // Take Random Value for Discount Percent.
      LineDiscountAmount := ROUND(JobPlanningLine."Unit Price" * JobPlanningLine.Quantity * JobPlanningLine."Line Discount %" / 100);
      LineAmount := (JobPlanningLine."Unit Price" * JobPlanningLine.Quantity) - LineDiscountAmount;

      // 2. Exercise: Modify Quantity to negative Quantity on Job Planning Line.
      JobPlanningLine.VALIDATE(Quantity,-JobPlanningLine.Quantity);
      JobPlanningLine.MODIFY(TRUE);

      // 3. Verify: Verify that Line Discount Amount and Line Amount updated with negative values.
      VerifyAmountsOnJobPlanningLine(JobPlanningLine,-LineAmount,-LineDiscountAmount);
    END;

    [Test]
    PROCEDURE NegativeQuantityAndLineDiscountAmountUpdateOnJobPlanningLine@102();
    VAR
      JobPlanningLine@1001 : Record 1003;
      LineAmount@1000 : Decimal;
      LineDiscountPct@1003 : Decimal;
      LineDiscountAmount@1004 : Decimal;
    BEGIN
      // Test Line Discount Percent and Line Amount updated correctly for GL Account when Line Discount Amount and Negative Quantity used on Job Planning Line.

      // Setup: Create Job Planning Line for GL Account, Calculate Line Amount and Line Discount Percent.
      Initialize;
      CreateJobPlanningLineWithUnitPriceAndLineDiscountPct(JobPlanningLine,0);  // Take Zero for Line Discount Percent.
      LineAmount := JobPlanningLine."Unit Price" * JobPlanningLine.Quantity;
      LineDiscountAmount := LibraryRandom.RandDec(10,2);  // Take Random Discount Amount.
      LineDiscountPct := ROUND((LineDiscountAmount * 100 ) / LineAmount,LibraryJob.GetUnitAmountRoundingPrecision(''));  // Passing Blank Value for Currency Code.

      // 2. Exercise: Update negative Quantity and Line Discount Amount on Job Planning Line.
      UpdateQuantityAndDiscountOnPlanningLine(JobPlanningLine,-LineDiscountAmount);

      // 3. Verify: Verify Line Discount entries updated correctly after updating Line Discount Amount.
      JobPlanningLine.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line No.");
      Assert.AreNearlyEqual(LineDiscountPct,JobPlanningLine."Line Discount %",0.001,'Line Discount % matches');
      Assert.AreNearlyEqual(-(LineAmount - LineDiscountAmount),JobPlanningLine."Line Amount",0.001,'Line Amount matches');
    END;

    [Test]
    [HandlerFunctions(JobTransferToCreditMemoRequestPageHandler,MessageHandler)]
    PROCEDURE DiscountOnSalesCreditMemoFromJobPlanningLine@113();
    VAR
      JobPlanningLine@1001 : Record 1003;
      SalesLine@1005 : Record 37;
      LineDiscountPct@1003 : Decimal;
      LineDiscountAmount@1004 : Decimal;
    BEGIN
      // Test Line Discount Percent and Line Amount transformed successfully on Sales Credit Memo created from Job Planning Line with Negative Quantity.

      // Setup: Create Job Planning Line for GL Account with negative Quantity.
      Initialize;
      CreateJobPlanningLineWithUnitPriceAndLineDiscountPct(JobPlanningLine,0);  // Take Zero for Line Discount Percent.
      LineDiscountAmount := LibraryRandom.RandDec(10,2);  // Take Random Discount Amount.
      LineDiscountPct :=
        ROUND((LineDiscountAmount * 100 ) / JobPlanningLine."Line Amount",LibraryJob.GetUnitAmountRoundingPrecision(''));  // Passing Blank Value for Currency Code.
      UpdateQuantityAndDiscountOnPlanningLine(JobPlanningLine,-LineDiscountAmount);

      // 2. Exercise.
      CreateCreditMemoFromJobPlanningLine(JobPlanningLine);

      // 3. Verify: Verify Discount Entries updated correctly on Sale Credit Memo Line created using Job Planning Line.
      FindSalesLine(SalesLine,SalesLine."Document Type"::"Credit Memo",SalesLine.Type::"G/L Account",JobPlanningLine."Job No.");

      Assert.AreNearlyEqual(LineDiscountPct,SalesLine."Line Discount %",0.001,'Sales Line Discount % matches');
      Assert.AreNearlyEqual(LineDiscountAmount,SalesLine."Line Discount Amount",0.001,'Sales Line Discount Amount matches');
      SalesLine.TESTFIELD("Line Amount",-JobPlanningLine."Line Amount");
    END;

    [Test]
    [HandlerFunctions(JobTransferToCreditMemoRequestPageHandler,MessageHandler)]
    PROCEDURE DiscountAfterPostingSalesCreditMemo@81();
    VAR
      JobPlanningLine@1001 : Record 1003;
      SalesHeader@1005 : Record 36;
      SalesLine@1000 : Record 37;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Test Line Discount Percent and Line Amount in Job Ledger Entry for Posted Credit Memo, that is created from Job Planning Line.

      // Setup: Create Job Planning Line for GL Account with Negative Quantity and Discount Amount, Create Sales Credit Memo from Job Planning Line.
      Initialize;
      CreateJobPlanningLineWithUnitPriceAndLineDiscountPct(JobPlanningLine,0);  // Take Zero for Line Discount Percent.
      UpdateQuantityAndDiscountOnPlanningLine(JobPlanningLine,-LibraryRandom.RandDec(10,2));  // Taking Random Discount Amount.
      CreateCreditMemoFromJobPlanningLine(JobPlanningLine);
      FindSalesHeader(SalesHeader,SalesLine."Document Type"::"Credit Memo",JobPlanningLine."Job No.",SalesLine.Type::"G/L Account");
      LibrarySales.SetCorrDocNoSales(SalesHeader);

      // 2. Exercise.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 3. Verify: Verify Unit Price, Discount Percent and Discount Amount after posting Sales Credit Memo on Job Ledger Entry.
      VerifyDiscountOnJobLedgerEntry(
        DocumentNo,JobPlanningLine."Job No.",JobPlanningLine."No.",JobPlanningLine."Unit Price",JobPlanningLine."Line Discount %",
        -JobPlanningLine."Line Discount Amount");
    END;

    [Test]
    PROCEDURE SameSourceCodeForJobGenJournalTemplateAndJobGLWIP@151();
    VAR
      SourceCodeSetup@1001 : Record 242;
      GenJournalTemplate@1000 : Record 80;
      GenJournalLine@1002 : Record 81;
      JobTask@1003 : Record 1001;
      GenJournalBatch@1005 : Record 232;
    BEGIN
      // Verify Posting of Job G/L Journal is not allowed when Source Code value in General Journal Template is same as Job G/L WIP value in Source Code Setup.

      // 1. Setup: Create Job with Job Task, Update Source Code Setup for "Job G/L Journal" and "Job G/L WIP" as blank, Create Job General Journal Template with Source Code as blank, Create Job G/L Journal Line.
      Initialize;
      CreateJobWithJobTask(JobTask);
      SourceCodeSetup.GET;
      UpdateSourceCodeSetup('','');
      CreateGeneralJournalTemplateAndBatch(GenJournalBatch);
      CreateJobGLJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Bal. Account Type"::"G/L Account",
        LibraryERM.CreateGLAccountWithSalesSetup,LibraryERM.CreateGLAccountNo,JobTask."Job No.",JobTask."Job Task No.",'');

      // 2. Exercise: Post Job G/L Journal.
      ASSERTERROR PostGeneralJournalLine(GenJournalLine);

      // 3. Verify: Error populates for Source Code in Gen. Journal Template must not be equal to Job G/L WIP in Source Code Setup.
      Assert.ExpectedError(
        STRSUBSTNO(
          SourceCodeEqualError,GenJournalTemplate.FIELDCAPTION("Source Code"),GenJournalTemplate.TABLECAPTION,
          SourceCodeSetup.FIELDCAPTION("Job G/L WIP"),SourceCodeSetup.TABLECAPTION));

      // 3. Tear Down: Roll Back the values for Source Code Setup.
      UpdateSourceCodeSetup(SourceCodeSetup."Job G/L Journal",SourceCodeSetup."Job G/L WIP");
    END;

    [Test]
    [HandlerFunctions(JobTransferToSalesInvoiceRequestPageHandler,MessageHandler)]
    PROCEDURE CheckSalesInvoicePostingWithTypeText@65();
    VAR
      JobTask@1000 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      SalesInvoiceHeader@1006 : Record 112;
      JobCreateInvoice@1002 : Codeunit 1002;
      DocumentNo@1005 : Code[20];
    BEGIN
      // Test posting of sales invoice when sales invoice created from job planning line with type text.

      // Setup: Create Sales Invoice from Job Planning Line.
      Initialize;
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Contract,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
      CreateJobPlanningLineWithTypeText(JobPlanningLine,JobPlanningLine."Line Type"::Contract,JobTask);

      COMMIT;
      LibraryVariableStorage.Enqueue(WORKDATE);
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,FALSE);
      FindSalesHeader(SalesHeader,SalesLine."Document Type"::Invoice,JobTask."Job No.",SalesLine.Type::Item);

      // Exercise: Post Sales Invoice created from Job Planning Line.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verifing that sales invoice posted successfully.
      SalesInvoiceHeader.GET(DocumentNo);
    END;

    [Test]
    PROCEDURE JobUpdateBillToContactNoBlockedPosting@94();
    VAR
      Job@1000 : Record 167;
    BEGIN
      JobUpdateBillToContactNoBlocked(Job.Blocked::Posting);
    END;

    [Test]
    PROCEDURE JobUpdateBillToContactNoBlockedAll@95();
    VAR
      Job@1000 : Record 167;
    BEGIN
      JobUpdateBillToContactNoBlocked(Job.Blocked::All);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE PostJobsGLJournalWithBankAccount@86();
    VAR
      GenJournalLine@1002 : Record 81;
      JobTask@1003 : Record 1001;
      GenJournalBatch@1005 : Record 232;
      BankAccount@1006 : Record 270;
    BEGIN
      // Setup: Create Job with Job Task, Create Job General Journal Template, Create Job G/L Journal Line with Bank Account.
      Initialize;
      CreateJobWithJobTask(JobTask);
      CreateGeneralJournalTemplateAndBatch(GenJournalBatch);
      LibraryERM.CreateBankAccount(BankAccount);
      CreateJobGLJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Bal. Account Type"::"Bank Account",
        LibraryERM.CreateGLAccountWithSalesSetup,BankAccount."No.",JobTask."Job No.",JobTask."Job Task No.",'');

      // Exercise: Post Job G/L Journal.
      PostGeneralJournalLine(GenJournalLine);

      // Verify: Verify Bank Account No. of Bank Account Ledger Entries.
      VerifyBankAccNoOnBankAccountLedgerEntries(BankAccount."No.",-GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(JobJournalTemplateListPageHandler,ItemUnitsOfMeasurePageHandler)]
    PROCEDURE LookupItemUnitOfMeasureJobJournal@82();
    VAR
      JobJournalLine@1000 : Record 210;
      Item@1002 : Record 27;
      UnitOfMeasureCode@1001 : Code[10];
    BEGIN
      // [SCENARIO 362516] Lookup "Unit of Measure" for Item on page "Job Journal" opening and containing relevant data
      LightInit;
      // [GIVEN] Item - "I" with "Unit of Measure" - "UM"
      LibraryInventory.CreateItem(Item);
      UnitOfMeasureCode := Item."Base Unit of Measure";
      // [GIVEN] Job Journal Line, where "Type" = "Item" with Item "I"
      CreateJobJournalLineWithBlankUOM(JobJournalLine,Item."No.",JobJournalLine.Type::Item);
      LibraryVariableStorage.Enqueue(JobJournalLine."Journal Template Name");
      // [WHEN] Lookup "Unit of Measure" in Job Journal Line
      OpenJobJournalAndLookupUnitofMeasure(JobJournalLine."Journal Batch Name");
      // [THEN] Page "Item Units of Measure" is open and contains lines related to Item "I"
      // [THEN] "JJL"."Unit of Measure" = "UM"
      JobJournalLine.FIND;
      Assert.AreEqual(UnitOfMeasureCode,JobJournalLine."Unit of Measure Code",
        JobJournalLine.FIELDCAPTION("Unit of Measure Code"));
    END;

    [Test]
    [HandlerFunctions(JobJournalTemplateListPageHandler,ResourceUnitsOfMeasurePageHandler)]
    PROCEDURE LookupResourceUnitOfMeasureJobJournal@88();
    VAR
      JobJournalLine@1003 : Record 210;
      ResourceNo@1000 : Code[20];
      UnitOfMeasureCode@1001 : Code[10];
    BEGIN
      // [SCENARIO 362516] Lookup "Unit of Measure" for Resource on page "Job Journal" opening and containing relevant data
      LightInit;
      // [GIVEN] Resource - "R" with "Unit of Measure" - "UM"
      ResourceNo := CreateResourceNo(UnitOfMeasureCode);
      // [GIVEN] Job Journal Line, where "Type" = "Resource" with Resource "R"
      CreateJobJournalLineWithBlankUOM(JobJournalLine,ResourceNo,JobJournalLine.Type::Resource);
      LibraryVariableStorage.Enqueue(JobJournalLine."Journal Template Name");
      // [WHEN] Lookup "Unit of Measure" in Job Journal Line
      OpenJobJournalAndLookupUnitofMeasure(JobJournalLine."Journal Batch Name");
      // [THEN] Page "Resource Units of Measure" is open and contains lines related to Resource "R"
      // [THEN] "JJL"."Unit of Measure" = "UM"
      JobJournalLine.FIND;
      Assert.AreEqual(UnitOfMeasureCode,JobJournalLine."Unit of Measure Code",
        JobJournalLine.FIELDCAPTION("Unit of Measure Code"));
    END;

    [Test]
    [HandlerFunctions(JobJournalTemplateListPageHandler,UnitsOfMeasurePageHandler)]
    PROCEDURE LookupUnitOfMeasureJobJournal@105();
    VAR
      JobJournalLine@1001 : Record 210;
      UnitOfMeasure@1000 : Record 204;
      GLAccountNo@1002 : Code[20];
    BEGIN
      // [SCENARIO 362516] Lookup "Unit of Measure" for "G/L Account" on page "Job Journal" opening and containing data
      LightInit;
      // [GIVEN] "G/L Account" - "GLA" and "Unit of Measure" - "UM"
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      GLAccountNo := LibraryERM.CreateGLAccountNo;
      // [GIVEN] Job Journal Line "Type" = "G/L Account" with "GLA"
      CreateJobJournalLineWithBlankUOM(JobJournalLine,GLAccountNo,JobJournalLine.Type::"G/L Account");
      LibraryVariableStorage.Enqueue(JobJournalLine."Journal Template Name");
      LibraryVariableStorage.Enqueue(UnitOfMeasure.Code);
      // [WHEN] Lookup "Unit of Measure" in Job Journal Line
      OpenJobJournalAndLookupUnitofMeasure(JobJournalLine."Journal Batch Name");
      // [THEN] Page "Units of Measure" is open and contains lines
      // [THEN] "JJL"."Unit of Measure" = "UM"
      JobJournalLine.FIND;
      Assert.AreEqual(UnitOfMeasure.Code,JobJournalLine."Unit of Measure Code",
        JobJournalLine.FIELDCAPTION("Unit of Measure Code"));
    END;

    [Test]
    PROCEDURE JobJnlLineSettingUnitPriceToZeroUpdatesLCYAmounts@46();
    VAR
      JobJournalLine@1000 : Record 210;
    BEGIN
      // [FEATURE] [Job Journal] [LCY]
      // [SCENARIO] Setting "Unit Price" = 0 in job journal line sets "Line Amount (LCY)" and "Line Discount Amount (LCY)" to 0

      WITH JobJournalLine DO BEGIN
        // [GIVEN] Job Journal Line with "Line Amount (LCY)" <> 0 and "Line Discount Amount (LCY)" <> 0
        INIT;
        "Line Amount (LCY)" := LibraryRandom.RandDecInRange(100,200,2);
        "Line Discount Amount (LCY)" := LibraryRandom.RandDecInRange(100,200,2);

        // [WHEN] Set "Unit Price" = 0
        VALIDATE("Unit Price",0);

        // [THEN] "Line Amount (LCY)" = 0 and "Line Discount Amount (LCY)" = 0
        TESTFIELD("Line Amount (LCY)",0);
        TESTFIELD("Line Discount Amount (LCY)",0);
      END;
    END;

    [Test]
    PROCEDURE JobJournalAppliesFromEntryExpectedCostOnly@67();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      JobJournalLine@1000 : Record 210;
      ItemLedgerEntry@1005 : Record 32;
    BEGIN
      // [FEATURE] [Job Journal] [Applies-from Entry]
      // [SCENARIO 380651] When setting "Applies-from Entry" fields in job journal to an entry with expected cost only, unit cost should be calculated from expected cost

      Initialize;

      // [GIVEN] Purchase order with job. Cost amount = 7.00, quantity = 2.00
      CreatePurchaseOrderWithJob(PurchaseHeader,PurchaseLine);
      // [GIVEN] Post receipt from purchase order. Posted item ledger entry no. = "N"
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] Create job journal line
      // [WHEN] Set "Applies-from Entry" = "N"
      FindItemLedgerEntry(ItemLedgerEntry,PurchaseLine."Job No.",ItemLedgerEntry."Entry Type"::"Negative Adjmt.");
      CreateJobJournalLineAppliedFromItemLedgerEntry(JobJournalLine,ItemLedgerEntry);

      // [THEN] Unit cost in job journal line is 7.00 / 2.00 = 3.50
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Expected)");
      JobJournalLine.TESTFIELD("Unit Cost",ItemLedgerEntry."Cost Amount (Expected)" / ItemLedgerEntry.Quantity);
    END;

    [Test]
    PROCEDURE JobJournalAppliesFromEntryPartiallyInvoiced@98();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      JobJournalLine@1000 : Record 210;
      ItemLedgerEntry@1005 : Record 32;
    BEGIN
      // [FEATURE] [Job Journal] [Applies-from Entry]
      // [SCENARIO 380651] When setting "Applies-from Entry" fields in job journal to a partially invoiced entry, unit cost should be calculated from the sum of expected and actual cost

      Initialize;

      // [GIVEN] Purchase order with job. Set Quantity = 10, "Qty. to Receive" = 10, "Qty. to Invoice" = 4
      CreatePurchaseOrderWithJob(PurchaseHeader,PurchaseLine);
      // [GIVEN] Post receipt and invoice from purchase order. Posted item ledger entry no. = "N". Actual cost amount = 30, expected cost amount = 20
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [GIVEN] Create job journal line
      // [WHEN] Set "Applies-from Entry" = "N"
      FindItemLedgerEntry(ItemLedgerEntry,PurchaseLine."Job No.",ItemLedgerEntry."Entry Type"::"Negative Adjmt.");
      CreateJobJournalLineAppliedFromItemLedgerEntry(JobJournalLine,ItemLedgerEntry);

      // [THEN] Unit cost in job journal line is (30 + 20) / 10 = 5.00
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Expected)","Cost Amount (Actual)");
      JobJournalLine.TESTFIELD(
        "Unit Cost",(ItemLedgerEntry."Cost Amount (Actual)" + ItemLedgerEntry."Cost Amount (Expected)") / ItemLedgerEntry.Quantity);
    END;

    [Test]
    [HandlerFunctions(JobTransferToSalesInvoiceRequestPageHandler,MessageHandler)]
    PROCEDURE CreateSalesInvoiceActionFromJobPlanningLineWhenCurrFactorIsTheSame@124();
    VAR
      JobPlanningLine@1000 : Record 1003;
      Currency@1001 : Record 4;
      JobCreateInvoice@1002 : Codeunit 1002;
    BEGIN
      // [FEATURE] [Currency]
      // [SCENARIO 204032] "Create Sales Invoice" on "Job Planning Lines" page when Job Planning Line and Sales Invoice have the same Exchange Rate
      Initialize;

      // [GIVEN] Currency with Exchanges Rate: 01.01 = 10,00. 03.01 = 10,50.
      CreateCurrencyAndTwoCurrencyRates(Currency,WORKDATE,WORKDATE + 2);
      // [GIVEN] Job, Job Task and Job Planning Line with "Posting Date" = 01.01 and "Exchange Rate" = 10,00
      CreateJobPlanningLineWithCurrency(JobPlanningLine,Currency.Code);

      // [WHEN]  Run "Job Transfer to Sales Invoice" with "Posting Date" = 02.01
      LibraryVariableStorage.Enqueue(WORKDATE + 1);
      COMMIT;
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,FALSE);

      // [THEN] Sales Invoice created with Exchange Rate 10,00; no confirm messages appears.
      VerifyCurrencyFactor(JobPlanningLine,WORKDATE + 1);
    END;

    [Test]
    [HandlerFunctions(JobTransferToSalesInvoiceRequestPageHandler,MessageHandler,CurrencyRateConfirmHandlerTrue)]
    PROCEDURE CreateSalesInvoiceActionFromJobPlanningLineWhenCurrFactorsForInvoiceAndJobPlanningLineAreDifferent@129();
    VAR
      JobPlanningLine@1000 : Record 1003;
      Currency@1001 : Record 4;
      JobCreateInvoice@1002 : Codeunit 1002;
    BEGIN
      // [FEATURE] [Currency]
      // [SCENARIO 204032] "Create Sales Invoice" on "Job Planning Lines" page when Exchange Rate of Job Planning Line Date is not equal the Sales Invoice's one.
      Initialize;

      // [GIVEN] Currency with Exchanges Rate: 01.01 = 10,00. 03.01 = 10,50.
      CreateCurrencyAndTwoCurrencyRates(Currency,WORKDATE,WORKDATE + 2);
      // [GIVEN] Job, Job Task and Job Planning Line with "Posting Date" = 01.01 and "Exchange Rate" = 10,00
      CreateJobPlanningLineWithCurrency(JobPlanningLine,Currency.Code);

      // [WHEN]  Run "Job Transfer to Sales Invoice" with "Posting Date" = 04.01
      LibraryVariableStorage.Enqueue(WORKDATE + 3);
      LibraryVariableStorage.Enqueue(CurrencyDateConfirmTxt);
      COMMIT;
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,FALSE);

      // [THEN] Sales Invoice created with Exchange Rate 10,50; Job Planning Line Exchange Rate changed to 10,50 after confirmation by user.
      VerifyCurrencyFactor(JobPlanningLine,WORKDATE + 3);
    END;

    [Test]
    [HandlerFunctions(JobTransferToSalesInvoiceRequestPageHandler,MessageHandler,CurrencyRateConfirmHandlerTrue)]
    PROCEDURE CreateSalesInvoiceActionFromJobPlanningLineWhenJobPlanningLineCurrFactorIsChanged@140();
    VAR
      JobPlanningLine@1000 : Record 1003;
      Currency@1001 : Record 4;
      JobCreateInvoice@1002 : Codeunit 1002;
    BEGIN
      // [FEATURE] [Currency]
      // [SCENARIO 204032] "Create Sales Invoice" on "Job Planning Lines" page when Job Planning Line and Sales Invoice Dates are equal, but currency factors are different
      Initialize;

      // [GIVEN] Currency with Exchanges Rate: 01.01 = 10,00. 03.01 = 10,50.
      CreateCurrencyAndTwoCurrencyRates(Currency,WORKDATE,WORKDATE + 2);
      // [GIVEN] Job, Job Task and Job Planning Line with "Posting Date" = 01.01 and "Exchange Rate" = 11,00
      CreateJobPlanningLineWithCurrency(JobPlanningLine,Currency.Code);
      JobPlanningLine.VALIDATE("Currency Factor",LibraryRandom.RandDec(100,2));
      JobPlanningLine.MODIFY(TRUE);

      // [WHEN]  Run "Job Transfer to Sales Invoice" with "Posting Date" = 02.01
      LibraryVariableStorage.Enqueue(WORKDATE + 1);
      LibraryVariableStorage.Enqueue(CurrencyDateConfirmTxt);
      COMMIT;
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,FALSE);

      // [THEN] Sales Invoice created with Exchange Rate 10,00; Job Planning Line Exchange Rate changed to 10,00 after confirmation by user.
      VerifyCurrencyFactor(JobPlanningLine,WORKDATE + 1);
    END;

    LOCAL PROCEDURE Initialize@2();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LightInit;
      IF Initialized THEN
        EXIT;

      LibrarySales.SetCreditWarningsToNoWarnings;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateVATPostingSetup;
      LibraryERMCountryData.UpdateLocalData;
      LibrarySales.SetExtDocNo(FALSE);

      Initialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE LightInit@127();
    BEGIN
      ClearGlobalVariables;
      LibraryVariableStorage.Clear;
    END;

    LOCAL PROCEDURE ClearGlobalVariables@142();
    BEGIN
      JobNo := '';
      NoSeriesCode := '';
    END;

    LOCAL PROCEDURE CreateAndUpdateJobGLAccountPrice@79(VAR JobGLAccountPrice@1000 : Record 1014;JobTask@1002 : Record 1001);
    BEGIN
      LibraryJob.CreateJobGLAccountPrice(
        JobGLAccountPrice,JobTask."Job No.",JobTask."Job Task No.",LibraryERM.CreateGLAccountWithSalesSetup,'');
      JobGLAccountPrice.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));
      JobGLAccountPrice.VALIDATE("Line Discount %",LibraryRandom.RandDec(5,2));
      JobGLAccountPrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateJobJournalBatch@70(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      CreateJobJournalBatch(GenJournalBatch);
      GenJournalBatch.VALIDATE("Copy VAT Setup to Jnl. Lines",FALSE);
      GenJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateJobJournalLine@61(VAR JobJournalLine@1002 : Record 210);
    VAR
      JobTask@1000 : Record 1001;
    BEGIN
      // Create Job Journal Line with Random Quantity and Unit Price.
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobJournalLine(JobJournalLine."Line Type"::Contract,JobTask,JobJournalLine);
      JobJournalLine.VALIDATE(Type,JobJournalLine.Type::Item);
      JobJournalLine.VALIDATE("No.",CreateItem);
      JobJournalLine.VALIDATE(Quantity,LibraryRandom.RandDec(100,2));
      JobJournalLine.VALIDATE("Unit Price (LCY)",LibraryRandom.RandDec(100,2));
      JobJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCurrency@91() : Code[10];
    VAR
      Currency@1000 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCreditMemoFromJobPlanningLine@143(VAR JobPlanningLine@1000 : Record 1003);
    VAR
      JobCreateInvoice@1001 : Codeunit 1002;
    BEGIN
      JobPlanningLine.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line No.");
      JobPlanningLine.VALIDATE("Qty. to Transfer to Invoice",JobPlanningLine.Quantity);
      JobPlanningLine.MODIFY(TRUE);
      COMMIT;  // Required to avoid test failure.
      LibraryVariableStorage.Enqueue(WORKDATE);
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalTemplateAndBatch@152(VAR GenJournalBatch@1000 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::Jobs);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateItem@64() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemJournalWithBinLocation@56(VAR ItemJournalLine@1001 : Record 83);
    VAR
      Bin@1005 : Record 7354;
      BinContent@1004 : Record 7302;
      Item@1003 : Record 27;
      ItemJournalBatch@1002 : Record 233;
      Location@1000 : Record 14;
      WarehouseEmployee@1006 : Record 7301;
    BEGIN
      // Create Warehouse Location.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.MODIFY(TRUE);

      // Create Warehouse Employee and create a new Bin.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,TRUE);
      LibraryWarehouse.CreateBin(Bin,Location.Code,LibraryUtility.GenerateGUID,'','');

      // Create Item and Bin Content for it.
      LibraryWarehouse.CreateBinContent(
        BinContent,Location.Code,'',Bin.Code,LibraryInventory.CreateItem(Item),'',Item."Base Unit of Measure");

      // Create Item Journal Line with Location, Bin and Random Quantity.
      ItemJournalSetup(ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandDec(1000,2));
      ItemJournalLine.VALIDATE("Location Code",Location.Code);
      ItemJournalLine.VALIDATE("Bin Code",Bin.Code);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithTwoUnitOfMeasures@73(VAR ItemUnitOfMeasure@1002 : Record 5404);
    BEGIN
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,CreateItem,1 + LibraryUtility.GenerateRandomFraction);
    END;

    LOCAL PROCEDURE CreateResourceNo@132(VAR UnitOfMeasureCode@1004 : Code[10]) : Code[20];
    VAR
      VATPostingSetup@1000 : Record 325;
      VATBusPostingGroup@1001 : Record 323;
      VATProdPostingGroup@1002 : Record 324;
      Resource@1003 : Record 156;
    BEGIN
      LibraryERM.CreateVATBusinessPostingGroup(VATBusPostingGroup);
      LibraryERM.CreateVATProductPostingGroup(VATProdPostingGroup);
      LibraryERM.CreateVATPostingSetup(VATPostingSetup,VATBusPostingGroup.Code,VATProdPostingGroup.Code);
      LibraryResource.CreateResource(Resource,VATBusPostingGroup.Code);
      UnitOfMeasureCode := Resource."Base Unit of Measure";
      EXIT(Resource."No.");
    END;

    LOCAL PROCEDURE CreateJobItemPrice@20(VAR JobItemPrice@1002 : Record 1013);
    VAR
      Item@1001 : Record 27;
      JobTask@1000 : Record 1001;
    BEGIN
      Item.GET(LibraryJob.FindItem);
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobItemPrice(
        JobItemPrice,JobTask."Job No.",JobTask."Job Task No.",Item."No.",'','',Item."Base Unit of Measure");  // Blank value is for Currency Code and Variant Code.
    END;

    LOCAL PROCEDURE CreateJobItemPriceWithNewItemAndUnitPrice@97(JobTask@1001 : Record 1001;ItemNo@1002 : Code[20];ItemUnitOfMeasureCode@1004 : Code[10];UnitPrice@1003 : Decimal);
    VAR
      JobItemPrice@1000 : Record 1013;
    BEGIN
      LibraryJob.CreateJobItemPrice(JobItemPrice,JobTask."Job No.",JobTask."Job Task No.",ItemNo,'','',ItemUnitOfMeasureCode);  // Blank value is for Currency Code and Variant Code.
      JobItemPrice.VALIDATE("Unit Price",UnitPrice);
      JobItemPrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobGLJournalLine@80(VAR GenJournalLine@1003 : Record 81;GenJournalBatch@1000 : Record 232;BalAccountType@1006 : Option;AccountNo@1002 : Code[20];BalAccountNo@1007 : Code[20];JobNo@1004 : Code[20];JobTaskNo@1005 : Code[20];CurrencyCode@1001 : Code[10]);
    BEGIN
      // Taking Random value for Job Quantity and Amount.
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::"G/L Account",AccountNo,LibraryRandom.RandDec(100,2));

      WITH GenJournalLine DO BEGIN
        VALIDATE("Bal. Account Type",BalAccountType);
        VALIDATE("Bal. Account No.",BalAccountNo);
        VALIDATE("Currency Code",CurrencyCode);
        VALIDATE("Job Line Type","Job Line Type"::"Both Schedule and Contract");
        VALIDATE("Job No.",JobNo);
        VALIDATE("Job Task No.",JobTaskNo);
        VALIDATE("Job Quantity",LibraryRandom.RandDec(10,2));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateJobJournalLine@4(VAR JobJournalLine@1000 : Record 210;JobTask@1001 : Record 1001;ResourceNo@1002 : Code[20]);
    BEGIN
      LibraryJob.CreateJobJournalLineForType(0,JobJournalLine.Type::Resource,JobTask,JobJournalLine);  // Use 0 for Resource.
      JobJournalLine.VALIDATE("No.",ResourceNo);
      JobJournalLine.VALIDATE(Quantity,LibraryRandom.RandInt(10));  // Use Random value.
      JobJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobJournalLineAppliedFromItemLedgerEntry@137(VAR JobJournalLine@1000 : Record 210;ItemLedgerEntry@1002 : Record 32);
    VAR
      JobTask@1001 : Record 1001;
    BEGIN
      JobTask.GET(ItemLedgerEntry."Job No.",ItemLedgerEntry."Job Task No.");
      LibraryJob.CreateJobJournalLine(JobJournalLine."Line Type"::" ",JobTask,JobJournalLine);

      WITH JobJournalLine DO BEGIN
        VALIDATE(Type,Type::Item);
        VALIDATE("No.",ItemLedgerEntry."Item No.");
        VALIDATE(Quantity,ItemLedgerEntry.Quantity);
        VALIDATE("Applies-from Entry",ItemLedgerEntry."Entry No.");
      END;
    END;

    LOCAL PROCEDURE CreateJobJournalLineWithBlankUOM@145(VAR JobJournalLine@1004 : Record 210;ItemNo@1002 : Code[20];JobJournalLineType@1003 : Option);
    VAR
      JobTask@1000 : Record 1001;
    BEGIN
      CreateJobWithJobTask(JobTask);
      WITH JobJournalLine DO BEGIN
        LibraryJob.CreateJobJournalLine("Line Type"::" ",JobTask,JobJournalLine);
        VALIDATE(Type,JobJournalLineType);
        VALIDATE("No.",ItemNo);
        VALIDATE("Unit of Measure Code",'');
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateJobPlanningLine@13(VAR JobPlanningLine@1000 : Record 1003;JobTask@1001 : Record 1001;LineType@1004 : Option;No@1002 : Code[20];Type@1003 : Option);
    BEGIN
      LibraryJob.CreateJobPlanningLine(LineType,Type,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("No.",No);
      JobPlanningLine.VALIDATE(Quantity,LibraryRandom.RandInt(10));  // Use Random value.
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobPlanningLineWithTypeText@78(VAR JobPlanningLine@1000 : Record 1003;LineType@1003 : Option;JobTask@1001 : Record 1001);
    VAR
      StandardText@1002 : Record 7;
    BEGIN
      StandardText.FINDFIRST;
      LibraryJob.CreateJobPlanningLine(LineType,JobPlanningLine.Type::Resource,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE(Type,JobPlanningLine.Type::Text);
      JobPlanningLine.VALIDATE("No.",StandardText.Code);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobPlanningLineAndModifyUOM@84(VAR JobPlanningLine@1001 : Record 1003;JobTask@1002 : Record 1001;Type@1004 : Option;No@1000 : Code[20];UnitOfMeasureCode@1003 : Code[10]);
    BEGIN
      CreateJobPlanningLine(JobPlanningLine,JobTask,JobPlanningLine."Line Type"::Schedule,No,Type);
      JobPlanningLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobPlanningLineWithUnitPriceAndLineDiscountPct@76(VAR JobPlanningLine@1000 : Record 1003;LineDiscountPct@1003 : Decimal);
    VAR
      JobTask@1001 : Record 1001;
    BEGIN
      CreateJobWithJobTask(JobTask);
      CreateJobPlanningLine(
        JobPlanningLine,JobTask,JobPlanningLine."Line Type"::Contract,
        LibraryERM.CreateGLAccountWithSalesSetup,JobPlanningLine.Type::"G/L Account");
      JobPlanningLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      JobPlanningLine.VALIDATE("Line Discount %",LineDiscountPct);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobJournalBatch@9(VAR GenJournalBatch@1000 : Record 232);
    VAR
      GenJournalTemplate@1002 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::Jobs);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateJobWithJobTask@3(VAR JobTask@1000 : Record 1001);
    VAR
      Job@1001 : Record 167;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
    END;

    LOCAL PROCEDURE CreateJobJournalLineWithBin@57(VAR JobJournalLine@1000 : Record 210;JobTask@1002 : Record 1001;ItemJournalLine@1001 : Record 83;Quantity@1003 : Decimal);
    BEGIN
      LibraryJob.CreateJobJournalLine(JobJournalLine."Line Type"::" ",JobTask,JobJournalLine);
      JobJournalLine.VALIDATE(Type,JobJournalLine.Type::Item);
      JobJournalLine.VALIDATE("No.",ItemJournalLine."Item No.");
      JobJournalLine.VALIDATE("Location Code",ItemJournalLine."Location Code");
      JobJournalLine.VALIDATE("Bin Code",ItemJournalLine."Bin Code");
      JobJournalLine.VALIDATE(Quantity,Quantity);
      JobJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCurrencyAndTwoCurrencyRates@134(VAR Currency@1000 : Record 4;FirstExchageRateDate@1001 : Date;SecondExchageRateDate@1002 : Date);
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateExchangeRate(Currency.Code,FirstExchageRateDate,LibraryRandom.RandDec(100,2),LibraryRandom.RandDec(100,2));
      LibraryERM.CreateExchangeRate(Currency.Code,SecondExchageRateDate,LibraryRandom.RandDec(100,2),LibraryRandom.RandDec(100,2));
    END;

    LOCAL PROCEDURE CreateJobPlanningLineWithCurrency@136(VAR JobPlanningLine@1001 : Record 1003;CurrencyCode@1002 : Code[10]);
    VAR
      Job@1003 : Record 167;
      JobTask@1000 : Record 1001;
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Currency Code",CurrencyCode);
      Job.MODIFY(TRUE);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobPlanningLine(
        JobPlanningLine."Line Type"::"Both Schedule and Contract",JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithJob@110(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39);
    VAR
      Item@1002 : Record 27;
      JobTask@1003 : Record 1001;
    BEGIN
      LibraryInventory.CreateItem(Item);

      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandIntInRange(10,20));

      CreateJobWithJobTask(JobTask);

      PurchaseLine.VALIDATE("Job No.",JobTask."Job No.");
      PurchaseLine.VALIDATE("Job Task No.",JobTask."Job Task No.");
      PurchaseLine.VALIDATE("Qty. to Invoice",PurchaseLine.Quantity / 2);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandInt(100));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateResourceUnitOfMeasure@19(VAR ResourceUnitOfMeasure@1000 : Record 205;Resource@1001 : Record 156);
    BEGIN
      LibraryResource.CreateResourceUnitOfMeasure(
        ResourceUnitOfMeasure,Resource."No.",FindUnitOfMeasure,1);

      // Use 1 to insure that Qty per Unit of Measure greater than Qty per Unit of Measure for Base Unit of Measure.
      ResourceUnitOfMeasure.VALIDATE("Qty. per Unit of Measure",1 + LibraryRandom.RandInt(10));
      ResourceUnitOfMeasure.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobResourcePrice@39(VAR JobResourcePrice@1002 : Record 1012;Type@1003 : Option;No@1004 : Code[20]);
    VAR
      JobTask@1000 : Record 1001;
    BEGIN
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobResourcePrice(JobResourcePrice,JobTask."Job No.",JobTask."Job Task No.",Type,No,'','');  // Blank value is for Work Type Code and Currency Code.
    END;

    LOCAL PROCEDURE DeleteJobJournalTemplate@106(Name@1001 : Code[10]);
    VAR
      JobJournalTemplate@1000 : Record 209;
    BEGIN
      JobJournalTemplate.GET(Name);
      JobJournalTemplate.DELETE(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@75(VAR ItemJournalBatch@1001 : Record 233);
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@135(VAR ItemLedgerEntry@1000 : Record 32;JobNo@1001 : Code[20];EntryType@1002 : Option);
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Job No.",JobNo);
        SETRANGE("Entry Type",EntryType);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindJobJournalLine@69(VAR JobJournalLine@1000 : Record 210;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    BEGIN
      JobJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      JobJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      JobJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindJobLedgerEntry@53(VAR JobLedgerEntry@1004 : Record 169;DocumentNo@1003 : Code[20];JobNo@1002 : Code[20];Type@1001 : Option;No@1000 : Code[20]);
    BEGIN
      JobLedgerEntry.SETRANGE("Document No.",DocumentNo);
      JobLedgerEntry.SETRANGE("Job No.",JobNo);
      JobLedgerEntry.SETRANGE(Type,Type);
      JobLedgerEntry.SETRANGE("No.",No);
      JobLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindJobPlanningLine@62(VAR JobPlanningLine@1000 : Record 1003;JobNo@1001 : Code[20];JobTaskNo@1002 : Code[20]);
    BEGIN
      JobPlanningLine.SETRANGE("Job No.",JobNo);
      JobPlanningLine.SETRANGE("Job Task No.",JobTaskNo);
      JobPlanningLine.FINDLAST;
    END;

    LOCAL PROCEDURE FindUnitOfMeasure@14() : Code[10];
    VAR
      UnitOfMeasure@1000 : Record 204;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      EXIT(UnitOfMeasure.Code);
    END;

    LOCAL PROCEDURE FindSalesHeader@27(VAR SalesHeader@1000 : Record 36;DocumentType@1004 : Option;JobNo@1001 : Code[20];Type@1003 : Option);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      FindSalesLine(SalesLine,DocumentType,Type,JobNo);
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
    END;

    LOCAL PROCEDURE FindSalesLine@71(VAR SalesLine@1000 : Record 37;DocumentType@1003 : Option;Type@1002 : Option;JobNo@1001 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE(Type,Type);
      SalesLine.SETRANGE("Job No.",JobNo);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE ModifyJobItemPriceForUnitPrice@32(VAR JobItemPrice@1000 : Record 1013;UnitPrice@1001 : Decimal);
    BEGIN
      JobItemPrice.VALIDATE("Unit Price",UnitPrice);
      JobItemPrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyJobItemPriceForUnitCostFactor@35(VAR JobItemPrice@1000 : Record 1013;UnitCostFactor@1001 : Decimal);
    BEGIN
      JobItemPrice.VALIDATE("Unit Cost Factor",UnitCostFactor);
      JobItemPrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyJobResourcePriceForUnitPrice@38(VAR JobResourcePrice@1000 : Record 1012;UnitPrice@1001 : Decimal);
    BEGIN
      JobResourcePrice.VALIDATE("Unit Price",UnitPrice);
      JobResourcePrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyJobResourcePriceForUnitCostFactor@34(VAR JobResourcePrice@1000 : Record 1012;UnitCostFactor@1001 : Decimal);
    BEGIN
      JobResourcePrice.VALIDATE("Unit Cost Factor",UnitCostFactor);
      JobResourcePrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostGeneralJournalLine@150(GenJournalLine@1000 : Record 81);
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post",GenJournalLine);
    END;

    LOCAL PROCEDURE RunCalcRemainingUsageFromJobJournalPage@118(VAR JobJournalBatch@1000 : Record 237);
    VAR
      JobJournalTemplate@1001 : Record 209;
      JobJournal@1002 : TestPage 201;
    BEGIN
      LibraryJob.CreateJobJournalBatch(LibraryJob.GetJobJournalTemplate(JobJournalTemplate),JobJournalBatch);
      NoSeriesCode := JobJournalBatch."No. Series";  // Assigning Batch No. Series to global variable.
      LibraryVariableStorage.Enqueue(JobJournalBatch."Journal Template Name");
      COMMIT;  // Commit required to avoid test failures.

      // Need to Run Calc. Remaining Usage Batch Job from Job Journal page due to Code Written on Page and Job Journal Lines needed to be blank before running batch job.
      JobJournal.OPENEDIT;
      JobJournal.CurrentJnlBatchName.SETVALUE(JobJournalBatch.Name);
      JobJournal.CalcRemainingUsage.INVOKE;
    END;

    LOCAL PROCEDURE OpenJobJournalAndLookupUnitofMeasure@148(JobJournalBatchName@1002 : Code[10]);
    VAR
      JobJournal@1001 : TestPage 201;
    BEGIN
      JobJournal.OPENEDIT;
      JobJournal.CurrentJnlBatchName.SETVALUE(JobJournalBatchName);
      JobJournal."Unit of Measure Code".LOOKUP;
      JobJournal.OK.INVOKE;
    END;

    LOCAL PROCEDURE UpdateJobPlanningLine@85(VAR JobPlanningLine@1000 : Record 1003;JobTask@1001 : Record 1001;AccountNo@1002 : Code[20]);
    VAR
      GenProductPostingGroup@1003 : Record 251;
    BEGIN
      CreateJobPlanningLine(
        JobPlanningLine,JobTask,JobPlanningLine."Line Type"::Contract,AccountNo,JobPlanningLine.Type::"G/L Account");
      JobPlanningLine.VALIDATE("Qty. to Transfer to Invoice",JobPlanningLine.Quantity);
      GenProductPostingGroup.SETFILTER(Code,'<>%1',JobPlanningLine."Gen. Prod. Posting Group");
      GenProductPostingGroup.SETFILTER("Def. VAT Prod. Posting Group",'<>%1','');
      GenProductPostingGroup.FINDFIRST;
      JobPlanningLine.VALIDATE("Gen. Prod. Posting Group",GenProductPostingGroup.Code);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateLineDiscountPctOnJobGLAccountPrice@300(VAR JobGLAccountPrice@1000 : Record 1014);
    BEGIN
      JobGLAccountPrice.VALIDATE("Line Discount %",LibraryRandom.RandDec(10,2));  // Taking Random value for Line Discount Percent.
      JobGLAccountPrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityAndDiscountOnPlanningLine@116(JobPlanningLine@1002 : Record 1003;LineDiscountAmount@1000 : Decimal);
    BEGIN
      JobPlanningLine.VALIDATE(Quantity,-JobPlanningLine.Quantity);
      JobPlanningLine.VALIDATE("Line Discount Amount",LineDiscountAmount);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSourceCodeSetup@153(JobGLJournal@1000 : Code[10];JobGLWIP@1001 : Code[10]);
    VAR
      SourceCodeSetup@1002 : Record 242;
    BEGIN
      SourceCodeSetup.GET;
      SourceCodeSetup.VALIDATE("Job G/L Journal",JobGLJournal);
      SourceCodeSetup.VALIDATE("Job G/L WIP",JobGLWIP);
      SourceCodeSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUnitCostFactorOnJobGLAccountPrice@191(VAR JobGLAccountPrice@1000 : Record 1014);
    BEGIN
      JobGLAccountPrice.VALIDATE("Unit Cost Factor",LibraryRandom.RandDec(10,2));  // Taking Random value for Unit Cost Factor.
      JobGLAccountPrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUnitCostOnJobGLAccountPrice@248(VAR JobGLAccountPrice@1000 : Record 1014);
    BEGIN
      JobGLAccountPrice.VALIDATE("Unit Cost",LibraryRandom.RandDec(10,2));  // Taking Random value for Unit Cost.
      JobGLAccountPrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUnitPriceOnJobGLAccountPrice@192(VAR JobGLAccountPrice@1000 : Record 1014);
    BEGIN
      JobGLAccountPrice.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));  // Taking Random value for Unit Price.
      JobGLAccountPrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUnitCostOnJobJournalLine@99(VAR JobJournalLine@1000 : Record 210;JobTask@1003 : Record 1001;No@1001 : Code[20];UnitCost@1002 : Decimal);
    BEGIN
      LibraryJob.CreateJobJournalLineForType(
        JobJournalLine."Line Type"::"Both Schedule and Contract",JobJournalLine.Type::"G/L Account",JobTask,JobJournalLine);
      JobJournalLine.VALIDATE("No.",No);
      JobJournalLine.VALIDATE("Unit Cost",UnitCost);
      JobJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyAmountsOnJobPlanningLine@125(JobPlanningLine@1002 : Record 1003;LineAmount@1001 : Decimal;LineDiscountAmount@1000 : Decimal);
    BEGIN
      JobPlanningLine.TESTFIELD("Line Discount Amount",LineDiscountAmount);
      JobPlanningLine.TESTFIELD("Line Amount",LineAmount);
    END;

    LOCAL PROCEDURE VerifyBinContentEntry@59(ItemNo@1004 : Code[20];LocationCode@1003 : Code[10];BinCode@1002 : Code[20];Quantity@1000 : Decimal);
    VAR
      BinContent@1001 : Record 7302;
    BEGIN
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Bin Code",BinCode);
      BinContent.FINDFIRST;
      BinContent.CALCFIELDS(Quantity);
      BinContent.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyBankAccNoOnBankAccountLedgerEntries@90(BankAccNo@1002 : Code[20];Amount@1001 : Decimal);
    VAR
      BankAccountLedgerEntry@1000 : Record 271;
    BEGIN
      BankAccountLedgerEntry.SETRANGE("Bank Account No.",BankAccNo);
      BankAccountLedgerEntry.FINDFIRST;
      Assert.AreEqual(Amount,BankAccountLedgerEntry.Amount,AmountErr);
    END;

    LOCAL PROCEDURE VerifyDifferentCostsInJobLedgerEntry@89(GenJournalLine@1004 : Record 81;Amount@1001 : Decimal);
    VAR
      Currency@1003 : Record 4;
      JobLedgerEntry@1002 : Record 169;
      Cost@1000 : Decimal;
    BEGIN
      Currency.GET(GenJournalLine."Currency Code");
      Cost := ROUND(Amount / GenJournalLine."Job Quantity",Currency."Unit-Amount Rounding Precision");  // Round the Amount as per Currency's Unit Amount Rounding Precision.
      FindJobLedgerEntry(
        JobLedgerEntry,GenJournalLine."Document No.",GenJournalLine."Job No.",JobLedgerEntry.Type::"G/L Account",
        GenJournalLine."Account No.");
      JobLedgerEntry.TESTFIELD(Quantity,GenJournalLine."Job Quantity");
      Assert.AreNearlyEqual(Cost,JobLedgerEntry."Direct Unit Cost (LCY)",0.001,'Direct Unit Cost (LCY) must match');
      Assert.AreNearlyEqual(Cost,JobLedgerEntry."Unit Cost (LCY)",0.001,'Unit Cost (LCY) must match');
      JobLedgerEntry.TESTFIELD("Total Cost (LCY)",Amount);
      JobLedgerEntry.TESTFIELD("Original Total Cost (LCY)",Amount);
      Assert.AreNearlyEqual(Cost,JobLedgerEntry."Original Unit Cost (LCY)",0.001,'Original Unit Cost (LCY) must match');
      JobLedgerEntry.TESTFIELD("Unit Cost",Amount / GenJournalLine."Job Quantity");
      JobLedgerEntry.TESTFIELD("Total Cost",Amount);
      JobLedgerEntry.TESTFIELD("Original Unit Cost",Amount / GenJournalLine."Job Quantity");
      JobLedgerEntry.TESTFIELD("Original Total Cost",Amount);
    END;

    LOCAL PROCEDURE VerifyDiscountOnJobLedgerEntry@101(DocumentNo@1000 : Code[20];JobNo@1001 : Code[20];AccountNo@1002 : Code[20];UnitPrice@1003 : Decimal;LineDiscountPct@1004 : Decimal;LineDiscountAmount@1005 : Decimal);
    VAR
      JobLedgerEntry@1006 : Record 169;
    BEGIN
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,JobNo,JobLedgerEntry.Type::"G/L Account",AccountNo);
      JobLedgerEntry.TESTFIELD("Unit Price",UnitPrice);
      JobLedgerEntry.TESTFIELD("Line Discount %",LineDiscountPct);
      JobLedgerEntry.TESTFIELD("Line Discount Amount",LineDiscountAmount);
    END;

    LOCAL PROCEDURE VerifyGLEntry@83(DocumentNo@1001 : Code[20];GLAccountNo@1002 : Code[20];Amount@1003 : Decimal);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyJobGLJournalLine@30(GenJournalLine@1000 : Record 81;JobUnitCost@1001 : Decimal;JobUnitPrice@1002 : Decimal);
    BEGIN
      GenJournalLine.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",GenJournalLine."Line No.");
      GenJournalLine.TESTFIELD("Job Unit Cost",JobUnitCost);
      GenJournalLine.TESTFIELD("Job Unit Price",JobUnitPrice);
    END;

    LOCAL PROCEDURE VerifyJobJournalLine@17(JobJournalLine@1000 : Record 210;Resource@1001 : Record 156;UnitOfMeasureCode@1003 : Code[10];QtyPerUnitOfMeasure@1002 : Decimal);
    BEGIN
      JobJournalLine.TESTFIELD("Unit Cost (LCY)",Resource."Unit Cost" * QtyPerUnitOfMeasure);
      JobJournalLine.TESTFIELD("Total Cost (LCY)",Resource."Unit Cost" * QtyPerUnitOfMeasure * JobJournalLine.Quantity);
      JobJournalLine.TESTFIELD("Unit Price (LCY)",Resource."Unit Price" * QtyPerUnitOfMeasure);
      JobJournalLine.TESTFIELD("Total Price (LCY)",Resource."Unit Price" * QtyPerUnitOfMeasure * JobJournalLine.Quantity);
      JobJournalLine.TESTFIELD("Unit Price",Resource."Unit Price" * QtyPerUnitOfMeasure);
      JobJournalLine.TESTFIELD("Unit Cost",Resource."Unit Cost" * QtyPerUnitOfMeasure);
      JobJournalLine.TESTFIELD("Total Price",Resource."Unit Price" * QtyPerUnitOfMeasure * JobJournalLine.Quantity);
      JobJournalLine.TESTFIELD("Direct Unit Cost (LCY)",Resource."Direct Unit Cost" * QtyPerUnitOfMeasure);
      JobJournalLine.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
    END;

    LOCAL PROCEDURE VerifyCostAndPriceOnJobPlanningLine@15(JobPlanningLine@1000 : Record 1003;Resource@1001 : Record 156;UnitOfMeasureCode@1003 : Code[10];QtyPerUnitOfMeasure@1002 : Decimal);
    BEGIN
      JobPlanningLine.TESTFIELD("Unit Cost (LCY)",Resource."Unit Cost" * QtyPerUnitOfMeasure);
      JobPlanningLine.TESTFIELD("Total Cost (LCY)",Resource."Unit Cost" * QtyPerUnitOfMeasure * JobPlanningLine.Quantity);
      JobPlanningLine.TESTFIELD("Unit Price (LCY)",Resource."Unit Price" * QtyPerUnitOfMeasure);
      JobPlanningLine.TESTFIELD("Total Price (LCY)",Resource."Unit Price" * QtyPerUnitOfMeasure * JobPlanningLine.Quantity);
      JobPlanningLine.TESTFIELD("Unit Price",Resource."Unit Price" * QtyPerUnitOfMeasure);
      JobPlanningLine.TESTFIELD("Unit Cost",Resource."Unit Cost" * QtyPerUnitOfMeasure);
      JobPlanningLine.TESTFIELD("Total Price",Resource."Unit Price" * QtyPerUnitOfMeasure * JobPlanningLine.Quantity);
      JobPlanningLine.TESTFIELD("Direct Unit Cost (LCY)",Resource."Direct Unit Cost" * QtyPerUnitOfMeasure);
      JobPlanningLine.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
    END;

    LOCAL PROCEDURE VerifyPostingGroupOnJobLedgerEntry@63(DocumentNo@1001 : Code[20];JobNo@1002 : Code[20];No@1000 : Code[20]);
    VAR
      Item@1003 : Record 27;
      JobLedgerEntry@1004 : Record 169;
    BEGIN
      Item.GET(No);
      FindJobLedgerEntry(JobLedgerEntry,DocumentNo,JobNo,JobLedgerEntry.Type::Item,No);
      JobLedgerEntry.TESTFIELD("Job Posting Group",Item."Inventory Posting Group");
    END;

    LOCAL PROCEDURE VerifyWarehouseEntry@58(SourceDocument@1007 : Option;EntryType@1001 : Option;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];BinCode@1004 : Code[20];UnitOfMeasureCode@1005 : Code[10];Quantity@1006 : Decimal);
    VAR
      WarehouseEntry@1000 : Record 7312;
    BEGIN
      WarehouseEntry.SETRANGE("Source Document",SourceDocument);
      WarehouseEntry.SETRANGE("Entry Type",EntryType);
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      WarehouseEntry.FINDFIRST;
      WarehouseEntry.TESTFIELD("Location Code",LocationCode);
      WarehouseEntry.TESTFIELD("Bin Code",BinCode);
      WarehouseEntry.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
      WarehouseEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyCurrencyFactor@121(JobPlanningLine@1005 : Record 1003;CurrencyExcahgeRateDate@1001 : Date);
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      SalesLine.SETRANGE("Job No.",JobPlanningLine."Job No.");
      SalesLine.SETRANGE("Job Task No.",JobPlanningLine."Job Task No.");
      SalesLine.FINDFIRST;
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      SalesHeader.TESTFIELD("Currency Factor",CurrencyExchangeRate.ExchangeRate(CurrencyExcahgeRateDate,SalesHeader."Currency Code"));
      JobPlanningLine.TESTFIELD("Currency Factor",SalesHeader."Currency Factor");
    END;

    LOCAL PROCEDURE JobUpdateBillToContactNoBlocked@130(Blocked@1002 : Option);
    VAR
      Job@1001 : Record 167;
      ContactBusinessRelation@1000 : Record 5054;
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Bill-to Contact No.",'');
      Job.VALIDATE(Blocked,Blocked);

      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.SETRANGE("No.",Job."Bill-to Customer No.");
      ContactBusinessRelation.FINDFIRST;

      Job.VALIDATE("Bill-to Contact No.",ContactBusinessRelation."Contact No.");

      Assert.AreEqual(ContactBusinessRelation."Contact No.",Job."Bill-to Contact No.",IncorrectFieldValueErr);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@43(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE CurrencyRateConfirmHandlerTrue@112(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.ExpectedMessage(LibraryVariableStorage.DequeueText,Question);
      Reply := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE JobCalcRemainingUsageRequestPageHandler@87(VAR JobCalcRemainingUsage@1000 : TestRequestPage 1090);
    VAR
      NoSeriesManagement@1001 : Codeunit 396;
    BEGIN
      JobCalcRemainingUsage."Job Task".SETFILTER("Job No.",JobNo);
      JobCalcRemainingUsage.DocumentNo.SETVALUE(NoSeriesManagement.GetNextNo(NoSeriesCode,WORKDATE,FALSE));
      JobCalcRemainingUsage.PostingDate.SETVALUE(FORMAT(WORKDATE));
      JobCalcRemainingUsage.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE JobJournalTemplateListPageHandler@107(VAR JobJournalTemplateList@1000 : TestPage 275);
    VAR
      TemplateName@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TemplateName);
      JobJournalTemplateList.FILTER.SETFILTER(Name,TemplateName);
      JobJournalTemplateList.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE JobTransferToSalesInvoiceRequestPageHandler@29(VAR JobTransferToSalesInvoice@1000 : TestRequestPage 1094);
    BEGIN
      JobTransferToSalesInvoice.PostingDate.SETVALUE(LibraryVariableStorage.DequeueDate);
      JobTransferToSalesInvoice.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE JobTransferToCreditMemoRequestPageHandler@179(VAR JobTransferToCreditMemo@1000 : TestRequestPage 1092);
    BEGIN
      JobTransferToCreditMemo.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@28(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    [ModalPageHandler]
    PROCEDURE ItemUnitsOfMeasurePageHandler@100(VAR ItemUnitsofMeasure@1000 : TestPage 5404);
    BEGIN
      ItemUnitsofMeasure.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ResourceUnitsOfMeasurePageHandler@111(VAR ResourceUnitsofMeasure@1000 : TestPage 210);
    BEGIN
      ResourceUnitsofMeasure.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE UnitsOfMeasurePageHandler@123(VAR UnitsofMeasure@1000 : TestPage 209);
    VAR
      UnitOfMeasureCode@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(UnitOfMeasureCode);
      UnitsofMeasure.FILTER.SETFILTER(Code,UnitOfMeasureCode);
      UnitsofMeasure.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Job]
      Unsupported version tags:
      SE: Unable to Execute

      Test for Job Journal and Job Planning Lines:
        1. Test Unit Cost, Unit Price on Job Journal Lines.
        2. Test Unit Cost, Unit Price on Job Planning Lines.
        3. Test Job Unit Cost, Job Unit Price on Job G/L Journal Line when Unit Cost Factor is defined on Job Card.
        4. Test Line Discount Amount and Line Discount Percentage on Job Journal Line after updating Line Amount.
        5. Test the creation of Job Item Price.
        6. Test the error message while creating the Job Item Price with blank Job No.
        7. Test Job Item Price creation with blank Job Task No.
        8. Test the error message when create Job Item Price with Job Task No. whose Job Task type is not Posting.
        9. Test the Unit Price field becomes empty as Unit Cost Factor field is filled on the Job Item Price.
       10. Test the Unit Cost Factor field becomes empty as Unit Price field is filled on the Job Item Price.
       11. Test the error message when create Job Item Price with blank Item No.
       12. Test Error Message while updating Quantity on Job Planning Line when Type on Job Planning Line is Text.
       13. Test Job Posting Group In Job Ledger Entry after posting Sales Invoice created from Job Planning Line.
       14. Test the creation of Job Resource Price with Type Resource.
       15. Test the error message while creating the Job Resource Price with blank Job No.
       16. Test Job Resource Price creation with blank Job Task No.
       17. Test the error message when creating Job Resource Price with Job Task No. for Job Task type is not Posting.
       18. Test the Unit Price field becomes empty as Unit Cost Factor field is filled on the Job Resource Price.
       19. Test the Unit Cost Factor field becomes empty as Unit Price field is filled on the Job Resource Price.
       20. Test the error message when creating Job Resource Price with blank Resource No.
       21. Test the Apply Job Discount field on the Job Resource Price.
       22. Test the Apply Job Price field on the Job Resource Price.
       23. Test the creation of Job Resource Price with Type Group(Resource).
       24. Test the creation of Job Resource Price with Blank Group Resource in the field Code.
       25. Test the creation of Job Resource Price with Type All.
       26. Test Unit Price on Job Journal Line after updating Unit Cost Factor on Job GL Account Price.
       27. Test error message when Job No. is not filled while creating Job GL Account Price.
       28. Test error message when GL Account No. is not filled for Job GL Account Price.
       29. Test successful Job G/L Account Price creation.
       30. Test that Unit Cost Factor becomes Zero after updating Unit Price on Job G/L Account Price.
       31. Test that Unit Price becomes Zero after updating Unit Cost Factor on Job G/L Account Price.
       32. Test Unit Price on Job Journal Line when Unit Cost Factor and Currency Code is attached on Job GL Account Price.
       33. Test that Unit Price on Job Journal Line updated according to Job GL Account Price's Unit Price.
       34. Test that Unit Cost on Job Journal Line updated according to Job GL Account Price's Unit Cost.
       35. Test that Line Discount Percent correctly updated on Job Journal Line when Account Type is GL Account and GL Account used is from Job GL Account Price.
       36. Test Unit Price on Job Planning Line updated according to Unit Price on Job GL Account Price.
       37. Test Unit Price on Job Planning Line when Unit Cost Factor and Currency Code is attached on Job GL Account Price.
       38. Test Unit Cost on Job Planning Line updated according to Unit Cost on Job GL Account Price.
       39. Test that Line Discount Percent correctly updated on Job Planning Line.
       40. Test Unit Price on Sales Line created from Job Planning Line using GL Account used for Job GL Account Price.
       41. Test Unit Price, Discount Percent and Discount Amount on Job Ledger Entry after posting Sales Invoice created from Job Planning Line.
       42. Test Warehouse Entry and Bin Content Entry after posting the Job Journal with Bin and positive Quantity.
       43. Test Warehouse Entry and Bin Content Entry after posting the Job Journal with Bin and positive Quantity.
       44. Test the Line Discount Amount and Line Discount% on Job Journal after updating Line Amount.
       45. Test the Sales Invoice which is created from Job Planning Lines after posting the Job Journal with updated Line Amount.
       46. Test Job Ledger Entry after posting Sales Invoice which is created from Job Planning Lines after posting the Job Journal with updated Line Amount.
       47. Test that different Costs updated correctly after Posting Job G/L Journal with Currency Code and Copy VAT Setup to Jnl. Lines = False for Job G/L Journal batch.
       48. Test that after running Calculate Remaining Usage from Job Journal, correct Quantity, Unit of Measure and Unit Price updated on Job Journal Line.
       49. Test that after running Calculate Remaining Usage from Job Journal and Posting it, correct Quantity, Unit of Measure and Unit Price updated in Job Ledger Entries.
       50. Test Line Discount Amount and Line Amount on Job Planning Line for GL Account when Line Discount Percent mentioned on Job Planning Line.
       51. Test Line Discount Amount and Line Amount updated correctly for GL Account when Quantity updated with negative sign.
       52. Test Line Discount Percent and Line Amount updated correctly for GL Account when Line Discount Amount and Negative Quantity used on Job Planning Line.
       53. Test Line Discount Percent and Line Amount transformed successfully on Sales Credit Memo created from Job Planning Line with Negative Quantity.
       54. Test Line Discount Percent and Line Amount in Job Ledger Entry for Posted Credit Memo, that is created from Job Planning Line.
       55. Test Posting of Job G/L Journal is not allowed when Source Code value in General Journal Template is same as Job G/L WIP value in Source Code Setup.
       56. Test posting of sales invoice when sales invoice created from job planning line with type text.
       57. Test that it is able to post Jobs G/L Journal with Bank Account.

      Covers Test cases: 264202
        ---------------------------------------------------------------
        Test Function Name                                       TFS ID
        ---------------------------------------------------------------
        UnitCostFactorOnJobGLJournalLine                         257888

      Covers Test cases: 273843
        ---------------------------------------------------------------
        Test Function Name                                       TFS ID
        ---------------------------------------------------------------
        UpdateLineAmountOnJobJournalLine                         202395

      Covers Test cases: 277965
        ----------------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                          TFS ID
        ----------------------------------------------------------------------------------------------------------------------------------
        JobItemPriceCreation, JobItemPriceWithBlankJobNo, JobItemPriceWithBlankJobTaskNo, JobItemPriceWithJobTaskNoWithTypeNotPosting
        UnitPriceOnJobItemPrice, UnitCostFactorOnJobItemPrice, JobItemPriceWithBlankItemNo                                           129187

      Covers Test cases: 274950
        ---------------------------------------------------------------
        Test Function Name                                       TFS ID
        ---------------------------------------------------------------
        QuantityErrorForTextTypeJobPlanningLine                  261342
        PostingGroupOnJobLedgerEntry                             261348

      Covers Test cases: 277964
        ----------------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                          TFS ID
        ----------------------------------------------------------------------------------------------------------------------------------
        JobResourcePricesWithTypeResource, JobResourcePriceWithBlankJobNo, JobResourcePriceWithBlankJobTaskNo
        JobResourcePriceWithJobTaskNoWithTypeNotPosting, UnitPriceOnJobResourcePrice, UnitCostFactorOnJobResourcePrice
        JobResourcePriceWithBlankResourceNo, ApplyJobDiscountOnJobResourcePrice, ApplyJobPriceOnJobResourcePrice
        JobResourcePricesWithTypeGroupResource, JobResourcePricesWithBlankTypeGroupResource, JobResourcePricesWithTypeAll           129186

      Covers Test cases: 274951
        ---------------------------------------------------------------
        Test Function Name                                       TFS ID
        ---------------------------------------------------------------
        UnitCostFactorOnJobGLAccountPrice                        264206

      Covers Test cases: 277963
        --------------------------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                                   TFS ID
        --------------------------------------------------------------------------------------------------------------------------------------------
        JobGLAccountPriceErrorWithoutJobNo, JobGLAccountPriceErrorWithoutGLAccountNo, JobGLAccountPriceCreation
        UnitCostFactorZeroOnJobGLAccountPrice, UnitPriceOnJobGLAccountPrice, UnitPriceOnJobJournalLineWithCurrency
        UnitPriceOnJobJournalLineWithoutCostFactor, UnitCostOnJobJournalLineForGLAccount, LineDiscountPctOnJobJournalLine
        UnitPriceOnJobPlanningLine, UnitPriceOnJobPlanningLineWithCurrency, UnitCostOnJobPlanningLineForGLAccount
        LineDiscountPctOnJobPlanningLine, UnitPriceOnSalesInvoiceForJobGLAccountPrice, PostedSalesInvoiceForJobGLAccountPrice                129185

      Covers Test cases: 278194
        ---------------------------------------------------------------
        Test Function Name                                       TFS ID
        ---------------------------------------------------------------
        JobJournalWithBinAndPositiveQuantity,
        JobJournalWithBinAndNegativeQuantity                    145223
        LineDiscountAmountAndPctOnJobJournalLine,
        SalesInvoiceThroughJobPlanningLines                     145236
        PostingSalesInvoiceThroughJobPlanningLines              145237

      Covers Test cases: 278850
        -----------------------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                                TFS ID
        -----------------------------------------------------------------------------------------------------------------------------------------
        JobGLJournalWithCurrency                                                                                                          234146
        CalcRemainingUsageForJobJournalLine, JobLedgerEntriesAfterCalcRemainingUsage                                                      234152
        DiscountUpdationOnJobPlanningLine, NegativeQuantityUpdationOnJobPlanningLine                                                      234977
        NegativeQuantityAndLineDiscountAmountUpdateOnJobPlanningLine,DiscountOnSalesCreditMemoFromJobPlanningLine,
        DiscountAfterPostingSalesCreditMemo                                                                                               234986

      Covers Test cases: 281987
        ---------------------------------------------------------------
        Test Function Name                                       TFS ID
        ---------------------------------------------------------------
        SameSourceCodeForJobGenJournalTemplateAndJobGLWIP        281453

        BUG ID 50113
        ---------------------------------------------------------------
        Test Function Name                                       TFS ID
        ---------------------------------------------------------------
        CheckSalesInvoicePostingWithTypeText

        BUG ID 97001
        ---------------------------------------------------------------
        Test Function Name                                       TFS ID
        ---------------------------------------------------------------
        PostJobsGLJournalWithBankAccount
    }
    END.
  }
}

