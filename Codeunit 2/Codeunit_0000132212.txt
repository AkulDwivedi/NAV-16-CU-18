OBJECT Codeunit 132212 Library - Patterns
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryCosting@1019 : Codeunit 132200;
      LibraryERM@1000 : Codeunit 131300;
      LibraryInventory@1013 : Codeunit 132201;
      LibraryManufacturing@1015 : Codeunit 132202;
      LibraryPurchase@1016 : Codeunit 130512;
      LibrarySales@1017 : Codeunit 130509;
      LibraryWarehouse@1018 : Codeunit 132204;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryItemTracking@1012 : Codeunit 130502;
      LibraryRandom@1003 : Codeunit 130440;
      Assert@1004 : Codeunit 130000;
      TXTIncorrectEntry@1006 : TextConst 'ENU=Incorrect %1 in Entry No. %2.';
      TXTUnexpectedLine@1008 : TextConst 'ENU=Unexpected line after getting posted line to reverse.';
      TXTLineCountMismatch@1007 : TextConst 'ENU=Line count mismatch in revaluation for Item %1.';
      LibraryService@1014 : Codeunit 131902;

    PROCEDURE ADDSerialNoTrackingInfo@115(ItemNo@1000 : Code[20]);
    VAR
      Item@1002 : Record 27;
      ItemTrackingCode@1001 : Record 6502;
    BEGIN
      Item.GET(ItemNo);

      LibraryInventory.CreateItemTrackingCode(ItemTrackingCode);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode.Code);
      Item.VALIDATE("Serial Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
    END;

    PROCEDURE ASSIGNPurchChargeToPurchRcptLine@13(PurchaseHeader@1000 : Record 38;PurchRcptLine@1006 : Record 121;Qty@1002 : Decimal;DirectUnitCost@1003 : Decimal);
    VAR
      ItemCharge@1004 : Record 5800;
      PurchaseLine@1001 : Record 39;
      ItemChargeAssignmentPurch@1005 : Record 5805;
    BEGIN
      MAKEItemChargePurchaseLine(PurchaseLine,ItemCharge,PurchaseHeader,Qty,DirectUnitCost);

      PurchRcptLine.TESTFIELD(Type,PurchRcptLine.Type::Item);

      LibraryPurchase.CreateItemChargeAssignment(ItemChargeAssignmentPurch,PurchaseLine,ItemCharge,
        ItemChargeAssignmentPurch."Applies-to Doc. Type"::Receipt,
        PurchRcptLine."Document No.",PurchRcptLine."Line No.",
        PurchRcptLine."No.",Qty,DirectUnitCost);
      ItemChargeAssignmentPurch.INSERT;
    END;

    PROCEDURE ASSIGNPurchChargeToPurchInvoiceLine@105(PurchaseHeader@1000 : Record 38;PurchInvLine@1006 : Record 123;Qty@1002 : Decimal;DirectUnitCost@1003 : Decimal);
    VAR
      ItemCharge@1004 : Record 5800;
      PurchaseLine@1001 : Record 39;
      ItemChargeAssignmentPurch@1005 : Record 5805;
    BEGIN
      MAKEItemChargePurchaseLine(PurchaseLine,ItemCharge,PurchaseHeader,Qty,DirectUnitCost);

      PurchInvLine.TESTFIELD(Type,PurchInvLine.Type::Item);

      LibraryPurchase.CreateItemChargeAssignment(ItemChargeAssignmentPurch,PurchaseLine,ItemCharge,
        ItemChargeAssignmentPurch."Applies-to Doc. Type"::Invoice,
        PurchInvLine."Document No.",PurchInvLine."Line No.",
        PurchInvLine."No.",Qty,DirectUnitCost);
      ItemChargeAssignmentPurch.INSERT;
    END;

    PROCEDURE ASSIGNPurchChargeToPurchaseLine@17(PurchaseHeader@1003 : Record 38;PurchaseLine@1000 : Record 39;Qty@1002 : Decimal;DirectUnitCost@1001 : Decimal);
    VAR
      ItemCharge@1006 : Record 5800;
      PurchaseLine1@1005 : Record 39;
      ItemChargeAssignmentPurch@1004 : Record 5805;
    BEGIN
      MAKEItemChargePurchaseLine(PurchaseLine1,ItemCharge,PurchaseHeader,Qty,DirectUnitCost);

      PurchaseLine.TESTFIELD(Type,PurchaseLine.Type::Item);

      LibraryPurchase.CreateItemChargeAssignment(ItemChargeAssignmentPurch,PurchaseLine1,ItemCharge,
        ItemChargeAssignmentPurch."Applies-to Doc. Type"::Order,
        PurchaseLine."Document No.",PurchaseLine."Line No.",
        PurchaseLine."No.",Qty,DirectUnitCost);
      ItemChargeAssignmentPurch.INSERT;
    END;

    PROCEDURE ASSIGNPurchChargeToPurchReturnLine@44(PurchaseHeader@1003 : Record 38;PurchaseLine@1000 : Record 39;Qty@1002 : Decimal;DirectUnitCost@1001 : Decimal);
    VAR
      ItemCharge@1006 : Record 5800;
      PurchaseLine1@1005 : Record 39;
      ItemChargeAssignmentPurch@1004 : Record 5805;
    BEGIN
      MAKEItemChargePurchaseLine(PurchaseLine1,ItemCharge,PurchaseHeader,Qty,DirectUnitCost);

      PurchaseLine.TESTFIELD(Type,PurchaseLine.Type::Item);

      LibraryPurchase.CreateItemChargeAssignment(ItemChargeAssignmentPurch,PurchaseLine1,ItemCharge,
        ItemChargeAssignmentPurch."Applies-to Doc. Type"::"Return Order",
        PurchaseLine."Document No.",PurchaseLine."Line No.",
        PurchaseLine."No.",Qty,DirectUnitCost);
      ItemChargeAssignmentPurch.INSERT;
    END;

    PROCEDURE ASSIGNSalesChargeToSalesShptLine@14(SalesHeader@1003 : Record 36;SalesShptLine@1002 : Record 111;Qty@1001 : Decimal;UnitCost@1006 : Decimal);
    VAR
      ItemCharge@1005 : Record 5800;
      SalesLine@1004 : Record 37;
      ItemChargeAssignmentSales@1000 : Record 5809;
    BEGIN
      MAKEItemChargeSalesLine(SalesLine,ItemCharge,SalesHeader,Qty,UnitCost);

      SalesShptLine.TESTFIELD(Type,SalesShptLine.Type::Item);

      LibrarySales.CreateItemChargeAssignment(ItemChargeAssignmentSales,SalesLine,ItemCharge,
        ItemChargeAssignmentSales."Applies-to Doc. Type"::Shipment,
        SalesShptLine."Document No.",SalesShptLine."Line No.",
        SalesShptLine."No.",Qty,UnitCost);
      ItemChargeAssignmentSales.INSERT;
    END;

    PROCEDURE ASSIGNSalesChargeToSalesLine@22(SalesHeader@1003 : Record 36;SalesLine@1002 : Record 37;Qty@1001 : Decimal;UnitCost@1000 : Decimal);
    VAR
      ItemCharge@1006 : Record 5800;
      SalesLine1@1005 : Record 37;
      ItemChargeAssignmentSales@1004 : Record 5809;
    BEGIN
      MAKEItemChargeSalesLine(SalesLine1,ItemCharge,SalesHeader,Qty,UnitCost);

      SalesLine.TESTFIELD(Type,SalesLine.Type::Item);

      LibrarySales.CreateItemChargeAssignment(ItemChargeAssignmentSales,SalesLine1,ItemCharge,
        ItemChargeAssignmentSales."Applies-to Doc. Type"::Order,
        SalesLine."Document No.",SalesLine."Line No.",
        SalesLine."No.",Qty,UnitCost);
      ItemChargeAssignmentSales.INSERT;
    END;

    PROCEDURE ASSIGNSalesChargeToSalesReturnLine@80(SalesHeader@1003 : Record 36;SalesLine@1002 : Record 37;Qty@1001 : Decimal;UnitCost@1000 : Decimal);
    VAR
      ItemCharge@1006 : Record 5800;
      SalesLine1@1005 : Record 37;
      ItemChargeAssignmentSales@1004 : Record 5809;
    BEGIN
      MAKEItemChargeSalesLine(SalesLine1,ItemCharge,SalesHeader,Qty,UnitCost);

      SalesLine.TESTFIELD(Type,SalesLine.Type::Item);

      LibrarySales.CreateItemChargeAssignment(ItemChargeAssignmentSales,SalesLine1,ItemCharge,
        ItemChargeAssignmentSales."Applies-to Doc. Type"::"Return Order",
        SalesLine."Document No.",SalesLine."Line No.",
        SalesLine."No.",Qty,UnitCost);
      ItemChargeAssignmentSales.INSERT;
    END;

    PROCEDURE MAKEConsumptionJournalLine@448(VAR ItemJournalBatch@1000 : Record 233;ProdOrderLine@1001 : Record 5406;ComponentItem@1002 : Record 27;PostingDate@1003 : Date;LocationCode@1004 : Code[10];VariantCode@1005 : Code[10];Qty@1006 : Decimal;UnitCost@1007 : Decimal);
    VAR
      ItemJournalLine@1008 : Record 83;
    BEGIN
      LibraryInventory.CreateItemJournalBatchByType(ItemJournalBatch,ItemJournalBatch."Template Type"::Consumption);
      MAKEItemJournalLine(
        ItemJournalLine,ItemJournalBatch,ComponentItem,LocationCode,VariantCode,PostingDate,
        ItemJournalLine."Entry Type"::"Negative Adjmt.",Qty,0);
      ItemJournalLine.VALIDATE("Entry Type",ItemJournalLine."Entry Type"::Consumption);
      ItemJournalLine.VALIDATE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.VALIDATE("Order No.",ProdOrderLine."Prod. Order No.");
      ItemJournalLine.VALIDATE("Order Line No.",ProdOrderLine."Line No.");
      IF ItemJournalLine."Location Code" <> LocationCode THEN // required for CH
        ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Unit Cost",UnitCost);
      ItemJournalLine.MODIFY(TRUE);
    END;

    PROCEDURE MAKEItem@1(VAR Item@1000 : Record 27;CostingMethod@1001 : Option;UnitCost@1002 : Decimal;OverheadRate@1003 : Decimal;IndirectCostPercent@1004 : Decimal;ItemTrackingCode@1005 : Code[10]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item."Costing Method" := CostingMethod;
      IF Item."Costing Method" = Item."Costing Method"::Standard THEN
        Item."Standard Cost" := UnitCost;
      Item."Unit Cost" := UnitCost;
      Item."Overhead Rate" := OverheadRate;
      Item."Indirect Cost %" := IndirectCostPercent;
      Item."Item Tracking Code" := ItemTrackingCode;
      Item.Description := Item."No.";
      Item.MODIFY;
    END;

    PROCEDURE MAKEItemSimple@50(VAR Item@1000 : Record 27;CostingMethod@1001 : Option;UnitCost@1002 : Decimal);
    BEGIN
      MAKEItem(Item,CostingMethod,UnitCost,0,0,'');
    END;

    PROCEDURE MAKEItemWithExtendedText@92(VAR Item@1000 : Record 27;ExtText@1004 : Text;CostingMethod@1002 : Option;UnitCost@1001 : Decimal);
    VAR
      ExtendedTextHeader@1003 : Record 279;
      ExtendedTextLine@1005 : Record 280;
    BEGIN
      // Create Item.
      MAKEItem(Item,CostingMethod,UnitCost,0,0,'');
      Item.VALIDATE("Automatic Ext. Texts",TRUE);
      Item.MODIFY;

      // Create Extended Text Header and Line.
      LibraryService.CreateExtendedTextHeaderItem(ExtendedTextHeader,Item."No.");
      ExtendedTextHeader.VALIDATE("All Language Codes",TRUE);
      ExtendedTextHeader.MODIFY;
      LibraryService.CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
      ExtendedTextLine.VALIDATE(Text,COPYSTR(ExtText,1,MAXSTRLEN(ExtendedTextLine.Text)));
      ExtendedTextLine.MODIFY;
    END;

    PROCEDURE MAKEAdditionalItemUOM@91(VAR NewItemUOM@1000 : Record 5404;ItemNo@1001 : Code[20];QtyPer@1002 : Decimal);
    BEGIN
      LibraryInventory.CreateItemUnitOfMeasureCode(NewItemUOM,ItemNo,QtyPer);
    END;

    PROCEDURE MAKEItemChargePurchaseLine@18(VAR PurchaseLine@1000 : Record 39;VAR ItemCharge@1005 : Record 5800;PurchaseHeader@1004 : Record 38;Qty@1001 : Decimal;DirectUnitCost@1002 : Decimal);
    BEGIN
      LibraryInventory.CreateItemCharge(ItemCharge);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Charge (Item)",ItemCharge."No.",Qty);
      PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
      PurchaseLine.MODIFY(TRUE);
    END;

    PROCEDURE MAKEItemChargeSalesLine@23(VAR SalesLine@1004 : Record 37;VAR ItemCharge@1003 : Record 5800;SalesHeader@1002 : Record 36;Qty@1001 : Decimal;UnitCost@1000 : Decimal);
    BEGIN
      LibraryInventory.CreateItemCharge(ItemCharge);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::"Charge (Item)",ItemCharge."No.",Qty);
      SalesLine.VALIDATE("Unit Price",UnitCost);
      SalesLine.VALIDATE("Unit Cost",UnitCost);
      SalesLine.MODIFY(TRUE);
    END;

    PROCEDURE MAKEItemJournalLine@25(VAR ItemJournalLine@1000 : Record 83;ItemJournalBatch@1001 : Record 233;Item@1002 : Record 27;LocationCode@1003 : Code[10];VariantCode@1004 : Code[10];PostingDate@1005 : Date;EntryType@1007 : Option;Qty@1008 : Decimal;UnitAmount@1006 : Decimal);
    BEGIN
      LibraryInventory.MakeItemJournalLine(ItemJournalLine,ItemJournalBatch,Item,PostingDate,EntryType,Qty);
      ItemJournalLine."Location Code" := LocationCode;
      ItemJournalLine."Variant Code" := VariantCode;
      ItemJournalLine.VALIDATE("Unit Amount",UnitAmount);
      ItemJournalLine.INSERT;
    END;

    PROCEDURE MAKEItemJournalLineWithApplication@87(VAR ItemJournalLine@1000 : Record 83;ItemJournalBatch@1001 : Record 233;Item@1002 : Record 27;LocationCode@1003 : Code[10];VariantCode@1004 : Code[10];PostingDate@1005 : Date;EntryType@1007 : Option;Qty@1008 : Decimal;UnitAmount@1006 : Decimal;AppltoEntryNo@1009 : Integer);
    BEGIN
      LibraryInventory.MakeItemJournalLine(ItemJournalLine,ItemJournalBatch,Item,PostingDate,EntryType,Qty);
      ItemJournalLine."Location Code" := LocationCode;
      ItemJournalLine."Variant Code" := VariantCode;
      ItemJournalLine.VALIDATE("Unit Amount",UnitAmount);
      ItemJournalLine.VALIDATE("Applies-to Entry",AppltoEntryNo);
      ItemJournalLine.INSERT;
    END;

    PROCEDURE MAKEItemReclassificationJournalLine@86(VAR ItemJournalLine@1000 : Record 83;ItemJournalBatch@1001 : Record 233;Item@1002 : Record 27;VariantCode@1004 : Code[10];LocationCode@1003 : Code[10];NewLocationCode@1005 : Code[10];BinCode@1006 : Code[20];NewBinCode@1009 : Code[20];PostingDate@1007 : Date;Quantity@1008 : Decimal);
    BEGIN
      LibraryInventory.MakeItemJournalLine(
        ItemJournalLine,ItemJournalBatch,Item,PostingDate,ItemJournalLine."Entry Type"::Transfer,Quantity);
      ItemJournalLine."Location Code" := LocationCode;
      ItemJournalLine."Variant Code" := VariantCode;
      ItemJournalLine."New Location Code" := NewLocationCode;
      ItemJournalLine."Bin Code" := BinCode;
      ItemJournalLine."New Bin Code" := NewBinCode;
      ItemJournalLine.INSERT;
    END;

    PROCEDURE MAKEOutputJournalLine@553(VAR ItemJournalBatch@1000 : Record 233;ProdOrderLine@1001 : Record 5406;PostingDate@1003 : Date;Qty@1006 : Decimal;UnitCost@1007 : Decimal);
    VAR
      ItemJournalLine@1008 : Record 83;
      Item@1009 : Record 27;
      RoutingLine@1010 : Record 99000764;
    BEGIN
      LibraryInventory.CreateItemJournalBatchByType(ItemJournalBatch,ItemJournalBatch."Template Type"::Output);
      Item.GET(ProdOrderLine."Item No.");
      MAKEItemJournalLine(
        ItemJournalLine,ItemJournalBatch,Item,ProdOrderLine."Location Code",ProdOrderLine."Variant Code",PostingDate,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",0,0);
      ItemJournalLine.VALIDATE("Entry Type",ItemJournalLine."Entry Type"::Output);
      ItemJournalLine.VALIDATE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.VALIDATE("Order No.",ProdOrderLine."Prod. Order No.");
      ItemJournalLine.VALIDATE("Order Line No.",ProdOrderLine."Line No.");
      ItemJournalLine.VALIDATE("Item No.",ProdOrderLine."Item No.");
      RoutingLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
      IF RoutingLine.FINDFIRST THEN
        ItemJournalLine.VALIDATE("Operation No.",RoutingLine."Operation No.");
      ItemJournalLine.VALIDATE("Output Quantity",Qty);
      ItemJournalLine.VALIDATE("Unit Cost",UnitCost);
      ItemJournalLine.MODIFY;
    END;

    PROCEDURE MAKEProductionBOM@555(VAR ProductionBOMHeader@1000 : Record 99000771;VAR ParentItem@1001 : Record 27;ChildItem@1002 : Record 27;ChildItemQtyPer@1003 : Decimal;RoutingLinkCode@1004 : Code[10]);
    VAR
      ProductionBOMLine@1005 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,ParentItem."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ChildItem."No.",ChildItemQtyPer);
      ProductionBOMLine.VALIDATE("Routing Link Code",RoutingLinkCode);
      ProductionBOMLine.MODIFY;

      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY;

      ParentItem.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      ParentItem.MODIFY;
    END;

    PROCEDURE MAKEProductionOrder@24(VAR ProductionOrder@1000 : Record 5405;ProdOrderStatus@1001 : Option;Item@1002 : Record 27;LocationCode@1003 : Code[10];VariantCode@1007 : Code[10];Qty@1005 : Decimal;DueDate@1006 : Date);
    VAR
      ProdOrderLine@1004 : Record 5406;
      ManufacturingSetup@1008 : Record 99000765;
      NoSeriesManagement@1010 : Codeunit 396;
      ProdNoSeries@1009 : Code[10];
    BEGIN
      ProdNoSeries := LibraryUtility.GetGlobalNoSeriesCode;
      ManufacturingSetup.GET;
      CASE ProdOrderStatus OF
        ProductionOrder.Status::Simulated:
          IF ManufacturingSetup."Simulated Order Nos." <> ProdNoSeries THEN BEGIN
            ManufacturingSetup."Simulated Order Nos." := ProdNoSeries;
            ManufacturingSetup.MODIFY;
          END;
        ProductionOrder.Status::Planned:
          IF ManufacturingSetup."Planned Order Nos." <> ProdNoSeries THEN BEGIN
            ManufacturingSetup."Planned Order Nos." := ProdNoSeries;
            ManufacturingSetup.MODIFY;
          END;
        ProductionOrder.Status::"Firm Planned":
          IF ManufacturingSetup."Firm Planned Order Nos." <> ProdNoSeries THEN BEGIN
            ManufacturingSetup."Firm Planned Order Nos." := ProdNoSeries;
            ManufacturingSetup.MODIFY;
          END;
        ProductionOrder.Status::Released:
          IF ManufacturingSetup."Released Order Nos." <> ProdNoSeries THEN BEGIN
            ManufacturingSetup."Released Order Nos." := ProdNoSeries;
            ManufacturingSetup.MODIFY;
          END;
      END;

      CLEAR(ProductionOrder);
      ProductionOrder."No." := NoSeriesManagement.GetNextNo(ProdNoSeries,0D,TRUE);
      ProductionOrder.Status := ProdOrderStatus;
      ProductionOrder.VALIDATE("Source Type",ProductionOrder."Source Type"::Item);
      ProductionOrder.VALIDATE("Source No.",Item."No.");
      ProductionOrder.VALIDATE(Quantity,Qty);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.VALIDATE("Due Date",DueDate);
      ProductionOrder.INSERT(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,TRUE);
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.MODIFYALL("Variant Code",VariantCode);
    END;

    PROCEDURE MAKEPurchaseDoc@27(VAR PurchaseHeader@1006 : Record 38;VAR PurchaseLine@1009 : Record 39;DocType@1007 : Option;Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];Qty@1002 : Decimal;PostingDate@1001 : Date;DirectUnitCost@1000 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocType,'');
      PurchaseHeader.VALIDATE("Posting Date",PostingDate);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",Qty);
      PurchaseLine."Location Code" := LocationCode;
      PurchaseLine."Variant Code" := VariantCode;
      PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
      PurchaseLine.MODIFY(TRUE);
    END;

    PROCEDURE MAKEPurchaseOrder@11(VAR PurchaseHeader@1006 : Record 38;VAR PurchaseLine@1009 : Record 39;Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];Qty@1002 : Decimal;PostingDate@1001 : Date;DirectUnitCost@1000 : Decimal);
    BEGIN
      MAKEPurchaseDoc(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,Item,LocationCode,VariantCode,Qty,PostingDate,
        DirectUnitCost);
    END;

    PROCEDURE MAKEPurchaseQuote@100(VAR PurchaseHeader@1006 : Record 38;VAR PurchaseLine@1009 : Record 39;Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];Qty@1002 : Decimal;PostingDate@1001 : Date;DirectUnitCost@1000 : Decimal);
    BEGIN
      MAKEPurchaseDoc(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Quote,
        Item,LocationCode,VariantCode,Qty,PostingDate,DirectUnitCost);
    END;

    PROCEDURE MAKEPurchaseBlanketOrder@101(VAR PurchaseHeader@1006 : Record 38;VAR PurchaseLine@1009 : Record 39;Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];Qty@1002 : Decimal;PostingDate@1001 : Date;DirectUnitCost@1000 : Decimal);
    BEGIN
      MAKEPurchaseDoc(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Blanket Order",
        Item,LocationCode,VariantCode,Qty,PostingDate,DirectUnitCost);
    END;

    PROCEDURE MAKEPurchaseReturnOrder@21(VAR PurchaseHeader@1006 : Record 38;VAR PurchaseLine@1009 : Record 39;Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];Qty@1002 : Decimal;PostingDate@1001 : Date;DirectUnitCost@1000 : Decimal);
    BEGIN
      MAKEPurchaseDoc(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Return Order",Item,LocationCode,VariantCode,Qty,PostingDate,
        DirectUnitCost);
    END;

    PROCEDURE MAKEPurchaseCreditMemo@98(VAR PurchaseHeader@1006 : Record 38;VAR PurchaseLine@1009 : Record 39;Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];Qty@1002 : Decimal;PostingDate@1001 : Date;DirectUnitCost@1000 : Decimal);
    BEGIN
      MAKEPurchaseDoc(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Credit Memo",
        Item,LocationCode,VariantCode,Qty,PostingDate,DirectUnitCost);
    END;

    PROCEDURE MAKEPurchaseInvoice@45(VAR PurchaseHeader@1006 : Record 38;VAR PurchaseLine@1009 : Record 39;Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];Qty@1002 : Decimal;PostingDate@1001 : Date;DirectUnitCost@1000 : Decimal);
    BEGIN
      MAKEPurchaseDoc(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,Item,LocationCode,VariantCode,Qty,PostingDate,
        DirectUnitCost);
    END;

    PROCEDURE MAKERevaluationJournalLine@79(VAR ItemJournalBatch@1000 : Record 233;VAR Item@1001 : Record 27;NewPostingDate@1002 : Date;NewCalculatePer@1004 : Option;NewByLocation@1005 : Boolean;NewByVariant@1006 : Boolean;NewUpdStdCost@1007 : Boolean;NewCalcBase@1008 : Option);
    VAR
      ItemJournalLine@1009 : Record 83;
      NewDocNo@1003 : Code[20];
    BEGIN
      NewDocNo := LibraryUtility.GenerateRandomCode(ItemJournalLine.FIELDNO("Document No."),DATABASE::"Item Journal Line");
      RevaluationJournalCalcInventory(
        ItemJournalBatch,Item,NewPostingDate,NewDocNo,NewCalculatePer,NewByLocation,NewByVariant,NewUpdStdCost,NewCalcBase);
    END;

    PROCEDURE MAKERouting@83(VAR RoutingHeader@1000 : Record 99000763;VAR Item@1001 : Record 27;RoutingLinkCode@1002 : Code[10];DirectUnitCost@1003 : Decimal);
    VAR
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1005 : Record 99000754;
    BEGIN
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);

      WorkCenter.FINDFIRST;
      WorkCenter.VALIDATE("Direct Unit Cost",DirectUnitCost);
      WorkCenter.MODIFY;

      LibraryManufacturing.CreateRoutingLine(RoutingHeader,RoutingLine,'','',RoutingLine.Type::"Work Center",WorkCenter."No.");
      RoutingLine.VALIDATE("Routing Link Code",RoutingLinkCode);
      RoutingLine.VALIDATE("Run Time",1);
      RoutingLine.MODIFY;

      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY;

      Item.VALIDATE("Routing No.",RoutingHeader."No.");
      Item.MODIFY;
    END;

    PROCEDURE MAKERoutingforWorkCenter@88(VAR RoutingHeader@1003 : Record 99000763;VAR Item@1002 : Record 27;WorkCenterNo@1001 : Code[20]);
    VAR
      RoutingLine@1004 : Record 99000764;
    BEGIN
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);

      LibraryManufacturing.CreateRoutingLine(RoutingHeader,RoutingLine,'','',RoutingLine.Type::"Work Center",WorkCenterNo);
      RoutingLine.VALIDATE("Run Time",1);
      RoutingLine.MODIFY;

      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY;

      Item.VALIDATE("Routing No.",RoutingHeader."No.");
      Item.MODIFY;
    END;

    PROCEDURE MAKESalesDoc@30(VAR SalesHeader@1007 : Record 36;VAR SalesLine@1006 : Record 37;DocType@1009 : Option;Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];Qty@1002 : Decimal;PostingDate@1001 : Date;UnitPrice@1000 : Decimal);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocType,'');
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",Qty);
      SalesLine."Location Code" := LocationCode;
      SalesLine."Variant Code" := VariantCode;
      SalesLine.VALIDATE("Unit Price",UnitPrice);
      SalesLine.MODIFY(TRUE);
    END;

    PROCEDURE MAKESalesOrder@12(VAR SalesHeader@1007 : Record 36;VAR SalesLine@1006 : Record 37;Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];Qty@1002 : Decimal;PostingDate@1001 : Date;UnitPrice@1000 : Decimal);
    BEGIN
      MAKESalesDoc(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,Item,LocationCode,VariantCode,Qty,PostingDate,UnitPrice);
    END;

    PROCEDURE MAKESalesInvoice@104(VAR SalesHeader@1007 : Record 36;VAR SalesLine@1006 : Record 37;Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];Qty@1002 : Decimal;PostingDate@1001 : Date;UnitPrice@1000 : Decimal);
    BEGIN
      MAKESalesDoc(SalesHeader,SalesLine,SalesHeader."Document Type"::Invoice,Item,LocationCode,VariantCode,Qty,PostingDate,UnitPrice);
    END;

    PROCEDURE MAKESalesQuote@102(VAR SalesHeader@1007 : Record 36;VAR SalesLine@1006 : Record 37;Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];Qty@1002 : Decimal;PostingDate@1001 : Date;UnitPrice@1000 : Decimal);
    BEGIN
      MAKESalesDoc(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Quote,Item,LocationCode,VariantCode,Qty,PostingDate,UnitPrice);
    END;

    PROCEDURE MAKESalesBlanketOrder@103(VAR SalesHeader@1007 : Record 36;VAR SalesLine@1006 : Record 37;Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];Qty@1002 : Decimal;PostingDate@1001 : Date;UnitPrice@1000 : Decimal);
    BEGIN
      MAKESalesDoc(
        SalesHeader,SalesLine,SalesHeader."Document Type"::"Blanket Order",Item,LocationCode,VariantCode,Qty,PostingDate,UnitPrice);
    END;

    PROCEDURE MAKESalesReturnOrder@20(VAR SalesHeader@1007 : Record 36;VAR SalesLine@1006 : Record 37;Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];Qty@1002 : Decimal;PostingDate@1001 : Date;UnitCost@1000 : Decimal;UnitPrice@1008 : Decimal);
    BEGIN
      MAKESalesDoc(
        SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",Item,LocationCode,VariantCode,Qty,PostingDate,UnitPrice);
      SalesLine.VALIDATE("Unit Cost (LCY)",UnitCost);
      SalesLine.MODIFY;
    END;

    PROCEDURE MAKESalesCreditMemo@95(VAR SalesHeader@1008 : Record 36;VAR SalesLine@1007 : Record 37;Item@1006 : Record 27;LocationCode@1005 : Code[10];VariantCode@1004 : Code[10];Qty@1003 : Decimal;PostingDate@1002 : Date;UnitCost@1001 : Decimal;UnitPrice@1000 : Decimal);
    BEGIN
      MAKESalesDoc(SalesHeader,SalesLine,SalesHeader."Document Type"::"Credit Memo",Item,
        LocationCode,VariantCode,Qty,PostingDate,UnitPrice);
      SalesLine.VALIDATE("Unit Cost (LCY)",UnitCost);
      SalesLine.MODIFY;
    END;

    PROCEDURE MAKEStockkeepingUnit@15(VAR StockkeepingUnit@1000 : Record 5700;Item@1001 : Record 27);
    VAR
      Location@1002 : Record 14;
      ItemVariant@1003 : Record 5401;
    BEGIN
      CLEAR(StockkeepingUnit);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,Location.Code,Item."No.",ItemVariant.Code);
      StockkeepingUnit."Unit Cost" := Item."Unit Cost";
      StockkeepingUnit."Standard Cost" := Item."Standard Cost";
      StockkeepingUnit.MODIFY;
    END;

    PROCEDURE MAKETransferOrder@84(VAR TransferHeader@1007 : Record 5740;VAR TransferLine@1006 : Record 5741;Item@1005 : Record 27;FromLocation@1004 : Record 14;ToLocation@1008 : Record 14;InTransitLocation@1009 : Record 14;VariantCode@1003 : Code[10];Qty@1002 : Decimal;PostingDate@1000 : Date;ShipmentDate@1001 : Date);
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocation.Code,ToLocation.Code,InTransitLocation.Code);
      TransferHeader.VALIDATE("Posting Date",PostingDate);
      TransferHeader.VALIDATE("Shipment Date",ShipmentDate);
      TransferHeader.MODIFY;
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,Item."No.",Qty);
      TransferLine.VALIDATE("Shipment Date",ShipmentDate);
      TransferLine.VALIDATE("Variant Code",VariantCode);
      TransferLine.MODIFY;
    END;

    PROCEDURE POSTConsumption@5(ProdOrderLine@1008 : Record 5406;Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];Qty@1002 : Decimal;PostingDate@1001 : Date;UnitCost@1000 : Decimal);
    VAR
      ItemJournalBatch@1007 : Record 233;
    BEGIN
      MAKEConsumptionJournalLine(ItemJournalBatch,ProdOrderLine,Item,PostingDate,LocationCode,VariantCode,Qty,UnitCost);
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
    END;

    PROCEDURE POSTItemJournalLine@7(TemplateType@1000 : Option;EntryType@1003 : Option;Item@1004 : Record 27;LocationCode@1008 : Code[10];VariantCode@1009 : Code[10];BinCode@1010 : Code[20];Qty@1005 : Decimal;PostingDate@1006 : Date;UnitAmount@1007 : Decimal);
    VAR
      ItemJournalLine@1001 : Record 83;
      ItemJournalBatch@1002 : Record 233;
    BEGIN
      LibraryInventory.CreateItemJournalBatchByType(ItemJournalBatch,TemplateType);
      MAKEItemJournalLine(ItemJournalLine,ItemJournalBatch,Item,LocationCode,VariantCode,PostingDate,EntryType,Qty,UnitAmount);
      ItemJournalLine."Bin Code" := BinCode;
      ItemJournalLine.MODIFY;
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
    END;

    PROCEDURE POSTItemJournalLineWithApplication@89(TemplateType@1000 : Option;EntryType@1003 : Option;Item@1004 : Record 27;LocationCode@1008 : Code[10];VariantCode@1009 : Code[10];Qty@1005 : Decimal;PostingDate@1006 : Date;UnitAmount@1007 : Decimal;AppltoEntryNo@1010 : Integer);
    VAR
      ItemJournalLine@1001 : Record 83;
      ItemJournalBatch@1002 : Record 233;
    BEGIN
      LibraryInventory.CreateItemJournalBatchByType(ItemJournalBatch,TemplateType);
      MAKEItemJournalLineWithApplication(
        ItemJournalLine,ItemJournalBatch,Item,LocationCode,VariantCode,PostingDate,EntryType,Qty,UnitAmount,AppltoEntryNo);
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
    END;

    PROCEDURE POSTNegativeAdjustment@3(Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];BinCode@1008 : Code[20];Qty@1002 : Decimal;PostingDate@1001 : Date;UnitAmount@1000 : Decimal);
    VAR
      ItemJournalTemplate@1007 : Record 82;
      ItemJournalLine@1006 : Record 83;
    BEGIN
      POSTItemJournalLine(ItemJournalTemplate.Type::Item,
        ItemJournalLine."Entry Type"::"Negative Adjmt.",
        Item,
        LocationCode,
        VariantCode,
        BinCode,
        Qty,
        PostingDate,
        UnitAmount);
    END;

    PROCEDURE POSTNegativeAdjustmentWithItemTracking@97(Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];Qty@1002 : Decimal;PostingDate@1001 : Date;SerialNo@1008 : Code[20];LotNo@1010 : Code[20]);
    VAR
      ReservEntry@1000 : Record 337;
      ItemJournalTemplate@1006 : Record 82;
      ItemJournalLine@1007 : Record 83;
      ItemJournalBatch@1009 : Record 233;
    BEGIN
      LibraryInventory.CreateItemJournalBatchByType(ItemJournalBatch,ItemJournalTemplate.Type::Item);
      MAKEItemJournalLine(ItemJournalLine,ItemJournalBatch,Item,LocationCode,VariantCode,PostingDate,
        ItemJournalLine."Entry Type"::"Negative Adjmt.",Qty,0);
      LibraryItemTracking.CreateItemJournalLineItemTracking(ReservEntry,ItemJournalLine,SerialNo,LotNo,Qty);
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
    END;

    PROCEDURE POSTNegativeAdjustmentAmount@1020(Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];Qty@1002 : Decimal;PostingDate@1001 : Date;Amount@1008 : Decimal);
    VAR
      ItemJournalTemplate@1006 : Record 82;
      ItemJournalLine@1007 : Record 83;
      ItemJournalBatch@1009 : Record 233;
    BEGIN
      LibraryInventory.CreateItemJournalBatchByType(ItemJournalBatch,ItemJournalTemplate.Type::Item);
      MAKEItemJournalLine(ItemJournalLine,ItemJournalBatch,Item,LocationCode,VariantCode,PostingDate,
        ItemJournalLine."Entry Type"::"Negative Adjmt.",Qty,0);
      ItemJournalLine.VALIDATE(Amount,Amount);
      ItemJournalLine.MODIFY;
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
    END;

    PROCEDURE POSTOutput@4(ProdOrderLine@1008 : Record 5406;Qty@1002 : Decimal;PostingDate@1001 : Date;UnitCost@1000 : Decimal);
    VAR
      ItemJournalBatch@1007 : Record 233;
      Item@1006 : Record 27;
    BEGIN
      Item.GET(ProdOrderLine."Item No.");
      MAKEOutputJournalLine(ItemJournalBatch,ProdOrderLine,PostingDate,Qty,UnitCost);
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
    END;

    PROCEDURE POSTOutputWithItemTracking@90(ProdOrderLine@1008 : Record 5406;Qty@1002 : Decimal;RunTime@1010 : Decimal;PostingDate@1001 : Date;UnitCost@1000 : Decimal;SerialNo@1004 : Code[20];LotNo@1005 : Code[20]);
    VAR
      ItemJournalBatch@1007 : Record 233;
      ItemJournalLine@1003 : Record 83;
      Item@1006 : Record 27;
      ReservEntry@1009 : Record 337;
    BEGIN
      Item.GET(ProdOrderLine."Item No.");
      MAKEOutputJournalLine(ItemJournalBatch,ProdOrderLine,PostingDate,Qty,UnitCost);
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.VALIDATE("Run Time",RunTime);
      ItemJournalLine.MODIFY;
      LibraryItemTracking.CreateItemJournalLineItemTracking(ReservEntry,ItemJournalLine,SerialNo,LotNo,Qty);
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
    END;

    PROCEDURE POSTPositiveAdjustment@2(Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];BinCode@1008 : Code[20];Qty@1002 : Decimal;PostingDate@1001 : Date;UnitAmount@1000 : Decimal);
    VAR
      ItemJournalTemplate@1006 : Record 82;
      ItemJournalLine@1007 : Record 83;
    BEGIN
      POSTItemJournalLine(ItemJournalTemplate.Type::Item,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",
        Item,
        LocationCode,
        VariantCode,
        BinCode,
        Qty,
        PostingDate,
        UnitAmount);
    END;

    PROCEDURE POSTPositiveAdjustmentAmount@1021(Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];Qty@1002 : Decimal;PostingDate@1001 : Date;Amount@1008 : Decimal);
    VAR
      ItemJournalTemplate@1006 : Record 82;
      ItemJournalLine@1007 : Record 83;
      ItemJournalBatch@1009 : Record 233;
    BEGIN
      LibraryInventory.CreateItemJournalBatchByType(ItemJournalBatch,ItemJournalTemplate.Type::Item);
      MAKEItemJournalLine(ItemJournalLine,ItemJournalBatch,Item,LocationCode,VariantCode,PostingDate,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Qty,0);
      ItemJournalLine.VALIDATE(Amount,Amount);
      ItemJournalLine.MODIFY;
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
    END;

    PROCEDURE POSTPositiveAdjustmentWithItemTracking@99(Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];Qty@1002 : Decimal;PostingDate@1001 : Date;SerialNo@1008 : Code[20];LotNo@1010 : Code[20]);
    VAR
      ReservEntry@1000 : Record 337;
      ItemJournalTemplate@1006 : Record 82;
      ItemJournalLine@1007 : Record 83;
      ItemJournalBatch@1009 : Record 233;
    BEGIN
      LibraryInventory.CreateItemJournalBatchByType(ItemJournalBatch,ItemJournalTemplate.Type::Item);
      MAKEItemJournalLine(ItemJournalLine,ItemJournalBatch,Item,LocationCode,VariantCode,PostingDate,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Qty,0);
      LibraryItemTracking.CreateItemJournalLineItemTracking(ReservEntry,ItemJournalLine,SerialNo,LotNo,Qty);
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
    END;

    PROCEDURE POSTPurchaseJournal@6(Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];BinCode@1008 : Code[20];Qty@1002 : Decimal;PostingDate@1001 : Date;UnitAmount@1000 : Decimal);
    VAR
      ItemJournalTemplate@1007 : Record 82;
      ItemJournalLine@1006 : Record 83;
    BEGIN
      POSTItemJournalLine(ItemJournalTemplate.Type::Item,
        ItemJournalLine."Entry Type"::Purchase,
        Item,
        LocationCode,
        VariantCode,
        BinCode,
        Qty,
        PostingDate,
        UnitAmount);
    END;

    PROCEDURE POSTPurchaseOrder@9(VAR PurchaseHeader@1011 : Record 38;Item@1008 : Record 27;LocationCode@1007 : Code[10];VariantCode@1006 : Code[10];Qty@1005 : Decimal;PostingDate@1004 : Date;DirectUnitCost@1003 : Decimal;Receive@1009 : Boolean;Invoice@1010 : Boolean);
    BEGIN
      POSTPurchaseOrderPartially(PurchaseHeader,Item,LocationCode,VariantCode,Qty,PostingDate,DirectUnitCost,Receive,Qty,Invoice,Qty);
    END;

    PROCEDURE POSTPurchaseOrderWithItemTracking@96(VAR PurchaseHeader@1011 : Record 38;Item@1008 : Record 27;LocationCode@1007 : Code[10];VariantCode@1006 : Code[10];Qty@1005 : Decimal;PostingDate@1004 : Date;DirectUnitCost@1003 : Decimal;Receive@1009 : Boolean;Invoice@1010 : Boolean;SerialNo@1002 : Code[20];LotNo@1012 : Code[20]);
    VAR
      PurchaseLine@1000 : Record 39;
      ReservEntry@1001 : Record 337;
    BEGIN
      MAKEPurchaseOrder(PurchaseHeader,PurchaseLine,Item,LocationCode,VariantCode,Qty,PostingDate,DirectUnitCost);
      PurchaseLine.VALIDATE("Qty. to Receive",Qty);
      PurchaseLine.VALIDATE("Qty. to Invoice",Qty);
      PurchaseLine.MODIFY;
      LibraryItemTracking.CreatePurchOrderItemTracking(ReservEntry,PurchaseLine,SerialNo,LotNo,Qty);
      IF Invoice THEN
        SetVendorDocNo(PurchaseHeader);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,Receive,Invoice);
    END;

    PROCEDURE POSTPurchaseOrderPartially@46(VAR PurchaseHeader@1011 : Record 38;Item@1008 : Record 27;LocationCode@1007 : Code[10];VariantCode@1006 : Code[10];Qty@1005 : Decimal;PostingDate@1004 : Date;DirectUnitCost@1003 : Decimal;Receive@1009 : Boolean;ReceiveQty@1002 : Decimal;Invoice@1010 : Boolean;InvoiceQty@1001 : Decimal);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      MAKEPurchaseOrder(PurchaseHeader,PurchaseLine,Item,LocationCode,VariantCode,Qty,PostingDate,DirectUnitCost);
      PurchaseLine.VALIDATE("Qty. to Receive",ReceiveQty);
      PurchaseLine.VALIDATE("Qty. to Invoice",InvoiceQty);
      PurchaseLine.MODIFY;
      IF Invoice THEN
        SetVendorDocNo(PurchaseHeader);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,Receive,Invoice);
    END;

    PROCEDURE POSTReclassificationJournalLine@82(Item@1000 : Record 27;StartDate@1001 : Date;FromLocationCode@1004 : Code[10];ToLocationCode@1007 : Code[10];VariantCode@1005 : Code[10];BinCode@1008 : Code[20];NewBinCode@1009 : Code[20];Quantity@1006 : Decimal);
    VAR
      ItemJnlBatch@1003 : Record 233;
      ItemJnlLine@1002 : Record 83;
    BEGIN
      LibraryInventory.CreateItemJournalBatchByType(ItemJnlBatch,ItemJnlBatch."Template Type"::Transfer);
      MAKEItemReclassificationJournalLine(ItemJnlLine,ItemJnlBatch,Item,VariantCode,FromLocationCode,ToLocationCode,
        BinCode,NewBinCode,StartDate,Quantity);
      LibraryInventory.PostItemJournalBatch(ItemJnlBatch);
    END;

    PROCEDURE POSTSaleJournal@8(Item@1005 : Record 27;LocationCode@1004 : Code[10];VariantCode@1003 : Code[10];BinCode@1008 : Code[10];Qty@1002 : Decimal;PostingDate@1001 : Date;UnitAmount@1000 : Decimal);
    VAR
      ItemJournalTemplate@1007 : Record 82;
      ItemJournalLine@1006 : Record 83;
    BEGIN
      POSTItemJournalLine(ItemJournalTemplate.Type::Item,
        ItemJournalLine."Entry Type"::Sale,
        Item,
        LocationCode,
        VariantCode,
        BinCode,
        Qty,
        PostingDate,
        UnitAmount);
    END;

    PROCEDURE POSTSalesOrder@10(VAR SalesHeader@1010 : Record 36;Item@1009 : Record 27;LocationCode@1008 : Code[10];VariantCode@1007 : Code[10];Qty@1006 : Decimal;PostingDate@1005 : Date;UnitCost@1004 : Decimal;Ship@1003 : Boolean;Invoice@1001 : Boolean);
    BEGIN
      POSTSalesOrderPartially(SalesHeader,Item,LocationCode,VariantCode,Qty,PostingDate,UnitCost,Ship,Qty,Invoice,Qty);
    END;

    PROCEDURE POSTSalesOrderPartially@61(VAR SalesHeader@1011 : Record 36;Item@1010 : Record 27;LocationCode@1009 : Code[10];VariantCode@1008 : Code[10];Qty@1007 : Decimal;PostingDate@1006 : Date;UnitCost@1005 : Decimal;Ship@1004 : Boolean;ShipQty@1003 : Decimal;Invoice@1002 : Boolean;InvoiceQty@1001 : Decimal);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      MAKESalesOrder(SalesHeader,SalesLine,Item,LocationCode,VariantCode,Qty,PostingDate,UnitCost);
      SalesLine.VALIDATE("Qty. to Ship",ShipQty);
      SalesLine.VALIDATE("Qty. to Invoice",InvoiceQty);
      SalesLine.MODIFY;
      LibrarySales.PostSalesDocument(SalesHeader,Ship,Invoice);
    END;

    PROCEDURE POSTTransferOrder@85(VAR TransferHeader@1010 : Record 5740;Item@1009 : Record 27;FromLocation@1008 : Record 14;ToLocation@1000 : Record 14;InTransitLocation@1002 : Record 14;VariantCode@1007 : Code[10];Qty@1006 : Decimal;PostingDate@1005 : Date;ShipmentDate@1011 : Date;Ship@1003 : Boolean;Receive@1001 : Boolean);
    VAR
      TransferLine@1004 : Record 5741;
    BEGIN
      MAKETransferOrder(
        TransferHeader,TransferLine,Item,FromLocation,ToLocation,InTransitLocation,VariantCode,Qty,PostingDate,ShipmentDate);
      LibraryWarehouse.PostTransferOrder(TransferHeader,Ship,Receive);
    END;

    PROCEDURE SETInventorySetup@16(AutomaticCostAdjustment@1000 : Option;AvgCostCalcType@1001 : Option;AvgCostPeriod@1002 : Option);
    VAR
      InventorySetup@1003 : Record 313;
    BEGIN
      InventorySetup.GET;
      InventorySetup."Automatic Cost Posting" := FALSE;
      InventorySetup."Expected Cost Posting to G/L" := FALSE;
      InventorySetup.VALIDATE("Automatic Cost Adjustment",AutomaticCostAdjustment);
      InventorySetup.VALIDATE("Average Cost Calc. Type",AvgCostCalcType);
      InventorySetup.VALIDATE("Average Cost Period",AvgCostPeriod);
      InventorySetup.MODIFY;
    END;

    PROCEDURE SETNoSeries@19();
    VAR
      InventorySetup@1001 : Record 313;
      ManufacturingSetup@1004 : Record 99000765;
      SalesReceivablesSetup@1003 : Record 311;
      MarketingSetup@1002 : Record 5079;
      NoSeries@1000 : Code[10];
    BEGIN
      NoSeries := LibraryUtility.GetGlobalNoSeriesCode;

      InventorySetup.GET;
      IF InventorySetup."Item Nos." <> NoSeries THEN BEGIN
        InventorySetup.VALIDATE("Item Nos.",NoSeries);
        InventorySetup.MODIFY;
      END;
      IF InventorySetup."Transfer Order Nos." <> NoSeries THEN BEGIN
        InventorySetup.VALIDATE("Transfer Order Nos.",NoSeries);
        InventorySetup.MODIFY;
      END;

      ManufacturingSetup.GET;
      IF ManufacturingSetup."Simulated Order Nos." <> NoSeries THEN BEGIN
        ManufacturingSetup."Simulated Order Nos." := NoSeries;
        ManufacturingSetup.MODIFY;
      END;
      IF ManufacturingSetup."Planned Order Nos." <> NoSeries THEN BEGIN
        ManufacturingSetup."Planned Order Nos." := NoSeries;
        ManufacturingSetup.MODIFY;
      END;
      IF ManufacturingSetup."Firm Planned Order Nos." <> NoSeries THEN BEGIN
        ManufacturingSetup."Firm Planned Order Nos." := NoSeries;
        ManufacturingSetup.MODIFY;
      END;
      IF ManufacturingSetup."Released Order Nos." <> NoSeries THEN BEGIN
        ManufacturingSetup."Released Order Nos." := NoSeries;
        ManufacturingSetup.MODIFY;
      END;

      SalesReceivablesSetup.GET;
      IF SalesReceivablesSetup."Quote Nos." <> NoSeries THEN BEGIN
        SalesReceivablesSetup."Quote Nos." := NoSeries;
        SalesReceivablesSetup.MODIFY;
      END;
      IF SalesReceivablesSetup."Order Nos." <> NoSeries THEN BEGIN
        SalesReceivablesSetup."Order Nos." := NoSeries;
        SalesReceivablesSetup.MODIFY;
      END;
      IF SalesReceivablesSetup."Invoice Nos." <> NoSeries THEN BEGIN
        SalesReceivablesSetup."Invoice Nos." := NoSeries;
        SalesReceivablesSetup.MODIFY;
      END;
      IF SalesReceivablesSetup."Credit Memo Nos." <> NoSeries THEN BEGIN
        SalesReceivablesSetup."Credit Memo Nos." := NoSeries;
        SalesReceivablesSetup.MODIFY;
      END;
      IF SalesReceivablesSetup."Return Order Nos." <> NoSeries THEN BEGIN
        SalesReceivablesSetup."Return Order Nos." := NoSeries;
        SalesReceivablesSetup.MODIFY;
      END;
      IF SalesReceivablesSetup."Customer Nos." <> NoSeries THEN BEGIN
        SalesReceivablesSetup."Customer Nos." := NoSeries;
        SalesReceivablesSetup.MODIFY;
      END;

      MarketingSetup.GET;
      IF MarketingSetup."Contact Nos." <> NoSeries THEN BEGIN
        MarketingSetup."Contact Nos." := NoSeries;
        MarketingSetup.MODIFY;
      END;
    END;

    LOCAL PROCEDURE GRPH1Outbound1Purchase@26(VAR TempItemLedgerEntry@1001 : TEMPORARY Record 32;VAR PurchaseLine@1002 : Record 39;Item@1000 : Record 27;LocationCode@1003 : Code[10];VariantCode@1004 : Code[10];InvoicePurchase@1008 : Boolean);
    VAR
      PurchaseHeader1@1006 : Record 38;
      PurchaseHeader2@1007 : Record 38;
      Day1@1005 : Date;
      OutboundQty@1009 : Decimal;
    BEGIN
      CLEAR(TempItemLedgerEntry);
      Day1 := WORKDATE;

      OutboundQty := LibraryRandom.RandInt(10);
      POSTNegativeAdjustment(Item,LocationCode,VariantCode,'',OutboundQty,Day1,LibraryRandom.RandDec(100,2));
      InsertTempILEFromLast(TempItemLedgerEntry);

      POSTPurchaseOrder(
        PurchaseHeader1,Item,LocationCode,VariantCode,
        LibraryRandom.RandIntInRange(OutboundQty,OutboundQty + LibraryRandom.RandInt(10)),Day1 + 1,
        LibraryRandom.RandDec(100,2),TRUE,InvoicePurchase);
      InsertTempILEFromLast(TempItemLedgerEntry);

      MAKEPurchaseOrder(
        PurchaseHeader2,PurchaseLine,Item,LocationCode,VariantCode,LibraryRandom.RandInt(10),Day1 + 2,
        LibraryRandom.RandDec(100,2));
    END;

    PROCEDURE GRPH1Outbound1PurchRcvd@33(VAR TempItemLedgerEntry@1005 : TEMPORARY Record 32;VAR PurchaseLine@1004 : Record 39;Item@1003 : Record 27;LocationCode@1002 : Code[10];VariantCode@1001 : Code[10]);
    BEGIN
      GRPH1Outbound1Purchase(TempItemLedgerEntry,PurchaseLine,Item,LocationCode,VariantCode,FALSE);
    END;

    PROCEDURE GRPH1Outbound1PurchInvd@36(VAR TempItemLedgerEntry@1005 : TEMPORARY Record 32;VAR PurchaseLine@1004 : Record 39;Item@1003 : Record 27;LocationCode@1002 : Code[10];VariantCode@1001 : Code[10]);
    BEGIN
      GRPH1Outbound1Purchase(TempItemLedgerEntry,PurchaseLine,Item,LocationCode,VariantCode,TRUE);
    END;

    PROCEDURE GRPHPurchPartialRcvd1PurchReturn@43(VAR TempItemLedgerEntry@1001 : TEMPORARY Record 32;VAR PurchaseLine@1002 : Record 39;VAR PurchaseLine1@1010 : Record 39;Item@1000 : Record 27;LocationCode@1003 : Code[10];VariantCode@1004 : Code[10];InvoicePurchase@1008 : Boolean);
    VAR
      PurchaseHeader@1006 : Record 38;
      PurchaseHeader1@1007 : Record 38;
      Day1@1005 : Date;
      InboundQty@1009 : Decimal;
    BEGIN
      CLEAR(TempItemLedgerEntry);
      Day1 := WORKDATE;

      // Receive partially the Purchase Line, with or without invoicing.
      InboundQty := LibraryRandom.RandIntInRange(10,20);
      MAKEPurchaseOrder(
        PurchaseHeader,PurchaseLine,Item,LocationCode,VariantCode,InboundQty,Day1 + 2,LibraryRandom.RandDec(100,2));
      PurchaseLine.VALIDATE("Qty. to Receive",LibraryRandom.RandInt(PurchaseLine."Outstanding Quantity" - 5));
      PurchaseLine.MODIFY;
      IF InvoicePurchase THEN
        SetVendorDocNo(PurchaseHeader);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,InvoicePurchase);
      InsertTempILEFromLast(TempItemLedgerEntry);

      // Repeat the receipt.
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      PurchaseLine.VALIDATE("Qty. to Receive",LibraryRandom.RandInt(PurchaseLine."Outstanding Quantity" - 1));
      PurchaseLine.VALIDATE("Direct Unit Cost",PurchaseLine."Direct Unit Cost" + LibraryRandom.RandDec(10,2));
      PurchaseLine.MODIFY;
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      IF InvoicePurchase THEN
        SetVendorDocNo(PurchaseHeader);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,InvoicePurchase);
      InsertTempILEFromLast(TempItemLedgerEntry);

      // Create Purchase Return Header and Line with 0 quantity. Actual qty to be added in calling test.
      MAKEPurchaseReturnOrder(
        PurchaseHeader1,PurchaseLine1,Item,LocationCode,VariantCode,0,Day1 + 2,LibraryRandom.RandDec(100,5));
    END;

    PROCEDURE GRPHPurchItemTracked@41(VAR TempItemLedgerEntry@1005 : TEMPORARY Record 32;VAR PurchaseLine@1004 : Record 39;VAR ReservEntry@1007 : Record 337;Item@1003 : Record 27;LocationCode@1002 : Code[10];VariantCode@1001 : Code[10];Invoice@1000 : Boolean);
    VAR
      PurchaseHeader@1014 : Record 38;
      Day1@1006 : Date;
      InboundQty@1010 : Decimal;
    BEGIN
      CLEAR(TempItemLedgerEntry);
      Day1 := WORKDATE;

      InboundQty := LibraryRandom.RandInt(10);
      MAKEPurchaseOrder(
        PurchaseHeader,PurchaseLine,Item,LocationCode,VariantCode,InboundQty,Day1,LibraryRandom.RandDec(100,2));
      LibraryItemTracking.CreatePurchOrderItemTracking(ReservEntry,PurchaseLine,'',
        COPYSTR(LibraryUtility.GenerateRandomCode(ReservEntry.FIELDNO("Lot No."),DATABASE::"Reservation Entry"),1,10),InboundQty);
      IF Invoice THEN
        SetVendorDocNo(PurchaseHeader);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,Invoice);
      InsertTempILEFromLast(TempItemLedgerEntry);
    END;

    PROCEDURE GRPHSalesItemTracked@42(VAR TempItemLedgerEntry@1005 : TEMPORARY Record 32;VAR SalesLine@1004 : Record 37;VAR ReservEntry@1008 : Record 337;Item@1003 : Record 27;LocationCode@1002 : Code[10];VariantCode@1001 : Code[10];Invoice@1000 : Boolean);
    VAR
      SalesHeader@1013 : Record 36;
      ReservEntry2@1009 : Record 337;
      Day1@1007 : Date;
      OutboundQty@1006 : Decimal;
    BEGIN
      CLEAR(TempItemLedgerEntry);
      Day1 := WORKDATE;

      OutboundQty := LibraryRandom.RandInt(ReservEntry.Quantity);
      MAKESalesOrder(SalesHeader,SalesLine,Item,LocationCode,VariantCode,OutboundQty,Day1,LibraryRandom.RandDec(100,2));
      LibraryItemTracking.CreateSalesOrderItemTracking(ReservEntry2,SalesLine,'',ReservEntry."Lot No.",OutboundQty);

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,Invoice);
      ReservEntry := ReservEntry2;
      InsertTempILEFromLast(TempItemLedgerEntry);
    END;

    PROCEDURE GRPH3Purch1SalesItemTracked@35(VAR SalesLine@1000 : Record 37;Item@1001 : Record 27;LocationCode@1002 : Code[10];VariantCode@1003 : Code[10];InvoicePurchase@1004 : Boolean;InvoiceSales@1005 : Boolean);
    VAR
      TempItemLedgerEntry@1008 : TEMPORARY Record 32;
      ReservEntry@1006 : Record 337;
      ReservEntry2@1007 : Record 337;
      PurchaseLine@1009 : Record 39;
    BEGIN
      // Purchase 3 times.
      GRPHPurchItemTracked(TempItemLedgerEntry,PurchaseLine,ReservEntry2,Item,LocationCode,VariantCode,InvoicePurchase);
      GRPHPurchItemTracked(TempItemLedgerEntry,PurchaseLine,ReservEntry,Item,LocationCode,VariantCode,InvoicePurchase);
      GRPHPurchItemTracked(TempItemLedgerEntry,PurchaseLine,ReservEntry2,Item,LocationCode,VariantCode,InvoicePurchase);

      // Make the sales for the item tracking in 2nd purchase line
      GRPHSalesItemTracked(TempItemLedgerEntry,SalesLine,ReservEntry,Item,LocationCode,VariantCode,InvoiceSales);
    END;

    PROCEDURE GRPHSplitApplication@51(Item@1004 : Record 27;SalesLine@1006 : Record 37;SalesLineSplit@1007 : Record 37);
    VAR
      TempItemJournalLine@1008 : TEMPORARY Record 83;
      QtyPurch1@1000 : Decimal;
      QtyPurch2@1001 : Decimal;
      QtySales1@1002 : Decimal;
      QtySales2@1003 : Decimal;
    BEGIN
      QtyPurch1 := RandDec(10,20,2);
      QtyPurch2 := RandDec(10,20,2);
      QtySales1 := RandDec(0,QtyPurch1,2);
      QtySales2 := RandDec(QtyPurch1 - QtySales1,QtyPurch1 - QtySales1 + QtyPurch2,2);

      MAKEInbound(Item,QtyPurch1,WORKDATE,TempItemJournalLine);
      MAKEInbound(Item,QtyPurch2,WORKDATE,TempItemJournalLine);

      SHIPSales(SalesLine,Item,QtySales1,WORKDATE);
      SHIPSales(SalesLineSplit,Item,QtySales2,WORKDATE + 1);
    END;

    PROCEDURE GRPHSeveralSplitApplicationWithCosts@75(Item@1000 : Record 27;VAR SalesLine@1011 : Record 37;VAR TempItemJournalLine@1009 : TEMPORARY Record 83;VAR Cost1@1012 : Decimal;VAR Cost2@1015 : Decimal;VAR Cost3@1016 : Decimal);
    VAR
      UnitCost1@1013 : Decimal;
      UnitCost2@1014 : Decimal;
      UnitCost3@1017 : Decimal;
      Qty1@1001 : Decimal;
      Qty2@1002 : Decimal;
      Qty3@1003 : Decimal;
      QtyOut1@1005 : Decimal;
      QtyOut2@1007 : Decimal;
      RemainingQty2@1008 : Decimal;
    BEGIN
      Qty1 := RandDec(10,20,2);
      Qty2 := RandDec(10,20,2);
      Qty3 := RandDec(10,20,2);

      MAKEInbound(Item,Qty1,WORKDATE,TempItemJournalLine);
      UnitCost1 := TempItemJournalLine."Unit Amount";
      MAKEInbound(Item,Qty2,WORKDATE + 1,TempItemJournalLine);
      UnitCost2 := TempItemJournalLine."Unit Amount";
      MAKEInbound(Item,Qty3,WORKDATE + 2,TempItemJournalLine);
      UnitCost3 := TempItemJournalLine."Unit Amount";

      QtyOut1 := Qty1 + RandDec(0,Qty2 / 2,2);
      RemainingQty2 := Qty2 + Qty1 - QtyOut1;
      QtyOut2 := RandDec(0,RemainingQty2,2);

      MAKEOutbound(Item,QtyOut1,WORKDATE + 3,TempItemJournalLine);
      Cost1 := (Qty1 * UnitCost1 + (QtyOut1 - Qty1) * UnitCost2) / QtyOut1;
      MAKEOutbound(Item,QtyOut2,WORKDATE + 4,TempItemJournalLine);
      Cost2 := UnitCost2;

      RemainingQty2 -= QtyOut2;
      SHIPSales(SalesLine,Item,RemainingQty2 + RandDec(0,Qty3,2),WORKDATE + 5);
      Cost3 := (RemainingQty2 * UnitCost2 + (SalesLine.Quantity - RemainingQty2) * UnitCost3) / SalesLine.Quantity;

      TempItemJournalLine.FINDSET;
    END;

    PROCEDURE GRPHSplitJoinApplication@65(Item@1002 : Record 27;VAR SalesLine@1001 : Record 37;VAR SalesLineReturn@1004 : Record 37;VAR TempItemJournalLine@1003 : TEMPORARY Record 83);
    VAR
      Qty@1000 : Decimal;
    BEGIN
      Qty := RandDec(10,20,2);

      MAKEInbound(Item,Qty,WORKDATE,TempItemJournalLine);

      SHIPSales(SalesLine,Item,Qty / 2,WORKDATE);
      POSTSalesLine(SalesLine,TRUE,TRUE);

      RECEIVESalesReturn(SalesLineReturn,SalesLine,WORKDATE);
      SHIPSales(SalesLine,Item,Qty,WORKDATE);
    END;

    PROCEDURE GRPHSeveralSplitApplication@76(Item@1000 : Record 27;VAR SalesLine@1011 : Record 37;VAR TempItemJournalLine@1008 : TEMPORARY Record 83);
    VAR
      Unused@1001 : Decimal;
    BEGIN
      GRPHSeveralSplitApplicationWithCosts(Item,SalesLine,TempItemJournalLine,Unused,Unused,Unused);
    END;

    PROCEDURE GRPHSalesOnly@54(Item@1000 : Record 27;VAR SalesLine@1001 : Record 37);
    BEGIN
      SHIPSales(SalesLine,Item,RandDec(10,20,2),WORKDATE);
    END;

    PROCEDURE GRPHApplyInboundToUnappliedOutbound@52(VAR Item@1000 : Record 27;VAR SalesLine@1002 : Record 37);
    VAR
      TempItemJournalLine@1006 : TEMPORARY Record 83;
      QtyOut@1003 : Decimal;
      QtyIn1@1004 : Decimal;
      QtyIn2@1005 : Decimal;
    BEGIN
      QtyOut := RandDec(10,20,2);
      QtyIn1 := RandDec(0,QtyOut / 2,2);
      QtyIn2 := QtyOut - QtyIn1 + RandDec(0,10,2);

      SHIPSales(SalesLine,Item,QtyOut,WORKDATE);

      MAKEInbound(Item,QtyIn1,WORKDATE - 1,TempItemJournalLine);
      MAKEInbound(Item,QtyIn2,WORKDATE - 2,TempItemJournalLine);
    END;

    PROCEDURE GRPHSimpleApplication@66(Item@1000 : Record 27;VAR SalesLine@1002 : Record 37;VAR TempItemJournalLine@1001 : TEMPORARY Record 83);
    VAR
      QtyIn@1004 : Decimal;
    BEGIN
      QtyIn := RandDec(10,20,2);
      MAKEInbound(Item,QtyIn,WORKDATE,TempItemJournalLine);
      SHIPSales(SalesLine,Item,RandDec(0,QtyIn,2),WORKDATE + 1);
    END;

    PROCEDURE GRPHSalesReturnOnly@53(VAR Item@1000 : Record 27;VAR ReturnReceiptLine@1001 : Record 6661);
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",RandDec(10,20,2));
      COMMIT;

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      ReturnReceiptLine.SETFILTER("No.",Item."No.");
      ReturnReceiptLine.FINDLAST;
    END;

    PROCEDURE GRPHSalesFromReturnReceipts@55(VAR Item@1000 : Record 27;VAR SalesLine@1006 : Record 37);
    VAR
      ReturnReceiptLine1@1001 : Record 6661;
      ReturnReceiptLine2@1003 : Record 6661;
    BEGIN
      GRPHSalesReturnOnly(Item,ReturnReceiptLine1);
      GRPHSalesReturnOnly(Item,ReturnReceiptLine2);
      SHIPSales(SalesLine,Item,ReturnReceiptLine1.Quantity + RandDec(0,ReturnReceiptLine2.Quantity,2),WORKDATE);
    END;

    PROCEDURE InsertTempILEFromLast@28(VAR TempItemLedgerEntry@1001 : TEMPORARY Record 32);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.FINDLAST;
      TempItemLedgerEntry := ItemLedgerEntry;
      TempItemLedgerEntry.INSERT;
    END;

    PROCEDURE CHECKValueEntry@29(VAR RefValueEntry@1002 : Record 5802;ValueEntry@1001 : Record 5802);
    BEGIN
      ValueEntry.TESTFIELD("Cost Amount (Expected)",RefValueEntry."Cost Amount (Expected)");
      ValueEntry.TESTFIELD("Cost Amount (Actual)",RefValueEntry."Cost Amount (Actual)");
      ValueEntry.TESTFIELD("Valued Quantity",RefValueEntry."Valued Quantity");
      ValueEntry.TESTFIELD("Cost per Unit",RefValueEntry."Cost per Unit");
      ValueEntry.TESTFIELD("Valuation Date",RefValueEntry."Valuation Date");
      ValueEntry.TESTFIELD("Entry Type",RefValueEntry."Entry Type");
      ValueEntry.TESTFIELD("Variance Type",RefValueEntry."Variance Type");
    END;

    PROCEDURE CHECKItemLedgerEntry@32(VAR RefItemLedgerEntry@1001 : Record 32);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        RefItemLedgerEntry.FINDSET;
        SETRANGE("Item No.",RefItemLedgerEntry."Item No.");
        SETRANGE("Location Code",RefItemLedgerEntry."Location Code");
        SETRANGE("Variant Code",RefItemLedgerEntry."Variant Code");
        FINDSET;
        REPEAT
          TESTFIELD("Cost Amount (Expected)",RefItemLedgerEntry."Cost Amount (Expected)");
          TESTFIELD("Cost Amount (Actual)",RefItemLedgerEntry."Cost Amount (Actual)");
          TESTFIELD("Remaining Quantity",RefItemLedgerEntry."Remaining Quantity");
          TESTFIELD("Invoiced Quantity",RefItemLedgerEntry."Invoiced Quantity");
          TESTFIELD("Applies-to Entry",RefItemLedgerEntry."Applies-to Entry");
          RefItemLedgerEntry.NEXT;
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE RandDec@56(Min@1000 : Decimal;Max@1001 : Decimal;Precision@1002 : Integer) : Decimal;
    VAR
      Min2@1003 : Integer;
      Max2@1004 : Integer;
      Pow@1005 : Integer;
    BEGIN
      Pow := POWER(10,Precision);
      Min2 := ROUND(Min * Pow,1);
      Max2 := ROUND(Max * Pow,1);
      EXIT(ROUND(LibraryRandom.RandDecInRange(Min2,Max2,1) / Pow,1 / Pow));
    END;

    PROCEDURE RandCost@77(Item@1000 : Record 27) : Decimal;
    VAR
      Precision@1001 : Decimal;
    BEGIN
      Precision := LibraryERM.GetAmountRoundingPrecision;
      IF Item."Unit Cost" <> 0 THEN
        EXIT(ROUND(Item."Unit Cost" * RandDec(0,2,5),Precision));
      EXIT(ROUND(RandDec(0,100,5),Precision));
    END;

    LOCAL PROCEDURE SHIPSales@58(VAR SalesLine@1000 : Record 37;Item@1001 : Record 27;Qty@1002 : Decimal;PostingDate@1003 : Date);
    VAR
      SalesHeader@1004 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.MODIFY(TRUE);

      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",Qty);
      SalesLine.VALIDATE("Shipment Date",PostingDate);
      SalesLine.MODIFY(TRUE);

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE RECEIVESalesReturn@59(VAR SalesLineReturn@1000 : Record 37;FromSalesLine@1001 : Record 37;PostingDate@1002 : Date);
    VAR
      SalesHeader@1003 : Record 36;
      SalesShipmentLine@1004 : Record 111;
      CopyDocMgt@1006 : Codeunit 6620;
      LinesNotCopied@1007 : Integer;
      MissingExCostRevLink@1008 : Boolean;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",'');
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.MODIFY(TRUE);

      SalesShipmentLine.SETRANGE("Order No.",FromSalesLine."Document No.");
      SalesShipmentLine.FINDFIRST;
      CopyDocMgt.SetProperties(FALSE,TRUE,FALSE,FALSE,TRUE,TRUE,TRUE);
      CopyDocMgt.CopySalesShptLinesToDoc(
        SalesHeader,SalesShipmentLine,LinesNotCopied,MissingExCostRevLink);

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      SalesLineReturn.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLineReturn.SETRANGE("Document No.",SalesHeader."No.");
      SalesLineReturn.SETRANGE(Type,SalesLineReturn.Type::Item);
      Assert.AreEqual(1,SalesLineReturn.COUNT,TXTUnexpectedLine);
      SalesLineReturn.FINDFIRST;
    END;

    PROCEDURE CHECKCalcInvPost@74(Item@1006 : Record 27;ItemJnlBatch@1008 : Record 233;PostingDate@1005 : Date;CalculatePer@1004 : 'Item Ledger Entry,Item';ByLocation@1003 : Boolean;ByVariant@1002 : Boolean;LocationFilter@1001 : Code[20];VariantFilter@1000 : Code[20]);
    VAR
      TempRefItemJnlLine@1007 : TEMPORARY Record 83;
      ItemJnlLine@1009 : Record 83;
    BEGIN
      // Verify journal lines created by Calculate Inventory Value report
      CreateRefJnlforCalcInvPost(Item,TempRefItemJnlLine,PostingDate,CalculatePer,ByLocation,ByVariant,LocationFilter,VariantFilter);

      ItemJnlLine.SETRANGE("Journal Template Name",ItemJnlBatch."Journal Template Name");
      ItemJnlLine.SETRANGE("Journal Batch Name",ItemJnlBatch.Name);
      ItemJnlLine.SETRANGE("Item No.",Item."No.");

      Assert.AreEqual(TempRefItemJnlLine.COUNT,ItemJnlLine.COUNT,STRSUBSTNO(TXTLineCountMismatch,Item."No."));

      IF CalculatePer = CalculatePer::Item THEN BEGIN
        IF ItemJnlLine.FINDSET THEN
          REPEAT
            TempRefItemJnlLine.SETRANGE("Location Code",ItemJnlLine."Location Code");
            TempRefItemJnlLine.SETRANGE("Variant Code",ItemJnlLine."Variant Code");
            TempRefItemJnlLine.FINDFIRST;
            Assert.AreEqual(
              TempRefItemJnlLine.Quantity,ItemJnlLine.Quantity,
              STRSUBSTNO(TXTIncorrectEntry,TempRefItemJnlLine.FIELDNAME(Quantity),ItemJnlLine."Line No."));
            Assert.AreEqual(TempRefItemJnlLine."Inventory Value (Calculated)",ItemJnlLine."Inventory Value (Calculated)",
              STRSUBSTNO(TXTIncorrectEntry,TempRefItemJnlLine.FIELDNAME("Inventory Value (Calculated)"),ItemJnlLine."Line No."));
          UNTIL ItemJnlLine.NEXT = 0;
      END ELSE BEGIN
        IF ItemJnlLine.FINDSET THEN
          REPEAT
            TempRefItemJnlLine.SETRANGE("Applies-to Entry",ItemJnlLine."Applies-to Entry");
            TempRefItemJnlLine.FINDFIRST;
            Assert.AreEqual(
              TempRefItemJnlLine."Location Code",ItemJnlLine."Location Code",
              STRSUBSTNO(TXTIncorrectEntry,TempRefItemJnlLine.FIELDNAME("Location Code"),ItemJnlLine."Applies-to Entry"));
            Assert.AreEqual(
              TempRefItemJnlLine."Variant Code",ItemJnlLine."Variant Code",
              STRSUBSTNO(TXTIncorrectEntry,TempRefItemJnlLine.FIELDNAME("Variant Code"),ItemJnlLine."Applies-to Entry"));
            Assert.AreEqual(
              TempRefItemJnlLine.Quantity,ItemJnlLine.Quantity,
              STRSUBSTNO(TXTIncorrectEntry,TempRefItemJnlLine.FIELDNAME(Quantity),ItemJnlLine."Applies-to Entry"));
            Assert.AreEqual(
              TempRefItemJnlLine."Inventory Value (Calculated)",ItemJnlLine."Inventory Value (Calculated)",
              STRSUBSTNO(TXTIncorrectEntry,TempRefItemJnlLine.FIELDNAME("Inventory Value (Calculated)"),ItemJnlLine."Applies-to Entry"));
          UNTIL ItemJnlLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateRefJnlforCalcInvPost@73(Item@1000 : Record 27;VAR TempRefItemJnlLine@1007 : TEMPORARY Record 83;PostingDate@1002 : Date;CalculatePer@1013 : 'Item Ledger Entry,Item';ByLocation@1012 : Boolean;ByVariant@1011 : Boolean;LocationFilter@1004 : Code[20];VariantFilter@1003 : Code[20]);
    VAR
      ItemLedgerEntry@1001 : Record 32;
      TempItemLedgerEntry@1008 : TEMPORARY Record 32;
      TempLocation@1005 : TEMPORARY Record 14;
      TempItemVariant@1006 : TEMPORARY Record 5401;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgerEntry.SETRANGE(Positive,TRUE);
      ItemLedgerEntry.SETFILTER("Location Code",LocationFilter);
      ItemLedgerEntry.SETFILTER("Variant Code",VariantFilter);
      ItemLedgerEntry.SETFILTER("Posting Date",'<=%1',PostingDate);
      IF Item."Costing Method" <> Item."Costing Method"::Standard THEN BEGIN
        ItemLedgerEntry.SETRANGE("Completely Invoiced",TRUE);
        ItemLedgerEntry.SETRANGE("Last Invoice Date",0D,PostingDate);
      END;
      IF CalculatePer = CalculatePer::Item THEN BEGIN
        IF LocationFilter <> '' THEN
          ByLocation := TRUE;
        IF VariantFilter <> '' THEN
          ByVariant := TRUE;

        TempLocation.Code := '';
        TempLocation.INSERT;
        TempItemVariant.Code := '';
        TempItemVariant.INSERT;

        IF ItemLedgerEntry.FINDSET THEN
          REPEAT
            TempItemLedgerEntry := ItemLedgerEntry;
            TempItemLedgerEntry.INSERT;
            TempLocation.Code := ItemLedgerEntry."Location Code";
            IF NOT TempLocation.INSERT THEN;
            TempItemVariant.Code := ItemLedgerEntry."Variant Code";
            IF NOT TempItemVariant.INSERT THEN;
          UNTIL ItemLedgerEntry.NEXT = 0;

        IF ByLocation THEN BEGIN
          TempLocation.FINDSET;
          REPEAT
            TempItemLedgerEntry.SETRANGE("Location Code",TempLocation.Code);
            IF ByVariant THEN BEGIN
              TempItemVariant.FINDSET;
              REPEAT
                TempItemLedgerEntry.SETRANGE("Variant Code",TempItemVariant.Code);
                CreateRefJournalLinePerItem(TempItemLedgerEntry,TempRefItemJnlLine,PostingDate,ByLocation,ByVariant);
              UNTIL TempItemVariant.NEXT = 0;
            END ELSE
              CreateRefJournalLinePerItem(TempItemLedgerEntry,TempRefItemJnlLine,PostingDate,ByLocation,ByVariant);
          UNTIL TempLocation.NEXT = 0;
        END ELSE BEGIN
          IF ByVariant THEN BEGIN
            TempItemVariant.FINDSET;
            REPEAT
              TempItemLedgerEntry.SETRANGE("Variant Code",TempItemVariant.Code);
              CreateRefJournalLinePerItem(TempItemLedgerEntry,TempRefItemJnlLine,PostingDate,ByLocation,ByVariant);
            UNTIL TempItemVariant.NEXT = 0;
          END ELSE
            CreateRefJournalLinePerItem(TempItemLedgerEntry,TempRefItemJnlLine,PostingDate,ByLocation,ByVariant);
        END;
      END ELSE BEGIN
        IF ItemLedgerEntry.FINDSET THEN
          REPEAT
            TempItemLedgerEntry := ItemLedgerEntry;
            TempItemLedgerEntry.INSERT;
          UNTIL ItemLedgerEntry.NEXT = 0;
        CreateRefJournalLinePerILE(TempItemLedgerEntry,TempRefItemJnlLine,PostingDate);
      END;
    END;

    LOCAL PROCEDURE CreateRefJournalLinePerItem@72(VAR TempItemLedgerEntry@1000 : TEMPORARY Record 32;VAR TempRefItemJnlLine@1001 : TEMPORARY Record 83;PostingDate@1005 : Date;ByLocation@1006 : Boolean;ByVariant@1007 : Boolean);
    VAR
      OutboundItemLedgerEntry@1009 : Record 32;
      ItemApplicationEntry@1004 : Record 339;
      RefQuantity@1002 : Decimal;
      RefCostAmount@1003 : Decimal;
    BEGIN
      IF TempItemLedgerEntry.FINDSET THEN
        REPEAT
          RefQuantity += TempItemLedgerEntry.Quantity;
          RefCostAmount += CalculateCostAtDate(TempItemLedgerEntry."Entry No.",PostingDate);
          ItemApplicationEntry.SETRANGE("Inbound Item Entry No.",TempItemLedgerEntry."Entry No.");
          ItemApplicationEntry.SETFILTER("Posting Date",'<=%1',PostingDate);
          IF ItemApplicationEntry.FINDSET THEN
            REPEAT
              IF (ItemApplicationEntry."Outbound Item Entry No." <> 0) AND (ItemApplicationEntry.Quantity < 0) THEN BEGIN
                OutboundItemLedgerEntry.GET(ItemApplicationEntry."Outbound Item Entry No.");
                RefQuantity += ItemApplicationEntry.Quantity;
                RefCostAmount += CalculateCostAtDate(OutboundItemLedgerEntry."Entry No.",PostingDate) /
                  OutboundItemLedgerEntry.Quantity * ItemApplicationEntry.Quantity;
              END;
            UNTIL ItemApplicationEntry.NEXT = 0;
        UNTIL TempItemLedgerEntry.NEXT = 0;

      IF RefQuantity = 0 THEN
        EXIT;

      TempRefItemJnlLine."Line No." += 10000;
      TempRefItemJnlLine."Item No." := TempItemLedgerEntry."Item No.";
      IF ByLocation THEN
        TempRefItemJnlLine."Location Code" := TempItemLedgerEntry."Location Code";
      IF ByVariant THEN
        TempRefItemJnlLine."Variant Code" := TempItemLedgerEntry."Variant Code";
      TempRefItemJnlLine.Quantity := RefQuantity;
      TempRefItemJnlLine."Inventory Value (Calculated)" := ROUND(RefCostAmount,LibraryERM.GetAmountRoundingPrecision);
      TempRefItemJnlLine.INSERT;
    END;

    LOCAL PROCEDURE CreateRefJournalLinePerILE@71(VAR TempItemLedgerEntry@1000 : TEMPORARY Record 32;VAR TempRefItemJnlLine@1001 : TEMPORARY Record 83;PostingDate@1005 : Date);
    VAR
      ItemApplicationEntry@1004 : Record 339;
    BEGIN
      IF TempItemLedgerEntry.FINDSET THEN
        REPEAT
          TempItemLedgerEntry.CALCFIELDS("Cost Amount (Expected)","Cost Amount (Actual)","Cost Amount (Non-Invtbl.)");
          ItemApplicationEntry.SETRANGE("Inbound Item Entry No.",TempItemLedgerEntry."Entry No.");
          ItemApplicationEntry.SETFILTER("Posting Date",'<=%1',PostingDate);
          ItemApplicationEntry.CALCSUMS(Quantity);

          IF ItemApplicationEntry.Quantity > 0 THEN BEGIN
            TempRefItemJnlLine."Line No." += 10000;
            TempRefItemJnlLine."Item No." := TempItemLedgerEntry."Item No.";
            TempRefItemJnlLine."Location Code" := TempItemLedgerEntry."Location Code";
            TempRefItemJnlLine."Variant Code" := TempItemLedgerEntry."Variant Code";

            TempRefItemJnlLine.Quantity := ItemApplicationEntry.Quantity;
            TempRefItemJnlLine."Inventory Value (Calculated)" :=
              ROUND(
                CalculateCostAtDate(TempItemLedgerEntry."Entry No.",PostingDate) /
                TempItemLedgerEntry.Quantity * ItemApplicationEntry.Quantity,LibraryERM.GetAmountRoundingPrecision);
            TempRefItemJnlLine."Applies-to Entry" := TempItemLedgerEntry."Entry No.";
            TempRefItemJnlLine.INSERT;
          END;
        UNTIL TempItemLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CalculateCostAtDate@70(ItemLedgerEntryNo@1000 : Integer;PostingDate@1002 : Date) : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
    BEGIN
      ValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
      ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgerEntryNo);
      ValueEntry.SETRANGE("Valuation Date",0D,PostingDate);
      ValueEntry.CALCSUMS("Cost Amount (Actual)","Cost Amount (Expected)");
      EXIT(ValueEntry."Cost Amount (Actual)" + ValueEntry."Cost Amount (Expected)");
    END;

    PROCEDURE ExecutePostRevalueInboundILE@60(Item@1002 : Record 27;VAR TempItemLedgerEntry@1004 : TEMPORARY Record 32;Factor@1005 : Decimal);
    VAR
      ItemJnlBatch@1001 : Record 233;
      ItemJnlLine@1000 : Record 83;
      EntryNo@1003 : Integer;
    BEGIN
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');
      LibraryCosting.CheckAdjustment(Item);

      LibraryInventory.CreateItemJournalBatchByType(ItemJnlBatch,ItemJnlBatch."Template Type"::Revaluation);
      LibraryInventory.MakeItemJournalLine(ItemJnlLine,ItemJnlBatch,Item,WORKDATE,ItemJnlLine."Entry Type"::Purchase,0);
      TempItemLedgerEntry.FINDFIRST;
      EntryNo := TempItemLedgerEntry."Entry No.";
      ItemJnlLine.VALIDATE("Applies-to Entry",EntryNo);
      ItemJnlLine.VALIDATE("Inventory Value (Revalued)",ItemJnlLine."Inventory Value (Revalued)" * Factor);
      ItemJnlLine.INSERT;

      LibraryInventory.PostItemJournalBatch(ItemJnlBatch);
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');
    END;

    PROCEDURE CalculateInventoryValueRun@57(VAR ItemJnlBatch@1000 : Record 233;VAR Item@1001 : Record 27;PostingDate@1003 : Date;CalculatePer@1009 : Option;ByLocation@1008 : Boolean;ByVariant@1007 : Boolean;UpdStdCost@1006 : Boolean;CalcBase@1005 : Option;ShowDialog@1004 : Boolean;LocationFilter@1011 : Code[20];VariantFilter@1012 : Code[20]);
    VAR
      RevalueItem@1014 : Record 27;
      ItemJournalLine@1013 : Record 83;
      CalculateInventoryValue@1002 : Report 5899;
      DocumentNo@1010 : Code[20];
    BEGIN
      LibraryInventory.CreateItemJournalBatchByType(ItemJnlBatch,ItemJnlBatch."Template Type"::Revaluation);
      DocumentNo := LibraryUtility.GenerateRandomCode(ItemJournalLine.FIELDNO("Document No."),DATABASE::"Item Journal Line");
      ItemJournalLine.VALIDATE("Journal Template Name",ItemJnlBatch."Journal Template Name");
      ItemJournalLine.VALIDATE("Journal Batch Name",ItemJnlBatch.Name);
      Item.SETFILTER("Location Filter",LocationFilter);
      Item.SETFILTER("Variant Filter",VariantFilter);
      CalculateInventoryValue.USEREQUESTPAGE(FALSE);
      CalculateInventoryValue.SetItemJnlLine(ItemJournalLine);
      RevalueItem.COPY(Item);
      IF Item."No." <> '' THEN
        RevalueItem.SETRANGE("No.",Item."No.");
      CalculateInventoryValue.SETTABLEVIEW(RevalueItem);
      CalculateInventoryValue.InitializeRequest(
        PostingDate,DocumentNo,TRUE,CalculatePer,ByLocation,ByVariant,UpdStdCost,CalcBase,ShowDialog);
      CalculateInventoryValue.RUNMODAL;
    END;

    PROCEDURE ModifyPostRevaluation@78(VAR ItemJnlBatch@1000 : Record 233;Factor@1004 : Decimal);
    VAR
      ItemJnlLine@1001 : Record 83;
    BEGIN
      ItemJnlLine.SETRANGE("Journal Template Name",ItemJnlBatch."Journal Template Name");
      ItemJnlLine.SETRANGE("Journal Batch Name",ItemJnlBatch.Name);
      IF ItemJnlLine.FINDSET THEN
        REPEAT
          ItemJnlLine.VALIDATE("Inventory Value (Revalued)",
            ROUND(ItemJnlLine."Inventory Value (Revalued)" * Factor,LibraryERM.GetAmountRoundingPrecision));
          ItemJnlLine.MODIFY;
        UNTIL ItemJnlLine.NEXT = 0;
      LibraryInventory.PostItemJournalBatch(ItemJnlBatch);
    END;

    PROCEDURE ModifyAppliesToPostRevaluation@106(VAR ItemJnlBatch@1000 : Record 233;Factor@1004 : Decimal;AppliesToEntry@1002 : Integer);
    VAR
      ItemJnlLine@1001 : Record 83;
    BEGIN
      ItemJnlLine.SETRANGE("Journal Template Name",ItemJnlBatch."Journal Template Name");
      ItemJnlLine.SETRANGE("Journal Batch Name",ItemJnlBatch.Name);
      IF ItemJnlLine.FINDSET THEN
        REPEAT
          ItemJnlLine.VALIDATE("Inventory Value (Revalued)",
            ROUND(ItemJnlLine."Inventory Value (Revalued)" * Factor,LibraryERM.GetAmountRoundingPrecision));
          ItemJnlLine.VALIDATE("Applies-to Entry",AppliesToEntry);
          ItemJnlLine.MODIFY;
        UNTIL ItemJnlLine.NEXT = 0;
      LibraryInventory.PostItemJournalBatch(ItemJnlBatch);
    END;

    LOCAL PROCEDURE MAKEXBound@663(Item@1000 : Record 27;Qty@1001 : Decimal;Date@1003 : Date;EntryType@1006 : Option;VAR TempItemJournalLine@1005 : TEMPORARY Record 83);
    VAR
      ItemJournalTemplate@1007 : Record 82;
      ItemJournalBatch@1004 : Record 233;
      ItemJournalLine@1002 : Record 83;
    BEGIN
      LibraryInventory.CreateItemJournalBatchByType(ItemJournalBatch,ItemJournalTemplate.Type::Item);
      LibraryInventory.MakeItemJournalLine(ItemJournalLine,ItemJournalBatch,Item,Date,EntryType,Qty);
      ItemJournalLine.INSERT(TRUE);
      ItemJournalLine.VALIDATE("Posting Date",Date);
      ItemJournalLine.VALIDATE("Unit Amount",RandCost(Item));
      ItemJournalLine.MODIFY(TRUE);

      TempItemJournalLine := ItemJournalLine;
      TempItemJournalLine.INSERT;

      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
    END;

    LOCAL PROCEDURE MAKEInbound@68(Item@1000 : Record 27;Qty@1001 : Decimal;Date@1003 : Date;VAR TempItemJournalLine@1005 : TEMPORARY Record 83);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      MAKEXBound(Item,Qty,Date,ItemJournalLine."Entry Type"::Purchase,TempItemJournalLine);
    END;

    LOCAL PROCEDURE MAKEOutbound@67(Item@1000 : Record 27;Qty@1001 : Decimal;Date@1003 : Date;VAR TempItemJournalLine@1005 : TEMPORARY Record 83);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      MAKEXBound(Item,Qty,Date,ItemJournalLine."Entry Type"::Sale,TempItemJournalLine);
    END;

    PROCEDURE POSTSalesLine@64(SalesLine@1000 : Record 37;Ship@1002 : Boolean;Invoice@1003 : Boolean);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.PostSalesDocument(SalesHeader,Ship,Invoice);
    END;

    PROCEDURE Minimum@47(Value1@1000 : Decimal;Value2@1001 : Decimal) : Decimal;
    BEGIN
      IF Value1 < Value2 THEN
        EXIT(Value1);

      EXIT(Value2);
    END;

    PROCEDURE RevaluationJournalCalcInventory@107(VAR ItemJournalBatch@1000 : Record 233;VAR Item@1001 : Record 27;NewPostingDate@1002 : Date;NewDocNo@1003 : Code[20];NewCalculatePer@1004 : Option;NewByLocation@1005 : Boolean;NewByVariant@1006 : Boolean;NewUpdStdCost@1007 : Boolean;NewCalcBase@1008 : Option);
    VAR
      TmpItem@1009 : Record 27;
      ItemJournalLine@1010 : Record 83;
      CalculateInventoryValue@1011 : Report 5899;
      ItemJnlMgt@1012 : Codeunit 240;
      JnlSelected@1013 : Boolean;
    BEGIN
      COMMIT;
      CalculateInventoryValue.InitializeRequest(NewPostingDate,NewDocNo,TRUE,NewCalculatePer,NewByLocation,NewByVariant,
        NewUpdStdCost,NewCalcBase,TRUE);

      LibraryInventory.CreateItemJournalBatchByType(ItemJournalBatch,ItemJournalBatch."Template Type"::Revaluation);

      ItemJournalLine.INIT;
      ItemJnlMgt.TemplateSelection(PAGE::"Revaluation Journal",3,FALSE,ItemJournalLine,JnlSelected); // 3 = FormTemplate::Revaluation
      ItemJnlMgt.OpenJnl(ItemJournalBatch.Name,ItemJournalLine);

      ItemJournalLine.VALIDATE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.VALIDATE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.SetUpNewLine(ItemJournalLine);
      CalculateInventoryValue.SetItemJnlLine(ItemJournalLine);

      IF Item.HASFILTER THEN
        TmpItem.COPYFILTERS(Item)
      ELSE BEGIN
        Item.GET(Item."No.");
        TmpItem.SETRANGE("No.",Item."No.");
      END;
      CalculateInventoryValue.SETTABLEVIEW(TmpItem);
      CalculateInventoryValue.USEREQUESTPAGE(FALSE);
      CalculateInventoryValue.RUNMODAL;
    END;

    LOCAL PROCEDURE SetVendorDocNo@31(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      PurchaseHeader."Vendor Invoice No." := LibraryUtility.GenerateGUID;
      PurchaseHeader."Vendor Cr. Memo No." := LibraryUtility.GenerateGUID;
      PurchaseHeader.MODIFY;
    END;

    BEGIN
    END.
  }
}

