OBJECT Codeunit 143007 Service Tax Report Helper
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ParamsGenJnlLine@1500003 : Record 81;
      Assert@1500009 : Codeunit 130000;
      LibraryReportDataset@1500001 : Codeunit 131007;
      ReverseServiceTaxHelper@1500002 : Codeunit 143006;
      ClosingBalanceErr@1500006 : TextConst 'ENU=Wrong closing balance reported.';
      CreditAvailedErr@1500005 : TextConst 'ENU=Wrong credit availed reported.';
      CreditUsedNotZeroErr@1500004 : TextConst 'ENU=Credit Used should be zero.';
      OpeningBalanceNotZeroErr@1500008 : TextConst 'ENU=Opening Balance should be zero.';
      ServTaxCreditTakenReceivedErr@1500007 : TextConst 'ENU=Incorrect amount for Service Tax Credit Taken/Received';
      WrongRowCountErr@1500010 : TextConst 'ENU=Wrong row count.';
      PrintDetails@1500011 : Boolean;

    PROCEDURE AssertRowCount@1500111(ExpectedRowCount@1500000 : Integer);
    BEGIN
      Assert.AreEqual(ExpectedRowCount,LibraryReportDataset.RowCount,WrongRowCountErr);
    END;

    LOCAL PROCEDURE CalcServiceTaxAmounts@1500013(VAR InvGenJournalLine@1500002 : Record 81;VAR CrMemoGenJournalLine@1500001 : Record 81);
    VAR
      ServiceTaxSetup@1500000 : Record 16472;
    BEGIN
      ServiceTaxSetup.FindOnDate(InvGenJournalLine."Service Tax Group Code",InvGenJournalLine."Posting Date");
      InvGenJournalLine."Service Tax Amount" :=
        ReverseServiceTaxHelper.CalculateServTaxTotal(InvGenJournalLine.Amount,ServiceTaxSetup);
      CrMemoGenJournalLine."Service Tax Amount" :=
        ReverseServiceTaxHelper.CalculateServTaxTotal(CrMemoGenJournalLine.Amount,ServiceTaxSetup);
    END;

    PROCEDURE FindCurrentRowValueDecimal@1500093(ElementName@1500000 : Text) CurrentDecimalValue : Decimal;
    VAR
      Variant@1500001 : Variant;
    BEGIN
      LibraryReportDataset.FindCurrentRowValue(ElementName,Variant);
      CurrentDecimalValue := Variant;
    END;

    PROCEDURE GetFullTaxAmount@1500098(AmountName@1500000 : Text;ECessName@1500001 : Text;SHECessName@1500002 : Text) : Decimal;
    VAR
      Amount@1500003 : Decimal;
      ECess@1500004 : Decimal;
      SHECess@1500005 : Decimal;
    BEGIN
      Amount := FindCurrentRowValueDecimal(AmountName);
      ECess := FindCurrentRowValueDecimal(ECessName);
      SHECess := FindCurrentRowValueDecimal(SHECessName);
      EXIT(Amount + ECess + SHECess);
    END;

    PROCEDURE LoadDataSetFile@1500408();
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
    END;

    PROCEDURE RunReportInputServiceDetails@1500011(GenJournalLine@1500000 : Record 81);
    BEGIN
      ParamsGenJnlLine := GenJournalLine;
      REPORT.RUN(REPORT::"Input Service Details");
    END;

    PROCEDURE RunReportServiceTaxCreditRegister@1500010(GenJournalLine@1500000 : Record 81;NewPrintDetails@1500001 : Boolean);
    BEGIN
      ParamsGenJnlLine := GenJournalLine;
      PrintDetails := NewPrintDetails;
      REPORT.RUN(REPORT::"Service Tax Credit Register");
    END;

    PROCEDURE RunReportServiceTaxRegister@1500008(GenJournalLine@1500000 : Record 81);
    BEGIN
      ParamsGenJnlLine := GenJournalLine;
      REPORT.RUN(REPORT::"Service Tax Register");
    END;

    PROCEDURE VerifyInputServiceDetails@1500021(BaseAmount1@1500000 : Decimal;BaseAmount2@1500001 : Decimal;DocNo1@1500002 : Code[20];DocNo2@1500003 : Code[20];ServiceTaxSetup@1500004 : Record 16472);
    VAR
      ServiceTax@1500007 : ARRAY [2] OF Decimal;
      ECess@1500006 : ARRAY [2] OF Decimal;
      SHECess@1500005 : ARRAY [2] OF Decimal;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;

      ServiceTax[1] := ReverseServiceTaxHelper.CalculateServTax(BaseAmount1,ServiceTaxSetup);
      ECess[1] := ReverseServiceTaxHelper.CalculateECess(BaseAmount1,ServiceTaxSetup);
      SHECess[1] := ReverseServiceTaxHelper.CalculateSHECess(BaseAmount1,ServiceTaxSetup);

      ServiceTax[2] := ReverseServiceTaxHelper.CalculateServTax(BaseAmount2,ServiceTaxSetup);
      ECess[2] := ReverseServiceTaxHelper.CalculateECess(BaseAmount2,ServiceTaxSetup);
      SHECess[2] := ReverseServiceTaxHelper.CalculateSHECess(BaseAmount2,ServiceTaxSetup);

      LibraryReportDataset.GetLastRow;
      LibraryReportDataset.AssertCurrentRowValue(
        'CreditTaken',ServiceTax[1] + ECess[1] + SHECess[1] + ServiceTax[2] + ECess[2] + SHECess[2]);
      LibraryReportDataset.AssertCurrentRowValue('CreditUtilized',0);
      LibraryReportDataset.AssertCurrentRowValue('OpeningBalance',0);
      LibraryReportDataset.AssertCurrentRowValue(
        'ClosingBalance',ServiceTax[1] + ECess[1] + SHECess[1] + ServiceTax[2] + ECess[2] + SHECess[2]);

      LibraryReportDataset.SetRange('STEntry__Document_No__',DocNo1);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue(
        'Service_Tax_Entry_Details__Service_Tax_Entry_Details___Service_Tax_Amount_',ServiceTax[1]);
      LibraryReportDataset.AssertCurrentRowValue(
        'Service_Tax_Entry_Details__Service_Tax_Entry_Details___Service_Tax_eCess_Amount_',ECess[1]);
      LibraryReportDataset.AssertCurrentRowValue(
        'Service_Tax_Entry_Details__Service_Tax_Entry_Details___Service_Tax_SHE_Cess_Amount_',SHECess[1]);
      LibraryReportDataset.SetRange('STEntry__Document_No__',DocNo2);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue(
        'Service_Tax_Entry_Details__Service_Tax_Entry_Details___Service_Tax_Amount_',ServiceTax[2]);
      LibraryReportDataset.AssertCurrentRowValue(
        'Service_Tax_Entry_Details__Service_Tax_Entry_Details___Service_Tax_eCess_Amount_',ECess[2]);
      LibraryReportDataset.AssertCurrentRowValue(
        'Service_Tax_Entry_Details__Service_Tax_Entry_Details___Service_Tax_SHE_Cess_Amount_',SHECess[2]);
    END;

    PROCEDURE VerifyReportIsEmpty@1500330();
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      Assert.AreEqual(0,LibraryReportDataset.RowCount,WrongRowCountErr);
    END;

    PROCEDURE VerifyServTaxCreditRegisterApplication@1500005(ServiceTaxAmount@1500000 : Decimal);
    BEGIN
      LibraryReportDataset.GetNextRow;
      Assert.AreEqual(ServiceTaxAmount,GetFullTaxAmount('CreditAvailed','CreditAvailedECess','CreditAvailedSHECess'),CreditAvailedErr);
      Assert.AreEqual(0,GetFullTaxAmount('OpeningBalance','OpeningBalanceEcess','OpeningBalanceSheCess'),OpeningBalanceNotZeroErr);
      Assert.AreEqual(0,GetFullTaxAmount('CreditUsed','CreditUsedECess','CreditUsedSHECess'),CreditUsedNotZeroErr);
      Assert.AreEqual(
        ServiceTaxAmount,GetFullTaxAmount('ClosingBalance','ClosingBalanceECess','ClosingBalanceSHECess'),ClosingBalanceErr);
    END;

    PROCEDURE VerifyServTaxCreditRegisterAdvPmtInvCreditAvailed@1501001(InvoiceBaseAmount@1500002 : Decimal;InvoiceTaxAmount@1500001 : Decimal;PaymentBaseAmount@1500003 : Decimal;PaymentTaxAmount@1500000 : Decimal);
    BEGIN
      VerifyServTaxCreditRegisterCreditAvailedRow(PaymentBaseAmount,PaymentTaxAmount);
      VerifyServTaxCreditRegisterCreditAvailedRow(InvoiceBaseAmount,InvoiceTaxAmount);
      VerifyServTaxCreditRegisterCreditAvailedRow(-PaymentBaseAmount,-PaymentTaxAmount);
    END;

    PROCEDURE VerifyServTaxCreditRegisterCreditMemoInvCreditAvailed@1500007(InvoiceBaseAmount@1500002 : Decimal;InvoiceTaxAmount@1500001 : Decimal;CreditMemoBaseAmount@1500003 : Decimal;CreditMemoTaxAmount@1500000 : Decimal);
    BEGIN
      VerifyServTaxCreditRegisterCreditAvailedRow(CreditMemoBaseAmount,CreditMemoTaxAmount);
      VerifyServTaxCreditRegisterCreditAvailedRow(InvoiceBaseAmount,InvoiceTaxAmount);
    END;

    PROCEDURE VerifyServTaxCreditRegisterCreditAvailedRow@1500009(BaseAmount@1500002 : Decimal;TaxAmount@1500001 : Decimal);
    BEGIN
      LibraryReportDataset.GetNextRow;

      LibraryReportDataset.AssertCurrentRowValue('STEntryDetails_Amount',BaseAmount + TaxAmount);
      Assert.AreEqual(
        TaxAmount,
        GetFullTaxAmount(
          'STEntryDetails__Service_Tax_Amount_',
          'STEntryDetails__Service_Tax_eCess_Amount_',
          'STEntryDetails__Service_Tax_SHE_Cess_Amount_'),
        ServTaxCreditTakenReceivedErr);
    END;

    PROCEDURE VerifyServTaxCreditRegisterTakenAsSalesCredit@1500006(SalesInvoiceNo@1500002 : Code[20];FullServiceTaxAmount@1500000 : Decimal);
    VAR
      ServiceTaxEntryDetails@1500001 : Record 16474;
    BEGIN
      ServiceTaxEntryDetails.SETRANGE("Document No.",SalesInvoiceNo);
      ServiceTaxEntryDetails.FINDLAST;

      LibraryReportDataset.LoadDataSetFile;
      Assert.AreEqual(3,LibraryReportDataset.RowCount,WrongRowCountErr);

      LibraryReportDataset.GetNextRow; // Credit Utilized towards tax payment
      Assert.AreEqual(
        FullServiceTaxAmount + ServiceTaxEntryDetails.FullTaxAmount,
        GetFullTaxAmount('ClosingBalance','ClosingBalanceECess','ClosingBalanceSHECess'),ClosingBalanceErr);
      LibraryReportDataset.AssertCurrentRowValue('CreditUsedForSTPmt',-ServiceTaxEntryDetails."Service Tax Amount");
      LibraryReportDataset.AssertCurrentRowValue('CreditUsedForSTPmtECess',-ServiceTaxEntryDetails."Service Tax eCess Amount");
      LibraryReportDataset.AssertCurrentRowValue('CreditUsedForSTPmtSHECess',-ServiceTaxEntryDetails."Service Tax SHE Cess Amount");
      LibraryReportDataset.GetLastRow; // Credit Utilized during period
      LibraryReportDataset.AssertCurrentRowValue('STPmtDetails__Credit_availed_',-ServiceTaxEntryDetails."Service Tax Amount");
      LibraryReportDataset.AssertCurrentRowValue(
        'STPmtDetails__Credit_availed__eCess__',-ServiceTaxEntryDetails."Service Tax eCess Amount");
      LibraryReportDataset.AssertCurrentRowValue(
        'STPmtDetails__Credit_availed__SHECess__',-ServiceTaxEntryDetails."Service Tax SHE Cess Amount");
    END;

    PROCEDURE VerifyServTaxCreditRegisterServTaxRegNo@1500012(ServiceTaxRegNo@1500000 : Code[20]);
    BEGIN
      LibraryReportDataset.GetLastRow;
      LibraryReportDataset.AssertCurrentRowValue('ServiceTaxRegNo',ServiceTaxRegNo);
    END;

    PROCEDURE VerifyServTaxCreditRegisterUsedAsExcise@1500004(SalesInvoiceNo@1500000 : Code[20];FullServiceTaxAmount@1500002 : Decimal);
    VAR
      ExciseEntry@1500001 : Record 13712;
    BEGIN
      ExciseEntry.SETRANGE("Document No.",SalesInvoiceNo);
      ExciseEntry.FINDLAST;

      LibraryReportDataset.LoadDataSetFile;
      Assert.AreEqual(3,LibraryReportDataset.RowCount,WrongRowCountErr);

      LibraryReportDataset.GetNextRow; // Credit Utilized towards excise payment
      Assert.AreEqual(
        FullServiceTaxAmount + ExciseEntry."BED Amount" + ExciseEntry."eCess Amount" + ExciseEntry."SHE Cess Amount",
        GetFullTaxAmount('ClosingBalance','ClosingBalanceECess','ClosingBalanceSHECess'),ClosingBalanceErr);
      LibraryReportDataset.AssertCurrentRowValue('CreditUsedForExcPmt',-ExciseEntry."BED Amount");
      LibraryReportDataset.AssertCurrentRowValue('CreditUsedForExcPmtECess',-ExciseEntry."eCess Amount");
      LibraryReportDataset.AssertCurrentRowValue('CreditUsedForExcPmtSHECess',-ExciseEntry."SHE Cess Amount");
      LibraryReportDataset.GetLastRow; // Credit Utilized during period
      LibraryReportDataset.AssertCurrentRowValue('STasExciseUtilisation2__ST_as_Excise_Utilisation_',-ExciseEntry."BED Amount");
      LibraryReportDataset.AssertCurrentRowValue(
        'STasExciseUtilisation2__ST_eCess_as_Excise_Utilisation_',-ExciseEntry."eCess Amount");
      LibraryReportDataset.AssertCurrentRowValue(
        'STasExciseUtilisation2__ST_SHECess_Excise_Utilisation_',-ExciseEntry."SHE Cess Amount");
    END;

    LOCAL PROCEDURE VerifyServTaxRegisterDetailsEntry@1500127(DocumentNo@1500002 : Code[20];BaseAmount@1500000 : Decimal;TaxAmount@1500001 : Decimal);
    BEGIN
      LibraryReportDataset.AssertCurrentRowValue('Service_Tax_Entry__Document_No__',DocumentNo);
      LibraryReportDataset.AssertCurrentRowValue('Service_Tax_Entry_Details__Base_Amount_',BaseAmount);
      LibraryReportDataset.AssertCurrentRowValue(
        'Service_Tax_Amount_____Service_Tax_eCess_Amount_____Service_Tax_SHE_Cess_Amount_',TaxAmount);
    END;

    PROCEDURE VerifyServTaxRegisterInvAppliedToAdvPmtPoT@1500002(GenJournalLine@1500000 : Record 81;PostedDocNo@1500001 : Code[20];InvoiceBaseAmount@1500005 : Decimal;InvoiceTaxAmount@1500004 : Decimal;PaymentBaseAmount@1500003 : Decimal;PaymentTaxAmount@1500002 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      Assert.AreEqual(3,LibraryReportDataset.RowCount,WrongRowCountErr);

      LibraryReportDataset.GetNextRow;
      VerifyServTaxRegisterDetailsEntry(PostedDocNo,InvoiceBaseAmount,InvoiceTaxAmount);
      LibraryReportDataset.GetNextRow;
      VerifyServTaxRegisterDetailsEntry(PostedDocNo,-PaymentBaseAmount,-PaymentTaxAmount);
      LibraryReportDataset.GetNextRow;
      VerifyServTaxRegisterDetailsEntry(GenJournalLine."Document No.",PaymentBaseAmount,PaymentTaxAmount);
    END;

    PROCEDURE VerifyServTaxRegisterCrMAppliedToInvPoT@1500000(InvGenJournalLine@1500001 : Record 81;CrMemoGenJournalLine@1500000 : Record 81);
    BEGIN
      CalcServiceTaxAmounts(InvGenJournalLine,CrMemoGenJournalLine);
      LibraryReportDataset.LoadDataSetFile;
      Assert.AreEqual(2,LibraryReportDataset.RowCount,WrongRowCountErr);

      LibraryReportDataset.GetNextRow;
      VerifyServTaxRegisterDetailsEntry(
        InvGenJournalLine."Document No.",
        InvGenJournalLine.Amount,InvGenJournalLine."Service Tax Amount");
      LibraryReportDataset.GetNextRow;
      VerifyServTaxRegisterDetailsEntry(
        CrMemoGenJournalLine."Document No.",
        -CrMemoGenJournalLine.Amount,-CrMemoGenJournalLine."Service Tax Amount");
    END;

    PROCEDURE VerifyServTaxRegisterCrMAppliedToInvRevChrg@1500001(InvGenJournalLine@1500001 : Record 81;CrMemoGenJournalLine@1500000 : Record 81);
    BEGIN
      CalcServiceTaxAmounts(InvGenJournalLine,CrMemoGenJournalLine);
      LibraryReportDataset.LoadDataSetFile;
      Assert.AreEqual(2,LibraryReportDataset.RowCount,WrongRowCountErr);

      LibraryReportDataset.GetNextRow;
      VerifyServTaxRegisterDetailsEntry(
        InvGenJournalLine."Document No.",
        CrMemoGenJournalLine.Amount,CrMemoGenJournalLine."Service Tax Amount");

      LibraryReportDataset.GetNextRow;
      VerifyServTaxRegisterDetailsEntry(
        CrMemoGenJournalLine."Document No.",
        -CrMemoGenJournalLine.Amount,-CrMemoGenJournalLine."Service Tax Amount");
    END;

    PROCEDURE InputServiceDetailsReportHandler@1500003(VAR InputServiceDetails@1500000 : TestRequestPage 16474);
    BEGIN
      WITH ParamsGenJnlLine DO BEGIN
        InputServiceDetails.FromMonth.SETVALUE(0);
        InputServiceDetails.FromYear.SETVALUE(DATE2DMY("Posting Date",3));
        InputServiceDetails.ToMonth.SETVALUE(11);
        InputServiceDetails.ToYear.SETVALUE(DATE2DMY("Posting Date",3));
        InputServiceDetails.STGroup.SETVALUE("Service Tax Group Code");
        InputServiceDetails.STRegNo.SETVALUE("Service Tax Registration No.");
      END;
      InputServiceDetails.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    PROCEDURE ServTaxCreditRegisterReportHandler@1500174(VAR ServTaxCreditRegister@1500000 : TestRequestPage 16592);
    BEGIN
      WITH ParamsGenJnlLine DO BEGIN
        ServTaxCreditRegister.StartingDate.SETVALUE(CALCDATE('-CY',"Posting Date"));
        ServTaxCreditRegister.EndingDate.SETVALUE(CALCDATE('CY',"Posting Date"));
        ServTaxCreditRegister.STRegistrationNo.SETVALUE("Service Tax Registration No.");
      END;
      ServTaxCreditRegister.PrintDetails.SETVALUE(PrintDetails);
      ServTaxCreditRegister.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    PROCEDURE ServTaxRegisterReportHandler@1500092(VAR ServiceTaxRegister@1500000 : TestRequestPage 16473);
    BEGIN
      WITH ParamsGenJnlLine DO BEGIN
        ServiceTaxRegister.FromMonth.SETVALUE(0);
        ServiceTaxRegister.FromYear.SETVALUE(DATE2DMY("Posting Date",3));
        ServiceTaxRegister.ToMonth.SETVALUE(11);
        ServiceTaxRegister.ToYear.SETVALUE(DATE2DMY("Posting Date",3));
        ServiceTaxRegister.PurchaseSale.SETVALUE("Service Tax Type");
        ServiceTaxRegister.STGroup.SETVALUE("Service Tax Group Code");
        ServiceTaxRegister.STRegNo.SETVALUE("Service Tax Registration No.");
      END;
      ServiceTaxRegister.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    END.
  }
}

