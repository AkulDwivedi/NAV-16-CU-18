OBJECT Codeunit 137402 SCM Costing Batch
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1002 : Codeunit 130000;
      LibraryCosting@1022 : Codeunit 132200;
      LibraryERM@1011 : Codeunit 131300;
      LibraryInventory@1004 : Codeunit 132201;
      LibraryManufacturing@1016 : Codeunit 132202;
      LibraryPurchase@1019 : Codeunit 130512;
      LibrarySales@1020 : Codeunit 130509;
      LibraryUtility@1012 : Codeunit 131000;
      LibraryVariableStorage@1031 : Codeunit 131004;
      LibraryRandom@1003 : Codeunit 130440;
      LibrarySetupStorage@1032 : Codeunit 131009;
      RoundingMethodCode@1026 : Code[10];
      isInitialized@1000 : Boolean;
      BlankDocumentNoError@1014 : TextConst 'ENU=You must specify a %1';
      ValidationError@1005 : TextConst 'ENU=%1 must be %2.';
      ShowError@1013 : Boolean;
      SalesLCY2@1010 : Decimal;
      COGSLCY2@1009 : Decimal;
      NonInvtblCostsLCY2@1008 : Decimal;
      ProfitLCY2@1007 : Decimal;
      ProfitPercentage2@1006 : Decimal;
      FileName@1001 : TextConst 'ENU=%1%2.pdf';
      StandardCostWorksheetMustExist@1017 : TextConst 'ENU=Standard Cost Worksheet must exist.';
      UnknownError@1015 : TextConst 'ENU=Unknown Error.';
      AverageCost@1021 : Decimal;
      IncreaseQuantity@1023 : Decimal;
      DecreaseQuantity@1024 : Decimal;
      CalculationDate@1018 : Date;
      RoundingFactorRef@1029 : 'None,1,1000,1000000';
      Adjust@1028 : 'Item Card,Stockkeeping Unit Card';
      AdjustField@1027 : 'Unit Price,Profit %,Indirect Cost %,Last Direct Cost,Standard Cost';
      AdjustmentFactor@1025 : Integer;
      InvalidColumnCaptionError@1030 : TextConst 'ENU=Period in columns caption were not updated according to the view by filter.';

    [Test]
    [HandlerFunctions(AdjustCostItemEntriesHandler)]
    PROCEDURE ItemLedgerEntryWithAdjustCostItemEntries@1();
    VAR
      Item@1003 : Record 27;
      ItemJournalLine@1001 : Record 83;
      DocumentNo@1005 : Code[20];
      DocumentNo2@1006 : Code[20];
      DocumentNo3@1007 : Code[20];
      Quantity@1002 : Decimal;
      PurchaseUnitAmount@1008 : Decimal;
      PurchaseUnitAmount2@1009 : Decimal;
      SalesUnitAmount@1010 : Decimal;
    BEGIN
      // Validate Item Ledger Entry after running Adjust Cost Item Entries.

      // Setup: Update Sales Receivable and Inventory Setup. Create and post Item Journal Lines.
      Initialize;
      DisableAutomaticCostPosting;

      Quantity := LibraryRandom.RandDec(100,2);  // Use Random Quantity.
      SalesUnitAmount := SetPurchaseAndSaleAmount(PurchaseUnitAmount,PurchaseUnitAmount2);

      // Use Default Costing Method FIFO is required for the Test.
      CreateItem(Item);
      DocumentNo :=
        CreateAndPostItemJournalLine(ItemJournalLine,ItemJournalLine."Entry Type"::Purchase,Item."No.",Quantity,PurchaseUnitAmount);
      DocumentNo2 :=
        CreateAndPostItemJournalLine(ItemJournalLine,ItemJournalLine."Entry Type"::Purchase,Item."No.",Quantity,PurchaseUnitAmount2);
      DocumentNo3 :=
        CreateAndPostItemJournalLine(
          ItemJournalLine,ItemJournalLine."Entry Type"::Sale,Item."No.",Quantity + Quantity / 2,SalesUnitAmount);  // Quantity + Quantity / 2 is required for Adjust Cost Item Entries.

      // Exercise: Run Adjust Cost Item Entries.
      RunAdjustCostItemEntries(Item."No.");
      PostInvtCostToGL;

      // Verify: Verify Item Ledger Entry after running Adjust Cost Item Entries.
      VerifyItemLedgerEntry(
        DocumentNo,ItemJournalLine."Entry Type"::Purchase,Item."No.",Quantity,Quantity * PurchaseUnitAmount,0,FALSE);
      VerifyItemLedgerEntry(
        DocumentNo2,ItemJournalLine."Entry Type"::Purchase,Item."No.",Quantity,Quantity * PurchaseUnitAmount2,0,TRUE);
      VerifyItemLedgerEntry(
        DocumentNo3,ItemJournalLine."Entry Type"::Sale,Item."No.",-(Quantity + Quantity / 2),
        -((Quantity * PurchaseUnitAmount) + (Quantity / 2 * PurchaseUnitAmount2)),(Quantity + Quantity / 2) * SalesUnitAmount,FALSE);
    END;

    [Test]
    [HandlerFunctions(AdjustCostItemEntriesHandler)]
    PROCEDURE ValueEntryWithAdjustCostItemEntries@8();
    VAR
      Item@1003 : Record 27;
      ItemJournalLine@1001 : Record 83;
      DocumentNo@1005 : Code[20];
      DocumentNo2@1006 : Code[20];
      DocumentNo3@1010 : Code[20];
      Quantity@1002 : Decimal;
      PurchaseUnitAmount@1009 : Decimal;
      PurchaseUnitAmount2@1008 : Decimal;
      SalesUnitAmount@1007 : Decimal;
    BEGIN
      // Validate Value Entry after running Adjust Cost Item Entries.

      // Setup: Update Sales Receivable and Inventory Setup. Create and post Item Journal Lines.
      Initialize;
      DisableAutomaticCostPosting;

      Quantity := LibraryRandom.RandDec(100,2);  // Use Random Quantity.
      SalesUnitAmount := SetPurchaseAndSaleAmount(PurchaseUnitAmount,PurchaseUnitAmount2);

      // Use Default Costing Method FIFO is required for the Test.
      CreateItem(Item);
      DocumentNo :=
        CreateAndPostItemJournalLine(ItemJournalLine,ItemJournalLine."Entry Type"::Purchase,Item."No.",Quantity,PurchaseUnitAmount);
      DocumentNo2 :=
        CreateAndPostItemJournalLine(ItemJournalLine,ItemJournalLine."Entry Type"::Purchase,Item."No.",Quantity,PurchaseUnitAmount2);
      DocumentNo3 :=
        CreateAndPostItemJournalLine(
          ItemJournalLine,ItemJournalLine."Entry Type"::Sale,Item."No.",Quantity + Quantity / 2,SalesUnitAmount);  // Quantity + Quantity / 2 is required for Adjust Cost Item Entries.

      // Exercise: Run Adjust Cost Item Entries.
      RunAdjustCostItemEntries(Item."No.");
      PostInvtCostToGL;

      // Verify: Verify Value Entry after running Adjust Cost Item Entries.
      VerifyValueEntry(DocumentNo,ItemJournalLine."Entry Type"::Purchase,Item."No.",Quantity,Quantity * PurchaseUnitAmount,0,FALSE);
      VerifyValueEntry(DocumentNo2,ItemJournalLine."Entry Type"::Purchase,Item."No.",Quantity,Quantity * PurchaseUnitAmount2,0,FALSE);
      VerifyValueEntry(
        DocumentNo3,ItemJournalLine."Entry Type"::Sale,Item."No.",-(Quantity + Quantity / 2),
        -((Quantity + Quantity / 2) * PurchaseUnitAmount),(Quantity + Quantity / 2) * SalesUnitAmount,FALSE);
      VerifyValueEntry(
        DocumentNo3,ItemJournalLine."Entry Type"::Sale,Item."No.",0,-Quantity / 2 * (PurchaseUnitAmount2 - PurchaseUnitAmount),0,TRUE);
    END;

    [Test]
    [HandlerFunctions(ItemStatisticsHandler,ItemStatisticsMatrixHandler,AdjustCostItemEntriesHandler)]
    PROCEDURE ItemStatisticsAndItemTurnoverWithAdjustCostItemEntries@10();
    VAR
      Item@1003 : Record 27;
      ItemJournalLine@1001 : Record 83;
      Quantity@1002 : Decimal;
      PurchaseUnitAmount@1010 : Decimal;
      PurchaseUnitAmount2@1009 : Decimal;
      SalesUnitAmount@1008 : Decimal;
    BEGIN
      // Validate Item Statistics And Item Turnover after running Adjust Cost Item Entries.

      // Setup: Update Sales Receivable and Inventory Setup. Create and post Item Journal Lines.
      Initialize;
      DisableAutomaticCostPosting;

      Quantity := LibraryRandom.RandDec(100,2);  // Use Random Quantity.
      SalesUnitAmount := SetPurchaseAndSaleAmount(PurchaseUnitAmount,PurchaseUnitAmount2);

      // Use Default Costing Method FIFO is required for the Test.
      CreateItem(Item);
      CreateAndPostItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::Sale,Item."No.",Quantity + Quantity / 2,SalesUnitAmount);  // Quantity + Quantity / 2 is required for Adjust Cost Item Entries.
      CreateAndPostItemJournalLine(ItemJournalLine,ItemJournalLine."Entry Type"::Purchase,Item."No.",Quantity,PurchaseUnitAmount);
      CreateAndPostItemJournalLine(ItemJournalLine,ItemJournalLine."Entry Type"::Purchase,Item."No.",Quantity,PurchaseUnitAmount2);

      // Exercise: Run Adjust Cost Item Entries.
      RunAdjustCostItemEntries(Item."No.");
      PostInvtCostToGL;

      // Verify: Verify Item Statistics and Turnover after running Adjust Cost Item Entries.
      RunItemStatistics(Item."No.",RoundingFactorRef::None);
      VerifyItemStatistics(Quantity,SalesUnitAmount,PurchaseUnitAmount,PurchaseUnitAmount2,RoundingFactorRef::None);
      VerifyItemTurnover(Item."No.",Quantity,SalesUnitAmount,PurchaseUnitAmount,PurchaseUnitAmount2);
    END;

    [Test]
    [HandlerFunctions(ItemStatisticsHandler,ItemStatisticsMatrixHandler,AdjustCostItemEntriesHandler)]
    PROCEDURE ItemStatisticsWithRoundingFactor1@85();
    VAR
      ItemNo@1006 : Code[20];
      Quantity@1002 : Decimal;
      SalesUnitAmount@1008 : Decimal;
    BEGIN
      // [FEATURE] [UI] [Item Statistics]
      // [SCENARIO 363269] Run Item Statistics with Rounding Factor = "1"
      Initialize;

      // [GIVEN] Turned off Warnings in Sales Receivable Setup, "Automatic Cost Posting"/Adjustment in Inventory Setup
      DisableAutomaticCostPosting;

      // [GIVEN] Sales Item Journal line with Sales Amount = "X"
      CreateItemDataRoundingFactor(ItemNo,Quantity,SalesUnitAmount,1);

      // [WHEN] Run Item Statistics with RoundingFactor::"1"
      RunItemStatistics(ItemNo,RoundingFactorRef::"1");
      // [THEN] Sales Amount = "X on Item Statistics is rounded according to RoundingFactor::"1"
      // [THEN] Profit % on Item Statistics is rounded according to RoundingFactor::"1"
      VerifyItemStatistics(Quantity,SalesUnitAmount,0,0,RoundingFactorRef::"1");
    END;

    [Test]
    [HandlerFunctions(ItemStatisticsHandler,ItemStatisticsMatrixHandler,AdjustCostItemEntriesHandler)]
    PROCEDURE ItemStatisticsWithRoundingFactor1000@141();
    VAR
      ItemNo@1006 : Code[20];
      Quantity@1002 : Decimal;
      SalesUnitAmount@1008 : Decimal;
    BEGIN
      // [FEATURE] [UI] [Item Statistics]
      // [SCENARIO 363269] Run Item Statistics with Rounding Factor = "1000"
      Initialize;

      // [GIVEN] Turned off Warnings in Sales Receivable Setup, "Automatic Cost Posting"/Adjustment in Inventory Setup
      DisableAutomaticCostPosting;

      // [GIVEN] Sales Item Journal line with Sales Amount = "X"
      CreateItemDataRoundingFactor(ItemNo,Quantity,SalesUnitAmount,1000);

      // [WHEN] Run Item Statistics with RoundingFactor::"1000"
      RunItemStatistics(ItemNo,RoundingFactorRef::"1000");
      // [THEN] Sales Amount = "X on Item Statistics is reduced with division by 1000 and rounded to RoundingFactor::"1000"
      // [THEN] Profit % on Item Statistics is rounded according to RoundingFactor::"1000"
      VerifyItemStatistics(Quantity,SalesUnitAmount,0,0,RoundingFactorRef::"1000");
    END;

    [Test]
    [HandlerFunctions(AdjustCostItemEntriesHandler)]
    PROCEDURE GLEntryWithAdjustCostItemEntries@16();
    VAR
      Item@1003 : Record 27;
      ItemJournalLine@1001 : Record 83;
      DocumentNo@1005 : Code[20];
      Quantity@1002 : Decimal;
      PurchaseUnitAmount@1008 : Decimal;
      PurchaseUnitAmount2@1009 : Decimal;
      SalesUnitAmount@1010 : Decimal;
      EntryNo@1000 : Integer;
    BEGIN
      // Validate G/L Entry after running Adjust Cost Item Entries.

      // Setup: Update Sales Receivable and Inventory Setup. Create and post Item Journal Lines.
      Initialize;
      DisableAutomaticCostPosting;

      Quantity := LibraryRandom.RandDec(100,2);  // Use Random Quantity.
      SalesUnitAmount := SetPurchaseAndSaleAmount(PurchaseUnitAmount,PurchaseUnitAmount2);

      // Use Default Costing Method FIFO is required for the Test.
      CreateItem(Item);
      CreateAndPostItemJournalLine(ItemJournalLine,ItemJournalLine."Entry Type"::Purchase,Item."No.",Quantity,PurchaseUnitAmount);
      CreateAndPostItemJournalLine(ItemJournalLine,ItemJournalLine."Entry Type"::Purchase,Item."No.",Quantity,PurchaseUnitAmount2);
      DocumentNo :=
        CreateAndPostItemJournalLine(
          ItemJournalLine,ItemJournalLine."Entry Type"::Sale,Item."No.",Quantity + Quantity / 2,SalesUnitAmount);  // Quantity + Quantity / 2 is required for Adjust Cost Item Entries.

      // Exercise: Run Adjust Cost Item Entries.
      PostInvtCostToGL;
      EntryNo := GetGLEntryNo(DocumentNo);
      RunAdjustCostItemEntries(Item."No.");
      PostInvtCostToGL;

      // Verify: Verify G/L Entry after running Adjust Cost Item Entries.
      VerifyGLEntry(DocumentNo,EntryNo,-Quantity / 2 * (PurchaseUnitAmount2 - PurchaseUnitAmount));
    END;

    [Test]
    [HandlerFunctions(ImplementStandardCostChangeHandler)]
    PROCEDURE ImplementStandardCostChangeError@26();
    VAR
      Item@1000 : Record 27;
      StandardCostWorksheet@1007 : Record 5841;
      ItemJournalLine@1002 : Record 83;
      StandardCostWorksheetName@1001 : Code[10];
    BEGIN
      // Test error occurs on running Implement Standard Cost Change report without Document No.

      // Setup: Create Item and Standard Cost Worksheet Name. Run Suggest Item Standard Cost report.
      Initialize;
      CreateItem(Item);
      StandardCostWorksheetName := CreateStandardCostWorksheetName;
      LibraryCosting.SuggestItemStandardCost(Item,StandardCostWorksheetName,LibraryRandom.RandInt(5),'');  // Use random value for Standard Cost Adjustment Factor.

      // Exercise: Run Implement Standard Cost Change.
      ShowError := TRUE;  // Use global variable for request page handler.
      ASSERTERROR RunImplementStandardCostChange(StandardCostWorksheetName,StandardCostWorksheet.Type::Item,Item."No.");

      // Verify: Verify error message.
      Assert.AreEqual(
        STRSUBSTNO(BlankDocumentNoError,LOWERCASE(ItemJournalLine.FIELDCAPTION("Document No."))),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ImplementStandardCostChangeHandler,MessageHandler)]
    PROCEDURE ImplementStandardCostChange@25();
    VAR
      Item@1000 : Record 27;
      StandardCostWorksheet@1007 : Record 5841;
      MachineCenter@1002 : Record 99000758;
      WorkCenter@1001 : Record 99000754;
      StandardCostWorksheetName@1003 : Code[10];
    BEGIN
      // Test functionality of Implement Standard Cost Change report.

      // Setup: Create Item, Work Center, Machine Center and Standard Cost Worksheet Name. Run Suggest Item Standard Cost and Suggest Work and Machine Center Standard Cost report.
      Initialize;
      CreateItem(Item);
      CreateWorkCenter(WorkCenter);
      CreateMachineCenter(MachineCenter);
      StandardCostWorksheetName := CreateStandardCostWorksheetName;
      LibraryCosting.SuggestItemStandardCost(Item,StandardCostWorksheetName,LibraryRandom.RandInt(5),'');  // Use random value for Standard Cost Adjustment Factor.
      LibraryCosting.SuggestCapacityStandardCost(
        WorkCenter,MachineCenter,StandardCostWorksheetName,LibraryRandom.RandInt(5),'');  // Use random value for Standard Cost Adjustment Factor.

      // Exercise: Run Implement Standard Cost Change.
      RunImplementStandardCostChange(StandardCostWorksheetName,StandardCostWorksheet.Type::Item,Item."No.");
      RunImplementStandardCostChange(StandardCostWorksheetName,StandardCostWorksheet.Type::"Work Center",WorkCenter."No.");
      RunImplementStandardCostChange(StandardCostWorksheetName,StandardCostWorksheet.Type::"Machine Center",MachineCenter."No.");

      // Verify: Verify Standard Cost must be implemented.
      VerifyStandardCostWorksheet(StandardCostWorksheetName,StandardCostWorksheet.Type::Item,Item."No.");
      VerifyStandardCostWorksheet(StandardCostWorksheetName,StandardCostWorksheet.Type::"Work Center",WorkCenter."No.");
      VerifyStandardCostWorksheet(StandardCostWorksheetName,StandardCostWorksheet.Type::"Machine Center",MachineCenter."No.");
    END;

    [Test]
    PROCEDURE SuggestItemStandardCostWithoutRoundingFactor@23();
    BEGIN
      // Test functionality of Suggest Item Standard Cost report without Rounding Factor.

      Initialize;
      SuggestItemStandardCost('');
    END;

    [Test]
    PROCEDURE SuggestItemStandardCostWithRoundingFactor@36();
    VAR
      RoundingMethod@1000 : Record 42;
    BEGIN
      // Test functionality of Suggest Item Standard Cost report with Rounding Factor.

      Initialize;
      RoundingMethod.FINDFIRST;
      SuggestItemStandardCost(RoundingMethod.Code);
    END;

    LOCAL PROCEDURE SuggestItemStandardCost@44(StandardCostRoundingMethod@1004 : Code[10]);
    VAR
      Item@1002 : Record 27;
      StandardCostWorksheet@1001 : Record 5841;
      SuggestItemStandardCost@1005 : Report 5851;
      StandardCostWorksheetName@1000 : Code[10];
      StandardCostAdjustmentFactor@1003 : Integer;
    BEGIN
      // Setup: Create Item and Standard Cost Worksheet Name.
      CreateItem(Item);
      StandardCostWorksheetName := CreateStandardCostWorksheetName;

      // Exercise: Run Suggest Item Standard Cost.
      StandardCostAdjustmentFactor := LibraryRandom.RandInt(5);  // Use random value for Standard Cost Adjustment Factor.
      LibraryCosting.SuggestItemStandardCost(Item,StandardCostWorksheetName,StandardCostAdjustmentFactor,StandardCostRoundingMethod);

      // Verify: Verify New Standard Cost for Item on Standard Cost Worksheet.
      FindStandardCostWorksheet(StandardCostWorksheet,StandardCostWorksheetName,StandardCostWorksheet.Type::Item,Item."No.");
      StandardCostWorksheet.TESTFIELD(
        "New Standard Cost",
        SuggestItemStandardCost.RoundAndAdjustAmt(
          StandardCostWorksheet."Standard Cost",StandardCostRoundingMethod,StandardCostAdjustmentFactor));
    END;

    [Test]
    PROCEDURE SuggestWorkAndMachineCenterStandardCostWithoutRoundingFactor@17();
    BEGIN
      // Test functionality of Suggest Work and Machine Center Standard Cost report without Rounding Factor.

      Initialize;
      SuggestWorkAndMachineCenterStandardCost('');
    END;

    [Test]
    PROCEDURE SuggestWorkAndMachineCenterStandardCostWithRoundingFactor@14();
    VAR
      RoundingMethod@1000 : Record 42;
    BEGIN
      // Test functionality of Suggest Work and Machine Center Standard Cost report with Rounding Factor.

      Initialize;
      RoundingMethod.FINDFIRST;
      SuggestWorkAndMachineCenterStandardCost(RoundingMethod.Code);
    END;

    LOCAL PROCEDURE SuggestWorkAndMachineCenterStandardCost@49(StandardCostRoundingMethod@1005 : Code[10]);
    VAR
      StandardCostWorksheet@1002 : Record 5841;
      MachineCenter@1001 : Record 99000758;
      WorkCenter@1003 : Record 99000754;
      SuggestCapacityStandardCost@1006 : Report 5852;
      StandardCostWorksheetName@1000 : Code[10];
      StandardCostAdjustmentFactor@1004 : Integer;
    BEGIN
      // Setup: Create Work Center, Machine Center and Standard Cost Worksheet Name.
      CreateWorkCenter(WorkCenter);
      CreateMachineCenter(MachineCenter);
      StandardCostWorksheetName := CreateStandardCostWorksheetName;

      // Exercise: Run Implement Standard Cost Change.
      StandardCostAdjustmentFactor := LibraryRandom.RandInt(5);  // Use random value for Standard Cost Adjustment Factor.
      LibraryCosting.SuggestCapacityStandardCost(
        WorkCenter,MachineCenter,StandardCostWorksheetName,StandardCostAdjustmentFactor,StandardCostRoundingMethod);

      // Verify: Verify New Standard Cost for Work Center and Machine Center on Standard Cost Worksheet.
      FindStandardCostWorksheet(
        StandardCostWorksheet,StandardCostWorksheetName,StandardCostWorksheet.Type::"Work Center",WorkCenter."No.");
      StandardCostWorksheet.TESTFIELD(
        "New Standard Cost",
        SuggestCapacityStandardCost.RoundAndAdjustAmt(
          StandardCostWorksheet."Standard Cost",StandardCostRoundingMethod,StandardCostAdjustmentFactor));
      FindStandardCostWorksheet(
        StandardCostWorksheet,StandardCostWorksheetName,StandardCostWorksheet.Type::"Machine Center",MachineCenter."No.");
      StandardCostWorksheet.TESTFIELD(
        "New Standard Cost",
        SuggestCapacityStandardCost.RoundAndAdjustAmt(
          StandardCostWorksheet."Standard Cost",StandardCostRoundingMethod,StandardCostAdjustmentFactor));
    END;

    [Test]
    PROCEDURE StandardCostWorksheetBeforeRollUp@50();
    VAR
      Item@1000 : Record 27;
      StandardCostWorksheetName@1001 : Code[10];
    BEGIN
      // Run Suggest Item Standard Cost report and verify number of Standard Cost Worksheet Lines must not be zero.

      // Setup: Create Standard Cost Worksheet Name.
      Initialize;
      StandardCostWorksheetName := CreateStandardCostWorksheetName;
      CreateItem(Item);

      // Exercise: Run Suggest Item Standard Cost.
      LibraryCosting.SuggestItemStandardCost(Item,StandardCostWorksheetName,LibraryRandom.RandInt(10),'');  // Use random value for Standard Cost Adjustment Factor.

      // Verify: Verify number of Standard Cost Worksheet Lines must not be zero.
      Assert.IsTrue(GetNumberOfStandardCostWorksheetLines(StandardCostWorksheetName) > 0,StandardCostWorksheetMustExist);
    END;

    [Test]
    [HandlerFunctions(RollUpStandardCostHandler,MessageHandler)]
    PROCEDURE StandardCostWorksheetAfterRollUp@48();
    VAR
      Item@1002 : Record 27;
      StandardCostWorksheetName@1001 : Code[10];
      CountRowsBeforeRollup@1000 : Integer;
    BEGIN
      // Roll Up Standard Cost with calculation date workdate and verify some more lines added after Roll Up.

      // Setup: Create Standard Cost Worksheet Name. Run Suggest Item Standard Cost.
      Initialize;
      StandardCostWorksheetName := CreateStandardCostWorksheetName;
      CreateItem(Item);
      LibraryCosting.SuggestItemStandardCost(Item,StandardCostWorksheetName,LibraryRandom.RandInt(10),'');  // Use random value for Standard Cost Adjustment Factor.

      // Exercise: Roll Up Standard Cost with calculation date workdate.
      CountRowsBeforeRollup := GetNumberOfStandardCostWorksheetLines(StandardCostWorksheetName);
      CalculationDate := WORKDATE;  // Use CalculationDate as global for Test Request Page Handler.
      RunRollUpStandardCost(StandardCostWorksheetName);

      // Verify: Verify some more lines added after Roll Up.
      Assert.IsTrue(
        GetNumberOfStandardCostWorksheetLines(StandardCostWorksheetName) > CountRowsBeforeRollup,StandardCostWorksheetMustExist);
    END;

    [Test]
    [HandlerFunctions(RollUpStandardCostHandler,MessageHandler)]
    PROCEDURE RollUpStandardCostAfterDelete@47();
    VAR
      Item@1002 : Record 27;
      StandardCostWorksheetName@1001 : Code[10];
      CountRowsBeforeRollup@1000 : Integer;
    BEGIN
      // Delete all lines on Standard Cost Worksheet. Roll Up Standard Cost with calculation date random day less than workdate and verify some more lines added after Roll Up.

      // Setup: Create Standard Cost Worksheet Name. Run Suggest Item Standard Cost.
      Initialize;
      StandardCostWorksheetName := CreateStandardCostWorksheetName;
      CreateItem(Item);
      LibraryCosting.SuggestItemStandardCost(Item,StandardCostWorksheetName,LibraryRandom.RandInt(10),'');  // Use random value for Standard Cost Adjustment Factor.
      CountRowsBeforeRollup := GetNumberOfStandardCostWorksheetLines(StandardCostWorksheetName);

      // Exercise: Delete all lines on Standard Cost Worksheet. Roll Up Standard Cost with calculation date random day less than workdate.
      DeleteStandardCostWorksheetLines(StandardCostWorksheetName);
      CalculationDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);  // Use CalculationDate as global for Test Request Page Handler.
      RunRollUpStandardCost(StandardCostWorksheetName);

      // Verify: Verify some more lines added after Roll Up.
      Assert.IsTrue(
        GetNumberOfStandardCostWorksheetLines(StandardCostWorksheetName) > CountRowsBeforeRollup,StandardCostWorksheetMustExist);
    END;

    [Test]
    PROCEDURE SuggestItemPriceOnWorksheetWithSalesTypeCustomer@46();
    VAR
      SalesPriceWorksheet@1000 : Record 7023;
    BEGIN
      // Test functionality of Suggest Item Price On Worksheet report with Sales Type as Customer.

      Initialize;
      SuggestItemPriceOnWorksheet(SalesPriceWorksheet."Sales Type"::Customer,CreateCustomer,'');
    END;

    [Test]
    PROCEDURE SuggestItemPriceOnWorksheetWithSalesTypeAllCustomers@45();
    VAR
      SalesPriceWorksheet@1000 : Record 7023;
    BEGIN
      // Test functionality of Suggest Item Price On Worksheet report with Sales Type as All Customers.

      Initialize;
      SuggestItemPriceOnWorksheet(SalesPriceWorksheet."Sales Type"::"All Customers",'',CreateCurrency);
    END;

    [Test]
    PROCEDURE SuggestItemPriceOnWorksheetWithSalesTypeCampaign@42();
    VAR
      SalesPriceWorksheet@1000 : Record 7023;
    BEGIN
      // Test functionality of Suggest Item Price On Worksheet report with Sales Type as Campaign.

      Initialize;
      SuggestItemPriceOnWorksheet(SalesPriceWorksheet."Sales Type"::Campaign,CreateCampaign,CreateCurrency);
    END;

    [Test]
    PROCEDURE SuggestItemPriceOnWorksheetWithSalesTypeCustomerPriceGroup@40();
    VAR
      SalesPriceWorksheet@1000 : Record 7023;
    BEGIN
      // Test functionality of Suggest Item Price On Worksheet report with Sales Type as Customer Price Group.

      Initialize;
      SuggestItemPriceOnWorksheet(SalesPriceWorksheet."Sales Type"::"Customer Price Group",CreateCustomerPriceGroup,CreateCurrency);
    END;

    LOCAL PROCEDURE SuggestItemPriceOnWorksheet@39(SalesType@1003 : Option;SalesCode@1004 : Code[20];CurrencyCode@1005 : Code[10]);
    VAR
      Item@1002 : Record 27;
    BEGIN
      // Setup.
      CreateItem(Item);

      // Exercise: Run Suggest Item Price on Worksheet.
      LibraryCosting.SuggestItemPriceWorksheet2(Item,SalesCode,SalesType,0,LibraryRandom.RandInt(10),CurrencyCode);  // Use random Unit Price Factor and zero Price Lower Limit.

      // Verify: Verify Sales Price Worksheet must exist.
      VerifySalesPriceWorksheet(SalesType,SalesCode,CurrencyCode,Item."No.");
    END;

    [Test]
    [HandlerFunctions(AverageCostCalcOverviewHandler)]
    PROCEDURE AverageCostCalculationWithStandardCostingMethod@60();
    VAR
      Item@1005 : Record 27;
    BEGIN
      // Test Average Cost Calculation Functionality for Costing Method as Standard.

      Initialize;
      AverageCostCalculation(Item."Costing Method"::Standard,LibraryRandom.RandDec(100,2));  // Use random Standard Cost.
    END;

    [Test]
    [HandlerFunctions(AverageCostCalcOverviewHandler)]
    PROCEDURE AverageCostCalculationWithAverageCostingMethod@101();
    VAR
      Item@1005 : Record 27;
    BEGIN
      // Test Average Cost Calculation Functionality for Costing Method as Average.

      Initialize;
      AverageCostCalculation(Item."Costing Method"::Average,0);  // Use 0 for Standard Cost.
    END;

    LOCAL PROCEDURE AverageCostCalculation@61(CostingMethod@1007 : Option;StandardCost@1008 : Decimal);
    VAR
      Item@1005 : Record 27;
      PurchaseLine@1006 : Record 39;
      SalesLine@1003 : Record 37;
      ShowAvgCalcItem@1004 : Codeunit 5803;
    BEGIN
      // Setup: Update Sales and Receivable Setup. Create Item with Costing Method as Standard / Average. Create and post Purchase Order. Create and post Sales Order.
      CreateAndModifyItem(Item,CostingMethod,StandardCost,0);  // Use 0 for Unit Cost.
      CreateAndPostPurchaseDocument(PurchaseLine,Item."No.");
      CreateAndPostSalesDocument(SalesLine,Item."No.");
      AverageCost := Item."Standard Cost";  // Use AverageCost as global for handler.
      IF CostingMethod = Item."Costing Method"::Average THEN
        AverageCost :=
          (PurchaseLine."Line Amount" - (SalesLine.Quantity * PurchaseLine."Direct Unit Cost")) /
          (PurchaseLine.Quantity - SalesLine.Quantity);  // Use AverageCost as global for handler.
      IncreaseQuantity := PurchaseLine.Quantity;  // Use IncreaseQuantity as global for handler.
      DecreaseQuantity := -SalesLine.Quantity;  // Use DecreaseQuantity as global for handler.

      // Exercise: Show Average Cost Adjustment Point.
      ShowAvgCalcItem.DrillDownAvgCostAdjmtPoint(Item);

      // Verify: Verification performed into AverageCostCalcOverviewHandler function.
    END;

    [Test]
    PROCEDURE UpdateUnitCostReportWithOneLevelAndFalseReservations@68();
    VAR
      CalcMethod@1003 : 'One Level,All Levels';
    BEGIN
      // Test to verify that Unit Cost on Production order line changes when we run Update Unit Cost report with One Level Calculation method.

      Initialize;
      UpdateUnitCostReport(CalcMethod::"One Level",FALSE);
    END;

    [Test]
    PROCEDURE UpdateUnitCostReportWithAllLevelsAndTrueReservations@81();
    VAR
      CalcMethod@1000 : 'One Level,All Levels';
    BEGIN
      // Test to verify that Unit Cost on Production order line changes when we run Update Unit Cost report with All Levels Calculation method.

      Initialize;
      UpdateUnitCostReport(CalcMethod::"All Levels",TRUE);
    END;

    LOCAL PROCEDURE UpdateUnitCostReport@63(CalcMethod@1006 : 'One Level,All Levels';UpdateReservations@1003 : Boolean);
    VAR
      Item@1005 : Record 27;
      ProductionBOMLine@1001 : Record 99000772;
      ProductionOrder@1000 : Record 5405;
      ExpectedUnitCost@1008 : Decimal;
      RemainingQuantity@1009 : Decimal;
      ItemNo@1004 : Code[20];
    BEGIN
      // Setup: Create an Item with Production BOM. Create a Released Production Order for the new Item and Refresh it.
      ItemNo := CreateManufacturingItem(ProductionBOMLine);
      Item.GET(ProductionBOMLine."No.");
      CreateAndRefreshProductionOrder(ProductionOrder,ItemNo);

      // Exercise: Run Update Unit Cost report.
      RemainingQuantity := ProductionBOMLine."Quantity per" * ProductionOrder.Quantity;
      ExpectedUnitCost := (RemainingQuantity * Item."Unit Cost") / ProductionOrder.Quantity;
      LibraryCosting.UpdateUnitCost(ProductionOrder,CalcMethod,UpdateReservations);

      // Verify: Unit Cost gets updated based on the Unit Cost of Component Item.
      VerifyUnitCostInProductionOrderLine(ProductionOrder,ExpectedUnitCost);
    END;

    [Test]
    [HandlerFunctions(AdjustCostItemEntriesHandler)]
    PROCEDURE UpdateUnitCostInItemJournalAndAdjustCostItemEntries@66();
    VAR
      ProductionOrder@1007 : Record 5405;
      ProductionBOMLine@1006 : Record 99000772;
      UnitAmount@1000 : Decimal;
      ItemNo@1001 : Code[20];
    BEGIN
      // Test to verify that Unit Cost on Production order line changes when we run Adjust Cost Item Entries batch job after posting Item Journal with updated Unit Cost for Item.

      // Setup: Create an Item with Production BOM. Create Released Production Order and Refresh it. Create and Post Item Journal line with updated Unit Cost.
      Initialize;
      ItemNo := CreateManufacturingItem(ProductionBOMLine);
      CreateAndRefreshProductionOrder(ProductionOrder,ItemNo);
      UnitAmount := CreateAndPostItemJournalLineWithUnitCost(ItemNo);

      // Exercise: Run Adust Cost Item Entries batch job.
      RunAdjustCostItemEntries(ItemNo);

      // Verify: Unit Cost gets updated based on the Unit Cost on Item Journal line.
      VerifyUnitCostInProductionOrderLine(ProductionOrder,UnitAmount);
    END;

    [Test]
    PROCEDURE CopyStandardCostWorksheetReportWithoutAdjustmentFactor@82();
    BEGIN
      // Test functionality of Copy Standard Cost Worksheet report with Adjustment Factor.

      Initialize;
      CopyStandardCostWorksheet('');
    END;

    [Test]
    PROCEDURE CopyStandardCostWorksheetReportCostWithRoundingFactor@80();
    VAR
      RoundingMethod@1000 : Record 42;
    BEGIN
      // Test functionality of Copy Standard Cost Worksheet report with Rounding Factor.

      Initialize;
      RoundingMethod.FINDFIRST;
      CopyStandardCostWorksheet(RoundingMethod.Code);
    END;

    LOCAL PROCEDURE CopyStandardCostWorksheet@79(StandardCostRoundingMethod@1005 : Code[10]);
    VAR
      StandardCostWorksheet@1002 : Record 5841;
      MachineCenter@1001 : Record 99000758;
      WorkCenter@1003 : Record 99000754;
      StandardCostWorksheetName@1000 : Code[10];
      StandardCostWorksheetName2@1007 : Code[10];
    BEGIN
      // Setup: Create Work Center, Machine Center, Standard Cost Worksheet Name and Run Suggest Work And Machine Center Standard Cost Report.
      CreateWorkCenter(WorkCenter);
      CreateMachineCenter(MachineCenter);
      StandardCostWorksheetName := CreateStandardCostWorksheetName;
      LibraryCosting.SuggestCapacityStandardCost(
        WorkCenter,MachineCenter,StandardCostWorksheetName,LibraryRandom.RandInt(5),StandardCostRoundingMethod);  // Use random value for Standard Cost Adjustment Factor.
      StandardCostWorksheetName2 := CreateStandardCostWorksheetName;  // Create new Worksheet Name.

      // Exercise: Run Copy Standard Cost Worksheet Report.
      LibraryCosting.CopyStandardCostWorksheet(StandardCostWorksheetName,StandardCostWorksheetName2);

      // Verify: Verify Lines are copied from Old Worksheet to New Worksheet.
      VerifyCopyStandardCostWorkSheet(StandardCostWorksheetName2,StandardCostWorksheet.Type::"Work Center",WorkCenter."No.");
      VerifyCopyStandardCostWorkSheet(StandardCostWorksheetName2,StandardCostWorksheet.Type::"Machine Center",MachineCenter."No.");
    END;

    [Test]
    PROCEDURE SuggestSalesPriceOnWorksheetWithSalesTypeCustomer@76();
    VAR
      SalesPrice@1000 : Record 7002;
    BEGIN
      // Test functionality of Suggest Sales Price on Worksheet report with Sales Type as Customer.

      Initialize;
      SuggestSalesPriceOnWorksheet(SalesPrice."Sales Type"::Customer,CreateCustomer);
    END;

    [Test]
    PROCEDURE SuggestSalesPriceOnWorksheetWithSalesTypeAllCustomers@89();
    VAR
      SalesPrice@1000 : Record 7002;
    BEGIN
      // Test functionality of Suggest Sales Price on Worksheet report with Sales Type as All Customers.

      Initialize;
      SuggestSalesPriceOnWorksheet(SalesPrice."Sales Type"::"All Customers",'');
    END;

    [Test]
    PROCEDURE SuggestSalesPriceOnWorksheetWithSalesTypeCampaign@90();
    VAR
      SalesPrice@1000 : Record 7002;
    BEGIN
      // Test functionality of Suggest Sales Price on Worksheet report with Sales Type as Campaign.

      Initialize;
      SuggestSalesPriceOnWorksheet(SalesPrice."Sales Type"::Campaign,CreateCampaign);
    END;

    [Test]
    PROCEDURE SuggestSalesPriceOnWorksheetWithSalesTypeCustomerPriceGroup@74();
    VAR
      SalesPrice@1000 : Record 7002;
    BEGIN
      // Test functionality of Suggest Sales Price on Worksheet report with Sales Type as Customer Price Group.

      Initialize;
      SuggestSalesPriceOnWorksheet(SalesPrice."Sales Type"::"Customer Price Group",CreateCustomerPriceGroup);
    END;

    LOCAL PROCEDURE SuggestSalesPriceOnWorksheet@69(SalesType@1003 : Option;SalesCode@1002 : Code[20]);
    VAR
      Item@1001 : Record 27;
    BEGIN
      // Setup: Create Item and Sales Price.
      CreateItem(Item);
      CreateSalesPrice(Item,SalesType,SalesCode);

      // Exercise: Run Suggest Sales Price Worksheet report.
      LibraryCosting.SuggestSalesPriceWorksheet(
        Item,SalesCode,SalesType,LibraryRandom.RandInt(5),LibraryRandom.RandInt(5));  // Use random values for Price Lower Limit and Unit Price Factor.

      // Verify: Verify Sales Price Worksheet must exist.
      VerifySalesPriceWorksheet(SalesType,SalesCode,'',Item."No.");
    END;

    [Test]
    [HandlerFunctions(AdjustItemCostPricesHandler)]
    PROCEDURE AdjustItemCostPricesReportForItemUnitPrice@124();
    VAR
      Item@1001 : Record 27;
      UnitPrice@1002 : Decimal;
    BEGIN
      // Test to check the functionality of Adjust Item Cost Prices report for Item Unit Price.

      // Setup: Create Item with Unit Price. Set values to global variables.
      CreateAndModifyItem(Item,Item."Costing Method"::FIFO,0,LibraryRandom.RandDec(100,2));  // Taking Random value for Unit Cost. Taking 0 for Standard Cost as it is not required in the test.
      UnitPrice := Item."Unit Price";
      DefineGlobalValues(Adjust::"Item Card",AdjustField::"Unit Price",LibraryRandom.RandInt(5),'');

      // Exercise: Run Adjust Item Cost Prices batch report.
      RunAdjustItemCostPricesReportWithItem(Item);

      // Verify: Unit Price of Item.
      Item.GET(Item."No.");
      Item.TESTFIELD("Unit Price",UnitPrice * AdjustmentFactor);
    END;

    [Test]
    [HandlerFunctions(AdjustItemCostPricesHandler)]
    PROCEDURE AdjustItemCostPricesReportForStockkeepingUnitStandardCost@123();
    VAR
      Item@1001 : Record 27;
      StockkeepingUnit@1004 : Record 5700;
    BEGIN
      // Test to check the functionality of Adjust Item Cost Prices report for Stock keeping Unit Standard Cost.

      // Setup: Create Item with Standard Cost. Create Stock keeping Unit. Set values to global variables.
      CreateAndModifyItem(Item,Item."Costing Method"::Standard,LibraryRandom.RandDec(100,2),0);  // Taking Random value for Standard Cost. Taking 0 for Unit Price as it is not required in the test.
      CreateStockkeepingUnit(Item);
      DefineGlobalValues(Adjust::"Stockkeeping Unit Card",AdjustField::"Standard Cost",LibraryRandom.RandInt(5),'');

      // Exercise: Run Adjust Item Cost Prices batch report.
      RunAdjustItemCostPricesReportWithStockkeepingUnit(Item."No.");

      // Verify: Standard Cost of Stock keeping Unit.
      FindStockkeepingUnit(StockkeepingUnit,Item."No.");
      StockkeepingUnit.TESTFIELD("Standard Cost",Item."Standard Cost" * AdjustmentFactor);
    END;

    [Test]
    [HandlerFunctions(AdjustItemCostPricesHandler)]
    PROCEDURE AdjustItemCostPricesReportForStockkeepingUnitLastDirectCostWithRoundingMethod@119();
    VAR
      Item@1001 : Record 27;
      RoundingMethod@1007 : Record 42;
      StockkeepingUnit@1004 : Record 5700;
      LastDirectCost@1008 : Decimal;
    BEGIN
      // Test to check the functionality of Adjust Item Cost Prices report for Stock keeping Unit Last Direct Cost with Rounding method.

      // Setup: Create Item with Standard Cost. Create Stock keeping Unit and update Last Direct Cost. Set values to global variables. Find first Rounding method.
      CreateAndModifyItem(Item,Item."Costing Method"::Standard,LibraryRandom.RandDec(100,2),0);  // Taking Random value for Standard Cost. Taking 0 for Unit Price as it is not required in the test.
      CreateStockkeepingUnit(Item);
      LastDirectCost := UpdateLastDirectCostOnStockkeepingUnit(Item."No.");
      RoundingMethod.FINDFIRST;
      DefineGlobalValues(
        Adjust::"Stockkeeping Unit Card",AdjustField::"Last Direct Cost",
        LibraryRandom.RandInt(10),RoundingMethod.Code);

      // Exercise: Run Adjust Item Cost Prices batch report.
      RunAdjustItemCostPricesReportWithStockkeepingUnit(Item."No.");

      // Verify: Last Direct Cost of Stock keeping Unit.
      FindStockkeepingUnit(StockkeepingUnit,Item."No.");
      StockkeepingUnit.TESTFIELD("Last Direct Cost",ROUND(LastDirectCost * AdjustmentFactor,RoundingMethod.Precision));
    END;

    [Test]
    [HandlerFunctions(ItemsStatisticsHandler,ItemsStatisticsMatrixHandler)]
    PROCEDURE CheckFieldCaptionOnItemStatisticsMatrixPage@71();
    BEGIN
      // Verify Field Caption on Item Statistics Matrix Page when View by Set to Week.

      // Setup.
      Initialize;

      // Exercise: Run Item Statistics Page.
      PAGE.RUNMODAL(PAGE::"Item Statistics");

      // Verify: Verification done for Field Caption on Item Statistics Matrix Page using Item Show Matrix Page Handler.
    END;

    [Test]
    [HandlerFunctions(AdjustItemCostPricesHandler)]
    PROCEDURE AdjustItemCostPricesForStockkeepingUnitLastDirectCostWithItemFilter@87();
    VAR
      Item@1001 : Record 27;
      Item2@1003 : Record 27;
      LastDirectCost@1008 : Decimal;
      NotChangedLastDirectCost@1000 : Decimal;
    BEGIN
      // Setup: Find a Stock Keeping Unit and update Last Direct Cost. Create Item with Vendor No.
      // Create Stock keeping Unit and update Last Direct Cost. Set values for global variables.
      NotChangedLastDirectCost := CreateSKUWithLastDirectCost(Item,'');
      LastDirectCost := CreateSKUWithLastDirectCost(Item2,CreateVendor);
      DefineGlobalValues(
        Adjust::"Stockkeeping Unit Card",AdjustField::"Last Direct Cost",LibraryRandom.RandIntInRange(2,5),'');

      // Exercise: Run Adjust Item Cost Prices batch report with Vendor No. filter for Item.
      RunAdjustItemCostPricesReportWithItemFilter(Item2."Vendor No.");

      // Verify: Verify the Last Direct Cost of Stock keeping Unit without the filter Vendor No. was not adjusted.
      // Verify the Last Direct Cost of Stock keeping Unit with the filter Vendor No. was adjusted.
      VerifyLastDirectCostOfStockkeepingUnit(Item."No.",NotChangedLastDirectCost);
      VerifyLastDirectCostOfStockkeepingUnit(Item2."No.",LastDirectCost * AdjustmentFactor);
    END;

    [Test]
    PROCEDURE CapacityCostPostedToGLForTwoItemsInOneProductionOrder@95();
    VAR
      WorkCenter@1001 : Record 99000754;
      RoutingHeader@1002 : Record 99000763;
      Item@1004 : ARRAY [2] OF Record 27;
      ProductionOrder@1000 : Record 5405;
      ItemJournalBatch@1005 : Record 233;
      ItemJournalTemplate@1006 : Record 82;
      ItemJournalLine@1015 : Record 83;
    BEGIN
      // [FEATURE] [Post Inventory Cost to G/L] [Manufacturing]
      // [SCENARIO 372232] Capacity cost is posted to G/L when two item are produced in one production order

      // [GIVEN] Work center "W" with unit cost = "X"
      LibraryManufacturing.CreateWorkCenterWithCalendar(WorkCenter);

      // [GIVEN] Routing with one operation using work center "W", two manufactured items "I1" and "I2" with the routing
      CreateRouting(RoutingHeader,WorkCenter."No.");
      CreateItemWithRouting(Item[1],RoutingHeader."No.");
      CreateItemWithRouting(Item[2],RoutingHeader."No.");

      // [GIVEN] Production order with 2 lines: first line - item "I1", second line - item "I2"
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,
        Item[1]."No.",LibraryRandom.RandInt(10));
      CreateProdOrderLine(ProductionOrder.Status,ProductionOrder."No.",1,Item[1]."No.");
      CreateProdOrderLine(ProductionOrder.Status,ProductionOrder."No.",2,Item[2]."No.");
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,FALSE,TRUE,TRUE,FALSE);

      // [GIVEN] Post capacity consumption for the production order in 4 lines: "I1", "I2", "I1", "I2"
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Output);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      CreateOutputJournalLine(ItemJournalTemplate,ItemJournalBatch,Item[1]."No.",ProductionOrder."No.");
      CreateOutputJournalLine(ItemJournalTemplate,ItemJournalBatch,Item[2]."No.",ProductionOrder."No.");
      CreateOutputJournalLine(ItemJournalTemplate,ItemJournalBatch,Item[1]."No.",ProductionOrder."No.");
      CreateOutputJournalLine(ItemJournalTemplate,ItemJournalBatch,Item[2]."No.",ProductionOrder."No.");

      ItemJournalLine.SETRANGE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.SETRANGE("Order No.",ProductionOrder."No.");
      ItemJournalLine.FINDSET;
      REPEAT
        ItemJournalLine.VALIDATE("Run Time",1);
        ItemJournalLine.VALIDATE("Output Quantity",0);
        ItemJournalLine.MODIFY(TRUE);
      UNTIL ItemJournalLine.NEXT = 0;

      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // [WHEN] Post inventory cost to G/L
      PostInvtCostToGL;

      // [THEN] "Cost Posted to G/L" is "X" in all value entries
      VerifyProdOrderCostPostedToGL(ProductionOrder."No.",WorkCenter."Unit Cost");
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1059 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      LibraryVariableStorage.Clear;
      LibrarySales.SetCreditWarningsToNoWarnings;
      LibrarySales.SetStockoutWarning(FALSE);

      // Clear global variables.
      ClearGlobalVariables;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      RunAdjustCostItemEntries('');
      PostInvtCostToGL;
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ClearGlobalVariables@62();
    BEGIN
      CLEAR(SalesLCY2);
      CLEAR(COGSLCY2);
      CLEAR(NonInvtblCostsLCY2);
      CLEAR(ProfitLCY2);
      CLEAR(ProfitPercentage2);
      CLEAR(ShowError);
      CLEAR(CalculationDate);
      CLEAR(AverageCost);
      CLEAR(IncreaseQuantity);
      CLEAR(DecreaseQuantity);
    END;

    LOCAL PROCEDURE CreateCampaign@56() : Code[20];
    VAR
      Campaign@1000 : Record 5071;
      LibraryMarketing@1001 : Codeunit 131900;
    BEGIN
      LibraryMarketing.CreateCampaign(Campaign);
      EXIT(Campaign."No.");
    END;

    LOCAL PROCEDURE CreateAndModifyItem@67(VAR Item@1000 : Record 27;CostingMethod@1001 : Option;StandardCost@1002 : Decimal;UnitCost@1003 : Decimal);
    BEGIN
      CreateItem(Item);
      Item.VALIDATE("Costing Method",CostingMethod);
      Item.VALIDATE("Standard Cost",StandardCost);
      Item.VALIDATE("Unit Cost",UnitCost);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@6(ItemJournalLine@1000 : Record 83;EntryType@1005 : Option;ItemNo@1004 : Code[20];Quantity@1003 : Decimal;UnitAmount@1006 : Decimal) : Code[20];
    VAR
      ItemJournalBatch@1002 : Record 233;
    BEGIN
      CreateItemJournalLine(ItemJournalBatch,ItemJournalLine,EntryType,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Unit Amount",UnitAmount);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      EXIT(ItemJournalLine."Document No.");
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLineWithUnitCost@88(ItemNo@1002 : Code[20]) : Decimal;
    VAR
      ItemJournalBatch@1001 : Record 233;
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CreateItemJournalLine(
        ItemJournalBatch,ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,LibraryRandom.RandDec(10,2));  // Taking Random Quantity.
      ModifyItemJournalLine(ItemJournalLine);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      EXIT(ItemJournalLine."Unit Amount");
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocument@78(VAR PurchaseLine@1001 : Record 39;No@1004 : Code[20]);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Use random Quantity and Direct Unit Cost.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,No,LibraryRandom.RandDec(100,2));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocument@93(VAR SalesLine@1004 : Record 37;No@1001 : Code[20]);
    VAR
      SalesHeader@1005 : Record 36;
    BEGIN
      // Use random Quantity and Unit Price.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomer);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,No,LibraryRandom.RandDec(100,2));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndRefreshProductionOrder@70(VAR ProductionOrder@1000 : Record 5405;ItemNo@1002 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,LibraryRandom.RandInt(10));  // Taking Random Quantity.
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateItemDataRoundingFactor@108(VAR ItemNo@1005 : Code[20];VAR Quantity@1000 : Decimal;VAR SalesAmount@1001 : Decimal;Idx@1002 : Integer);
    VAR
      Item@1003 : Record 27;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      Quantity := LibraryRandom.RandDec(100,2);
      SalesAmount := LibraryRandom.RandDec(100,2) * Idx;
      CreateItem(Item);
      CreateAndPostItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::Sale,Item."No.",Quantity + Quantity / 2,SalesAmount);
      ItemNo := Item."No.";
    END;

    LOCAL PROCEDURE CreateCurrency@54() : Code[10];
    VAR
      Currency@1000 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCustomer@55() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCustomerPriceGroup@57() : Code[10];
    VAR
      CustomerPriceGroup@1000 : Record 6;
    BEGIN
      LibrarySales.CreateCustomerPriceGroup(CustomerPriceGroup);
      EXIT(CustomerPriceGroup.Code);
    END;

    LOCAL PROCEDURE CreateItem@3(VAR Item@1001 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@73(VAR ItemJournalBatch@1004 : Record 233;VAR ItemJournalLine@1000 : Record 83;EntryType@1006 : Option;ItemNo@1005 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      SelectItemJournalBatch(ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateItemWithRouting@105(VAR Item@1000 : Record 27;RoutingNo@1001 : Code[20]);
    BEGIN
      CreateItem(Item);
      Item.VALIDATE("Routing No.",RoutingNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMachineCenter@31(VAR MachineCenter@1000 : Record 99000758);
    BEGIN
      LibraryManufacturing.CreateMachineCenter(MachineCenter,'',LibraryRandom.RandDec(10,1));  // Use random value for Capacity.
      MachineCenter.VALIDATE("Unit Cost",LibraryRandom.RandDec(100,2));  // Use random value for Unit Cost.
      MachineCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateManufacturingItem@98(VAR ProductionBOMLine@1001 : Record 99000772) : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      CreateAndModifyItem(Item,Item."Costing Method"::FIFO,0,LibraryRandom.RandDec(100,2));  // Use 0 for Standard Cost and random value for Unit Cost.
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.VALIDATE("Production BOM No.",CreateAndCertifyProductionBOM(ProductionBOMLine,Item."Base Unit of Measure"));
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@97(VAR ProductionBOMLine@1002 : Record 99000772;UnitOfMeasureCode@1001 : Code[10]) : Code[20];
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
      Item@1003 : Record 27;
    BEGIN
      CreateAndModifyItem(Item,Item."Costing Method"::FIFO,0,LibraryRandom.RandDec(100,2));  // Use 0 for Standard Cost and random value for Unit Cost.
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,UnitOfMeasureCode);
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item."No.",LibraryRandom.RandInt(5));  // Taking Random Quantity.
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
      EXIT(ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateOutputJournalLine@115(ItemJournalTemplate@1001 : Record 82;ItemJournalBatch@1002 : Record 233;ItemNo@1003 : Code[20];ProdOrderNo@1004 : Code[20]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      LibraryManufacturing.CreateOutputJournal(ItemJournalLine,ItemJournalTemplate,ItemJournalBatch,ItemNo,ProdOrderNo);
      LibraryInventory.OutputJnlExplRoute(ItemJournalLine);
    END;

    LOCAL PROCEDURE CreateProdOrderLine@110(ProdOrderStatus@1000 : Option;ProdOrderNo@1001 : Code[20];LineNo@1002 : Integer;ItemNo@1003 : Code[20]);
    VAR
      ProdOrderLine@1004 : Record 5406;
    BEGIN
      WITH ProdOrderLine DO BEGIN
        INIT;
        VALIDATE(Status,ProdOrderStatus);
        VALIDATE("Prod. Order No.",ProdOrderNo);
        VALIDATE("Line No.",LineNo);
        VALIDATE("Item No.",ItemNo);
        VALIDATE(Quantity,LibraryRandom.RandInt(10));
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateRouting@103(VAR RoutingHeader@1000 : Record 99000763;WorkCenterNo@1003 : Code[20]);
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'',LibraryUtility.GenerateGUID,RoutingLine.Type::"Work Center",WorkCenterNo);
      RoutingLine.VALIDATE("Run Time",LibraryRandom.RandInt(10));
      RoutingLine.MODIFY(TRUE);

      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesPrice@84(Item@1003 : Record 27;SalesType@1001 : Option;SalesCode@1002 : Code[20]);
    VAR
      SalesPrice@1000 : Record 7002;
    BEGIN
      // Create Sales Price with random Minimum Quantity and Unit Price.
      LibraryCosting.CreateSalesPrice(
        SalesPrice,SalesType,SalesCode,Item."No.",WORKDATE,'','',Item."Base Unit of Measure",LibraryRandom.RandDec(100,2));
      SalesPrice.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesPrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateStandardCostWorksheetName@27() : Code[10];
    VAR
      StandardCostWorksheetName@1000 : Record 5840;
    BEGIN
      LibraryInventory.CreateStandardCostWorksheetName(StandardCostWorksheetName);
      EXIT(StandardCostWorksheetName.Name);
    END;

    LOCAL PROCEDURE CreateStockkeepingUnit@128(Item@1001 : Record 27);
    VAR
      Location@1002 : Record 14;
      LibraryWarehouse@1003 : Codeunit 132204;
      CreatePer@1004 : 'Location,Variant,Location & Variant';
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      Item.SETRANGE("No.",Item."No.");
      Item.SETRANGE("Location Filter",Location.Code);
      LibraryInventory.CreateStockKeepingUnit(Item,CreatePer::Location,FALSE,FALSE);
    END;

    LOCAL PROCEDURE CreateSKUWithLastDirectCost@94(VAR Item@1001 : Record 27;VendorNo@1000 : Code[20]) : Decimal;
    BEGIN
      CreateItem(Item);
      Item.VALIDATE("Vendor No.",VendorNo);
      Item.MODIFY(TRUE);
      CreateStockkeepingUnit(Item);
      EXIT(UpdateLastDirectCostOnStockkeepingUnit(Item."No."));
    END;

    LOCAL PROCEDURE CreateVendor@83() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateWorkCenter@30(VAR WorkCenter@1000 : Record 99000754);
    BEGIN
      LibraryManufacturing.CreateWorkCenter(WorkCenter);
      WorkCenter.VALIDATE("Unit Cost",LibraryRandom.RandDec(100,2));  // Use random value for Unit Cost.
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DeleteStandardCostWorksheetLines@53(StandardCostWorksheetName@1001 : Code[10]);
    VAR
      StandardCostWorksheet@1000 : Record 5841;
    BEGIN
      StandardCostWorksheet.SETRANGE("Standard Cost Worksheet Name",StandardCostWorksheetName);
      StandardCostWorksheet.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE DefineGlobalValues@18(AdjustOption@1000 : Option;AdjustFieldOption@1001 : Option;Factor@1003 : Decimal;RoundingMethod@1002 : Code[10]);
    BEGIN
      Adjust := AdjustOption; // This variable is made Global as it is used in the handler.
      AdjustField := AdjustFieldOption; // This variable is made Global as it is used in the handler.
      AdjustmentFactor := Factor; // Taking Random value. This variable is made Global as it is used in the handler.
      RoundingMethodCode := RoundingMethod; // This variable is made Global as it is used in the handler.
    END;

    LOCAL PROCEDURE FindStandardCostWorksheet@35(VAR StandardCostWorksheet@1003 : Record 5841;StandardCostWorksheetName@1002 : Code[10];Type@1001 : Option;No@1000 : Code[20]);
    BEGIN
      StandardCostWorksheet.SETRANGE("Standard Cost Worksheet Name",StandardCostWorksheetName);
      StandardCostWorksheet.SETRANGE(Type,Type);
      StandardCostWorksheet.SETRANGE("No.",No);
      StandardCostWorksheet.FINDFIRST;
    END;

    LOCAL PROCEDURE FindStockkeepingUnit@86(VAR StockkeepingUnit@1000 : Record 5700;ItemNo@1001 : Code[20]);
    BEGIN
      StockkeepingUnit.SETRANGE("Item No.",ItemNo);
      StockkeepingUnit.FINDFIRST;
    END;

    LOCAL PROCEDURE GetGLEntryNo@22(DocumentNo@1001 : Code[20]) : Integer;
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDLAST;
      EXIT(GLEntry."Entry No.");
    END;

    LOCAL PROCEDURE GetNumberOfStandardCostWorksheetLines@51(StandardCostWorksheetName@1001 : Code[10]) : Integer;
    VAR
      StandardCostWorksheet@1000 : Record 5841;
    BEGIN
      StandardCostWorksheet.SETRANGE("Standard Cost Worksheet Name",StandardCostWorksheetName);
      EXIT(StandardCostWorksheet.COUNT);
    END;

    LOCAL PROCEDURE ModifyItemJournalLine@77(VAR ItemJournalLine@1000 : Record 83);
    BEGIN
      ItemJournalLine.VALIDATE("Unit Cost",LibraryRandom.RandDec(10,2));  // Taking Random Unit Cost.
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostInvtCostToGL@37();
    VAR
      PostValueEntryToGL@1104 : Record 5811;
      PostInventoryCosttoGL@1000 : Report 1002;
      PostMethod@1004 : 'Per Posting Group,Per Entry';
    BEGIN
      COMMIT;
      PostValueEntryToGL.RESET;
      PostMethod := PostMethod::"Per Entry";
      PostInventoryCosttoGL.InitializeRequest(PostMethod,'',TRUE);
      PostInventoryCosttoGL.SETTABLEVIEW(PostValueEntryToGL);
      PostInventoryCosttoGL.USEREQUESTPAGE(FALSE);
      PostInventoryCosttoGL.SAVEASPDF(STRSUBSTNO(FileName,TEMPORARYPATH,LibraryUtility.GetGlobalNoSeriesCode));
    END;

    LOCAL PROCEDURE RunAdjustCostItemEntries@41(ItemNoFilter@1002 : Text[250]);
    VAR
      AdjustCostItemEntries@1000 : Report 795;
    BEGIN
      CLEAR(AdjustCostItemEntries);
      COMMIT;  // Commit required for batch job reports.
      AdjustCostItemEntries.InitializeRequest(ItemNoFilter,'');
      AdjustCostItemEntries.USEREQUESTPAGE(TRUE);
      AdjustCostItemEntries.RUNMODAL;
    END;

    LOCAL PROCEDURE RunAdjustItemCostPricesReportWithItem@126(Item@1002 : Record 27);
    VAR
      AdjustItemCostsPrices@1001 : Report 794;
    BEGIN
      COMMIT;  // COMMIT is required to run the report.
      CLEAR(AdjustItemCostsPrices);
      Item.SETRANGE("No.",Item."No.");
      AdjustItemCostsPrices.SETTABLEVIEW(Item);
      AdjustItemCostsPrices.USEREQUESTPAGE(TRUE);
      AdjustItemCostsPrices.RUN;
    END;

    LOCAL PROCEDURE RunAdjustItemCostPricesReportWithStockkeepingUnit@125(ItemNo@1000 : Code[20]);
    VAR
      StockkeepingUnit@1002 : Record 5700;
      AdjustItemCostsPrices@1001 : Report 794;
    BEGIN
      COMMIT;  // COMMIT is required to run the report.
      CLEAR(AdjustItemCostsPrices);
      StockkeepingUnit.SETRANGE("Item No.",ItemNo);
      AdjustItemCostsPrices.SETTABLEVIEW(StockkeepingUnit);
      AdjustItemCostsPrices.USEREQUESTPAGE(TRUE);
      AdjustItemCostsPrices.RUN;
    END;

    LOCAL PROCEDURE RunAdjustItemCostPricesReportWithItemFilter@92(VendorNo@1003 : Code[20]);
    VAR
      Item@1002 : Record 27;
      AdjustItemCostsPrices@1001 : Report 794;
    BEGIN
      COMMIT; // COMMIT is required to run the report.
      CLEAR(AdjustItemCostsPrices);
      Item.SETRANGE("Vendor No.",VendorNo);
      AdjustItemCostsPrices.SETTABLEVIEW(Item);
      AdjustItemCostsPrices.USEREQUESTPAGE(TRUE);
      AdjustItemCostsPrices.RUN;
    END;

    LOCAL PROCEDURE RunImplementStandardCostChange@29(StandardCostWorksheetName@1001 : Code[10];Type@1002 : Option;No@1003 : Code[20]);
    VAR
      StandardCostWorksheet@1000 : Record 5841;
      ImplementStandardCostChange@1004 : Report 5855;
    BEGIN
      COMMIT;  // Commit required for batch job reports.
      StandardCostWorksheet.SETRANGE("Standard Cost Worksheet Name",StandardCostWorksheetName);
      StandardCostWorksheet.SETRANGE(Type,Type);
      StandardCostWorksheet.SETRANGE("No.",No);
      CLEAR(ImplementStandardCostChange);
      ImplementStandardCostChange.SETTABLEVIEW(StandardCostWorksheet);
      ImplementStandardCostChange.SetStdCostWksh(StandardCostWorksheetName);
      ImplementStandardCostChange.USEREQUESTPAGE(TRUE);
      ImplementStandardCostChange.RUN;
    END;

    LOCAL PROCEDURE RunRollUpStandardCost@52(StandardCostWorksheetName@1002 : Code[10]);
    VAR
      ProductionBOMHeader@1003 : Record 99000771;
      Item@1001 : Record 27;
      RollUpStandardCost@1000 : Report 5854;
    BEGIN
      ProductionBOMHeader.MODIFYALL(Status,ProductionBOMHeader.Status::Certified);  // Use to Certify all Production BOM before running the report.
      COMMIT;  // Commit required for batch job reports.
      Item.SETRANGE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      CLEAR(RollUpStandardCost);
      RollUpStandardCost.SETTABLEVIEW(Item);
      RollUpStandardCost.SetStdCostWksh(StandardCostWorksheetName);
      RollUpStandardCost.USEREQUESTPAGE(TRUE);
      RollUpStandardCost.RUN;
    END;

    LOCAL PROCEDURE RunItemStatistics@146(ItemNo@1000 : Code[20];RoundingFactor@1002 : Option);
    VAR
      ItemCard@1001 : TestPage 30;
    BEGIN
      LibraryVariableStorage.Enqueue(RoundingFactor);
      ItemCard.OPENVIEW;
      ItemCard.FILTER.SETFILTER("No.",ItemNo);
      ItemCard.Statistics.INVOKE;
    END;

    LOCAL PROCEDURE SelectItemJournalBatch@75(VAR ItemJournalBatch@1002 : Record 233);
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE SetPurchaseAndSaleAmount@19(VAR PurchaseUnitAmount@1000 : Decimal;VAR PurchaseUnitAmount2@1001 : Decimal) : Decimal;
    BEGIN
      PurchaseUnitAmount := LibraryRandom.RandDec(100,2);  // Use Random Unit Amount.
      PurchaseUnitAmount2 := PurchaseUnitAmount + LibraryRandom.RandDec(100,2);  // PurchaseUnitAmount2 is greater than PurchaseUnitAmount required for test case.
      EXIT(PurchaseUnitAmount2 + LibraryRandom.RandDec(100,2));  // SalesUnitAmount is greater than PurchaseUnitAmount2 required for test case.
    END;

    LOCAL PROCEDURE DisableAutomaticCostPosting@5();
    BEGIN
      RunAdjustCostItemEntries('');
      LibraryInventory.SetAutomaticCostPosting(FALSE);
      LibraryInventory.SetAutomaticCostAdjmtNever;
    END;

    LOCAL PROCEDURE UpdateLastDirectCostOnStockkeepingUnit@132(ItemNo@1000 : Code[20]) : Decimal;
    VAR
      StockkeepingUnit@1001 : Record 5700;
    BEGIN
      FindStockkeepingUnit(StockkeepingUnit,ItemNo);
      StockkeepingUnit.VALIDATE("Last Direct Cost",LibraryRandom.RandDec(100,2));  // Taking Random value.
      StockkeepingUnit.MODIFY(TRUE);
      EXIT(StockkeepingUnit."Last Direct Cost");
    END;

    LOCAL PROCEDURE VerifyAverageCostCalcOverview@65(VAR AverageCostCalcOverview@1000 : TestPage 5847;Type@1001 : Option;Quantity@1002 : Decimal);
    BEGIN
      AverageCostCalcOverview.FILTER.SETFILTER(Type,FORMAT(Type));
      AverageCostCalcOverview.AverageCostCntrl.ASSERTEQUALS(ROUND(AverageCost,LibraryERM.GetAmountRoundingPrecision));
      AverageCostCalcOverview.Quantity.ASSERTEQUALS(Quantity);
    END;

    LOCAL PROCEDURE VerifyCopyStandardCostWorkSheet@91(StandardCostWorksheetName@1000 : Code[10];Type@1001 : Option;No@1002 : Code[20]);
    VAR
      StandardCostWorksheet@1003 : Record 5841;
    BEGIN
      FindStandardCostWorksheet(StandardCostWorksheet,StandardCostWorksheetName,Type,No);
      StandardCostWorksheet.TESTFIELD("No.",No);
    END;

    LOCAL PROCEDURE VerifyGLEntry@20(DocumentNo@1000 : Code[20];EntryNo@1001 : Integer;Amount@1002 : Decimal);
    VAR
      GLEntry@1003 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETFILTER("Entry No.",'>%1',EntryNo);
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        Amount,GLEntry.Amount,LibraryERM.GetAmountRoundingPrecision,STRSUBSTNO(ValidationError,GLEntry.FIELDCAPTION(Amount),Amount));
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@7(DocumentNo@1000 : Code[20];EntryType@1002 : Option;ItemNo@1001 : Code[20];InvoicedQuantity@1004 : Decimal;CostAmountActual@1005 : Decimal;SalesAmountActual@1006 : Decimal;Open@1007 : Boolean);
    VAR
      ItemLedgerEntry@1003 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE(Open,Open);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)","Sales Amount (Actual)");
      ItemLedgerEntry.TESTFIELD("Invoiced Quantity",InvoicedQuantity);
      Assert.AreNearlyEqual(
        CostAmountActual,ItemLedgerEntry."Cost Amount (Actual)",LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationError,ItemLedgerEntry.FIELDCAPTION("Cost Amount (Actual)"),CostAmountActual));
      Assert.AreNearlyEqual(
        SalesAmountActual,ItemLedgerEntry."Sales Amount (Actual)",LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationError,ItemLedgerEntry.FIELDCAPTION("Sales Amount (Actual)"),SalesAmountActual));
    END;

    LOCAL PROCEDURE VerifyItemStatistics@11(Quantity@1002 : Decimal;SalesUnitAmount@1003 : Decimal;PurchaseUnitAmount@1004 : Decimal;PurchaseUnitAmount2@1005 : Decimal;RoundingFactor@1011 : 'None,1,1000,1000000');
    VAR
      ItemStatisticsBuffer@1008 : Record 5821;
      MatrixMgt@1012 : Codeunit 9200;
      SalesLCY@1010 : Decimal;
      COGSLCY@1009 : Decimal;
      ProfitLCY@1007 : Decimal;
      ProfitPercentage@1006 : Decimal;
    BEGIN
      SalesLCY := MatrixMgt.RoundValue((Quantity + Quantity / 2) * SalesUnitAmount,RoundingFactor);
      Assert.AreNearlyEqual(
        SalesLCY,SalesLCY2,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationError,ItemStatisticsBuffer.FIELDCAPTION("Sales (LCY)"),SalesLCY));

      COGSLCY := -MatrixMgt.RoundValue((Quantity * PurchaseUnitAmount) + (Quantity / 2 * PurchaseUnitAmount2),RoundingFactor);
      Assert.AreNearlyEqual(
        COGSLCY,COGSLCY2,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationError,ItemStatisticsBuffer.FIELDCAPTION("COGS (LCY)"),COGSLCY));
      Assert.AreEqual(0,NonInvtblCostsLCY2,STRSUBSTNO(ValidationError,ItemStatisticsBuffer.FIELDCAPTION("Inventoriable Costs"),0));

      ProfitLCY := SalesLCY + COGSLCY;
      Assert.AreNearlyEqual(
        ProfitLCY,ProfitLCY2,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationError,ItemStatisticsBuffer.FIELDCAPTION("Profit (LCY)"),ProfitLCY));

      ProfitPercentage := ProfitLCY / SalesLCY * 100;
      Assert.AreNearlyEqual(
        ProfitPercentage,ProfitPercentage2,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationError,ItemStatisticsBuffer.FIELDCAPTION("Profit %"),ProfitPercentage));
    END;

    LOCAL PROCEDURE VerifyItemTurnover@15(ItemNo@1011 : Code[20];Quantity@1006 : Decimal;SalesUnitAmount@1005 : Decimal;PurchaseUnitAmount@1003 : Decimal;PurchaseUnitAmount2@1002 : Decimal);
    VAR
      Item@1004 : Record 27;
      ItemCard@1000 : TestPage 30;
      ItemTurnover@1001 : TestPage 158;
      PurchasesQty@1007 : Decimal;
      PurchasesLCY@1008 : Decimal;
      SalesQty@1009 : Decimal;
      SalesLCY@1010 : Decimal;
    BEGIN
      ItemCard.OPENVIEW;
      ItemCard.FILTER.SETFILTER("No.",ItemNo);
      ItemTurnover.TRAP;
      ItemCard."Page Item Turnover".INVOKE;
      ItemTurnover.PeriodType.SETVALUE(FORMAT(ItemTurnover.PeriodType.GETOPTION(5)));  // Use 5 for Year Required for Test Case.
      ItemTurnover.ItemTurnoverLines.FILTER.SETFILTER("Period Start",FORMAT(DMY2DATE(1,1,DATE2DMY(WORKDATE,3))));

      PurchasesQty := Quantity + Quantity;  // Total Purchase Quantity.
      Assert.AreNearlyEqual(
        PurchasesQty,ItemTurnover.ItemTurnoverLines.PurchasesQty.ASDECIMAL,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationError,Item.FIELDCAPTION("Purchases (Qty.)"),PurchasesQty));

      PurchasesLCY := (Quantity * PurchaseUnitAmount) + (Quantity * PurchaseUnitAmount2);
      Assert.AreNearlyEqual(
        PurchasesLCY,ItemTurnover.ItemTurnoverLines.PurchasesLCY.ASDECIMAL,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationError,Item.FIELDCAPTION("Purchases (LCY)"),PurchasesLCY));

      SalesQty := Quantity + Quantity / 2;  // Total Sale Quantity.
      Assert.AreNearlyEqual(
        SalesQty,ItemTurnover.ItemTurnoverLines.SalesQty.ASDECIMAL,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationError,Item.FIELDCAPTION("Sales (Qty.)"),SalesQty));

      SalesLCY := (Quantity + Quantity / 2) * SalesUnitAmount;
      Assert.AreNearlyEqual(
        SalesLCY,ItemTurnover.ItemTurnoverLines.SalesLCY.ASDECIMAL,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationError,Item.FIELDCAPTION("Sales (LCY)"),SalesLCY));
    END;

    LOCAL PROCEDURE VerifySalesPriceWorksheet@58(SalesType@1001 : Option;SalesCode@1002 : Code[20];CurrencyCode@1003 : Code[10];ItemNo@1004 : Code[20]);
    VAR
      SalesPriceWorksheet@1000 : Record 7023;
    BEGIN
      SalesPriceWorksheet.SETRANGE("Sales Type",SalesType);
      SalesPriceWorksheet.SETRANGE("Sales Code",SalesCode);
      SalesPriceWorksheet.SETRANGE("Currency Code",CurrencyCode);
      SalesPriceWorksheet.SETRANGE("Item No.",ItemNo);
      SalesPriceWorksheet.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyStandardCostWorksheet@34(StandardCostWorksheetName@1003 : Code[10];Type@1002 : Option;No@1001 : Code[20]);
    VAR
      StandardCostWorksheet@1000 : Record 5841;
    BEGIN
      FindStandardCostWorksheet(StandardCostWorksheet,StandardCostWorksheetName,Type,No);
      StandardCostWorksheet.TESTFIELD(Implemented,TRUE);
    END;

    LOCAL PROCEDURE VerifyLastDirectCostOfStockkeepingUnit@21(ItemNo@1001 : Code[20];LastDirectCost@1002 : Decimal);
    VAR
      StockkeepingUnit@1000 : Record 5700;
    BEGIN
      FindStockkeepingUnit(StockkeepingUnit,ItemNo);
      StockkeepingUnit.TESTFIELD("Last Direct Cost",LastDirectCost);
    END;

    LOCAL PROCEDURE VerifyProdOrderCostPostedToGL@96(ProdOrderNo@1000 : Code[20];CostAmount@1002 : Decimal);
    VAR
      ValueEntry@1001 : Record 5802;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETRANGE("Order Type","Order Type"::Production);
        SETRANGE("Order No.",ProdOrderNo);
        SETFILTER("Cost Posted to G/L",'<>%1',CostAmount);
        Assert.RecordIsEmpty(ValueEntry);
      END;
    END;

    LOCAL PROCEDURE VerifyUnitCostInProductionOrderLine@72(ProductionOrder@1000 : Record 5405;UnitCost@1001 : Decimal);
    VAR
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;
      ProdOrderLine.TESTFIELD("Unit Cost",UnitCost);
    END;

    LOCAL PROCEDURE VerifyValueEntry@9(DocumentNo@1006 : Code[20];ItemLedgerEntryType@1005 : Option;ItemNo@1004 : Code[20];InvoicedQuantity@1003 : Decimal;CostAmountActual@1002 : Decimal;SalesAmountActual@1001 : Decimal;Adjustment@1000 : Boolean);
    VAR
      ValueEntry@1007 : Record 5802;
    BEGIN
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.SETRANGE("Item Ledger Entry Type",ItemLedgerEntryType);
      ValueEntry.SETRANGE("Item No.",ItemNo);
      ValueEntry.SETRANGE(Adjustment,Adjustment);
      ValueEntry.FINDFIRST;
      ValueEntry.TESTFIELD("Invoiced Quantity",InvoicedQuantity);
      Assert.AreNearlyEqual(
        CostAmountActual,ValueEntry."Cost Amount (Actual)",LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationError,ValueEntry.FIELDCAPTION("Cost Amount (Actual)"),CostAmountActual));
      Assert.AreNearlyEqual(
        SalesAmountActual,ValueEntry."Sales Amount (Actual)",LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationError,ValueEntry.FIELDCAPTION("Sales Amount (Actual)"),SalesAmountActual));
    END;

    [RequestPageHandler]
    PROCEDURE AdjustCostItemEntriesHandler@24(VAR AdjustCostItemEntries@1000 : TestRequestPage 795);
    BEGIN
      AdjustCostItemEntries.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE AdjustItemCostPricesHandler@133(VAR AdjustItemCostsPrices@1000 : TestRequestPage 794);
    BEGIN
      AdjustItemCostsPrices.Adjust.SETVALUE(Adjust);
      AdjustItemCostsPrices.AdjustField.SETVALUE(AdjustField);
      AdjustItemCostsPrices.AdjustmentFactor.SETVALUE(AdjustmentFactor);
      AdjustItemCostsPrices.Rounding_Method.SETVALUE(RoundingMethodCode);
      AdjustItemCostsPrices.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemStatisticsHandler@12(VAR ItemStatistics@1000 : TestPage 5827);
    VAR
      RoundingFactor@1001 : Variant;
    BEGIN
      ItemStatistics.DateFilter.SETVALUE(WORKDATE);
      LibraryVariableStorage.Dequeue(RoundingFactor);
      ItemStatistics.RoundingFactor.SETVALUE(RoundingFactor);
      ItemStatistics.ShowMatrix.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemStatisticsMatrixHandler@13(VAR ItemStatisticsMatrix@1000 : TestPage 9223);
    BEGIN
      SalesLCY2 := ItemStatisticsMatrix.Amount.ASDECIMAL;  // Use SalesLCY2 as global for Test Page Handler.
      ItemStatisticsMatrix.NEXT;
      COGSLCY2 := ItemStatisticsMatrix.Amount.ASDECIMAL;  // Use COGSLCY2 as global for Test Page Handler.
      ItemStatisticsMatrix.NEXT;
      NonInvtblCostsLCY2 := ItemStatisticsMatrix.Amount.ASDECIMAL;  // Use NonInvtblCostsLCY2 as global for Test Page Handler.
      ItemStatisticsMatrix.NEXT;
      ProfitLCY2 := ItemStatisticsMatrix.Amount.ASDECIMAL;  // Use ProfitLCY2 as global for Test Page Handler.
      ItemStatisticsMatrix.NEXT;
      ProfitPercentage2 := ItemStatisticsMatrix.Amount.ASDECIMAL;  // Use ProfitPercentage2 as global for Test Page Handler.
    END;

    [RequestPageHandler]
    PROCEDURE ImplementStandardCostChangeHandler@38(VAR ImplementStandardCostChange@1000 : TestRequestPage 5855);
    VAR
      ItemJournalTemplate@1001 : Record 82;
      ItemJournalBatch@1002 : Record 233;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Revaluation);
      LibraryInventory.SelectItemJournalBatchName(
        ItemJournalBatch,ItemJournalBatch."Template Type"::Revaluation,ItemJournalTemplate.Name);
      ImplementStandardCostChange.ItemJournalTemplate.SETVALUE(ItemJournalTemplate.Name);
      ImplementStandardCostChange.ItemJournalBatchName.SETVALUE(ItemJournalBatch.Name);
      IF ShowError THEN
        ImplementStandardCostChange.DocumentNo.SETVALUE('');

      ImplementStandardCostChange.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RollUpStandardCostHandler@59(VAR RollUpStandardCost@1000 : TestRequestPage 5854);
    BEGIN
      RollUpStandardCost.CalculationDate.SETVALUE(CalculationDate);
      RollUpStandardCost.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE AverageCostCalcOverviewHandler@64(VAR AverageCostCalcOverview@1001 : TestPage 5847);
    VAR
      AverageCostCalcOverview2@1000 : Record 5847;
    BEGIN
      VerifyAverageCostCalcOverview(
        AverageCostCalcOverview,AverageCostCalcOverview2.Type::"Closing Entry",IncreaseQuantity + DecreaseQuantity);
      VerifyAverageCostCalcOverview(AverageCostCalcOverview,AverageCostCalcOverview2.Type::Increase,IncreaseQuantity);
      VerifyAverageCostCalcOverview(AverageCostCalcOverview,AverageCostCalcOverview2.Type::Decrease,DecreaseQuantity);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@106(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE ItemsStatisticsHandler@32(VAR ItemStatistics@1000 : TestPage 5827);
    VAR
      ViewBy@1001 : 'Day,Week,Month,Quarter,Year,Accounting Period';
    BEGIN
      ItemStatistics.DateFilter.SETVALUE(STRSUBSTNO('%1..%2',CALCDATE('<-CW>',WORKDATE),CALCDATE('<CW>',WORKDATE)));
      ItemStatistics.ViewBy.SETVALUE(ViewBy::Week);
      LibraryVariableStorage.Enqueue(ItemStatistics.MATRIX_CaptionRange.VALUE);
      ItemStatistics.ShowMatrix.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemsStatisticsMatrixHandler@28(VAR ItemStatisticsMatrix@1000 : TestPage 9223);
    VAR
      Value@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Value);
      Assert.AreEqual(Value,ItemStatisticsMatrix.Field1.CAPTION,InvalidColumnCaptionError);
    END;

    BEGIN
    {
      // [FEATURE] [SCM]
       Unsupported version tags:
       US: Unable to Execute
       CA: Unable to Execute
       IN: Unable to Execute
       ES: Unable to Execute

       1. Validate Item Ledger Entry after running Adjust Cost Item Entries.
       2. Validate Value Entry after running Adjust Cost Item Entries.
       3. Validate Item Statistics And Item Turnover after running Adjust Cost Item Entries.
       4. Validate G/L Entry after running Adjust Cost Item Entries.
       5. Test error occurs on running Implement Standard Cost Change report without Document No.
       6. Test functionality of Implement Standard Cost Change report.
       7. Test functionality of Suggest Item Standard Cost report without Rounding Factor.
       8. Test functionality of Suggest Item Standard Cost report with Rounding Factor.
       9. Test functionality of Suggest Work and Machine Center Standard Cost report without Rounding Factor.
      10. Test functionality of Suggest Work and Machine Center Standard Cost report with Rounding Factor.
      11. Run Suggest Item Standard Cost report and verify number of Standard Cost Worksheet Lines must not be zero.
      12. Roll Up Standard Cost with calculation date workdate and verify some more lines added after Roll Up.
      13. Delete all lines on Standard Cost Worksheet. Roll Up Standard Cost with calculation date random day less than workdate and verify some more lines added after Roll Up.
      14. Test functionality of Suggest Item Price On Worksheet report with Sales Type as Customer.
      15. Test functionality of Suggest Item Price On Worksheet report with Sales Type as All Customers.
      16. Test functionality of Suggest Item Price On Worksheet report with Sales Type as Campaign.
      17. Test functionality of Suggest Item Price On Worksheet report with Sales Type as Customer Price Group.
      18. Test Average Cost Calculation Functionality for Costing Method as Standard.
      19. Test Average Cost Calculation Functionality for Costing Method as Average.
      20. Test to verify that Unit Cost on Production order line changes when we run Update Unit Cost report with One Level Calculation method.
      21. Test to verify that Unit Cost on Production order line changes when we run Adjust Cost Item Entries batch job after posting Item Journal with updated Unit Cost for Item.
      22. Test to verify that Unit Cost on Production order line changes when we run Update Unit Cost report with All Levels Calculation method.
      23. Test functionality of Copy Standard Cost WorkSheet report with Adjustment Factor.
      24. Test functionality of Copy Standard Cost WorkSheet report with Rounding Factor.
      25. Test functionality of Suggest Sales Price on Worksheet report with Sales Type as Customer.
      26. Test functionality of Suggest Sales Price on Worksheet report with Sales Type as All Customers.
      27. Test functionality of Suggest Sales Price on Worksheet report with Sales Type as Campaign.
      28. Test functionality of Suggest Sales Price on Worksheet report with Sales Type as Customer Price Group.
      29. Test to check the functionality of Adjust Item Cost Prices report for Item Unit Price.
      30. Test to check the functionality of Adjust Item Cost Prices report for Stock keeping Unit Standard Cost.
      31. Test to check the functionality of Adjust Item Cost Prices report for Stock keeping Unit Last Direct Cost with Rounding method.
      32. Verify Field Caption on Item Statistics Matrix Page when View by Set to Week on Item Statistics page.
      33. Test to verify Report Adjust Item Costs/Price can filter SKU by Item Provided.

      TFS_TS_ID = 267604
      Cover Test cases:
      ----------------------------------------------------------------------------------------------
      Test Function Name                                                                     TFS ID
      ----------------------------------------------------------------------------------------------
      ItemLedgerEntryWithAdjustCostItemEntries                                               129292
      ValueEntryWithAdjustCostItemEntries                                                    129293

      TFS_TS_ID = 267608
      Cover Test cases:
      ----------------------------------------------------------------------------------------------
      Test Function Name                                                                     TFS ID
      ----------------------------------------------------------------------------------------------
      ItemStatisticsAndItemTurnoverWithAdjustCostItemEntries                                 129294

      TFS_TS_ID = 268034
      Cover Test cases:
      ----------------------------------------------------------------------------------------------
      Test Function Name                                                                     TFS ID
      ----------------------------------------------------------------------------------------------
      GLEntryWithAdjustCostItemEntries                                                       131707

      TFS_TS_ID = 268542
      Cover Test cases:
      ----------------------------------------------------------------------------------------------
      Test Function Name                                                                     TFS ID
      ----------------------------------------------------------------------------------------------
      ImplementStandardCostChangeError, ImplementStandardCostChange                          129090

      TFS_TS_ID = 268563
      Cover Test cases:
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      SuggestItemStandardCostWithoutRoundingFactor, SuggestItemStandardCostWithRoundingFactor                                   129086

      TFS_TS_ID = 268564
      Cover Test cases:
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      SuggestWorkAndMachineCenterStandardCostWithoutRoundingFactor, SuggestWorkAndMachineCenterStandardCostWithRoundingFactor   129087

      TFS_TS_ID = 268562
      Cover Test cases:
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      StandardCostWorksheetBeforeRollUp,StandardCostWorksheetAfterRollUp,RollUpStandardCostAfterDelete                          129089

      TFS_TS_ID = 268566
      Cover Test cases:
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      SuggestItemPriceOnWorksheetWithSalesTypeCustomer,SuggestItemPriceOnWorksheetWithSalesTypeAllCustomers                     129113
      SuggestItemPriceOnWorksheetWithSalesTypeCampaign,SuggestItemPriceOnWorksheetWithSalesTypeCustomerPriceGroup               129113

      TFS_TS_ID = 272655
      Cover Test cases:
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      AverageCostCalculationWithStandardCostingMethod,AverageCostCalculationWithAverageCostingMethod                            141342

      TFS_WI: 273899
      Covers Test Cases:
      --------------------------------------------------------------------------------------------------------
      Test Function Name                                                                               TFS ID
      --------------------------------------------------------------------------------------------------------
      UpdateUnitCostReportWithOneLevelAndFalseReservations                                             129146
      UpdateUnitCostReportWithAllLevelsAndTrueReservations                                             129146
      UpdateUnitCostInItemJournalAndAdjustCostItemEntries                                              129146

      TFS_WI: 278125
      Covers Test Cases:
      --------------------------------------------------------------------------------------------------------
      Test Function Name                                                                               TFS ID
      --------------------------------------------------------------------------------------------------------
      CopyStandardCostWorksheetReportWithoutAdjustmentFactor                                           129088
      CopyStandardCostWorksheetReportCostWithRoundingFactor                                            129088

      TFS_TS_ID = 278726
      Cover Test cases:
      ---------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------
      SuggestSalesPriceOnWorksheetWithSalesTypeCustomer, SuggestSalesPriceOnWorksheetWithSalesTypeAllCustomers                  129114
      SuggestSalesPriceOnWorksheetWithSalesTypeCampaign, SuggestSalesPriceOnWorksheetWithSalesTypeCustomerPriceGroup            129114

      Covers Test cases for WI: 278111
      -------------------------------------------------------------------------------------------------
      Test Function Name                                                                         TFS ID
      -------------------------------------------------------------------------------------------------
      AdjustItemCostPricesReportForItemUnitPrice                                                 129011
      AdjustItemCostPricesReportForStockkeepingUnitStandardCost                                  129011
      AdjustItemCostPricesReportForStockkeepingUnitLastDirectCostWithRoundingMethod              129011

      Covers Test cases for Bug ID: 324908
      -------------------------------------------------------------------------------------------------
      Test Function Name                                                                         TFS ID
      -------------------------------------------------------------------------------------------------
      CheckFieldCaptionOnItemStatisticsMatrixPage                                                 129011

      Covers Test cases for Merge Bug ID: 85694
      -------------------------------------------------------------------------------------------------
      Test Function Name                                                                         TFS ID
      -------------------------------------------------------------------------------------------------
      AdjustItemCostPricesForStockkeepingUnitLastDirectCostWithItemFilter                         85694
    }
    END.
  }
}

