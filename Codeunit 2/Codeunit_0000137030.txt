OBJECT Codeunit 137030 SCM Extend Warehouse
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LocationWhite@1003 : Record 14;
      ItemJournalTemplate@1001 : Record 82;
      ItemJournalBatch@1000 : Record 233;
      ConsumptionItemJournalTemplate@1023 : Record 82;
      ConsumptionItemJournalBatch@1022 : Record 233;
      OutputItemJournalTemplate@1012 : Record 82;
      OutputItemJournalBatch@1011 : Record 233;
      LibrarySales@1005 : Codeunit 130509;
      LibraryUtility@1010 : Codeunit 131000;
      LibraryWarehouse@1051 : Codeunit 132204;
      LibraryInventory@1050 : Codeunit 132201;
      LibraryManufacturing@1027 : Codeunit 132202;
      Assert@1007 : Codeunit 130000;
      LibraryRandom@1009 : Codeunit 130440;
      IsInitialized@1006 : Boolean;
      ErrorMessageCounter@1008 : Integer;
      ROUTING_LINE_10@1014 : TextConst 'ENU=10';
      ROUTING_LINE_20@1021 : TextConst 'ENU=20';
      MSG_INVENTORY_MOVEMENT@1025 : TextConst 'ENU=inventory movement';
      MSG_INVENTORY_MOVEMENT_LINE@1024 : TextConst 'ENU=inventory movement line';
      MSG_THERE_NOTHING_TO_HANDLE@1013 : TextConst 'ENU=There is nothing to handle.';
      MSG_THERE_NOTHING_TO_CREATE@1015 : TextConst 'ENU=There is nothing to create.';
      MSG_NOTHING_TO_HANDLE@1016 : TextConst 'ENU=Nothing to handle.';
      MSG_CHANGE_LOC@1017 : TextConst 'ENU=will be removed. Are you sure that you want to continue?';
      MSG_ACTIVITIES_CREATED@1018 : TextConst 'ENU=activities created';
      MSG_WHSE_PICK@1026 : TextConst 'ENU=warehouse pick';
      MSG_WHSE_PICK_LINE@1020 : TextConst 'ENU=warehouse pick line';
      MSG_CREATE_MVMT@1028 : TextConst 'ENU=Do you want to create Inventory Movement?';
      MSG_WSHE_CREATED@1029 : TextConst 'ENU=Warehouse Shipment Header has been created.';
      MSG_QTY_NOT_RESERVED@1030 : TextConst 'ENU=Expected quantity not reserved.';
      MSG_USE_BIN@1031 : TextConst 'ENU=use this bin?';
      MSG_BEEN_CREATED@1032 : TextConst 'ENU=has been created';
      MSG_INVENTORY_PICK_LINE@1034 : TextConst 'ENU=inventory pick line';
      MSG_INVENTORY_PICK@1033 : TextConst 'ENU=inventory pick';
      MSG_MOVMT_CREATED@1019 : TextConst 'ENU="Number of Invt. Movement activities created: "';
      Text001@1036 : TextConst 'ENU=Qty. to Handle must';
      Text002@1035 : TextConst 'ENU=Qty. to Handle must not be Qty. Outstanding';
      MSG_THERE_NOTHING_TO_REGISTER@1037 : TextConst 'ENU=There is nothing to register.';
      Text003@1038 : TextConst 'ENU=The total base quantity to take 10 must be equal to the total base quantity to place 0.';
      Text004@1040 : TextConst 'ENU=activities created';
      Text005@1039 : TextConst 'ENU=Warehouse Activity Lines are deleted.';
      Text006@1041 : TextConst 'ENU=Do you still want to delete the Warehouse Activity Line';
      MSG_HAS_BEEN_CREATED@1042 : TextConst 'ENU=has been created.';
      MSG_UNMATCHED_BIN_CODE@1002 : TextConst 'ENU=This change may have caused bin codes on some production order component lines to be different from those on the production order routing line. Do you want to automatically align all of these unmatched bin codes?';
      MSG_PICK_CREATED@1004 : TextConst 'ENU="Number of Invt. Pick activities created: "';
      MSG_MUST_SPECIFY_LOCATION@1044 : TextConst 'ENU=Location Code must have a value in Warehouse Activity Header';
      MSG_DIRECT_NO@1045 : TextConst 'ENU=Directed Put-away and Pick must be';
      MSG_UPDATE_LINES@1048 : TextConst 'ENU=You have changed the To Bin Code on the Internal Movement Header, but it has not been changed on the existing internal movement lines.';
      MSG_WHSEEMPLEE@1047 : TextConst 'ENU=You cannot use Location Code';
      MSG_BIN_MANDATORY@1046 : TextConst 'ENU="Bin Mandatory must be "';

    [Normal]
    LOCAL PROCEDURE Initialize@315();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Initialize setup.
      IF IsInitialized THEN
        EXIT;

      // Setup Demonstration data.
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      GlobalSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE GlobalSetup@1();
    VAR
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      NoSeriesSetup;

      // Journals setup
      ItemJournalSetup;
      ConsumptionJournalSetup;
      OutputJournalSetup;

      // Location setup - full WMS location takes time to create
      // for performance reasons create it once and reuse
      LibraryWarehouse.CreateFullWMSLocation(LocationWhite,10);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationWhite.Code,FALSE);

      DisableWarnings;
    END;

    LOCAL PROCEDURE DisableWarnings@8();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Stockout Warning",FALSE);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE NoSeriesSetup@10();
    VAR
      InventorySetup@1000 : Record 313;
      PurchasesPayablesSetup@1003 : Record 312;
      SalesSetup@1004 : Record 311;
      WarehouseSetup@1002 : Record 5769;
    BEGIN
      LibraryInventory.NoSeriesSetup(InventorySetup);
      LibraryWarehouse.NoSeriesSetup(WarehouseSetup);

      SalesSetup.GET;
      SalesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ManufacturingSetup@7();
    VAR
      ManufacturingSetupRec@1000 : Record 99000765;
    BEGIN
      ManufacturingSetupRec.GET;
      ManufacturingSetupRec.VALIDATE("Components at Location",'');
      ManufacturingSetupRec.VALIDATE("Current Production Forecast",'');
      ManufacturingSetupRec.VALIDATE("Use Forecast on Locations",TRUE);
      ManufacturingSetupRec.VALIDATE("Combined MPS/MRP Calculation",TRUE);
      EVALUATE(ManufacturingSetupRec."Default Safety Lead Time",'<1D>');
      EVALUATE(ManufacturingSetupRec."Default Dampener Period",'');
      ManufacturingSetupRec.VALIDATE("Default Dampener Quantity",0);
      ManufacturingSetupRec.VALIDATE("Blank Overflow Level",ManufacturingSetupRec."Blank Overflow Level"::"Allow Default Calculation");
      ManufacturingSetupRec.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemSetup@4(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option;FlushingMethod@1002 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);

      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Flushing Method",FlushingMethod);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@75();
    BEGIN
      CLEAR(ItemJournalTemplate);
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      CLEAR(ItemJournalBatch);
      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ConsumptionJournalSetup@226();
    BEGIN
      CLEAR(ConsumptionItemJournalTemplate);
      ConsumptionItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(
        ConsumptionItemJournalTemplate,ConsumptionItemJournalTemplate.Type::Consumption);

      CLEAR(ConsumptionItemJournalBatch);
      ConsumptionItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ConsumptionItemJournalBatch,ConsumptionItemJournalTemplate.Type,
        ConsumptionItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE OutputJournalSetup@144();
    BEGIN
      CLEAR(OutputItemJournalTemplate);
      OutputItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(OutputItemJournalTemplate,OutputItemJournalTemplate.Type::Output);

      CLEAR(OutputItemJournalBatch);
      OutputItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(
        OutputItemJournalBatch,OutputItemJournalTemplate.Type,OutputItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE ClearJournal@134(ItemJournalTemplate@1002 : Record 82;ItemJournalBatch@1001 : Record 233);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CLEAR(ItemJournalLine);
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalTemplate.Name);
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.DELETEALL;
    END;

    LOCAL PROCEDURE LocationSetup@2(VAR Location@1000 : Record 14;RequireReceive@1009 : Boolean;RequireShipment@1007 : Boolean;RequirePutAway@1010 : Boolean;RequirePick@1008 : Boolean;BinMandatory@1001 : Boolean;NoOfDedicBins@1006 : Integer;NoOfOtherBins@1005 : Integer);
    VAR
      WarehouseEmployee@1004 : Record 7301;
      BinCount@1002 : Integer;
    BEGIN
      LibraryWarehouse.CreateLocationWMS(Location,BinMandatory,RequirePutAway,RequirePick,RequireReceive,RequireShipment);

      FOR BinCount := 1 TO NoOfOtherBins DO
        CreateBins(Location,'bin' + FORMAT(BinCount),FALSE);
      FOR BinCount := 1 TO NoOfDedicBins DO
        CreateBins(Location,'bin' + FORMAT(BinCount + NoOfOtherBins),TRUE);

      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
    END;

    LOCAL PROCEDURE CreateBins@3(Location@1000 : Record 14;BinName@1001 : Text[20];Dedicated@1002 : Boolean);
    VAR
      Bin@1003 : Record 7354;
    BEGIN
      LibraryWarehouse.CreateBin(Bin,Location.Code,BinName,'','');
      Bin.VALIDATE(Dedicated,Dedicated);
      Bin.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ParentItemSetupOnBOM@9(VAR ParentItem@1000 : Record 27;ProductionBOMHeader@1001 : Record 99000771);
    BEGIN
      // Create parent item
      ItemSetup(ParentItem,ParentItem."Replenishment System"::"Prod. Order",ParentItem."Flushing Method"::Manual);

      // Uncertify production BOM and set UOM as the base UOM of the parent item
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::New);
      ProductionBOMHeader.MODIFY(TRUE);
      ProductionBOMHeader.VALIDATE("Unit of Measure Code",ParentItem."Base Unit of Measure");
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);

      // Set the production BOM on the item
      ParentItem.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      ParentItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ParentItemSetupOnBOMAndRouting@11(VAR ParentItem@1000 : Record 27;ProductionBOMHeader@1001 : Record 99000771;RoutingHeader@1002 : Record 99000763);
    BEGIN
      ParentItemSetupOnBOM(ParentItem,ProductionBOMHeader);
      ParentItem.VALIDATE("Routing No.",RoutingHeader."No.");
      ParentItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBOM@6(VAR ProductionBOMHeader@1000 : Record 99000771;NoOfComponents@1002 : Integer;QtyPer@1001 : Integer);
    VAR
      ChildItem@1004 : Record 27;
      UnitOfMeasure@1005 : Record 204;
      ProductionBOMLine@1006 : Record 99000772;
      Counter@1003 : Integer;
    BEGIN
      // Choose any unit of measure
      UnitOfMeasure.INIT;
      UnitOfMeasure.FINDFIRST;
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,UnitOfMeasure.Code);

      // Create component lines in the BOM
      FOR Counter := 1 TO NoOfComponents DO BEGIN
        ItemSetup(ChildItem,ChildItem."Replenishment System"::Purchase,ChildItem."Flushing Method"::Manual);
        LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',
          ProductionBOMLine.Type::Item,ChildItem."No.",QtyPer);
      END;

      // Certify BOM
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWorkCenter@73(VAR WorkCenter@1001 : Record 99000754;FlushingMethod@1004 : Option);
    BEGIN
      LibraryManufacturing.CreateWorkCenterWithCalendar(WorkCenter);
      WorkCenter.VALIDATE(Capacity,1);
      WorkCenter.VALIDATE("Flushing Method",FlushingMethod);
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMachineCenter@77(VAR MachineCenter@1000 : Record 99000758;WorkCenter@1001 : Record 99000754;FlushingMethod@1002 : Option);
    BEGIN
      LibraryManufacturing.CreateMachineCenterWithCalendar(MachineCenter,WorkCenter."No.",1);
      MachineCenter.VALIDATE("Flushing Method",FlushingMethod);
      MachineCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RoutingSetup@84(VAR RoutingHeader@1000 : Record 99000763;VAR WorkCenter@1002 : ARRAY [2] OF Record 99000754;VAR MachineCenter@1003 : Record 99000758);
    BEGIN
      CreateWorkCenter(WorkCenter[1],WorkCenter[1]."Flushing Method"::Manual);
      CreateMachineCenter(MachineCenter,WorkCenter[1],MachineCenter."Flushing Method"::Manual);
      CreateWorkCenter(WorkCenter[2],WorkCenter[2]."Flushing Method"::Manual);

      CreateRouting(RoutingHeader,MachineCenter,WorkCenter[2]);

      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRouting@236(VAR RoutingHeader@1000 : Record 99000763;MachineCenter@1001 : Record 99000758;WorkCenter@1002 : Record 99000754);
    VAR
      RoutingLine@1003 : Record 99000764;
    BEGIN
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);

      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'',ROUTING_LINE_10,RoutingLine.Type::"Machine Center",MachineCenter."No.");
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'',ROUTING_LINE_20,RoutingLine.Type::"Work Center",WorkCenter."No.");
    END;

    LOCAL PROCEDURE SetBinsOnWC@87(VAR WorkCenter@1003 : Record 99000754;LocationCode@1004 : Code[10];ToBinCode@1000 : Code[20];FromBinCode@1001 : Code[20];OSFBBinCode@1002 : Code[20]);
    BEGIN
      WorkCenter.VALIDATE("Location Code",LocationCode);
      WorkCenter.VALIDATE("To-Production Bin Code",ToBinCode);
      WorkCenter.VALIDATE("From-Production Bin Code",FromBinCode);
      WorkCenter.VALIDATE("Open Shop Floor Bin Code",OSFBBinCode);
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetBinsOnMC@88(VAR MachineCenter@1003 : Record 99000758;ToBinCode@1002 : Code[20];FromBinCode@1001 : Code[20];OSFBBinCode@1000 : Code[20]);
    BEGIN
      MachineCenter.VALIDATE("To-Production Bin Code",ToBinCode);
      MachineCenter.VALIDATE("From-Production Bin Code",FromBinCode);
      MachineCenter.VALIDATE("Open Shop Floor Bin Code",OSFBBinCode);
      MachineCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetBinsOnLocation@89(VAR Location@1003 : Record 14;ToBinCode@1002 : Code[20];FromBinCode@1001 : Code[20];OSFBBinCode@1000 : Code[20]);
    BEGIN
      Location.VALIDATE("To-Production Bin Code",ToBinCode);
      Location.VALIDATE("From-Production Bin Code",FromBinCode);
      Location.VALIDATE("Open Shop Floor Bin Code",OSFBBinCode);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@49(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;Item@1004 : Record 27;Location@1005 : Record 14;Bin@1006 : Record 7354;Quantity@1003 : Integer;ShipmentDate@1002 : Date);
    BEGIN
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,'',Item."No.",Quantity,Location.Code,ShipmentDate);
      IF NOT Location."Require Shipment" THEN
        SalesLine.VALIDATE("Bin Code",Bin.Code);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ReserveSalesLine@29(VAR SalesLine@1000 : Record 37;FullReservation@1001 : Boolean;QtyToReserve@1002 : Integer);
    VAR
      ReservationManagement@1004 : Codeunit 99000845;
    BEGIN
      ReservationManagement.SetSalesLine(SalesLine);
      ReservationManagement.AutoReserve(FullReservation,'',SalesLine."Shipment Date",
        ROUND(QtyToReserve / SalesLine."Qty. per Unit of Measure",0.00001),QtyToReserve);
      SalesLine.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
    END;

    LOCAL PROCEDURE ReserveComponentLine@76(VAR ProdOrderComp@1000 : Record 5407;FullReservation@1001 : Boolean;QtyToReserve@1002 : Integer);
    VAR
      ReservationManagement@1004 : Codeunit 99000845;
    BEGIN
      ReservationManagement.SetProdOrderComponent(ProdOrderComp);
      ReservationManagement.AutoReserve(FullReservation,'',ProdOrderComp."Due Date",
        ROUND(QtyToReserve / ProdOrderComp."Qty. per Unit of Measure",0.00001),QtyToReserve);
      ProdOrderComp.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
    END;

    LOCAL PROCEDURE CreateInternalMovementGetBin@13(VAR InternalMovementHeader@1004 : Record 7346;Item@1000 : Record 27;Location@1003 : Record 14;ToBin@1005 : Record 7354;BinContentFilter@1001 : Code[100]);
    BEGIN
      LibraryWarehouse.CreateInternalMovementHeader(InternalMovementHeader,Location.Code,ToBin.Code);
      LibraryWarehouse.GetBinContentInternalMovement(InternalMovementHeader,Location.Code,Item."No.",BinContentFilter);
    END;

    LOCAL PROCEDURE CreateInternalMovement@303(VAR InternalMovementHeader@1000 : Record 7346;Location@1001 : Record 14;ToBin@1002 : Record 7354;Item@1003 : Record 27;FromBin@1004 : Record 7354;Quantity@1005 : Decimal);
    VAR
      InternalMovementLine@1006 : Record 7347;
    BEGIN
      LibraryWarehouse.CreateInternalMovementHeader(InternalMovementHeader,Location.Code,ToBin.Code);
      LibraryWarehouse.CreateInternalMovementLine(
        InternalMovementHeader,InternalMovementLine,Item."No.",FromBin.Code,ToBin.Code,Quantity);
      InternalMovementLine.VALIDATE("From Bin Code",FromBin.Code);
      InternalMovementLine.VALIDATE("To Bin Code",ToBin.Code);
      InternalMovementLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetBinOnWhseShipmentLines@22(WarehouseShipmentHeader@1000 : Record 7320;Bin@1002 : Record 7354);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      WarehouseShipmentLine.INIT;
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLine.FINDSET(TRUE);

      IF WarehouseShipmentHeader.Status = WarehouseShipmentHeader.Status::Released THEN
        LibraryWarehouse.ReopenWhseShipment(WarehouseShipmentHeader);

      REPEAT
        WarehouseShipmentLine.VALIDATE("Bin Code",Bin.Code);
        WarehouseShipmentLine.MODIFY(TRUE);
      UNTIL WarehouseShipmentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SetBinAndCreateWhsePick@15(Location@1002 : Record 14;Bin@1003 : Record 7354);
    VAR
      WarehouseShipmentHeader@1001 : Record 7320;
    BEGIN
      WarehouseShipmentHeader.INIT;
      WarehouseShipmentHeader.SETCURRENTKEY("Location Code");
      WarehouseShipmentHeader.SETRANGE("Location Code",Location.Code);
      WarehouseShipmentHeader.FINDLAST;
      SetBinOnWhseShipmentLines(WarehouseShipmentHeader,Bin);
      LibraryWarehouse.CreateWhsePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE AutoFillQtyAndRegisterInvtMvmt@36(Location@1000 : Record 14);
    VAR
      WarehouseActivityHeader@1001 : Record 5766;
    BEGIN
      WarehouseActivityHeader.INIT;
      WarehouseActivityHeader.SETCURRENTKEY("Location Code");
      WarehouseActivityHeader.SETRANGE("Location Code",Location.Code);
      WarehouseActivityHeader.FINDLAST;
      LibraryWarehouse.AutoFillQtyInventoryActivity(WarehouseActivityHeader);
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE RegisterInventoryMovement@35(Location@1000 : Record 14);
    VAR
      WarehouseActivityHeader@1001 : Record 5766;
    BEGIN
      WarehouseActivityHeader.INIT;
      WarehouseActivityHeader.SETCURRENTKEY("Location Code");
      WarehouseActivityHeader.SETRANGE("Location Code",Location.Code);
      WarehouseActivityHeader.FINDLAST;
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE FindChild@45(ParentItem@1003 : Record 27;VAR ChildItem@1000 : Record 27;ChildIndex@1001 : Integer);
    VAR
      ProductionBOMLine@1002 : Record 99000772;
    BEGIN
      ProductionBOMLine.SETRANGE("Production BOM No.",ParentItem."Production BOM No.");
      ProductionBOMLine.FINDSET(TRUE);

      IF ChildIndex > 1 THEN
        ProductionBOMLine.NEXT(ChildIndex - 1);

      ChildItem.GET(ProductionBOMLine."No.");
    END;

    LOCAL PROCEDURE FindBin@12(VAR Bin@1002 : Record 7354;Location@1000 : Record 14;Dedicated@1001 : Boolean;BinIndex@1003 : Integer);
    BEGIN
      Bin.INIT;
      Bin.RESET;
      Bin.SETRANGE("Location Code",Location.Code);
      IF Location."Directed Put-away and Pick" THEN
        Bin.SETRANGE("Zone Code",'PRODUCTION');
      Bin.SETRANGE(Dedicated,Dedicated);
      Bin.FINDSET(TRUE);

      IF BinIndex > 1 THEN
        Bin.NEXT(BinIndex - 1);
    END;

    LOCAL PROCEDURE FindComponent@78(VAR ProdOrderComp@1002 : Record 5407;ProdOrderHdr@1000 : Record 5405;ComponentItem@1001 : Record 27;ComponentIndex@1003 : Integer);
    BEGIN
      ProdOrderComp.INIT;
      ProdOrderComp.RESET;
      ProdOrderComp.SETRANGE("Prod. Order No.",ProdOrderHdr."No.");
      ProdOrderComp.SETRANGE("Item No.",ComponentItem."No.");
      ProdOrderComp.FINDSET(TRUE);

      IF ComponentIndex > 1 THEN
        ProdOrderComp.NEXT(ComponentIndex - 1);
    END;

    LOCAL PROCEDURE ChangeFlushingMethodOnItem@232(VAR Item@1000 : Record 27;FlushingMethod@1001 : Option);
    BEGIN
      Item.VALIDATE("Flushing Method",FlushingMethod);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRelProdOrderAndRefresh@96(VAR ProductionOrder@1000 : Record 5405;ItemNo@1003 : Code[20];Quantity@1004 : Decimal;LocationCode@1001 : Code[10];OutputBinCode@1002 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.VALIDATE("Bin Code",OutputBinCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE SetBinCodeOnCompLines@101(VAR ProductionOrder@1000 : Record 5405;Bin@1002 : Record 7354);
    VAR
      ProdOrderComponent@1005 : Record 5407;
    BEGIN
      ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderComponent.FINDSET(TRUE);
      REPEAT
        ProdOrderComponent."Bin Code" := Bin.Code;
        ProdOrderComponent.MODIFY(TRUE);
      UNTIL ProdOrderComponent.NEXT = 0;
    END;

    LOCAL PROCEDURE ChangeBinForComponent@238(ProdOrderComponent@1000 : Record 5407;ToBinCode@1001 : Code[20]);
    BEGIN
      ProdOrderComponent."Bin Code" := ToBinCode;
      ProdOrderComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeQtyOnCompLines@206(ProductionOrder@1000 : Record 5405;NewQuantity@1002 : Decimal);
    VAR
      ProdOrderComponent@1001 : Record 5407;
    BEGIN
      ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderComponent.FINDSET(TRUE);
      REPEAT
        ProdOrderComponent.VALIDATE("Quantity per",NewQuantity);
        ProdOrderComponent.MODIFY(TRUE);
      UNTIL ProdOrderComponent.NEXT = 0;
    END;

    LOCAL PROCEDURE ChangeFromBinCodeOnIntMovLines@271(InternalMovementHeader@1000 : Record 7346;NewBin@1002 : Record 7354);
    VAR
      InternalMovementLine@1001 : Record 7347;
    BEGIN
      CLEAR(InternalMovementLine);
      InternalMovementLine.SETRANGE("No.",InternalMovementHeader."No.");
      InternalMovementLine.FINDSET(TRUE);
      REPEAT
        InternalMovementLine.VALIDATE("From Bin Code",NewBin.Code);
        InternalMovementLine.MODIFY(TRUE);
      UNTIL InternalMovementLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ChangeQtyOnIntMovLines@272(InternalMovementHeader@1000 : Record 7346;Qty@1002 : Decimal);
    VAR
      InternalMovementLine@1001 : Record 7347;
    BEGIN
      CLEAR(InternalMovementLine);
      InternalMovementLine.SETRANGE("No.",InternalMovementHeader."No.");
      InternalMovementLine.FINDSET(TRUE);
      REPEAT
        InternalMovementLine.VALIDATE(Quantity,Qty);
        InternalMovementLine.MODIFY(TRUE);
      UNTIL InternalMovementLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ChangeItemQtyOnInternalMvmt@304(InternalMovementHeader@1000 : Record 7346;Item@1001 : Record 27;Quantity@1002 : Decimal);
    VAR
      InternalMovementLine@1003 : Record 7347;
    BEGIN
      InternalMovementLine.SETRANGE("No.",InternalMovementHeader."No.");
      InternalMovementLine.SETRANGE("Item No.",Item."No.");
      InternalMovementLine.FINDSET(TRUE);
      REPEAT
        InternalMovementLine.VALIDATE(Quantity,Quantity);
        InternalMovementLine.MODIFY(TRUE);
      UNTIL InternalMovementLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalculateAndPostConsumption@227(ProductionOrder@1000 : Record 5405);
    BEGIN
      ClearJournal(ConsumptionItemJournalTemplate,ConsumptionItemJournalBatch);
      COMMIT;
      LibraryManufacturing.CalculateConsumption(
        ProductionOrder."No.",ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
      LibraryInventory.PostItemJournalLine(ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE AddInventoryNonDirectLocation@5(Item@1003 : Record 27;Location@1000 : Record 14;Bin@1001 : Record 7354;Qty@1004 : Integer);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      ClearJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Qty);
      ItemJournalLine.VALIDATE("Location Code",Location.Code);
      ItemJournalLine.VALIDATE("Bin Code",Bin.Code);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE AddVariantsToItem@217(Item@1000 : Record 27;VariantCode@1001 : Code[10]);
    VAR
      ItemVariant@1003 : Record 5401;
    BEGIN
      CLEAR(ItemVariant);
      ItemVariant.INIT;
      ItemVariant.VALIDATE("Item No.",Item."No.");
      ItemVariant.VALIDATE(Code,VariantCode);
      ItemVariant.INSERT(TRUE);
    END;

    LOCAL PROCEDURE AddInvForVariantNonDirectedLoc@218(Item@1000 : Record 27;VariantCode@1001 : Code[10];Location@1002 : Record 14;Bin@1003 : Record 7354;Quantity@1004 : Decimal);
    VAR
      ItemJournalLine@1006 : Record 83;
    BEGIN
      ClearJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);

      ItemJournalLine.VALIDATE("Variant Code",VariantCode);
      ItemJournalLine.VALIDATE("Location Code",Location.Code);
      ItemJournalLine.VALIDATE("Bin Code",Bin.Code);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE AddComponentToProdOrder@231(ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];QuantityPer@1002 : Decimal;LocationCode@1003 : Code[10];BinCode@1004 : Code[20];FlushingMethod@1006 : Option);
    VAR
      ProdOrderComponent@1005 : Record 5407;
    BEGIN
      ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderComponent.FINDLAST;

      ProdOrderComponent.INIT;
      ProdOrderComponent."Line No." += 10000;
      ProdOrderComponent.VALIDATE("Item No.",ItemNo);
      ProdOrderComponent.VALIDATE("Location Code",LocationCode);
      ProdOrderComponent.VALIDATE("Flushing Method",FlushingMethod);
      ProdOrderComponent.VALIDATE("Bin Code",BinCode);
      ProdOrderComponent.VALIDATE("Quantity per",QuantityPer);
      ProdOrderComponent.INSERT(TRUE);
    END;

    LOCAL PROCEDURE ExplodeOutputJournal@229(ItemNo@1002 : Code[20];ProductionOrderNo@1004 : Code[20]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      ClearJournal(OutputItemJournalTemplate,OutputItemJournalBatch);

      LibraryManufacturing.CreateOutputJournal(
        ItemJournalLine,OutputItemJournalTemplate,OutputItemJournalBatch,ItemNo,ProductionOrderNo);

      CODEUNIT.RUN(CODEUNIT::"Output Jnl.-Expl. Route",ItemJournalLine);
    END;

    LOCAL PROCEDURE ExplodeAndPostOutputJournal@327(ItemNo@1002 : Code[20];ProductionOrderNo@1004 : Code[20]);
    BEGIN
      ExplodeOutputJournal(ItemNo,ProductionOrderNo);
      LibraryInventory.PostItemJournalLine(OutputItemJournalTemplate.Name,OutputItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE ChangeVariantAndBinOfComponent@219(ProductionOrder@1000 : Record 5405;VariantCode@1001 : Code[10];BinCode@1002 : Code[20];ItemNo@1003 : Code[20]);
    VAR
      ProdOrderComponent@1004 : Record 5407;
    BEGIN
      ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      IF ItemNo <> '' THEN
        ProdOrderComponent.SETRANGE("Item No.",ItemNo);
      ProdOrderComponent.FINDSET(TRUE);
      REPEAT
        ProdOrderComponent.VALIDATE("Variant Code",VariantCode);
        ProdOrderComponent."Bin Code" := BinCode;
        ProdOrderComponent.MODIFY(TRUE);
      UNTIL ProdOrderComponent.NEXT = 0;
    END;

    LOCAL PROCEDURE FillQtyToHandle@220(ProductionOrder@1000 : Record 5405;ActionType@1001 : Option;QtyToHandle@1002 : Decimal;ActivityType@1003 : Option);
    VAR
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETCURRENTKEY(
        "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.","Unit of Measure Code");
      WarehouseActivityLine.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
      WarehouseActivityLine.SETRANGE("Source Subtype",ProductionOrder.Status);
      WarehouseActivityLine.SETRANGE("Source No.",ProductionOrder."No.");
      WarehouseActivityLine.SETRANGE("Source Document",WarehouseActivityLine."Source Document"::"Prod. Consumption");
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityLine.VALIDATE("Qty. to Handle",QtyToHandle);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DeleteActivityTypeWithSrcDoc@224(ProductionOrder@1000 : Record 5405;Location@1001 : Record 14;ActivityType@1002 : Option);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
    BEGIN
      WarehouseActivityHeader.SETCURRENTKEY("Source Document","Source No.","Location Code");
      WarehouseActivityHeader.SETRANGE("Source Subtype",ProductionOrder.Status);
      WarehouseActivityHeader.SETRANGE("Source No.",ProductionOrder."No.");
      WarehouseActivityHeader.SETRANGE("Location Code",Location.Code);
      WarehouseActivityHeader.SETRANGE(Type,ActivityType);
      WarehouseActivityHeader.FINDFIRST;
      WarehouseActivityHeader.DELETE(TRUE);
    END;

    LOCAL PROCEDURE ChangeBinInWhseActivityLine@225(ProductionOrder@1000 : Record 5405;ActivityType@1001 : Option;Quantity@1002 : Decimal;BinCode@1003 : Code[20]);
    VAR
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETCURRENTKEY(
        "Activity Type","No.","Location Code","Source Document","Source No.","Action Type","Zone Code");
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.SETRANGE("Source No.",ProductionOrder."No.");
      WarehouseActivityLine.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
      WarehouseActivityLine.SETRANGE("Location Code",ProductionOrder."Location Code");
      WarehouseActivityLine.SETRANGE(Quantity,Quantity);
      WarehouseActivityLine.FINDSET(TRUE);
      REPEAT
        WarehouseActivityLine.VALIDATE("Bin Code",BinCode);
        WarehouseActivityLine.MODIFY(TRUE);
      UNTIL WarehouseActivityLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SplitWhseActivityLine@207(ProductionOrder@1000 : Record 5405;ActionType@1001 : Option;QtyToHandle@1002 : Decimal);
    VAR
      WarehouseActivityLine@1003 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETCURRENTKEY(
        "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.","Unit of Measure Code");
      WarehouseActivityLine.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
      WarehouseActivityLine.SETRANGE("Source Subtype",ProductionOrder.Status);
      WarehouseActivityLine.SETRANGE("Source No.",ProductionOrder."No.");
      WarehouseActivityLine.SETRANGE("Source Document",WarehouseActivityLine."Source Document"::"Prod. Consumption");
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityLine.VALIDATE("Qty. to Handle",QtyToHandle);
      WarehouseActivityLine.MODIFY(TRUE);
      WarehouseActivityLine.SplitLine(WarehouseActivityLine);
    END;

    LOCAL PROCEDURE DeleteWhseActivityLine@209(ProductionOrder@1000 : Record 5405;ActionType@1001 : Option);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETCURRENTKEY(
        "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.","Unit of Measure Code");
      WarehouseActivityLine.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
      WarehouseActivityLine.SETRANGE("Source Subtype",ProductionOrder.Status);
      WarehouseActivityLine.SETRANGE("Source No.",ProductionOrder."No.");
      WarehouseActivityLine.SETRANGE("Source Document",WarehouseActivityLine."Source Document"::"Prod. Consumption");
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.FINDLAST;
      WarehouseActivityLine.DELETE(TRUE);
    END;

    LOCAL PROCEDURE AutofillQtyToHandle@214(ProductionOrder@1000 : Record 5405);
    VAR
      WarehouseActivityHeader@1001 : Record 5766;
    BEGIN
      WarehouseActivityHeader.SETCURRENTKEY("Source Document","Source No.","Location Code");
      WarehouseActivityHeader.SETRANGE("Source Document",WarehouseActivityHeader."Source Document"::"Prod. Consumption");
      WarehouseActivityHeader.SETRANGE("Source No.",ProductionOrder."No.");
      WarehouseActivityHeader.FINDFIRST;
      LibraryWarehouse.AutoFillQtyInventoryActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE DeleteQtyToHandle@215(ProductionOrder@1000 : Record 5405);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETCURRENTKEY(
        "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.","Unit of Measure Code");
      WarehouseActivityLine.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
      WarehouseActivityLine.SETRANGE("Source Subtype",ProductionOrder.Status);
      WarehouseActivityLine.SETRANGE("Source No.",ProductionOrder."No.");
      WarehouseActivityLine.SETRANGE("Source Document",WarehouseActivityLine."Source Document"::"Prod. Consumption");
      WarehouseActivityLine.DeleteQtyToHandle(WarehouseActivityLine);
    END;

    LOCAL PROCEDURE GetLastActvHdrCreatedNoSource@62(VAR WhseActivityHdr@1003 : Record 5766;Location@1002 : Record 14;ActivityType@1005 : Option);
    BEGIN
      WhseActivityHdr.INIT;
      WhseActivityHdr.SETRANGE("Location Code",Location.Code);
      WhseActivityHdr.SETRANGE(Type,ActivityType);
      WhseActivityHdr.FINDLAST;
    END;

    LOCAL PROCEDURE GetLastActvHdrCreatedWithSrc@70(VAR WhseActivityHdr@1003 : Record 5766;Location@1002 : Record 14;ActivityType@1005 : Option;SourceDoc@1000 : Option;SourceNo@1001 : Code[30]);
    BEGIN
      WhseActivityHdr.INIT;
      WhseActivityHdr.SETRANGE("Location Code",Location.Code);
      WhseActivityHdr.SETRANGE(Type,ActivityType);
      WhseActivityHdr.SETRANGE("Source Document",SourceDoc);
      WhseActivityHdr.SETRANGE("Source No.",SourceNo);
      WhseActivityHdr.FINDLAST;
    END;

    LOCAL PROCEDURE AssertActivityHdr@17(VAR WhseActivityHdr@1003 : Record 5766;Location@1002 : Record 14;ActivityType@1005 : Option;SourceDoc@1000 : Option;SourceNo@1001 : Code[20];NoOfLines@1004 : Integer;Message@1006 : Text[30]);
    BEGIN
      WhseActivityHdr.INIT;
      WhseActivityHdr.SETCURRENTKEY("Source Document","Source No.","Location Code");
      WhseActivityHdr.SETRANGE("Source Document",SourceDoc);
      WhseActivityHdr.SETRANGE("Source No.",SourceNo);
      WhseActivityHdr.SETRANGE("Location Code",Location.Code);
      WhseActivityHdr.SETRANGE(Type,ActivityType);
      Assert.AreEqual(NoOfLines,WhseActivityHdr.COUNT,'There are no ' + FORMAT(NoOfLines) + ' ' + Message + ' within the filter: ' +
        WhseActivityHdr.GETFILTERS);
      IF NoOfLines > 0 THEN
        WhseActivityHdr.FINDSET(TRUE);
    END;

    LOCAL PROCEDURE AssertNoActivityHdr@133(VAR WhseActivityHdr@1003 : Record 5766;Location@1002 : Record 14;ActivityType@1005 : Option;SourceDoc@1000 : Option;SourceNo@1001 : Code[20];Message@1006 : Text[30]);
    BEGIN
      AssertActivityHdr(WhseActivityHdr,Location,ActivityType,SourceDoc,SourceNo,0,Message);
    END;

    LOCAL PROCEDURE AssertInvtMovement@204(ProductionOrder@1000 : Record 5405;Item@1010 : Record 27;Location@1005 : Record 14;FromBin@1001 : Record 7354;ToBin@1002 : Record 7354;Quantity@1006 : Decimal;QuantityToHandle@1009 : Decimal;ExpectedCount@1008 : Integer);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      AssertActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",ExpectedCount,'Inventory Movement');

      IF ExpectedCount > 0 THEN BEGIN
        AssertActivityLine(WarehouseActivityHeader,Item,FromBin,WarehouseActivityLine."Action Type"::Take,
          Quantity,QuantityToHandle,ExpectedCount,'Inventory Movement line');
        AssertActivityLine(WarehouseActivityHeader,Item,ToBin,WarehouseActivityLine."Action Type"::Place,
          Quantity,QuantityToHandle,ExpectedCount,'Inventory Movement line');
      END;
    END;

    LOCAL PROCEDURE AssertQtyOnInvtPick@150(WhseActivityHdr@1001 : Record 5766;Qty@1007 : Decimal);
    VAR
      WhseActivityLine@1000 : Record 5767;
    BEGIN
      CLEAR(WhseActivityLine);
      WITH WhseActivityLine DO BEGIN
        SETRANGE("Activity Type",WhseActivityHdr.Type);
        SETRANGE("No.",WhseActivityHdr."No.");
        FINDFIRST;
        TESTFIELD(Quantity,Qty);
      END;
    END;

    LOCAL PROCEDURE AssertWhseActivityHdr@23(VAR WhseActivityHdr@1003 : Record 5766;Location@1002 : Record 14;ActivityType@1005 : Option;Message@1006 : Text[30]);
    BEGIN
      WhseActivityHdr.INIT;
      WhseActivityHdr.SETRANGE("Location Code",Location.Code);
      WhseActivityHdr.SETRANGE(Type,ActivityType);
      WhseActivityHdr.FINDLAST;
      Assert.IsTrue(WhseActivityHdr.COUNT > 0,'There are no ' + Message + ' within the filter: ' +
        WhseActivityHdr.GETFILTERS);
    END;

    LOCAL PROCEDURE AssertActivityLine@18(WhseActivityHdr@1001 : Record 5766;Item@1002 : Record 27;Bin@1003 : Record 7354;ActionType@1006 : Option;Qty@1007 : Decimal;QtyToHandle@1008 : Decimal;NoOfLines@1004 : Integer;Message@1005 : Text[30]);
    VAR
      WhseActivityLine@1000 : Record 5767;
    BEGIN
      CLEAR(WhseActivityLine);
      WhseActivityLine.SETRANGE("No.",WhseActivityHdr."No.");
      WhseActivityLine.SETRANGE("Item No.",Item."No.");
      WhseActivityLine.SETRANGE("Bin Code",Bin.Code);
      WhseActivityLine.SETRANGE("Action Type",ActionType);
      WhseActivityLine.SETRANGE(Quantity,Qty);
      WhseActivityLine.SETRANGE("Qty. to Handle",QtyToHandle);
      Assert.AreEqual(NoOfLines,WhseActivityLine.COUNT,'There are no ' + FORMAT(NoOfLines) + ' ' + Message + ' within the filter: ' +
        WhseActivityLine.GETFILTERS);
    END;

    LOCAL PROCEDURE AssertInternalMovementLine@261(InternalMovementHeader@1000 : Record 7346;Item@1001 : Record 27;Location@1003 : Record 14;FromBin@1004 : Record 7354;ToBin@1005 : Record 7354;Qty@1006 : Decimal;ExpectedCount@1007 : Integer);
    VAR
      InternalMovementLine@1002 : Record 7347;
    BEGIN
      CLEAR(InternalMovementLine);
      InternalMovementLine.SETRANGE("No.",InternalMovementHeader."No.");
      InternalMovementLine.SETRANGE("Location Code",Location.Code);
      InternalMovementLine.SETRANGE("From Bin Code",FromBin.Code);
      InternalMovementLine.SETRANGE("To Bin Code",ToBin.Code);
      InternalMovementLine.SETRANGE("Item No.",Item."No.");
      InternalMovementLine.SETRANGE(Quantity,Qty);
      Assert.AreEqual(ExpectedCount,InternalMovementLine.COUNT,'There are no ' + FORMAT(ExpectedCount) +
        ' internal movement lines within the filter: ' + InternalMovementLine.GETFILTERS);
    END;

    LOCAL PROCEDURE AssertInternalMovementDeleted@265(InternalMovementHeader@1000 : Record 7346);
    VAR
      InternalMovementHeaderSecond@1001 : Record 7346;
    BEGIN
      CLEAR(InternalMovementHeaderSecond);
      InternalMovementHeaderSecond.SETRANGE("No.",InternalMovementHeader."No.");
      Assert.AreEqual(0,InternalMovementHeaderSecond.COUNT,'Internal movement is not deleted!');
    END;

    LOCAL PROCEDURE AssertRegisteredInvtMovement@56(VAR RegisteredInvtMovementHdr@1007 : Record 7344;SourceProdOrder@1005 : Record 5405;SourceDoc@1002 : Option;Item@1008 : Record 27;FromBin@1009 : Record 7354;ToBin@1010 : Record 7354;Quantity@1004 : Decimal;ExpectedCountOfHdr@1001 : Integer;ReturnHdrNo@1000 : Integer);
    VAR
      RegisteredInvtMovementLine@1003 : Record 7345;
    BEGIN
      AssertRegisteredInvtMvmtHdr(RegisteredInvtMovementHdr,SourceProdOrder,SourceDoc,ExpectedCountOfHdr,ReturnHdrNo,
        'Registered Inventory Movement');

      IF ExpectedCountOfHdr > 0 THEN BEGIN
        AssertRegisteredInvtMvmtLine(RegisteredInvtMovementHdr,Item,FromBin,RegisteredInvtMovementLine."Action Type"::Take,
          Quantity,1,'Registered Inventory Movement line');
        AssertRegisteredInvtMvmtLine(RegisteredInvtMovementHdr,Item,ToBin,RegisteredInvtMovementLine."Action Type"::Place,
          Quantity,1,'Registered Inventory Movement line');
      END;
    END;

    LOCAL PROCEDURE AssertRegisteredInvtMvmtHdr@221(VAR RegisteredInvtMovementHdr@1000 : Record 7344;SourceProdOrder@1001 : Record 5405;SourceDoc@1002 : Option;ExpectedCountOfHdr@1003 : Integer;ReturnHdrNo@1004 : Integer;Message@1005 : Text[1024]);
    BEGIN
      RegisteredInvtMovementHdr.RESET;
      RegisteredInvtMovementHdr.SETRANGE("Source No.",SourceProdOrder."No.");
      RegisteredInvtMovementHdr.SETRANGE("Source Document",SourceDoc);
      RegisteredInvtMovementHdr.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
      RegisteredInvtMovementHdr.SETRANGE("Source Subtype",SourceProdOrder.Status);

      Assert.AreEqual(
        ExpectedCountOfHdr,RegisteredInvtMovementHdr.COUNT,COPYSTR('There are not ' + FORMAT(ExpectedCountOfHdr) +
          Message + ' within the filter: ' + RegisteredInvtMovementHdr.GETFILTERS,1,1024));

      RegisteredInvtMovementHdr.FINDSET(TRUE);
      IF ReturnHdrNo > 1 THEN
        RegisteredInvtMovementHdr.NEXT(ReturnHdrNo - 1);
    END;

    LOCAL PROCEDURE AssertRegisteredInvtMvmtLine@222(RegisteredInvtMovementHdr@1000 : Record 7344;Item@1006 : Record 27;Bin@1003 : Record 7354;ActionType@1001 : Option;Quantity@1002 : Decimal;ExpectedCount@1004 : Integer;Message@1007 : Text[1024]);
    VAR
      RegisteredInvtMovementLine@1005 : Record 7345;
    BEGIN
      RegisteredInvtMovementLine.SETRANGE("No.",RegisteredInvtMovementHdr."No.");
      RegisteredInvtMovementLine.SETRANGE("Action Type",ActionType);
      RegisteredInvtMovementLine.SETRANGE(Quantity,Quantity);
      RegisteredInvtMovementLine.SETRANGE("Bin Code",Bin.Code);
      RegisteredInvtMovementLine.SETRANGE("Item No.",Item."No.");

      Assert.AreEqual(
        ExpectedCount,RegisteredInvtMovementLine.COUNT,COPYSTR('There are no ' + FORMAT(ExpectedCount) + Message +
          ' within the filter: ' + RegisteredInvtMovementLine.GETFILTERS,1,1024));
    END;

    LOCAL PROCEDURE AssertActivityLineCount@298(WhseActivityHdr@1000 : Record 5766;ExpectedNoOfLines@1001 : Integer);
    VAR
      WhseActivityLine@1002 : Record 5767;
    BEGIN
      WhseActivityLine.SETRANGE("No.",WhseActivityHdr."No.");
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityHdr.Type);
      Assert.AreEqual(ExpectedNoOfLines,WhseActivityLine.COUNT,'Mismatch in number of lines for the warehouse activity header');
    END;

    LOCAL PROCEDURE AssertCannotCreateIntlMvmt@297(InternalMovementHeader@1000 : Record 7346;LocationCode@1002 : Code[10];ToBinCode@1003 : Code[20];Message@1001 : Text[1024]);
    BEGIN
      COMMIT; // as assert error will roll-back
      ASSERTERROR
        LibraryWarehouse.CreateInternalMovementHeader(InternalMovementHeader,LocationCode,ToBinCode);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,Message) > 0,GETLASTERRORTEXT);

      CLEARLASTERROR;
    END;

    LOCAL PROCEDURE AssertCannotCreateInvtMvmt@30(InternalMovementHeader@1000 : Record 7346);
    BEGIN
      COMMIT; // as assert error will roll-back
      ASSERTERROR
        LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,MSG_THERE_NOTHING_TO_HANDLE) > 0,GETLASTERRORTEXT);

      CLEARLASTERROR;
    END;

    LOCAL PROCEDURE AssertCannotCreateInvtMvmtMan@166(WarehouseActivityHeader@1000 : Record 5766;Message@1001 : Text[1024]);
    BEGIN
      COMMIT; // as assert error will roll-back
      ASSERTERROR
        LibraryWarehouse.GetSourceDocInventoryMovement(WarehouseActivityHeader);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,Message) > 0,GETLASTERRORTEXT);

      CLEARLASTERROR;
    END;

    LOCAL PROCEDURE AssertCannotCreateInvtMvmtProd@64(ProductionOrder@1002 : Record 5405);
    VAR
      WarehouseRequest@1001 : Record 5765;
    BEGIN
      COMMIT; // as assert error will roll-back
      ASSERTERROR
        LibraryWarehouse.CreateInvtPutPickMovement(
          WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,MSG_THERE_NOTHING_TO_CREATE) > 0,GETLASTERRORTEXT);

      CLEARLASTERROR;
    END;

    LOCAL PROCEDURE AssertCannotCreateWhsePick@41(Location@1002 : Record 14;Bin@1003 : Record 7354);
    BEGIN
      COMMIT; // as assert error will roll-back
      ASSERTERROR
        SetBinAndCreateWhsePick(Location,Bin);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,MSG_NOTHING_TO_HANDLE) > 0,GETLASTERRORTEXT);

      CLEARLASTERROR;
    END;

    LOCAL PROCEDURE AssertCannotRegisterInvtMovm@139(Location@1000 : Record 14;Message@1002 : Text[1024]);
    BEGIN
      COMMIT; // as assert error will roll-back
      ASSERTERROR
        RegisterInventoryMovement(Location);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,Message) > 0,GETLASTERRORTEXT);

      CLEARLASTERROR;
    END;

    LOCAL PROCEDURE AssertCannotSplitLine@143(ProductionOrder@1000 : Record 5405;Qty@1003 : Decimal;Message@1001 : Text[1024]);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      COMMIT; // as assert error will roll-back
      ASSERTERROR
        SplitWhseActivityLine(ProductionOrder,WarehouseActivityLine."Action Type"::Take,Qty);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,Message) > 0,GETLASTERRORTEXT);

      CLEARLASTERROR;
    END;

    LOCAL PROCEDURE AssertProdOrderComponent@100(ProductionOrder@1000 : Record 5405;ComponentItemNo@1007 : Code[30];RemainingQty@1009 : Decimal;ExpQuantity@1001 : Decimal;PickedQuantity@1002 : Decimal;PickedQuantityBase@1003 : Decimal;LocationCode@1008 : Code[30];BinCode@1004 : Code[30];ExpectedCount@1005 : Integer);
    VAR
      ProdOrderComponent@1006 : Record 5407;
    BEGIN
      ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderComponent.SETRANGE("Item No.",ComponentItemNo);
      ProdOrderComponent.SETRANGE("Remaining Quantity",RemainingQty);
      ProdOrderComponent.SETRANGE("Expected Quantity",ExpQuantity);
      ProdOrderComponent.SETRANGE("Qty. Picked",PickedQuantity);
      ProdOrderComponent.SETRANGE("Qty. Picked (Base)",PickedQuantityBase);
      ProdOrderComponent.SETRANGE("Location Code",LocationCode);
      ProdOrderComponent.SETRANGE("Bin Code",BinCode);

      Assert.AreEqual(
        ExpectedCount,ProdOrderComponent.COUNT,'There are no ' + FORMAT(ExpectedCount) +
        ' production order component lines within the filter:  ' + ProdOrderComponent.GETFILTERS);
    END;

    LOCAL PROCEDURE AssertProdOrderLine@317(ProductionOrder@1000 : Record 5405;ItemNo@1004 : Code[20];Quantity@1001 : Integer;LocationCode@1009 : Code[10];BinCode@1002 : Code[20];NoOfLines@1003 : Integer);
    VAR
      ProdOrderLine@1006 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      ProdOrderLine.SETRANGE(Quantity,Quantity);
      ProdOrderLine.SETRANGE("Location Code",LocationCode);
      ProdOrderLine.SETRANGE("Bin Code",BinCode);

      Assert.AreEqual(
        NoOfLines,ProdOrderLine.COUNT,'There are no ' + FORMAT(NoOfLines) +
        ' production order lines within the filter: ' + ProdOrderLine.GETFILTERS);
    END;

    LOCAL PROCEDURE AssertProdOrderRoutingLine@120(ProductionOrder@1000 : Record 5405;OperationNo@1007 : Text[10];Type@1001 : Option;No@1005 : Code[20];LocationCode@1009 : Code[10];ToBinCode@1002 : Code[20];FromBinCode@1003 : Code[20];OSFBBinCode@1004 : Code[20];NoOfLines@1008 : Integer);
    VAR
      ProdOrderRoutingLine@1006 : Record 5409;
    BEGIN
      ProdOrderRoutingLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderRoutingLine.SETRANGE("Operation No.",OperationNo);
      ProdOrderRoutingLine.SETRANGE(Type,Type);
      ProdOrderRoutingLine.SETRANGE("No.",No);
      ProdOrderRoutingLine.SETRANGE("Location Code",LocationCode);
      ProdOrderRoutingLine.SETRANGE("To-Production Bin Code",ToBinCode);
      ProdOrderRoutingLine.SETRANGE("From-Production Bin Code",FromBinCode);
      ProdOrderRoutingLine.SETRANGE("Open Shop Floor Bin Code",OSFBBinCode);

      Assert.AreEqual(
        NoOfLines,ProdOrderRoutingLine.COUNT,'There are no ' + FORMAT(NoOfLines) +
        ' production order routing lines within the filter: ' + ProdOrderRoutingLine.GETFILTERS);
    END;

    LOCAL PROCEDURE AssertOutputJournalLine@336(ProductionOrder@1009 : Record 5405;OperationNo@1008 : Text[10];Type@1007 : Option;No@1005 : Code[20];LocationCode@1004 : Code[10];BinCode@1001 : Code[20];NoOfLines@1000 : Integer);
    VAR
      ItemJournalLine@1006 : Record 83;
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",OutputItemJournalTemplate.Name);
      ItemJournalLine.SETRANGE("Journal Batch Name",OutputItemJournalBatch.Name);
      ItemJournalLine.SETRANGE("Order No.",ProductionOrder."No.");
      ItemJournalLine.SETRANGE("Operation No.",OperationNo);
      ItemJournalLine.SETRANGE(Type,Type);
      ItemJournalLine.SETRANGE("No.",No);
      ItemJournalLine.SETRANGE("Location Code",LocationCode);
      ItemJournalLine.SETRANGE("Bin Code",BinCode);

      Assert.AreEqual(
        NoOfLines,ItemJournalLine.COUNT,
        'There are no ' + FORMAT(NoOfLines) + ' output journal lines within the filter: ' + ItemJournalLine.GETFILTERS);
    END;

    LOCAL PROCEDURE AssertWarehouseEntry@216(BinCode@1000 : Code[20];ItemNo@1001 : Code[20];VariantCode@1002 : Code[10];Quantity@1003 : Decimal;SourceType@1004 : Integer;SourceNo@1005 : Code[20];SourceSubtype@1006 : Option;SourceDoc@1007 : Option;ExpectedCount@1008 : Integer);
    VAR
      WarehouseEntry@1009 : Record 7312;
    BEGIN
      WarehouseEntry.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      WarehouseEntry.SETRANGE("Source Type",SourceType);
      WarehouseEntry.SETRANGE("Source Subtype",SourceSubtype);
      IF SourceType <> DATABASE::"Item Journal Line" THEN
        WarehouseEntry.SETRANGE("Source No.",SourceNo);
      WarehouseEntry.SETRANGE("Source Document",SourceDoc);
      WarehouseEntry.SETRANGE("Bin Code",BinCode);
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      WarehouseEntry.SETRANGE("Variant Code",VariantCode);
      WarehouseEntry.SETRANGE(Quantity,Quantity);

      Assert.AreEqual(
        ExpectedCount,WarehouseEntry.COUNT,'There is wrong number within the filter: ' +
        WarehouseEntry.GETFILTERS);
    END;

    LOCAL PROCEDURE TestSetup@32();
    BEGIN
      ManufacturingSetup;
      ErrorMessageCounter := 0;
    END;

    LOCAL PROCEDURE DedicatedBinTestSetup@99(VAR ParentItem@1000 : Record 27;VAR Location@1003 : Record 14;VAR WorkCenter@1005 : ARRAY [2] OF Record 99000754;VAR MachineCenter@1004 : Record 99000758;VAR ToBin@1008 : ARRAY [2] OF Record 7354;VAR FromBin@1007 : ARRAY [2] OF Record 7354;VAR OSFBBin@1006 : ARRAY [2] OF Record 7354);
    VAR
      RoutingHeader@1001 : Record 99000763;
      BOMHeader@1002 : Record 99000771;
    BEGIN
      // Test setup
      TestSetup;

      // Create Produced item and child
      CreateBOM(BOMHeader,2,2);
      RoutingSetup(RoutingHeader,WorkCenter,MachineCenter);
      ParentItemSetupOnBOMAndRouting(ParentItem,BOMHeader,RoutingHeader);
      PopulateBinsTestSetup(Location,ToBin,FromBin,OSFBBin);

      // Reload location code as it changed
      Location.GET(Location.Code);
    END;

    LOCAL PROCEDURE PopulateBinsTestSetup@142(Location@1003 : Record 14;VAR ToBin@1000 : ARRAY [2] OF Record 7354;VAR FromBin@1001 : ARRAY [2] OF Record 7354;VAR OSFBBin@1002 : ARRAY [2] OF Record 7354);
    BEGIN
      FindBin(ToBin[1],Location,NOT Location."Directed Put-away and Pick",1);
      FindBin(FromBin[1],Location,NOT Location."Directed Put-away and Pick",2);
      FindBin(OSFBBin[1],Location,NOT Location."Directed Put-away and Pick",3);
      FindBin(ToBin[2],Location,NOT Location."Directed Put-away and Pick",4);
      FindBin(FromBin[2],Location,NOT Location."Directed Put-away and Pick",5);
      FindBin(OSFBBin[2],Location,NOT Location."Directed Put-away and Pick",6);
    END;

    LOCAL PROCEDURE ConvertMessage@57(Message@1000 : Text[1024]) : Text[1024];
    VAR
      NewLineChar@1001 : Text[1];
    BEGIN
      NewLineChar[1] := 13;
      EXIT(DELCHR(Message,'=',NewLineChar));
    END;

    [Test]
    PROCEDURE SC1TC11Silver@257();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC1TC11(Location);
    END;

    LOCAL PROCEDURE SC1TC11@256(Location@1006 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1005 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseActivityHeader@1002 : Record 5766;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,20);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,ToBin.Code);
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      // Create inventory movement - no location code
      LibraryWarehouse.CreateInventoryMovementHeader(WarehouseActivityHeader,'');

      // check that get source doc returns error
      AssertCannotCreateInvtMvmtMan(WarehouseActivityHeader,MSG_MUST_SPECIFY_LOCATION);
    END;

    [MessageHandler]
    PROCEDURE TC31MessageHandler@255(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,MSG_HAS_BEEN_CREATED) > 0,Message);
    END;

    [Test]
    [HandlerFunctions(TC31MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC3TC31Silver@254();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,0,2);
      SC3TC31GetBinContent(Location);
    END;

    [Test]
    [HandlerFunctions(TC31MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC3TC31Orange@186();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,0,2);
      SC3TC31GetBinContent(Location);
    END;

    LOCAL PROCEDURE SC3TC31GetBinContent@253(Location@1006 : Record 14);
    VAR
      Item@1000 : Record 27;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
      WhseActivityHdr@1005 : Record 5766;
      WhseActivityLine@1007 : Record 5767;
      InternalMovementHeader@1008 : Record 7346;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FirstBin,10);
      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,SecondBin,FirstBin.Code);

      // Assert internal movement line
      AssertInternalMovementLine(InternalMovementHeader,Item,Location,FirstBin,SecondBin,10,1);

      // set qty to handle and create movement
      LibraryWarehouse.SetQtyToHandleInternalMovement(InternalMovementHeader,5);
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);

      // Verify that inventory movement is created and internal movement deleted
      AssertInternalMovementDeleted(InternalMovementHeader);
      GetLastActvHdrCreatedNoSource(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Movement");
      AssertActivityLine(WhseActivityHdr,Item,FirstBin,WhseActivityLine."Action Type"::Take,5,0,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WhseActivityHdr,Item,SecondBin,WhseActivityLine."Action Type"::Place,5,0,1,MSG_INVENTORY_MOVEMENT_LINE);
    END;

    [Test]
    [HandlerFunctions(TC31MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC3TC32Silver@260();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,0,3);
      SC3TC32GetBinContent(Location);
    END;

    [Test]
    [HandlerFunctions(TC31MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC3TC32Orange@259();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,0,3);
      SC3TC32GetBinContent(Location);
    END;

    LOCAL PROCEDURE SC3TC32GetBinContent@258(Location@1006 : Record 14);
    VAR
      Item@1000 : Record 27;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
      ThirdBin@1009 : Record 7354;
      WhseActivityHdr@1005 : Record 5766;
      WhseActivityLine@1007 : Record 5767;
      InternalMovementHeader@1008 : Record 7346;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);
      FindBin(ThirdBin,Location,FALSE,3);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FirstBin,10);
      AddInventoryNonDirectLocation(Item,Location,SecondBin,20);
      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,ThirdBin,
        FirstBin.Code + '|' + SecondBin.Code);

      // Assert internal movement line
      AssertInternalMovementLine(InternalMovementHeader,Item,Location,FirstBin,ThirdBin,10,1);
      AssertInternalMovementLine(InternalMovementHeader,Item,Location,SecondBin,ThirdBin,20,1);

      // set qty to handle and create movement
      LibraryWarehouse.SetQtyToHandleInternalMovement(InternalMovementHeader,5);
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);

      // Verify that inventory movement is created and internal movement deleted
      AssertInternalMovementDeleted(InternalMovementHeader);
      GetLastActvHdrCreatedNoSource(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Movement");
      AssertActivityLine(WhseActivityHdr,Item,FirstBin,WhseActivityLine."Action Type"::Take,5,0,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WhseActivityHdr,Item,SecondBin,WhseActivityLine."Action Type"::Take,5,0,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WhseActivityHdr,Item,ThirdBin,WhseActivityLine."Action Type"::Place,5,0,2,MSG_INVENTORY_MOVEMENT_LINE);
    END;

    [Test]
    PROCEDURE SC3TC33DirectedLocation@262();
    VAR
      Item@1000 : Record 27;
      FirstBin@1004 : Record 7354;
      InternalMovementHeader@1001 : Record 7346;
    BEGIN
      // Setup
      Initialize;

      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBin,LocationWhite,FALSE,1);

      // Exercise
      COMMIT; // as assert error will roll-back
      ASSERTERROR
        CreateInternalMovementGetBin(InternalMovementHeader,Item,LocationWhite,FirstBin,'');
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,MSG_DIRECT_NO) > 0,GETLASTERRORTEXT);

      CLEARLASTERROR;
    END;

    [Test]
    [HandlerFunctions(TC31MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC3TC37Silver@270();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,0,2);
      SC3TC37Register(Location);
    END;

    [Test]
    [HandlerFunctions(TC31MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC3TC37Orange@269();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,0,2);
      SC3TC37Register(Location);
    END;

    LOCAL PROCEDURE SC3TC37Register@268(Location@1006 : Record 14);
    VAR
      Item@1000 : Record 27;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
      InternalMovementHeader@1008 : Record 7346;
      WarehouseEntry@1010 : Record 7312;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FirstBin,10);
      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,SecondBin,FirstBin.Code);

      // set qty to handle and create movement
      LibraryWarehouse.SetQtyToHandleInternalMovement(InternalMovementHeader,5);
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);

      AutoFillQtyAndRegisterInvtMvmt(Location);

      // Check the warehouse entries
      AssertWarehouseEntry(FirstBin.Code,Item."No.",'',10,DATABASE::"Item Journal Line",'',
        0,WarehouseEntry."Source Document"::"Item Jnl.",1);
      AssertWarehouseEntry(FirstBin.Code,Item."No.",'',-5,0,'',0,0,1);
      AssertWarehouseEntry(SecondBin.Code,Item."No.",'',5,0,'',0,0,1);
    END;

    [MessageHandler]
    PROCEDURE TC38MessageHandler@267(Message@1000 : Text[1024]);
    BEGIN
      ErrorMessageCounter += 1;

      CASE ErrorMessageCounter OF
        1:
          Assert.IsTrue(STRPOS(ConvertMessage(Message),MSG_THERE_NOTHING_TO_HANDLE) > 0,Message);
      END;
    END;

    [Test]
    [HandlerFunctions(TC38MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC3TC38Silver@266();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,0,2);
      SC3TC38NotInTheBin(Location);
    END;

    [Test]
    [HandlerFunctions(TC38MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC3TC38Orange@264();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,0,2);
      SC3TC38NotInTheBin(Location);
    END;

    LOCAL PROCEDURE SC3TC38NotInTheBin@263(Location@1006 : Record 14);
    VAR
      Item@1000 : Record 27;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
      InternalMovementHeader@1008 : Record 7346;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FirstBin,10);
      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,SecondBin,FirstBin.Code);

      // Change from bin code and assert line
      ChangeFromBinCodeOnIntMovLines(InternalMovementHeader,SecondBin);
      AssertInternalMovementLine(InternalMovementHeader,Item,Location,SecondBin,SecondBin,0,1);

      // try to create movement
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);
    END;

    [MessageHandler]
    PROCEDURE TC39MessageHandler@276(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,MSG_HAS_BEEN_CREATED) > 0,Message);
    END;

    [Test]
    [HandlerFunctions(TC39MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC3TC39Silver@275();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,0,2);
      SC3TC39InternalMovManual(Location);
    END;

    [Test]
    [HandlerFunctions(TC39MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC3TC39Orange@274();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,0,2);
      SC3TC39InternalMovManual(Location);
    END;

    LOCAL PROCEDURE SC3TC39InternalMovManual@273(Location@1006 : Record 14);
    VAR
      Item@1000 : Record 27;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      InternalMovementHeader@1008 : Record 7346;
      InternalMovementLine@1001 : Record 7347;
      WhseActivityHdr@1002 : Record 5766;
      WhseActivityLine@1005 : Record 5767;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,2);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FromBin,10);

      LibraryWarehouse.CreateInternalMovementHeader(InternalMovementHeader,Location.Code,ToBin.Code);
      LibraryWarehouse.CreateInternalMovementLine(InternalMovementHeader,InternalMovementLine,Item."No.",FromBin.Code,ToBin.Code,10);
      ChangeQtyOnIntMovLines(InternalMovementHeader,5);

      // create movement
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);

      // Assert invt movement
      AssertInternalMovementDeleted(InternalMovementHeader);
      GetLastActvHdrCreatedNoSource(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Movement");
      AssertActivityLine(WhseActivityHdr,Item,FromBin,WhseActivityLine."Action Type"::Take,5,0,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WhseActivityHdr,Item,ToBin,WhseActivityLine."Action Type"::Place,5,0,1,MSG_INVENTORY_MOVEMENT_LINE);
    END;

    [MessageHandler]
    PROCEDURE TC310MessageHandler@280(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,MSG_HAS_BEEN_CREATED) > 0,Message);
    END;

    [Test]
    [HandlerFunctions(TC310MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC3TC310Silver@279();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,0,2);
      SC3TC310IntlMovManual2Lines(Location);
    END;

    [Test]
    [HandlerFunctions(TC310MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC3TC310Orange@278();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,0,2);
      SC3TC310IntlMovManual2Lines(Location);
    END;

    LOCAL PROCEDURE SC3TC310IntlMovManual2Lines@277(Location@1006 : Record 14);
    VAR
      Item@1000 : Record 27;
      FromBin1@1003 : Record 7354;
      FromBin2@1007 : Record 7354;
      ToBin@1004 : Record 7354;
      InternalMovementHeader@1008 : Record 7346;
      InternalMovementLine@1001 : Record 7347;
      WhseActivityHdr@1002 : Record 5766;
      WhseActivityLine@1005 : Record 5767;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FromBin1,Location,FALSE,1);
      FindBin(FromBin2,Location,FALSE,2);
      FindBin(ToBin,Location,FALSE,3);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FromBin1,10);
      AddInventoryNonDirectLocation(Item,Location,FromBin2,20);

      LibraryWarehouse.CreateInternalMovementHeader(InternalMovementHeader,Location.Code,ToBin.Code);
      LibraryWarehouse.CreateInternalMovementLine(InternalMovementHeader,InternalMovementLine,Item."No.",FromBin1.Code,ToBin.Code,10);
      LibraryWarehouse.CreateInternalMovementLine(InternalMovementHeader,InternalMovementLine,Item."No.",FromBin2.Code,ToBin.Code,20);
      ChangeQtyOnIntMovLines(InternalMovementHeader,5);

      // create movement
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);

      // Assert invt movement
      AssertInternalMovementDeleted(InternalMovementHeader);
      GetLastActvHdrCreatedNoSource(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Movement");
      AssertActivityLine(WhseActivityHdr,Item,FromBin1,WhseActivityLine."Action Type"::Take,5,0,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WhseActivityHdr,Item,FromBin2,WhseActivityLine."Action Type"::Take,5,0,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WhseActivityHdr,Item,ToBin,WhseActivityLine."Action Type"::Place,5,0,2,MSG_INVENTORY_MOVEMENT_LINE);
    END;

    [Test]
    [HandlerFunctions(TC31MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC3TC313Silver@300();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC3TC313(Location);
    END;

    LOCAL PROCEDURE SC3TC313@299(Location@1006 : Record 14);
    VAR
      TestItem@1000 : Record 27;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      InternalMovementHeader@1001 : Record 7346;
      WarehouseActivityHeader@1005 : Record 5766;
      WarehouseActivityLine@1007 : Record 5767;
      WarehouseEntry@1008 : Record 7312;
    BEGIN
      // Test setup
      TestSetup;

      ItemSetup(TestItem,TestItem."Replenishment System"::Purchase,TestItem."Flushing Method"::Manual);

      FindBin(FromBin,Location,FALSE,1);
      AddInventoryNonDirectLocation(TestItem,Location,FromBin,10);

      // create Internal Movement
      FindBin(ToBin,Location,FALSE,2);
      CreateInternalMovement(InternalMovementHeader,Location,ToBin,TestItem,FromBin,10);
      ChangeItemQtyOnInternalMvmt(InternalMovementHeader,TestItem,5);

      // create Inventory Movement
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);
      AssertInternalMovementDeleted(InternalMovementHeader);

      GetLastActvHdrCreatedNoSource(
        WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement");
      AssertActivityLine(
        WarehouseActivityHeader,TestItem,FromBin,WarehouseActivityLine."Action Type"::Take,
        5,0,1,'Inventory Movement line');
      AssertActivityLine(
        WarehouseActivityHeader,TestItem,ToBin,WarehouseActivityLine."Action Type"::Place,
        5,0,1,'Inventory Movement line');

      // autofill Qty. to Handle and Register Invt. Movement
      LibraryWarehouse.AutoFillQtyInventoryActivity(WarehouseActivityHeader);
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);

      AssertNoActivityHdr(
        WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::" ",'','Inventory Movement Header');

      AssertWarehouseEntry(
        FromBin.Code,TestItem."No.",'',10,DATABASE::"Item Journal Line",'',0,
        WarehouseEntry."Source Document"::"Item Jnl.",1);
      AssertWarehouseEntry(FromBin.Code,TestItem."No.",'',-5,0,'',0,0,1);
      AssertWarehouseEntry(ToBin.Code,TestItem."No.",'',5,0,'',0,0,1);
    END;

    [Test]
    PROCEDURE SC3TC314Blue@296();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,FALSE,FALSE,6,4);
      SC3TC314(Location);
    END;

    [Test]
    PROCEDURE SC3TC314Green@295();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,FALSE,6,4);
      SC3TC314(Location);
    END;

    LOCAL PROCEDURE SC3TC314@294(Location@1000 : Record 14);
    VAR
      Item@1001 : Record 27;
      InternalMovementHeader@1002 : Record 7346;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::Purchase,Item."Flushing Method"::Manual);

      // create an internal movement - Error message that Bin mandatory is required should be displayed.
      InternalMovementHeader.INIT;
      AssertCannotCreateIntlMvmt(InternalMovementHeader,Location.Code,'',MSG_BIN_MANDATORY);
    END;

    [Test]
    [HandlerFunctions(TC315MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC3TC315Silver@293();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC3TC315(Location);
    END;

    [Test]
    [HandlerFunctions(TC315MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC3TC315Orange@292();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC3TC315(Location);
    END;

    LOCAL PROCEDURE SC3TC315@291(Location@1000 : Record 14);
    VAR
      Item@1008 : Record 27;
      FirstBin@1007 : Record 7354;
      SecondBin@1006 : Record 7354;
      ThirdBin@1009 : Record 7354;
      ToBin@1005 : Record 7354;
      InternalMovementHeader@1004 : Record 7346;
      InternalMovementLine@1003 : Record 7347;
      WhseActivityHdr@1002 : Record 5766;
      WhseActivityLine@1001 : Record 5767;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::Purchase,Item."Flushing Method"::Manual);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);
      FindBin(ThirdBin,Location,FALSE,3);
      FindBin(ToBin,Location,FALSE,4);

      // Add to inventory
      AddInventoryNonDirectLocation(Item,Location,FirstBin,10);
      AddInventoryNonDirectLocation(Item,Location,SecondBin,10);

      // Create internal movement and get bin content
      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,ToBin,FirstBin.Code + '|' + SecondBin.Code);

      // Verify new internal movement lines
      AssertInternalMovementLine(InternalMovementHeader,Item,Location,FirstBin,ToBin,10,1);
      AssertInternalMovementLine(InternalMovementHeader,Item,Location,SecondBin,ToBin,10,1);

      // Change the From Bin Code in the second line to a bin that does not contain item TEST
      InternalMovementLine.SETRANGE("No.",InternalMovementHeader."No.");
      InternalMovementLine.SETRANGE("From Bin Code",SecondBin.Code);
      InternalMovementLine.FINDFIRST;
      InternalMovementLine.VALIDATE("From Bin Code",ThirdBin.Code);
      InternalMovementLine.MODIFY(TRUE);

      // Use function -> Create inventory movement
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);

      // Verify that inventory movement is created and internal movement deleted
      AssertInternalMovementDeleted(InternalMovementHeader);
      GetLastActvHdrCreatedNoSource(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Movement");
      AssertActivityLine(WhseActivityHdr,Item,FirstBin,WhseActivityLine."Action Type"::Take,10,0,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WhseActivityHdr,Item,ToBin,WhseActivityLine."Action Type"::Place,10,0,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLineCount(WhseActivityHdr,2);
    END;

    [MessageHandler]
    PROCEDURE TC315MessageHandler@290(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,MSG_BEEN_CREATED) > 0,Message);
    END;

    [Test]
    [HandlerFunctions(TC316MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC3TC316Silver@289();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC3TC316(Location);
    END;

    [Test]
    [HandlerFunctions(TC316MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC3TC316Orange@288();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC3TC316(Location);
    END;

    LOCAL PROCEDURE SC3TC316@287(Location@1000 : Record 14);
    VAR
      Item@1001 : Record 27;
      FirstBin@1002 : Record 7354;
      SecondBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      InternalMovementHeader@1005 : Record 7346;
      InternalMovementLine@1006 : Record 7347;
      WhseActivityHdr@1007 : Record 5766;
      WhseActivityLine@1008 : Record 5767;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::Purchase,Item."Flushing Method"::Manual);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);
      FindBin(ToBin,Location,FALSE,3);

      // Add to inventory
      AddInventoryNonDirectLocation(Item,Location,FirstBin,10);
      AddInventoryNonDirectLocation(Item,Location,SecondBin,10);

      // Create internal movement and get bin content
      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,ToBin,FirstBin.Code + '|' + SecondBin.Code);

      // Verify new internal movement lines
      AssertInternalMovementLine(InternalMovementHeader,Item,Location,FirstBin,ToBin,10,1);
      AssertInternalMovementLine(InternalMovementHeader,Item,Location,SecondBin,ToBin,10,1);

      // Change the From Bin Code in the second line to same bin as first line- check Quantity field is changed to 0.
      InternalMovementLine.SETRANGE("No.",InternalMovementHeader."No.");
      InternalMovementLine.SETRANGE("From Bin Code",SecondBin.Code);
      InternalMovementLine.FINDFIRST;
      InternalMovementLine.VALIDATE("From Bin Code",FirstBin.Code);
      InternalMovementLine.MODIFY(TRUE);
      Assert.AreEqual(0,InternalMovementLine.Quantity,'Quantity not zeroed out.');

      // Change the qty on second line to 10
      InternalMovementLine.VALIDATE(Quantity,10);
      InternalMovementLine.MODIFY(TRUE);

      // Use function -> Create inventory movement
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);

      // Verify that inventory movement is created and internal movement deleted
      AssertInternalMovementDeleted(InternalMovementHeader);
      GetLastActvHdrCreatedNoSource(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Movement");
      AssertActivityLine(WhseActivityHdr,Item,FirstBin,WhseActivityLine."Action Type"::Take,10,0,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WhseActivityHdr,Item,ToBin,WhseActivityLine."Action Type"::Place,10,0,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLineCount(WhseActivityHdr,2);
    END;

    [MessageHandler]
    PROCEDURE TC316MessageHandler@286(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,MSG_BEEN_CREATED) > 0,Message);
    END;

    [Test]
    PROCEDURE SC3TC317Silver@285();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC3TC317(Location);
    END;

    [Test]
    PROCEDURE SC3TC317Orange@284();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC3TC317(Location);
    END;

    LOCAL PROCEDURE SC3TC317@283(Location@1000 : Record 14);
    VAR
      WarehouseEmployee@1001 : Record 7301;
      SecondBin@1003 : Record 7354;
      InternalMovementHeader@1005 : Record 7346;
    BEGIN
      // Test setup
      TestSetup;

      // clear the warehouse employee entries
      WarehouseEmployee.SETRANGE("User ID",USERID);
      WarehouseEmployee.DELETEALL(TRUE);

      // create an internal movement - check for error
      SecondBin.INIT;
      AssertCannotCreateIntlMvmt(InternalMovementHeader,Location.Code,SecondBin.Code,MSG_WHSEEMPLEE);

      // Add current user to whse employee, location TEST, default = yes
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,TRUE);

      // create an internal movement - no error
      LibraryWarehouse.CreateInternalMovementHeader(InternalMovementHeader,Location.Code,SecondBin.Code);

      // Clear the location code
      COMMIT; // as assert error will roll-back
      ASSERTERROR
        InternalMovementHeader.VALIDATE("Location Code",'');
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,MSG_WHSEEMPLEE) > 0,'User allowed to blank loc code on internal movement.');
    END;

    [Test]
    [HandlerFunctions(TC318MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC3TC318Silver@282();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC3TC318(Location);
    END;

    [Test]
    [HandlerFunctions(TC318MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC3TC318Orange@281();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC3TC318(Location);
    END;

    LOCAL PROCEDURE SC3TC318@252(Location@1000 : Record 14);
    VAR
      Item@1001 : Record 27;
      FirstBin@1002 : Record 7354;
      SecondBin@1003 : Record 7354;
      ThirdBin@1005 : Record 7354;
      InternalMovementHeader@1004 : Record 7346;
      WhseActivityHdr@1006 : Record 5766;
      WhseActivityLine@1007 : Record 5767;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::Purchase,Item."Flushing Method"::Manual);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);
      FindBin(ThirdBin,Location,FALSE,3);

      // Add to inventory
      AddInventoryNonDirectLocation(Item,Location,FirstBin,10);

      // Create internal movement and get bin content
      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,SecondBin,FirstBin.Code);

      // Verify internal movement line
      AssertInternalMovementLine(InternalMovementHeader,Item,Location,FirstBin,SecondBin,10,1);

      // Change the To Bin Code to a different value
      InternalMovementHeader.VALIDATE("To Bin Code",ThirdBin.Code);
      InternalMovementHeader.MODIFY(TRUE);

      // Create inventory movement
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);

      // Verify that inventory movement is created and internal movement deleted
      AssertInternalMovementDeleted(InternalMovementHeader);
      GetLastActvHdrCreatedNoSource(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Movement");
      AssertActivityLine(WhseActivityHdr,Item,FirstBin,WhseActivityLine."Action Type"::Take,10,0,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WhseActivityHdr,Item,SecondBin,WhseActivityLine."Action Type"::Place,10,0,1,MSG_INVENTORY_MOVEMENT_LINE);
    END;

    [MessageHandler]
    PROCEDURE TC318MessageHandler@168(Message@1000 : Text[1024]);
    BEGIN
      ErrorMessageCounter += 1;
      CASE ErrorMessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,MSG_UPDATE_LINES) > 0,Message);
        2:
          Assert.IsTrue(STRPOS(Message,MSG_BEEN_CREATED) > 0,Message);
      END;
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC41Silver@194();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC41(Location);
    END;

    LOCAL PROCEDURE SC4TC41@132(Location@1006 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1005 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,100);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // check Inventory Movement
      AssertInvtMovement(ProductionOrder,ChildItem,Location,FromBin,ToBin,20,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC42Silver@195();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC42(Location);
    END;

    LOCAL PROCEDURE SC4TC42@131(Location@1006 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1005 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,3);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // check Inventory Movement
      AssertInvtMovement(ProductionOrder,ChildItem,Location,FromBin,ToBin,3,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandlerNothing)]
    PROCEDURE SC4TC43Silver@196();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC43(Location);
    END;

    LOCAL PROCEDURE SC4TC43@124(Location@1006 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      WarehouseActivityHeader@1005 : Record 5766;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin,Location,FALSE,1);

      // create Released Production Order for Silver location and refresh it
      FindBin(ToBin,Location,FALSE,3);
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // check Inventory Movement is not created
      AssertNoActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",'Inventory Movement');
    END;

    [Test]
    [HandlerFunctions(MessageHandlerNothing)]
    PROCEDURE SC4TC44Silver@197();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC44(Location);
    END;

    LOCAL PROCEDURE SC4TC44@123(Location@1005 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      WarehouseActivityHeader@1006 : Record 5766;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin,Location,FALSE,1);

      // create Released Production Order for Silver location and refresh it
      FindBin(ToBin,Location,FALSE,3);
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      // change quantity of component
      ChangeQtyOnCompLines(ProductionOrder,0);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // check Inventory Movement is not created
      AssertNoActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",'Inventory Movement');
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC45Silver@198();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC45(Location);
    END;

    LOCAL PROCEDURE SC4TC45@105(Location@1007 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1006 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin1@1003 : Record 7354;
      FromBin2@1005 : Record 7354;
      ToBin@1004 : Record 7354;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin1,Location,FALSE,1);
      FindBin(FromBin2,Location,FALSE,2);
      FindBin(ToBin,Location,FALSE,3);

      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin1,6);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin2,4);

      // create Released Production Order for Silver location and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",5,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // check Inventory Movement
      AssertInvtMovement(ProductionOrder,ChildItem,Location,FromBin1,ToBin,6,0,1);
      AssertInvtMovement(ProductionOrder,ChildItem,Location,FromBin2,ToBin,4,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC46Silver@199();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC46(Location);
    END;

    LOCAL PROCEDURE SC4TC46@106(Location@1007 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1006 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin1@1003 : Record 7354;
      FromBin2@1005 : Record 7354;
      ToBin@1004 : Record 7354;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin1,Location,FALSE,1);
      FindBin(FromBin2,Location,FALSE,2);
      FindBin(ToBin,Location,FALSE,3);

      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin1,3);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin2,4);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",5,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // check Inventory Movement
      AssertInvtMovement(ProductionOrder,ChildItem,Location,FromBin1,ToBin,3,0,1);
      AssertInvtMovement(ProductionOrder,ChildItem,Location,FromBin2,ToBin,4,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC47Silver@200();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC47(Location);
    END;

    LOCAL PROCEDURE SC4TC47@107(Location@1006 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1007 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      WarehouseActivityHeader@1008 : Record 5766;
      WarehouseActivityLine@1005 : Record 5767;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,100);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // split Take line
      SplitWhseActivityLine(ProductionOrder,WarehouseActivityLine."Action Type"::Take,6);

      // check Inventory Movement
      AssertActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",1,MSG_INVENTORY_MOVEMENT);
      AssertActivityLine(WarehouseActivityHeader,ChildItem,FromBin,WarehouseActivityLine."Action Type"::Take,
        6,6,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WarehouseActivityHeader,ChildItem,FromBin,WarehouseActivityLine."Action Type"::Take,
        14,14,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WarehouseActivityHeader,ChildItem,ToBin,WarehouseActivityLine."Action Type"::Place,
        20,0,1,MSG_INVENTORY_MOVEMENT_LINE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,DeleteWhseActivityLineConfirm)]
    PROCEDURE SC4TC48Silver@201();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC48(Location);
    END;

    LOCAL PROCEDURE SC4TC48@108(Location@1008 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1007 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      WarehouseActivityLine@1005 : Record 5767;
      WarehouseActivityHeader@1006 : Record 5766;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,100);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // split Take line
      SplitWhseActivityLine(ProductionOrder,WarehouseActivityLine."Action Type"::Take,6);

      // delete the last Take line
      DeleteWhseActivityLine(ProductionOrder,WarehouseActivityLine."Action Type"::Take);

      // check Inventory Movement
      AssertActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",1,MSG_INVENTORY_MOVEMENT);
      AssertActivityLine(WarehouseActivityHeader,ChildItem,FromBin,WarehouseActivityLine."Action Type"::Take,
        6,6,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WarehouseActivityHeader,ChildItem,ToBin,WarehouseActivityLine."Action Type"::Place,
        20,0,1,MSG_INVENTORY_MOVEMENT_LINE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler_TC49)]
    PROCEDURE SC4TC49Silver@202();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC49(Location);
    END;

    LOCAL PROCEDURE SC4TC49@109(Location@1006 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1007 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      WarehouseActivityLine@1005 : Record 5767;
      WarehouseActivityHeader@1008 : Record 5766;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,100);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // split Take line
      SplitWhseActivityLine(ProductionOrder,WarehouseActivityLine."Action Type"::Take,6);

      // delete the Place line
      DeleteWhseActivityLine(ProductionOrder,WarehouseActivityLine."Action Type"::Place);

      // check Inventory Movement has no lines
      AssertActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",1,MSG_INVENTORY_MOVEMENT);
      AssertActivityLine(WarehouseActivityHeader,ChildItem,FromBin,WarehouseActivityLine."Action Type"::Take,
        6,0,0,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WarehouseActivityHeader,ChildItem,FromBin,WarehouseActivityLine."Action Type"::Take,
        20,0,0,MSG_INVENTORY_MOVEMENT_LINE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC410Silver@203();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC410(Location);
    END;

    LOCAL PROCEDURE SC4TC410@110(Location@1005 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1008 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,100);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // split Take line
      AssertCannotSplitLine(ProductionOrder,0,Text001);
      AssertCannotSplitLine(ProductionOrder,20,Text002);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC411Silver@208();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC411(Location);
    END;

    LOCAL PROCEDURE SC4TC411@111(Location@1006 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1007 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      WarehouseActivityLine@1005 : Record 5767;
      WarehouseActivityHeader@1008 : Record 5766;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,100);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // split Take line
      SplitWhseActivityLine(ProductionOrder,WarehouseActivityLine."Action Type"::Take,6);

      // Autofill Qty. to Handle
      AutofillQtyToHandle(ProductionOrder);

      // check Inventory Movement
      AssertActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",1,MSG_INVENTORY_MOVEMENT);
      AssertActivityLine(WarehouseActivityHeader,ChildItem,FromBin,WarehouseActivityLine."Action Type"::Take,
        6,6,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WarehouseActivityHeader,ChildItem,FromBin,WarehouseActivityLine."Action Type"::Take,
        14,14,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WarehouseActivityHeader,ChildItem,ToBin,WarehouseActivityLine."Action Type"::Place,
        20,20,1,MSG_INVENTORY_MOVEMENT_LINE);

      // delete Qty. to Handle
      DeleteQtyToHandle(ProductionOrder);

      // check Inventory Movement
      AssertActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",1,MSG_INVENTORY_MOVEMENT);
      AssertActivityLine(WarehouseActivityHeader,ChildItem,FromBin,WarehouseActivityLine."Action Type"::Take,
        6,0,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WarehouseActivityHeader,ChildItem,FromBin,WarehouseActivityLine."Action Type"::Take,
        14,0,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WarehouseActivityHeader,ChildItem,ToBin,WarehouseActivityLine."Action Type"::Place,
        20,0,1,MSG_INVENTORY_MOVEMENT_LINE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC412Silver@210();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC412(Location);
    END;

    LOCAL PROCEDURE SC4TC412@112(Location@1007 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      WarehouseEntry@1005 : Record 7312;
      ChildItem@1006 : Record 27;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,100);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // Autofill Qty. to Handle
      AutofillQtyToHandle(ProductionOrder);

      RegisterInventoryMovement(Location);

      // check Warehouse Entries
      AssertWarehouseEntry(
        FromBin.Code,ChildItem."No.",'',100,DATABASE::"Item Journal Line",'',
        0,WarehouseEntry."Source Document"::"Item Jnl.",1);

      AssertWarehouseEntry(
        FromBin.Code,ChildItem."No.",'',-20,DATABASE::"Prod. Order Component",ProductionOrder."No.",
        ProductionOrder.Status,WarehouseEntry."Source Document"::"Prod. Consumption",1);

      AssertWarehouseEntry(
        ToBin.Code,ChildItem."No.",'',20,DATABASE::"Prod. Order Component",ProductionOrder."No.",
        ProductionOrder.Status,WarehouseEntry."Source Document"::"Prod. Consumption",1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC413Silver@223();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC413(Location);
    END;

    LOCAL PROCEDURE SC4TC413@113(Location@1007 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      ChildItem@1005 : Record 27;
      WarehouseEntry@1006 : Record 7312;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindChild(ParentItem,ChildItem,1);

      // Creating 2 variants
      AddVariantsToItem(ChildItem,'ONE');
      AddVariantsToItem(ChildItem,'TWO');

      // Positive adjustment
      FindBin(FromBin,Location,FALSE,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,100);
      AddInvForVariantNonDirectedLoc(ChildItem,'ONE',Location,FromBin,100);

      // create Released Production Order and refresh it
      FindBin(ToBin,Location,FALSE,3);
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      ChangeVariantAndBinOfComponent(ProductionOrder,'ONE',ToBin.Code,'');

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // Autofill Qty. to Handle
      AutofillQtyToHandle(ProductionOrder);

      RegisterInventoryMovement(Location);

      // check Warehouse Entries
      FindChild(ParentItem,ChildItem,1);

      AssertWarehouseEntry(
        FromBin.Code,ChildItem."No.",'ONE',100,DATABASE::"Item Journal Line",'',
        0,WarehouseEntry."Source Document"::"Item Jnl.",1);

      AssertWarehouseEntry(
        FromBin.Code,ChildItem."No.",'ONE',-20,DATABASE::"Prod. Order Component",ProductionOrder."No.",
        ProductionOrder.Status,WarehouseEntry."Source Document"::"Prod. Consumption",1);

      AssertWarehouseEntry(
        ToBin.Code,ChildItem."No.",'ONE',20,DATABASE::"Prod. Order Component",ProductionOrder."No.",
        ProductionOrder.Status,WarehouseEntry."Source Document"::"Prod. Consumption",1);

      AssertWarehouseEntry(
        FromBin.Code,ChildItem."No.",'',100,DATABASE::"Item Journal Line",'',
        0,WarehouseEntry."Source Document"::"Item Jnl.",1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC414Silver@230();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC414(Location);
    END;

    LOCAL PROCEDURE SC4TC414@114(Location@1008 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      WarehouseActivityLine@1005 : Record 5767;
      ChildItem@1006 : Record 27;
      WarehouseEntry@1007 : Record 7312;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,100);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // Autofill Qty. to Handle
      FillQtyToHandle(
        ProductionOrder,WarehouseActivityLine."Action Type"::Take,10,WarehouseActivityLine."Activity Type"::"Invt. Movement");
      FillQtyToHandle(
        ProductionOrder,WarehouseActivityLine."Action Type"::Place,10,WarehouseActivityLine."Activity Type"::"Invt. Movement");

      RegisterInventoryMovement(Location);

      // check Inventory Movement
      AssertInvtMovement(ProductionOrder,ChildItem,Location,FromBin,ToBin,20,10,1);

      // Check whse entries
      AssertWarehouseEntry(
        FromBin.Code,ChildItem."No.",'',100,DATABASE::"Item Journal Line",'',
        0,WarehouseEntry."Source Document"::"Item Jnl.",1);

      AssertWarehouseEntry(
        FromBin.Code,ChildItem."No.",'',-10,DATABASE::"Prod. Order Component",ProductionOrder."No.",
        ProductionOrder.Status,WarehouseEntry."Source Document"::"Prod. Consumption",1);

      AssertWarehouseEntry(
        ToBin.Code,ChildItem."No.",'',10,DATABASE::"Prod. Order Component",ProductionOrder."No.",
        ProductionOrder.Status,WarehouseEntry."Source Document"::"Prod. Consumption",1);

      // Autofill and register
      AutofillQtyToHandle(ProductionOrder);
      RegisterInventoryMovement(Location);

      // check Warehouse Entries
      AssertWarehouseEntry(
        FromBin.Code,ChildItem."No.",'',100,DATABASE::"Item Journal Line",'',
        0,WarehouseEntry."Source Document"::"Item Jnl.",1);

      AssertWarehouseEntry(
        FromBin.Code,ChildItem."No.",'',-10,DATABASE::"Prod. Order Component",ProductionOrder."No.",
        ProductionOrder.Status,WarehouseEntry."Source Document"::"Prod. Consumption",2);

      AssertWarehouseEntry(
        ToBin.Code,ChildItem."No.",'',10,DATABASE::"Prod. Order Component",ProductionOrder."No.",
        ProductionOrder.Status,WarehouseEntry."Source Document"::"Prod. Consumption",2);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC415Silver@234();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC415(Location);
    END;

    LOCAL PROCEDURE SC4TC415@115(Location@1007 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1008 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      WarehouseActivityLine@1005 : Record 5767;
      RegisteredInvtMovementHdr@1006 : Record 7344;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,100);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      // Change bin of component
      FindBin(ToBin,Location,TRUE,1);
      ChangeVariantAndBinOfComponent(ProductionOrder,'',ToBin.Code,'');

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // Autofill Qty. to Handle
      FillQtyToHandle(
        ProductionOrder,WarehouseActivityLine."Action Type"::Take,10,WarehouseActivityLine."Activity Type"::"Invt. Movement");
      FillQtyToHandle(
        ProductionOrder,WarehouseActivityLine."Action Type"::Place,10,WarehouseActivityLine."Activity Type"::"Invt. Movement");

      RegisterInventoryMovement(Location);

      // check Inventory Movement Lines
      AssertInvtMovement(ProductionOrder,ChildItem,Location,FromBin,ToBin,20,10,1);

      // check Registered Inventory Movement
      AssertRegisteredInvtMovement(
        RegisteredInvtMovementHdr,ProductionOrder,WarehouseRequest."Source Document"::"Prod. Consumption",
        ChildItem,FromBin,ToBin,10,1,1);

      // Autofill and register
      AutofillQtyToHandle(ProductionOrder);
      RegisterInventoryMovement(Location);

      // check Registered Inventory Movements
      AssertRegisteredInvtMovement(
        RegisteredInvtMovementHdr,ProductionOrder,WarehouseRequest."Source Document"::"Prod. Consumption",
        ChildItem,FromBin,ToBin,10,2,1);
      AssertRegisteredInvtMovement(
        RegisteredInvtMovementHdr,ProductionOrder,WarehouseRequest."Source Document"::"Prod. Consumption",
        ChildItem,FromBin,ToBin,10,2,2);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC416Silver@235();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC416(Location);
    END;

    LOCAL PROCEDURE SC4TC416@116(Location@1006 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1007 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      WarehouseActivityLine@1005 : Record 5767;
      WarehouseActivityHeader@1008 : Record 5766;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,100);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // Autofill Qty. to Handle
      FillQtyToHandle(
        ProductionOrder,WarehouseActivityLine."Action Type"::Take,10,WarehouseActivityLine."Activity Type"::"Invt. Movement");
      FillQtyToHandle(
        ProductionOrder,WarehouseActivityLine."Action Type"::Place,10,WarehouseActivityLine."Activity Type"::"Invt. Movement");

      RegisterInventoryMovement(Location);

      // check Inventory Movement Lines
      AssertInvtMovement(ProductionOrder,ChildItem,Location,FromBin,ToBin,20,10,1);

      // check component
      AssertProdOrderComponent(ProductionOrder,ChildItem."No.",20,20,10,10,Location.Code,ToBin.Code,1);

      AutofillQtyToHandle(ProductionOrder);
      RegisterInventoryMovement(Location);

      // check component
      AssertNoActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",'Inventory Movement');
      AssertProdOrderComponent(ProductionOrder,ChildItem."No.",20,20,20,20,Location.Code,ToBin.Code,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC417Silver@239();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC417(Location);
    END;

    LOCAL PROCEDURE SC4TC417@117(Location@1006 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1005 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,100);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // Assert cannot register
      AssertCannotRegisterInvtMovm(Location,MSG_THERE_NOTHING_TO_REGISTER);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC418Silver@240();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC418(Location);
    END;

    LOCAL PROCEDURE SC4TC418@118(Location@1006 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1007 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      WarehouseActivityLine@1005 : Record 5767;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,100);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      FillQtyToHandle(
        ProductionOrder,WarehouseActivityLine."Action Type"::Take,10,WarehouseActivityLine."Activity Type"::"Invt. Movement");

      // Assert cannot register
      AssertCannotRegisterInvtMovm(Location,Text003);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC419Silver@241();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC419(Location);
    END;

    LOCAL PROCEDURE SC4TC419@119(Location@1006 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1007 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      WarehouseActivityLine@1005 : Record 5767;
      WarehouseActivityHeader@1008 : Record 5766;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,100);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      // Change bin of component
      FindBin(ToBin,Location,TRUE,1);
      ChangeVariantAndBinOfComponent(ProductionOrder,'',ToBin.Code,'');

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // Autofill Qty. to Handle
      FillQtyToHandle(
        ProductionOrder,WarehouseActivityLine."Action Type"::Take,10,WarehouseActivityLine."Activity Type"::"Invt. Movement");
      FillQtyToHandle(
        ProductionOrder,WarehouseActivityLine."Action Type"::Place,10,WarehouseActivityLine."Activity Type"::"Invt. Movement");

      RegisterInventoryMovement(Location);
      DeleteActivityTypeWithSrcDoc(ProductionOrder,Location,WarehouseActivityLine."Activity Type"::"Invt. Movement");

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // check Inventory Movement Lines
      AssertInvtMovement(ProductionOrder,ChildItem,Location,FromBin,ToBin,10,0,1);

      // Autofill Qty. to Handle
      AutofillQtyToHandle(ProductionOrder);
      RegisterInventoryMovement(Location);

      // check component
      AssertNoActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",'Inventory Movement');
      AssertProdOrderComponent(ProductionOrder,ChildItem."No.",20,20,20,20,Location.Code,ToBin.Code,1);
    END;

    [Test]
    [HandlerFunctions(TC420MessageHandler)]
    PROCEDURE SC4TC420Silver@242();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC420(Location);
    END;

    LOCAL PROCEDURE SC4TC420@104(Location@1006 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1009 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      WarehouseActivityLine@1005 : Record 5767;
      WarehouseActivityHeader@1007 : Record 5766;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,100);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      // Create invt movement
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // Fill Qty. to Handle
      FillQtyToHandle(
        ProductionOrder,WarehouseActivityLine."Action Type"::Take,10,WarehouseActivityLine."Activity Type"::"Invt. Movement");
      FillQtyToHandle(
        ProductionOrder,WarehouseActivityLine."Action Type"::Place,10,WarehouseActivityLine."Activity Type"::"Invt. Movement");

      // Register partial invt movement and delete
      RegisterInventoryMovement(Location);
      DeleteActivityTypeWithSrcDoc(ProductionOrder,Location,WarehouseActivityLine."Activity Type"::"Invt. Movement");

      // Create inventory pick
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,TRUE,FALSE);

      // Check that movement cannot be created - nothing to create msg
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // Post partial invt pick and delete
      ChangeBinInWhseActivityLine(
        ProductionOrder,WarehouseActivityLine."Activity Type"::"Invt. Pick",10,ToBin.Code);
      FillQtyToHandle(ProductionOrder,WarehouseActivityLine."Action Type"::Take,5,WarehouseActivityLine."Activity Type"::"Invt. Pick");
      GetLastActvHdrCreatedWithSrc(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Pick",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.");
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,FALSE);
      DeleteActivityTypeWithSrcDoc(ProductionOrder,Location,WarehouseActivityLine."Activity Type"::"Invt. Pick");

      // Create invt movement
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // check Inventory Movement Lines
      AssertInvtMovement(ProductionOrder,ChildItem,Location,FromBin,ToBin,10,0,1);
    END;

    [Test]
    [HandlerFunctions(TC421MessageHandler)]
    PROCEDURE SC4TC421Silver@243();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC421(Location);
    END;

    LOCAL PROCEDURE SC4TC421@103(Location@1008 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1006 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      WarehouseActivityLine@1005 : Record 5767;
      WarehouseActivityHeader@1007 : Record 5766;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,100);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      // Create invt movement
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // Autofill Qty. to Handle
      FillQtyToHandle(
        ProductionOrder,WarehouseActivityLine."Action Type"::Take,10,WarehouseActivityLine."Activity Type"::"Invt. Movement");
      FillQtyToHandle(
        ProductionOrder,WarehouseActivityLine."Action Type"::Place,10,WarehouseActivityLine."Activity Type"::"Invt. Movement");

      // Register partially and delete
      RegisterInventoryMovement(Location);
      DeleteActivityTypeWithSrcDoc(ProductionOrder,Location,WarehouseActivityLine."Activity Type"::"Invt. Movement");

      // Create invt pick
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,TRUE,FALSE);

      // Post invt pick partially and delete
      ChangeBinInWhseActivityLine(ProductionOrder,WarehouseActivityLine."Activity Type"::"Invt. Pick",10,ToBin.Code);
      FillQtyToHandle(ProductionOrder,WarehouseActivityLine."Action Type"::Take,5,WarehouseActivityLine."Activity Type"::"Invt. Pick");
      GetLastActvHdrCreatedWithSrc(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Pick",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.");
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,FALSE);
      DeleteActivityTypeWithSrcDoc(ProductionOrder,Location,WarehouseActivityLine."Activity Type"::"Invt. Pick");

      // Verify prod order comp
      AssertProdOrderComponent(ProductionOrder,ChildItem."No.",15,20,10,10,Location.Code,ToBin.Code,1);

      // Create invt movement
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // check Inventory Movement Lines
      AssertInvtMovement(ProductionOrder,ChildItem,Location,FromBin,ToBin,10,0,1);

      // Autofill and register invt movement
      AutofillQtyToHandle(ProductionOrder);
      RegisterInventoryMovement(Location);

      // Post consumption and verify comp lines
      CalculateAndPostConsumption(ProductionOrder);
      AssertProdOrderComponent(ProductionOrder,ChildItem."No.",0,20,20,20,Location.Code,ToBin.Code,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC422Silver@244();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC422(Location);
    END;

    LOCAL PROCEDURE SC4TC422@122(Location@1006 : Record 14);
    VAR
      ArrayOfItem@1000 : ARRAY [5] OF Record 27;
      ProductionOrder@1001 : Record 5405;
      FromBin@1002 : Record 7354;
      ToBin@1003 : Record 7354;
      WarehouseRequest@1004 : Record 5765;
      WarehouseActivityLine@1005 : Record 5767;
      i@1009 : Integer;
    BEGIN
      // Test setup
      TestSetup;
      PC6(ArrayOfItem);

      FindBin(FromBin,Location,FALSE,1);
      FOR i := 2 TO 5 DO
        AddInventoryNonDirectLocation(ArrayOfItem[i],Location,FromBin,100);

      // create Released Production Order for Silver location and refresh it
      FindBin(ToBin,Location,FALSE,3);
      CreateRelProdOrderAndRefresh(ProductionOrder,ArrayOfItem[1]."No.",10,Location.Code,ToBin.Code);
      SetBinCodeOnCompLines(ProductionOrder,FromBin);

      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",20,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[4]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[5]."No.",20,20,0,0,Location.Code,FromBin.Code,1);

      // Change bin of component
      FindBin(ToBin,Location,TRUE,1);
      ChangeVariantAndBinOfComponent(ProductionOrder,'',ToBin.Code,ArrayOfItem[5]."No.");

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // check Inventory Movement Lines
      AssertInvtMovement(ProductionOrder,ArrayOfItem[5],Location,FromBin,ToBin,20,0,1);

      // Autofill Qty. to Handle
      FillQtyToHandle(
        ProductionOrder,WarehouseActivityLine."Action Type"::Take,20,WarehouseActivityLine."Activity Type"::"Invt. Movement");
      FillQtyToHandle(
        ProductionOrder,WarehouseActivityLine."Action Type"::Place,20,WarehouseActivityLine."Activity Type"::"Invt. Movement");

      RegisterInventoryMovement(Location);

      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",20,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[4]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[5]."No.",20,20,20,20,Location.Code,ToBin.Code,1);

      ExplodeAndPostOutputJournal(ArrayOfItem[1]."No.",ProductionOrder."No.");

      // finish released production order
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      ProductionOrder.Status := ProductionOrder.Status::Finished;

      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[4]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[5]."No.",0,20,20,20,Location.Code,ToBin.Code,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC425Silver@245();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC425(Location);
    END;

    LOCAL PROCEDURE SC4TC425@125(Location@1000 : Record 14);
    VAR
      ParentItem@1006 : Record 27;
      ProductionOrder@1005 : Record 5405;
      FromBin@1003 : Record 7354;
      ToBin@1002 : Record 7354;
      ChildItem@1007 : Record 27;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindChild(ParentItem,ChildItem,1);
      ChangeFlushingMethodOnItem(ChildItem,ChildItem."Flushing Method"::Forward);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,40);

      // create Released Production Order for Silver location and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,FromBin);

      AssertProdOrderComponent(ProductionOrder,ChildItem."No.",0,20,0,0,Location.Code,FromBin.Code,1);

      FindBin(ToBin,Location,TRUE,1);
      AddComponentToProdOrder(ProductionOrder,ChildItem."No.",2,Location.Code,ToBin.Code,ChildItem."Flushing Method");

      AssertCannotCreateInvtMvmtProd(ProductionOrder);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC426Silver@246();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC426(Location);
    END;

    LOCAL PROCEDURE SC4TC426@126(Location@1008 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      WarehouseRequest@1002 : Record 5765;
      ProductionOrder@1001 : Record 5405;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      ChildItem@1005 : Record 27;
      WarehouseActivityLine@1006 : Record 5767;
      WarehouseActivityHeader@1007 : Record 5766;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindChild(ParentItem,ChildItem,1);
      ChangeFlushingMethodOnItem(ChildItem,ChildItem."Flushing Method"::"Pick + Forward");

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,40);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,FromBin);

      // validate component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem."No.",0,20,0,0,Location.Code,FromBin.Code,1);

      FindBin(ToBin,Location,TRUE,1);
      AddComponentToProdOrder(ProductionOrder,ChildItem."No.",2,Location.Code,ToBin.Code,ChildItem."Flushing Method");

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // check Inventory Movement Lines
      AssertInvtMovement(ProductionOrder,ChildItem,Location,FromBin,ToBin,20,0,1);

      // Autofill Qty. to Handle
      FillQtyToHandle(
        ProductionOrder,WarehouseActivityLine."Action Type"::Take,20,WarehouseActivityLine."Activity Type"::"Invt. Movement");
      FillQtyToHandle(
        ProductionOrder,WarehouseActivityLine."Action Type"::Place,20,WarehouseActivityLine."Activity Type"::"Invt. Movement");

      RegisterInventoryMovement(Location);

      AssertNoActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",'Inventory Movement');
      AssertProdOrderComponent(ProductionOrder,ChildItem."No.",20,20,20,20,Location.Code,ToBin.Code,1);

      CalculateAndPostConsumption(ProductionOrder);
      AssertProdOrderComponent(ProductionOrder,ChildItem."No.",0,20,20,20,Location.Code,ToBin.Code,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC427Silver@247();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC427(Location);
    END;

    LOCAL PROCEDURE SC4TC427@127(Location@1009 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      WarehouseActivityLine@1005 : Record 5767;
      WarehouseActivityHeader@1008 : Record 5766;
      ChildItem@1006 : Record 27;
      OldToBin@1007 : Record 7354;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindChild(ParentItem,ChildItem,1);
      ChangeFlushingMethodOnItem(ChildItem,ChildItem."Flushing Method"::"Pick + Backward");

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,40);

      // create Released Production Order and refresh it
      OldToBin := ToBin;
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,ToBin.Code);
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      // Assert comp lines
      AssertProdOrderComponent(ProductionOrder,ChildItem."No.",20,20,0,0,Location.Code,ToBin.Code,1);

      FindBin(ToBin,Location,TRUE,1);
      AddComponentToProdOrder(ProductionOrder,ChildItem."No.",2,Location.Code,ToBin.Code,ChildItem."Flushing Method");

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // check Inventory Movement
      AssertActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",1,MSG_INVENTORY_MOVEMENT);
      AssertActivityLine(WarehouseActivityHeader,ChildItem,FromBin,WarehouseActivityLine."Action Type"::Take,
        20,0,2,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WarehouseActivityHeader,ChildItem,OldToBin,WarehouseActivityLine."Action Type"::Place,
        20,0,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WarehouseActivityHeader,ChildItem,ToBin,WarehouseActivityLine."Action Type"::Place,
        20,0,1,MSG_INVENTORY_MOVEMENT_LINE);

      // Autofill Qty. to Handle
      AutofillQtyToHandle(ProductionOrder);
      RegisterInventoryMovement(Location);

      AssertNoActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",'Inventory Movement');
      AssertProdOrderComponent(ProductionOrder,ChildItem."No.",20,20,20,20,Location.Code,OldToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem."No.",20,20,20,20,Location.Code,ToBin.Code,1);

      ExplodeAndPostOutputJournal(ParentItem."No.",ProductionOrder."No.");

      // Finish the released production order
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      ProductionOrder.Status := ProductionOrder.Status::Finished;

      // Assert components again
      AssertProdOrderComponent(ProductionOrder,ChildItem."No.",0,20,20,20,Location.Code,OldToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem."No.",0,20,20,20,Location.Code,ToBin.Code,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC428Silver@248();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC428(Location);
    END;

    LOCAL PROCEDURE SC4TC428@128(Location@1002 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ProductionOrder@1001 : Record 5405;
      FromBin@1003 : Record 7354;
      ToBin@1004 : Record 7354;
      ChildItem@1005 : Record 27;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindChild(ParentItem,ChildItem,1);
      ChangeFlushingMethodOnItem(ChildItem,ChildItem."Flushing Method"::Backward);

      FindBin(FromBin,Location,FALSE,1);
      FindBin(ToBin,Location,FALSE,3);

      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,40);

      // create Released Production Order and refresh it
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,ToBin.Code);
      SetBinCodeOnCompLines(ProductionOrder,FromBin);

      AssertProdOrderComponent(ProductionOrder,ChildItem."No.",20,20,0,0,Location.Code,FromBin.Code,1);

      FindBin(ToBin,Location,TRUE,1);
      AddComponentToProdOrder(ProductionOrder,ChildItem."No.",2,Location.Code,FromBin.Code,ChildItem."Flushing Method");

      // Check that movement cannot be created
      AssertCannotCreateInvtMvmtProd(ProductionOrder);

      ExplodeAndPostOutputJournal(ParentItem."No.",ProductionOrder."No.");

      // finish released production order
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      ProductionOrder.Status := ProductionOrder.Status::Finished;

      AssertProdOrderComponent(ProductionOrder,ChildItem."No.",0,20,0,0,Location.Code,FromBin.Code,2);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC429Silver@249();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC429(Location);
    END;

    LOCAL PROCEDURE SC4TC429@129(Location@1007 : Record 14);
    VAR
      ArrayOfItem@1000 : ARRAY [4] OF Record 27;
      ProductionBOMHeader@1001 : Record 99000771;
      RoutingHeader@1004 : Record 99000763;
      FromBin@1002 : Record 7354;
      ProductionOrder@1003 : Record 5405;
      ToBin@1005 : Record 7354;
      WarehouseRequest@1006 : Record 5765;
      WarehouseActivityHeader@1008 : Record 5766;
      ProdOrderComponent@1009 : Record 5407;
    BEGIN
      // Test setup
      TestSetup;
      PC429(ArrayOfItem,ProductionBOMHeader,RoutingHeader,ArrayOfItem[3]."Flushing Method"::Forward);

      // Add inventory
      FindBin(FromBin,Location,FALSE,1);
      AddInventoryNonDirectLocation(ArrayOfItem[2],Location,FromBin,40);
      AddInventoryNonDirectLocation(ArrayOfItem[3],Location,FromBin,40);

      // create Released Production Order for location and refresh it
      FindBin(ToBin,Location,FALSE,3);
      CreateRelProdOrderAndRefresh(ProductionOrder,ArrayOfItem[1]."No.",10,Location.Code,ToBin.Code);
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      // Validate components
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",20,20,0,0,Location.Code,ToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",20,20,0,0,Location.Code,ToBin.Code,1);

      // Add new component line
      AddComponentToProdOrder(
        ProductionOrder,ArrayOfItem[2]."No.",2,Location.Code,ToBin.Code,ArrayOfItem[2]."Flushing Method"::Backward);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // check Inventory Movement Lines
      AssertInvtMovement(ProductionOrder,ArrayOfItem[2],Location,FromBin,ToBin,20,0,1);

      // Autofill Qty. to Handle
      AutofillQtyToHandle(ProductionOrder);
      RegisterInventoryMovement(Location);

      // Assert that invt movement deleted
      AssertNoActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",'Inventory Movement');

      // Assert comp lines
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",20,20,20,20,Location.Code,ToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",20,20,0,0,Location.Code,ToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",20,20,0,0,Location.Code,ToBin.Code,1);

      FindComponent(ProdOrderComponent,ProductionOrder,ArrayOfItem[2],2);
      ChangeBinForComponent(ProdOrderComponent,FromBin.Code);
      FindComponent(ProdOrderComponent,ProductionOrder,ArrayOfItem[3],1);
      ChangeBinForComponent(ProdOrderComponent,FromBin.Code);

      // Post output and consumption
      CalculateAndPostConsumption(ProductionOrder);
      ExplodeAndPostOutputJournal(ArrayOfItem[1]."No.",ProductionOrder."No.");

      // Change status to finish
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      ProductionOrder.Status := ProductionOrder.Status::Finished;

      // Verify
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",0,20,20,20,Location.Code,ToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC430Silver@250();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC430(Location);
    END;

    LOCAL PROCEDURE SC4TC430@130(Location@1000 : Record 14);
    VAR
      ArrayOfItem@1007 : ARRAY [4] OF Record 27;
      ProductionBOMHeader@1006 : Record 99000771;
      RoutingHeader@1005 : Record 99000763;
      FromBin@1004 : Record 7354;
      ProductionOrder@1003 : Record 5405;
      ToBin@1002 : Record 7354;
      WarehouseRequest@1001 : Record 5765;
      WarehouseActivityHeader@1009 : Record 5766;
      WarehouseActivityLine@1010 : Record 5767;
      ProdOrderComponent@1008 : Record 5407;
    BEGIN
      // Test setup
      TestSetup;

      PC429(ArrayOfItem,ProductionBOMHeader,RoutingHeader,ArrayOfItem[3]."Flushing Method"::"Pick + Forward");

      FindBin(FromBin,Location,FALSE,1);
      AddInventoryNonDirectLocation(ArrayOfItem[2],Location,FromBin,40);
      AddInventoryNonDirectLocation(ArrayOfItem[3],Location,FromBin,40);

      // create Released Production Order and refresh it
      FindBin(ToBin,Location,FALSE,3);
      CreateRelProdOrderAndRefresh(ProductionOrder,ArrayOfItem[1]."No.",10,Location.Code,ToBin.Code);
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",20,20,0,0,Location.Code,ToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",20,20,0,0,Location.Code,ToBin.Code,1);

      AddComponentToProdOrder(
        ProductionOrder,ArrayOfItem[2]."No.",2,Location.Code,ToBin.Code,ArrayOfItem[2]."Flushing Method"::Backward);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // check Inventory Movement
      AssertActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",1,'Inventory Movement');
      AssertActivityLine(WarehouseActivityHeader,ArrayOfItem[2],FromBin,WarehouseActivityLine."Action Type"::Take,
        20,0,1,'Inventory Movement line');
      AssertActivityLine(WarehouseActivityHeader,ArrayOfItem[2],ToBin,WarehouseActivityLine."Action Type"::Place,
        20,0,1,'Inventory Movement line');
      AssertActivityLine(WarehouseActivityHeader,ArrayOfItem[3],FromBin,WarehouseActivityLine."Action Type"::Take,
        20,0,1,'Inventory Movement line');
      AssertActivityLine(WarehouseActivityHeader,ArrayOfItem[3],ToBin,WarehouseActivityLine."Action Type"::Place,
        20,0,1,'Inventory Movement line');

      // Autofill Qty. to Handle
      AutofillQtyToHandle(ProductionOrder);
      RegisterInventoryMovement(Location);

      // Assert invt movment deleted
      AssertNoActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",'Inventory Movement');

      // Assert comp lines
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",20,20,20,20,Location.Code,ToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",20,20,20,20,Location.Code,ToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",20,20,0,0,Location.Code,ToBin.Code,1);

      FindComponent(ProdOrderComponent,ProductionOrder,ArrayOfItem[2],2);
      ChangeBinForComponent(ProdOrderComponent,FromBin.Code);
      FindComponent(ProdOrderComponent,ProductionOrder,ArrayOfItem[3],1);
      ChangeBinForComponent(ProdOrderComponent,FromBin.Code);

      // Post output and consumption
      CalculateAndPostConsumption(ProductionOrder);
      ExplodeAndPostOutputJournal(ArrayOfItem[1]."No.",ProductionOrder."No.");

      // finish the released production order
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      ProductionOrder.Status := ProductionOrder.Status::Finished;

      // Assert comp on finished prod order
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",0,20,20,20,Location.Code,ToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",0,20,20,20,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC431Silver@302();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC431(Location);
    END;

    LOCAL PROCEDURE SC4TC431@301(Location@1000 : Record 14);
    VAR
      ArrayOfItem@1007 : ARRAY [4] OF Record 27;
      ProductionBOMHeader@1006 : Record 99000771;
      RoutingHeader@1005 : Record 99000763;
      FromBin@1004 : Record 7354;
      ProductionOrder@1003 : Record 5405;
      ToBin@1002 : Record 7354;
      WarehouseRequest@1001 : Record 5765;
      WarehouseActivityHeader@1009 : Record 5766;
      WarehouseActivityLine@1010 : Record 5767;
      ProdOrderComponent@1008 : Record 5407;
      WorkCenter@1011 : Record 99000754;
    BEGIN
      // Test setup
      TestSetup;

      PC431(
        ArrayOfItem,ProductionBOMHeader,RoutingHeader,
        ArrayOfItem[3]."Flushing Method"::Forward,
        ArrayOfItem[4]."Flushing Method"::Backward,
        WorkCenter."Flushing Method"::Forward);

      // add positive adjustment of items
      FindBin(FromBin,Location,FALSE,1);
      AddInventoryNonDirectLocation(ArrayOfItem[2],Location,FromBin,40);
      AddInventoryNonDirectLocation(ArrayOfItem[3],Location,FromBin,40);
      AddInventoryNonDirectLocation(ArrayOfItem[4],Location,FromBin,40);

      // create Released Production Order and refresh it
      FindBin(ToBin,Location,FALSE,3);
      CreateRelProdOrderAndRefresh(ProductionOrder,ArrayOfItem[1]."No.",10,Location.Code,ToBin.Code);
      SetBinCodeOnCompLines(ProductionOrder,FromBin);

      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",20,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[4]."No.",0,20,0,0,Location.Code,FromBin.Code,1);

      // step 4 changing Bin of CHILD
      FindComponent(ProdOrderComponent,ProductionOrder,ArrayOfItem[2],1);
      ChangeBinForComponent(ProdOrderComponent,ToBin.Code);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // check Inventory Movement
      AssertActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",1,'Inventory Movement');
      AssertActivityLine(WarehouseActivityHeader,ArrayOfItem[2],FromBin,WarehouseActivityLine."Action Type"::Take,
        20,0,1,'Inventory Movement line');
      AssertActivityLine(WarehouseActivityHeader,ArrayOfItem[2],ToBin,WarehouseActivityLine."Action Type"::Place,
        20,0,1,'Inventory Movement line');

      // Autofill Qty. to Handle and registration
      AutofillQtyToHandle(ProductionOrder);
      RegisterInventoryMovement(Location);

      // Assert invt movment deleted
      AssertNoActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",'Inventory Movement');

      // Assert comp lines
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",20,20,20,20,Location.Code,ToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[4]."No.",0,20,0,0,Location.Code,FromBin.Code,1);

      // Post output and consumption
      ExplodeAndPostOutputJournal(ArrayOfItem[1]."No.",ProductionOrder."No.");
      CalculateAndPostConsumption(ProductionOrder);

      // finish the released production order
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      ProductionOrder.Status := ProductionOrder.Status::Finished;

      // Assert comp on finished prod order
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",0,20,20,20,Location.Code,ToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[4]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC432Silver@311();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC432(Location);
    END;

    LOCAL PROCEDURE SC4TC432@310(Location@1000 : Record 14);
    VAR
      ArrayOfItem@1007 : ARRAY [4] OF Record 27;
      ProductionBOMHeader@1006 : Record 99000771;
      RoutingHeader@1005 : Record 99000763;
      FromBin@1004 : Record 7354;
      ProductionOrder@1003 : Record 5405;
      ToBin@1002 : Record 7354;
      WarehouseRequest@1001 : Record 5765;
      WarehouseActivityHeader@1009 : Record 5766;
      WarehouseActivityLine@1010 : Record 5767;
      ProdOrderComponent@1008 : Record 5407;
      WorkCenter@1011 : Record 99000754;
    BEGIN
      // Test setup
      TestSetup;

      PC431(
        ArrayOfItem,ProductionBOMHeader,RoutingHeader,
        ArrayOfItem[3]."Flushing Method"::"Pick + Forward",
        ArrayOfItem[4]."Flushing Method"::"Pick + Backward",
        WorkCenter."Flushing Method"::Forward);

      // add positive adjustment of items
      FindBin(FromBin,Location,FALSE,1);
      AddInventoryNonDirectLocation(ArrayOfItem[2],Location,FromBin,40);
      AddInventoryNonDirectLocation(ArrayOfItem[3],Location,FromBin,40);
      AddInventoryNonDirectLocation(ArrayOfItem[4],Location,FromBin,40);

      // create Released Production Order and refresh it
      FindBin(ToBin,Location,FALSE,3);
      CreateRelProdOrderAndRefresh(ProductionOrder,ArrayOfItem[1]."No.",10,Location.Code,ToBin.Code);
      SetBinCodeOnCompLines(ProductionOrder,FromBin);

      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",20,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[4]."No.",0,20,0,0,Location.Code,FromBin.Code,1);

      // step 4 changing Bin of CHILD
      FindComponent(ProdOrderComponent,ProductionOrder,ArrayOfItem[2],1);
      ChangeBinForComponent(ProdOrderComponent,ToBin.Code);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // check Inventory Movement
      AssertActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",1,'Inventory Movement');
      AssertActivityLine(WarehouseActivityHeader,ArrayOfItem[2],FromBin,WarehouseActivityLine."Action Type"::Take,
        20,0,1,'Inventory Movement line');
      AssertActivityLine(WarehouseActivityHeader,ArrayOfItem[2],ToBin,WarehouseActivityLine."Action Type"::Place,
        20,0,1,'Inventory Movement line');

      // Autofill Qty. to Handle and registration
      AutofillQtyToHandle(ProductionOrder);
      RegisterInventoryMovement(Location);

      // Assert invt movment deleted
      AssertNoActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",'Inventory Movement');

      // Assert comp lines
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",20,20,20,20,Location.Code,ToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[4]."No.",0,20,0,0,Location.Code,FromBin.Code,1);

      // Post output and consumption
      ExplodeAndPostOutputJournal(ArrayOfItem[1]."No.",ProductionOrder."No.");
      CalculateAndPostConsumption(ProductionOrder);

      // finish the released production order
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      ProductionOrder.Status := ProductionOrder.Status::Finished;

      // Assert comp on finished prod order
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",0,20,20,20,Location.Code,ToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[4]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC433Silver@309();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC433(Location);
    END;

    LOCAL PROCEDURE SC4TC433@308(Location@1000 : Record 14);
    VAR
      ArrayOfItem@1007 : ARRAY [4] OF Record 27;
      ProductionBOMHeader@1006 : Record 99000771;
      RoutingHeader@1005 : Record 99000763;
      FromBin@1004 : Record 7354;
      ProductionOrder@1003 : Record 5405;
      ToBin@1002 : Record 7354;
      WarehouseRequest@1001 : Record 5765;
      WarehouseActivityHeader@1009 : Record 5766;
      WarehouseActivityLine@1010 : Record 5767;
      ProdOrderComponent@1008 : Record 5407;
      WorkCenter@1011 : Record 99000754;
    BEGIN
      // Test setup
      TestSetup;

      PC431(
        ArrayOfItem,ProductionBOMHeader,RoutingHeader,
        ArrayOfItem[3]."Flushing Method"::Forward,
        ArrayOfItem[4]."Flushing Method"::Backward,
        WorkCenter."Flushing Method"::Backward);

      // add positive adjustment of items
      FindBin(FromBin,Location,FALSE,1);
      AddInventoryNonDirectLocation(ArrayOfItem[2],Location,FromBin,40);
      AddInventoryNonDirectLocation(ArrayOfItem[3],Location,FromBin,40);
      AddInventoryNonDirectLocation(ArrayOfItem[4],Location,FromBin,40);

      // create Released Production Order and refresh it
      FindBin(ToBin,Location,FALSE,3);
      CreateRelProdOrderAndRefresh(ProductionOrder,ArrayOfItem[1]."No.",10,Location.Code,ToBin.Code);
      SetBinCodeOnCompLines(ProductionOrder,FromBin);

      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",20,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",20,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[4]."No.",20,20,0,0,Location.Code,FromBin.Code,1);

      // step 4 changing Bin of CHILD
      FindComponent(ProdOrderComponent,ProductionOrder,ArrayOfItem[2],1);
      ChangeBinForComponent(ProdOrderComponent,ToBin.Code);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // check Inventory Movement
      AssertActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",1,'Inventory Movement');
      AssertActivityLine(WarehouseActivityHeader,ArrayOfItem[2],FromBin,WarehouseActivityLine."Action Type"::Take,
        20,0,1,'Inventory Movement line');
      AssertActivityLine(WarehouseActivityHeader,ArrayOfItem[2],ToBin,WarehouseActivityLine."Action Type"::Place,
        20,0,1,'Inventory Movement line');

      // Autofill Qty. to Handle and registration
      AutofillQtyToHandle(ProductionOrder);
      RegisterInventoryMovement(Location);

      // Assert invt movment deleted
      AssertNoActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",'Inventory Movement');

      // Assert comp lines
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",20,20,20,20,Location.Code,ToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",20,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[4]."No.",20,20,0,0,Location.Code,FromBin.Code,1);

      // Post output and consumption
      ExplodeAndPostOutputJournal(ArrayOfItem[1]."No.",ProductionOrder."No.");
      CalculateAndPostConsumption(ProductionOrder);

      // finish the released production order
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      ProductionOrder.Status := ProductionOrder.Status::Finished;

      // Assert comp on finished prod order
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",0,20,20,20,Location.Code,ToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[4]."No.",0,20,0,0,Location.Code,FromBin.Code,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC434Silver@307();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC434(Location);
    END;

    LOCAL PROCEDURE SC4TC434@306(Location@1000 : Record 14);
    VAR
      ArrayOfItem@1007 : ARRAY [4] OF Record 27;
      ProductionBOMHeader@1006 : Record 99000771;
      RoutingHeader@1005 : Record 99000763;
      FromBin@1004 : Record 7354;
      ProductionOrder@1003 : Record 5405;
      ToBin@1002 : Record 7354;
      WarehouseRequest@1001 : Record 5765;
      WarehouseActivityHeader@1009 : Record 5766;
      WarehouseActivityLine@1010 : Record 5767;
      WorkCenter@1011 : Record 99000754;
    BEGIN
      // Test setup
      TestSetup;

      PC431(
        ArrayOfItem,ProductionBOMHeader,RoutingHeader,
        ArrayOfItem[3]."Flushing Method"::"Pick + Forward",
        ArrayOfItem[4]."Flushing Method"::"Pick + Backward",
        WorkCenter."Flushing Method"::Backward);

      // add positive adjustment of items
      FindBin(FromBin,Location,FALSE,1);
      AddInventoryNonDirectLocation(ArrayOfItem[2],Location,FromBin,40);
      AddInventoryNonDirectLocation(ArrayOfItem[3],Location,FromBin,40);
      AddInventoryNonDirectLocation(ArrayOfItem[4],Location,FromBin,40);

      // create Released Production Order and refresh it
      FindBin(ToBin,Location,FALSE,3);
      CreateRelProdOrderAndRefresh(ProductionOrder,ArrayOfItem[1]."No.",10,Location.Code,ToBin.Code);
      SetBinCodeOnCompLines(ProductionOrder,FromBin);

      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",20,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",20,20,0,0,Location.Code,FromBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[4]."No.",20,20,0,0,Location.Code,FromBin.Code,1);

      // step 4 changing Bin of all components
      SetBinCodeOnCompLines(ProductionOrder,ToBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // check Inventory Movement
      AssertActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",1,'Inventory Movement');
      AssertActivityLine(WarehouseActivityHeader,ArrayOfItem[2],FromBin,WarehouseActivityLine."Action Type"::Take,
        20,0,1,'Inventory Movement line');
      AssertActivityLine(WarehouseActivityHeader,ArrayOfItem[2],ToBin,WarehouseActivityLine."Action Type"::Place,
        20,0,1,'Inventory Movement line');
      AssertActivityLine(WarehouseActivityHeader,ArrayOfItem[3],FromBin,WarehouseActivityLine."Action Type"::Take,
        20,0,1,'Inventory Movement line');
      AssertActivityLine(WarehouseActivityHeader,ArrayOfItem[3],ToBin,WarehouseActivityLine."Action Type"::Place,
        20,0,1,'Inventory Movement line');
      AssertActivityLine(WarehouseActivityHeader,ArrayOfItem[4],FromBin,WarehouseActivityLine."Action Type"::Take,
        20,0,1,'Inventory Movement line');
      AssertActivityLine(WarehouseActivityHeader,ArrayOfItem[4],ToBin,WarehouseActivityLine."Action Type"::Place,
        20,0,1,'Inventory Movement line');

      // Autofill Qty. to Handle and registration
      AutofillQtyToHandle(ProductionOrder);
      RegisterInventoryMovement(Location);

      // Assert invt movment deleted
      AssertNoActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",'Inventory Movement');

      // Assert comp lines
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",20,20,20,20,Location.Code,ToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",20,20,20,20,Location.Code,ToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[4]."No.",20,20,20,20,Location.Code,ToBin.Code,1);

      // Post output and consumption
      ExplodeAndPostOutputJournal(ArrayOfItem[1]."No.",ProductionOrder."No.");
      CalculateAndPostConsumption(ProductionOrder);

      // finish the released production order
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      ProductionOrder.Status := ProductionOrder.Status::Finished;

      // Assert comp on finished prod order
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[2]."No.",0,20,20,20,Location.Code,ToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[3]."No.",0,20,20,20,Location.Code,ToBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ArrayOfItem[4]."No.",0,20,20,20,Location.Code,ToBin.Code,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC4TC435Silver@251();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC4TC435(Location);
    END;

    LOCAL PROCEDURE SC4TC435@135(Location@1007 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1001 : Record 27;
      FromBin@1002 : Record 7354;
      ToBin@1003 : Record 7354;
      DummyLocation@1004 : Record 14;
      ProductionOrder@1005 : Record 5405;
      WarehouseRequest@1006 : Record 5765;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      DummyLocation := DummyLocation;
      FindBin(FromBin,Location,FALSE,1);
      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FromBin,100);
      AddInventoryNonDirectLocation(ChildItem,DummyLocation,ToBin,100);

      // create Released Production Order and refresh it
      FindBin(ToBin,Location,FALSE,3);
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');

      AddComponentToProdOrder(ProductionOrder,ChildItem."No.",1,Location.Code,ToBin.Code,ChildItem."Flushing Method");

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // verify invt movement
      AssertInvtMovement(ProductionOrder,ChildItem,Location,FromBin,ToBin,10,0,1);
    END;

    [Test]
    PROCEDURE SC7TC71Orange@141();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC7TC71DedicatedBinMCPriorit(Location);
    END;

    [Test]
    PROCEDURE SC7TC71White@312();
    BEGIN
      // Setup
      Initialize;

      SC7TC71DedicatedBinMCPriorit(LocationWhite);
    END;

    LOCAL PROCEDURE SC7TC71DedicatedBinMCPriorit@83(Location@1000 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ChildItem1@1002 : Record 27;
      ChildItem2@1003 : Record 27;
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1006 : ARRAY [2] OF Record 99000754;
      MachineCenter@1005 : Record 99000758;
      ToBin@1007 : ARRAY [2] OF Record 7354;
      FromBin@1009 : ARRAY [2] OF Record 7354;
      OSFBBin@1010 : ARRAY [2] OF Record 7354;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);
      SetBinsOnWC(WorkCenter[1],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);
      FindChild(ParentItem,ChildItem1,1);
      FindChild(ParentItem,ChildItem2,2);

      // Create and refresh prod Order - Exercise
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,Location.Code,ToBin[2].Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,Location.Code,ToBin[2].Code,1);

      // Assert prodorder line bin code
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,Location.Code,FromBin[1].Code,1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code,1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code,1);
    END;

    [Test]
    PROCEDURE SC7TC72Orange@154();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC7TC72DedicatedBinWCPriorit(Location);
    END;

    [Test]
    PROCEDURE SC7TC72White@313();
    BEGIN
      // Setup
      Initialize;

      SC7TC72DedicatedBinWCPriorit(LocationWhite);
    END;

    LOCAL PROCEDURE SC7TC72DedicatedBinWCPriorit@74(Location@1000 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ChildItem1@1002 : Record 27;
      ChildItem2@1003 : Record 27;
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1010 : ARRAY [2] OF Record 99000754;
      MachineCenter@1009 : Record 99000758;
      ToBin@1007 : ARRAY [2] OF Record 7354;
      FromBin@1006 : ARRAY [2] OF Record 7354;
      OSFBBin@1005 : ARRAY [2] OF Record 7354;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);
      SetBinsOnWC(WorkCenter[1],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,'','','');
      FindChild(ParentItem,ChildItem1,1);
      FindChild(ParentItem,ChildItem2,2);

      // Create and refresh prod Order - Exercise
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);

      // Assert prodorder line bin code
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,Location.Code,FromBin[2].Code,1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code,1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code,1);
    END;

    [Test]
    PROCEDURE SC7TC73Orange@155();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC7TC73DedicatedBinLCPriorit(Location);
    END;

    [Test]
    PROCEDURE SC7TC73White@314();
    BEGIN
      // Setup
      Initialize;

      SC7TC73DedicatedBinLCPriorit(LocationWhite);
    END;

    LOCAL PROCEDURE SC7TC73DedicatedBinLCPriorit@79(Location@1000 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ChildItem1@1002 : Record 27;
      ChildItem2@1003 : Record 27;
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1010 : ARRAY [2] OF Record 99000754;
      MachineCenter@1009 : Record 99000758;
      ToBin@1007 : ARRAY [2] OF Record 7354;
      FromBin@1006 : ARRAY [2] OF Record 7354;
      OSFBBin@1005 : ARRAY [2] OF Record 7354;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);
      SetBinsOnLocation(Location,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[1],Location.Code,'','','');
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,'','','');
      FindChild(ParentItem,ChildItem1,1);
      FindChild(ParentItem,ChildItem2,2);

      // Create and refresh prod Order - Exercise
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);

      // Assert prodorder line bin code
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,Location.Code,FromBin[2].Code,1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",Location.Code,'','','',1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code,1);
    END;

    [Test]
    PROCEDURE HeaderBinCodePriorityWhite@325();
    BEGIN
      // Setup
      Initialize;

      HeaderBinCodePriority(LocationWhite);
    END;

    [Test]
    PROCEDURE HeaderBinCodePriorityOrange@330();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,8);
      HeaderBinCodePriority(Location);
    END;

    LOCAL PROCEDURE HeaderBinCodePriority@319(Location@1000 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1010 : ARRAY [2] OF Record 99000754;
      MachineCenter@1009 : Record 99000758;
      ChildItem1@1003 : Record 27;
      ChildItem2@1002 : Record 27;
      BinCode@1011 : Record 7354;
      ToBin@1007 : ARRAY [2] OF Record 7354;
      FromBin@1006 : ARRAY [2] OF Record 7354;
      OSFBBin@1005 : ARRAY [2] OF Record 7354;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);
      SetBinsOnLocation(Location,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[1],Location.Code,'','','');
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,'','','');
      FindChild(ParentItem,ChildItem1,1);
      FindChild(ParentItem,ChildItem2,2);

      // Create and refresh prod Order - Exercise
      FindBin(BinCode,Location,FALSE,10);
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,BinCode.Code);

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);

      // Assert prodorder line bin code
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,Location.Code,BinCode.Code,1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",Location.Code,'','','',1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code,1);
    END;

    [Test]
    PROCEDURE BinCodeOutputJournalHeaderWhite@335();
    BEGIN
      // Setup
      Initialize;

      BinCodeOutputJournalHeader(LocationWhite);
    END;

    [Test]
    PROCEDURE BinCodeOutputJournalHeaderOrange@334();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,8);
      BinCodeOutputJournalHeader(Location);
    END;

    LOCAL PROCEDURE BinCodeOutputJournalHeader@333(Location@1000 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1010 : ARRAY [2] OF Record 99000754;
      MachineCenter@1009 : Record 99000758;
      BinCode@1011 : Record 7354;
      ToBin@1007 : ARRAY [2] OF Record 7354;
      FromBin@1006 : ARRAY [2] OF Record 7354;
      OSFBBin@1005 : ARRAY [2] OF Record 7354;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);
      SetBinsOnLocation(Location,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[1],Location.Code,'','','');
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,'','','');

      // Create and refresh prod Order - Exercise
      FindBin(BinCode,Location,FALSE,10);
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,BinCode.Code);

      // Run explode route on Output Journal
      ExplodeOutputJournal(ParentItem."No.",ProductionOrder."No.");

      // Assert output journal line
      AssertOutputJournalLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",Location.Code,BinCode.Code,1);
      AssertOutputJournalLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",Location.Code,BinCode.Code,1);
    END;

    [Test]
    PROCEDURE BinCodeOutputJournalLocationWhite@343();
    BEGIN
      // Setup
      Initialize;

      BinCodeOutputJournalLocation(LocationWhite);
    END;

    [Test]
    PROCEDURE BinCodeOutputJournalLocationOrange@342();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,8);
      BinCodeOutputJournalLocation(Location);
    END;

    LOCAL PROCEDURE BinCodeOutputJournalLocation@341(Location@1000 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1010 : ARRAY [2] OF Record 99000754;
      MachineCenter@1009 : Record 99000758;
      BinCode@1011 : Record 7354;
      ToBin@1007 : ARRAY [2] OF Record 7354;
      FromBin@1006 : ARRAY [2] OF Record 7354;
      OSFBBin@1005 : ARRAY [2] OF Record 7354;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);
      SetBinsOnLocation(Location,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[1],Location.Code,'','','');
      SetBinsOnWC(WorkCenter[2],Location.Code,'','','');
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,'','','');

      // Create and refresh prod Order - Exercise
      FindBin(BinCode,Location,FALSE,10);
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');

      // Run explode route on Output Journal
      ExplodeOutputJournal(ParentItem."No.",ProductionOrder."No.");

      // Assert output journal line
      AssertOutputJournalLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",Location.Code,Location."From-Production Bin Code",1);
      AssertOutputJournalLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",Location.Code,Location."From-Production Bin Code",1);
    END;

    [Test]
    PROCEDURE SC7TC74Orange@156();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,8);
      SC7TC74DedicatedBinBCPriorit(Location);
    END;

    LOCAL PROCEDURE SC7TC74DedicatedBinBCPriorit@80(Location@1000 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ChildItem1@1002 : Record 27;
      ChildItem2@1003 : Record 27;
      RoutingLine@1004 : Record 99000764;
      FirstBin@1005 : Record 7354;
      SecondBin@1006 : Record 7354;
      WorkCenter@1012 : ARRAY [2] OF Record 99000754;
      MachineCenter@1011 : Record 99000758;
      ToBin@1010 : ARRAY [2] OF Record 7354;
      FromBin@1009 : ARRAY [2] OF Record 7354;
      OSFBBin@1007 : ARRAY [2] OF Record 7354;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);
      SetBinsOnLocation(Location,'','','');
      SetBinsOnWC(WorkCenter[1],Location.Code,'','','');
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,'','','');
      FindChild(ParentItem,ChildItem1,1);
      FindChild(ParentItem,ChildItem2,2);

      FindBin(FirstBin,Location,FALSE,7);
      FindBin(SecondBin,Location,FALSE,8);

      Location.VALIDATE("Default Bin Selection",Location."Default Bin Selection"::"Last-Used Bin");
      Location.MODIFY(TRUE);

      AddInventoryNonDirectLocation(ChildItem1,Location,FirstBin,40);
      AddInventoryNonDirectLocation(ChildItem2,Location,SecondBin,100);

      // Create and refresh prod Order - Exercise
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,Location.Code,FirstBin.Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,Location.Code,SecondBin.Code,1);

      // Assert prodorder line bin code
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,Location.Code,FromBin[2].Code,1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",Location.Code,'','','',1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code,1);
    END;

    [Test]
    PROCEDURE SC7TC75Orange@157();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC7TC75DedicatedBinEmptPriorit(Location);
    END;

    [Test]
    PROCEDURE SC7TC75White@316();
    BEGIN
      // Setup
      Initialize;

      SC7TC75DedicatedBinEmptPriorit(LocationWhite);
    END;

    LOCAL PROCEDURE SC7TC75DedicatedBinEmptPriorit@81(Location@1000 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ChildItem1@1002 : Record 27;
      ChildItem2@1003 : Record 27;
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1010 : ARRAY [2] OF Record 99000754;
      MachineCenter@1009 : Record 99000758;
      ToBin@1007 : ARRAY [2] OF Record 7354;
      FromBin@1006 : ARRAY [2] OF Record 7354;
      OSFBBin@1005 : ARRAY [2] OF Record 7354;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);
      SetBinsOnLocation(Location,'','','');
      SetBinsOnWC(WorkCenter[1],Location.Code,'','','');
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,'','','');
      FindChild(ParentItem,ChildItem1,1);
      FindChild(ParentItem,ChildItem2,2);

      // Create and refresh prod Order - Exercise
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,Location.Code,'',1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,Location.Code,'',1);

      // Assert prodorder line bin code
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,Location.Code,FromBin[2].Code,1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",Location.Code,'','','',1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code,1);
    END;

    [Test]
    PROCEDURE SC7TC77Orange@158();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC7TC77DedicatedBinBackward(Location);
    END;

    [Test]
    PROCEDURE SC7TC77White@318();
    BEGIN
      // Setup
      Initialize;

      SC7TC77DedicatedBinBackward(LocationWhite);
    END;

    LOCAL PROCEDURE SC7TC77DedicatedBinBackward@85(Location@1000 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ChildItem1@1002 : Record 27;
      ChildItem2@1003 : Record 27;
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1010 : ARRAY [2] OF Record 99000754;
      MachineCenter@1009 : Record 99000758;
      ToBin@1007 : ARRAY [2] OF Record 7354;
      FromBin@1006 : ARRAY [2] OF Record 7354;
      OSFBBin@1005 : ARRAY [2] OF Record 7354;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);
      SetBinsOnLocation(Location,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[1],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);

      FindChild(ParentItem,ChildItem1,1);
      ChildItem1.VALIDATE("Flushing Method",ChildItem1."Flushing Method"::Backward);
      ChildItem1.MODIFY(TRUE);
      FindChild(ParentItem,ChildItem2,2);

      // Create and refresh prod Order - Exercise
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,Location.Code,OSFBBin[1].Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);

      // Assert prodorder line bin code
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,Location.Code,FromBin[2].Code,1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code,1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code,1);
    END;

    [Test]
    PROCEDURE SC7TC78Orange@159();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC7TC78DedicatedBinForward(Location);
    END;

    LOCAL PROCEDURE SC7TC78DedicatedBinForward@82(Location@1000 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ChildItem1@1002 : Record 27;
      ChildItem2@1003 : Record 27;
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1010 : ARRAY [2] OF Record 99000754;
      MachineCenter@1009 : Record 99000758;
      ToBin@1007 : ARRAY [2] OF Record 7354;
      FromBin@1006 : ARRAY [2] OF Record 7354;
      OSFBBin@1005 : ARRAY [2] OF Record 7354;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);

      SetBinsOnLocation(Location,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[1],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);

      FindChild(ParentItem,ChildItem1,1);
      ChildItem1.VALIDATE("Flushing Method",ChildItem1."Flushing Method"::Forward);
      ChildItem1.MODIFY(TRUE);
      FindChild(ParentItem,ChildItem2,2);

      AddInventoryNonDirectLocation(ChildItem1,Location,OSFBBin[1],40);

      // Create and refresh prod Order - Exercise
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",0,20,0,0,Location.Code,OSFBBin[1].Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);

      // Assert prodorder line bin code
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,Location.Code,FromBin[2].Code,1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code,1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code,1);
    END;

    [Test]
    PROCEDURE SC7TC79Orange@160();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC7TC79DedicatedBinPForward(Location);
    END;

    LOCAL PROCEDURE SC7TC79DedicatedBinPForward@86(Location@1000 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ChildItem1@1002 : Record 27;
      ChildItem2@1003 : Record 27;
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1010 : ARRAY [2] OF Record 99000754;
      MachineCenter@1009 : Record 99000758;
      ToBin@1007 : ARRAY [2] OF Record 7354;
      FromBin@1006 : ARRAY [2] OF Record 7354;
      OSFBBin@1005 : ARRAY [2] OF Record 7354;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);

      SetBinsOnLocation(Location,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[1],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);

      FindChild(ParentItem,ChildItem1,1);
      ChildItem1.VALIDATE("Flushing Method",ChildItem1."Flushing Method"::"Pick + Forward");
      ChildItem1.MODIFY(TRUE);
      FindChild(ParentItem,ChildItem2,2);

      AddInventoryNonDirectLocation(ChildItem1,Location,ToBin[1],40);

      // Create and refresh prod Order - Exercise
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",0,20,0,0,Location.Code,ToBin[1].Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);

      // Assert prodorder line bin code
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,Location.Code,FromBin[2].Code,1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code,1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code,1);
    END;

    [Test]
    PROCEDURE SC7TC710Orange@161();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC7TC710DedicatedBinPBackward(Location);
    END;

    [Test]
    PROCEDURE SC7TC710White@320();
    BEGIN
      // Setup
      Initialize;

      SC7TC710DedicatedBinPBackward(LocationWhite);
    END;

    LOCAL PROCEDURE SC7TC710DedicatedBinPBackward@90(Location@1000 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ChildItem1@1002 : Record 27;
      ChildItem2@1003 : Record 27;
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1010 : ARRAY [2] OF Record 99000754;
      MachineCenter@1009 : Record 99000758;
      ToBin@1007 : ARRAY [2] OF Record 7354;
      FromBin@1006 : ARRAY [2] OF Record 7354;
      OSFBBin@1005 : ARRAY [2] OF Record 7354;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);
      SetBinsOnLocation(Location,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[1],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);

      FindChild(ParentItem,ChildItem1,1);
      ChildItem1.VALIDATE("Flushing Method",ChildItem1."Flushing Method"::"Pick + Backward");
      ChildItem1.MODIFY(TRUE);
      FindChild(ParentItem,ChildItem2,2);

      // Create and refresh prod Order - Exercise
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);

      // Assert prodorder line bin code
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,Location.Code,FromBin[2].Code,1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code,1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code,1);
    END;

    [ConfirmHandler]
    PROCEDURE ChangeLocationWCConfirmHandler@93(Question@1000 : Text[1024];VAR Val@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(ConvertMessage(Question),MSG_CHANGE_LOC) > 0,Question);
      Val := TRUE;
    END;

    [Test]
    [HandlerFunctions(ChangeLocationWCConfirmHandler)]
    PROCEDURE SC7TC711Orange@162();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC7TC711DedicatedBinNoChange(Location);
    END;

    [Test]
    [HandlerFunctions(ChangeLocationWCConfirmHandler)]
    PROCEDURE SC7TC711White@322();
    BEGIN
      // Setup
      Initialize;

      SC7TC711DedicatedBinNoChange(LocationWhite);
    END;

    LOCAL PROCEDURE SC7TC711DedicatedBinNoChange@92(Location@1005 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ChildItem1@1002 : Record 27;
      ChildItem2@1003 : Record 27;
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1011 : ARRAY [2] OF Record 99000754;
      MachineCenter@1010 : Record 99000758;
      ToBin@1009 : ARRAY [2] OF Record 7354;
      FromBin@1007 : ARRAY [2] OF Record 7354;
      OSFBBin@1006 : ARRAY [2] OF Record 7354;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);
      SetBinsOnLocation(Location,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[1],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);

      FindChild(ParentItem,ChildItem1,1);
      FindChild(ParentItem,ChildItem2,2);

      // Create and refresh prod Order - Exercise
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);

      // Assert prodorder line bin code
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,Location.Code,FromBin[2].Code,1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code,1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code,1);

      // Change master data
      SetBinsOnWC(WorkCenter[1],'','','','');
      SetBinsOnWC(WorkCenter[2],'','','','');

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);

      // Assert prodorder line bin code
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,Location.Code,FromBin[2].Code,1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code,1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code,1);
    END;

    [ConfirmHandler]
    PROCEDURE SC7TC712ConfirmHandler@91(Question@1000 : Text[1024];VAR Val@1001 : Boolean);
    BEGIN
      ErrorMessageCounter += 1;

      CASE ErrorMessageCounter OF
        2:
          Assert.IsTrue(STRPOS(ConvertMessage(Question),MSG_CHANGE_LOC) > 0,Question);
        1:
          Assert.IsTrue(STRPOS(ConvertMessage(Question),MSG_UNMATCHED_BIN_CODE) > 0,Question);
      END;

      Val := TRUE;
    END;

    [Test]
    [HandlerFunctions(SC7TC712ConfirmHandler)]
    PROCEDURE SC7TC712Orange@163();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC7TC712DedicatedBinRfhRouting(Location);
    END;

    [Test]
    [HandlerFunctions(SC7TC712ConfirmHandler)]
    PROCEDURE SC7TC712White@324();
    BEGIN
      // Setup
      Initialize;

      SC7TC712DedicatedBinRfhRouting(LocationWhite);
    END;

    LOCAL PROCEDURE SC7TC712DedicatedBinRfhRouting@94(Location@1005 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ChildItem1@1002 : Record 27;
      ChildItem2@1003 : Record 27;
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1011 : ARRAY [2] OF Record 99000754;
      MachineCenter@1010 : Record 99000758;
      ToBin@1009 : ARRAY [2] OF Record 7354;
      FromBin@1007 : ARRAY [2] OF Record 7354;
      OSFBBin@1006 : ARRAY [2] OF Record 7354;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);
      SetBinsOnLocation(Location,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[1],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);

      FindChild(ParentItem,ChildItem1,1);
      FindChild(ParentItem,ChildItem2,2);

      // Create and refresh prod Order - Exercise
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);

      // Assert prodorder line bin code
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,Location.Code,FromBin[2].Code,1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code,1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code,1);

      // Change master data
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);

      // Refresh routings
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,FALSE,TRUE,FALSE,FALSE);

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,Location.Code,ToBin[2].Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,Location.Code,ToBin[2].Code,1);

      // Assert prodorder line bin code - should not be changed
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,Location.Code,FromBin[2].Code,1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code,1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code,1);
    END;

    [Test]
    PROCEDURE SC7TC713Orange@164();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC7TC713DedicatedBinRfhComp(Location);
    END;

    [Test]
    PROCEDURE SC7TC713White@321();
    BEGIN
      // Setup
      Initialize;

      SC7TC713DedicatedBinRfhComp(LocationWhite);
    END;

    LOCAL PROCEDURE SC7TC713DedicatedBinRfhComp@97(Location@1005 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ChildItem1@1002 : Record 27;
      ChildItem2@1003 : Record 27;
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1011 : ARRAY [2] OF Record 99000754;
      MachineCenter@1010 : Record 99000758;
      ToBin@1009 : ARRAY [2] OF Record 7354;
      FromBin@1007 : ARRAY [2] OF Record 7354;
      OSFBBin@1006 : ARRAY [2] OF Record 7354;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);
      SetBinsOnLocation(Location,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[1],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);

      FindChild(ParentItem,ChildItem1,1);
      FindChild(ParentItem,ChildItem2,2);

      // Create and refresh prod Order - Exercise
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);

      // Assert prodorder line bin code
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,Location.Code,FromBin[2].Code,1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code,1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code,1);

      // Change master data
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);

      // Refresh routings
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,FALSE,FALSE,TRUE,FALSE);

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,Location.Code,ToBin[1].Code,1);

      // Assert prodorder line bin code
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,Location.Code,FromBin[2].Code,1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code,1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code,1);
    END;

    [Test]
    PROCEDURE SC7TC715Orange@165();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC7TC715DedicatedBinDiffLoc(Location);
    END;

    [Test]
    PROCEDURE SC7TC715White@326();
    BEGIN
      // Setup
      Initialize;

      SC7TC715DedicatedBinDiffLoc(LocationWhite);
    END;

    LOCAL PROCEDURE SC7TC715DedicatedBinDiffLoc@121(Location@1000 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ChildItem1@1002 : Record 27;
      ChildItem2@1003 : Record 27;
      RoutingLine@1004 : Record 99000764;
      LocationSilv@1006 : Record 14;
      ToBinS@1007 : Record 7354;
      FromBinS@1009 : Record 7354;
      OSFBBinS@1010 : Record 7354;
      WorkCenter@1015 : ARRAY [2] OF Record 99000754;
      MachineCenter@1014 : Record 99000758;
      ToBin@1013 : ARRAY [2] OF Record 7354;
      FromBin@1012 : ARRAY [2] OF Record 7354;
      OSFBBin@1011 : ARRAY [2] OF Record 7354;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);
      SetBinsOnLocation(Location,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[1],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);

      FindChild(ParentItem,ChildItem1,1);
      FindChild(ParentItem,ChildItem2,2);

      // Create SILVER like location
      LocationSetup(LocationSilv,FALSE,FALSE,FALSE,FALSE,TRUE,6,4);
      FindBin(ToBinS,LocationSilv,TRUE,1);
      FindBin(FromBinS,LocationSilv,TRUE,2);
      FindBin(OSFBBinS,LocationSilv,TRUE,3);
      SetBinsOnLocation(LocationSilv,ToBinS.Code,FromBinS.Code,OSFBBinS.Code);

      // Create and refresh prod Order - Exercise
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,LocationSilv.Code,'');

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,LocationSilv.Code,ToBinS.Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,LocationSilv.Code,ToBinS.Code,1);

      // Assert prodorder line bin code
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,LocationSilv.Code,FromBinS.Code,1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",LocationSilv.Code,'','','',1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",LocationSilv.Code,'','','',1);
    END;

    [Test]
    PROCEDURE SC7TC716Orange@137();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC7TC716DedicatedBinCompAtLoc(Location);
    END;

    [Test]
    PROCEDURE SC7TC716White@329();
    BEGIN
      // Setup
      Initialize;

      SC7TC716DedicatedBinCompAtLoc(LocationWhite);
    END;

    LOCAL PROCEDURE SC7TC716DedicatedBinCompAtLoc@136(Location@1000 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ChildItem1@1002 : Record 27;
      ChildItem2@1003 : Record 27;
      RoutingLine@1004 : Record 99000764;
      LocationSilv@1006 : Record 14;
      LocationW@1016 : Record 14;
      ToBinS@1007 : Record 7354;
      FromBinS@1009 : Record 7354;
      OSFBBinS@1010 : Record 7354;
      WorkCenter@1015 : ARRAY [2] OF Record 99000754;
      MachineCenter@1014 : Record 99000758;
      ToBin@1013 : ARRAY [2] OF Record 7354;
      FromBin@1012 : ARRAY [2] OF Record 7354;
      OSFBBin@1011 : ARRAY [2] OF Record 7354;
      ManufacturingSetup@1005 : Record 99000765;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);
      SetBinsOnLocation(Location,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[1],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);

      FindChild(ParentItem,ChildItem1,1);
      FindChild(ParentItem,ChildItem2,2);

      // Create SILVER like location
      LocationSetup(LocationSilv,FALSE,FALSE,FALSE,FALSE,TRUE,6,4);
      FindBin(ToBinS,LocationSilv,TRUE,1);
      FindBin(FromBinS,LocationSilv,TRUE,2);
      FindBin(OSFBBinS,LocationSilv,TRUE,3);
      SetBinsOnLocation(LocationSilv,ToBinS.Code,FromBinS.Code,OSFBBinS.Code);

      // Create another WHITE like location
      LibraryWarehouse.CreateFullWMSLocation(LocationW,10);

      // Set components at location
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Components at Location",LocationSilv.Code);
      ManufacturingSetup.MODIFY(TRUE);

      // Create and refresh production order on WHITE like location
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,LocationW.Code,LocationW."From-Production Bin Code");

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,LocationSilv.Code,ToBinS.Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,LocationSilv.Code,ToBinS.Code,1);

      // Assert prodorder line bin code
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,LocationW.Code,LocationW."From-Production Bin Code",1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",LocationW.Code,'','','',1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",LocationW.Code,'','','',1);
    END;

    [Test]
    PROCEDURE SC7TC717Orange@140();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC7TC717DedicatedBinChgLocComp(Location);
    END;

    [Test]
    PROCEDURE SC7TC717White@332();
    BEGIN
      // Setup
      Initialize;

      SC7TC717DedicatedBinChgLocComp(LocationWhite);
    END;

    LOCAL PROCEDURE SC7TC717DedicatedBinChgLocComp@138(Location@1000 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ChildItem1@1002 : Record 27;
      ChildItem2@1003 : Record 27;
      RoutingLine@1004 : Record 99000764;
      LocationSilv@1006 : Record 14;
      LocationW@1017 : Record 14;
      ToBinS@1007 : Record 7354;
      FromBinS@1009 : Record 7354;
      OSFBBinS@1010 : Record 7354;
      WorkCenter@1015 : ARRAY [2] OF Record 99000754;
      MachineCenter@1014 : Record 99000758;
      ToBin@1013 : ARRAY [2] OF Record 7354;
      FromBin@1012 : ARRAY [2] OF Record 7354;
      OSFBBin@1011 : ARRAY [2] OF Record 7354;
      ManufacturingSetup@1005 : Record 99000765;
      ProdOrderComponent@1016 : Record 5407;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);
      SetBinsOnLocation(Location,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[1],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);

      FindChild(ParentItem,ChildItem1,1);
      FindChild(ParentItem,ChildItem2,2);

      // Create SILVER like location
      LocationSetup(LocationSilv,FALSE,FALSE,FALSE,FALSE,TRUE,6,4);
      FindBin(ToBinS,LocationSilv,TRUE,1);
      FindBin(FromBinS,LocationSilv,TRUE,2);
      FindBin(OSFBBinS,LocationSilv,TRUE,3);
      SetBinsOnLocation(LocationSilv,ToBinS.Code,FromBinS.Code,OSFBBinS.Code);

      // Create another WHITE like location
      LibraryWarehouse.CreateFullWMSLocation(LocationW,10);

      // Set components at location
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Components at Location",LocationSilv.Code);
      ManufacturingSetup.MODIFY(TRUE);

      // Create and refresh production order on WHITE like location
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,LocationW.Code,LocationW."From-Production Bin Code");

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,LocationSilv.Code,ToBinS.Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,LocationSilv.Code,ToBinS.Code,1);

      // Assert prodorder line bin code
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,LocationW.Code,LocationW."From-Production Bin Code",1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",LocationW.Code,'','','',1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",LocationW.Code,'','','',1);

      // Change location code on the second component line
      FindComponent(ProdOrderComponent,ProductionOrder,ChildItem2,1);
      ProdOrderComponent.VALIDATE("Location Code",LocationW.Code);
      ProdOrderComponent.MODIFY(TRUE);

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,LocationSilv.Code,ToBinS.Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,LocationW.Code,LocationW."To-Production Bin Code",1);
    END;

    [Test]
    PROCEDURE SC7TC718Orange@146();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC7TC718DedicatedBinChgLocComp(Location);
    END;

    [Test]
    PROCEDURE SC7TC718White@323();
    BEGIN
      // Setup
      Initialize;

      SC7TC718DedicatedBinChgLocComp(LocationWhite);
    END;

    LOCAL PROCEDURE SC7TC718DedicatedBinChgLocComp@145(Location@1000 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ChildItem1@1002 : Record 27;
      ChildItem2@1003 : Record 27;
      RoutingLine@1004 : Record 99000764;
      LocationSilv@1006 : Record 14;
      LocationW@1017 : Record 14;
      ToBinS@1007 : Record 7354;
      FromBinS@1009 : Record 7354;
      OSFBBinS@1010 : Record 7354;
      WorkCenter@1015 : ARRAY [2] OF Record 99000754;
      MachineCenter@1014 : Record 99000758;
      ToBin@1013 : ARRAY [2] OF Record 7354;
      FromBin@1012 : ARRAY [2] OF Record 7354;
      OSFBBin@1011 : ARRAY [2] OF Record 7354;
      ManufacturingSetup@1005 : Record 99000765;
      ProdOrderComponent@1016 : Record 5407;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);
      SetBinsOnLocation(Location,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[1],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);

      FindChild(ParentItem,ChildItem1,1);
      FindChild(ParentItem,ChildItem2,2);
      ChildItem2.VALIDATE("Flushing Method",ChildItem2."Flushing Method"::Backward);
      ChildItem2.MODIFY(TRUE);

      // Create SILVER like location
      LocationSetup(LocationSilv,FALSE,FALSE,FALSE,FALSE,TRUE,6,4);
      FindBin(ToBinS,LocationSilv,TRUE,1);
      FindBin(FromBinS,LocationSilv,TRUE,2);
      FindBin(OSFBBinS,LocationSilv,TRUE,3);
      SetBinsOnLocation(LocationSilv,ToBinS.Code,FromBinS.Code,OSFBBinS.Code);

      // Create another WHITE like location
      LibraryWarehouse.CreateFullWMSLocation(LocationW,10);

      // Set components at location
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Components at Location",LocationSilv.Code);
      ManufacturingSetup.MODIFY(TRUE);

      // Create and refresh production order on WHITE like location
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,LocationW.Code,LocationW."From-Production Bin Code");

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,LocationSilv.Code,ToBinS.Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,LocationSilv.Code,OSFBBinS.Code,1);

      // Assert prodorder line bin code
      AssertProdOrderLine(ProductionOrder,ParentItem."No.",10,LocationW.Code,LocationW."From-Production Bin Code",1);

      // Assert routing lines
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_10,RoutingLine.Type::"Machine Center",
        MachineCenter."No.",LocationW.Code,'','','',1);
      AssertProdOrderRoutingLine(ProductionOrder,ROUTING_LINE_20,RoutingLine.Type::"Work Center",
        WorkCenter[2]."No.",LocationW.Code,'','','',1);

      // Change location code on the second component line
      FindComponent(ProdOrderComponent,ProductionOrder,ChildItem2,1);
      ProdOrderComponent.VALIDATE("Location Code",LocationW.Code);
      ProdOrderComponent.MODIFY(TRUE);

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,LocationSilv.Code,ToBinS.Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,LocationW.Code,LocationW."Open Shop Floor Bin Code",1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SC7TC719Orange@148();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,FALSE,TRUE,TRUE,TRUE,6,4);
      SC7TC719DedicatedInvtMovm(Location);
    END;

    LOCAL PROCEDURE SC7TC719DedicatedInvtMovm@147(Location@1000 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ChildItem1@1002 : Record 27;
      ChildItem2@1003 : Record 27;
      FirstBin@1005 : Record 7354;
      SecondBin@1006 : Record 7354;
      WorkCenter@1012 : ARRAY [2] OF Record 99000754;
      MachineCenter@1011 : Record 99000758;
      ToBin@1010 : ARRAY [2] OF Record 7354;
      FromBin@1009 : ARRAY [2] OF Record 7354;
      OSFBBin@1007 : ARRAY [2] OF Record 7354;
      WarehouseActivityHeader@1013 : Record 5766;
      WarehouseActivityLine@1014 : Record 5767;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);
      SetBinsOnLocation(Location,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[1],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);

      FindChild(ParentItem,ChildItem1,1);
      FindChild(ParentItem,ChildItem2,2);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);

      AddInventoryNonDirectLocation(ChildItem1,Location,FirstBin,100);
      AddInventoryNonDirectLocation(ChildItem2,Location,SecondBin,100);

      // Create and refresh prod Order - Exercise
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');

      // Assert component lines
      AssertProdOrderComponent(ProductionOrder,ChildItem1."No.",20,20,0,0,Location.Code,ToBin[2].Code,1);
      AssertProdOrderComponent(ProductionOrder,ChildItem2."No.",20,20,0,0,Location.Code,ToBin[2].Code,1);

      // Create invt movement
      LibraryWarehouse.CreateInvtPutPickMovement(WarehouseActivityHeader."Source Document"::"Prod. Consumption",
        ProductionOrder."No.",FALSE,FALSE,TRUE);

      // Verify movement
      AssertActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Movement",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.",1,'Inventory Movement');
      AssertActivityLine(WarehouseActivityHeader,ChildItem1,FirstBin,WarehouseActivityLine."Action Type"::Take,
        20,0,1,'Inventory Movement line');
      AssertActivityLine(WarehouseActivityHeader,ChildItem1,ToBin[2],WarehouseActivityLine."Action Type"::Place,
        20,0,1,'Inventory Movement line');
      AssertActivityLine(WarehouseActivityHeader,ChildItem2,SecondBin,WarehouseActivityLine."Action Type"::Take,
        20,0,1,'Inventory Movement line');
      AssertActivityLine(WarehouseActivityHeader,ChildItem2,ToBin[2],WarehouseActivityLine."Action Type"::Place,
        20,0,1,'Inventory Movement line');
    END;

    [Test]
    PROCEDURE SC7TC721Orange@153();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC7TC721DedicatedWhsePick(Location);
    END;

    LOCAL PROCEDURE SC7TC721DedicatedWhsePick@152(Location@1000 : Record 14);
    VAR
      ParentItem@1001 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ChildItem1@1002 : Record 27;
      ChildItem2@1003 : Record 27;
      WorkCenter@1012 : ARRAY [2] OF Record 99000754;
      MachineCenter@1011 : Record 99000758;
      ToBin@1010 : ARRAY [2] OF Record 7354;
      FromBin@1009 : ARRAY [2] OF Record 7354;
      OSFBBin@1007 : ARRAY [2] OF Record 7354;
      WarehouseActivityHeader@1013 : Record 5766;
      WarehouseActivityLine@1014 : Record 5767;
      Bin@1005 : Record 7354;
      ProdOrderComponent@1006 : Record 5407;
    BEGIN
      // Test setup
      DedicatedBinTestSetup(ParentItem,Location,WorkCenter,MachineCenter,ToBin,FromBin,OSFBBin);
      SetBinsOnLocation(Location,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[1],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      SetBinsOnWC(WorkCenter[2],Location.Code,ToBin[1].Code,FromBin[1].Code,OSFBBin[1].Code);
      MachineCenter.GET(MachineCenter."No.");
      SetBinsOnMC(MachineCenter,ToBin[2].Code,FromBin[2].Code,OSFBBin[2].Code);

      FindChild(ParentItem,ChildItem1,1);
      FindChild(ParentItem,ChildItem2,2);

      FindBin(Bin,Location,FALSE,1);

      AddInventoryNonDirectLocation(ChildItem1,Location,Bin,100);
      AddInventoryNonDirectLocation(ChildItem2,Location,Bin,100);

      // Create and refresh prod Order - Exercise
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",10,Location.Code,'');

      FindComponent(ProdOrderComponent,ProductionOrder,ChildItem1,1);
      ChangeBinForComponent(ProdOrderComponent,FromBin[2].Code);
      FindComponent(ProdOrderComponent,ProductionOrder,ChildItem2,1);
      ChangeBinForComponent(ProdOrderComponent,FromBin[1].Code);

      // Create warehouse pick
      LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);

      AssertActivityHdr(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::Pick,
        0,'',1,MSG_WHSE_PICK);
      AssertActivityLine(WarehouseActivityHeader,ChildItem1,Bin,WarehouseActivityLine."Action Type"::Take,20,20,1,
        MSG_WHSE_PICK_LINE);
      AssertActivityLine(WarehouseActivityHeader,ChildItem1,FromBin[2],WarehouseActivityLine."Action Type"::Place,20,20,1,
        MSG_WHSE_PICK_LINE);
      AssertActivityLine(WarehouseActivityHeader,ChildItem2,Bin,WarehouseActivityLine."Action Type"::Take,20,20,1,
        MSG_WHSE_PICK_LINE);
      AssertActivityLine(WarehouseActivityHeader,ChildItem2,FromBin[1],WarehouseActivityLine."Action Type"::Place,20,20,1,
        MSG_WHSE_PICK_LINE);
    END;

    [MessageHandler]
    PROCEDURE TC81MessageHandler@14(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,MSG_ACTIVITIES_CREATED) > 0,Message);
    END;

    [Test]
    [HandlerFunctions(TC81MessageHandler)]
    PROCEDURE SC8TC81Silver@167();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC8TC81InvtPick(Location);
    END;

    LOCAL PROCEDURE SC8TC81InvtPick@20(Location@1006 : Record 14);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
      WhseActivityHdr@1005 : Record 5766;
      WhseActivityLine@1007 : Record 5767;
      InternalMovementHeader@1008 : Record 7346;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FirstBin,1);
      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,SecondBin,FirstBin.Code);
      CreateSalesOrder(SalesHeader,SalesLine,Item,Location,FirstBin,1,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateInvtPutPickMovement(WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);

      // Verify that inventory pick is created
      AssertActivityHdr(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Pick",
        WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",1,MSG_INVENTORY_PICK);
      AssertActivityLine(WhseActivityHdr,Item,FirstBin,WhseActivityLine."Action Type"::Take,1,0,1,MSG_INVENTORY_PICK);
    END;

    [Test]
    PROCEDURE SC8TC81Orange@187();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC8TC81WhsePick(Location);
    END;

    LOCAL PROCEDURE SC8TC81WhsePick@16(Location@1006 : Record 14);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
      WhseActivityHdr@1005 : Record 5766;
      WhseActivityLine@1007 : Record 5767;
      InternalMovementHeader@1008 : Record 7346;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FirstBin,1);
      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,SecondBin,FirstBin.Code);
      CreateSalesOrder(SalesHeader,SalesLine,Item,Location,FirstBin,1,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      SetBinAndCreateWhsePick(Location,SecondBin);

      // Verify that whse pick is created
      AssertWhseActivityHdr(WhseActivityHdr,Location,WhseActivityHdr.Type::Pick,
        MSG_WHSE_PICK);
      AssertActivityLine(WhseActivityHdr,Item,FirstBin,WhseActivityLine."Action Type"::Take,1,1,1,MSG_WHSE_PICK_LINE);
      AssertActivityLine(WhseActivityHdr,Item,SecondBin,WhseActivityLine."Action Type"::Place,1,1,1,MSG_WHSE_PICK_LINE);
    END;

    [MessageHandler]
    PROCEDURE TC82MessageHandler@24(Message@1000 : Text[1024]);
    BEGIN
      ErrorMessageCounter += 1;

      CASE ErrorMessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,MSG_ACTIVITIES_CREATED) > 0,Message);
      END;
    END;

    [ConfirmHandler]
    PROCEDURE CreateInvtMvmntConfirmHandler@28(Question@1000 : Text[1024];VAR Val@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(Question,MSG_CREATE_MVMT) > 0,Question);
      Val := TRUE;
    END;

    [Test]
    [HandlerFunctions(TC82MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC8TC82Silver@169();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC8TC82InvtPick(Location);
    END;

    LOCAL PROCEDURE SC8TC82InvtPick@25(Location@1006 : Record 14);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
      WhseActivityHdr@1005 : Record 5766;
      InternalMovementHeader@1008 : Record 7346;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FirstBin,1);
      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,SecondBin,FirstBin.Code);
      CreateSalesOrder(SalesHeader,SalesLine,Item,Location,FirstBin,1,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateInvtPutPickMovement(WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);

      // Check that invt movement cannot be created - nothing to handle message
      AssertCannotCreateInvtMvmt(InternalMovementHeader);
    END;

    [Test]
    [HandlerFunctions(CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC8TC82Orange@188();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC8TC82WhsePick(Location);
    END;

    LOCAL PROCEDURE SC8TC82WhsePick@26(Location@1005 : Record 14);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
      InternalMovementHeader@1008 : Record 7346;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FirstBin,1);
      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,SecondBin,FirstBin.Code);
      CreateSalesOrder(SalesHeader,SalesLine,Item,Location,FirstBin,1,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      SetBinAndCreateWhsePick(Location,SecondBin);

      // Check that invt movement cannot be created - nothing to handle message
      AssertCannotCreateInvtMvmt(InternalMovementHeader);
    END;

    [Test]
    [HandlerFunctions(CreateInvtMvmntConfirmHandler,TC31MessageHandler)]
    PROCEDURE SC8TC83Silver@170();
    VAR
      Item@1006 : Record 27;
      FirstBin@1005 : Record 7354;
      SecondBin@1004 : Record 7354;
      Location@1000 : Record 14;
      InternalMovementHeader@1001 : Record 7346;
      WhseActivityHeader@1003 : Record 5766;
      WhseActivityLine@1002 : Record 5767;
    BEGIN
      // [FEATURE] [Internal Movement] [Inventory Movement] [Reservation] [Bin]
      // [SCENARIO 202492] Inventory Movement could be created from Internal Movement if quantity in a bin is reserved.
      Initialize;

      // [GIVEN] Location "L" set up for mandatory bin.
      // [GIVEN] Item "I" with inventory in bin "B1" in location "L".
      // [GIVEN] Internal movement of item "I" from bin "B1" to "B2".
      // [GIVEN] Reserved sales order of "I" from bin "B1".
      CreateInternalMovementFromBinWithReservedQty(InternalMovementHeader,Item,FirstBin,SecondBin,Location);

      // [WHEN] Create Inventory Movement from Internal Movement.
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);

      // [THEN] Internal Movement is deleted.
      AssertInternalMovementDeleted(InternalMovementHeader);

      // [THEN] Inventory Movement of item "I" from bin "B1" to "B2" is created.
      GetLastActvHdrCreatedNoSource(WhseActivityHeader,Location,WhseActivityHeader.Type::"Invt. Movement");
      AssertActivityLine(
        WhseActivityHeader,Item,FirstBin,WhseActivityLine."Action Type"::Take,1,0,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(
        WhseActivityHeader,Item,SecondBin,WhseActivityLine."Action Type"::Place,1,0,1,MSG_INVENTORY_MOVEMENT_LINE);
    END;

    LOCAL PROCEDURE CreateInternalMovementFromBinWithReservedQty@31(VAR InternalMovementHeader@1008 : Record 7346;VAR Item@1004 : Record 27;VAR FirstBin@1003 : Record 7354;VAR SecondBin@1000 : Record 7354;VAR Location@1005 : Record 14);
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);

      AddInventoryNonDirectLocation(Item,Location,FirstBin,1);
      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,SecondBin,FirstBin.Code);
      CreateSalesOrder(SalesHeader,SalesLine,Item,Location,FirstBin,1,WORKDATE);
      ReserveSalesLine(SalesLine,TRUE,1);
    END;

    [MessageHandler]
    PROCEDURE TC84MessageHandlerSilver@39(Message@1000 : Text[1024]);
    BEGIN
      ErrorMessageCounter += 1;

      CASE ErrorMessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,MSG_HAS_BEEN_CREATED) > 0,Message);
        2:
          Assert.IsTrue(STRPOS(Message,MSG_THERE_NOTHING_TO_CREATE) > 0,Message);
      END;
    END;

    [Test]
    [HandlerFunctions(TC84MessageHandlerSilver,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC8TC84Silver@171();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC8TC84InvtPick(Location);
    END;

    LOCAL PROCEDURE SC8TC84InvtPick@34(Location@1006 : Record 14);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
      WhseActivityHdr@1005 : Record 5766;
      WhseActivityLine@1007 : Record 5767;
      InternalMovementHeader@1008 : Record 7346;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FirstBin,1);
      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,SecondBin,FirstBin.Code);
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);
      CreateSalesOrder(SalesHeader,SalesLine,Item,Location,FirstBin,1,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // This shouldn't be created - handle message - nothing to create
      LibraryWarehouse.CreateInvtPutPickMovement(WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);

      // Register the invt movement
      AutoFillQtyAndRegisterInvtMvmt(Location);

      // Change bin code on sales line and create the pick for the Sales order
      SalesLine.FIND;
      SalesLine.VALIDATE("Bin Code",SecondBin.Code);
      SalesLine.MODIFY(TRUE);
      LibraryWarehouse.CreateInvtPutPickMovement(WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);

      // Verify that inventory pick is created
      AssertActivityHdr(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Pick",
        WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",1,MSG_INVENTORY_PICK);
      AssertActivityLine(WhseActivityHdr,Item,SecondBin,WhseActivityLine."Action Type"::Take,1,0,1,MSG_INVENTORY_PICK);
    END;

    [MessageHandler]
    PROCEDURE TC84MessageHandlerOrange@37(Message@1000 : Text[1024]);
    BEGIN
      ErrorMessageCounter += 1;

      CASE ErrorMessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,MSG_HAS_BEEN_CREATED) > 0,Message);
        2:
          Assert.IsTrue(STRPOS(Message,MSG_WSHE_CREATED) > 0,Message);
      END;
    END;

    [Test]
    [HandlerFunctions(TC84MessageHandlerOrange,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC8TC84Orange@190();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC8TC84WhsePick(Location);
    END;

    LOCAL PROCEDURE SC8TC84WhsePick@38(Location@1006 : Record 14);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
      WhseActivityHdr@1005 : Record 5766;
      WhseActivityLine@1007 : Record 5767;
      InternalMovementHeader@1008 : Record 7346;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FirstBin,1);
      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,SecondBin,FirstBin.Code);
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);
      CreateSalesOrder(SalesHeader,SalesLine,Item,Location,FirstBin,1,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // This shouldn't be created - handle message - nothing to create
      AssertCannotCreateWhsePick(Location,SecondBin);

      // Register the invt movement
      AutoFillQtyAndRegisterInvtMvmt(Location);

      // Change bin code on the shipment lines and create the pick
      SetBinAndCreateWhsePick(Location,FirstBin);

      // Verify that whse pick is created
      AssertWhseActivityHdr(WhseActivityHdr,Location,WhseActivityHdr.Type::Pick,
        MSG_WHSE_PICK);
      AssertActivityLine(WhseActivityHdr,Item,SecondBin,WhseActivityLine."Action Type"::Take,1,1,1,MSG_WHSE_PICK_LINE);
      AssertActivityLine(WhseActivityHdr,Item,FirstBin,WhseActivityLine."Action Type"::Place,1,1,1,MSG_WHSE_PICK_LINE);
    END;

    [MessageHandler]
    PROCEDURE TC85MessageHandler@43(Message@1000 : Text[1024]);
    BEGIN
      ErrorMessageCounter += 1;

      CASE ErrorMessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,MSG_HAS_BEEN_CREATED) > 0,Message);
      END;
    END;

    [Test]
    [HandlerFunctions(TC85MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC8TC85Silver@172();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC8TC85InvtPick(Location);
    END;

    LOCAL PROCEDURE SC8TC85InvtPick@40(Location@1005 : Record 14);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
      InternalMovementHeader@1008 : Record 7346;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FirstBin,1);
      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,SecondBin,FirstBin.Code);
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);
      CreateSalesOrder(SalesHeader,SalesLine,Item,Location,FirstBin,1,WORKDATE);
      ReserveSalesLine(SalesLine,TRUE,1);

      // Check reserved qty
      Assert.AreEqual(1,SalesLine."Reserved Quantity",MSG_QTY_NOT_RESERVED);
    END;

    [Test]
    [HandlerFunctions(TC85MessageHandler,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC8TC85Orange@191();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC8TC85WhsePick(Location);
    END;

    LOCAL PROCEDURE SC8TC85WhsePick@42(Location@1005 : Record 14);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
      InternalMovementHeader@1008 : Record 7346;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FirstBin,1);
      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,SecondBin,FirstBin.Code);
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);
      CreateSalesOrder(SalesHeader,SalesLine,Item,Location,FirstBin,1,WORKDATE);
      ReserveSalesLine(SalesLine,TRUE,1);

      // Check reserved qty
      Assert.AreEqual(1,SalesLine."Reserved Quantity",MSG_QTY_NOT_RESERVED);
    END;

    [Test]
    [HandlerFunctions(TC81MessageHandler)]
    PROCEDURE SC8TC86Silver@173();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC8TC86InvtPick(Location);
    END;

    LOCAL PROCEDURE SC8TC86InvtPick@44(Location@1007 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1010 : Record 27;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
      ProductionOrder@1009 : Record 5405;
      WhseActivityHdr@1005 : Record 5766;
      WhseActivityLine@1006 : Record 5767;
      WarehouseRequest@1001 : Record 5765;
      SalesHeader@1008 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);

      // Exercise
      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FirstBin,3);

      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",1,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,SecondBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      CreateSalesOrder(SalesHeader,SalesLine,ChildItem,Location,FirstBin,2,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateInvtPutPickMovement(WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);

      // Verify that inventory pick is created
      AssertActivityHdr(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Pick",
        WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",1,MSG_INVENTORY_PICK);
      AssertActivityLine(WhseActivityHdr,ChildItem,FirstBin,WhseActivityLine."Action Type"::Take,1,0,1,MSG_INVENTORY_PICK);
    END;

    [MessageHandler]
    PROCEDURE TC87MessageHandler@48(Message@1000 : Text[1024]);
    BEGIN
      ErrorMessageCounter += 1;

      CASE ErrorMessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,MSG_ACTIVITIES_CREATED) > 0,Message);
        2:
          Assert.IsTrue(STRPOS(Message,MSG_THERE_NOTHING_TO_CREATE) > 0,Message);
      END;
    END;

    [Test]
    [HandlerFunctions(TC87MessageHandler)]
    PROCEDURE SC8TC87Silver@174();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC8TC87InvtPick(Location);
    END;

    LOCAL PROCEDURE SC8TC87InvtPick@46(Location@1006 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1010 : Record 27;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
      WhseActivityHdr@1005 : Record 5766;
      WhseActivityLine@1007 : Record 5767;
      ProductionOrder@1009 : Record 5405;
      WarehouseRequest@1001 : Record 5765;
      SalesHeader@1008 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);

      // Exercise
      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FirstBin,2);

      // Create prod order
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",1,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,SecondBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);
      CreateSalesOrder(SalesHeader,SalesLine,ChildItem,Location,FirstBin,2,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // This shouldn't be created - handle message - nothing to create
      LibraryWarehouse.CreateInvtPutPickMovement(WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);

      // Register the invt movement
      AutoFillQtyAndRegisterInvtMvmt(Location);

      // Change bin code on sales line and create the pick for the Sales order
      SalesLine.FIND;
      SalesLine.VALIDATE("Bin Code",SecondBin.Code);
      SalesLine.MODIFY(TRUE);
      LibraryWarehouse.CreateInvtPutPickMovement(WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);

      // Verify that inventory pick is created
      AssertActivityHdr(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Pick",
        WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",1,MSG_INVENTORY_PICK);
      AssertActivityLine(WhseActivityHdr,ChildItem,SecondBin,WhseActivityLine."Action Type"::Take,2,0,1,MSG_INVENTORY_PICK);
    END;

    [Test]
    [HandlerFunctions(TC87MessageHandler)]
    PROCEDURE SC8TC88Silver@175();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC8TC88InvtPick(Location);
    END;

    LOCAL PROCEDURE SC8TC88InvtPick@47(Location@1005 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1010 : Record 27;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
      ProductionOrder@1009 : Record 5405;
      WarehouseRequest@1001 : Record 5765;
      SalesHeader@1008 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);

      // Exercise
      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FirstBin,3);

      // Create prod order
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",1,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,SecondBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);
      AssertInvtMovement(ProductionOrder,ChildItem,Location,FirstBin,SecondBin,2,0,1);

      // Create and reserve sales order
      CreateSalesOrder(SalesHeader,SalesLine,ChildItem,Location,FirstBin,2,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      ReserveSalesLine(SalesLine,TRUE,2);

      // Check reserved qty
      Assert.AreEqual(1,SalesLine."Reserved Quantity",MSG_QTY_NOT_RESERVED);
    END;

    [Test]
    [HandlerFunctions(TC87MessageHandler)]
    PROCEDURE SC8TC89Silver@176();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC8TC89InvtPick(Location);
    END;

    LOCAL PROCEDURE SC8TC89InvtPick@50(Location@1005 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1010 : Record 27;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
      ProductionOrder@1009 : Record 5405;
      WarehouseRequest@1001 : Record 5765;
      SalesHeader@1008 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);

      // Exercise
      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FirstBin,2);

      // Create rel prod order
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",1,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,SecondBin);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);
      AssertInvtMovement(ProductionOrder,ChildItem,Location,FirstBin,SecondBin,2,0,1);

      // Create sales order and reserve
      CreateSalesOrder(SalesHeader,SalesLine,ChildItem,Location,FirstBin,2,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      ReserveSalesLine(SalesLine,TRUE,2);

      // Check reserved qty
      Assert.AreEqual(0,SalesLine."Reserved Quantity",MSG_QTY_NOT_RESERVED);

      // Register the invt movement
      AutoFillQtyAndRegisterInvtMvmt(Location);

      ReserveSalesLine(SalesLine,TRUE,2);

      // Check reserved qty
      Assert.AreEqual(2,SalesLine."Reserved Quantity",MSG_QTY_NOT_RESERVED);
    END;

    [Test]
    [HandlerFunctions(TC87MessageHandler)]
    PROCEDURE SC8TC810Silver@177();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC8TC810InvtPick(Location);
    END;

    LOCAL PROCEDURE SC8TC810InvtPick@51(Location@1006 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1010 : Record 27;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
      WhseActivityHdr@1005 : Record 5766;
      WhseActivityLine@1007 : Record 5767;
      ProductionOrder@1009 : Record 5405;
      WarehouseRequest@1001 : Record 5765;
      SalesHeader@1008 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);

      // Exercise
      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FirstBin,2);

      // Create rel prod order
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",1,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,SecondBin);

      CreateSalesOrder(SalesHeader,SalesLine,ChildItem,Location,FirstBin,2,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateInvtPutPickMovement(WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);

      // Verify that inventory pick is created
      AssertActivityHdr(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Pick",
        WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",1,MSG_INVENTORY_PICK);
      AssertActivityLine(WhseActivityHdr,ChildItem,FirstBin,WhseActivityLine."Action Type"::Take,2,0,1,MSG_INVENTORY_PICK);

      // This shouldn't be created - handle message - nothing to create
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);
    END;

    [MessageHandler]
    PROCEDURE TC811MessageHandler@53(Message@1000 : Text[1024]);
    BEGIN
      ErrorMessageCounter += 1;

      CASE ErrorMessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,MSG_THERE_NOTHING_TO_CREATE) > 0,Message);
      END;
    END;

    [Test]
    [HandlerFunctions(TC811MessageHandler)]
    PROCEDURE SC8TC811Silver@178();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC8TC811InvtPick(Location);
    END;

    LOCAL PROCEDURE SC8TC811InvtPick@52(Location@1005 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1010 : Record 27;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
      ProductionOrder@1009 : Record 5405;
      WarehouseRequest@1001 : Record 5765;
      SalesHeader@1008 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FirstBin,Location,FALSE,1);
      FindBin(SecondBin,Location,FALSE,2);

      // Exercise
      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FirstBin,2);

      // Create rel prod order
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",1,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,SecondBin);

      CreateSalesOrder(SalesHeader,SalesLine,ChildItem,Location,FirstBin,2,WORKDATE);
      ReserveSalesLine(SalesLine,TRUE,2);

      // Check reserved qty
      Assert.AreEqual(2,SalesLine."Reserved Quantity",MSG_QTY_NOT_RESERVED);

      // This shouldn't be created - handle message - nothing to create
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);
    END;

    [ConfirmHandler]
    PROCEDURE UseBinConfirmHandler@54(Question@1000 : Text[1024];VAR Val@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(ConvertMessage(Question),MSG_USE_BIN) > 0,Question);
      Val := TRUE;
    END;

    [MessageHandler]
    PROCEDURE TC812MessageHandlerSilver@59(Message@1000 : Text[1024]);
    BEGIN
      ErrorMessageCounter += 1;

      CASE ErrorMessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,MSG_THERE_NOTHING_TO_CREATE) > 0,Message);
      END;
    END;

    [Test]
    [HandlerFunctions(TC812MessageHandlerSilver,UseBinConfirmHandler)]
    PROCEDURE SC8TC812Silver@179();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC8TC812InvtPick(Location);
    END;

    LOCAL PROCEDURE SC8TC812InvtPick@58(Location@1005 : Record 14);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
      WhseActivityHdr@1006 : Record 5766;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBin,Location,TRUE,1);
      FindBin(SecondBin,Location,TRUE,2);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FirstBin,1);
      CreateSalesOrder(SalesHeader,SalesLine,Item,Location,FirstBin,1,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // This shouldn't be created - handle message - nothing to create
      LibraryWarehouse.CreateInvtPutPickMovement(WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);
    END;

    [Test]
    [HandlerFunctions(UseBinConfirmHandler)]
    PROCEDURE SC8TC813Silver@180();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC8TC813InvtPick(Location);
    END;

    LOCAL PROCEDURE SC8TC813InvtPick@55(Location@1005 : Record 14);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      FirstBin@1003 : Record 7354;
      SecondBin@1004 : Record 7354;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBin,Location,TRUE,1);
      FindBin(SecondBin,Location,TRUE,2);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FirstBin,1);
      CreateSalesOrder(SalesHeader,SalesLine,Item,Location,FirstBin,1,WORKDATE);
      ReserveSalesLine(SalesLine,TRUE,2);

      // Check reserved qty
      Assert.AreEqual(1,SalesLine."Reserved Quantity",MSG_QTY_NOT_RESERVED);
    END;

    [MessageHandler]
    PROCEDURE TC814MessageHandlerSilver@61(Message@1000 : Text[1024]);
    BEGIN
      ErrorMessageCounter += 1;

      CASE ErrorMessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,MSG_BEEN_CREATED) > 0,Message);
        2:
          Assert.IsTrue(STRPOS(Message,MSG_THERE_NOTHING_TO_CREATE) > 0,Message);
      END;
    END;

    [Test]
    [HandlerFunctions(TC814MessageHandlerSilver,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC8TC814Silver@181();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC8TC814InvtPick(Location);
    END;

    LOCAL PROCEDURE SC8TC814InvtPick@60(Location@1009 : Record 14);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      FirstBinD@1003 : Record 7354;
      SecondBinND@1004 : Record 7354;
      ThirdBinND@1006 : Record 7354;
      WhseActivityHdr@1005 : Record 5766;
      WhseActivityLine@1007 : Record 5767;
      InternalMovementHeader@1008 : Record 7346;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBinD,Location,TRUE,1);
      FindBin(SecondBinND,Location,FALSE,2);
      FindBin(ThirdBinND,Location,FALSE,2);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FirstBinD,1);
      AddInventoryNonDirectLocation(Item,Location,SecondBinND,2);
      CreateSalesOrder(SalesHeader,SalesLine,Item,Location,SecondBinND,1,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,ThirdBinND,SecondBinND.Code);
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);

      // Verify that inventory movement is created
      GetLastActvHdrCreatedNoSource(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Movement");
      AssertActivityLine(WhseActivityHdr,Item,SecondBinND,WhseActivityLine."Action Type"::Take,2,0,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WhseActivityHdr,Item,ThirdBinND,WhseActivityLine."Action Type"::Place,2,0,1,MSG_INVENTORY_MOVEMENT_LINE);

      // This shouldn't be created - handle message - nothing to create
      LibraryWarehouse.CreateInvtPutPickMovement(WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);

      // Set qty to handle 1 on invt movement and register
      LibraryWarehouse.SetQtyHandleInventoryMovement(WhseActivityHdr,1);
      LibraryWarehouse.RegisterWhseActivity(WhseActivityHdr);

      // Create pick again
      SalesLine.FIND;
      SalesLine.VALIDATE("Bin Code",ThirdBinND.Code);
      SalesLine.MODIFY(TRUE);
      LibraryWarehouse.CreateInvtPutPickMovement(WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);

      // Verify pick
      AssertActivityHdr(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Pick",
        WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",1,MSG_INVENTORY_PICK);
      AssertActivityLine(WhseActivityHdr,Item,ThirdBinND,WhseActivityLine."Action Type"::Take,1,0,1,MSG_INVENTORY_PICK_LINE);
    END;

    [MessageHandler]
    PROCEDURE TC814MessageHandlerOrange@65(Message@1000 : Text[1024]);
    BEGIN
      ErrorMessageCounter += 1;

      CASE ErrorMessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,MSG_BEEN_CREATED) > 0,Message);
        2:
          Assert.IsTrue(STRPOS(Message,MSG_BEEN_CREATED) > 0,Message);
        3:
          Assert.IsTrue(STRPOS(Message,MSG_THERE_NOTHING_TO_CREATE) > 0,Message);
      END;
    END;

    [Test]
    [HandlerFunctions(TC814MessageHandlerOrange,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC8TC814Orange@192();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC8TC814WhsePick(Location);
    END;

    LOCAL PROCEDURE SC8TC814WhsePick@63(Location@1009 : Record 14);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      FirstBinD@1003 : Record 7354;
      SecondBinND@1004 : Record 7354;
      ThirdBinND@1006 : Record 7354;
      WhseActivityHdr@1005 : Record 5766;
      WhseActivityLine@1007 : Record 5767;
      InternalMovementHeader@1008 : Record 7346;
      FourthBinND@1010 : Record 7354;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBinD,Location,TRUE,1);
      FindBin(SecondBinND,Location,FALSE,2);
      FindBin(ThirdBinND,Location,FALSE,2);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FirstBinD,1);
      AddInventoryNonDirectLocation(Item,Location,SecondBinND,2);
      CreateSalesOrder(SalesHeader,SalesLine,Item,Location,SecondBinND,1,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,ThirdBinND,SecondBinND.Code);
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);

      // Verify that inventory movement is created
      GetLastActvHdrCreatedNoSource(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Movement");
      AssertActivityLine(WhseActivityHdr,Item,SecondBinND,WhseActivityLine."Action Type"::Take,2,0,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WhseActivityHdr,Item,ThirdBinND,WhseActivityLine."Action Type"::Place,2,0,1,MSG_INVENTORY_MOVEMENT_LINE);

      // This shouldn't be created - handle message - nothing to create
      AssertCannotCreateWhsePick(Location,ThirdBinND);

      // Set qty to handle 1 on invt movement and register
      LibraryWarehouse.SetQtyHandleInventoryMovement(WhseActivityHdr,1);
      LibraryWarehouse.RegisterWhseActivity(WhseActivityHdr);

      COMMIT; // as assert error will roll-back
      ASSERTERROR SetBinAndCreateWhsePick(Location,SecondBinND);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,MSG_NOTHING_TO_HANDLE) > 0,
        'Creating picks with same bin on Take & Place lines not allowed');
      CLEARLASTERROR;

      // Change shipment bin to a bin where the item does not exist
      FindBin(FourthBinND,Location,FALSE,3);
      SetBinAndCreateWhsePick(Location,FourthBinND);

      // Verify that whse pick is created
      AssertWhseActivityHdr(WhseActivityHdr,Location,WhseActivityHdr.Type::Pick,
        MSG_WHSE_PICK);
      AssertActivityLine(WhseActivityHdr,Item,ThirdBinND,WhseActivityLine."Action Type"::Take,1,1,1,MSG_WHSE_PICK_LINE);
      AssertActivityLine(WhseActivityHdr,Item,FourthBinND,WhseActivityLine."Action Type"::Place,1,1,1,MSG_WHSE_PICK_LINE);
    END;

    [Test]
    [HandlerFunctions(TC814MessageHandlerSilver,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC8TC815Silver@182();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC8TC815InvtPick(Location);
    END;

    LOCAL PROCEDURE SC8TC815InvtPick@66(Location@1009 : Record 14);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      FirstBinD@1003 : Record 7354;
      SecondBinND@1004 : Record 7354;
      ThirdBinND@1006 : Record 7354;
      WhseActivityHdr@1005 : Record 5766;
      WhseActivityLine@1007 : Record 5767;
      InternalMovementHeader@1008 : Record 7346;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBinD,Location,TRUE,1);
      FindBin(SecondBinND,Location,FALSE,2);
      FindBin(ThirdBinND,Location,FALSE,2);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FirstBinD,1);
      AddInventoryNonDirectLocation(Item,Location,SecondBinND,1);
      CreateSalesOrder(SalesHeader,SalesLine,Item,Location,SecondBinND,2,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,ThirdBinND,SecondBinND.Code);
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);

      // Verify that inventory movement is created
      GetLastActvHdrCreatedNoSource(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Movement");
      AssertActivityLine(WhseActivityHdr,Item,SecondBinND,WhseActivityLine."Action Type"::Take,1,0,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WhseActivityHdr,Item,ThirdBinND,WhseActivityLine."Action Type"::Place,1,0,1,MSG_INVENTORY_MOVEMENT_LINE);

      // Reserve and check reserved qty
      ReserveSalesLine(SalesLine,TRUE,1);
      Assert.AreEqual(1,SalesLine."Reserved Quantity",MSG_QTY_NOT_RESERVED);
    END;

    [Test]
    [HandlerFunctions(TC814MessageHandlerOrange,CreateInvtMvmntConfirmHandler)]
    PROCEDURE SC8TC815Orange@193();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,TRUE,TRUE,TRUE,TRUE,TRUE,6,4);
      SC8TC815WhsePick(Location);
    END;

    LOCAL PROCEDURE SC8TC815WhsePick@67(Location@1009 : Record 14);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      FirstBinD@1003 : Record 7354;
      SecondBinND@1004 : Record 7354;
      ThirdBinND@1006 : Record 7354;
      WhseActivityHdr@1005 : Record 5766;
      WhseActivityLine@1007 : Record 5767;
      InternalMovementHeader@1008 : Record 7346;
    BEGIN
      // Test setup
      TestSetup;
      ItemSetup(Item,Item."Replenishment System"::"Prod. Order",Item."Flushing Method"::Manual);

      FindBin(FirstBinD,Location,TRUE,1);
      FindBin(SecondBinND,Location,FALSE,2);
      FindBin(ThirdBinND,Location,FALSE,2);

      // Exercise
      AddInventoryNonDirectLocation(Item,Location,FirstBinD,1);
      AddInventoryNonDirectLocation(Item,Location,SecondBinND,1);
      CreateSalesOrder(SalesHeader,SalesLine,Item,Location,SecondBinND,2,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      CreateInternalMovementGetBin(InternalMovementHeader,Item,Location,ThirdBinND,SecondBinND.Code);
      LibraryWarehouse.CreateInvtMvmtFromInternalMvmt(InternalMovementHeader);

      // Verify that inventory movement is created
      GetLastActvHdrCreatedNoSource(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Movement");
      AssertActivityLine(WhseActivityHdr,Item,SecondBinND,WhseActivityLine."Action Type"::Take,1,0,1,MSG_INVENTORY_MOVEMENT_LINE);
      AssertActivityLine(WhseActivityHdr,Item,ThirdBinND,WhseActivityLine."Action Type"::Place,1,0,1,MSG_INVENTORY_MOVEMENT_LINE);

      // Reserve and check reserved qty
      ReserveSalesLine(SalesLine,TRUE,1);
      Assert.AreEqual(1,SalesLine."Reserved Quantity",MSG_QTY_NOT_RESERVED);
    END;

    [MessageHandler]
    PROCEDURE TC816MessageHandler@69(Message@1000 : Text[1024]);
    BEGIN
      ErrorMessageCounter += 1;

      CASE ErrorMessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,MSG_MOVMT_CREATED) > 0,Message);
        2:
          Assert.IsTrue(STRPOS(Message,MSG_THERE_NOTHING_TO_CREATE) > 0,Message);
        3:
          Assert.IsTrue(STRPOS(Message,MSG_ACTIVITIES_CREATED) > 0,Message);
      END;
    END;

    [Test]
    [HandlerFunctions(TC816MessageHandler)]
    PROCEDURE SC8TC816Silver@183();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC8TC816InvtPick(Location);
    END;

    LOCAL PROCEDURE SC8TC816InvtPick@68(Location@1006 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1010 : Record 27;
      FirstBinD@1003 : Record 7354;
      FirstBinND@1011 : Record 7354;
      SecondBinND@1004 : Record 7354;
      WhseActivityHdr@1005 : Record 5766;
      WhseActivityLine@1007 : Record 5767;
      ProductionOrder@1009 : Record 5405;
      WarehouseRequest@1001 : Record 5765;
      SalesHeader@1008 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FirstBinD,Location,TRUE,1);
      FindBin(FirstBinND,Location,FALSE,1);
      FindBin(SecondBinND,Location,FALSE,2);

      // Exercise
      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FirstBinD,2);
      AddInventoryNonDirectLocation(ChildItem,Location,FirstBinND,2);
      CreateSalesOrder(SalesHeader,SalesLine,ChildItem,Location,FirstBinND,1,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // Create rel prod order
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",1,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,SecondBinND);

      // Create inventory movement with source doc
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // This shouldn't be created - handle message - nothing to create
      LibraryWarehouse.CreateInvtPutPickMovement(WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);

      // Set qty to handle 1 on invt movement and register
      GetLastActvHdrCreatedWithSrc(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Movement",
        WhseActivityHdr."Source Document"::"Prod. Consumption",ProductionOrder."No.");
      LibraryWarehouse.SetQtyHandleInventoryMovement(WhseActivityHdr,1);
      LibraryWarehouse.RegisterWhseActivity(WhseActivityHdr);

      // Create pick again
      SalesLine.FIND;
      SalesLine.VALIDATE("Bin Code",SecondBinND.Code);
      SalesLine.MODIFY(TRUE);
      LibraryWarehouse.CreateInvtPutPickMovement(WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);

      // Verify that inventory pick is created
      AssertActivityHdr(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Pick",
        WhseActivityHdr."Source Document"::"Sales Order",SalesHeader."No.",1,MSG_INVENTORY_PICK);
      AssertActivityLine(WhseActivityHdr,ChildItem,SecondBinND,WhseActivityLine."Action Type"::Take,1,0,1,MSG_INVENTORY_PICK);
    END;

    [Test]
    [HandlerFunctions(TC816MessageHandler)]
    PROCEDURE SC8TC817Silver@184();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC8TC817InvtPick(Location);
    END;

    LOCAL PROCEDURE SC8TC817InvtPick@71(Location@1006 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1010 : Record 27;
      FirstBinD@1003 : Record 7354;
      FirstBinND@1011 : Record 7354;
      SecondBinND@1004 : Record 7354;
      WhseActivityHdr@1005 : Record 5766;
      ProductionOrder@1009 : Record 5405;
      WarehouseRequest@1001 : Record 5765;
      SalesHeader@1008 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FirstBinD,Location,TRUE,1);
      FindBin(FirstBinND,Location,FALSE,1);
      FindBin(SecondBinND,Location,FALSE,2);

      // Exercise
      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FirstBinND,2);
      CreateSalesOrder(SalesHeader,SalesLine,ChildItem,Location,FirstBinND,1,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // Create rel prod order
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",1,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,SecondBinND);

      // Create inventory movement with source doc
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);
      AssertInvtMovement(ProductionOrder,ChildItem,Location,FirstBinND,SecondBinND,2,0,1);

      // Reserve and check reserved qty
      ReserveSalesLine(SalesLine,TRUE,1);
      Assert.AreEqual(0,SalesLine."Reserved Quantity",MSG_QTY_NOT_RESERVED);

      // Set qty to handle 1 on invt movement and register
      GetLastActvHdrCreatedWithSrc(WhseActivityHdr,Location,WhseActivityHdr.Type::"Invt. Movement",
        WhseActivityHdr."Source Document"::"Prod. Consumption",ProductionOrder."No.");
      LibraryWarehouse.SetQtyHandleInventoryMovement(WhseActivityHdr,1);
      LibraryWarehouse.RegisterWhseActivity(WhseActivityHdr);

      // Reserve and check reserved qty
      ReserveSalesLine(SalesLine,TRUE,1);
      Assert.AreEqual(1,SalesLine."Reserved Quantity",MSG_QTY_NOT_RESERVED);
    END;

    [Test]
    [HandlerFunctions(TC816MessageHandler)]
    PROCEDURE SC8TC818Silver@185();
    VAR
      Location@1000 : Record 14;
    BEGIN
      // Setup
      Initialize;

      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,6,4);
      SC8TC818InvtPick(Location);
    END;

    LOCAL PROCEDURE SC8TC818InvtPick@72(Location@1004 : Record 14);
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1010 : Record 27;
      FirstBinD@1003 : Record 7354;
      FirstBinND@1011 : Record 7354;
      ProductionOrder@1009 : Record 5405;
      WarehouseRequest@1001 : Record 5765;
      SalesHeader@1008 : Record 36;
      SalesLine@1002 : Record 37;
      ProdOrderComponent@1013 : Record 5407;
    BEGIN
      // Test setup
      TestSetup;
      PC5(ParentItem);

      FindBin(FirstBinD,Location,TRUE,1);
      FindBin(FirstBinND,Location,FALSE,1);

      // Exercise
      FindChild(ParentItem,ChildItem,1);
      AddInventoryNonDirectLocation(ChildItem,Location,FirstBinND,20);
      CreateSalesOrder(SalesHeader,SalesLine,ChildItem,Location,FirstBinND,20,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // Create rel prod order
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",1,Location.Code,'');
      SetBinCodeOnCompLines(ProductionOrder,FirstBinD);

      // Reserve and check reserved qty
      FindComponent(ProdOrderComponent,ProductionOrder,ChildItem,1);
      ReserveComponentLine(ProdOrderComponent,FALSE,2);
      Assert.AreEqual(2,ProdOrderComponent."Reserved Quantity",MSG_QTY_NOT_RESERVED);

      // Create inventory movement with source doc
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,FALSE,TRUE);

      // Autofill qty to handle on invt movement and register
      AutoFillQtyAndRegisterInvtMvmt(Location);

      // Reserve and check reserved qty
      ReserveSalesLine(SalesLine,TRUE,20);
      Assert.AreEqual(18,SalesLine."Reserved Quantity",MSG_QTY_NOT_RESERVED);
    END;

    [Test]
    [HandlerFunctions(InvtPickCreatedMessageHandler)]
    PROCEDURE RecreateInvtPickAfterDeletePartiallyPostedInvtPick@149();
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1009 : Record 27;
      Location@1004 : Record 14;
      Bin@1003 : Record 7354;
      ProductionOrder@1001 : Record 5405;
      WarehouseRequest@1002 : Record 5765;
      WarehouseActivityLine@1005 : Record 5767;
      WarehouseActivityHeader@1007 : Record 5766;
      Quantity@1008 : Decimal;
    BEGIN
      // Verify the Quantity on recreated Inventory Pick Line after deleting the partially posted Inventory Pick.

      // Setup: Create Production Item. Create Location. Add Inventory for the Child Item.
      Initialize;
      TestSetup;
      Quantity := LibraryRandom.RandInt(10);
      ParentItem.INIT;
      PC5(ParentItem);
      LocationSetup(Location,FALSE,FALSE,FALSE,TRUE,TRUE,0,1);
      FindChild(ParentItem,ChildItem,1);
      FindBin(Bin,Location,FALSE,1);
      AddInventoryNonDirectLocation(ChildItem,Location,Bin,Quantity * 3); // Quantity * 3 is more than the "ProductionOrder.Quantity" * QtyPer.

      // Create Released Production Order and refresh it.
      CreateRelProdOrderAndRefresh(ProductionOrder,ParentItem."No.",Quantity,Location.Code,'');

      // Create inventory pick.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,TRUE,FALSE);

      // Post inventory pick partially.
      // Total quantity of the child item is Quantity * QtyPer = Quantity * 2
      FillQtyToHandle(
        ProductionOrder,WarehouseActivityLine."Action Type"::Take,Quantity,WarehouseActivityLine."Activity Type"::"Invt. Pick");
      GetLastActvHdrCreatedWithSrc(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Pick",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.");
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,FALSE);
      // Exercise: Delete the rest inventory pick, then Recreate inventory pick with remaining quantity.
      DeleteActivityTypeWithSrcDoc(ProductionOrder,Location,WarehouseActivityLine."Activity Type"::"Invt. Pick");
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Prod. Consumption",ProductionOrder."No.",FALSE,TRUE,FALSE);

      // Verify: Verify Quantity of Inventory Pick Line
      GetLastActvHdrCreatedWithSrc(WarehouseActivityHeader,Location,WarehouseActivityHeader.Type::"Invt. Pick",
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",ProductionOrder."No.");
      AssertQtyOnInvtPick(WarehouseActivityHeader,Quantity);
    END;

    LOCAL PROCEDURE PC5@102(VAR ParentItem@1001 : Record 27);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      CreateBOM(ProductionBOMHeader,1,2);
      ParentItemSetupOnBOM(ParentItem,ProductionBOMHeader);
    END;

    LOCAL PROCEDURE PC7@233(VAR WorkCenter@1000 : ARRAY [2] OF Record 99000754;VAR MachineCenter@1001 : ARRAY [4] OF Record 99000758);
    VAR
      i@1002 : Integer;
    BEGIN
      FOR i := 1 TO 2 DO
        CreateWorkCenter(WorkCenter[i],WorkCenter[i]."Flushing Method"::Manual);

      FOR i := 1 TO 4 DO
        IF i IN [1,3] THEN
          CreateMachineCenter(MachineCenter[i],WorkCenter[1],MachineCenter[i]."Flushing Method"::Manual)
        ELSE
          CreateMachineCenter(MachineCenter[i],WorkCenter[2],MachineCenter[i]."Flushing Method"::Manual);
    END;

    LOCAL PROCEDURE PC429@237(VAR Item@1000 : ARRAY [4] OF Record 27;VAR ProductionBOMHeader@1001 : Record 99000771;VAR RoutingHeader@1002 : Record 99000763;FlushingMethod@1008 : Option);
    VAR
      ArrayOfWorkCenter@1004 : ARRAY [2] OF Record 99000754;
      ArrayOfMachineCenter@1003 : ARRAY [4] OF Record 99000758;
      RoutingLink@1005 : Record 99000777;
      RoutingLine@1006 : Record 99000764;
      ProductionBOMLine@1007 : Record 99000772;
    BEGIN
      PC7(ArrayOfWorkCenter,ArrayOfMachineCenter);

      CreateRouting(RoutingHeader,ArrayOfMachineCenter[1],ArrayOfWorkCenter[2]);
      CreateBOM(ProductionBOMHeader,2,2);
      ParentItemSetupOnBOMAndRouting(Item[1],ProductionBOMHeader,RoutingHeader);

      FindChild(Item[1],Item[2],1);
      FindChild(Item[1],Item[3],2);
      ChangeFlushingMethodOnItem(Item[3],FlushingMethod);

      // routing link code to Routing
      RoutingLink.INIT;
      RoutingLink.VALIDATE(Code,COPYSTR(ArrayOfWorkCenter[2]."No.",1,10));
      RoutingLink.INSERT(TRUE);

      RoutingLine.SETRANGE("Routing No.",RoutingHeader."No.");
      RoutingLine.FINDLAST;

      RoutingLine.VALIDATE("Routing Link Code",RoutingLink.Code);
      RoutingLine.MODIFY(TRUE);
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);

      // routing link code to Production BOM
      ProductionBOMHeader.GET(ProductionBOMHeader."No.");
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::New);
      ProductionBOMHeader.MODIFY(TRUE);

      ProductionBOMLine.SETRANGE("Production BOM No.",ProductionBOMHeader."No.");
      ProductionBOMLine.FINDLAST;
      ProductionBOMLine.VALIDATE("Routing Link Code",RoutingLink.Code);
      ProductionBOMLine.MODIFY(TRUE);

      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PC6@228(VAR Item@1000 : ARRAY [5] OF Record 27);
    VAR
      UnitOfMeasure@1001 : Record 204;
      ProductionBOMHeader@1002 : Record 99000771;
      ProductionBOMLine@1003 : Record 99000772;
      i@1004 : Integer;
    BEGIN
      ItemSetup(Item[1],Item[1]."Replenishment System"::"Prod. Order",Item[1]."Flushing Method"::Manual);

      UnitOfMeasure.INIT;
      UnitOfMeasure.FINDFIRST;
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,UnitOfMeasure.Code);

      // Create component lines in the BOM
      FOR i := 2 TO 5 DO BEGIN
        ItemSetup(Item[i],Item[i]."Replenishment System"::Purchase,i - 1);
        LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',
          ProductionBOMLine.Type::Item,Item[i]."No.",2);
      END;

      // Certify BOM
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);

      Item[1].VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      Item[1].MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PC431@305(VAR Item@1000 : ARRAY [4] OF Record 27;VAR ProductionBOMHeader@1001 : Record 99000771;VAR RoutingHeader@1002 : Record 99000763;FlushingMethodOfChild1@1003 : Option;FlushingMethodOfChild2@1004 : Option;FlushingMethodOfWorkCenter@1007 : Option);
    VAR
      ProductionBOMLine@1005 : Record 99000772;
      RoutingLink@1006 : Record 99000777;
      RoutingLine@1008 : Record 99000764;
      WorkCenter@1009 : Record 99000754;
    BEGIN
      PC429(Item,ProductionBOMHeader,RoutingHeader,FlushingMethodOfChild1);

      LibraryInventory.CreateItem(Item[4]);
      ChangeFlushingMethodOnItem(Item[4],FlushingMethodOfChild2);

      // routing link code to Production BOM
      ProductionBOMHeader.GET(ProductionBOMHeader."No.");
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::New);
      ProductionBOMHeader.MODIFY(TRUE);

      ProductionBOMLine.SETRANGE("Production BOM No.",ProductionBOMHeader."No.");
      ProductionBOMLine.FINDLAST;
      RoutingLink.GET(ProductionBOMLine."Routing Link Code");

      // add a new line to Production BOM with Routing Link code
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',
        ProductionBOMLine.Type::Item,Item[4]."No.",2);

      ProductionBOMLine.VALIDATE("Routing Link Code",RoutingLink.Code);
      ProductionBOMLine.MODIFY(TRUE);

      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);

      // Flushing Method of Work center
      RoutingLine.SETRANGE("Routing No.",RoutingHeader."No.");
      RoutingLine.FINDLAST;
      WorkCenter.GET(RoutingLine."No.");
      WorkCenter.VALIDATE("Flushing Method",FlushingMethodOfWorkCenter);
      WorkCenter.MODIFY(TRUE);
    END;

    [MessageHandler]
    PROCEDURE MessageHandlerNothing@205(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,MSG_THERE_NOTHING_TO_CREATE) > 0,Message);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler_TC49@212(Message@1000 : Text[1024]);
    BEGIN
      ErrorMessageCounter += 1;
      CASE ErrorMessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,Text004) > 0,Message);
        2:
          Assert.IsTrue(STRPOS(Message,Text005) > 0,Message);
      END;
    END;

    [MessageHandler]
    PROCEDURE TC420MessageHandler@95(Message@1001 : Text[1024]);
    BEGIN
      ErrorMessageCounter += 1;
      CASE ErrorMessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,MSG_MOVMT_CREATED) > 0,Message);
        2:
          Assert.IsTrue(STRPOS(Message,MSG_PICK_CREATED) > 0,Message);
        3:
          Assert.IsTrue(STRPOS(Message,MSG_THERE_NOTHING_TO_CREATE) > 0,Message);
      END;
    END;

    [MessageHandler]
    PROCEDURE TC421MessageHandler@98(Message@1001 : Text[1024]);
    BEGIN
      ErrorMessageCounter += 1;
      CASE ErrorMessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,MSG_MOVMT_CREATED) > 0,Message);
        2:
          Assert.IsTrue(STRPOS(Message,MSG_PICK_CREATED) > 0,Message);
      END;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@213(Message@1001 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,MSG_MOVMT_CREATED) > 0,Message);
    END;

    [MessageHandler]
    PROCEDURE InvtPickCreatedMessageHandler@338(Message@1001 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,MSG_PICK_CREATED) > 0,Message);
    END;

    [ConfirmHandler]
    PROCEDURE DeleteWhseActivityLineConfirm@211(Question@1000 : Text[1024];VAR Val@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(Question,Text006) > 0,Question);
      Val := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [SCM]
      This test code unit contains tests for planning engine:
        1 ~ 120. Implements test cases from TDS (TCS) for feature 93512 - Extend Warehouse for inclusion of jobs and services.
        121. Verify the Quantity on recreated Inventory Pick Line after deleting the partially posted Inventory Pick.

       Covers Test Cases for WI - 71101
       --------------------------------------------------------------------
       Test Function Name                                            TFS ID
       --------------------------------------------------------------------
       RecreateInvtPickAfterDeletePartiallyPostedInvtPick             71101
    }
    END.
  }
}

