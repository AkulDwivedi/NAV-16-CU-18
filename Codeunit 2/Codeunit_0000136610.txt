OBJECT Codeunit 136610 ERM RS Package Base Operations
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryVariableStorage@1022 : Codeunit 131004;
      LibraryUtility@1001 : Codeunit 131000;
      LibraryRapidStart@1004 : Codeunit 131903;
      LibraryRandom@1016 : Codeunit 130440;
      Assert@1005 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      RelatedTableDataError@1002 : TextConst 'ENU="TableData Must Be Empty = %1 in %2 table."';
      TableCannotBeRenamed@1013 : TextConst 'ENU=You cannot rename the configuration package table.';
      TableIsNotAddedToPackage@1014 : TextConst 'ENU=Table is not added to package.';
      ReportGetTablesOneRecord@1015 : TextConst 'ENU=One record should be created.';
      SingleEntryRecNo@1017 : Integer;
      ReportGetTablesExpectedTable@1003 : TextConst 'ENU=Expected Table Error.';
      MustBeNoPackageErrors@1019 : TextConst 'ENU=Must Be No Package Errors in %1 table.';
      ConfigPackageTableAlreadyExists@1020 : TextConst 'ENU=already exists.';
      Fields_WrongIncludeField@1008 : TextConst 'ENU=Wrong Include Field count.';
      Fields_WrongValidateField@1007 : TextConst 'ENU=Wrong Validate Field value.';
      Fields_WrongProcessingOrderErr@1009 : TextConst 'ENU=Processing Order for field %1 must be %2.';
      Fields_WrongFieldName@1006 : TextConst 'ENU=Wrong Field Name.';
      Fields_WrongRelationTableNo@1010 : TextConst 'ENU=Wrong Relation Table No.';
      Fields_WrongDimensionField@1011 : TextConst 'ENU=Incorrect field value.';
      TableMustNotBeAddedErr@1012 : TextConst 'ENU=Table %1 Must not be added to the package.';
      FieldTok@1021 : TextConst 'ENU=FieldName';
      TableTok@1018 : TextConst 'ENU=TableName';

    [Test]
    PROCEDURE DeletePackage@14();
    VAR
      ConfigPackage@1003 : Record 8623;
      PackageCode@1000 : Code[20];
    BEGIN
      // 1) Verify that package clears related data when it is deleted.

      // 1. Setup.
      Initialize;

      // 2. Generate Package With Related Tables
      CreatePackageDataPairWithPKRelation(ConfigPackage);

      // 3. Delete Package
      PackageCode := ConfigPackage.Code;
      ConfigPackage.DELETE(TRUE);

      // 4. Verify that related tables deleted.
      // package records, tables, data, filters, fields, errors
      VerifyRelatedRecordCount(PackageCode,0,TRUE);

      // 5. Cleanup: Delete the Package Table record created.
      Cleanup(PackageCode);
    END;

    [Test]
    PROCEDURE DeletePackages_DeleteOneOfTheTwoPackages_OneDeletedAndOtherRemain@24();
    VAR
      ConfigPackage1@1003 : Record 8623;
      ConfigPackage2@1001 : Record 8623;
      PackageCode@1000 : Code[20];
    BEGIN
      Initialize;

      CreatePackageDataPairWithPKRelation(ConfigPackage1);
      CreatePackageDataPairWithPKRelation(ConfigPackage2);

      PackageCode := ConfigPackage1.Code;
      ConfigPackage1.DELETE(TRUE);

      VerifyRelatedRecordCount(PackageCode,0,TRUE);
      VerifyRelatedRecordCount(ConfigPackage2.Code,0,FALSE);

      Cleanup(PackageCode);
    END;

    [Test]
    PROCEDURE RenamePackage@8();
    VAR
      ConfigPackage@1003 : Record 8623;
    BEGIN
      // 2) Verify that package renamed related data when it is renamed

      // 1. Setup.
      Initialize;

      // 2. Generate Package With Related Tables
      CreatePackageDataPairWithPKRelation(ConfigPackage);

      // 3. Rename Package
      ConfigPackage.RENAME(LibraryUtility.GenerateRandomCode(ConfigPackage.FIELDNO(Code),DATABASE::"Config. Package"));

      // 4. Verify that related tables renamed for:
      // package records, tables, data, filters, fields, errors
      VerifyRelatedRecordCount(ConfigPackage.Code,0,FALSE);

      // 5. Cleanup: Delete the Package Table record created.
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    [HandlerFunctions(Report_GetTables_RequestPageRun_Handler,Report_GetTables_SelectedTables_SelectionHandler)]
    PROCEDURE Report_GetTables_SelectedTables@7();
    VAR
      ConfigLine@1003 : Record 8622;
      ConfigPackage@1002 : Record 8623;
      ConfigPackageTable@1001 : Record 8613;
    BEGIN
      // 3) Verify that it is possible to add tables listed in the config. worksheet using function "Get Tables"
      // for parameter - Selected tables

      // 1. Setup.
      Initialize;

      // 2. Generate WS Lines and Package
      LibraryRapidStart.CreateConfigLine(ConfigLine,ConfigLine."Line Type"::Table,DATABASE::Customer,'','',FALSE);
      LibraryRapidStart.CreateConfigLine(ConfigLine,ConfigLine."Line Type"::Table,DATABASE::Vendor,'','',FALSE);

      LibraryRapidStart.CreatePackage(ConfigPackage);

      // 3. Get Package Table Customer from Worksheet
      GetTables_Report_Run(ConfigPackage.Code,FALSE);

      // 4. Verify only one record with table Customer created (no waste records)
      ConfigPackageTable.SETRANGE("Package Code",ConfigPackage.Code);
      Assert.IsTrue(ConfigPackageTable.COUNT = 1,ReportGetTablesOneRecord);
      ConfigPackageTable.FINDFIRST;
      Assert.IsTrue(ConfigPackageTable."Table ID" = DATABASE::Customer,ReportGetTablesExpectedTable);

      // 5. Cleanup: Delete the Package Table record created.
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    [HandlerFunctions(Report_GetTables_RequestPageRun_Handler,Report_GetTables_SelectedTables_SelectAllHandler)]
    PROCEDURE Report_GetTables_WithDataOnly@9();
    VAR
      ConfigLine@1003 : Record 8622;
      ConfigPackage@1002 : Record 8623;
      ConfigPackageTable@1001 : Record 8613;
    BEGIN
      // 4)  Verify that it is possible to add tables listed in the config. worksheet using function "Get Tables"
      // for parameter: With Data Only

      // 1. Setup.
      Initialize;

      // 2. Generate WS Lines and Package
      LibraryRapidStart.CreateConfigLine(ConfigLine,ConfigLine."Line Type"::Table,DATABASE::Customer,'','',FALSE);
      LibraryRapidStart.CreateConfigLine(ConfigLine,ConfigLine."Line Type"::Table,DATABASE::"Line Number Buffer",'','',FALSE);

      LibraryRapidStart.CreatePackage(ConfigPackage);

      // 3. Get Package Table Customer from Worksheet
      GetTables_Report_Run(ConfigPackage.Code,TRUE);

      // 4. Verify only one record with table Customer created (no waste records)
      ConfigPackageTable.SETRANGE("Package Code",ConfigPackage.Code);
      Assert.IsTrue(ConfigPackageTable.COUNT = 1,ReportGetTablesOneRecord);
      ConfigPackageTable.FINDFIRST;
      Assert.IsTrue(ConfigPackageTable."Table ID" = DATABASE::Customer,ReportGetTablesExpectedTable);

      // 5. Cleanup: Delete the Package Table record created.
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE AddPackageTableNotInWorksheet@5();
    VAR
      ConfigPackage@1003 : Record 8623;
      ConfigPackageTable@1000 : Record 8613;
      ConfigLine@1001 : Record 8622;
    BEGIN
      // 5) Verify that it is possible to add tables which are not listed in the config. worksheet

      // 1. Setup.
      Initialize;

      // 2. Generate Package With Table Customer
      LibraryRapidStart.CreatePackage(ConfigPackage);
      ConfigLine.SETRANGE("Table ID",DATABASE::Customer);
      ConfigLine.SETFILTER("Package Code",'%1|''''',ConfigPackage.Code);
      ConfigLine.DELETEALL;
      LibraryRapidStart.CreatePackageTable(ConfigPackageTable,ConfigPackage.Code,DATABASE::Customer);

      // 3. Verify that table customer added to package.
      ConfigPackageTable.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageTable.SETRANGE("Table ID",DATABASE::Customer);
      Assert.IsTrue(NOT ConfigPackageTable.ISEMPTY,TableIsNotAddedToPackage);

      // 4. Cleanup: Delete the Package Table record created.
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE DeletePackageLine@2();
    VAR
      ConfigPackage@1003 : Record 8623;
      ConfigPackageTable@1000 : Record 8613;
      TableID@1001 : Integer;
    BEGIN
      // 6) Verify that package's table can be deleted (with related tables)

      // 1. Setup.
      Initialize;

      // 2. Generate Package With Related Tables
      CreatePackageDataPairWithPKRelation(ConfigPackage);

      // 3. Delete Package Table
      ConfigPackageTable.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageTable.FINDFIRST;
      TableID := ConfigPackageTable."Table ID";
      ConfigPackageTable.DELETE(TRUE);

      // 4. Verify that Package Table and related tables deleted:
      // package records, data, filters, fields, errors
      VerifyRelatedRecordCount(ConfigPackage.Code,TableID,TRUE);

      // 5. Cleanup: Delete the Package Table record created.
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE RenamePackageLine@3();
    VAR
      ConfigPackage@1003 : Record 8623;
      ConfigPackageTable@1000 : Record 8613;
    BEGIN
      // 7) Verify that package's table can be "renamed" - table id is changed

      // 1. Setup.
      Initialize;

      // 2. Generate Package With Table Customer
      CreatePackageForTable(ConfigPackage,ConfigPackageTable,DATABASE::Customer);

      // 3. Rename Package Table
      ASSERTERROR ConfigPackageTable.RENAME(ConfigPackage.Code,DATABASE::Vendor);

      // 4. Verify that table cannot be renamed in package
      Assert.ExpectedError(TableCannotBeRenamed);

      // 5. Cleanup: Delete the Package Table record created.
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    [HandlerFunctions(Report_CopyPackage_Handler)]
    PROCEDURE Report_CopyPackage@6();
    VAR
      ConfigPackage@1009 : Record 8623;
      NewPackageCode@1010 : Code[20];
    BEGIN
      // 8) Verify that package can be copied without data to the new package

      // 1. Setup.
      Initialize;

      // 2. Generate Package With Related Tables
      CreatePackageDataPairWithPKRelation(ConfigPackage);

      // 3. Run Copy Package report
      NewPackageCode := LibraryUtility.GenerateRandomCode(ConfigPackage.FIELDNO(Code),DATABASE::"Config. Package");
      CopyPackage_Report_Run(ConfigPackage,NewPackageCode,FALSE);

      // 4. Verify destination package created, tables created, table data and errors skipped
      VerifyCopyDataRelatedRecordCount(NewPackageCode,FALSE);

      // 5. Cleanup: Delete the Package Table record created.
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    [HandlerFunctions(Report_CopyPackage_Handler)]
    PROCEDURE Report_CopyPackage_WithData@10();
    VAR
      ConfigPackage@1009 : Record 8623;
      NewPackageCode@1010 : Code[20];
    BEGIN
      // 9) Verify that package can be copied with data to the new package

      // 1. Setup.
      Initialize;

      // 2. Generate Package With Related Tables
      CreatePackageDataPairWithPKRelation(ConfigPackage);

      // 3. Run Copy Package report with data
      NewPackageCode := LibraryUtility.GenerateRandomCode(ConfigPackage.FIELDNO(Code),DATABASE::"Config. Package");
      CopyPackage_Report_Run(ConfigPackage,NewPackageCode,TRUE);

      // 4. Verify destination package created, tables and table data created, errors skipped
      VerifyCopyDataRelatedRecordCount(NewPackageCode,TRUE);

      // 5. Cleanup: Delete the Package Table record created.
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    [HandlerFunctions(Report_CopyPackage_Handler)]
    PROCEDURE Report_CopyPackage_ToExistentPackage@26();
    VAR
      ConfigPackage@1000 : Record 8623;
      ConfigPackageTable@1002 : Record 8613;
      NewPackageCode@1003 : Code[20];
    BEGIN
      // 10) Verify that package cannot be copied to the existent package

      // 1. Setup.
      Initialize;

      // 2. Generate Destination Package and Package with Table Customer
      LibraryRapidStart.CreatePackage(ConfigPackage);
      NewPackageCode := ConfigPackage.Code;

      CreatePackageForTable(ConfigPackage,ConfigPackageTable,DATABASE::Customer);

      // 3. Run Copy Package report
      ASSERTERROR CopyPackage_Report_Run(ConfigPackage,NewPackageCode,FALSE);

      // 4. Verify copying to existent package is forbidden
      Assert.ExpectedError(ConfigPackageTableAlreadyExists);

      // 5. Cleanup: Delete the Package Table record created.
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE VerifyFields_IncludeField@49();
    VAR
      ConfigPackage@1003 : Record 8623;
      ConfigPackageTable@1000 : Record 8613;
      ConfigPackageField@1001 : Record 8616;
      FieldCount@1002 : Integer;
    BEGIN
      // 11) Verify Include Field is true for all fields

      // 1. Setup.
      Initialize;

      // 2. Generate Package With Table VAT Posting Setup
      CreatePackageForTable(ConfigPackage,ConfigPackageTable,DATABASE::"VAT Posting Setup");

      // 3. Verify Include Field is true for all fields by default
      ConfigPackageField.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageField.SETRANGE("Table ID",DATABASE::"VAT Posting Setup");
      FieldCount := ConfigPackageField.COUNT;
      ConfigPackageField.SETRANGE("Include Field",TRUE);

      Assert.AreEqual(FieldCount,ConfigPackageField.COUNT,Fields_WrongIncludeField);

      // 4. Cleanup: Delete the Package Table record created.
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE VerifyFields_ValidateField@36();
    VAR
      ConfigPackage@1003 : Record 8623;
      ConfigPackageTable@1000 : Record 8613;
      ConfigPackageField@1001 : Record 8616;
    BEGIN
      // 12) Verify Validate Field is true for fields by default

      // 1. Setup.
      Initialize;

      // 2. Generate Package With Table Item
      CreatePackageForTable(ConfigPackage,ConfigPackageTable,DATABASE::Item);

      // 3. Verify Validate Field is true for fields by default
      ConfigPackageField.GET(ConfigPackage.Code,DATABASE::Item,3);
      Assert.AreEqual(TRUE,ConfigPackageField."Validate Field",Fields_WrongValidateField);

      // 4. Cleanup: Delete the Package Table record created.
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE VerifyFields_ValidateField_Exception@31();
    VAR
      ConfigPackage@1003 : Record 8623;
      ConfigPackageTable@1000 : Record 8613;
      ConfigPackageField@1001 : Record 8616;
    BEGIN
      // 13) Verify Validate Field is false for fields with exception

      // 1. Setup.
      Initialize;

      // 2. Generate Package With Table VAT Posting Setup
      CreatePackageForTable(ConfigPackage,ConfigPackageTable,DATABASE::"VAT Posting Setup");

      // 3. Verify Validate Field is false for fields with exception
      ConfigPackageField.GET(ConfigPackage.Code,DATABASE::"VAT Posting Setup",4);
      Assert.AreEqual(FALSE,ConfigPackageField."Validate Field",Fields_WrongValidateField);

      // 4. Cleanup: Delete the Package Table record created.
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE VerifyFields_ProcessingOrder@16();
    VAR
      ConfigPackage@1003 : Record 8623;
      ConfigPackageTable@1000 : Record 8613;
      ConfigPackageField@1001 : Record 8616;
      ProcessingOrder@1005 : Integer;
    BEGIN
      // 14) Check default value of Processing Order, first numbering of key fields.

      // 1. Setup.
      Initialize;

      // 2. Generate Package With Table Item Vendor
      CreatePackageForTable(ConfigPackage,ConfigPackageTable,DATABASE::"Item Vendor");

      // 3. Verification Processing Order value is sequential
      ProcessingOrder := 0;
      ConfigPackageField.SETCURRENTKEY("Package Code","Table ID","Processing Order");
      ConfigPackageField.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageField.SETRANGE("Table ID",DATABASE::"Item Vendor");
      VerifyFieldProcessingOrder(ConfigPackageField,ProcessingOrder,TRUE); // key fields numbered first
      VerifyFieldProcessingOrder(ConfigPackageField,ProcessingOrder,FALSE);

      // 4. Cleanup: Delete the Package Table record created.
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE VerifyFields_FieldName@11();
    VAR
      ConfigPackage@1003 : Record 8623;
      ConfigPackageTable@1000 : Record 8613;
      ConfigPackageField@1001 : Record 8616;
      Field@1002 : Record 2000000041;
      TableID@1004 : Integer;
    BEGIN
      // 15) Check default value of Field Name.

      // 1. Setup.
      Initialize;

      // 2. Generate Package With Table Customer
      TableID := DATABASE::Customer;
      CreatePackageForTable(ConfigPackage,ConfigPackageTable,TableID);

      // 3. Verify Field Name is correct
      Field.SETRANGE(TableNo,TableID);
      Field.FINDFIRST;
      ConfigPackageField.GET(ConfigPackage.Code,TableID,Field."No.");

      Assert.AreEqual(Field.FieldName,ConfigPackageField."Field Name",Fields_WrongFieldName);

      // 4. Cleanup: Delete the Package Table record created.
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE VerifyFields_RelationTableID@28();
    VAR
      ConfigPackage@1003 : Record 8623;
      ConfigPackageTable@1000 : Record 8613;
      ConfigPackageField@1001 : Record 8616;
      Field@1002 : Record 2000000041;
      Customer@1005 : Record 18;
      TableID@1004 : Integer;
    BEGIN
      // 16) Check default value of Relation Table ID.

      // 1. Setup.
      Initialize;

      // 2. Generate Package With Table Customer
      TableID := DATABASE::Customer;
      CreatePackageForTable(ConfigPackage,ConfigPackageTable,TableID);

      // 3. Verify Related Table ID is correct
      Field.SETRANGE(TableNo,TableID);
      Field.SETRANGE("No.",Customer.FIELDNO("Territory Code"));
      Field.FINDFIRST;
      ConfigPackageField.GET(ConfigPackage.Code,TableID,Field."No.");

      Assert.AreEqual(Field.RelationTableNo,ConfigPackageField."Relation Table ID",Fields_WrongRelationTableNo);

      // 4. Cleanup: Delete the Package Table record created.
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE VerifyFields_DimensionDefaultField@18();
    VAR
      ConfigPackage@1003 : Record 8623;
      ConfigPackageTable@1000 : Record 8613;
      ConfigPackageField@1001 : Record 8616;
      TableID@1004 : Integer;
    BEGIN
      // 17) Check default value of Dimension field.

      // 1. Setup.
      Initialize;

      // 2. Generate Package With Table Customer
      TableID := DATABASE::Customer;
      CreatePackageForTable(ConfigPackage,ConfigPackageTable,TableID);

      // 3. Verify Related Table ID is correct
      ConfigPackageField.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageField.SETRANGE("Table ID",TableID);
      ConfigPackageField.FINDFIRST;
      Assert.IsFalse(ConfigPackageField.Dimension,Fields_WrongDimensionField);

      // 4. Cleanup: Delete the Package Table record created.
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmYesHandler)]
    PROCEDURE VerifyFields_DimensionTrueField@27();
    VAR
      ConfigPackage@1003 : Record 8623;
      ConfigPackageTable@1000 : Record 8613;
      ConfigPackageField@1001 : Record 8616;
      TableID@1004 : Integer;
    BEGIN
      // 18) Check TRUE value of Dimension field.

      // 1. Setup.
      Initialize;

      // 2. Generate Package With Table Customer
      TableID := DATABASE::Customer;
      CreatePackageForTable(ConfigPackage,ConfigPackageTable,TableID);
      ConfigPackageTable.VALIDATE("Dimensions as Columns",TRUE);
      ConfigPackageTable.MODIFY;

      // 3. Verify Related Table ID is correct
      ConfigPackageField.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageField.SETRANGE("Table ID",TableID);
      ConfigPackageField.SETRANGE(Dimension,TRUE);
      Assert.IsTrue(ConfigPackageField.FINDFIRST,Fields_WrongDimensionField);

      // 4. Cleanup: Delete the Package Table record created.
      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE VerifyGetRelatedTablesSkipsSystemTable@25();
    VAR
      ConfigPackage@1001 : Record 8623;
      ConfigPackageTable@1002 : Record 8613;
      ConfigPackageMgt@1003 : Codeunit 8611;
      TableID@1004 : Integer;
      RelatedTableID@1000 : Integer;
    BEGIN
      FindTableWithRelatedSystemTable(TableID,RelatedTableID);
      CreatePackageForTable(ConfigPackage,ConfigPackageTable,TableID);

      ConfigPackageMgt.GetRelatedTables(ConfigPackageTable);

      ConfigPackageTable.SETRANGE("Table ID",RelatedTableID);
      Assert.IsTrue(ConfigPackageTable.ISEMPTY,STRSUBSTNO(TableMustNotBeAddedErr,RelatedTableID));

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE UpdateConfigLinePackageDataConfigLineMaximumIntLineNo@32();
    VAR
      ConfigLine@1000 : Record 8622;
      ConfigPackageData@1001 : Record 8615;
      ConfigPackageManagement@1002 : Codeunit 8611;
      LineNo@1005 : Integer;
      ConfigPackageDataCode@1003 : Code[20];
      ShiftLineNo@1004 : BigInteger;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 371799] UpdateConfigLinePackageData processes Config. Line with Line No. of maximum int value
      Initialize;

      // [GIVEN] Config. Line with "Line No." = 2147483647 (maximum int value)
      LineNo := 2147483647;
      CreateSimpleConfigLine(ConfigLine,LineNo);

      // [GIVEN] Config. Package Data with Value = 5
      ShiftLineNo := LibraryRandom.RandIntInRange(1,100);
      ConfigPackageDataCode :=
        LibraryUtility.GenerateRandomCode(ConfigPackageData.FIELDNO("Package Code"),DATABASE::"Config. Package Data");
      CreateSimpleConfigPackageData(ConfigPackageData,ConfigPackageDataCode,ShiftLineNo,ConfigLine.FIELDNO("Line No."));

      // [WHEN] Run UpdateConfigLinePackageData for Config. Package Data
      ConfigPackageManagement.UpdateConfigLinePackageData(ConfigPackageDataCode);

      // [THEN] Config. Package Data Value = 2147483647 + 5 + 10000
      ConfigPackageData.FIND;
      Assert.AreEqual(FORMAT(LineNo + ShiftLineNo + 10000L),ConfigPackageData.Value,ConfigPackageData.FIELDCAPTION(Value));
    END;

    [Test]
    [TransactionModel(AutoRollback)]
    PROCEDURE UpdateConfigLinePackageDataConfigPackageDataMaximumIntValue@65();
    VAR
      ConfigLine@1000 : Record 8622;
      ConfigPackageData@1001 : Record 8615;
      ConfigPackageManagement@1002 : Codeunit 8611;
      LineNo@1005 : Integer;
      ConfigPackageDataCode@1003 : Code[20];
      ShiftLineNo@1004 : BigInteger;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 371799] UpdateConfigLinePackageData processes Config. Package Data with Value of maximum int value
      Initialize;

      // [GIVEN] Config. Line with Line No = 50000
      LineNo := LibraryUtility.GetNewRecNo(ConfigLine,ConfigLine.FIELDNO("Line No."));
      CreateSimpleConfigLine(ConfigLine,LineNo);

      // [GIVEN] Config Package Data with Value = 2147483647 (maximum int value)
      ShiftLineNo := 2147483647;
      ConfigPackageDataCode :=
        LibraryUtility.GenerateRandomCode(ConfigPackageData.FIELDNO("Package Code"),DATABASE::"Config. Package Data");
      CreateSimpleConfigPackageData(ConfigPackageData,ConfigPackageDataCode,ShiftLineNo,ConfigLine.FIELDNO("Line No."));

      // [WHEN] Run UpdateConfigLinePackageData for Config Package Data
      ConfigPackageManagement.UpdateConfigLinePackageData(ConfigPackageDataCode);

      // [THEN] Config. Package Data Value = 50000 + 2147483647 + 10000
      ConfigPackageData.FIND;
      Assert.AreEqual(FORMAT(LineNo + ShiftLineNo + 10000L),ConfigPackageData.Value,ConfigPackageData.FIELDCAPTION(Value));
    END;

    [Test]
    PROCEDURE GetFieldElementNameAddPrefixTrue@92();
    VAR
      ConfigXMLExchange@1000 : Codeunit 8614;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381067] "Config. XML Exchange".GetFieldElementName adds prefix 'Field_' when AddPrefixMode = TRUE
      ConfigXMLExchange.SetPrefixMode(TRUE);
      Assert.AreEqual('Field_' + FieldTok,ConfigXMLExchange.GetFieldElementName(FieldTok),'');
    END;

    [Test]
    PROCEDURE GetFieldElementNameAddPrefixFalse@94();
    VAR
      ConfigXMLExchange@1000 : Codeunit 8614;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381067] "Config. XML Exchange".GetFieldElementName does not add prefix 'Field_' when AddPrefixMode = FALSE
      ConfigXMLExchange.SetPrefixMode(FALSE);
      Assert.AreEqual(FORMAT(FieldTok),ConfigXMLExchange.GetFieldElementName(FieldTok),'');
    END;

    [Test]
    PROCEDURE GetTableElementNameAddPrefixTrue@97();
    VAR
      ConfigXMLExchange@1000 : Codeunit 8614;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381067] "Config. XML Exchange".GetTableElementName adds prefix 'Table_' when AddPrefixMode = TRUE
      ConfigXMLExchange.SetPrefixMode(TRUE);
      Assert.AreEqual('Table_' + TableTok,ConfigXMLExchange.GetTableElementName(TableTok),'');
    END;

    [Test]
    PROCEDURE GetTableElementNameAddPrefixFalse@96();
    VAR
      ConfigXMLExchange@1000 : Codeunit 8614;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 381067] "Config. XML Exchange".GetTableElementName does not add prefix 'Table_' when AddPrefixMode = FALSE
      ConfigXMLExchange.SetPrefixMode(FALSE);
      Assert.AreEqual(FORMAT(TableTok),ConfigXMLExchange.GetTableElementName(TableTok),'');
    END;

    LOCAL PROCEDURE Initialize@4();
    BEGIN
      LibraryVariableStorage.Clear;
      IF isInitialized THEN
        EXIT;

      Cleanup('');
      HideDialog;

      SingleEntryRecNo := 1;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE Cleanup@60(PackageCode@1170000000 : Code[20]);
    VAR
      ConfigPackage@1006 : Record 8623;
      ConfigLine@1000 : Record 8622;
    BEGIN
      ConfigLine.SETFILTER("Package Code",'%1|%2',PackageCode,'');
      ConfigLine.DELETEALL(TRUE);
      ConfigPackage.SETRANGE(Code,PackageCode);
      ConfigPackage.DELETEALL(TRUE);
      CLEAR(LibraryVariableStorage);
    END;

    LOCAL PROCEDURE HideDialog@56();
    VAR
      ConfigPackageMgt@1000 : Codeunit 8611;
    BEGIN
      ConfigPackageMgt.SetHideDialog(TRUE);
    END;

    LOCAL PROCEDURE CreatePackageDataPairWithPKRelation@13(VAR ConfigPackage@1007 : Record 8623);
    VAR
      RelatedConfigPackageTable@1006 : Record 8613;
      GenJournalTemplate@1010 : Record 80;
      GenJournalBatch@1003 : Record 232;
      ConfigPackageFilter@1013 : Record 8626;
      LibraryERM@1001 : Codeunit 131300;
      ConfigPackageMgt@1000 : Codeunit 8611;
      KeyValueWithRelation@1009 : Code[10];
      KeyValueWithoutRelation@1008 : Code[10];
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate); // Master
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name); // Related

      KeyValueWithRelation := GenJournalTemplate.Name;
      KeyValueWithoutRelation := GenJournalBatch.Name;

      GenJournalTemplate.DELETE;
      GenJournalBatch.DELETE;

      // Related Table field with relation

      // PK Field with relation
      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        RelatedConfigPackageTable,
        DATABASE::"Gen. Journal Batch",
        GenJournalBatch.FIELDNO("Journal Template Name"),
        KeyValueWithRelation,
        SingleEntryRecNo);

      // Field without relation
      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        RelatedConfigPackageTable,
        DATABASE::"Gen. Journal Batch",
        GenJournalBatch.FIELDNO(Name),
        KeyValueWithoutRelation,
        SingleEntryRecNo);

      ConfigPackageMgt.InsertPackageFilter(
        ConfigPackageFilter,ConfigPackage.Code,DATABASE::"Gen. Journal Batch",GenJournalBatch.FIELDNO(Name),GenJournalBatch.Name);

      LibraryRapidStart.ValidatePackage(ConfigPackage,FALSE);
    END;

    LOCAL PROCEDURE VerifyRelatedRecordCount@1(PackageCode@1000 : Code[20];TableID@1008 : Integer;MustBeEmpty@1001 : Boolean);
    VAR
      ConfigPackageTable@1007 : Record 8613;
      ConfigPackageField@1006 : Record 8616;
      ConfigPackageFilter@1005 : Record 8626;
      ConfigPackageRecord@1004 : Record 8614;
      ConfigPackageData@1003 : Record 8615;
      ConfigPackageError@1002 : Record 8617;
    BEGIN
      ConfigPackageTable.SETRANGE("Package Code",PackageCode);
      ConfigPackageRecord.SETRANGE("Package Code",PackageCode);
      ConfigPackageData.SETRANGE("Package Code",PackageCode);
      ConfigPackageField.SETRANGE("Package Code",PackageCode);
      ConfigPackageError.SETRANGE("Package Code",PackageCode);
      ConfigPackageFilter.SETRANGE("Package Code",PackageCode);

      IF TableID <> 0 THEN BEGIN
        ConfigPackageTable.SETRANGE("Table ID",TableID);
        ConfigPackageRecord.SETRANGE("Table ID",TableID);
        ConfigPackageData.SETRANGE("Table ID",TableID);
        ConfigPackageField.SETRANGE("Table ID",TableID);
        ConfigPackageError.SETRANGE("Table ID",TableID);
        ConfigPackageFilter.SETRANGE("Table ID",TableID);
      END;

      Assert.AreEqual(
        MustBeEmpty,ConfigPackageTable.ISEMPTY,STRSUBSTNO(RelatedTableDataError,MustBeEmpty,ConfigPackageTable.TABLENAME));
      Assert.AreEqual(
        MustBeEmpty,ConfigPackageRecord.ISEMPTY,STRSUBSTNO(RelatedTableDataError,MustBeEmpty,ConfigPackageRecord.TABLENAME));
      Assert.AreEqual(MustBeEmpty,ConfigPackageData.ISEMPTY,STRSUBSTNO(RelatedTableDataError,MustBeEmpty,ConfigPackageData.TABLENAME));
      Assert.AreEqual(
        MustBeEmpty,ConfigPackageField.ISEMPTY,STRSUBSTNO(RelatedTableDataError,MustBeEmpty,ConfigPackageField.TABLENAME));
      Assert.AreEqual(
        MustBeEmpty,ConfigPackageError.ISEMPTY,STRSUBSTNO(RelatedTableDataError,MustBeEmpty,ConfigPackageError.TABLENAME));
      Assert.AreEqual(
        MustBeEmpty,ConfigPackageFilter.ISEMPTY,STRSUBSTNO(RelatedTableDataError,MustBeEmpty,ConfigPackageFilter.TABLENAME));
    END;

    LOCAL PROCEDURE VerifyCopyDataRelatedRecordCount@19(NewPackageCode@1000 : Code[20];CopyData@1001 : Boolean);
    VAR
      ConfigPackage@1008 : Record 8623;
      ConfigPackageTable@1007 : Record 8613;
      ConfigPackageField@1006 : Record 8616;
      ConfigPackageFilter@1005 : Record 8626;
      ConfigPackageRecord@1004 : Record 8614;
      ConfigPackageData@1003 : Record 8615;
      ConfigPackageError@1002 : Record 8617;
    BEGIN
      ConfigPackage.SETRANGE(Code,NewPackageCode);
      Assert.IsFalse(ConfigPackage.ISEMPTY,STRSUBSTNO(RelatedTableDataError,FALSE,ConfigPackage.TABLENAME));
      ConfigPackageTable.SETRANGE("Package Code",NewPackageCode);
      Assert.IsFalse(ConfigPackageTable.ISEMPTY,STRSUBSTNO(RelatedTableDataError,FALSE,ConfigPackageTable.TABLENAME));
      ConfigPackageField.SETRANGE("Package Code",NewPackageCode);
      Assert.IsFalse(ConfigPackageField.ISEMPTY,STRSUBSTNO(RelatedTableDataError,FALSE,ConfigPackageField.TABLENAME));
      ConfigPackageFilter.SETRANGE("Package Code",NewPackageCode);
      Assert.IsFalse(ConfigPackageFilter.ISEMPTY,STRSUBSTNO(RelatedTableDataError,FALSE,ConfigPackageFilter.TABLENAME));

      ConfigPackageRecord.SETRANGE("Package Code",NewPackageCode);
      Assert.IsTrue(
        CopyData <> ConfigPackageRecord.ISEMPTY,STRSUBSTNO(RelatedTableDataError,NOT CopyData,ConfigPackageRecord.TABLENAME));
      ConfigPackageData.SETRANGE("Package Code",NewPackageCode);
      Assert.IsTrue(CopyData <> ConfigPackageData.ISEMPTY,STRSUBSTNO(RelatedTableDataError,NOT CopyData,ConfigPackageData.TABLENAME));
      ConfigPackageError.SETRANGE("Package Code",NewPackageCode);
      Assert.IsTrue(ConfigPackageError.ISEMPTY,STRSUBSTNO(MustBeNoPackageErrors,ConfigPackageError.TABLENAME));

      IF CopyData THEN BEGIN
        ConfigPackageRecord.SETRANGE(Invalid,TRUE);
        Assert.IsTrue(ConfigPackageRecord.ISEMPTY,STRSUBSTNO(MustBeNoPackageErrors,ConfigPackageRecord.TABLENAME));
        ConfigPackageData.SETRANGE(Invalid,TRUE);
        Assert.IsTrue(ConfigPackageData.ISEMPTY,STRSUBSTNO(MustBeNoPackageErrors,ConfigPackageData.TABLENAME));
      END;
    END;

    LOCAL PROCEDURE VerifyFieldProcessingOrder@22(VAR ConfigPackageField@1000 : Record 8616;VAR ProcessingOrder@1001 : Integer;KeyField@1002 : Boolean);
    BEGIN
      ConfigPackageField.SETRANGE("Primary Key",KeyField);
      ConfigPackageField.FINDFIRST;
      REPEAT
        ProcessingOrder += 1;
        Assert.AreEqual(
          ProcessingOrder,
          ConfigPackageField."Processing Order",
          STRSUBSTNO(Fields_WrongProcessingOrderErr,ConfigPackageField.FIELDNAME("Processing Order"),ProcessingOrder));
      UNTIL ConfigPackageField.NEXT = 0;
    END;

    LOCAL PROCEDURE GetTables_Report_Run@21(PackageCode@1002 : Code[20];WithDataOnly@1000 : Boolean);
    VAR
      GetPackageTables@1001 : Report 8616;
    BEGIN
      COMMIT;  // Commit required to avoid test failure.
      LibraryVariableStorage.Enqueue(WithDataOnly);
      GetPackageTables.Set(PackageCode);
      GetPackageTables.RUN;
    END;

    LOCAL PROCEDURE CopyPackage_Report_Run@29(VAR ConfigPackage@1001 : Record 8623;NewPackageCode@1002 : Code[20];WithDataOnly@1000 : Boolean);
    VAR
      CopyPackage@1003 : Report 8615;
    BEGIN
      COMMIT;  // Commit required to avoid test failure.
      LibraryVariableStorage.Enqueue(NewPackageCode);
      LibraryVariableStorage.Enqueue(WithDataOnly);
      CopyPackage.Set(ConfigPackage);
      CopyPackage.RUN;
    END;

    LOCAL PROCEDURE CreatePackageForTable@41(VAR ConfigPackage@1000 : Record 8623;VAR ConfigPackageTable@1001 : Record 8613;TableId@1002 : Integer);
    BEGIN
      LibraryRapidStart.CreatePackage(ConfigPackage);
      LibraryRapidStart.CreatePackageTable(ConfigPackageTable,ConfigPackage.Code,TableId);
    END;

    LOCAL PROCEDURE CreateSimpleConfigLine@51(VAR ConfigLine@1002 : Record 8622;LineNo@1000 : BigInteger);
    BEGIN
      ConfigLine.INIT;
      ConfigLine.VALIDATE("Line No.",LineNo);
      ConfigLine.INSERT;
    END;

    LOCAL PROCEDURE CreateSimpleConfigPackageData@53(VAR ConfigPackageData@1003 : Record 8615;ConfigPackageDataCode@1001 : Code[20];NewValue@1002 : BigInteger;FieldId@1000 : Integer);
    BEGIN
      ConfigPackageData.INIT;
      ConfigPackageData."Package Code" := ConfigPackageDataCode;
      ConfigPackageData."Table ID" := DATABASE::"Config. Line";
      ConfigPackageData."Field ID" := FieldId;
      ConfigPackageData.Value := FORMAT(NewValue);
      ConfigPackageData.INSERT;
    END;

    LOCAL PROCEDURE FindTableWithRelatedSystemTable@30(VAR TableID@1001 : Integer;VAR ReleatedTableID@1002 : Integer);
    VAR
      Field@1000 : Record 2000000041;
    BEGIN
      Field.SETRANGE(TableNo,1,99000999);
      Field.SETFILTER(RelationTableNo,'>=%1',2000000006);
      Field.FINDFIRST;

      TableID := Field.TableNo;
      ReleatedTableID := Field.RelationTableNo;
    END;

    [RequestPageHandler]
    PROCEDURE Report_GetTables_RequestPageRun_Handler@17(VAR GetPackageTables@1000 : TestRequestPage 8616);
    VAR
      WithDataOnly@1001 : Variant;
    BEGIN
      GetPackageTables.SelectTables.ASSISTEDIT;
      LibraryVariableStorage.Dequeue(WithDataOnly);
      GetPackageTables.WithDataOnly.SETVALUE(WithDataOnly);
      GetPackageTables.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE Report_GetTables_SelectedTables_SelectionHandler@12(VAR ConfigSelection@1000 : TestPage 8628);
    BEGIN
      ConfigSelection.FIRST;
      ConfigSelection.Selected.SETVALUE(TRUE);
      ConfigSelection.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE Report_GetTables_SelectedTables_SelectAllHandler@15(VAR ConfigSelection@1000 : TestPage 8628);
    BEGIN
      ConfigSelection.FIRST;
      REPEAT
        ConfigSelection.Selected.SETVALUE(TRUE);
      UNTIL ConfigSelection.NEXT;
      ConfigSelection.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE Report_CopyPackage_Handler@20(VAR CopyPackage@1000 : TestRequestPage 8615);
    VAR
      NewPackageCode@1002 : Variant;
      CopyData@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(NewPackageCode);
      LibraryVariableStorage.Dequeue(CopyData);
      CopyPackage.Package.SETVALUE(NewPackageCode);
      CopyPackage.CopyData.SETVALUE(CopyData);
      CopyPackage.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmYesHandler@23(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Config Package] [Rapid Start]
      Package delete, rename.
      + 1) Verify that package clears related data when it is deleted
      + 2) Verify that package renamed related data when it is renamed

      --- Get Tables function
      Verify that it is possible to add tables listed in the config. worksheet using function "Get Tables", request page parameters:
      + 3) - Selected tables
      + 4) - With Data Only

      --- Add, rename and delete tables in package
      + 5) Verify that it is possible to add tables which are not listed in the config. worksheet
      + 6) Verify that package's table can be deleted (with related tables)
        +7) Verify that package's table cannot be "renamed" - error must be shown

      --- Copy Package function
      + 8) Verify that package can be copied without data to the new package
      + 9) Verify that package can be copied with data to the new package
      + 10) Verify that package cannot be copied to the existent package

      -- Fields created for package tables.
      + 11) Check default values of Include = true.
      + 12) Check default values of Validate = true.
      + 13) Check default values of Validate with exception = false.
      + 14) Check default value of Processing Order, first numbering of key fields.
      + 15) Check default value of Field Name.
      + 16) Check default value of Relation Table ID.
      + 17) Check default value of Dimension field.
      + 18) Check TRUE value of Dimension field.

      + 19) Test for Bug 331856 fix. Verify that Get Related Tables skips system tables.
    }
    END.
  }
}

