OBJECT Codeunit 134452 ERM Fixed Assets Insurance
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Insurance2@1005 : Record 5628;
      LibraryFixedAsset@1004 : Codeunit 131330;
      LibraryPurchase@1015 : Codeunit 130512;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryFiscalYear@1011 : Codeunit 131302;
      Assert@1003 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      RecordExistError@1006 : TextConst 'ENU=%1 %2 must not exist.';
      CommentLineExistError@1007 : TextConst 'ENU="%1 for %2 = %3, %4 = %5 must not exist."';
      InsuranceAmountError@1008 : TextConst 'ENU=%1 must be equal.';
      StartingDate@1009 : Date;
      EndingDate@1010 : Date;
      EndingDateError@1012 : TextConst 'ENU=Ending Date must be specified.';
      Amount@1014 : Decimal;
      FANo@1013 : Code[20];
      RoundingFactorOption@1016 : TextConst 'ENU=None';

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      CLEAR(Amount);
      CLEAR(FANo);
      // Use global variables for Request Page Handler.
      StartingDate := 0D;
      EndingDate := 0D;

      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE InsuranceJournalDifferentBatch@2();
    VAR
      Insurance@1000 : Record 5628;
      FixedAsset@1001 : Record 5600;
      InsuranceJournalTemplate@1002 : Record 5633;
      InsuranceJournalBatch@1004 : Record 5634;
      Amount@1006 : ARRAY [2] OF Decimal;
    BEGIN
      // Test that Insurance Journal Posted successfully with different batch jobs.

      // 1. Setup: Create Insurance and fixed asset.
      Initialize;
      LibraryFixedAsset.CreateInsurance(Insurance);
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);

      // 2. Exercise: Create Insurance Journal Batch and Post Insurance Journal.
      InsuranceJournalTemplate.FINDFIRST;
      LibraryFixedAsset.CreateInsuranceJournalBatch(InsuranceJournalBatch,InsuranceJournalTemplate.Name);
      Amount[1] := CreatePostInsuranceJournalLine(InsuranceJournalBatch,FixedAsset."No.",Insurance."No.");

      InsuranceJournalBatch.GET(InsuranceJournalBatch."Journal Template Name",INCSTR(InsuranceJournalBatch.Name));
      Amount[2] := CreatePostInsuranceJournalLine(InsuranceJournalBatch,FixedAsset."No.",Insurance."No.");

      // 3. Verification: To verify Insurance number, Document type and Amount are posted properly.
      VerifyCoverageLedgerEntry(FixedAsset."No.",Amount,Insurance."No.");
    END;

    [Test]
    PROCEDURE CreationOfInsurance@5();
    VAR
      Insurance@1000 : Record 5628;
    BEGIN
      // Test Creation of Insurance.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Create Insurance.
      LibraryFixedAsset.CreateInsurance(Insurance);

      // 3. Verify: Verify Insurance successfully created.
      Insurance.GET(Insurance."No.");
    END;

    [Test]
    PROCEDURE UpdationOfInsurance@12();
    VAR
      Insurance@1000 : Record 5628;
      AnnualPremium@1001 : Decimal;
    BEGIN
      // Test Annual Premium Amount successfully updated on Insurance.

      // 1. Setup: Create Insurance.
      Initialize;
      LibraryFixedAsset.CreateInsurance(Insurance);

      // 2. Exercise: Update Annual Premium on Insurance.
      AnnualPremium := LibraryRandom.RandDec(1000,2);  // Use Random because value is not important.
      Insurance.VALIDATE("Annual Premium",AnnualPremium);
      Insurance.MODIFY(TRUE);

      // 3. Verify: Verify Annual Premium Amount successfully updated on Insurance.
      Insurance.GET(Insurance."No.");
      Insurance.TESTFIELD("Annual Premium",AnnualPremium);
    END;

    [Test]
    PROCEDURE CommentCreationForInsurance@4();
    VAR
      Insurance@1000 : Record 5628;
      Comment@1003 : Text[80];
    BEGIN
      // Test Comment creation for Insurance.

      // 1. Setup: Create Insurance.
      Initialize;
      LibraryFixedAsset.CreateInsurance(Insurance);

      // 2. Exercise: Create Comment for Insurance.
      Comment := CreateCommentForInsurance(Insurance."No.");

      // 3. Verify: Verify created comment.
      VerifyCommentForInsurance(Insurance."No.",Comment);
    END;

    [Test]
    PROCEDURE CommentDeletionForInsurance@30();
    VAR
      Insurance@1000 : Record 5628;
      CommentLine@1002 : Record 97;
    BEGIN
      // Test Comment Deletion for Insurance.

      // 1. Setup: Create Insurance and Comment for It.
      Initialize;
      LibraryFixedAsset.CreateInsurance(Insurance);
      LibraryFixedAsset.CreateCommentLine(CommentLine,CommentLine."Table Name"::Insurance,Insurance."No.");

      // 2. Exercise: Delete Comment.
      CommentLine.DELETE(TRUE);

      // 3. Verify: Verify Comment successfully deleted.
      CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Insurance);
      CommentLine.SETRANGE("No.",Insurance."No.");
      Assert.IsFalse(
        CommentLine.FINDFIRST,
        STRSUBSTNO(
          CommentLineExistError,CommentLine.TABLECAPTION,CommentLine.FIELDCAPTION("No."),CommentLine."No.",
          CommentLine.FIELDCAPTION("Line No."),CommentLine."Line No."));
    END;

    [Test]
    PROCEDURE DefaultDimensionForInsurance@42();
    VAR
      Insurance@1000 : Record 5628;
      DimensionValue@1007 : Record 349;
    BEGIN
      // Test Default Dimension Creation for Insurance.

      // 1. Setup: Create Insurance.
      Initialize;
      LibraryFixedAsset.CreateInsurance(Insurance);

      // 2. Exercise: Create Default Dimension for Insurance.
      CreateDefaultDimension(DimensionValue,Insurance."No.");

      // 3. Verify: Verify Default Dimension for Insurance.
      VerifyDefaultDimension(DimensionValue,Insurance."No.");
    END;

    [Test]
    [HandlerFunctions(InsuranceStatisticsPageHadler)]
    PROCEDURE InsuranceStatistics@6();
    VAR
      Insurance@1000 : Record 5628;
      InsuranceStatistics@1008 : Page 5646;
    BEGIN
      // Test Annual Premium and Policy Coverage on Insurance Statistics page.

      // 1. Setup: Create Insurance with Annual Premium and Policy Coverage.
      Initialize;
      LibraryFixedAsset.CreateInsurance(Insurance);
      ModifyAmountsOnInsurance(Insurance);

      // 2. Exercise: Run Insurance Statistics.
      CLEAR(InsuranceStatistics);
      InsuranceStatistics.SETRECORD(Insurance);
      InsuranceStatistics.RUN;

      // 3. Verify: Verify Annual Premium and Policy Coverage on Insurance Statistics page.
      Insurance2.TESTFIELD("Annual Premium",Insurance."Annual Premium");
      Insurance2.TESTFIELD("Policy Coverage",Insurance."Policy Coverage");
    END;

    [Test]
    PROCEDURE DeletionOfInsurance@18();
    VAR
      Insurance@1000 : Record 5628;
    BEGIN
      // Test deletion of Insurance.

      // 1. Setup: Create Insurance.
      Initialize;
      LibraryFixedAsset.CreateInsurance(Insurance);

      // 2. Exercise: Delete Insurance.
      Insurance.DELETE(TRUE);

      // 3. Verify: Verify Insurance successfully deleted.
      Assert.IsFalse(Insurance.GET(Insurance."No."),STRSUBSTNO(RecordExistError,Insurance.TABLECAPTION,Insurance."No."));
    END;

    [Test]
    PROCEDURE IndexInsurance@7();
    VAR
      FixedAsset@1000 : Record 5600;
      DepreciationBook@1001 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      Insurance@1003 : Record 5628;
      InsuranceJournalBatch@1005 : Record 5634;
      Amount@1006 : Decimal;
      IndexFigure@1007 : Integer;
    BEGIN
      // Test the Generates correct entry in Insurance Journal after executing the Index Insurance.

      // 1. Setup: Create Fixed Asset,Create Insurance ,FA Posting Group, FA Depreciation Book,Create and Post Purchase Invoice and
      // Create Insurance Journal Batch and Post Insurance Journal.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      IndexationAndIntegrationInBook(FADepreciationBook."Depreciation Book Code");
      CreateAndPostPurchaseInvoice(FixedAsset."No.",FADepreciationBook."Depreciation Book Code");
      LibraryFixedAsset.CreateInsurance(Insurance);
      CreateInsuranceJournalBatch(InsuranceJournalBatch);
      Amount := CreatePostInsuranceJournalLine(InsuranceJournalBatch,FixedAsset."No.",Insurance."No.");

      // 2. Exercise: Run Index Insurance.
      IndexFigure := RunIndexInsurance(FixedAsset."No.");

      // 3. Verify: Verify the Insurance Journal entries Created for Insurance with correct Amount.
      VerifyInsuranceEntry(FixedAsset."No.",Insurance."No.",Amount,IndexFigure);
    END;

    [Test]
    [HandlerFunctions(CompressInsuranceLedgerHandler,DimensionSelectionHandler,ConfirmHandlerTrue)]
    PROCEDURE DateCompressInsuranceLedgerDatesError@16();
    BEGIN
      // Test error occurs on Running Date Compress Insurance Ledger Report without Starting and Ending Dates.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Run Date Compress Insurance Ledger Report without Starting and Ending Dates.
      ASSERTERROR RunDateCompressInsuranceLedger;

      // 3. Verify: Verify error occurs on Running Date Compress Insurance Ledger Report without Starting and Ending Dates.
      Assert.AreEqual(STRSUBSTNO(EndingDateError),GETLASTERRORTEXT,EndingDateError);
    END;

    [Test]
    [HandlerFunctions(CompressInsuranceLedgerHandler,DimensionSelectionHandler,ConfirmHandlerTrue)]
    PROCEDURE DateCompressInsuranceLedgerBatch@14();
    VAR
      InsuranceRegister@1001 : Record 5636;
      InsCoverageLedgerEntry@1002 : Record 5629;
      JournalBatchName@1000 : Code[10];
    BEGIN
      // Test and verify Date Compress Insurance Ledger Report functionality.

      // 1. Setup: Create and post Insurance Journal.
      Initialize;
      JournalBatchName := CreateAndPostInsuranceJournal;
      FindInsuranceRegister(InsuranceRegister,JournalBatchName);
      COMMIT;

      // 2. Exercise: Run Date Compress Insurance Ledger Report with Starting and Ending Dates.
      StartingDate := LibraryFiscalYear.GetLastPostingDate(TRUE);
      EndingDate := LibraryFiscalYear.GetLastPostingDate(TRUE);
      RunDateCompressInsuranceLedger;

      // 3. Verify: Ins. Coverage Ledger Entries must be deleted after running the Date Compress Insurance Ledger Report.
      Assert.AreEqual(
        0,GetNumberCoverageLedgerEntries(InsuranceRegister."From Entry No.",InsuranceRegister."To Entry No."),
        STRSUBSTNO(
          CommentLineExistError,InsCoverageLedgerEntry.TABLECAPTION,InsuranceRegister.FIELDCAPTION("From Entry No."),
          InsuranceRegister."From Entry No.",
          InsuranceRegister.FIELDCAPTION("To Entry No."),InsuranceRegister."To Entry No."));
    END;

    [Test]
    PROCEDURE TotalValueInsuredWithFixedAsset@21();
    VAR
      Insurance@1000 : Record 5628;
      FixedAsset@1001 : Record 5600;
      InsuranceJournalBatch@1004 : Record 5634;
      FixedAssetCard@1005 : TestPage 5600;
      TotalValueInsured@1002 : TestPage 5649;
      TotalInsuredAmount@1006 : Decimal;
    BEGIN
      // Check Total Value on Total Value Insured Page through Fixed Asset after Posting Insurance Journal.

      // Setup: Create Insurance,Fixed Asset and Post Insurance Journal Line.
      Initialize;
      LibraryFixedAsset.CreateInsurance(Insurance);
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);
      CreateInsuranceJournalBatch(InsuranceJournalBatch);
      TotalInsuredAmount := CreatePostInsuranceJournalLine(InsuranceJournalBatch,FixedAsset."No.",Insurance."No.");

      // Exercise: Open Total Value Insured Page through Fixed Asset.
      FixedAssetCard.OPENEDIT;
      FixedAssetCard.FILTER.SETFILTER("No.",FixedAsset."No.");
      TotalValueInsured.TRAP;
      FixedAssetCard."Page Total Value Insured".INVOKE;

      // Verify: Check Total Value on Total Value Insured Page after Posting Insurance Journal.
      Assert.AreEqual(
        TotalInsuredAmount,TotalValueInsured.TotalValue."Total Value Insured".ASDECIMAL,
        STRSUBSTNO(InsuranceAmountError,TotalValueInsured.TotalValue."Total Value Insured".CAPTION));
    END;

    [Test]
    [HandlerFunctions(FAPostingTypesOvervMatrixPageHandler)]
    PROCEDURE FAPostingTypesOverviewMatrixRoundingNone@36();
    VAR
      DepreciationBook@1008 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FixedAsset@1001 : Record 5600;
      FixedAssetCard@1007 : TestPage 5600;
      FAPostingTypesOverview@1009 : TestPage 5662;
    BEGIN
      // Check FA Posting Types Overview Matrix Page for Posted Values through Fixed Asset page with Rounding Option None.

      // Setup: Create Setup for Fixed Asset.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      // Exercise: Create and Post FA Journal Line and Assign Fixed Asset No. in Global Variable.
      Amount := LibraryRandom.RandDec(100,2);
      CreateAndPostFAJournalLine(FixedAsset."No.",DepreciationBook.Code,Amount);
      FANo := FixedAsset."No.";

      // Verify: Verify FA Posting Types Overview Matrix Page for Posted FA Value in FAPostingTypesOvervMatrixPageHandler.
      FixedAssetCard.OPENVIEW;
      FixedAssetCard.FILTER.SETFILTER("No.",FixedAsset."No.");
      FAPostingTypesOverview.TRAP;
      FixedAssetCard."Page FA Posting Types Overview".INVOKE;
      FAPostingTypesOverview.RoundingFactor.SETVALUE(RoundingFactorOption);
      FAPostingTypesOverview.ShowMatrix.INVOKE;
    END;

    [Test]
    [HandlerFunctions(FAPostingTypesOvervMatrixPageHandler)]
    PROCEDURE FAPostingTypesOverviewRounding1@23();
    BEGIN
      // Check FA Posting Types Overview Matrix Page for Posted Values through Fixed Asset page with Rounding Option 1;
      Initialize;
      FAPostingTypesOverviewWithRoundingFactor(1);
    END;

    [Test]
    [HandlerFunctions(FAPostingTypesOvervMatrixPageHandler)]
    PROCEDURE FAPostingTypesOverviewRounding1000@32();
    BEGIN
      // Check FA Posting Types Overview Matrix Page for Posted Values through Fixed Asset page with Rounding Option 1000;
      Initialize;
      FAPostingTypesOverviewWithRoundingFactor(1000);
    END;

    [Test]
    [HandlerFunctions(FAPostingTypesOvervMatrixPageHandler)]
    PROCEDURE FAPostingTypesOverviewRounding1000000@66();
    BEGIN
      // Check FA Posting Types Overview Matrix Page for Posted Values through Fixed Asset page with Rounding Option 1000000;
      Initialize;
      FAPostingTypesOverviewWithRoundingFactor(1000000);
    END;

    LOCAL PROCEDURE FAPostingTypesOverviewWithRoundingFactor@33(RoundingFactor@1003 : Integer);
    VAR
      DepreciationBook@1008 : Record 5611;
      FADepreciationBook@1002 : Record 5612;
      FixedAsset@1001 : Record 5600;
      FixedAssetCard@1007 : TestPage 5600;
      FAPostingTypesOverview@1009 : TestPage 5662;
    BEGIN
      // Setup: Create Setup for Fixed Asset.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      // Exercise: Create and Post FA Journal Line with Random Values. Assign Fixed Asset No. and Rounding Amount in Global Variable.
      Amount := ROUND((LibraryRandom.RandDec(100,2) * 10000) / RoundingFactor,1);
      CreateAndPostFAJournalLine(FixedAsset."No.",DepreciationBook.Code,Amount);
      FANo := FixedAsset."No.";

      // Verify: Verify FA Posting Types Overview Matrix Page with Rounding Factor through FAPostingTypesOvervMatrixPageHandler.
      FixedAssetCard.OPENVIEW;
      FixedAssetCard.FILTER.SETFILTER("No.",FANo);
      FAPostingTypesOverview.TRAP;
      FixedAssetCard."Page FA Posting Types Overview".INVOKE;
      FAPostingTypesOverview.RoundingFactor.SETVALUE(RoundingFactor);
      FAPostingTypesOverview.ShowMatrix.INVOKE;
    END;

    LOCAL PROCEDURE CreateAndPostFAJournalLine@27(FixedAssetNo@1000 : Code[20];DepreciationBookCode@1002 : Code[10];GenLineAmount@1006 : Decimal);
    VAR
      FAJournalBatch@1003 : Record 5620;
      FAJournalLine@1001 : Record 5621;
      NoSeriesManagement@1004 : Codeunit 396;
      LibraryERM@1005 : Codeunit 131300;
    BEGIN
      // Take Random Values for Different fields.
      SelectFAJournalBatch(FAJournalBatch);
      LibraryFixedAsset.CreateFAJournalLine(FAJournalLine,FAJournalBatch."Journal Template Name",FAJournalBatch.Name);
      FAJournalLine.VALIDATE("Document No.",NoSeriesManagement.GetNextNo(FAJournalBatch."No. Series",WORKDATE,FALSE));
      FAJournalLine.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      FAJournalLine.VALIDATE("FA Posting Date",WORKDATE);
      FAJournalLine.VALIDATE("FA No.",FixedAssetNo);
      FAJournalLine.VALIDATE(Amount,GenLineAmount);
      FAJournalLine.VALIDATE("FA Posting Type",FAJournalLine."FA Posting Type"::"Acquisition Cost");
      FAJournalLine.MODIFY(TRUE);
      LibraryERM.PostFAJournalLine(FAJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostInsuranceJournal@17() JournalBatchName : Code[10];
    VAR
      Insurance@1004 : Record 5628;
      FixedAsset@1003 : Record 5600;
      InsuranceJournalBatch@1001 : Record 5634;
      InsuranceJournalLine@1000 : Record 5635;
    BEGIN
      LibraryFiscalYear.CreateFiscalYear;
      LibraryFiscalYear.CloseFiscalYear;

      LibraryFixedAsset.CreateInsurance(Insurance);
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);

      CreateInsuranceJournalBatch(InsuranceJournalBatch);
      JournalBatchName := InsuranceJournalBatch.Name;

      CreateInsuranceJournalLine(
        InsuranceJournalLine,InsuranceJournalBatch,FixedAsset."No.",Insurance."No.",LibraryFiscalYear.GetLastPostingDate(TRUE));
      CreateInsuranceJournalLine(
        InsuranceJournalLine,InsuranceJournalBatch,FixedAsset."No.",Insurance."No.",LibraryFiscalYear.GetLastPostingDate(TRUE));
      LibraryFixedAsset.PostInsuranceJournal(InsuranceJournalLine);
      LibraryUtility.GenerateGUID;  // Hack to fix problem with Generate GUID.
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseInvoice@129(FixedAssetNo@1000 : Code[20];DepreciationBookCode@1002 : Code[10]);
    VAR
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1007 : Record 39;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader,FixedAssetNo,DepreciationBookCode);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
    END;

    LOCAL PROCEDURE CreateCommentForInsurance@81(InsuranceNo@1000 : Code[20]) : Text[80];
    VAR
      CommentLine@1001 : Record 97;
    BEGIN
      LibraryFixedAsset.CreateCommentLine(CommentLine,CommentLine."Table Name"::Insurance,InsuranceNo);
      CommentLine.VALIDATE(
        Comment,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(CommentLine.FIELDNO(Comment),DATABASE::"Comment Line"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Comment Line",CommentLine.FIELDNO(Comment))));
      CommentLine.MODIFY(TRUE);
      EXIT(CommentLine.Comment);
    END;

    LOCAL PROCEDURE CreateDefaultDimension@101(VAR DimensionValue@1000 : Record 349;InsuranceNo@1003 : Code[20]);
    VAR
      Dimension@1001 : Record 348;
      DefaultDimension@1002 : Record 352;
      LibraryDimension@1004 : Codeunit 131001;
    BEGIN
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::Insurance,InsuranceNo,DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateFADepreciationBook@11(VAR FADepreciationBook@1000 : Record 5612;FANo@1002 : Code[20];FAPostingGroupCode@1003 : Code[10];DepreciationBookCode@1004 : Code[10]);
    BEGIN
      LibraryFixedAsset.CreateFADepreciationBook(FADepreciationBook,FANo,DepreciationBookCode);
      FADepreciationBook.VALIDATE("FA Posting Group",FAPostingGroupCode);
      FADepreciationBook.VALIDATE("Depreciation Starting Date",WORKDATE);

      // Depreciation Ending Date greater than Depreciation Starting Date, Using the Random Number for the Year.
      FADepreciationBook.VALIDATE("Depreciation Ending Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE));
      FADepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateInsuranceJournalBatch@15(VAR InsuranceJournalBatch@1000 : Record 5634);
    VAR
      InsuranceJournalTemplate@1001 : Record 5633;
    BEGIN
      InsuranceJournalTemplate.FINDFIRST;
      LibraryFixedAsset.CreateInsuranceJournalBatch(InsuranceJournalBatch,InsuranceJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateInsuranceJournalLine@1(VAR InsuranceJournalLine@1000 : Record 5635;InsuranceJournalBatch@1001 : Record 5634;FANo@1003 : Code[20];InsuranceNo@1004 : Code[20];PostingDate@1002 : Date);
    BEGIN
      LibraryFixedAsset.CreateInsuranceJournalLine(
        InsuranceJournalLine,InsuranceJournalBatch."Journal Template Name",InsuranceJournalBatch.Name);
      InsuranceJournalLine.VALIDATE("Posting Date",PostingDate);
      InsuranceJournalLine.VALIDATE("Document Type",InsuranceJournalLine."Document Type"::Invoice);
      InsuranceJournalLine.VALIDATE("Document No.",FANo); // Inputting FA No. as Document No is not important.
      InsuranceJournalLine.VALIDATE("Insurance No.",InsuranceNo);
      InsuranceJournalLine.VALIDATE("FA No.",FANo);
      InsuranceJournalLine.VALIDATE(Amount,LibraryRandom.RandDec(100,2));  // Use Random because value is not important.
      InsuranceJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJournalSetupDepreciation@62(VAR DepreciationBook@1000 : Record 5611);
    VAR
      FAJournalSetup@1001 : Record 5605;
    BEGIN
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAJournalSetup(FAJournalSetup,DepreciationBook.Code,'');
      UpdateFAJournalSetup(FAJournalSetup);
    END;

    LOCAL PROCEDURE CreatePostInsuranceJournalLine@3(InsuranceJournalBatch@1004 : Record 5634;FixedAssetNo@1000 : Code[20];InsuranceNo@1001 : Code[20]) Amount : Decimal;
    VAR
      InsuranceJournalLine@1003 : Record 5635;
    BEGIN
      CreateInsuranceJournalLine(InsuranceJournalLine,InsuranceJournalBatch,FixedAssetNo,InsuranceNo,WORKDATE);
      Amount := InsuranceJournalLine.Amount;
      LibraryFixedAsset.PostInsuranceJournal(InsuranceJournalLine);
      LibraryUtility.GenerateGUID;  // Hack to fix problem with Generate GUID.
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@24(VAR PurchaseHeader@1000 : Record 38);
    VAR
      Vendor@1002 : Record 23;
    BEGIN
      Vendor.SETRANGE("Currency Code",'');
      FindVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,Vendor."No.");

      // Using Random Code Generator for Vendor Invoice No.
      PurchaseHeader.VALIDATE(
        "Vendor Invoice No.",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(PurchaseHeader.FIELDNO("Vendor Invoice No."),DATABASE::"Purchase Header"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Vendor Invoice No."))));
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@25(VAR PurchaseLine@1000 : Record 39;VAR PurchaseHeader@1002 : Record 38;FANo@1003 : Code[20];DepreciationBookCode@1004 : Code[10]);
    VAR
      LibraryPurchase@1001 : Codeunit 130512;
    BEGIN
      // Using the Random Number Generator for Quantity and Amount.
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Fixed Asset",FANo,LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(1000,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindInsuranceRegister@20(VAR InsuranceRegister@1000 : Record 5636;JournalBatchName@1001 : Code[10]);
    BEGIN
      InsuranceRegister.SETRANGE("Journal Batch Name",JournalBatchName);
      InsuranceRegister.FINDFIRST;
    END;

    LOCAL PROCEDURE GetNumberCoverageLedgerEntries@31(FromEntryNo@1001 : Integer;ToEntryNo@1002 : Integer) : Integer;
    VAR
      InsCoverageLedgerEntry@1000 : Record 5629;
    BEGIN
      InsCoverageLedgerEntry.SETRANGE("Entry No.",FromEntryNo,ToEntryNo);
      EXIT(InsCoverageLedgerEntry.COUNT);
    END;

    LOCAL PROCEDURE IndexationAndIntegrationInBook@10(DepreciationBookCode@1000 : Code[10]);
    VAR
      DepreciationBook@1002 : Record 5611;
    BEGIN
      DepreciationBook.GET(DepreciationBookCode);
      DepreciationBook.VALIDATE("G/L Integration - Acq. Cost",TRUE);
      DepreciationBook.VALIDATE("G/L Integration - Depreciation",TRUE);
      DepreciationBook.VALIDATE("G/L Integration - Write-Down",TRUE);
      DepreciationBook.VALIDATE("G/L Integration - Appreciation",TRUE);
      DepreciationBook.VALIDATE("G/L Integration - Disposal",TRUE);
      DepreciationBook.VALIDATE("Allow Indexation",TRUE);
      DepreciationBook.VALIDATE("G/L Integration - Custom 1",TRUE);
      DepreciationBook.VALIDATE("G/L Integration - Custom 2",TRUE);
      DepreciationBook.VALIDATE("G/L Integration - Maintenance",TRUE);
      DepreciationBook.VALIDATE("Use Same FA+G/L Posting Dates",TRUE);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyAmountsOnInsurance@115(VAR Insurance@1000 : Record 5628);
    BEGIN
      // Use Random for Annual Premium and Policy Coverage because values are not important.
      Insurance.VALIDATE("Annual Premium",LibraryRandom.RandDec(10000,2));
      Insurance.VALIDATE("Policy Coverage",LibraryRandom.RandDec(10000,2));
      Insurance.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunIndexInsurance@60(No@1002 : Code[20]) IndexFigure : Integer;
    VAR
      FixedAsset@1001 : Record 5600;
      IndexInsurance@1000 : Report 5691;
    BEGIN
      CLEAR(IndexInsurance);
      FixedAsset.SETRANGE("No.",No);
      IndexInsurance.SETTABLEVIEW(FixedAsset);

      // Using the Random Number Generator for New Index Figure.
      IndexFigure := LibraryRandom.RandInt(10);
      IndexInsurance.InitializeRequest(No,No,WORKDATE,IndexFigure);
      IndexInsurance.USEREQUESTPAGE(FALSE);
      IndexInsurance.RUN;
    END;

    LOCAL PROCEDURE RunDateCompressInsuranceLedger@29();
    VAR
      DateCompressInsuranceLedger@1000 : Report 5697;
    BEGIN
      CLEAR(DateCompressInsuranceLedger);
      DateCompressInsuranceLedger.RUN;
    END;

    LOCAL PROCEDURE SelectFAJournalBatch@37(VAR FAJournalBatch@1000 : Record 5620);
    VAR
      FAJournalTemplate@1004 : Record 5619;
      FAJournalLine@1001 : Record 5621;
      NoSeries@1006 : Record 308;
      NoSeriesLine@1008 : Record 309;
    BEGIN
      // Delete All FA General Line with Selected Batch.
      LibraryUtility.CreateNoSeries(NoSeries,TRUE,TRUE,FALSE);
      LibraryUtility.CreateNoSeriesLine(NoSeriesLine,NoSeries.Code,'','');
      FAJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryFixedAsset.FindFAJournalTemplate(FAJournalTemplate);
      LibraryFixedAsset.FindFAJournalBatch(FAJournalBatch,FAJournalTemplate.Name);
      FAJournalBatch.VALIDATE("No. Series",NoSeries.Code);
      FAJournalBatch.MODIFY(TRUE);
      FAJournalLine.SETRANGE("Journal Template Name",FAJournalBatch."Journal Template Name");
      FAJournalLine.SETRANGE("Journal Batch Name",FAJournalBatch.Name);
      FAJournalLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE UpdateFAJournalSetup@134(VAR FAJournalSetup@1000 : Record 5605);
    VAR
      FAJournalSetup2@1005 : Record 5605;
    BEGIN
      FAJournalSetup2.SETRANGE("Depreciation Book Code",LibraryFixedAsset.GetDefaultDeprBook);
      FAJournalSetup2.FINDFIRST;
      FAJournalSetup.TRANSFERFIELDS(FAJournalSetup2,FALSE);
      FAJournalSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyCommentForInsurance@82(InsuranceNo@1000 : Code[20];Comment@1001 : Text[80]);
    VAR
      CommentLine@1002 : Record 97;
    BEGIN
      CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Insurance);
      CommentLine.SETRANGE("No.",InsuranceNo);
      CommentLine.FINDFIRST;
      CommentLine.TESTFIELD(Comment,Comment);
    END;

    LOCAL PROCEDURE VerifyCoverageLedgerEntry@9(FANo@1000 : Code[20];Amount@1001 : ARRAY [2] OF Decimal;InsuranceNo@1002 : Code[20]);
    VAR
      InsCoverageLedgerEntry@1004 : Record 5629;
      Count@1003 : Integer;
    BEGIN
      InsCoverageLedgerEntry.SETRANGE("FA No.",FANo);
      InsCoverageLedgerEntry.FINDSET;
      Count := 1;
      REPEAT
        InsCoverageLedgerEntry.TESTFIELD("Insurance No.",InsuranceNo);
        InsCoverageLedgerEntry.TESTFIELD("Document Type",InsCoverageLedgerEntry."Document Type"::Invoice);
        InsCoverageLedgerEntry.TESTFIELD(Amount,Amount[Count]);
        Count += 1;
      UNTIL InsCoverageLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDefaultDimension@102(DimensionValue@1002 : Record 349;InsuranceNo@1001 : Code[20]);
    VAR
      DefaultDimension@1003 : Record 352;
      LibraryDimension@1000 : Codeunit 131001;
    BEGIN
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Insurance,InsuranceNo);
      DefaultDimension.TESTFIELD("Dimension Code",DimensionValue."Dimension Code");
      DefaultDimension.TESTFIELD("Dimension Value Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE VerifyInsuranceEntry@13(FANo@1000 : Code[20];InsuranceNo@1001 : Code[20];Amount@1002 : Decimal;IndexFigure@1003 : Decimal);
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      InsuranceJournalLine@1005 : Record 5635;
      InsuranceJournalLineAmount@1006 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      InsuranceJournalLine.SETRANGE("FA No.",FANo);
      InsuranceJournalLine.SETRANGE("Insurance No.",InsuranceNo);
      InsuranceJournalLine.FINDFIRST;
      InsuranceJournalLineAmount := Amount - (Amount * IndexFigure / 100);
      Assert.AreNearlyEqual(
        -InsuranceJournalLineAmount,InsuranceJournalLine.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(InsuranceAmountError,InsuranceJournalLine.FIELDCAPTION(Amount)));
    END;

    [PageHandler]
    PROCEDURE InsuranceStatisticsPageHadler@19(VAR InsuranceStatistics@1000 : Page 5646);
    BEGIN
      Insurance2.INIT;

      // Assign Global Variable.
      InsuranceStatistics.GETRECORD(Insurance2);
    END;

    [RequestPageHandler]
    PROCEDURE CompressInsuranceLedgerHandler@34(VAR DateCompressInsuranceLedger@1000 : TestRequestPage 5697);
    VAR
      DateComprRegister@1001 : Record 87;
    BEGIN
      DateCompressInsuranceLedger.StartingDate.SETVALUE(StartingDate);
      DateCompressInsuranceLedger.EndingDate.SETVALUE(EndingDate);
      DateCompressInsuranceLedger.PeriodLength.SETVALUE(DateComprRegister."Period Length"::Year);
      DateCompressInsuranceLedger.OnlyIndexEntries.SETVALUE(FALSE);
      DateCompressInsuranceLedger.DocumentNo.SETVALUE(FALSE);
      DateCompressInsuranceLedger.RetainDimensions.ASSISTEDIT;
      DateCompressInsuranceLedger.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DimensionSelectionHandler@67(VAR DimensionSelectionMultiple@1000 : TestPage 562);
    BEGIN
      // Set Dimension Selection Multiple for all the rows.
      DimensionSelectionMultiple.FIRST;
      REPEAT
        DimensionSelectionMultiple.Selected.SETVALUE(TRUE);
      UNTIL NOT DimensionSelectionMultiple.NEXT;
      DimensionSelectionMultiple.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@72(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE FAPostingTypesOvervMatrixPageHandler@28(VAR FAPostingTypesOvervMatrix@1000 : TestPage 9277);
    BEGIN
      FAPostingTypesOvervMatrix.FILTER.SETFILTER("FA No.",FANo);
      IF Amount = 0 THEN
        FAPostingTypesOvervMatrix.Field1.ASSERTEQUALS('')
      ELSE
        FAPostingTypesOvervMatrix.Field1.ASSERTEQUALS(Amount);
    END;

    LOCAL PROCEDURE FindVendor@55(VAR Vendor@1000 : Record 23);
    BEGIN
      // Filter Vendor so that errors are not generated due to mandatory fields.
      Vendor.SETFILTER("Vendor Posting Group",'<>''''');
      Vendor.SETFILTER("Gen. Bus. Posting Group",'<>''''');
      Vendor.SETRANGE(Blocked,Vendor.Blocked::" ");
      Vendor.FINDFIRST;
    END;

    BEGIN
    {
      // [FEATURE] [Fixed Asset] [Insurance]
      Test for Fixed Asset:
       1. Test that Insurance Journal Posted successfully with different batch jobs.
       2. Test Creation of Insurance.
       3. Test Annual Premium Amount successfully updated on Insurance.
       4. Test Comment creation for Insurance.
       5. Test Comment Deletion for Insurance.
       6. Test Default Dimension Creation for Insurance.
       7. Test Annual Premium and Policy Coverage on Insurance Statistics page.
       8. Test deletion of Insurance.
       9. Test the Generates correct entry in Insurance Journal after executing the Index Insurance.
      10. Test error occurs on Running Date Compress Insurance Ledger Report without Starting and Ending Dates.
      11. Test and verify Date Compress Insurance Ledger Report functionality.
      12. Check Total Value on Total Value Insured Page through Fixed Asset after Posting Insurance Journal.
      13. Check FA Posting Types Overview Matrix Page for Posted Values through Fixed Asset page with Rounding Option None;
      14. Check FA Posting Types Overview Matrix Page for Posted Values through Fixed Asset page with Rounding Option 1;
      15. Check FA Posting Types Overview Matrix Page for Posted Values through Fixed Asset page with Rounding Option 1000;
      16. Check FA Posting Types Overview Matrix Page for Posted Values through Fixed Asset page with Rounding Option 1000000;

      TFS_TS_ID = 206076
      Covers Test cases:
      ---------------------------------------------------------------
      Test Function Name                                      TFS ID
      ---------------------------------------------------------------
      InsuranceJournalDifferentBatch                          141389

      TFS_TS_ID = 217006
      Covers Test cases:
      -----------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                        TFS ID
      -----------------------------------------------------------------------------------------------------------------
      CreationOfInsurance, UpdationOfInsurance, CommentCreationForInsurance, CommentDeletionForInsurance
      DefaultDimensionForInsurance, InsuranceStatistics, DeletionOfInsurance                                    131124

      TFS_TS_ID = 217009
      Covers Test cases:
      ------------------------------------------------------------------------------------
      Test Function Name                                                         TFS ID
      ------------------------------------------------------------------------------------
      IndexInsurance                                                             129074

      TFS_TS_ID = 261074
      Covers Test cases:
      ------------------------------------------------------------------------------------
      Test Function Name                                                         TFS ID
      ------------------------------------------------------------------------------------
      DateCompressInsuranceLedgerDatesError,DateCompressInsuranceLedgerBatch     129079

      TFS_TS_ID = 262327
      Covers Test cases:
      ------------------------------------------------------------------------------------
      Test Function Name                                                         TFS ID
      ------------------------------------------------------------------------------------
      TotalValueInsuredWithFixedAsset                                         128877
      FAPostingTypesOverviewMatrixRoundingNone
      FAPostingTypesOverviewRounding1,FAPostingTypesOverviewRounding1000
      FAPostingTypesOverviewRounding1000000                                   128878
    }
    END.
  }
}

