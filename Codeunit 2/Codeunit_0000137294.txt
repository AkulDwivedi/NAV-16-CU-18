OBJECT Codeunit 137294 SCM Inventory Miscellaneous II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1006 : Codeunit 130000;
      LibraryCosting@1021 : Codeunit 132200;
      LibraryERM@1027 : Codeunit 131300;
      LibraryInventory@1003 : Codeunit 132201;
      LibraryItemTracking@1033 : Codeunit 130502;
      LibraryManufacturing@1015 : Codeunit 132202;
      LibraryPlanning@1011 : Codeunit 132203;
      LibraryPurchase@1005 : Codeunit 130512;
      LibrarySales@1018 : Codeunit 130509;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryVariableStorage@1010 : Codeunit 131004;
      LibraryWarehouse@1004 : Codeunit 132204;
      LibraryAssembly@1007 : Codeunit 132207;
      LibraryRandom@1001 : Codeunit 130440;
      RegisterJournalLine@1009 : TextConst 'ENU=Do you want to register the journal lines?';
      RegisterJournalLineMessage@1008 : TextConst 'ENU=The journal lines were successfully registered.You are now';
      UpdatePhysicalInventoryError@1014 : TextConst 'ENU=You cannot change the Qty. (Phys. Inventory) because this item journal line is created from warehouse entries';
      isInitialized@1000 : Boolean;
      WhseItemLineRegister@1017 : TextConst 'ENU=Do you want to register the journal lines?';
      WhseItemLineRegistered@1016 : TextConst 'ENU=The journal lines were successfully registered.';
      CostMustBeSame@1024 : TextConst 'ENU=Cost must be Equal.';
      FirmPlannedProdMessage@1026 : TextConst 'ENU=Firm Planned Prod. Order';
      CreatePutAwayMessage@1019 : TextConst 'ENU=There is nothing to create.';
      ShippingAdviceCnfMsg@1020 : TextConst 'ENU=Do you want to change %1 in all related records in warehouse accordingly?';
      PickActivityMessage@1023 : TextConst 'ENU=Pick activity no. %1 has been created.';
      WhseShipmentErrorMessage@1025 : TextConst 'ENU=The warehouse shipment was not created because the Shipping Advice field is set to Complete';
      AvailabilityWarning@1012 : TextConst 'ENU=There are availability warnings on one or more lines.';
      WhseRegisterLotError@1013 : TextConst 'ENU=Lot No. %1 is not available on inventory or it has already been reserved for another document.';
      MovmntActivityCreatedMessage@1028 : TextConst 'ENU=Movement activity no. %1 has been created.';
      WhseMovmntRegisterError@1029 : TextConst 'ENU=Quantity (Base) available must not be less than';
      AutoFillQtyMessage@1030 : TextConst 'ENU=Quantity available to pick is not enough to fill in all the lines.';
      InvPickCreatedMessage@1031 : TextConst 'ENU=Number of Invt. Pick activities created: 1 out of a total of 1.';
      NoOfPicksCreatedMsg@1032 : TextConst 'ENU=Number of Invt. Pick activities created';

    [Test]
    PROCEDURE PhysInventoryJournalWithNonWMSLocation@1();
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      // Verify Item can be adjusted through Physical Inventory Journal with Non-Warehouse Location.

      // Setup: Create Physical Inventory Journal and Calculate Inventory.
      Initialize;
      CalculateInventoryOnPhysInventoryJournal(ItemJournalLine);

      // Exercise: Update Quantity(Phys. Inventory) on Physical Inventory Journal.
      FindAndUpdateItemJournalLine(ItemJournalLine);

      // Verify: Verify Quantity on Physical Inventory Journal.
      ItemJournalLine.TESTFIELD(Quantity,ItemJournalLine."Qty. (Phys. Inventory)" - ItemJournalLine."Qty. (Calculated)");
    END;

    [Test]
    PROCEDURE PostPhysInventoryJournalWithNonWMSLocation@29();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Verify Physical Inventory Ledger after updating Qty(Physical Inventory) on Physical Inventory Journal with Non-Warehouse Location.

      // Setup: Create Physical Inventory Journal, Calculate Inventory and update Quantity(Phys. Inventory).
      Initialize;
      CalculateInventoryOnPhysInventoryJournal(ItemJournalLine);
      FindAndUpdateItemJournalLine(ItemJournalLine);

      // Exercise: Post Phys Inventory Journal.
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      // Verify: Verify Quantity on Physical Inventory Ledger.
      VerifyPhysInventoryLedger(ItemJournalLine);
    END;

    [Test]
    PROCEDURE WhsePhysInventoryJournalWithWMSLocation@10();
    VAR
      Item@1001 : Record 27;
      Location@1003 : Record 14;
      PurchaseLine@1002 : Record 39;
      WarehouseJournalLine@1000 : Record 7311;
    BEGIN
      // Verify Item can be adjusted through Warehouse Physical Inventory Journal with Warehouse Location.

      // Setup: Create Warehouse Physical Inventory Journal and Calculate Inventory.
      Initialize;
      CreateWarehouseLocation(Location);
      CreateItem(Item,Item."Replenishment System"::Purchase,Item."Reordering Policy"::" ");
      CreatePurchaseOrder(PurchaseLine,Item."No.",Location.Code);
      CalculateInventoryOnWhsePhysInventoryJournal(WarehouseJournalLine,PurchaseLine,Location.Code);

      // Exercise: Update Quantity(Phys. Inventory) on Warehouse Physical Inventory Journal.
      FindAndUpdateWarehouseJournalLine(WarehouseJournalLine);

      // Verify: Verify Quantity on Warehouse Physical Inventory Journal.
      WarehouseJournalLine.TESTFIELD(
        Quantity,WarehouseJournalLine."Qty. (Phys. Inventory)" - WarehouseJournalLine."Qty. (Calculated)");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler)]
    PROCEDURE PhysInventoryQuantityErrorWithWMSLocation@12();
    VAR
      Item@1002 : Record 27;
      Location@1000 : Record 14;
      ItemJournalLine@1003 : Record 83;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Verify Error when Item is to be adjusted through Physical Inventory Journal with Warehouse Location.

      // Setup: Create Physical Inventory Journal With Warehouse Location.
      Initialize;
      LibraryVariableStorage.Enqueue(RegisterJournalLine);
      LibraryVariableStorage.Enqueue(RegisterJournalLineMessage);
      CreateWarehouseLocation(Location);
      CreateItem(Item,Item."Replenishment System"::Purchase,Item."Reordering Policy"::" ");
      CreatePurchaseOrder(PurchaseLine,Item."No.",Location.Code);
      CreatePhysInventoryJournalWithWMSLocation(ItemJournalLine,PurchaseLine,Location.Code);

      // Exercise: Update Quantity(Phys. Inventory) on Physical Inventory Journal.
      ASSERTERROR OpenPhysInventoryJournalToUpdateQuantity(ItemJournalLine."Journal Batch Name");

      // Verify: Verify Error when Item with Warehouse Location is to be adjusted through Phys Inventory Journal.
      Assert.ExpectedError(UpdatePhysicalInventoryError);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler)]
    PROCEDURE PostPhysInventoryJournalWithWMSLocation@8();
    VAR
      Item@1000 : Record 27;
      Location@1001 : Record 14;
      PurchaseLine@1002 : Record 39;
      ItemJournalLine@1003 : Record 83;
    BEGIN
      // Verify Physical Inventory Ledger after posting Physical Inventory Journal with Warehouse Location.

      // Setup: Create Physical Inventory Journal With Warehouse Location.
      Initialize;
      LibraryVariableStorage.Enqueue(RegisterJournalLine);
      LibraryVariableStorage.Enqueue(RegisterJournalLineMessage);
      CreateWarehouseLocation(Location);
      CreateItem(Item,Item."Replenishment System"::Purchase,Item."Reordering Policy"::" ");
      CreatePurchaseOrder(PurchaseLine,Item."No.",Location.Code);
      CreatePhysInventoryJournalWithWMSLocation(ItemJournalLine,PurchaseLine,Location.Code);

      // Exercise: Post Physical Inventory Journal.
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      // Verify: Verify Quantity on Physical Inventory Ledger.
      VerifyPhysInventoryLedger(ItemJournalLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PlanningLinesForSalesOrder@14();
    VAR
      Item@1001 : Record 27;
      RequisitionLine@1000 : Record 246;
      SalesLine@1017 : Record 37;
    BEGIN
      // Verify Planning Lines generated through Calculate Regenerative Plan after creating Sales Order for Production Item with Warehouse Location.

      // Setup.
      Initialize;
      SetupForPlanningWorksheet(SalesLine);
      Item.GET(SalesLine."No.");

      // Exercise: Calculate Regenerative Plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,CALCDATE('<CY>',WORKDATE));  // Dates based on WORKDATE.

      // Verify: Verify Calculated Planning Lines.
      VerifyRequisitionLine(
        SalesLine."No.",SalesLine."Location Code",SalesLine.Quantity,RequisitionLine."Action Message"::New,TRUE,
        RequisitionLine."Ref. Order Status"::Planned);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PickForProductionOrder@18();
    VAR
      Item@1005 : Record 27;
      ProductionBOMLine@1000 : Record 99000772;
      ProductionOrder@1003 : Record 5405;
      ProdOrderLine@1001 : Record 5406;
      SalesLine@1002 : Record 37;
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      // Verify Pick can be created from Production Order.

      // Setup: Create Released Production Order through Planning Worksheet.
      Initialize;
      SetupForPlanningWorksheet(SalesLine);
      Item.GET(SalesLine."No.");
      FindProductionBOMLine(ProductionBOMLine,Item."Production BOM No.");
      CalcRegenPlanAndCarryOutActionMsg(Item,SalesLine."Location Code");
      FindProductionOrderLine(ProdOrderLine,ProdOrderLine.Status::"Firm Planned",SalesLine."No.",SalesLine."Location Code");
      LibraryManufacturing.ChangeStatusFirmPlanToReleased(
        ProdOrderLine."Prod. Order No.",ProdOrderLine.Status::"Firm Planned",ProdOrderLine.Status::Released);
      FindProductionOrderLine(ProdOrderLine,ProdOrderLine.Status::Released,SalesLine."No.",SalesLine."Location Code");
      ProductionOrder.GET(ProdOrderLine.Status,ProdOrderLine."Prod. Order No.");
      ProductionOrder.SetHideValidationDialog(TRUE);

      // Exercise: Create Pick from Released Production Order.
      ProductionOrder.CreatePick(USERID,ProductionOrder.Status::Released,FALSE,FALSE,FALSE);  // False is for SetBreakBulkFilter, DoNotFillQtyToHandle, PrintDocument Booleans.

      // Verify: Verify Pick is created from Production Order.
      FindWarehouseActivityLine(
        WarehouseActivityLine,DATABASE::"Prod. Order Component",ProductionOrder."No.",WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityLine.TESTFIELD("Item No.",ProductionBOMLine."No.");
      WarehouseActivityLine.TESTFIELD(Quantity,SalesLine.Quantity);
      WarehouseActivityLine.TESTFIELD("Location Code",SalesLine."Location Code");
    END;

    [Test]
    PROCEDURE PlanningLinesForReleasedProductionOrder@19();
    VAR
      Item@1000 : Record 27;
      ProductionBOMLine@1001 : Record 99000772;
      RequisitionLine@1004 : Record 246;
    BEGIN
      // Verify Planning Lines generated through Calculate Regenerative Plan after creating Released Production Order.

      // Setup: Create Production Item. Create Released Production Order.
      Initialize;
      CreateProductionItem(Item);
      FindProductionBOMLine(ProductionBOMLine,Item."Production BOM No.");
      CreateAndRefreshProductionOrder(ProductionBOMLine."No.");
      Item.GET(ProductionBOMLine."No.");

      // Exercise.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,CALCDATE('<CY>',WORKDATE));  // Dates based on WORKDATE.

      // Verify: Verify Calculated Planning Lines.
      VerifyRequisitionLine(
        ProductionBOMLine."No.",'',0,RequisitionLine."Action Message"::Cancel,FALSE,RequisitionLine."Ref. Order Status"::Released);
    END;

    [Test]
    [HandlerFunctions(CreateOrderFromSalesPageHandler,MessageHandler)]
    PROCEDURE UnitCostOnSalesOrderUsingProdOrderAndReservation@22();
    VAR
      ProductionOrder@1003 : Record 5405;
      SalesHeader@1004 : Record 36;
      SalesReceivablesSetup@1005 : Record 311;
      SalesLine@1002 : Record 37;
      ProdOrderNo@1000 : Code[20];
      ItemNo@1009 : Code[20];
    BEGIN
      // Verify Unit Cost on Sales Line using Production Order and Reservation.

      // Setup : Update Sales and Receivables Setup, post Item Journal Line, create Sales Order and create Production Order with another Sales Order.
      Initialize;
      LibraryVariableStorage.Enqueue(FirmPlannedProdMessage);
      SalesReceivablesSetup.GET;
      UpdateSalesReceivableSetup(SalesReceivablesSetup."Credit Warnings"::"No Warning",FALSE);
      ItemNo := CreateItemWithRoutingAndBOM;
      PostItemJournalLine(ItemNo,LibraryRandom.RandInt(100),'');  // Using Random value for Quantity.

      // Create Sales Order and Auto Reserve.
      CreateSalesOrderUsingItemInventory(SalesHeader,ItemNo);
      AutoReserveSalesLine(SalesHeader);
      CreateSalesOrderUsingItemInventory(SalesHeader,ItemNo);
      LibraryPlanning.CreateProdOrderUsingPlanning(ProductionOrder,ProductionOrder.Status::"Firm Planned",SalesHeader."No.",ItemNo);

      // Exercise: Change Status to Released from Firm Planned using Update Unit Cost as TRUE.
      ProdOrderNo :=
        LibraryManufacturing.ChangeStatusFirmPlanToReleased(
          ProductionOrder."No.",ProductionOrder.Status,ProductionOrder.Status::Released);

      // Verify : Verify Unit Cost on Sales Line.
      FindSalesLine(SalesLine,SalesHeader);
      VerifyProdComponentUnitCost(ProductionOrder.Status::Released,ProdOrderNo,SalesLine."Unit Cost");

      // Tear down.
      UpdateSalesReceivableSetup(SalesReceivablesSetup."Credit Warnings",SalesReceivablesSetup."Stockout Warning");
    END;

    [Test]
    PROCEDURE AdjustmentUsingProdOrderConsumptionAndOutput@44();
    VAR
      ItemJournalBatch@1002 : Record 233;
      SalesReceivablesSetup@1000 : Record 311;
      ProdOrderNo@1001 : Code[20];
      ItemNo@1003 : Code[20];
    BEGIN
      // Verify Cost Amount Actual in Item Ledger Entry after Adjustment.

      // Setup : Update Sales and Receivables Setup, create Production Order post Item Journal Line.
      Initialize;
      SalesReceivablesSetup.GET;
      UpdateSalesReceivableSetup(SalesReceivablesSetup."Credit Warnings"::"No Warning",FALSE);
      ItemNo := CreateItemWithRoutingAndBOM;
      ProdOrderNo := CreateAndRefreshProductionOrder(ItemNo);

      // Create Consumption Journal, Delete Released production Order line and Post Consumption Journal.
      LibraryInventory.CreateItemJournal(ItemJournalBatch,'',ItemJournalBatch."Template Type"::Consumption,ProdOrderNo);
      DeleteProdOrderLine(ProdOrderNo);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // Create and Post Output Journal.
      LibraryInventory.CreateItemJournal(ItemJournalBatch,ItemNo,ItemJournalBatch."Template Type"::Output,ProdOrderNo);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProdOrderNo);

      // Exercise.
      LibraryCosting.AdjustCostItemEntries(ItemNo,'');

      // Verify : Verify Cost Amount Actual in Item Ledger Entry after Adjustment.
      VerifyUnitCostOnItemAfterAdjustment(ProdOrderNo,ItemNo);

      // Tear down.
      UpdateSalesReceivableSetup(SalesReceivablesSetup."Credit Warnings",SalesReceivablesSetup."Stockout Warning");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CreateInvPickFromSalesOrder@11();
    VAR
      SalesLine@1005 : Record 37;
      Location@1007 : Record 14;
      WarehouseActivityHeader@1000 : Record 5766;
      ShippingAdvice@1006 : 'Complete';
    BEGIN
      // Verify message during used option Create Inv. Pick/Put Away on Sales Order.

      // Setup: Create Warehouse Location, Sales Order and Release.
      Initialize;
      CreateWarehouseLocation(Location);
      SetupForCreatePickOnSalesDocument(SalesLine,Location.Code,ShippingAdvice::Complete,2);
      LibraryVariableStorage.Enqueue(CreatePutAwayMessage);

      // Exercise: Check Inventory Pick Away on Sales Order.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Prod. Consumption",SalesLine."Document No.",TRUE,FALSE,FALSE);

      // Verify: Verify message during used option Create Inv. Pick/Put Away on Sales Order. Verification done by Message Handler.
    END;

    [Test]
    PROCEDURE CreatePickFromSalesOrder@97();
    VAR
      Location@1007 : Record 14;
      SalesLine@1009 : Record 37;
      WarehouseShipmentHeader@1000 : Record 7320;
      ShippingAdvice@1011 : 'Partial';
    BEGIN
      // Verify Warehouse Activity Line after create Pick from Whse. Shipment created from Sales Order.

      // Setup: Create Warehouse Location, Sales Order and Release.
      Initialize;
      CreateWarehouseLocation(Location);
      SetupForCreatePickOnSalesDocument(SalesLine,Location.Code,ShippingAdvice::Partial,1);

      // Exercise.
      CreatePick(WarehouseShipmentHeader,Location.Code,SalesLine."Document No.");

      // Verify: Verify Warehouse Activity Line.
      VerifyWhseActivityLine(SalesLine,SalesLine.Quantity);
    END;

    [Test]
    PROCEDURE ErrorOnCreationOfPickForOutStockItem@73();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1003 : Record 36;
      Location@1007 : Record 14;
    BEGIN
      // Verify error while creating Whse. Shipment from Sales Order for non stock Item.

      // Setup: Create Warehouse Location, create and Release Sales Order.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase,Item."Reordering Policy"::" ");
      CreateWarehouseLocation(Location);
      LibraryVariableStorage.Enqueue(ShippingAdviceCnfMsg);  // Enqueue for Message Handler.
      CreateSalesOrderWithShippingAdvice(SalesHeader,Location.Code,SalesHeader."Shipping Advice"::Complete,Item."No.",1);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // Exercise.
      ASSERTERROR LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // Verify: Verify error while creating Whse. Shipment from Sales Order.
      Assert.ExpectedError(WhseShipmentErrorMessage);
    END;

    [Test]
    PROCEDURE CreatePickForInStockItemOnSalesOrder@66();
    VAR
      Location@1007 : Record 14;
      SalesLine@1009 : Record 37;
      WarehouseShipmentHeader@1000 : Record 7320;
      ShippingAdvice@1011 : 'Partial';
    BEGIN
      // Verify Warehouse Activity Line after create Pick from Whse. Shipment created from Sales Order which have 1 InStock Item and 1 OutStock Item with Partial Shipping Advice.

      // Setup: Create Warehouse Location, Sales Order and Release.
      Initialize;
      CreateWarehouseLocation(Location);
      SetupForCreatePickOnSalesDocument(SalesLine,Location.Code,ShippingAdvice::Partial,3);

      // Exercise.
      CreatePick(WarehouseShipmentHeader,Location.Code,SalesLine."Document No.");

      // Verify: Verify Warehouse Activity Line.
      VerifyWhseActivityLine(SalesLine,SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler,ItemTrackingLinesPageHandler)]
    PROCEDURE CreateWhseRcptAndCalcPhysInvWithIT@65();
    VAR
      Location@1000 : Record 14;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      ItemJournalLine@1006 : Record 83;
      WarehouseEntry@1005 : Record 7312;
      Quantity@1004 : Decimal;
    BEGIN
      // Verify Warehouse Entry with Item Tracking.

      // Setup: Create Location, create and release Purchase Order with Item Tracking and create Warehouse Receipt.
      Initialize;
      CreateWarehouseLocation(Location);
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,CreateAndModifyTrackedItem(0),Location.Code);  // 0 used for update Expiration Date.
      LibraryVariableStorage.Enqueue(RegisterJournalLine);
      LibraryVariableStorage.Enqueue(RegisterJournalLineMessage);
      Quantity := CreatePhysInventoryJournalWithWMSLocation(ItemJournalLine,PurchaseLine,Location.Code);

      // Exercise: Post Physical Inventory Journal.
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      // Verify: Verify Warehouse Entry with Item Tracking.
      VerifyWarehouseEntries(
        ItemJournalLine."Item No.",ItemJournalLine."Location Code",'',Quantity,WarehouseEntry."Entry Type"::"Positive Adjmt.");
    END;

    [Test]
    PROCEDURE ReservedQuantityInSalesOrder@52();
    VAR
      Bin@1001 : Record 7354;
      Bin2@1006 : Record 7354;
      Item@1002 : Record 27;
      ItemJournalLine@1004 : Record 83;
      Location@1000 : Record 14;
      Location2@1003 : Record 14;
      Location3@1009 : Record 14;
      SalesLine@1014 : Record 37;
      TransferLine@1008 : Record 5741;
      DocumentNo@1005 : Code[20];
    BEGIN
      // Verify Reserve Quantity in Sales Order after Positive Adjustment,Transfer order,Nagative Adjustment on Item.

      // Setup : Create Location,Create Item,Positive Adjustment,Transfer order,Nagative Adjustment on Created Item.
      Initialize;
      CreateLocationWithMultipleBin(Location,Bin,Bin2);
      LibraryInventory.CreateItem(Item);
      CreateAndPostItemJournalLine(
        ItemJournalLine,Item."No.",Location.Code,Bin.Code,ItemJournalLine."Entry Type"::"Positive Adjmt.",
        LibraryRandom.RandDecInDecimalRange(100,150,2));  // Large Quantity required for test.
      DocumentNo := ItemJournalLine."Document No.";
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location2);
      LibraryWarehouse.CreateInTransitLocation(Location3);
      CreateTransferOrderAndPick(TransferLine,Bin2.Code,Location.Code,Location2.Code,Location3.Code,Item."No.");
      CreateAndPostItemJournalLine(
        ItemJournalLine,Item."No.",Location.Code,Bin.Code,ItemJournalLine."Entry Type"::"Negative Adjmt.",
        LibraryRandom.RandDecInDecimalRange(50,100,2) - TransferLine.Quantity);

      // Excercise : Create Sales Order,Reserve Quantity As Auto Reserve.
      CreateSalesOrder(SalesLine,Location.Code,Item."No.",LibraryRandom.RandDec(10,2));  // Using Random value for Sales Line Quantity.
      LibrarySales.AutoReserveSalesLine(SalesLine);

      // Verify : Verify Reserve Quantity with Item Ledger Entry.
      VerifyReserveQuantity(
        Item."No.",DocumentNo,ItemJournalLine."Location Code",ItemJournalLine."Entry Type"::"Positive Adjmt.",SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PickCreationMessageFromWhseShipment@55();
    VAR
      SalesHeader@1005 : Record 36;
      WarehouseShipmentHeader@1009 : Record 7320;
    BEGIN
      // Verify Message while pick created from Warehouse Shipment Header.

      // Setup: Create Put-away, Warehouse Receipt and Released Sales Order.
      Initialize;
      SetupForWarehousePickPutAway(SalesHeader);

      // Exercise.
      CreatePick(WarehouseShipmentHeader,SalesHeader."Location Code",SalesHeader."No.");

      // Verify: Verify pick creation message. Done by MessageHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE WarehousePickWithIT@113();
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1007 : Record 37;
      WarehouseShipmentHeader@1009 : Record 7320;
    BEGIN
      // Verify Warehouse Activity Line after pick created from Warehouse Shipment Header.

      // Setup: Setup. Create Put-away, Warehouse Receipt and Released Sales Order.
      Initialize;
      SetupForWarehousePickPutAway(SalesHeader);
      FindSalesLine(SalesLine,SalesHeader);

      // Exercise.
      CreatePick(WarehouseShipmentHeader,SalesHeader."Location Code",SalesHeader."No.");

      // Verify: Verify Warehouse Activity Line
      VerifyWhseActivityLine(SalesLine,SalesLine.Quantity / 2);  // verify Quantity on single Lot.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,PickSelectionPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ShowWarehouseShipementFromPickWorksheet@76();
    VAR
      SalesHeader@1000 : Record 36;
      WarehouseShipmentHeader@1002 : Record 7320;
    BEGIN
      // Verify Get Warehouse Shipment form Pick Worksheet.

      // Setup: Create Put-away, Warehouse Receipt, Released Sales Order and Released Warehouse Shipment.
      Initialize;
      SetupForWarehousePickPutAway(SalesHeader);
      CreateAndReleaseWarehouseShipment(WarehouseShipmentHeader,SalesHeader."No.",SalesHeader."Location Code");

      // Exercise.
      GetWarehouseDocumentFromPickWorksheet(WarehouseShipmentHeader);

      // Verify: Verify Get Warehouse Document from Pick Worksheet. Done by PickSelctionPageHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,MessageHandler,PickSelectionPageHandler,CreatePickPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE CreatePickFromPickWorksheetWithIT@71();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1007 : Record 37;
    BEGIN
      // Verify Warehouse Activity Line after Pick creation form Pick Worksheet.

      // Setup: Create Put-away, Warehouse Receipt, Released Sales Order and Released Warehouse Shipment.
      Initialize;
      SetupForCreatePickFromPickWorksheet(SalesHeader);
      FindSalesLine(SalesLine,SalesHeader);

      // Exercise:
      CreatePickFromPickWkshPage(SalesHeader."Location Code");

      // Verify: Verify Warehouse Activity Line after Pick creation form Pick Worksheet.
      VerifyWhseActivityLine(SalesLine,SalesLine.Quantity / 2);  // verify Quantity on single Lot.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,MessageHandler,PickSelectionPageHandler,CreatePickPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE WhseShipmentAfterPickCreatedFromPickWkshtWithIT@103();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1007 : Record 37;
      WarehouseActivityLine@1004 : Record 5767;
      WarehouseEntry@1005 : Record 7312;
      WarehouseShipmentHeader@1000 : Record 7320;
      WarehouseShipmentNo@1002 : Code[20];
    BEGIN
      // Verify Warehouse Entriy create from Warehouse Shipment after Pick creation form Pick Worksheet.

      // Setup: Create Put-away, Warehouse Receipt, Released Sales Order and Released Warehouse Shipment.
      Initialize;
      WarehouseShipmentNo := SetupForCreatePickFromPickWorksheet(SalesHeader);
      WarehouseShipmentHeader.GET(WarehouseShipmentNo);
      CreatePickFromPickWkshPage(SalesHeader."Location Code");
      RegisterWarehouseActivity(DATABASE::"Sales Line",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
      FindSalesLine(SalesLine,SalesHeader);

      // Exercise:
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify: Verify Warehouse Entry after Pick Created From Pick Worksheet With Item Tracking.
      VerifyWarehouseEntries(
        SalesLine."No.",SalesLine."Location Code",FindPostedWareHouseShipmentNo(WarehouseShipmentHeader."No."),
        -SalesLine.Quantity / 2,WarehouseEntry."Entry Type"::"Negative Adjmt.");  // verify Quantity on single Lot.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ConfirmHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ErrorOnWhseRegisterForExceededQuantitytWithIT@115();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1007 : Record 37;
      WarehouseActivityLine@1002 : Record 5767;
      WarehouseShipmentHeader@1000 : Record 7320;
      LotNo@1003 : Variant;
      TrackingOption@1008 : 'SelectEntries,SetValues,AssignLotNo';
    BEGIN
      // Verify Error while Warehouse Register with exceeded Quantity and new Lot No.

      // Setup: Create Put-away, Warehouse Receipt, Released Sales Order.
      Initialize;
      SetupForWarehousePickPutAway(SalesHeader);
      FindSalesLine(SalesLine,SalesHeader);

      // Add one more Sales Line with new Lot No. and extra Quantity.
      LibrarySales.ReopenSalesDocument(SalesHeader);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,SalesLine."No.",LibraryRandom.RandInt(5));  // Using Random value for Quantity.
      LibraryVariableStorage.Enqueue(TrackingOption::AssignLotNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(AvailabilityWarning);  // Enqueue value for ConfirmHandler.
      SalesLine.OpenItemTrackingLines;
      LibraryVariableStorage.Dequeue(LotNo);  // Dequeue value for ItemTrackingLinesPageHandler.
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // Create Pick from Warehouse Shipment
      CreatePick(WarehouseShipmentHeader,SalesHeader."Location Code",SalesHeader."No.");

      // Exercise:
      ASSERTERROR RegisterWarehouseActivity(DATABASE::"Sales Line",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // Verify: Verify Error while Warehouse Register with exceeded Quanaity.
      Assert.ExpectedError(STRSUBSTNO(WhseRegisterLotError,LotNo));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE RegisterAndPostWhseShipmentWithIT@74();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      WarehouseShipmentHeader@1002 : Record 7320;
      WarehouseActivityLine@1005 : Record 5767;
      EntryType@1003 : 'Negative Adjmt.,Positive Adjmt.,Movement';
    BEGIN
      // Verify Warehouse Entry with Item Tracking after posting Warehouse Shipment.

      // Setup: Create Put-away, Warehouse Receipt and Released Sales Order.
      Initialize;
      SetupForWarehousePickPutAway(SalesHeader);
      FindSalesLine(SalesLine,SalesHeader);

      // Create Pick from Warehouse Shipment and Register.
      CreatePick(WarehouseShipmentHeader,SalesHeader."Location Code",SalesHeader."No.");
      RegisterWarehouseActivity(DATABASE::"Sales Line",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // Exercise.
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify: Verify Warehouse Entry with Item Tracking.
      VerifyWarehouseEntries(
        SalesLine."No.",SalesLine."Location Code",FindPostedWareHouseShipmentNo(WarehouseShipmentHeader."No."),
        -SalesLine.Quantity / 2,EntryType::"Negative Adjmt.");  // verify Quantity on single Lot.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,WhseItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,CreateWhseMovementPageHandler,MessageHandler)]
    PROCEDURE RegisterWhseMovementWithIT@82();
    VAR
      WarehouseActivityHeader@1006 : Record 5766;
      PurchaseLine@1000 : Record 39;
      EntryType@1001 : 'Negative Adjmt.,Positive Adjmt.,Movement';
    BEGIN
      // Verify Warehouse Entry after Register Warehouse Movement with Item Tracking.

      // Setup: Create Warehouse Receipt, Movement Worksheet Line, Assign Item Tracking to Movement Line and create Movement from Worksheet
      Initialize;
      CreateWhseReceiptAndMovementWorksheetLine(PurchaseLine);
      AssignItemTrackingInMovementWksht(PurchaseLine."No.");
      CreateMovementFromWorksheet(WarehouseActivityHeader);

      // Exercise.
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);

      // Verify: Verify Warehouse Entry after Register Warehouse Movement with Item Tracking.
      VerifyWarehouseEntries(
        PurchaseLine."No.",PurchaseLine."Location Code",FindPostedWarehouseReceiptNo(PurchaseLine."Location Code"),
        -PurchaseLine.Quantity / 2,EntryType::Movement);  // verify Quantity on single Lot.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,CreateWhseMovementPageHandler,MessageHandler)]
    PROCEDURE RegisterWhseMovemenErrortWithoutIT@116();
    VAR
      WarehouseActivityHeader@1006 : Record 5766;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify Error while Register Warehouse Movement without Item Tracking, Quantity received from Warehouse Purch. Receipt with Item Tracking.

      // Setup: Create Warehouse Receipt, Movement Worksheet Line, and create Movement from Worksheet
      Initialize;
      CreateWhseReceiptAndMovementWorksheetLine(PurchaseLine);
      CreateMovementFromWorksheet(WarehouseActivityHeader);

      // Exercise.
      ASSERTERROR LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);

      // Verify: Verify Error while Warehouse Movement Register without Item Tracking.
      Assert.ExpectedError(WhseMovmntRegisterError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,MessageHandler,WhseItemTrackingLinesPageHandler,ConfirmHandler)]
    PROCEDURE SuggestItemForAdjustmentBin@102();
    VAR
      Location@1009 : Record 14;
      PurchaseLine@1011 : Record 39;
      WarehouseEntry@1005 : Record 7312;
      WarehouseShipmentHeader@1000 : Record 7320;
    BEGIN
      // Verify Warehouse Entry after Pick Created From Warehouse Shipment With Item Tracking after Register and Post Item Journal with IT.

      // Setup.
      Initialize;
      CreateWarehouseLocation(Location);

      // Create Register Warehouse Receipt, Register Item Journal.
      CreateWhseReceiptAndRegister(PurchaseLine,Location.Code);
      CreateAndRegisterWhseJournalLine(PurchaseLine,Location.Code,Location."Receipt Bin Code");

      // Create Pick from Warehouse Shipment and Post Item Journal.
      CreatePickAndRegisterWhseShipment(WarehouseShipmentHeader,PurchaseLine."No.",Location.Code,PurchaseLine.Quantity / 2);  // For Single Lot.
      CalcWhseAdjustmentAndPostItemJournalLine(PurchaseLine."No.");

      // Exercise.
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify: Verify Warehouse Entry after Pick Created From Warehouse Shipment With Item Tracking.
      VerifyWarehouseEntries(
        PurchaseLine."No.",PurchaseLine."Location Code",FindPostedWareHouseShipmentNo(WarehouseShipmentHeader."No."),
        -PurchaseLine.Quantity / 2,WarehouseEntry."Entry Type"::"Negative Adjmt.");  // verify Quantity on single Lot.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,MessageHandler)]
    PROCEDURE InvPickAfterPurchaseReceipt@89();
    VAR
      Location@1002 : Record 14;
      PurchaseLine@1001 : Record 39;
      SalesHeader@1003 : Record 36;
      WarehouseActivityHeader@1008 : Record 5766;
      ItemLedgerEntry@1010 : Record 32;
    BEGIN
      // Verify: Verify Item Ledger Entry after posting Inventory Pick.

      // Setup: Create Location, create Purchase Order and Post, create Sales Order and create Inv. Pick.
      Initialize;
      CreateLocation(Location,FALSE,FALSE);
      CreateAndPostPurchaseOrder(PurchaseLine,Location.Code);
      CreateAndReleaseSaleslOrderWithIT(SalesHeader,Location.Code,PurchaseLine."No.",PurchaseLine.Quantity);
      CreateInvPickAndPost(WarehouseActivityHeader,SalesHeader);

      // Exercise.
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,FALSE);

      // Verify: Item Ledger Entry after posting Inventory Pick.
      VerifyItemLedgerEntry(ItemLedgerEntry,Location.Code,PurchaseLine."No.",-PurchaseLine.Quantity / 2)
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,MessageHandler,CreatePickReportHandler)]
    PROCEDURE TFS356264_ItemPickedAccordingToFEFO@96();
    VAR
      Location@1000 : Record 14;
      SalesHeader@1001 : Record 36;
      LotNos@1002 : ARRAY [2] OF Code[20];
      QtyToSell@1005 : Decimal;
      LotQty@1015 : Decimal;
    BEGIN
      GenerateRandomLotQuantities(LotQty,QtyToSell);

      CreateFEFOLocation(Location,FALSE);
      CreateSalesOrderBreakInTwoLots(SalesHeader,LotNos,Location.Code,'',LotQty,QtyToSell);

      COMMIT;
      CreateInventoryPickFromSalesHeader(SalesHeader);
      VerifyInventoryPickLines(SalesHeader."No.",LotNos,QtyToSell - LotQty,LotQty);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,MessageHandler,CreatePickReportHandler)]
    PROCEDURE TFS356264_ItemPickedAccordingToFEFOWithReservation@112();
    VAR
      Location@1000 : Record 14;
      SalesHeader@1001 : Record 36;
      LotNos@1002 : ARRAY [2] OF Code[20];
      QtyToSell@1005 : Decimal;
      LotQty@1015 : Decimal;
    BEGIN
      GenerateRandomLotQuantities(LotQty,QtyToSell);

      CreateFEFOLocation(Location,FALSE);
      CreateSalesOrderBreakInTwoLots(SalesHeader,LotNos,Location.Code,'',LotQty,QtyToSell - LotQty);
      AutoReserveSalesLine(SalesHeader);

      LibrarySales.ReopenSalesDocument(SalesHeader);
      SalesHeader.FIND;
      UpdateSalesOrderQuantity(SalesHeader."No.",QtyToSell);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      COMMIT;
      CreateInventoryPickFromSalesHeader(SalesHeader);
      // Second lot is completely picked, quantity to pick from the first lot = Lot Quantity - Reserved Quantity
      VerifyInventoryPickLines(SalesHeader."No.",LotNos,2 * LotQty - QtyToSell,LotQty);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,MessageHandler,CreatePickReportHandler)]
    PROCEDURE TFS356264_ItemPickedAccordingToFEFOWithBinMandatory@128();
    VAR
      Location@1004 : Record 14;
      Bin@1005 : Record 7354;
      SalesHeader@1003 : Record 36;
      LotNos@1002 : ARRAY [2] OF Code[20];
      QtyToSell@1001 : Decimal;
      LotQty@1000 : Decimal;
    BEGIN
      GenerateRandomLotQuantities(LotQty,QtyToSell);

      CreateFEFOLocation(Location,TRUE);
      LibraryWarehouse.CreateBin(
        Bin,Location.Code,LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),'','');

      CreateSalesOrderBreakInTwoLots(SalesHeader,LotNos,Location.Code,Bin.Code,LotQty,QtyToSell);

      COMMIT;
      CreateInventoryPickFromSalesHeader(SalesHeader);
      VerifyInventoryPickLines(SalesHeader."No.",LotNos,QtyToSell - LotQty,LotQty);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,CreatePickReportHandler)]
    PROCEDURE DestinationForInventoryPickFromSalesOrder@125();
    VAR
      SalesHeader@1003 : Record 36;
      WarehouseActivityLine@1007 : Record 5767;
      ItemNo@1009 : Code[20];
      Quantity@1010 : Decimal;
      LocationCode@1000 : Code[10];
    BEGIN
      // [FEATURE] [Inventory Pick] [Sales Order]
      // [SCENARIO 381306] "Destination Type" and "Destination No." fields of "Warehouse Activity Line" table must be filled for Inventory Pick from Sales Order.
      Initialize;

      Quantity := CreateItemInventoryAtLocation(ItemNo,LocationCode);

      // [GIVEN] Released Sales Order
      CreateReleasedItemSalesOrderFromLocation(SalesHeader,ItemNo,LocationCode,Quantity);

      COMMIT;

      // [WHEN] Create Inventory Pick From Sales Order
      CreateInventoryPickFromSalesHeader(SalesHeader);

      // [THEN] Corresponding "Warehouse Activity Line" exists
      FindWarehouseActivityLine(
        WarehouseActivityLine,DATABASE::"Sales Line",SalesHeader."No.",WarehouseActivityLine."Activity Type"::"Invt. Pick");

      // [THEN] "Warehouse Activity Line"."Destination Type" is equal to "Destination Type"::Customer
      WarehouseActivityLine.TESTFIELD("Destination Type",WarehouseActivityLine."Destination Type"::Customer);

      // [THEN] "Warehouse Activity Line"."Destination No." is equal to "Sell-to Customer No." of Sales Order
      WarehouseActivityLine.TESTFIELD("Destination No.",SalesHeader."Sell-to Customer No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,CreatePickReportHandler)]
    PROCEDURE DestinationForInventoryPickFromPurchaseReturnOrder@166();
    VAR
      PurchaseHeader@1003 : Record 38;
      WarehouseActivityLine@1007 : Record 5767;
      ItemNo@1009 : Code[20];
      Quantity@1010 : Decimal;
      LocationCode@1000 : Code[10];
    BEGIN
      // [FEATURE] [Inventory Pick] [Purchase Return Order]
      // [SCENARIO 381306] "Destination Type" and "Destination No." fields of "Warehouse Activity Line" table must be filled for Inventory Pick from Purchase Return Order.
      Initialize;

      Quantity := CreateItemInventoryAtLocation(ItemNo,LocationCode);

      // [GIVEN] Released Purchase Return Order
      CreateReleasedItemPurchaseReturnOrderFromLocation(PurchaseHeader,ItemNo,LocationCode,Quantity);

      COMMIT;

      // [WHEN] Create Inventory Pick From Purchase Return Order
      CreateInventoryPickFromPurchaseHeader(PurchaseHeader);

      // [THEN] Corresponding "Warehouse Activity Line" exists
      FindWarehouseActivityLine(
        WarehouseActivityLine,DATABASE::"Purchase Line",PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Invt. Pick");

      // [THEN] "Warehouse Activity Line"."Destination Type" is equal to "Destination Type"::Vendor
      WarehouseActivityLine.TESTFIELD("Destination Type",WarehouseActivityLine."Destination Type"::Vendor);

      // [THEN] "Warehouse Activity Line"."Destination No." is equal to "Buy-from Vendor No." of Purchase Order
      WarehouseActivityLine.TESTFIELD("Destination No.",PurchaseHeader."Buy-from Vendor No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,CreatePickReportHandler)]
    PROCEDURE DestinationForInventoryPickFromTransfer@179();
    VAR
      TransferHeader@1003 : Record 5740;
      WarehouseActivityLine@1007 : Record 5767;
      ItemNo@1009 : Code[20];
      Quantity@1010 : Decimal;
      LocationCode@1000 : Code[10];
    BEGIN
      // [FEATURE] [Inventory Pick] [Transfer]
      // [SCENARIO 381306] "Destination Type" and "Destination No." fields of "Warehouse Activity Line" table must be filled for Inventory Pick from Transfer.
      Initialize;

      Quantity := CreateItemInventoryAtLocation(ItemNo,LocationCode);

      // [GIVEN] Released Transfer
      CreateReleasedItemTransferOrderFromLocationToSomeNewLocation(TransferHeader,ItemNo,LocationCode,Quantity);

      COMMIT;

      // [WHEN] Create Inventory Pick From Transfer
      CreateInventoryPickFromTransferHeader(TransferHeader);

      // [THEN] Corresponding "Warehouse Activity Line" exists
      FindWarehouseActivityLine(
        WarehouseActivityLine,DATABASE::"Transfer Line",TransferHeader."No.",WarehouseActivityLine."Activity Type"::"Invt. Pick");

      // [THEN] "Warehouse Activity Line"."Destination Type" is equal to "Destination Type"::Location
      WarehouseActivityLine.TESTFIELD("Destination Type",WarehouseActivityLine."Destination Type"::Location);

      // [THEN] "Warehouse Activity Line"."Destination No." is equal to "Transfer-to Code" of Transfer
      WarehouseActivityLine.TESTFIELD("Destination No.",TransferHeader."Transfer-to Code");
    END;

    [Test]
    [HandlerFunctions(MsgHandler,AvailabilityWindowHandler)]
    PROCEDURE DestinationForInventoryMovementFromAssemblyOrder@192();
    VAR
      AssemblyHeader@1006 : Record 900;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      // [FEATURE] [Inventory Movement] [Assembly Order]
      // [SCENARIO 381306] "Destination Type" and "Destination No." fields of "Warehouse Activity Line" table must be filled for Inventory Movement from Assembly Order.
      Initialize;

      // [GIVEN] Released Assembly Order
      CreateReleasedAssemblyOrder(AssemblyHeader);

      // [WHEN] Create Inventory Movement From Assembly Order
      LibraryAssembly.CreateInvtMovement(AssemblyHeader."No.",FALSE,FALSE,TRUE);

      // [THEN] Corresponding "Warehouse Activity Line" exists
      FindWarehouseActivityLine(
        WarehouseActivityLine,DATABASE::"Assembly Line",AssemblyHeader."No.",WarehouseActivityLine."Activity Type"::"Invt. Movement");

      // [THEN] "Warehouse Activity Line"."Destination Type" is equal to "Destination Type"::Item
      WarehouseActivityLine.TESTFIELD("Destination Type",WarehouseActivityLine."Destination Type"::Item);

      // [THEN] "Warehouse Activity Line"."Destination No." is equal to "Item No." of Assembly Order
      WarehouseActivityLine.TESTFIELD("Destination No.",AssemblyHeader."Item No.");
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AddInventoryForBOM@53(ItemNo@1000 : Code[20];ItemNo2@1001 : Code[20]);
    BEGIN
      // Update Production BOM Inventory.
      PostItemJournalLine(ItemNo,LibraryRandom.RandDec(100,2) + 100,'');  // Adding 100 to take larger value.
      PostItemJournalLine(ItemNo2,LibraryRandom.RandDec(100,2) + 100,'');  // Adding 100 to take larger value.
    END;

    LOCAL PROCEDURE AssignItemTrackingInMovementWksht@172(ItemNo@1001 : Code[20]);
    VAR
      MovementWorksheet@1000 : TestPage 7351;
    BEGIN
      MovementWorksheet.OPENEDIT;
      MovementWorksheet.FILTER.SETFILTER("Item No.",ItemNo);
      COMMIT;  // Commit required.
      MovementWorksheet.ItemTrackingLines.INVOKE;
    END;

    LOCAL PROCEDURE AssignLotNoWithExpirationDate@159(VAR ItemJournalLine@1000 : Record 83;ExpirationDate@1002 : Date) : Code[20];
    VAR
      LotNo@1001 : Variant;
      TrackingOption@1003 : 'SelectEntries,SetValues,AssignLotNo';
    BEGIN
      LibraryVariableStorage.Enqueue(TrackingOption::AssignLotNo);  // Enqueue value for ItemTrackingLinesPageHandler.
      ItemJournalLine.OpenItemTrackingLines(FALSE);
      LibraryVariableStorage.Dequeue(LotNo);
      UpdateExpirationDateOnReservEntry(ItemJournalLine,ExpirationDate);

      EXIT(LotNo);
    END;

    LOCAL PROCEDURE AutoReserveSalesLine@45(SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      FindSalesLine(SalesLine,SalesHeader);
      LibrarySales.AutoReserveSalesLine(SalesLine);
    END;

    LOCAL PROCEDURE CalculateInventoryOnPhysInventoryJournal@30(VAR ItemJournalLine@1004 : Record 83);
    VAR
      Item@1000 : Record 27;
      Location@1002 : Record 14;
      PurchaseLine@1001 : Record 39;
      PurchaseHeader@1005 : Record 38;
    BEGIN
      // Create Item, Location, create and Post Purchase Order and Item Journal Line and Calculate Inventory on Physical Inventory Journal.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      CreateItem(Item,Item."Replenishment System"::Purchase,Item."Reordering Policy"::" ");
      CreatePurchaseOrder(PurchaseLine,Item."No.",Location.Code);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreateAndPostItemJournalLine(
        ItemJournalLine,PurchaseLine."No.",Location.Code,'',ItemJournalLine."Entry Type"::"Negative Adjmt.",
        LibraryRandom.RandInt(10));  // Use Random for Quantity.
      RunCalculateInventoryReport(ItemJournalLine,PurchaseLine."No.");
    END;

    LOCAL PROCEDURE CalculateInventoryOnWhsePhysInventoryJournal@3(VAR WarehouseJournalLine@1005 : Record 7311;PurchaseLine@1003 : Record 39;LocationCode@1004 : Code[10]);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      // Post Warehouse Receipt and Calculate Inventory on Warehouse Physical Inventory Journal.
      CreateAndPostWarehouseReceiptFromPO(PurchaseLine);
      RegisterWarehouseActivity(
        DATABASE::"Purchase Line",PurchaseLine."Document No.",WarehouseActivityLine."Activity Type"::"Put-away");
      CalculateWhseInventory(WarehouseJournalLine,PurchaseLine."No.",LocationCode);
    END;

    LOCAL PROCEDURE CalculateWhseInventory@5(VAR WarehouseJournalLine@1001 : Record 7311;ItemNo@1003 : Code[20];LocationCode@1004 : Code[10]);
    VAR
      BinContent@1002 : Record 7302;
      WarehouseJournalBatch@1000 : Record 7310;
      WarehouseJournalTemplate@1005 : Record 7309;
    BEGIN
      CreateWarehouseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Type::"Physical Inventory",LocationCode);
      WarehouseJournalLine.INIT;
      WarehouseJournalLine.VALIDATE("Journal Template Name",WarehouseJournalBatch."Journal Template Name");
      WarehouseJournalLine.VALIDATE("Journal Batch Name",WarehouseJournalBatch.Name);
      WarehouseJournalLine.VALIDATE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      LibraryWarehouse.WhseCalculateInventory(WarehouseJournalLine,BinContent,WORKDATE,LibraryUtility.GenerateGUID,FALSE);  // False for Item not on Inventory.
    END;

    LOCAL PROCEDURE CalcRegenPlanAndCarryOutActionMsg@39(Item@1000 : Record 27;LocationCode@1001 : Code[10]);
    VAR
      RequisitionLine@1002 : Record 246;
    BEGIN
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,CALCDATE('<CY>',WORKDATE));  // Dates based on WORKDATE.
      FindRequisitionLine(RequisitionLine,Item."No.",LocationCode);
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
    END;

    LOCAL PROCEDURE CalcWhseAdjustmentAndPostItemJournalLine@133(ItemNo@1000 : Code[20]);
    VAR
      Item@1002 : Record 27;
      ItemJournalBatch@1001 : Record 233;
    BEGIN
      Item.GET(ItemNo);
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Item);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@77(VAR ProductionBOMHeader@1000 : Record 99000771;BaseUnitOfMeasure@1003 : Code[10];No@1004 : Code[20]);
    VAR
      ProductionBOMLine@1002 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,BaseUnitOfMeasure);
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,No,1);  // Use blank value for Version Code and 1 for Quantity per.
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@7(VAR ItemJournalLine@1003 : Record 83;ItemNo@1002 : Code[20];LocationCode@1000 : Code[10];BinCode@1006 : Code[20];EntryType@1005 : Option;Quantity@1004 : Decimal);
    VAR
      ItemJournalBatch@1001 : Record 233;
    BEGIN
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Item);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrder@105(VAR PurchaseLine@1001 : Record 39;LocationCode@1002 : Code[10]);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      CreateAndReleasePurchaseOrder(
        PurchaseHeader,PurchaseLine,CreateAndModifyTrackedItem(LibraryRandom.RandInt(10)),LocationCode);  // Random Integer Required.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseReceiptFromPO@2(PurchaseLine@1000 : Record 39);
    VAR
      PurchaseHeader@1001 : Record 38;
      WarehouseReceiptHeader@1002 : Record 7316;
      WarehouseReceiptLine@1003 : Record 7317;
    BEGIN
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptLine(WarehouseReceiptLine,PurchaseHeader."No.",WarehouseReceiptLine."Source Document"::"Purchase Order");
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE CreateAndRefreshProductionOrder@47(ItemNo@1000 : Code[20]) : Code[20];
    VAR
      ProductionOrder@1001 : Record 5405;
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,LibraryRandom.RandDec(10,2));  // Use Random value for Quantity.
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
      EXIT(ProductionOrder."No.");
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@59(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1004 : Record 39;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    VAR
      TrackingOption@1003 : 'SelectEntries,SetValues';
    BEGIN
      CreatePurchaseOrder(PurchaseLine,ItemNo,LocationCode);
      LibraryVariableStorage.Enqueue(TrackingOption::SetValues);  // Enqueue ItemTrackingPageHandler.
      PurchaseLine.OpenItemTrackingLines;
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrder@171(VAR SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      CreateSalesOrder(SalesLine,LocationCode,ItemNo,Quantity);
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSaleslOrderWithIT@83(VAR SalesHeader@1000 : Record 36;LocationCode@1001 : Code[10];ItemNo@1003 : Code[20];Quantity@1005 : Decimal);
    VAR
      SalesLine@1004 : Record 37;
      TrackingOption@1002 : 'SelectEntries,SetValues,AssignLotNo';
    BEGIN
      // Create Sales Order, Assign Item Tracking and Release.
      CreateSalesOrderWithShippingAdvice(SalesHeader,LocationCode,SalesHeader."Shipping Advice"::Partial,ItemNo,Quantity);
      FindSalesLine(SalesLine,SalesHeader);
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);  // Enqueue ItemTrackingPageHandler.
      SalesLine.OpenItemTrackingLines;
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseWarehouseShipment@119(VAR WarehouseShipmentHeader@1000 : Record 7320;DocumentNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    BEGIN
      CreateWarehouseShipment(WarehouseShipmentHeader,DocumentNo,LocationCode);
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateAndModifyTrackedItem@80(NoOfDays@1000 : Integer) : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateTrackedItem(Item,LibraryUtility.GetGlobalNoSeriesCode,'',CreateItemTrackingCode);
      EVALUATE(Item."Expiration Calculation",'<' + FORMAT(NoOfDays) + 'D>');
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateCustomer@37(LocationCode@1000 : Code[10]) : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Location Code",LocationCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateInventoryPickFromSalesHeader@167(VAR SalesHeader@1000 : Record 36);
    BEGIN
      LibraryVariableStorage.Enqueue(NoOfPicksCreatedMsg);
      SalesHeader.CreateInvtPutAwayPick;
    END;

    LOCAL PROCEDURE CreateInventoryPickFromPurchaseHeader@174(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      LibraryVariableStorage.Enqueue(NoOfPicksCreatedMsg);
      PurchaseHeader.CreateInvtPutAwayPick;
    END;

    LOCAL PROCEDURE CreateInventoryPickFromTransferHeader@183(VAR TransferHeader@1000 : Record 5740);
    BEGIN
      LibraryVariableStorage.Enqueue(NoOfPicksCreatedMsg);
      TransferHeader.CreateInvtPutAwayPick;
    END;

    LOCAL PROCEDURE CreateInvPickAndPost@107(VAR WarehouseActivityHeader@1000 : Record 5766;SalesHeader@1001 : Record 36);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
      WarehouseRequest@1003 : Record 5765;
    BEGIN
      LibraryVariableStorage.Enqueue(InvPickCreatedMessage);
      LibraryWarehouse.CreateInvtPutPickMovement(WarehouseRequest."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);
      FindWarehouseActivityNo(WarehouseActivityLine,DATABASE::"Sales Line",SalesHeader."No.",SalesHeader."Location Code");
      WarehouseActivityHeader.GET(WarehouseActivityHeader.Type::"Invt. Pick",WarehouseActivityLine."No.");
      LibraryWarehouse.AutoFillQtyInventoryActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE CreateItem@21(VAR Item@1000 : Record 27;ReplenishmentSystem@1002 : Option;ReorderingPolicy@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Reordering Policy",ReorderingPolicy);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@141(VAR ItemJournalLine@1003 : Record 83;ItemNo@1002 : Code[20];Quantity@1001 : Decimal;LocationCode@1000 : Code[10]);
    VAR
      ItemJournalBatch@1004 : Record 233;
    BEGIN
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Item);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournalLineWithBin@157(VAR ItemJournalLine@1000 : Record 83;ItemNo@1003 : Code[20];Quantity@1002 : Decimal;LocationCode@1001 : Code[10];BinCode@1004 : Code[20]);
    BEGIN
      CreateItemJournalLine(ItemJournalLine,ItemNo,Quantity,LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@140() : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      CreateItemTrackingCodeLotSpecific(ItemTrackingCode);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateItemTrackingCodeLotSpecific@108(VAR ItemTrackingCode@1000 : Record 6502);
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",TRUE);
      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemTrackingWithExpirLot@101() : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      CreateItemTrackingCodeLotSpecific(ItemTrackingCode);
      WITH ItemTrackingCode DO BEGIN
        VALIDATE("Man. Expir. Date Entry Reqd.",TRUE);
        MODIFY(TRUE);

        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE CreateItemWithLotTracking@138(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Item Tracking Code",CreateItemTrackingWithExpirLot);
      Item.VALIDATE("Lot Nos.",LibraryERM.CreateNoSeriesCode);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithRoutingAndBOM@120() : Code[20];
    VAR
      Item@1006 : Record 27;
      RoutingHeader@1002 : Record 99000763;
      BOMNo@1001 : Code[20];
      ItemNo@1000 : ARRAY [2] OF Code[20];
    BEGIN
      CreateProdBOMSetup(ItemNo,BOMNo);
      CreateRoutingSetup(RoutingHeader,Item."Flushing Method");
      CreateManufacturingItem(
        Item,Item."Costing Method"::FIFO,RoutingHeader."No.",BOMNo,Item."Manufacturing Policy"::"Make-to-Order",
        Item."Reordering Policy",Item."Replenishment System"::"Prod. Order");
      AddInventoryForBOM(ItemNo[1],ItemNo[2]);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateLocation@75(VAR Location@1000 : Record 14;BinMandatory@1002 : Boolean;RequireShipment@1003 : Boolean);
    VAR
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Bin Mandatory",BinMandatory);
      Location.VALIDATE("Require Pick",TRUE);
      Location.VALIDATE("Require Shipment",RequireShipment);
      Location.MODIFY(TRUE);
      WarehouseEmployee.DELETEALL;
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,TRUE);
    END;

    LOCAL PROCEDURE CreateFEFOLocation@121(VAR Location@1002 : Record 14;BinMandatory@1001 : Boolean);
    BEGIN
      CreateLocation(Location,BinMandatory,FALSE);
      Location.VALIDATE("Pick According to FEFO",TRUE);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationWithMultipleBin@60(VAR Location@1000 : Record 14;VAR Bin@1002 : Record 7354;VAR Bin2@1003 : Record 7354);
    BEGIN
      CreateLocation(Location,TRUE,TRUE);
      LibraryWarehouse.CreateBin(Bin,Location.Code,
        COPYSTR(LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),
          1,LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),'','');
      LibraryWarehouse.CreateBin(Bin2,Location.Code,
        COPYSTR(LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),
          1,LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),'','');
    END;

    LOCAL PROCEDURE CreateMachineCenter@69(VAR MachineCenter@1003 : Record 99000758;WorkCenterNo@1000 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateMachineCenterWithCalendar(MachineCenter,WorkCenterNo,LibraryRandom.RandDec(10,1));  // Random values used are important for test.
    END;

    LOCAL PROCEDURE CreateMovementFromWorksheet@160(VAR WarehouseActivityHeader@1010 : Record 5766);
    VAR
      WarehouseSetup@1009 : Record 5769;
      WhseWorksheetLine@1001 : Record 7326;
      MovementNo@1000 : Code[20];
    BEGIN
      COMMIT;  // Commit required.
      WarehouseSetup.GET;
      MovementNo := FindNos(WarehouseSetup."Whse. Movement Nos.");
      LibraryVariableStorage.Enqueue(STRSUBSTNO(MovmntActivityCreatedMessage,MovementNo));  // Enqueue value for MessageHandler.
      WhseWorksheetLine.MovementCreate(WhseWorksheetLine);
      WarehouseActivityHeader.GET(WarehouseActivityHeader.Type::Movement,MovementNo);
      LibraryVariableStorage.Enqueue(AutoFillQtyMessage);  // Enqueue value for MessageHandler.
    END;

    LOCAL PROCEDURE CreateManufacturingItem@48(VAR Item@1000 : Record 27;CostingMethod@1004 : Option;RoutingNo@1001 : Code[20];ProductionBOMNo@1003 : Code[20];ManufacturingPolicy@1005 : Option;ReorderingPolicy@1006 : Option;ReplenishmentSystem@1007 : Option);
    BEGIN
      // Random values used are not important for test.
      LibraryManufacturing.CreateItemManufacturing(
        Item,CostingMethod,LibraryRandom.RandDec(50,2) + LibraryRandom.RandDec(10,2),ReorderingPolicy,
        Item."Flushing Method",RoutingNo,ProductionBOMNo);
      Item.VALIDATE("Manufacturing Policy",ManufacturingPolicy);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePhysInventoryJournalWithWMSLocation@15(VAR ItemJournalLine@1004 : Record 83;PurchaseLine@1005 : Record 39;LocationCode@1001 : Code[10]) : Decimal;
    VAR
      Item@1003 : Record 27;
      ItemJournalBatch@1002 : Record 233;
      WarehouseJournalLine@1000 : Record 7311;
    BEGIN
      // Calculate Inventory on Warehouse Physical Inventory Journal and update Quantity.
      CalculateInventoryOnWhsePhysInventoryJournal(WarehouseJournalLine,PurchaseLine,LocationCode);
      FindAndUpdateWarehouseJournalLine(WarehouseJournalLine);

      // Register Warehouse Line and Calculate Warehouse Adjustment.
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",WarehouseJournalLine."Location Code",
        FALSE);  // false for Batch Job.
      Item.GET(WarehouseJournalLine."Item No.");
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Item);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // Calculate Inventory on Phys Inventory Journal.
      RunCalculateInventoryReport(ItemJournalLine,Item."No.");
      FindItemJournalLine(ItemJournalLine);
      EXIT(WarehouseJournalLine.Quantity);
    END;

    LOCAL PROCEDURE CreatePick@164(VAR WarehouseShipmentHeader@1003 : Record 7320;LocationCode@1001 : Code[10];DocumentNo@1002 : Code[20]);
    BEGIN
      CreateWarehouseShipment(WarehouseShipmentHeader,DocumentNo,LocationCode);
      LibraryVariableStorage.Enqueue(PickActivityMessage);  // Enqueue for Message Handler.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreatePickAndRegisterWhseShipment@123(VAR WarehouseShipmentHeader@1005 : Record 7320;ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];Quantity@1006 : Decimal);
    VAR
      SalesHeader@1002 : Record 36;
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      CreateAndReleaseSaleslOrderWithIT(SalesHeader,LocationCode,ItemNo,Quantity);
      CreatePick(WarehouseShipmentHeader,SalesHeader."Location Code",SalesHeader."No.");
      RegisterWarehouseActivity(DATABASE::"Sales Line",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
    END;

    LOCAL PROCEDURE CreatePickFromPickWkshPage@78(LocationCode@1001 : Code[10]);
    VAR
      PickWorksheet@1000 : TestPage 7345;
    BEGIN
      PickWorksheet.OPENEDIT;
      PickWorksheet.FILTER.SETFILTER("Location Code",LocationCode);
      PickWorksheet.CreatePick.INVOKE;
      PickWorksheet.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateProdBOMSetup@24(VAR ItemNo@1001 : ARRAY [2] OF Code[20];VAR ProdBOMNo@1000 : Code[20]);
    VAR
      Item@1002 : Record 27;
      ProductionBOMHeader@1003 : Record 99000771;
    BEGIN
      CreateManufacturingItem(
        Item,Item."Costing Method"::FIFO,'','',Item."Manufacturing Policy"::"Make-to-Order",Item."Reordering Policy",
        Item."Replenishment System"::"Prod. Order");
      ItemNo[1] := Item."No.";
      CreateManufacturingItem(
        Item,Item."Costing Method"::FIFO,'','',Item."Manufacturing Policy"::"Make-to-Stock",Item."Reordering Policy",
        Item."Replenishment System");
      ItemNo[2] := Item."No.";
      LibraryManufacturing.CreateCertifProdBOMWithTwoComp(ProductionBOMHeader,ItemNo[1],ItemNo[2],1); // Value important for Test.
      ProdBOMNo := ProductionBOMHeader."No.";
    END;

    LOCAL PROCEDURE CreateProductionItem@26(VAR ParentItem@1000 : Record 27);
    VAR
      ChildItem@1001 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
    BEGIN
      CreateItem(ParentItem,ParentItem."Replenishment System"::"Prod. Order",ParentItem."Reordering Policy"::"Lot-for-Lot");
      CreateItem(ChildItem,ChildItem."Replenishment System"::Purchase,ChildItem."Reordering Policy"::"Lot-for-Lot");
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ParentItem."Base Unit of Measure",ChildItem."No.");
      ParentItem.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      ParentItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@256(VAR PurchaseLine@1004 : Record 39;ItemNo@1001 : Code[20];LocationCode@1003 : Code[10]);
    VAR
      PurchaseHeader@1005 : Record 38;
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandInt(20));  // Use Random for Quantity.
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@46(VAR SalesLine@1000 : Record 37;LocationCode@1001 : Code[10];No@1004 : Code[20];Quantity@1005 : Decimal);
    VAR
      SalesHeader@1003 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomer(LocationCode));
      LibrarySales.CreateSalesLineWithShipmentDate(
        SalesLine,SalesHeader,SalesLine.Type::Item,No,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE),
        Quantity);  // Use Random days to calculate Shipment Date.
    END;

    LOCAL PROCEDURE CreateSalesOrderUsingItemInventory@58(VAR SalesHeader@1000 : Record 36;ItemNo@1001 : Code[20]);
    VAR
      Item@1002 : Record 27;
      SalesLine@1003 : Record 37;
    BEGIN
      Item.GET(ItemNo);
      Item.CALCFIELDS(Inventory);
      CreateSalesOrder(SalesLine,'',ItemNo,Item.Inventory);
      SalesHeader.GET(SalesLine."Document Type"::Order,SalesLine."Document No.");
    END;

    LOCAL PROCEDURE CreateSalesOrderWithShippingAdvice@88(VAR SalesHeader@1000 : Record 36;LocationCode@1001 : Code[10];ShippingAdvice@1002 : Option;No@1004 : Code[20];Quantity@1006 : Decimal);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomer(LocationCode));
      SalesHeader.VALIDATE("Shipping Advice",ShippingAdvice);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,No,Quantity);
    END;

    LOCAL PROCEDURE CreateRoutingSetup@40(VAR RoutingHeader@1001 : Record 99000763;FlushingMethod@1000 : Option);
    VAR
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1003 : Record 99000754;
      MachineCenter@1002 : Record 99000758;
    BEGIN
      CreateWorkCenter(WorkCenter,FlushingMethod);
      CreateMachineCenter(MachineCenter,WorkCenter."No.");
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.");
      RoutingLine.Type := RoutingLine.Type::"Machine Center";
      CreateRoutingLine(RoutingLine,RoutingHeader,MachineCenter."No.");

      // Certify Routing after Routing lines creation.
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingLine@31(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;WorkCenterNo@1002 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateRoutingLineSetup(
        RoutingLine,RoutingHeader,WorkCenterNo,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(RoutingLine.FIELDNO("Operation No."),DATABASE::"Routing Line"),1,
          MAXSTRLEN(RoutingLine."Operation No.")),
        LibraryRandom.RandInt(5),LibraryRandom.RandInt(5));  // Random is used, values not important for test.
    END;

    LOCAL PROCEDURE CreateSalesOrderBreakInTwoLots@182(VAR SalesHeader@1000 : Record 36;VAR LotNos@1007 : ARRAY [2] OF Code[20];LocationCode@1003 : Code[10];BinCode@1004 : Code[20];LotQty@1005 : Decimal;QtyToSell@1006 : Decimal);
    VAR
      Item@1001 : Record 27;
    BEGIN
      CreateItemWithLotTracking(Item);
      LotNos[1] := PostItemJournalLineFEFO(Item."No.",LocationCode,BinCode,LotQty,CALCDATE('<2D>',WORKDATE));
      LotNos[2] := PostItemJournalLineFEFO(Item."No.",LocationCode,BinCode,LotQty,CALCDATE('<1D>',WORKDATE));
      CreateAndReleaseSalesOrder(SalesHeader,Item."No.",LocationCode,QtyToSell);
    END;

    LOCAL PROCEDURE CreateTransferOrderAndPick@84(VAR TransferLine@1001 : Record 5741;BinCode@1008 : Code[20];Code@1002 : Code[10];Code2@1003 : Code[10];Code3@1004 : Code[10];No@1005 : Code[20]);
    VAR
      TransferHeader@1000 : Record 5740;
      WarehouseShipmentLine@1007 : Record 7321;
      WarehouseShipmentHeader@1006 : Record 7320;
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,Code,Code2,Code3);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,No,LibraryRandom.RandDec(10,2));  // Using Random value for Transfer Line Quantity.
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);

      WarehouseShipmentLine.SETRANGE("Source No.",TransferHeader."No.");
      WarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentLine.VALIDATE("Bin Code",BinCode);
      WarehouseShipmentLine.MODIFY(TRUE);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseJournalBatch@17(VAR WarehouseJournalBatch@1001 : Record 7310;WarehouseJournalTemplateType@1003 : Option;LocationCode@1002 : Code[10]);
    VAR
      WarehouseJournalTemplate@1000 : Record 7309;
    BEGIN
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplateType);
      LibraryWarehouse.CreateWhseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Name,LocationCode)
    END;

    LOCAL PROCEDURE CreateWarehouseJournalLine@34(VAR WarehouseJournalLine@1002 : Record 7311;Bin@1003 : Record 7354;ItemNo@1004 : Code[20];Quantity@1005 : Decimal);
    VAR
      WarehouseJournalBatch@1001 : Record 7310;
      WarehouseJournalTemplate@1000 : Record 7309;
    BEGIN
      // Use Random value for Quantity.
      CreateWarehouseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Type::Item,Bin."Location Code");
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",
        Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateAndRegisterWhseJournalLine@110(PurchaseLine@1005 : Record 39;LocationCode@1001 : Code[10];BinCode@1002 : Code[20]);
    VAR
      Bin@1000 : Record 7354;
      WarehouseJournalLine@1003 : Record 7311;
    BEGIN
      Bin.GET(LocationCode,BinCode);
      CreateWarehouseJournalLine(WarehouseJournalLine,Bin,PurchaseLine."No.",PurchaseLine.Quantity / 2);  // For Single Lot.
      WarehouseJournalLine.OpenItemTrackingLines;
      LibraryVariableStorage.Enqueue(WhseItemLineRegister);  // Enqueue value for ConfirmHandler.
      LibraryVariableStorage.Enqueue(WhseItemLineRegistered);  // Enqueue value for MessageHandler.
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",LocationCode,FALSE);
    END;

    LOCAL PROCEDURE CreateWarehouseLocation@51(VAR Location@1000 : Record 14);
    VAR
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      LibraryWarehouse.CreateFullWMSLocation(Location,2);  // Value used for number of bin per zone.
      Location.VALIDATE("Require Receive",TRUE);
      Location.VALIDATE("Always Create Pick Line",TRUE);
      Location.MODIFY(TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,TRUE);
    END;

    LOCAL PROCEDURE CreateWhseReceiptAndRegister@81(VAR PurchaseLine@1000 : Record 39;LocationCode@1002 : Code[10]);
    VAR
      PurchaseHeader@1001 : Record 38;
      WarehouseActivityLine@1003 : Record 5767;
    BEGIN
      // Create Purchase Order, Warehouse Receipt, Post and Register Put-away.
      CreateAndReleasePurchaseOrder(
        PurchaseHeader,PurchaseLine,CreateAndModifyTrackedItem(LibraryRandom.RandInt(10)),LocationCode);   // Random Integer used for update Expiration Date.
      CreateAndPostWarehouseReceiptFromPO(PurchaseLine);
      RegisterWarehouseActivity(DATABASE::"Purchase Line",PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE CreateWarehouseShipment@99(VAR WarehouseShipmentHeader@1000 : Record 7320;DocumentNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    VAR
      SalesHeader@1003 : Record 36;
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type"::Order,DocumentNo);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,LocationCode);
    END;

    LOCAL PROCEDURE CreateWorkCenter@70(VAR WorkCenter@1001 : Record 99000754;FlushingMethod@1004 : Option);
    BEGIN
      LibraryManufacturing.CreateWorkCenterWithCalendar(WorkCenter);
      WorkCenter.VALIDATE("Flushing Method",FlushingMethod);
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWhseReceiptAndMovementWorksheetLine@170(VAR PurchaseLine@1001 : Record 39);
    VAR
      Location@1000 : Record 14;
      WhseWorksheetName@1003 : Record 7327;
      WhseWorksheetLine@1002 : Record 7326;
    BEGIN
      CreateWarehouseLocation(Location);
      CreateWhseReceiptAndRegister(PurchaseLine,Location.Code);
      CreateWhseWorksheetName(WhseWorksheetName,Location.Code);
      WhseWorksheetLine.DELETEALL;
      CreateWhseWorksheetLine(
        WhseWorksheetLine,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,PurchaseLine."No.",Location.Code,
        PurchaseLine.Quantity / 2);
      WhseWorksheetLine.AutofillQtyToHandle(WhseWorksheetLine);
    END;

    LOCAL PROCEDURE CreateWhseWorksheetLine@87(VAR WhseWorksheetLine@1000 : Record 7326;WorksheetTemplateName@1001 : Code[10];Name@1002 : Code[10];ItemNo@1005 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Decimal);
    BEGIN
      LibraryWarehouse.CreateWhseWorksheetLine(
        WhseWorksheetLine,WorksheetTemplateName,Name,LocationCode,WhseWorksheetLine."Whse. Document Type"::"Whse. Mov.-Worksheet");
      WhseWorksheetLine.VALIDATE("Item No.",ItemNo);
      WhseWorksheetLine.VALIDATE(Quantity,Quantity);
      WhseWorksheetLine.VALIDATE("From Bin Code",FindBinContent(LocationCode,ItemNo));
      WhseWorksheetLine.VALIDATE("To Bin Code",FindBin(LocationCode,TRUE));
      WhseWorksheetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWhseWorksheetName@85(VAR WhseWorksheetName@1002 : Record 7327;LocationCode@1001 : Code[10]);
    VAR
      WhseWorksheetTemplate@1000 : Record 7328;
    BEGIN
      WhseWorksheetTemplate.SETRANGE(Type,WhseWorksheetTemplate.Type::Movement);
      WhseWorksheetTemplate.FINDFIRST;
      LibraryWarehouse.CreateWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
    END;

    LOCAL PROCEDURE DeleteProdOrderLine@54(ProdOrderNo@1000 : Code[20]);
    VAR
      ProdOrderLine@1001 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Released);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderLine.FINDLAST;
      ProdOrderLine.DELETE(TRUE);
    END;

    LOCAL PROCEDURE FindAndUpdateItemJournalLine@33(VAR ItemJournalLine@1000 : Record 83);
    BEGIN
      FindItemJournalLine(ItemJournalLine);
      ItemJournalLine.VALIDATE(
        "Qty. (Phys. Inventory)",ItemJournalLine."Qty. (Phys. Inventory)" + LibraryRandom.RandDec(10,2));  // Use Random for updating Quantity(Phys. Inventory).
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindAndUpdateWarehouseJournalLine@42(VAR WarehouseJournalLine@1000 : Record 7311);
    BEGIN
      WarehouseJournalLine.SETRANGE("Journal Template Name",WarehouseJournalLine."Journal Template Name");
      WarehouseJournalLine.SETRANGE("Journal Batch Name",WarehouseJournalLine."Journal Batch Name");
      WarehouseJournalLine.SETRANGE("Location Code",WarehouseJournalLine."Location Code");
      WarehouseJournalLine.FINDFIRST;
      WarehouseJournalLine.VALIDATE(
        "Qty. (Phys. Inventory)",WarehouseJournalLine."Qty. (Phys. Inventory)" + LibraryRandom.RandDec(10,2));  // Use Random for Quantity.
      WarehouseJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindBin@92(LocationCode@1000 : Code[10];Ship@1002 : Boolean) : Code[20];
    VAR
      Bin@1001 : Record 7354;
    BEGIN
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.SETRANGE("Bin Type Code",FindBinType(Ship));
      Bin.FINDFIRST;
      EXIT(Bin.Code);
    END;

    LOCAL PROCEDURE FindBinContent@129(LocationCode@1002 : Code[10];ItemNo@1001 : Code[20]) : Code[10];
    VAR
      BinContent@1000 : Record 7302;
    BEGIN
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.FINDFIRST;
      EXIT(BinContent."Bin Code");
    END;

    LOCAL PROCEDURE FindBinType@149(Ship@1004 : Boolean) : Code[10];
    VAR
      BinType@1000 : Record 7303;
    BEGIN
      BinType.SETRANGE(Ship,Ship);
      BinType.FINDFIRST;
      EXIT(BinType.Code);
    END;

    LOCAL PROCEDURE FindItemJournalLine@41(VAR ItemJournalLine@1001 : Record 83);
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalLine."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalLine."Journal Batch Name");
      ItemJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindNos@94(NoSeriesCode@1003 : Code[10]) : Code[20];
    VAR
      NoSeriesManagement@1001 : Codeunit 396;
    BEGIN
      EXIT(NoSeriesManagement.GetNextNo(NoSeriesCode,WORKDATE,FALSE));
    END;

    LOCAL PROCEDURE FindProductionBOMLine@25(VAR ProductionBOMLine@1000 : Record 99000772;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      ProductionBOMLine.SETRANGE("Production BOM No.",ProductionBOMNo);
      ProductionBOMLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindProductionOrderLine@6(VAR ProdOrderLine@1000 : Record 5406;Status@1003 : Option;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    BEGIN
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      ProdOrderLine.SETRANGE("Location Code",LocationCode);
      ProdOrderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindRequisitionLine@23(VAR RequisitionLine@1000 : Record 246;No@1001 : Code[20];LocationCode@1002 : Code[10]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.SETRANGE("Location Code",LocationCode);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPostedWarehouseReceiptNo@126(LocationCode@1001 : Code[10]) : Code[20];
    VAR
      PostedWhseReceiptHeader@1000 : Record 7318;
    BEGIN
      PostedWhseReceiptHeader.SETRANGE("Location Code",LocationCode);
      PostedWhseReceiptHeader.FINDFIRST;
      EXIT(PostedWhseReceiptHeader."No.");
    END;

    LOCAL PROCEDURE FindPostedWareHouseShipmentNo@90(WarehouseShipmentNo@1000 : Code[20]) : Code[20];
    VAR
      PostedWhseShipmentHeader@1001 : Record 7322;
    BEGIN
      PostedWhseShipmentHeader.SETRANGE("Whse. Shipment No.",WarehouseShipmentNo);
      PostedWhseShipmentHeader.FINDFIRST;
      EXIT(PostedWhseShipmentHeader."No.");
    END;

    LOCAL PROCEDURE FindSalesLine@49(VAR SalesLine@1001 : Record 37;SalesHeader@1000 : Record 36);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityNo@57(VAR WarehouseActivityLine@1000 : Record 5767;SourceType@1001 : Integer;SourceNo@1002 : Code[20];LocationCode@1005 : Code[10]);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source Type",SourceType);
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Location Code",LocationCode);
      WarehouseActivityLine.FINDLAST;  // Using Findlast to take value from last line of Activity Type.
    END;

    LOCAL PROCEDURE FindWarehouseActivityLine@20(VAR WarehouseActivityLine@1000 : Record 5767;SourceType@1001 : Integer;SourceNo@1002 : Code[20];ActivityType@1003 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source Type",SourceType);
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseReceiptLine@93(VAR WarehouseReceiptLine@1000 : Record 7317;SourceNo@1001 : Code[20];SourceDocument@1002 : Option);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseShipmentHeader@91(VAR WarehouseShipmentHeader@1000 : Record 7320;LocationCode@1001 : Code[10]);
    BEGIN
      WarehouseShipmentHeader.SETRANGE("Location Code",LocationCode);
      WarehouseShipmentHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPickZone@32(LocationCode@1140 : Code[10]) : Code[10];
    VAR
      Zone@1000 : Record 7300;
    BEGIN
      Zone.SETRANGE("Location Code",LocationCode);
      Zone.SETRANGE("Bin Type Code",LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE));
      Zone.SETRANGE("Cross-Dock Bin Zone",FALSE);
      Zone.FINDFIRST;
      EXIT(Zone.Code);
    END;

    LOCAL PROCEDURE GenerateRandomLotQuantities@153(VAR LotQty@1000 : Decimal;VAR QtyToSell@1001 : Decimal);
    BEGIN
      Initialize;

      LotQty := LibraryRandom.RandIntInRange(50,100);
      QtyToSell := LotQty + LibraryRandom.RandIntInRange(20,40);
    END;

    LOCAL PROCEDURE GetWarehouseDocumentFromPickWorksheet@117(WarehouseShipmentHeader@1000 : Record 7320);
    VAR
      PickWorksheet@1001 : TestPage 7345;
    BEGIN
      LibraryVariableStorage.Enqueue(WarehouseShipmentHeader."No.");  // Enqueue for PickSelectionPageHandler.
      LibraryVariableStorage.Enqueue(WarehouseShipmentHeader."Location Code");  // Enqueue PickSelectionPageHandler.
      PickWorksheet.OPENEDIT;
      PickWorksheet."Get Warehouse Documents".INVOKE;
      PickWorksheet.OK.INVOKE;
    END;

    LOCAL PROCEDURE OpenPhysInventoryJournalToUpdateQuantity@9(JournalBatchName@1003 : Code[10]);
    VAR
      PhysInventoryJournal@1001 : TestPage 392;
    BEGIN
      COMMIT;  // Commit required.
      PhysInventoryJournal.OPENEDIT;
      PhysInventoryJournal.CurrentJnlBatchName.SETVALUE(JournalBatchName);
      PhysInventoryJournal."Qty. (Phys. Inventory)".SETVALUE(LibraryRandom.RandDec(10,2));  // Use Random to update Quantity.
    END;

    LOCAL PROCEDURE PostItemJournalLine@43(ItemNo@1004 : Code[20];Quantity@1005 : Decimal;LocationCode@1001 : Code[10]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CreateItemJournalLine(ItemJournalLine,ItemNo,Quantity,LocationCode);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE PostItemJournalLineFEFO@175(ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];BinCode@1006 : Code[20];Quantity@1003 : Decimal;ExpirationDate@1004 : Date) : Code[20];
    VAR
      ItemJournalLine@1000 : Record 83;
      LotNo@1005 : Code[20];
    BEGIN
      CreateItemJournalLineWithBin(ItemJournalLine,ItemNo,Quantity,LocationCode,BinCode);
      LotNo := AssignLotNoWithExpirationDate(ItemJournalLine,ExpirationDate);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      EXIT(LotNo);
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@142(SourceType@1004 : Integer;SourceNo@1001 : Code[20];ActivityType@1003 : Option);
    VAR
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceType,SourceNo,ActivityType);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE RunCalculateInventoryReport@38(VAR ItemJournalLine@1000 : Record 83;ItemNo@1001 : Code[20]);
    VAR
      ItemJournalBatch@1003 : Record 233;
    BEGIN
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::"Phys. Inventory");
      ItemJournalLine.INIT;
      ItemJournalLine.VALIDATE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.VALIDATE("Journal Batch Name",ItemJournalBatch.Name);
      LibraryInventory.CalculateInventory(ItemJournalLine,ItemNo,WORKDATE,TRUE);
    END;

    LOCAL PROCEDURE SelectAndClearItemJournalBatch@95(VAR ItemJournalBatch@1000 : Record 233;Type@1002 : Option);
    VAR
      ItemJournalTemplate@1001 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,Type);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE SetupForCreatePickFromPickWorksheet@124(VAR SalesHeader@1000 : Record 36) : Code[20];
    VAR
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseSetup@1002 : Record 5769;
    BEGIN
      SetupForWarehousePickPutAway(SalesHeader);
      CreateAndReleaseWarehouseShipment(WarehouseShipmentHeader,SalesHeader."No.",SalesHeader."Location Code");

      // Create Pick Worksheet Line through Get Warehouse Document Action.
      GetWarehouseDocumentFromPickWorksheet(WarehouseShipmentHeader);
      COMMIT;  // Commit required.
      WarehouseSetup.GET;
      LibraryVariableStorage.Enqueue(STRSUBSTNO(PickActivityMessage,FindNos(WarehouseSetup."Whse. Pick Nos.")));  // Enqueue for Message Handler.
      EXIT(WarehouseShipmentHeader."No.");
    END;

    LOCAL PROCEDURE SetupForCreatePickOnSalesDocument@86(VAR SalesLine@1000 : Record 37;LocationCode@1002 : Code[10];ShippingAdvice@1003 : Option;NoOfLines@1006 : Integer);
    VAR
      Item@1001 : Record 27;
      Item2@1007 : Record 27;
      SalesHeader@1005 : Record 36;
      Count@1004 : Integer;
      Quantity@1008 : Decimal;
    BEGIN
      CreateItem(Item,Item."Replenishment System"::Purchase,Item."Reordering Policy"::" ");
      Quantity := LibraryRandom.RandInt(2);  // Use Random to update Quantity.

      // Post Item Journal and Creation of Released Sales Orders.
      PostItemJournalLine(Item."No.",LibraryRandom.RandInt(10),LocationCode);
      CreateSalesOrderWithShippingAdvice(SalesHeader,LocationCode,ShippingAdvice,Item."No.",Quantity);
      FOR Count := 2 TO NoOfLines DO BEGIN
        CreateItem(Item2,Item2."Replenishment System"::Purchase,Item2."Reordering Policy"::" ");
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item2."No.",Quantity);
      END;

      LibrarySales.ReleaseSalesDocument(SalesHeader);
      FindSalesLine(SalesLine,SalesHeader);
    END;

    LOCAL PROCEDURE SetupForPlanningWorksheet@16(VAR SalesLine@1000 : Record 37);
    VAR
      Bin@1019 : Record 7354;
      Item@1008 : Record 27;
      ProductionBOMLine@1010 : Record 99000772;
      WarehouseJournalLine@1005 : Record 7311;
    BEGIN
      // Create Production Item. Create and register Warehouse Journal Line. Create and post Item journal Line for child Item after Calculating Whse. Adjustment. Create Sales Order.
      // Enqueue value for message handler.
      LibraryVariableStorage.Enqueue(WhseItemLineRegister);
      LibraryVariableStorage.Enqueue(WhseItemLineRegistered);

      WhiteLocationSetup(Bin);
      CreateProductionItem(Item);
      FindProductionBOMLine(ProductionBOMLine,Item."Production BOM No.");
      UpdateInventoryFromWarehouseJournal(WarehouseJournalLine,Bin,ProductionBOMLine."No.");

      CreateSalesOrder(SalesLine,Bin."Location Code",Item."No.",WarehouseJournalLine.Quantity - 1);  // Take less Quantity for Sales Order.
    END;

    LOCAL PROCEDURE SetupForWarehousePickPutAway@104(VAR SalesHeader@1004 : Record 36);
    VAR
      PurchaseLine@1005 : Record 39;
      Location@1000 : Record 14;
    BEGIN
      CreateWarehouseLocation(Location);
      CreateWhseReceiptAndRegister(PurchaseLine,Location.Code);
      CreateAndReleaseSaleslOrderWithIT(SalesHeader,Location.Code,PurchaseLine."No.",PurchaseLine.Quantity);
    END;

    LOCAL PROCEDURE UpdateExpirationDateOnReservEntry@145(ItemJournalLine@1001 : Record 83;ExpirationDate@1002 : Date);
    VAR
      ReservEntry@1000 : Record 337;
    BEGIN
      WITH ReservEntry DO BEGIN
        SETRANGE("Item No.",ItemJournalLine."Item No.");
        SETRANGE("Source Type",DATABASE::"Item Journal Line");
        SETRANGE("Source ID",ItemJournalLine."Journal Template Name");
        SETRANGE("Source Batch Name",ItemJournalLine."Journal Batch Name");
        SETRANGE("Source Ref. No.",ItemJournalLine."Line No.");
        FINDFIRST;
        VALIDATE("Expiration Date",ExpirationDate);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateInventoryFromWarehouseJournal@28(VAR WarehouseJournalLine@1000 : Record 7311;Bin@1001 : Record 7354;ItemNo@1002 : Code[20]);
    VAR
      Item@1004 : Record 27;
      ItemJournalBatch@1003 : Record 233;
    BEGIN
      CreateWarehouseJournalLine(WarehouseJournalLine,Bin,ItemNo,1 + LibraryRandom.RandInt(10));  // Used Random Integer Value, should be more than 1.
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",WarehouseJournalLine."Location Code",
        FALSE);  // false for Batch Job.
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Item);
      Item.GET(ItemNo);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateSalesReceivableSetup@67(CreditWarnings@1003 : Option;StockoutWarning@1002 : Boolean);
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Credit Warnings",CreditWarnings);
      SalesReceivablesSetup.VALIDATE("Stockout Warning",StockoutWarning);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE WhiteLocationSetup@27(VAR Bin@1000 : Record 7354);
    VAR
      Location@1001 : Record 14;
      WarehouseEmployee@1002 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,1);  // Use 1 for No. of Bins per Zone.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
      LibraryWarehouse.FindBin(Bin,Location.Code,FindPickZone(Location.Code),1);  // 1 is for Bin Index.
    END;

    LOCAL PROCEDURE CreateItemInventoryAtLocation@137(VAR ItemNo@1000 : Code[20];VAR LocationCode@1001 : Code[10]) Quantity : Decimal;
    VAR
      ItemJournalLine@1005 : Record 83;
      Location@1004 : Record 14;
    BEGIN
      CreateLocation(Location,FALSE,FALSE);
      LocationCode := Location.Code;
      ItemNo := LibraryInventory.CreateItemNo;
      Quantity := LibraryRandom.RandInt(10);
      CreateItemJournalLineWithBin(ItemJournalLine,ItemNo,Quantity,LocationCode,'');
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateReleasedItemSalesOrderFromLocation@163(VAR SalesHeader@1002 : Record 36;ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];Quantity@1003 : Decimal);
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo,ItemNo,
        Quantity,LocationCode,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateReleasedItemPurchaseReturnOrderFromLocation@173(VAR PurchaseHeader@1002 : Record 38;ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];Quantity@1003 : Decimal);
    VAR
      PurchaseLine@1004 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchaseDocumentWithItem(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Return Order",LibraryPurchase.CreateVendorNo,ItemNo,
        Quantity,LocationCode,WORKDATE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateReleasedItemTransferOrderFromLocationToSomeNewLocation@181(VAR TransferHeader@1002 : Record 5740;ItemNo@1000 : Code[20];FromLocationCode@1001 : Code[10];Quantity@1003 : Decimal);
    VAR
      ToLocation@1006 : Record 14;
      TransitLocation@1005 : Record 14;
      TransferRoute@1008 : Record 5742;
      TransferLine@1007 : Record 5741;
    BEGIN
      LibraryWarehouse.CreateLocation(ToLocation);
      LibraryWarehouse.CreateInTransitLocation(TransitLocation);
      LibraryInventory.CreateTransferRoute(TransferRoute,FromLocationCode,ToLocation.Code);
      TransferRoute.VALIDATE("In-Transit Code",TransitLocation.Code);
      TransferRoute.MODIFY(TRUE);

      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocation.Code,TransitLocation.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateReleasedAssemblyOrder@261(VAR AssemblyHeader@1000 : Record 900);
    VAR
      TempAssemblyLine@1009 : TEMPORARY Record 901;
      Location@1001 : Record 14;
      BinCodes@1003 : ARRAY [2] OF Code[20];
    BEGIN
      CreateLocation(Location,TRUE,FALSE);
      SetupBinsForLocation(Location.Code,BinCodes);
      SetupToAssemblyBin(Location.Code,BinCodes[2]);

      LibraryAssembly.CreateAssemblyOrder(AssemblyHeader,WORKDATE,Location.Code,LibraryRandom.RandIntInRange(1,3));
      LibraryAssembly.AddCompInventoryToBin(AssemblyHeader,WORKDATE,0,AssemblyHeader."Location Code",BinCodes[1]);
      LibraryAssembly.PrepareOrderPosting(AssemblyHeader,TempAssemblyLine,100,100,TRUE,WORKDATE);
      CODEUNIT.RUN(CODEUNIT::"Release Assembly Document",AssemblyHeader);
    END;

    LOCAL PROCEDURE SetupBinsForLocation@277(LocationCode@1000 : Code[10];VAR BinCodes@1001 : ARRAY [2] OF Code[20]);
    VAR
      Bin@1002 : Record 7354;
      Counter@1003 : Integer;
    BEGIN
      FOR Counter := 1 TO ARRAYLEN(BinCodes) DO BEGIN
        BinCodes[Counter] := LibraryUtility.GenerateGUID;
        LibraryWarehouse.CreateBin(Bin,LocationCode,BinCodes[Counter],'','');
      END;
    END;

    LOCAL PROCEDURE SetupToAssemblyBin@269(LocationCode@1000 : Code[10];BinCode@1001 : Code[20]);
    VAR
      Location@1002 : Record 14;
    BEGIN
      WITH Location DO BEGIN
        GET(LocationCode);
        "To-Assembly Bin Code" := BinCode;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@127(VAR ItemLedgerEntry@1000 : Record 32;LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    BEGIN
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Sale);
      ItemLedgerEntry.SETRANGE("Location Code",LocationCode);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD("Item No.",ItemNo);
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPhysInventoryLedger@35(ItemJournalLine@1002 : Record 83);
    VAR
      PhysInventoryLedgerEntry@1000 : Record 281;
    BEGIN
      PhysInventoryLedgerEntry.SETRANGE("Document No.",ItemJournalLine."Document No.");
      PhysInventoryLedgerEntry.SETRANGE("Item No.",ItemJournalLine."Item No.");
      PhysInventoryLedgerEntry.FINDFIRST;
      PhysInventoryLedgerEntry.TESTFIELD(Quantity,ItemJournalLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyRequisitionLine@13(No@1003 : Code[20];LocationCode@1002 : Code[10];Quantity@1001 : Decimal;ActionMessage@1000 : Option;AcceptActionMessage@1005 : Boolean;RefOrderStatus@1006 : Option);
    VAR
      RequisitionLine@1004 : Record 246;
    BEGIN
      FindRequisitionLine(RequisitionLine,No,LocationCode);
      RequisitionLine.TESTFIELD("Action Message",ActionMessage);
      RequisitionLine.TESTFIELD("Accept Action Message",AcceptActionMessage);
      RequisitionLine.TESTFIELD("Ref. Order Type",RequisitionLine."Ref. Order Type"::"Prod. Order");
      RequisitionLine.TESTFIELD("Ref. Order Status",RefOrderStatus);
      RequisitionLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyReserveQuantity@61(ItemNo@1001 : Code[20];DocumentNo@1003 : Code[20];LocationCode@1004 : Code[10];EntryType@1005 : Option;Quantity@1000 : Decimal);
    VAR
      ItemLedgerEntry@1002 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ItemLedgerEntry.SETRANGE("Location Code",LocationCode);
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.SETRANGE("Posting Date",WORKDATE);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.CALCFIELDS("Reserved Quantity");
      ItemLedgerEntry.TESTFIELD("Reserved Quantity",Quantity);
    END;

    LOCAL PROCEDURE VerifyProdComponentUnitCost@50(Status@1004 : Option;ProdOrderNo@1000 : Code[20];UnitCost@1001 : Decimal);
    VAR
      ProdOrderComponent@1002 : Record 5407;
      ComponentCost@1003 : Decimal;
    BEGIN
      ProdOrderComponent.SETRANGE(Status,Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComponent.FINDSET;
      REPEAT
        ComponentCost += ProdOrderComponent."Unit Cost";
      UNTIL ProdOrderComponent.NEXT = 0;
      Assert.AreNearlyEqual(UnitCost,ComponentCost,LibraryERM.GetAmountRoundingPrecision,CostMustBeSame);
    END;

    LOCAL PROCEDURE VerifyUnitCostOnItemAfterAdjustment@122(ProdOrderNo@1005 : Code[20];ItemNo@1004 : Code[20]);
    VAR
      Item@1002 : Record 27;
      ItemLedgerEntry@1003 : Record 32;
      TotalQuantity@1000 : Decimal;
      TotalCost@1001 : Decimal;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Document No.",ProdOrderNo);
      ItemLedgerEntry.FINDSET;
      REPEAT
        ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
        TotalQuantity += ItemLedgerEntry.Quantity;
        TotalCost += ItemLedgerEntry."Cost Amount (Actual)";
      UNTIL ItemLedgerEntry.NEXT = 0;

      Item.GET(ItemNo);
      Assert.AreNearlyEqual(Item."Unit Cost",TotalCost / TotalQuantity,LibraryERM.GetAmountRoundingPrecision,CostMustBeSame);
    END;

    LOCAL PROCEDURE VerifyWarehouseEntries@64(ItemNo@1000 : Code[20];LocationCode@1005 : Code[10];WhseDocumentNo@1001 : Code[20];Quantity@1004 : Decimal;EntryType@1003 : Integer);
    VAR
      WarehouseEntry@1002 : Record 7312;
    BEGIN
      WarehouseEntry.SETRANGE("Entry Type",EntryType);
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      WarehouseEntry.SETRANGE("Location Code",LocationCode);
      WarehouseEntry.SETRANGE("Whse. Document No.",WhseDocumentNo);
      WarehouseEntry.FINDFIRST;
      WarehouseEntry.TESTFIELD(Quantity,Quantity);
      WarehouseEntry.TESTFIELD("Qty. (Base)",Quantity);
    END;

    LOCAL PROCEDURE VerifyWhseActivityLine@72(SalesLine@1001 : Record 37;Quantity@1002 : Decimal);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityNo(WarehouseActivityLine,DATABASE::"Sales Line",SalesLine."Document No.",SalesLine."Location Code");
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityLine.TESTFIELD("Item No.",SalesLine."No.");
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
      WarehouseActivityLine.TESTFIELD("Qty. to Handle",Quantity);
    END;

    [ModalPageHandler]
    PROCEDURE CreateOrderFromSalesPageHandler@68(VAR CreateOrderFromSales@1000 : Page 99000884;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::Yes;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@63(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue Variable.
      Assert.IsTrue(STRPOS(ConfirmMessage,ExpectedMessage) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE CreateWhseMovementPageHandler@178(VAR WhseSourceCreateDocument@1000 : TestRequestPage 7305);
    BEGIN
      WhseSourceCreateDocument.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CreatePickPageHandler@79(VAR CreatePick@1000 : TestRequestPage 5754);
    BEGIN
      CreatePick.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@56(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      OptionValue@1004 : Variant;
      TrackingQuantity@1001 : Decimal;
      TrackingOption@1002 : Option;
      OptionString@1003 : 'SelectEntries,SetValues,AssignLotNo';
    BEGIN
      LibraryVariableStorage.Dequeue(OptionValue);  // Dequeue variable.
      TrackingOption := OptionValue;  // To convert Variant into Option.
      CASE TrackingOption OF
        OptionString::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
        OptionString::SetValues:
          BEGIN
            TrackingQuantity := ItemTrackingLines.Quantity3.ASDECIMAL;
            ItemTrackingLines."Lot No.".SETVALUE(LibraryUtility.GenerateGUID);
            ItemTrackingLines."Quantity (Base)".SETVALUE(TrackingQuantity / 2);  // Using half value to assign the Quantity equally in both the ITem Tracking Line.
            ItemTrackingLines.NEXT;
            ItemTrackingLines."Lot No.".SETVALUE(LibraryUtility.GenerateGUID);
            ItemTrackingLines."Quantity (Base)".SETVALUE(TrackingQuantity / 2);  // Using half value to assign the Quantity equally in both the ITem Tracking Line.
          END;
        OptionString::AssignLotNo:
          BEGIN
            ItemTrackingLines."Assign Lot No.".INVOKE;
            LibraryVariableStorage.Enqueue(ItemTrackingLines."Lot No.".VALUE);
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@98(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@106(Message@1000 : Text[1024]);
    VAR
      ExpectedMessage@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue Variable.
      Assert.IsTrue(STRPOS(Message,ExpectedMessage) > 0,Message);
    END;

    [ModalPageHandler]
    PROCEDURE PickSelectionPageHandler@100(VAR PickSelection@1000 : TestPage 7343);
    VAR
      DocumentNo@1002 : Variant;
      LocationCode@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DocumentNo);  // Dequeue Variable.
      LibraryVariableStorage.Dequeue(LocationCode);  // Dequeue Variable.
      PickSelection."Document No.".ASSERTEQUALS(DocumentNo);
      PickSelection."Location Code".ASSERTEQUALS(LocationCode);
      PickSelection.OK.INVOKE;
    END;

    LOCAL PROCEDURE UpdateSalesOrderQuantity@114(SalesOrderNo@1000 : Code[20];NewQuantity@1002 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE("Document No.",SalesOrderNo);
        FINDFIRST;
        VALIDATE(Quantity,NewQuantity);
        MODIFY(TRUE);
      END;
    END;

    [ModalPageHandler]
    PROCEDURE WhseItemTrackingLinesPageHandler@136(VAR WhseItemTrackingLines@1000 : TestPage 6550);
    BEGIN
      WhseItemTrackingLines."Lot No.".ASSISTEDIT;
      WhseItemTrackingLines.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CreatePickReportHandler@111(VAR CreatePickReqPage@1000 : TestRequestPage 7323);
    BEGIN
      CreatePickReqPage.CInvtPick.SETVALUE(TRUE);
      CreatePickReqPage.OK.INVOKE;
    END;

    LOCAL PROCEDURE VerifyInventoryPickLine@131(SalesOrderNo@1000 : Code[20];LotNo@1001 : Code[20];PickQty@1002 : Decimal);
    VAR
      WhseActivityLine@1003 : Record 5767;
      SalesHeader@1004 : Record 36;
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesOrderNo);
      WITH WhseActivityLine DO BEGIN
        SETRANGE("Activity Type","Activity Type"::"Invt. Pick");
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source Subtype","Source Subtype"::"1");
        SETRANGE("Source No.",SalesOrderNo);
        SETRANGE("Lot No.",LotNo);
        SETRANGE("Destination Type","Destination Type"::Customer);
        SETRANGE("Destination No.",SalesHeader."Sell-to Customer No.");
        FINDFIRST;

        Assert.AreEqual(Quantity,PickQty,'');
      END;
    END;

    LOCAL PROCEDURE VerifyInventoryPickLines@168(SalesOrderNo@1000 : Code[20];LotNos@1001 : ARRAY [2] OF Code[20];Lot1Qty@1002 : Decimal;Lot2Qty@1003 : Decimal);
    BEGIN
      VerifyInventoryPickLine(SalesOrderNo,LotNos[1],Lot1Qty);
      VerifyInventoryPickLine(SalesOrderNo,LotNos[2],Lot2Qty);
    END;

    [MessageHandler]
    PROCEDURE MsgHandler@202(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE AvailabilityWindowHandler@220(VAR AsmAvailability@1000 : Page 908;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::Yes; // always confirm
    END;

    BEGIN
    {
      // [FEATURE] [SCM]
      Miscellaneous Test for SCM Inventory:
       1. Verify Item can be adjusted through Physical Inventory Journal with Non-Warehouse Location.
       2. Verify Physical Inventory Ledger after updating Qty(Physical Inventory) on Physical Inventory Journal with Non-Warehouse Location.
       3. Verify Item can be adjusted through Warehouse Physical Inventory Journal with Warehouse Location.
       4. Verify Error when Item is to be adjusted through Physical Inventory Journal with Warehouse Location.
       5. Verify Physical Inventory Ledger after posting Physical Inventory Journal with Warehouse Location.
       6. Verify Planning Lines generated through Calculate Regenerative Plan after creating Sales Order for Production Item with Warehouse Location.
       7. Verify Pick can be created from Production Order.
       8. Verify Planning Lines generated through Calculate Regenerative Plan after creating Released Production Order.
       9. Verify Unit Cost on Sales Line using Production Order and Reservation.
      10. Verify Cost Amount Actual in Item Ledger Entry after Adjustment.
      11. Verify message during used option Create Inv. Pick/Put Away on Sales Order. Verification done in Message Handler.
      12. Verify Warehouse Activity Line after create Pick from Whse. Shipment created from Sales Order.
      13. Verify error while creating Whse. Shipment from Sales Order for non-stock Item.
      14. Verify Warehouse Activity Line after create Pick from Whse. Shipment created from Sales Order with InStock and OutStock Item with Partial Shipping Advice.
      15. Verify Warehouse Entry with Item Tracking.
      16. Verify Message while pick created from Warehouse Shipment Header.
      17. Verify Warehouse Activity Line after pick created from Warehouse Shipment Header.
      18. Verify Get Warehouse Shipment from Pick Worksheet.
      19. Verify Warehouse Activity Line after Pick creation form Pick Worksheet.
      20. Verify Warehouse Entry created from Warehouse Shipment after Pick creation form Pick Worksheet.
      21. Verify Error while Warehouse Register with exceeded Quantity and new Lot No.
      22. Verify Warehouse Entry with Item Tracking after posting Warehouse Shipment.
      23. Verify Warehouse Entry after Register Warehouse Movement with Item Tracking.
      24. Verify Error while Register Warehouse Movement without Item Tracking, Quantity received from Warehouse Purch. Receipt with Item Tracking.
      25. Verify Warehouse Entry after Pick Created From Warehouse Shipment With Item Tracking after Register and Post Item Journal with IT.
      26. Verify Item Ledger Entry after posting Inventory Pick.
      27. Verify Lots for an inventory pick are suggested according to FEFO when no bins exist for location
      28. Verify Lots for an inventory pick are suggested according to FEFO with partial reservation
      29. Verify Lots for an inventory pick are suggested according to FEFO on location with bins

      Covers Test cases: for WI - 290945
      --------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                TFS ID
      --------------------------------------------------------------------------------------------------------
      PhysInventoryJournalWithNonWMSLocation,PostPhysInventoryJournalWithNonWMSLocation                 229544
      WhsePhysInventoryJournalWithWMSLocation,PhysInventoryQuantityErrorWithWMSLocation
      PostPhysInventoryJournalWithWMSLocation                                                           229545

      Covers Test cases: for WI - 290187
      ---------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                TFS ID
      ---------------------------------------------------------------------------------------------------------
      PlanningLinesForSalesOrder, PickForProctionOrder, PlanningLinesForReleasedProductionOrder         135580

      Covers Test cases: for WI - 295146
      ---------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                TFS ID
      ---------------------------------------------------------------------------------------------------------
      UnitCostOnSalesOrderUsingProdOrderAndReservation                                                  135525
      AdjustmentUsingProdOrderConsumptionAndOutput                                                      135562

      Covers Test cases: for WI - 298158
      ---------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                TFS ID
      ---------------------------------------------------------------------------------------------------------
      CreateInvPickFromSalesOrder, CreatePickFromSalesOrder, ErrorOnCreationOfPickForOutStockItem,
      CreatePickForInStockItemOnSalesOrder                                                              135452

      Covers Test cases: for WI - 298162
      ---------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                TFS ID
      ---------------------------------------------------------------------------------------------------------
      CreateWhseRcptAndCalcPhysInvWithIT                                                                298162

      Covers Test cases: for WI - 292586
      ---------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                TFS ID
      ---------------------------------------------------------------------------------------------------------
      ReservedQuantityInSalesOrder                                                                      294779

      Covers Test cases: for WI - 304877
      ---------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                TFS ID
      ---------------------------------------------------------------------------------------------------------
      PickCreationMessageFromWhseShipment,WarehousePickWithIT,ShowWarehouseShipementFromPickWorksheet,
      WhseShipmentAfterPickCreatedFromPickWorksheetWithIT,CreatePickFromPickWorksheetWithIT,
      ErrorOnWhseRegisterForExceededQuantitytWithIT,RegisterAndPostWhseShipmentWithIT                   129261

      Covers Test cases: for WI - 306291
      ---------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                TFS ID
      ---------------------------------------------------------------------------------------------------------
      RegisterWhseMovementWithIT,RegisterWhseMovemenErrortWithoutIT,SuggestItemForAdjustmentBin
      FEFOOnPickInventory                                                                               129262

      Covers Test cases: for WI - 356264
      ---------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                TFS ID
      ---------------------------------------------------------------------------------------------------------
      TFS356264_ItemPickedAccordingToFEFO                                                               356264
      TFS356264_ItemPickedAccordingToFEFOWithReservation                                                356264
      TFS356264_ItemPickedAccordingToFEFOWithBinMandatory                                               356264
    }
    END.
  }
}

