OBJECT Codeunit 134091 ERM Additional Currency II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1002 : Codeunit 131300;
      LibraryPurchase@1003 : Codeunit 130512;
      LibrarySales@1004 : Codeunit 130509;
      LibraryService@1009 : Codeunit 131902;
      LibraryERMUnapply@1006 : Codeunit 131301;
      LibraryRandom@1001 : Codeunit 130440;
      Assert@1005 : Codeunit 130000;
      IsInitialized@1000 : Boolean;
      WrongAmountErr@1007 : TextConst 'ENU=%1 must be %2 in %3.';
      WrongBankAccLedgEntryAmtErr@1008 : TextConst 'ENU=Wrong %1 in Bank Account Ledger Entry.';

    [Test]
    PROCEDURE PostGeneralJournalFCY@83();
    VAR
      CustomerPostingGroup@1012 : Record 92;
      Customer@1011 : Record 18;
      GenJournalLine@1004 : Record 81;
      CurrencyCode@1000 : Code[10];
      Amount@1013 : Decimal;
      AmountLCY@1001 : Decimal;
      DocumentNo@1005 : Code[20];
    BEGIN
      // Verify Additional Currency Amount in GL Entry and Amount on Cust. Ledger Entry after Posting General Journal Line
      // with Customer and GL Account.

      // Setup: Update Additional Currency in General Ledger Setup and Create Currency with Customer.
      Initialize;
      CurrencyCode := CreateCurrencyAndExchangeRate;
      UpdateAddnlReportingCurrency(CurrencyCode);
      Amount := LibraryRandom.RandDec(100,2);
      AmountLCY := ROUND(LibraryERM.ConvertCurrency(Amount,'',CurrencyCode,WORKDATE));
      Customer.GET(CreateCustomer(CurrencyCode));

      // Exercise: Create General Invoices with GL Account and Customer.
      DocumentNo :=
        CreateAndPostGenLines(
          GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer,Customer."No.",AmountLCY,-Amount);

      // Verify: Verify Additional Currency on GL Entry and Amount on Customer Ledger Entry.

      CustomerPostingGroup.GET(Customer."Customer Posting Group");
      VerifyGLEntry(DocumentNo,CustomerPostingGroup."Receivables Account",AmountLCY);
      VerifyCustomerLedgerEntry(DocumentNo,AmountLCY);
    END;

    [Test]
    PROCEDURE PaymentGeneralJournalFCY@7();
    VAR
      CustLedgerEntry@1002 : Record 21;
      CustomerPostingGroup@1012 : Record 92;
      Customer@1011 : Record 18;
      GenJournalLine@1004 : Record 81;
      CurrencyCode@1000 : Code[10];
      Amount@1013 : Decimal;
      AmountLCY@1001 : Decimal;
      DocumentNo@1005 : Code[20];
    BEGIN
      // Verify Additional Currency Amount in GL Entry after Posting General Journal Line with Customer and GL Account
      // with Payment Posted Invoices.

      // Setup: Update Additional Currency in General Ledger Setup and Create Currency with Customer.
      Initialize;
      CurrencyCode := CreateCurrencyAndExchangeRate;
      UpdateAddnlReportingCurrency(CurrencyCode);
      Amount := LibraryRandom.RandDec(100,2);
      AmountLCY := ROUND(LibraryERM.ConvertCurrency(Amount,'',CurrencyCode,WORKDATE));
      Customer.GET(CreateCustomer(CurrencyCode));
      CreateAndPostGenLines(
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer,Customer."No.",AmountLCY,-Amount);

      // Exercise: Create General Invoices with GL Account and Customer.
      DocumentNo :=
        CreateAndPostGenLines(
          GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer,Customer."No.",-AmountLCY,Amount);

      // Verify: Verify Additional Currency in GL Entry and Remaining Amount LCY on Customer Ledger Entry.
      CustomerPostingGroup.GET(Customer."Customer Posting Group");
      VerifyGLEntry(DocumentNo,CustomerPostingGroup."Receivables Account",-AmountLCY);
      VerifyZeroCustRemainingAmountLCY(CustLedgerEntry."Document Type"::Payment,DocumentNo);
    END;

    [Test]
    PROCEDURE SalesInvoiceWithFCY@48();
    VAR
      GeneralLedgerSetup@1007 : Record 98;
      CustLedgerEntry@1006 : Record 21;
      SalesHeader@1019 : Record 36;
      CustomerPostingGroup@1012 : Record 92;
      CurrencyCode@1000 : Code[10];
      AmountLCY@1004 : Decimal;
      DocumentNo@1005 : Code[20];
      LineAmount@1002 : Decimal;
    BEGIN
      // Verify Additional Currency Amount in GL Entry after Posting Sales Invoice.

      // Setup: Update Additional Currency in General Ledger Setup and Create Currency with Customer.
      Initialize;
      CurrencyCode := CreateCurrencyAndExchangeRate;
      UpdateAddnlReportingCurrency(CurrencyCode);
      AmountLCY := ROUND(LibraryERM.ConvertCurrency(LibraryRandom.RandDec(100,2),'',CurrencyCode,WORKDATE));

      // Exercise.
      LineAmount := CreateAndPostSalesInvoice(SalesHeader,AmountLCY,CurrencyCode);
      AmountLCY := ROUND(LibraryERM.ConvertCurrency(LineAmount,CurrencyCode,'',WORKDATE));

      // Verify: Verify GL Entry for Additional Currency Amount after Posting Sales Invoice.
      GeneralLedgerSetup.GET;
      DocumentNo := FindSalesInvoiceHeader(SalesHeader."Sell-to Customer No.");
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,DocumentNo);
      CustLedgerEntry.CALCFIELDS("Remaining Amt. (LCY)","Original Amt. (LCY)");

      CustomerPostingGroup.GET(SalesHeader."Customer Posting Group");
      VerifyGLEntry(DocumentNo,CustomerPostingGroup."Receivables Account",LineAmount);
      Assert.AreNearlyEqual(
        AmountLCY,CustLedgerEntry."Original Amt. (LCY)",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(WrongAmountErr,CustLedgerEntry.FIELDCAPTION("Original Amt. (LCY)"),AmountLCY,CustLedgerEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        AmountLCY,CustLedgerEntry."Remaining Amt. (LCY)",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(WrongAmountErr,CustLedgerEntry.FIELDCAPTION("Remaining Amt. (LCY)"),AmountLCY,CustLedgerEntry.TABLECAPTION));
    END;

    [Test]
    PROCEDURE SalesInvoiceWithPaymentGeneral@17();
    VAR
      CustLedgerEntry@1009 : Record 21;
      GenJournalLine@1004 : Record 81;
      SalesHeader@1019 : Record 36;
      CustomerPostingGroup@1012 : Record 92;
      CurrencyCode@1000 : Code[10];
      Amount@1006 : Decimal;
      DocumentNo@1010 : Code[20];
      LineAmount@1011 : Decimal;
    BEGIN
      // Verify Additional Currency Amount in GL Entry after Posting Sales Invoice with Payment General Line.

      // Setup: Update Additional Currency in General Ledger Setup and Create Currency with Customer and Random Values.
      // Create and Post Sales Invoice.
      Initialize;
      CurrencyCode := CreateCurrencyAndExchangeRate;
      UpdateAddnlReportingCurrency(CurrencyCode);
      Amount := LibraryRandom.RandDec(100,2);
      LineAmount := CreateAndPostSalesInvoice(SalesHeader,Amount,CurrencyCode);

      // Exercise: Post Payment General Line with Posted Invoice.
      CreateAndPostGenLines(
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer,
        SalesHeader."Sell-to Customer No.",-LineAmount,Amount);

      // Verify: Verify GL Entry for Additional Currency Amount after Posting Sales Invoice and Remaining Amount on Customer
      // Ledger Entry.
      CustomerPostingGroup.GET(SalesHeader."Customer Posting Group");
      DocumentNo := FindSalesInvoiceHeader(SalesHeader."Sell-to Customer No.");
      VerifyGLEntry(DocumentNo,CustomerPostingGroup."Receivables Account",LineAmount);
      VerifyZeroCustRemainingAmountLCY(CustLedgerEntry."Document Type"::Invoice,DocumentNo);
    END;

    [Test]
    PROCEDURE SalesInvoiceWithPaymentGeneralAndRealizedLoss@19();
    BEGIN
      // Verify Additional Currency Amount of Realized Loss G/L Entry
      // after Posting Sales Invoice with Payment General Line
      // in case of increasing Exchange Rate Amount
      SalesInvoiceWithPaymentGeneralAndModifiedExchRate(TRUE,FALSE);
    END;

    [Test]
    PROCEDURE SalesInvoiceWithPaymentGeneralAndRealizedGain@10();
    BEGIN
      // Verify Additional Currency Amount of Realized Gain G/L Entry
      // after Posting Sales Invoice with Payment General Line
      // in case of decreasing Exchange Rate Amount
      SalesInvoiceWithPaymentGeneralAndModifiedExchRate(FALSE,FALSE);
    END;

    [Test]
    PROCEDURE SalesInvoiceWithPaymentGeneralAndUnrealizedLoss@37();
    BEGIN
      // Verify Additional Currency Amount of Unrealized Loss G/L Entry
      // after Posting Sales Invoice with Payment General Line
      // in case of increasing Exchange Rate and Adjust Exchange Rate
      SalesInvoiceWithPaymentGeneralAndModifiedExchRate(TRUE,TRUE);
    END;

    [Test]
    PROCEDURE SalesInvoiceWithPaymentGeneralAndUnrealizedGain@38();
    BEGIN
      // Verify Additional Currency Amount of Unrealized Gain G/L Entry
      // after Posting Sales Invoice with Payment General Line
      // in case of decreasing Exchange Rate and Adjust Exchange Rate
      SalesInvoiceWithPaymentGeneralAndModifiedExchRate(FALSE,TRUE);
    END;

    LOCAL PROCEDURE SalesInvoiceWithPaymentGeneralAndModifiedExchRate@14(IsLossEntry@1001 : Boolean;IsAdjustExchRate@1008 : Boolean);
    VAR
      GenJournalLine@1004 : Record 81;
      SalesHeader@1019 : Record 36;
      CurrencyCode@1000 : Code[10];
      InvoiceDocNo@1010 : Code[20];
      PaymentDocNo@1007 : Code[20];
      CurrencyGainsLossesAccNo@1002 : Code[20];
      Amount@1006 : Decimal;
    BEGIN
      Initialize;
      CurrencyCode := CreateCurrencyAndExchangeRate;
      UpdateAddnlReportingCurrency(CurrencyCode);

      Amount := LibraryRandom.RandDec(100,2);
      CreateAndPostSalesInvoice(SalesHeader,Amount,CurrencyCode);
      ModifyExchangeRateAmount(CurrencyCode,IsLossEntry);

      IF IsAdjustExchRate THEN
        LibraryERM.RunAdjustExchangeRatesSimple(CurrencyCode,WORKDATE,WORKDATE);

      InvoiceDocNo := FindSalesInvoiceHeader(SalesHeader."Sell-to Customer No.");
      CreatePostGenJnlLineAndApplyToDoc(
        GenJournalLine."Account Type"::Customer,SalesHeader."Sell-to Customer No.",
        Amount,InvoiceDocNo);
      PaymentDocNo := FindCustPaymentDocNo(SalesHeader."Sell-to Customer No.");

      CurrencyGainsLossesAccNo :=
        GetCurrencyGainsLossesAccNo(CurrencyCode,IsLossEntry,IsAdjustExchRate);
      VerifyZeroAddCurrAmountInGLEntry(PaymentDocNo,CurrencyGainsLossesAccNo);
    END;

    [Test]
    PROCEDURE PurchPostGeneralJournalFCY@13();
    VAR
      VendorPostingGroup@1012 : Record 93;
      Vendor@1011 : Record 23;
      GenJournalLine@1004 : Record 81;
      CurrencyCode@1000 : Code[10];
      Amount@1013 : Decimal;
      AmountLCY@1002 : Decimal;
      DocumentNo@1005 : Code[20];
    BEGIN
      // Verify Additional Currency Amount in GL Entry and Amount on Vendor Ledger Entry after Posting General Journal Line
      // with Vendor and GL Account.

      // Setup: Update Additional Currency in General Ledger Setup and Create Currency with Vendor.
      Initialize;
      CurrencyCode := CreateCurrencyAndExchangeRate;
      UpdateAddnlReportingCurrency(CurrencyCode);
      Amount := LibraryRandom.RandDec(100,2);
      AmountLCY := ROUND(LibraryERM.ConvertCurrency(Amount,'',CurrencyCode,WORKDATE));
      Vendor.GET(CreateVendor(CurrencyCode));

      // Exercise: Create General Invoices with GL Account.
      DocumentNo :=
        CreateAndPostGenLines(
          GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Vendor,Vendor."No.",-AmountLCY,Amount);

      // Verify: Verify Additional Currency on GL Entry and Amount on Vendor Ledger Entry.
      VendorPostingGroup.GET(Vendor."Vendor Posting Group");
      VerifyGLEntry(DocumentNo,VendorPostingGroup."Payables Account",-AmountLCY);
      VerifyVendorLedgerEntry(DocumentNo,AmountLCY);
    END;

    [Test]
    PROCEDURE PurchPaymentGeneralJournalFCY@3();
    VAR
      VendorLedgerEntry@1014 : Record 25;
      VendorPostingGroup@1012 : Record 93;
      Vendor@1011 : Record 23;
      GenJournalLine@1004 : Record 81;
      CurrencyCode@1000 : Code[10];
      Amount@1013 : Decimal;
      AmountLCY@1002 : Decimal;
      DocumentNo@1005 : Code[20];
    BEGIN
      // Verify Additional Currency Amount in GL Entry and Amount after Posting Invoice and payment General Journal Line

      // Setup: Update Additional Currency in General Ledger Setup and Create Currency with Vendor.
      Initialize;
      CurrencyCode := CreateCurrencyAndExchangeRate;
      UpdateAddnlReportingCurrency(CurrencyCode);
      Amount := LibraryRandom.RandDec(100,2);
      AmountLCY := ROUND(LibraryERM.ConvertCurrency(Amount,'',CurrencyCode,WORKDATE));
      Vendor.GET(CreateVendor(CurrencyCode));

      // Exercise: Create and Post Invoice and Payment General.
      CreateAndPostGenLines(
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Vendor,Vendor."No.",-AmountLCY,Amount);
      DocumentNo :=
        CreateAndPostGenLines(
          GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Vendor,Vendor."No.",AmountLCY,Amount);

      // Verify: Verify Additional Currency on GL Entry and Amount on Vendor Ledger Entry.
      VendorPostingGroup.GET(Vendor."Vendor Posting Group");
      VerifyGLEntry(DocumentNo,VendorPostingGroup."Payables Account",AmountLCY);
      VerifyZeroVendRemainingAmountLCY(VendorLedgerEntry."Document Type"::Payment,DocumentNo);
    END;

    [Test]
    PROCEDURE PurchInvoiceWithFCY@11();
    VAR
      GeneralLedgerSetup@1007 : Record 98;
      VendorLedgerEntry@1006 : Record 25;
      PurchaseHeader@1019 : Record 38;
      VendorPostingGroup@1012 : Record 93;
      CurrencyCode@1000 : Code[10];
      AmountLCY@1004 : Decimal;
      DocumentNo@1005 : Code[20];
      LineAmount@1002 : Decimal;
    BEGIN
      // Verify Additional Currency Amount in GL Entry after Posting Purchase Invoice.

      // Setup: Update Additional Currency in General Ledger Setup and Create Currency with Customer and Random Values.
      Initialize;
      CurrencyCode := CreateCurrencyAndExchangeRate;
      UpdateAddnlReportingCurrency(CurrencyCode);
      AmountLCY := ROUND(LibraryERM.ConvertCurrency(LibraryRandom.RandDec(100,2),'',CurrencyCode,WORKDATE));

      // Exercise.
      LineAmount := CreateAndPostPurchaseInvoice(PurchaseHeader,DocumentNo,AmountLCY,CurrencyCode);

      // Verify: Verify GL Entry for Additional Currency Amount after Posting Purchase Invoice.
      AmountLCY := ROUND(LibraryERM.ConvertCurrency(LineAmount,CurrencyCode,'',WORKDATE));
      VendorPostingGroup.GET(PurchaseHeader."Vendor Posting Group");
      VerifyGLEntry(DocumentNo,VendorPostingGroup."Payables Account",-LineAmount);

      GeneralLedgerSetup.GET;
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,DocumentNo);
      VendorLedgerEntry.CALCFIELDS("Remaining Amt. (LCY)","Original Amt. (LCY)");
      Assert.AreNearlyEqual(
        -AmountLCY,VendorLedgerEntry."Original Amt. (LCY)",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(WrongAmountErr,VendorLedgerEntry.FIELDCAPTION("Original Amt. (LCY)"),-AmountLCY,VendorLedgerEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        -AmountLCY,VendorLedgerEntry."Remaining Amt. (LCY)",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(WrongAmountErr,VendorLedgerEntry.FIELDCAPTION("Remaining Amt. (LCY)"),-AmountLCY,VendorLedgerEntry.TABLECAPTION));
    END;

    [Test]
    PROCEDURE PurchInvoiceWithPaymentGeneral@18();
    VAR
      VendorLedgerEntry@1009 : Record 25;
      GenJournalLine@1004 : Record 81;
      PurchaseHeader@1019 : Record 38;
      VendorPostingGroup@1012 : Record 93;
      CurrencyCode@1000 : Code[10];
      Amount@1006 : Decimal;
      DocumentNo@1010 : Code[20];
      LineAmount@1011 : Decimal;
    BEGIN
      // Verify Additional Currency Amount in GL Entry after Posting Purchase Invoice with Payment General Line.

      // Setup: Update Additional Currency in General Ledger Setup and Create Currency with Vendor and Random Values.
      Initialize;
      CurrencyCode := CreateCurrencyAndExchangeRate;
      UpdateAddnlReportingCurrency(CurrencyCode);
      Amount := LibraryRandom.RandDec(100,2);
      LineAmount := CreateAndPostPurchaseInvoice(PurchaseHeader,DocumentNo,Amount,CurrencyCode);

      // Exercise.
      CreateAndPostGenLines(
        GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Vendor,PurchaseHeader."Buy-from Vendor No.",LineAmount,-Amount);

      // Verify: Verify GL Entry for Additional Currency Amount after Posting Purchase Invoice and Payment General Line.
      VendorPostingGroup.GET(PurchaseHeader."Vendor Posting Group");
      VerifyGLEntry(DocumentNo,VendorPostingGroup."Payables Account",-LineAmount);
      VerifyZeroVendRemainingAmountLCY(VendorLedgerEntry."Document Type"::Invoice,DocumentNo);
    END;

    [Test]
    PROCEDURE PurchInvoiceWithPaymentGeneralAndRealizedLoss@44();
    BEGIN
      // Verify Additional Currency Amount of Realized Loss G/L Entry
      // after Posting Purchase Invoice with Payment General Line
      // in case of increasing Exchange Rate Amount
      PurchInvoiceWithPaymentGeneralAndModifiedExchRate(TRUE,FALSE);
    END;

    [Test]
    PROCEDURE PurchInvoiceWithPaymentGeneralAndRealizedGain@43();
    BEGIN
      // Verify Additional Currency Amount of Realized Gain G/L Entry
      // after Posting Purchase Invoice with Payment General Line
      // in case of decreasing Exchange Rate Amount
      PurchInvoiceWithPaymentGeneralAndModifiedExchRate(FALSE,FALSE);
    END;

    [Test]
    PROCEDURE PurchInvoiceWithPaymentGeneralAndUnrealizedLoss@42();
    BEGIN
      // Verify Additional Currency Amount of Unrealized Loss G/L Entry
      // after Posting Purchase Invoice with Payment General Line
      // in case of increasing Exchange Rate and Adjust Exchange Rate
      PurchInvoiceWithPaymentGeneralAndModifiedExchRate(TRUE,TRUE);
    END;

    [Test]
    PROCEDURE PurchInvoiceWithPaymentGeneralAndUnrealizedGain@41();
    BEGIN
      // Verify Additional Currency Amount of Unrealized Gain G/L Entry
      // after Posting Purchase Invoice with Payment General Line
      // in case of decreasing Exchange Rate and Adjust Exchange Rate
      PurchInvoiceWithPaymentGeneralAndModifiedExchRate(FALSE,TRUE);
    END;

    LOCAL PROCEDURE PurchInvoiceWithPaymentGeneralAndModifiedExchRate@40(IsLossEntry@1001 : Boolean;IsAdjustExchRate@1008 : Boolean);
    VAR
      GenJournalLine@1004 : Record 81;
      PurchHeader@1019 : Record 38;
      CurrencyCode@1000 : Code[10];
      InvoiceDocNo@1010 : Code[20];
      PaymentDocNo@1007 : Code[20];
      CurrencyGainsLossesAccNo@1002 : Code[20];
      Amount@1006 : Decimal;
    BEGIN
      Initialize;
      CurrencyCode := CreateCurrencyAndExchangeRate;
      UpdateAddnlReportingCurrency(CurrencyCode);

      Amount := LibraryRandom.RandDec(100,2);
      CreateAndPostPurchaseInvoice(PurchHeader,InvoiceDocNo,Amount,CurrencyCode);
      ModifyExchangeRateAmount(CurrencyCode,NOT IsLossEntry);

      IF IsAdjustExchRate THEN
        LibraryERM.RunAdjustExchangeRatesSimple(CurrencyCode,WORKDATE,WORKDATE);

      CreatePostGenJnlLineAndApplyToDoc(
        GenJournalLine."Account Type"::Vendor,PurchHeader."Buy-from Vendor No.",
        -Amount,InvoiceDocNo);
      PaymentDocNo := FindVendPaymentDocNo(PurchHeader."Buy-from Vendor No.");

      CurrencyGainsLossesAccNo :=
        GetCurrencyGainsLossesAccNo(CurrencyCode,IsLossEntry,IsAdjustExchRate);
      VerifyZeroAddCurrAmountInGLEntry(PaymentDocNo,CurrencyGainsLossesAccNo);
    END;

    [Test]
    PROCEDURE SalesUnapplyWithDiffExchRates@21();
    VAR
      CustLedgerEntry@1001 : Record 21;
      CurrencyCode@1002 : Code[10];
      CustNo@1006 : Code[20];
      DocNo@1007 : ARRAY [3] OF Code[20];
      Dates@1000 : ARRAY [2] OF Date;
      Amounts@1003 : ARRAY [3] OF Decimal;
    BEGIN
      Initialize;
      CreateInitDataTFS351444(CurrencyCode,Dates,Amounts,TRUE);
      CustNo := CreateSimpleCustomer(CurrencyCode);

      CreatePostPaymentAnd2Invoices(DocNo,Dates[1],FALSE,CustNo,CurrencyCode,Amounts);
      ApplyPostCustPayment2Invoices(DocNo[1],DocNo[2],DocNo[3]);
      UnapplyAndPostCustEntry(CustNo,DocNo[1],Dates[2]);

      VerifyCustRemainingAmount(CustLedgerEntry."Document Type"::Payment,DocNo[1],-Amounts[1]);
      VerifyCustRemainingAmount(CustLedgerEntry."Document Type"::Invoice,DocNo[2],-Amounts[2]);
      VerifyCustRemainingAmount(CustLedgerEntry."Document Type"::Invoice,DocNo[3],-Amounts[3]);
    END;

    [Test]
    PROCEDURE PurchUnapplyWithDiffExchRates@29();
    VAR
      VendLedgerEntry@1003 : Record 25;
      CurrencyCode@1002 : Code[10];
      VendNo@1006 : Code[20];
      DocNo@1007 : ARRAY [3] OF Code[20];
      Dates@1000 : ARRAY [2] OF Date;
      Amounts@1001 : ARRAY [3] OF Decimal;
    BEGIN
      Initialize;
      CreateInitDataTFS351444(CurrencyCode,Dates,Amounts,FALSE);
      VendNo := CreateSimpleVendor(CurrencyCode);

      CreatePostPaymentAnd2Invoices(DocNo,Dates[1],TRUE,VendNo,CurrencyCode,Amounts);
      ApplyPostVendPayment2Invoices(DocNo[1],DocNo[2],DocNo[3]);
      UnapplyAndPostVendEntry(VendNo,DocNo[1],Dates[2]);

      VerifyVendRemainingAmount(VendLedgerEntry."Document Type"::Payment,DocNo[1],-Amounts[1]);
      VerifyVendRemainingAmount(VendLedgerEntry."Document Type"::Invoice,DocNo[2],-Amounts[2]);
      VerifyVendRemainingAmount(VendLedgerEntry."Document Type"::Invoice,DocNo[3],-Amounts[3]);
    END;

    [Test]
    PROCEDURE ServiceInvoiceWithPmtBalAccountNo@46();
    VAR
      PaymentMethod@1001 : Record 289;
      ServiceHeader@1002 : Record 5900;
      CurrencyCode@1000 : Code[10];
      ServiceInvNo@1004 : Code[20];
      TotalAmount@1003 : Decimal;
    BEGIN
      // [FEATURE] [Service] [Payment Method]
      // [SCENARIO 362623] Service Invoice with Additional Currency and Payment Method with "Bal. Account No."

      Initialize;
      // [GIVEN] "Additional Currency Code" = "X"
      CurrencyCode := CreateCurrencyAndExchangeRate;
      UpdateAddnlReportingCurrency(CurrencyCode);
      // [GIVEN] Payment Method with Bal. Account No. = "Y"
      CreatePaymentMethodWithBalAccount(PaymentMethod);
      // [GIVEN] Service Order with Currency Code = "X", Payment Method with Bal. Account No. = "Y" and Amount = 100
      TotalAmount :=
        CreateServiceOrderWithCurrencyCodeAndPmtMethod(ServiceHeader,CurrencyCode,PaymentMethod.Code);

      // [WHEN] Post Service Order
      ServiceInvNo := PostServiceOrder(ServiceHeader);

      // [THEN] G/L Entry with Account No. = "Y" is created and Additional Currency Amount = 100
      VerifyACYOnServiceOrderGLEntry(ServiceInvNo,PaymentMethod."Bal. Account No.",TotalAmount);
    END;

    LOCAL PROCEDURE CreatePaymentMethodWithBalAccount@67(VAR PaymentMethod@1000 : Record 289);
    BEGIN
      WITH PaymentMethod DO BEGIN
        LibraryERM.CreatePaymentMethod(PaymentMethod);
        VALIDATE("Bal. Account Type","Bal. Account Type"::"G/L Account");
        VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateInitDataTFS351444@36(VAR CurrencyCode@1009 : Code[10];VAR Dates@1006 : ARRAY [2] OF Date;VAR Amounts@1005 : ARRAY [3] OF Decimal;IsCust@1000 : Boolean);
    VAR
      i@1001 : Integer;
    BEGIN
      Dates[1] := WORKDATE;
      Dates[2] := CALCDATE('<1M>',Dates[1]);
      Amounts[1] := -9858.77;
      Amounts[2] := 5338.86;
      Amounts[3] := 4519.91;
      IF IsCust THEN
        FOR i := 1 TO ARRAYLEN(Amounts) DO
          Amounts[i] := -Amounts[i];
      CurrencyCode := CreateCurrency;
      CreateAddExchRate(CurrencyCode,Dates[1],0.857);
      CreateAddExchRate(CurrencyCode,Dates[2],0.85365);
      UpdateAddnlReportingCurrency(CurrencyCode);
    END;

    LOCAL PROCEDURE CreatePostPaymentAnd2Invoices@32(VAR DocNo@1000 : ARRAY [3] OF Code[20];PostingDate@1001 : Date;IsVend@1003 : Boolean;CVNo@1004 : Code[20];CurrencyCode@1005 : Code[10];Amounts@1006 : ARRAY [3] OF Decimal);
    VAR
      GenJnlLine@1002 : Record 81;
      i@1007 : Integer;
    BEGIN
      DocNo[1] := CreatePostGenJnlLine(
          PostingDate,GenJnlLine."Document Type"::Payment,IsVend,CVNo,CurrencyCode,Amounts[1]);
      FOR i := 2 TO 3 DO
        DocNo[i] := CreatePostGenJnlLine(
            PostingDate,GenJnlLine."Document Type"::Invoice,IsVend,CVNo,CurrencyCode,Amounts[i]);
    END;

    LOCAL PROCEDURE CreatePostGenJnlLine@34(PostingDate@1005 : Date;DocType@1001 : Option;IsVend@1008 : Boolean;CVNo@1002 : Code[20];CurrencyCode@1004 : Code[10];PayAmount@1003 : Decimal) : Code[20];
    VAR
      GenJnlLine@1000 : Record 81;
      BalAccountType@1006 : Option;
    BEGIN
      WITH GenJnlLine DO BEGIN
        IF IsVend THEN
          BalAccountType := "Bal. Account Type"::Vendor
        ELSE
          BalAccountType := "Bal. Account Type"::Customer;
        EXIT(
          CreatePostGenJnlLineWithBalanceAcc(
            PostingDate,DocType,"Account Type"::"G/L Account",LibraryERM.CreateGLAccountNoWithDirectPosting,
            BalAccountType,CVNo,CurrencyCode,PayAmount));
      END;
    END;

    LOCAL PROCEDURE CreatePostGenJnlLineWithBalanceAcc@51(PostingDate@1005 : Date;DocType@1001 : Option;AccountType@1008 : Option;AccountNo@1007 : Code[20];BalAccountType@1010 : Option;BalAccountNo@1009 : Code[20];CurrencyCode@1004 : Code[10];LineAmount@1003 : Decimal) : Code[20];
    VAR
      GenJnlLine@1000 : Record 81;
      GenJnlBatch@1006 : Record 232;
    BEGIN
      SelectClearGenJournalBatch(GenJnlBatch);
      WITH GenJnlLine DO BEGIN
        LibraryERM.CreateGeneralJnlLine(
          GenJnlLine,GenJnlBatch."Journal Template Name",GenJnlBatch.Name,
          DocType,AccountType,AccountNo,LineAmount);
        VALIDATE("External Document No.","Document No.");
        VALIDATE("Posting Date",PostingDate);
        VALIDATE("Bal. Account Type",BalAccountType);
        VALIDATE("Bal. Account No.",BalAccountNo);
        VALIDATE("Currency Code",CurrencyCode);
        VALIDATE(Amount,LineAmount);
        MODIFY(TRUE);
        LibraryERM.PostGeneralJnlLine(GenJnlLine);
        EXIT("Document No.");
      END;
    END;

    LOCAL PROCEDURE CreatePostGenJnlLineAndApplyToDoc@20(AccountType@1001 : Option;AccountNo@1002 : Code[20];PayAmount@1003 : Decimal;AppliesToDocNo@1004 : Code[20]);
    VAR
      GenJournalLine@1008 : Record 81;
      GenJournalBatch@1007 : Record 232;
    BEGIN
      SelectClearGenJournalBatch(GenJournalBatch);
      WITH GenJournalLine DO BEGIN
        LibraryERM.CreateGeneralJnlLine(
          GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
          "Document Type"::Payment,AccountType,AccountNo,-PayAmount);
        VALIDATE("Applies-to Doc. Type","Applies-to Doc. Type"::Invoice);
        VALIDATE("Applies-to Doc. No.",AppliesToDocNo);
        MODIFY(TRUE);
      END;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostGenLines@24(DocumentType@1015 : Option;AccountType@1016 : Option;AccountNo@1017 : Code[20];Amount@1018 : Decimal;Amount2@1019 : Decimal) : Code[20];
    VAR
      GenJournalLine@1011 : Record 81;
      GenJournalBatch@1010 : Record 232;
    BEGIN
      SelectClearGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,AccountType,AccountNo,Amount);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::"G/L Account",GenJournalLine."Bal. Account No.",Amount2);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoice@102(VAR SalesHeader@1000 : Record 36;UnitPrice@1001 : Decimal;CurrencyCode@1003 : Code[10]) : Decimal;
    VAR
      Currency@1004 : Record 4;
      SalesLine@1002 : Record 37;
    BEGIN
      Currency.GET(CurrencyCode);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CreateCustomer(CurrencyCode));
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",
        ModifyGLAccount(LibraryERM.CreateGLAccountNoWithDirectPosting),LibraryRandom.RandInt(10));
      SalesLine.VALIDATE("Unit Price",UnitPrice);
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      EXIT(ROUND(SalesLine."Amount Including VAT",Currency."Invoice Rounding Precision"));
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseInvoice@12(VAR PurchaseHeader@1000 : Record 38;VAR DocumentNo@1005 : Code[20];DirectUnitCost@1001 : Decimal;CurrencyCode@1003 : Code[10]) : Decimal;
    VAR
      Currency@1004 : Record 4;
      PurchaseLine@1002 : Record 39;
    BEGIN
      Currency.GET(CurrencyCode);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,CreateVendor(CurrencyCode));
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,
        PurchaseLine.Type::"G/L Account",
        ModifyGLAccount(LibraryERM.CreateGLAccountNoWithDirectPosting),LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
      PurchaseLine.MODIFY(TRUE);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      EXIT(ROUND(PurchaseLine."Amount Including VAT",Currency."Invoice Rounding Precision"));
    END;

    LOCAL PROCEDURE CreateServiceOrderWithCurrencyCodeAndPmtMethod@58(VAR ServiceHeader@1002 : Record 5900;CurrencyCode@1009 : Code[10];PamentMethodCode@1008 : Code[10]) : Decimal;
    VAR
      VATPostingSetup@1005 : Record 325;
      ServiceItem@1004 : Record 5940;
      ServiceLine@1003 : Record 5902;
      ServiceItemLine@1007 : Record 5901;
    BEGIN
      LibraryERM.FindVATPostingSetup(
        VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      VATPostingSetup.VALIDATE("VAT %",0); // zero VAT to pass on IN
      VATPostingSetup.MODIFY(TRUE);

      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,'');
      ServiceHeader.VALIDATE("Currency Code",CurrencyCode);
      ServiceHeader.VALIDATE("Payment Method Code",PamentMethodCode);
      ServiceHeader.MODIFY(TRUE);

      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,'');
      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      WITH ServiceLine DO BEGIN
        VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
        VALIDATE(Quantity,LibraryRandom.RandInt(100));
        VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
        MODIFY(TRUE);
        EXIT("Amount Including VAT");
      END;
    END;

    [Test]
    PROCEDURE PostGeneralJournalBankFCY@6();
    VAR
      GenJournalLine@1001 : Record 81;
      CurrencyCode@1000 : Code[10];
      DocumentNo@1005 : Code[20];
      BankAccountNo@1004 : Code[20];
      Amount@1003 : Decimal;
      AmountLCY@1002 : Decimal;
    BEGIN
      // Verify Amount and Amount (LCY) in GL Entry after Posting General Journal Line with Bank having Currency code and
      // balancing Bank having no Currency code.

      // Setup.
      Initialize;
      CurrencyCode := CreateCurrencyAndExchangeRate;

      Amount := LibraryRandom.RandDec(100,2);
      AmountLCY := ROUND(LibraryERM.ConvertCurrency(Amount,CurrencyCode,'',WORKDATE));

      BankAccountNo := CreateBankAccount('');

      // Exercise.
      DocumentNo :=
        CreatePostGenJnlLineWithBalanceAcc(
          WORKDATE,GenJournalLine."Document Type"::" ",
          GenJournalLine."Account Type"::"Bank Account",CreateBankAccount(CurrencyCode),
          GenJournalLine."Account Type"::"Bank Account",BankAccountNo,CurrencyCode,Amount);

      // Verify.
      VerifyBankAccountLedgerEntry(DocumentNo,BankAccountNo,-AmountLCY);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateCurrencyAndExchangeRate@31() CurrencyCode : Code[10];
    BEGIN
      CurrencyCode := CreateCurrency;
      LibraryERM.CreateRandomExchangeRate(CurrencyCode);
    END;

    LOCAL PROCEDURE CreateCurrency@16() : Code[10];
    VAR
      Currency@1001 : Record 4;
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      WITH Currency DO BEGIN
        GeneralLedgerSetup.GET;
        LibraryERM.CreateCurrency(Currency);
        VALIDATE("Invoice Rounding Precision",GeneralLedgerSetup."Inv. Rounding Precision (LCY)");
        VALIDATE("Residual Gains Account",LibraryERM.CreateGLAccountNo);
        VALIDATE("Residual Losses Account",LibraryERM.CreateGLAccountNo);
        VALIDATE("Realized G/L Gains Account",LibraryERM.CreateGLAccountNo);
        VALIDATE("Realized G/L Losses Account",LibraryERM.CreateGLAccountNo);
        VALIDATE("Realized Gains Acc.",LibraryERM.CreateGLAccountNo);
        VALIDATE("Realized Losses Acc.",LibraryERM.CreateGLAccountNo);
        VALIDATE("Unrealized Gains Acc.",LibraryERM.CreateGLAccountNo);
        VALIDATE("Unrealized Losses Acc.",LibraryERM.CreateGLAccountNo);
        MODIFY(TRUE);
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE CreateAddExchRate@5(CurrencyCode@1000 : Code[10];StartingDate@1002 : Date;ExhRateAmt@1004 : Decimal);
    VAR
      CurrExchRate@1001 : Record 330;
    BEGIN
      WITH CurrExchRate DO BEGIN
        INIT;
        "Starting Date" := StartingDate;
        "Currency Code" := CurrencyCode;
        "Exchange Rate Amount" := ExhRateAmt;
        "Adjustment Exch. Rate Amount" := 1;
        "Relational Exch. Rate Amount" := 1;
        "Relational Adjmt Exch Rate Amt" := 1;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateCustomer@4(CurrencyCode@1002 : Code[10]) : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      WITH Customer DO BEGIN
        GET(CreateSimpleCustomer(CurrencyCode));
        VALIDATE("Application Method","Application Method"::"Apply to Oldest");
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateSimpleCustomer@27(CurrencyCode@1002 : Code[10]) : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",CurrencyCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateVendor@1(CurrencyCode@1002 : Code[10]) : Code[20];
    VAR
      Vendor@1001 : Record 23;
    BEGIN
      WITH Vendor DO BEGIN
        GET(CreateSimpleVendor(CurrencyCode));
        VALIDATE("Application Method","Application Method"::"Apply to Oldest");
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateSimpleVendor@28(CurrencyCode@1001 : Code[10]) : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateBankAccount@52(CurrencyCode@1001 : Code[10]) : Code[20];
    VAR
      BankAccount@1000 : Record 270;
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      WITH BankAccount DO BEGIN
        VALIDATE("Currency Code",CurrencyCode);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE FindSalesInvoiceHeader@66(SelltoCustomerNo@1000 : Code[20]) : Code[20];
    VAR
      SalesInvoiceHeader@1001 : Record 112;
    BEGIN
      SalesInvoiceHeader.SETRANGE("Sell-to Customer No.",SelltoCustomerNo);
      SalesInvoiceHeader.FINDFIRST;
      EXIT(SalesInvoiceHeader."No.");
    END;

    LOCAL PROCEDURE FindCustPaymentDocNo@33(CustNo@1000 : Code[20]) : Code[20];
    VAR
      CustLedgEntry@1001 : Record 21;
    BEGIN
      WITH CustLedgEntry DO BEGIN
        SETRANGE("Sell-to Customer No.",CustNo);
        SETRANGE("Document Type","Document Type"::Payment);
        FINDFIRST;
        EXIT("Document No.");
      END;
    END;

    LOCAL PROCEDURE FindVendPaymentDocNo@47(VendNo@1000 : Code[20]) : Code[20];
    VAR
      VendLedgEntry@1001 : Record 25;
    BEGIN
      WITH VendLedgEntry DO BEGIN
        SETRANGE("Buy-from Vendor No.",VendNo);
        SETRANGE("Document Type","Document Type"::Payment);
        FINDFIRST;
        EXIT("Document No.");
      END;
    END;

    LOCAL PROCEDURE FindGLEntry@55(VAR GLEntry@1000 : Record 17;DocNo@1001 : Code[20];GLAccNo@1002 : Code[20]);
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Document No.",DocNo);
        SETRANGE("G/L Account No.",GLAccNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE ModifyExchangeRateAmount@69(CurrencyCode@1000 : Code[10];IsRaise@1001 : Boolean);
    VAR
      CurrencyExchangeRate@1002 : Record 330;
      RaiseValue@1003 : Decimal;
    BEGIN
      IF IsRaise THEN
        RaiseValue := 1 / 3
      ELSE
        RaiseValue := 3;
      WITH CurrencyExchangeRate DO BEGIN
        SETRANGE("Currency Code",CurrencyCode);
        FINDFIRST;
        VALIDATE("Relational Exch. Rate Amount","Relational Exch. Rate Amount" * RaiseValue);
        VALIDATE("Relational Adjmt Exch Rate Amt","Relational Exch. Rate Amount" * RaiseValue);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE ModifyGLAccount@85(GLAccountNo@1000 : Code[20]) : Code[20];
    VAR
      VATPostingSetup@1005 : Record 325;
      GenProductPostingGroup@1013 : Record 251;
      GLAccount@1011 : Record 15;
    BEGIN
      LibraryERM.FindGenProductPostingGroup(GenProductPostingGroup);
      VATPostingSetup.SETRANGE("Unrealized VAT Type",VATPostingSetup."Unrealized VAT Type"::" ");
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      GLAccount.GET(GLAccountNo);
      GLAccount.VALIDATE("Gen. Posting Type",GLAccount."Gen. Posting Type"::" ");
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GenProductPostingGroup.Code);
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccountNo);
    END;

    LOCAL PROCEDURE PostServiceOrder@26(VAR ServiceHeader@1001 : Record 5900) : Code[20];
    VAR
      ServiceInvoiceHeader@1000 : Record 5992;
    BEGIN
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
      ServiceInvoiceHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceInvoiceHeader.FINDFIRST;
      EXIT(ServiceInvoiceHeader."No.");
    END;

    LOCAL PROCEDURE GetCurrencyGainsLossesAccNo@25(CurrencyCode@1000 : Code[10];IsLossEntry@1002 : Boolean;IsUnrealizedEntry@1003 : Boolean) : Code[20];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      Currency.GET(CurrencyCode);
      IF IsLossEntry THEN BEGIN
        IF IsUnrealizedEntry THEN
          EXIT(Currency."Unrealized Losses Acc.");
        EXIT(Currency."Realized Losses Acc.");
      END;
      IF IsUnrealizedEntry THEN
        EXIT(Currency."Unrealized Gains Acc.");
      EXIT(Currency."Realized Gains Acc.");
    END;

    LOCAL PROCEDURE SelectClearGenJournalBatch@9(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      // Select General Journal Batch and clear General Journal Lines to make sure that no line exits before creating
      // General Journal Lines.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch)
    END;

    [Normal]
    LOCAL PROCEDURE UpdateAddnlReportingCurrency@94(AdditionalReportingCurrency@1002 : Code[10]);
    VAR
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup."Additional Reporting Currency" := AdditionalReportingCurrency;
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ApplyPostVendPayment2Invoices@23(PayDocNo@1000 : Code[20];InvDocNo1@1001 : Code[20];InvDocNo2@1002 : Code[20]);
    VAR
      VendLedgerEntryFrom@1004 : Record 25;
      VendLedgerEntryTo@1003 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendLedgerEntryFrom,VendLedgerEntryFrom."Document Type"::Payment,PayDocNo);
      VendLedgerEntryFrom.CALCFIELDS("Remaining Amount");
      LibraryERM.SetApplyVendorEntry(VendLedgerEntryFrom,VendLedgerEntryFrom."Remaining Amount");

      LibraryERM.FindVendorLedgerEntry(VendLedgerEntryTo,VendLedgerEntryTo."Document Type"::Invoice,InvDocNo1);
      LibraryERM.SetAppliestoIdVendor(VendLedgerEntryTo);

      LibraryERM.FindVendorLedgerEntry(VendLedgerEntryTo,VendLedgerEntryTo."Document Type"::Invoice,InvDocNo2);
      LibraryERM.SetAppliestoIdVendor(VendLedgerEntryTo);

      LibraryERM.PostVendLedgerApplication(VendLedgerEntryFrom);
    END;

    LOCAL PROCEDURE ApplyPostCustPayment2Invoices@50(PayDocNo@1000 : Code[20];InvDocNo1@1001 : Code[20];InvDocNo2@1002 : Code[20]);
    VAR
      CustLedgerEntryFrom@1004 : Record 21;
      CustLedgerEntryTo@1003 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntryFrom,CustLedgerEntryFrom."Document Type"::Payment,PayDocNo);
      CustLedgerEntryFrom.CALCFIELDS("Remaining Amount");
      LibraryERM.SetApplyCustomerEntry(CustLedgerEntryFrom,CustLedgerEntryFrom."Remaining Amount");

      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntryTo,CustLedgerEntryTo."Document Type"::Invoice,InvDocNo1);
      LibraryERM.SetAppliestoIdCustomer(CustLedgerEntryTo);

      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntryTo,CustLedgerEntryTo."Document Type"::Invoice,InvDocNo2);
      LibraryERM.SetAppliestoIdCustomer(CustLedgerEntryTo);

      LibraryERM.PostCustLedgerApplication(CustLedgerEntryFrom);
    END;

    LOCAL PROCEDURE UnapplyAndPostVendEntry@56(VendNo@1001 : Code[20];DocNo@1000 : Code[20];PostingDate@1003 : Date);
    VAR
      VendorLedgerEntry@1002 : Record 25;
    BEGIN
      VendorLedgerEntry.SETRANGE("Vendor No.",VendNo);
      VendorLedgerEntry.SETRANGE("Document No.",DocNo);
      VendorLedgerEntry.SETRANGE(Open,FALSE);
      VendorLedgerEntry.FINDLAST;
      LibraryERMUnapply.UnapplyVendorLedgerEntryBase(VendorLedgerEntry,PostingDate);
    END;

    LOCAL PROCEDURE UnapplyAndPostCustEntry@54(CustNo@1001 : Code[20];DocNo@1000 : Code[20];PostingDate@1003 : Date);
    VAR
      CustLedgerEntry@1002 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.",CustNo);
      CustLedgerEntry.SETRANGE("Document No.",DocNo);
      CustLedgerEntry.SETRANGE(Open,FALSE);
      CustLedgerEntry.FINDLAST;
      LibraryERMUnapply.UnapplyCustomerLedgerEntryBase(CustLedgerEntry,PostingDate);
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@2(DocumentNo@1000 : Code[20];Amount@1001 : Decimal);
    VAR
      CustLedgerEntry@1002 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,DocumentNo);
      CustLedgerEntry.CALCFIELDS("Original Amount",Amount,"Remaining Amount");
      Assert.AreEqual(
        Amount,CustLedgerEntry."Original Amount",
        STRSUBSTNO(WrongAmountErr,CustLedgerEntry.FIELDCAPTION("Original Amount"),Amount,CustLedgerEntry.TABLECAPTION));
      Assert.AreEqual(
        Amount,CustLedgerEntry.Amount,
        STRSUBSTNO(WrongAmountErr,CustLedgerEntry.FIELDCAPTION(Amount),Amount,CustLedgerEntry.TABLECAPTION));
      Assert.AreEqual(
        Amount,CustLedgerEntry."Remaining Amount",
        STRSUBSTNO(WrongAmountErr,CustLedgerEntry.FIELDCAPTION("Remaining Amount"),Amount,CustLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyBankAccountLedgerEntry@59(DocumentNo@1000 : Code[20];BankAccountNo@1003 : Code[20];ExpectedAmount@1001 : Decimal);
    VAR
      BankAccountLedgerEntry@1002 : Record 271;
    BEGIN
      WITH BankAccountLedgerEntry DO BEGIN
        SETRANGE("Bank Account No.",BankAccountNo);
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        Assert.AreEqual(ExpectedAmount,Amount,
          STRSUBSTNO(WrongBankAccLedgEntryAmtErr,FIELDCAPTION(Amount)));
        Assert.AreEqual(ExpectedAmount,"Remaining Amount",
          STRSUBSTNO(WrongBankAccLedgEntryAmtErr,FIELDCAPTION(Amount)));
        Assert.AreEqual(ExpectedAmount,"Amount (LCY)",
          STRSUBSTNO(WrongBankAccLedgEntryAmtErr,FIELDCAPTION("Amount (LCY)")));
      END;
    END;

    LOCAL PROCEDURE VerifyZeroCustRemainingAmountLCY@35(DocumentType@1003 : Option;DocumentNo@1000 : Code[20]);
    VAR
      CustLedgerEntry@1001 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);
      CustLedgerEntry.CALCFIELDS("Remaining Amt. (LCY)");
      Assert.AreEqual(
        0,CustLedgerEntry."Remaining Amt. (LCY)",
        STRSUBSTNO(WrongAmountErr,CustLedgerEntry.FIELDCAPTION("Remaining Amt. (LCY)"),0,CustLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyCustRemainingAmount@30(DocumentType@1003 : Option;DocumentNo@1000 : Code[20];ExpectedAmt@1004 : Decimal);
    VAR
      CustLedgerEntry@1001 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);
      CustLedgerEntry.CALCFIELDS("Remaining Amount");
      Assert.AreEqual(
        ExpectedAmt,CustLedgerEntry."Remaining Amount",
        STRSUBSTNO(WrongAmountErr,CustLedgerEntry.FIELDCAPTION("Remaining Amount"),ExpectedAmt,CustLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyVendorLedgerEntry@22(DocumentNo@1003 : Code[20];Amount@1002 : Decimal);
    VAR
      VendorLedgerEntry@1000 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,DocumentNo);
      VendorLedgerEntry.CALCFIELDS("Original Amount",Amount,"Remaining Amount");
      Assert.AreEqual(
        -Amount,VendorLedgerEntry."Original Amount",
        STRSUBSTNO(WrongAmountErr,VendorLedgerEntry.FIELDCAPTION("Original Amount"),-Amount,VendorLedgerEntry.TABLECAPTION));
      Assert.AreEqual(
        -Amount,VendorLedgerEntry.Amount,
        STRSUBSTNO(WrongAmountErr,VendorLedgerEntry.FIELDCAPTION(Amount),-Amount,VendorLedgerEntry.TABLECAPTION));
      Assert.AreEqual(
        -Amount,VendorLedgerEntry."Remaining Amount",
        STRSUBSTNO(WrongAmountErr,VendorLedgerEntry.FIELDCAPTION("Remaining Amount"),-Amount,VendorLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyZeroVendRemainingAmountLCY@45(DocumentType@1002 : Option;DocumentNo@1003 : Code[20]);
    VAR
      VendorLedgerEntry@1000 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,DocumentNo);
      VendorLedgerEntry.CALCFIELDS("Remaining Amt. (LCY)");
      Assert.AreEqual(
        0,VendorLedgerEntry."Remaining Amt. (LCY)",
        STRSUBSTNO(WrongAmountErr,VendorLedgerEntry.FIELDCAPTION("Remaining Amt. (LCY)"),0,VendorLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyVendRemainingAmount@39(DocumentType@1002 : Option;DocumentNo@1003 : Code[20];ExpectedAmt@1004 : Decimal);
    VAR
      VendorLedgerEntry@1000 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,DocumentNo);
      VendorLedgerEntry.CALCFIELDS("Remaining Amount");
      Assert.AreEqual(
        ExpectedAmt,VendorLedgerEntry."Remaining Amount",
        STRSUBSTNO(WrongAmountErr,VendorLedgerEntry.FIELDCAPTION("Remaining Amount"),ExpectedAmt,VendorLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyGLEntry@72(DocumentNo@1002 : Code[20];GLAccountNo@1001 : Code[20];Amount@1003 : Decimal);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.FINDFIRST;
      Assert.AreEqual(
        Amount,GLEntry."Additional-Currency Amount",
        STRSUBSTNO(WrongAmountErr,GLEntry.FIELDCAPTION("Additional-Currency Amount"),Amount,GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyZeroAddCurrAmountInGLEntry@15(DocumentNo@1002 : Code[20];GLAccountNo@1001 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      FindGLEntry(GLEntry,DocumentNo,GLAccountNo);
      GLEntry.TESTFIELD("Additional-Currency Amount",0);
    END;

    LOCAL PROCEDURE VerifyACYOnServiceOrderGLEntry@49(DocNo@1002 : Code[20];GLAccNo@1003 : Code[20];ExpectedAmount@1004 : Decimal);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Payment);
      FindGLEntry(GLEntry,DocNo,GLAccNo);
      Assert.AreEqual(
        ExpectedAmount,GLEntry."Additional-Currency Amount",GLEntry.FIELDCAPTION("Additional-Currency Amount"));
    END;

    BEGIN
    {
      // [FEATURE] [ACY]

      Test Additional Currency Amount for Customer and Vendor.
      1. Verify Additional Currency Amount in GL Entry and Amount on Cust. Ledger Entry after Posting General Journal Line
         with Customer and GL Account.
      2. Verify Additional Currency Amount in GL Entry after Posting General Journal Line with Customer and GL Account
         with Payment Posted Invoices.
      3. Verify Additional Currency Amount in GL Entry after Posting Sales Invoice.
      4. Verify Additional Currency Amount in GL Entry after Posting Sales Invoice with Payment General Line.
      5. Verify Additional Currency Amount in GL Entry and Amount on Vendor Ledger Entry after Posting General Journal Line
         with Vendor and GL Account.
      6. Verify Additional Currency Amount in GL Entry and Amount after Posting Invoice and payment General Journal Line
      7. Verify Additional Currency Amount in GL Entry after Posting Purchase Invoice.
      8. Verify Additional Currency Amount in GL Entry after Posting Purchase Invoice with Payment General Line.
      9. Verify Additional Currency Amount of Realized Loss G/L Entry after Posting Sales Invoice with Payment General Line
      10. Verify Additional Currency Amount of Realized Gain G/L Entry after Posting Sales Invoice with Payment General Line
      11. Verify Additional Currency Amount of Unrealized Loss G/L Entry after Posting Sales Invoice with Payment General Line
      12. Verify Additional Currency Amount of Unrealized Gain G/L Entry after Posting Sales Invoice with Payment General Line
      13. Verify Additional Currency Amount of Realized Loss G/L Entry after Posting Purchase Invoice with Payment General Line
      14. Verify Additional Currency Amount of Realized Gain G/L Entry after Posting Purchase Invoice with Payment General Line
      15. Verify Additional Currency Amount of Unrealized Loss G/L Entry after Posting Purchase Invoice with Payment General Line
      16. Verify Additional Currency Amount of Unrealized Gain G/L Entry after Posting Purchase Invoice with Payment General Line
      17. Verify Unapply process succeded when different Currency Exchange Rates on Customer Ledger Entry
      18. Verify Unapply process succeded when different Currency Exchange Rates on Vendor Ledger Entry
      19. Verify Amount, Remaining Amount and Amount (LCY) in GL Entry after Posting General Journal Line with Bank having Currency
          code and balancing Bank having no Currency code.

        Covers Test cases:TFS_TS_ID = 257202
        --------------------------------------------------------------------------------------------
        Test Function Name                                                                  TFS ID
        ---------------------------------------------------------------------------------------------
        PostGeneralJournalFCY,PaymentGeneralJournalFCY,
        SalesInvoiceWithFCY,SalesInvoiceWithPaymentGeneral,PurchPostGeneralJournalFCY,
        PurchPaymentGeneralJournalFCY,PurchInvoiceWithFCY,PurchInvoiceWithPaymentGeneral    254095
        SalesInvoiceWithPaymentGeneralAndRealizedLoss,
        SalesInvoiceWithPaymentGeneralAndRealizedGain,
        SalesInvoiceWithPaymentGeneralAndUnrealizedLoss,
        SalesInvoiceWithPaymentGeneralAndUnrealizedGain,
        PurchInvoiceWithPaymentGeneralAndRealizedLoss,
        PurchInvoiceWithPaymentGeneralAndRealizedGain,
        PurchInvoiceWithPaymentGeneralAndUnrealizedLoss,
        PurchInvoiceWithPaymentGeneralAndUnrealizedGain                                     341736
        SalesUnapplyWithDiffExchRates
        PurchUnapplyWithDiffExchRates                                                       351444

        Covers Test cases:TFS_TS_ID = 356031,358419
        --------------------------------------------------------------------------------------------
        Test Function Name                                                                  TFS ID
        ---------------------------------------------------------------------------------------------
        PostGeneralJournalBankFCY                                                      356031,358419
    }
    END.
  }
}

