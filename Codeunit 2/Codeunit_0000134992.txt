OBJECT Codeunit 134992 ERM Financial Reports IV
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1006 : Codeunit 131300;
      LibraryPurchase@1012 : Codeunit 130512;
      LibrarySales@1013 : Codeunit 130509;
      LibraryInventory@1007 : Codeunit 132201;
      LibraryReportDataset@1018 : Codeunit 131007;
      LibraryUtility@1017 : Codeunit 131000;
      LibraryRandom@1003 : Codeunit 130440;
      Assert@1001 : Codeunit 130000;
      PostingDateErr@1016 : TextConst 'ENU=Enter the posting date.';
      DocumentNoErr@1015 : TextConst 'ENU=Enter the document no.';
      SettlementAccountErr@1014 : TextConst 'ENU=Enter the settlement account';
      IsInitialized@1000 : Boolean;
      SameAmountErr@1009 : TextConst 'ENU=Amount must be same.';
      NoDataRowErr@1004 : TextConst '@@@="%1 = Element Name, %2 = Element Value";ENU=There is no dataset row corresponding to Element Name %1 with value %2';

    [Test]
    [HandlerFunctions(RHCalcAndPostVATSettlement)]
    PROCEDURE CalcAndPostVATSettlementPostingDateError@69();
    VAR
      CalcAndPostVATSettlement@1000 : Report 20;
    BEGIN
      // Test Error Message when Posting Date is not filled while running Calc. and Post VAT Settlement Report.

      // Setup: Set Parameters for Report having Starting Date, Ending Date, Posting Date, Document No. and Settlement Account No as Blank.
      Initialize;
      CLEAR(CalcAndPostVATSettlement);
      CalcAndPostVATSettlement.InitializeRequest(0D,0D,0D,'','',FALSE,FALSE);

      // Exercise: Try to save Report with TEST Name.
      ASSERTERROR CalcAndPostVATSettlement.RUN;

      // Verify: Verify that Posting Date not filled error appears.
      Assert.ExpectedError(STRSUBSTNO(PostingDateErr));
    END;

    [Test]
    [HandlerFunctions(RHCalcAndPostVATSettlement)]
    PROCEDURE CalcAndPostVATSettlementDocNoError@80();
    VAR
      CalcAndPostVATSettlement@1000 : Report 20;
    BEGIN
      // Test Error Message when Document No. is not filled while running Calc. and Post VAT Settlement Report.

      // Setup: Set Parameters for Report having Starting Date, Ending Date, Document No. and Settlement Account No. as Blank, take Posting Date as WORKDATE.
      Initialize;
      CLEAR(CalcAndPostVATSettlement);
      CalcAndPostVATSettlement.InitializeRequest(0D,0D,WORKDATE,'','',FALSE,FALSE);

      // Exercise: Try to save Report with TEST Name.
      ASSERTERROR CalcAndPostVATSettlement.RUN;

      // Verify: Verify that Document No. not filled error appears.
      Assert.ExpectedError(STRSUBSTNO(DocumentNoErr));
    END;

    [Test]
    [HandlerFunctions(RHCalcAndPostVATSettlement)]
    PROCEDURE CalcAndPostVATSettlementAccountError@87();
    VAR
      CalcAndPostVATSettlement@1000 : Report 20;
    BEGIN
      // Test Error Message when Settlement Account is not filled while running Calc. and Post VAT Settlement Report.

      // Setup: Set Parameters for Report having Starting Date, Ending Date and Settlement Account No. as Blank, take Posting Date as WORKDATE and a Random Document No. value is not important.
      Initialize;
      CLEAR(CalcAndPostVATSettlement);
      CalcAndPostVATSettlement.InitializeRequest(0D,0D,WORKDATE,FORMAT(LibraryRandom.RandInt(100)),'',FALSE,FALSE);

      // Exercise: Try to save Report with TEST Name.
      ASSERTERROR CalcAndPostVATSettlement.RUN;

      // Verify: Verify that Settement Account No. not filled error appears.
      Assert.ExpectedError(STRSUBSTNO(SettlementAccountErr));
    END;

    [Test]
    [HandlerFunctions(RHVATVIESDeclaration)]
    PROCEDURE VATVIESDeclarationReport@43();
    VAR
      Customer@1000 : Record 18;
      SalesLine@1008 : Record 37;
      GLAccount@1011 : Record 15;
      Item@1009 : Record 27;
    BEGIN
      // Verify VAT VIES Declaration Tax Auth. Report.

      // Setup: Find Customer with VAT Registration Number, create and post four Sales Orders.
      Initialize;
      CreateCustomerWithCountryRegionVATRegNo(Customer);
      LibraryInventory.CreateItem(Item);
      PostSalesOrderWithVATSetup(Customer."No.",FALSE,SalesLine.Type::Item,Item."No.");
      PostSalesOrderWithVATSetup(Customer."No.",TRUE,SalesLine.Type::Item,Item."No.");

      LibraryERM.FindGLAccount(GLAccount);
      PostSalesOrderWithVATSetup(Customer."No.",FALSE,SalesLine.Type::"G/L Account",GLAccount."No.");
      PostSalesOrderWithVATSetup(Customer."No.",TRUE,SalesLine.Type::"G/L Account",GLAccount."No.");

      // Exercise: Save VAT VIES Declaration Tax Auth. Report.
      VATVIESDeclarationTaxReport(Customer."VAT Registration No.");

      // Verify: Verify Values on VAT VIES Declaration Tax Auth. Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('VATRegNo',Customer."VAT Registration No.");
      Assert.AreEqual(
        -CalculateBase(Customer."No.",'Yes|No'),LibraryReportDataset.Sum('TotalValueofItemSupplies'),
        SameAmountErr);
      Assert.AreEqual(
        -CalculateBase(Customer."No.",'Yes'),LibraryReportDataset.Sum('EU3PartyItemTradeAmt'),
        SameAmountErr);
    END;

    [Test]
    [HandlerFunctions(RHCalcAndPostVATSettlement)]
    PROCEDURE CalculateVATSettlementAfterPostSalesOrder@6();
    VAR
      SalesHeader@1000 : Record 36;
      VATPostingSetup@1004 : Record 325;
      SalesLine@1001 : Record 37;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Test Calc. and Post VAT Settlement Report for Sales with blank VAT Bus. Posting Group.

      // Setup: Create and Post Sales Order.
      Initialize;
      CreateVATPostingSetupWithBlankVATBusPostingGroup(VATPostingSetup);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomer(VATPostingSetup));
      CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem(VATPostingSetup));
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Exercise: Calculate and Post VAT Settlement for Customer.
      SaveCalcAndPostVATSettlementReport(VATPostingSetup,LibraryUtility.GenerateGUID,FALSE); // Set False for Post.
    END;

    [Test]
    [HandlerFunctions(RHCalcAndPostVATSettlement)]
    PROCEDURE CalculateVATSettlementAfterPostPurchaseOrder@13();
    VAR
      PurchaseHeader@1000 : Record 38;
      VATPostingSetup@1004 : Record 325;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Test Calc. and Post VAT Settlement Report for Purchase with blank VAT Bus. Posting Group.

      // Setup: Create and Post Purchase Order.
      Initialize;
      CreateVATPostingSetupWithBlankVATBusPostingGroup(VATPostingSetup);
      CreatePurchaseOrder(PurchaseHeader,VATPostingSetup);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise: Calculate and Post VAT Settlement for Vendor.
      SaveCalcAndPostVATSettlementReport(VATPostingSetup,LibraryUtility.GenerateGUID,FALSE); // Set False for Post.
    END;

    [Test]
    [HandlerFunctions(PurchaseReceiptRequestPageHandler)]
    PROCEDURE CheckCompanyNameInPurchaseReceiptReport@3();
    VAR
      VATPostingSetup@1000 : Record 325;
      PurchaseHeader@1001 : Record 38;
      PurchRcptHeader@1002 : Record 120;
      CompanyInformation@1003 : Record 79;
      DocumentNo@1004 : Code[20];
    BEGIN
      // Verify that Purchase Receipt Report displaying Company Name.

      // Setup: Create purchase order
      Initialize;
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      CreatePurchaseOrder(PurchaseHeader,VATPostingSetup);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      PurchRcptHeader.SETRANGE("No.",DocumentNo);
      CompanyInformation.GET;

      // Exercise: Run Purchase - Receipt report.
      REPORT.RUN(REPORT::"Purchase - Receipt",TRUE,FALSE,PurchRcptHeader);

      // Verify: Verifying company name is not blank on record and report.
      CompanyInformation.TESTFIELD(Name);
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('CompanyAddr1',CompanyInformation.Name);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE FindVATPostingSetupFromVATEntries@9(VAR VATPostingSetup@1000 : Record 325;EntryType@1001 : Option);
    VAR
      VATEntry@1002 : Record 254;
    BEGIN
      WITH VATEntry DO BEGIN
        SETRANGE("VAT Calculation Type","VAT Calculation Type"::"Normal VAT");
        SETRANGE(Type,EntryType);
        SETRANGE(Closed,Closed);
        FINDFIRST;
        VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
      END;
    END;

    LOCAL PROCEDURE CalcAndPostVATSettlementWithPostingOption@49(AccountType@1008 : Option;AccountNo@1009 : Code[20];GenPostingType@1010 : Option;SignFactor@1011 : Integer;Post@1012 : Boolean);
    VAR
      VATPostingSetup@1001 : Record 325;
      VATEntry@1007 : Record 254;
      Amount@1006 : Decimal;
    BEGIN
      // Setup: Create and Post General Journal Line with different Account Types, Find VAT Entries Amount.
      CreateAndPostGeneralJournalLine(VATPostingSetup,AccountType,AccountNo,GenPostingType,SignFactor);
      VATEntry.SETRANGE("Posting Date",WORKDATE);
      Amount := -CalculateVATEntryAmount(VATEntry,VATPostingSetup,GenPostingType,FALSE);

      // Exercise: Taking Random No. for Document No., value is not important.
      SaveCalcAndPostVATSettlementReport(VATPostingSetup,FORMAT(LibraryRandom.RandInt(100)),Post);

      // Verify: Verify Amount on Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('GenJnlLineVATAmount',Amount);
    END;

    LOCAL PROCEDURE CalculateVATEntryAmount@63(VAR VATEntry@1001 : Record 254;VATPostingSetup@1000 : Record 325;Type@1002 : Option;Closed@1003 : Boolean) TotalAmount : Decimal;
    BEGIN
      VATEntry.SETRANGE(Type,Type);
      VATEntry.SETRANGE(Closed,Closed);
      VATEntry.SETRANGE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      VATEntry.SETRANGE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      VATEntry.FINDSET;
      REPEAT
        TotalAmount += VATEntry.Amount;
      UNTIL VATEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateAndPostGeneralJournalLine@45(VAR VATPostingSetup@1007 : Record 325;AccountType@1003 : Option;AccountNo@1004 : Code[20];GenPostingType@1006 : Option;SignFactor@1005 : Integer);
    VAR
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1000 : Record 81;
    BEGIN
      VATPostingSetup.SETRANGE("Unrealized VAT Type",VATPostingSetup."Unrealized VAT Type"::" ");
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        AccountType,AccountNo,SignFactor * LibraryRandom.RandDec(100,2));
      GenJournalLine.VALIDATE("Bal. Account No.",CreateGLAccountWithVAT(VATPostingSetup,GenPostingType));
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateCustomerWithCountryRegionVATRegNo@14(VAR Customer@1000 : Record 18);
    VAR
      CountryRegion@1001 : Record 9;
    BEGIN
      LibraryERM.CreateCountryRegion(CountryRegion);
      CountryRegion.VALIDATE("EU Country/Region Code",CountryRegion.Code);
      CountryRegion.MODIFY(TRUE);
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Country/Region Code",CountryRegion.Code);
      Customer.VALIDATE("VAT Registration No.",LibraryERM.GenerateVATRegistrationNo(CountryRegion.Code));
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGLAccountWithVAT@110(VATPostingSetup@1000 : Record 325;GenPostingType@1003 : Option) : Code[20];
    VAR
      GeneralPostingSetup@1001 : Record 252;
      GLAccount@1002 : Record 15;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Posting Type",GenPostingType);
      GLAccount.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      GLAccount.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateVATStatementTemplateAndLine@999(VAR VATStatementLine@1000 : Record 256;VATPostingSetup@1003 : Record 325;GenPostingType@1004 : Option);
    VAR
      VATStatementTemplate@1002 : Record 255;
      VATStatementName@1001 : Record 257;
    BEGIN
      LibraryERM.CreateVATStatementTemplate(VATStatementTemplate);
      LibraryERM.CreateVATStatementName(VATStatementName,VATStatementTemplate.Name);
      LibraryERM.CreateVATStatementLine(VATStatementLine,VATStatementTemplate.Name,VATStatementName.Name);
      VATStatementLine.VALIDATE("Row No.",FORMAT(LibraryRandom.RandInt(100)));
      VATStatementLine.VALIDATE(Type,VATStatementLine.Type::"VAT Entry Totaling");
      VATStatementLine.VALIDATE("Gen. Posting Type",GenPostingType);
      VATStatementLine.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      VATStatementLine.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      VATStatementLine.VALIDATE("Amount Type",VATStatementLine."Amount Type"::Amount);
      VATStatementLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@5(VAR PurchaseHeader@1001 : Record 38;VATPostingSetup@1002 : Record 325);
    VAR
      PurchaseLine@1004 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor(VATPostingSetup));
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem(VATPostingSetup),LibraryRandom.RandDec(100,2));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalculateBase@50(CustomerNo@1001 : Code[20];EU3PartyTrade@1002 : Text[10]) TotalBase : Decimal;
    VAR
      VATEntry@1000 : Record 254;
    BEGIN
      VATEntry.SETFILTER("EU 3-Party Trade",EU3PartyTrade);
      REPEAT
        TotalBase += VATEntry.Base;
      UNTIL VATEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateCustomer@10(VAR VATPostingSetup@1001 : Record 325) : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateItem@16(VAR VATPostingSetup@1002 : Record 325) : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateSalesLine@84(VAR SalesLine@1000 : Record 37;SalesHeader@1005 : Record 36;Type@1004 : Option;No@1002 : Code[20]);
    BEGIN
      // Create Sales Document with Random Quantity and Unit Price.
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,Type,No,LibraryRandom.RandDec(100,2) * 100);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendor@11(VAR VATPostingSetup@1001 : Record 325) : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateVATPostingSetupWithBlankVATBusPostingGroup@4(VAR VATPostingSetup@1003 : Record 325);
    VAR
      VATProductPostingGroup@1000 : Record 324;
      GLAccount@1001 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateVATProductPostingGroup(VATProductPostingGroup);
      LibraryERM.CreateVATPostingSetup(VATPostingSetup,'',VATProductPostingGroup.Code); // Set VAT Bus. Posting Group to blank.
      VATPostingSetup.VALIDATE("VAT Identifier",VATPostingSetup."VAT Prod. Posting Group");
      VATPostingSetup.VALIDATE("VAT %",LibraryRandom.RandInt(10));
      VATPostingSetup.VALIDATE("Purchase VAT Account",GLAccount."No.");
      VATPostingSetup.VALIDATE("Sales VAT Account",GLAccount."No.");
      VATPostingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindVATEntry@52(VAR VATEntry@1000 : Record 254;BilltoPaytoNo@1001 : Code[20]);
    BEGIN
      VATEntry.SETRANGE("Bill-to/Pay-to No.",BilltoPaytoNo);
      VATEntry.SETRANGE(Type,VATEntry.Type::Sale);
      VATEntry.SETRANGE("Posting Date",WORKDATE);
      VATEntry.FINDSET;
    END;

    LOCAL PROCEDURE PostSalesOrderWithVATSetup@2(CustomerNo@1000 : Code[20];EU3PartyTrade@1004 : Boolean;Type@1005 : Option;No@1006 : Code[20]);
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      SalesHeader.VALIDATE("EU 3-Party Trade",EU3PartyTrade);
      SalesHeader.MODIFY(TRUE);
      CreateSalesLine(SalesLine,SalesHeader,Type,No);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE SaveCalcAndPostVATSettlementReport@72(VATPostingSetup@1000 : Record 325;DocumentNo@1003 : Code[20];Post@1002 : Boolean);
    VAR
      GLAccount@1004 : Record 15;
      CalcAndPostVATSettlement@1001 : Report 20;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      CLEAR(CalcAndPostVATSettlement);
      VATPostingSetup.SETRANGE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      VATPostingSetup.SETRANGE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      CalcAndPostVATSettlement.SETTABLEVIEW(VATPostingSetup);
      CalcAndPostVATSettlement.InitializeRequest(WORKDATE,WORKDATE,WORKDATE,DocumentNo,GLAccount."No.",FALSE,Post);
      COMMIT;
      CalcAndPostVATSettlement.RUN;
    END;

    LOCAL PROCEDURE SaveVATStatementReport@113(Name@1000 : Code[10];Selection@1004 : Option;PeriodSelection@1005 : Option);
    VAR
      VATStatementLine@1003 : Record 256;
      VATStatementName@1002 : Record 257;
      VATStatement@1001 : Report 12;
    BEGIN
      CLEAR(VATStatement);
      VATStatementName.SETRANGE(Name,Name);
      VATStatement.SETTABLEVIEW(VATStatementName);
      VATStatement.InitializeRequest(VATStatementName,VATStatementLine,Selection,PeriodSelection,FALSE,FALSE);
      COMMIT;
      VATStatement.RUN;
    END;

    LOCAL PROCEDURE VATVIESDeclarationTaxReport@46(CustomerVATRegistrationNo@1002 : Text[20]);
    VAR
      VATVIESDeclarationTaxAuth@1000 : Report 19;
    BEGIN
      CLEAR(VATVIESDeclarationTaxAuth);
      VATVIESDeclarationTaxAuth.InitializeRequest(FALSE,WORKDATE,WORKDATE,CustomerVATRegistrationNo);
      VATVIESDeclarationTaxAuth.RUN;
    END;

    LOCAL PROCEDURE VerifyValuesOnCalcAndPostVATSettlementReport@7(DocumentNo@1002 : Code[20]);
    VAR
      VATEntry@1000 : Record 254;
    BEGIN
      VATEntry.SETRANGE("Document No.",DocumentNo);
      VATEntry.FINDFIRST;
      LibraryReportDataset.LoadDataSetFile;
      Assert.AreEqual(
        LibraryReportDataset.Sum('GenJnlLineVATBaseAmount'),-VATEntry.Base,
        SameAmountErr);

      Assert.AreEqual(
        LibraryReportDataset.Sum('GenJnlLineVATAmount'),-VATEntry.Amount,
        SameAmountErr);
    END;

    [RequestPageHandler]
    PROCEDURE RHVATStatement@12(VAR VATStatement@1000 : TestRequestPage 12);
    BEGIN
      VATStatement.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName)
    END;

    [RequestPageHandler]
    PROCEDURE RHCalcAndPostVATSettlement@28(VAR CalcAndPostVATSettlement@1000 : TestRequestPage 20);
    BEGIN
      CalcAndPostVATSettlement.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName)
    END;

    [RequestPageHandler]
    PROCEDURE RHVATVIESDeclaration@38(VAR VATVIESDeclaration@1000 : TestRequestPage 19);
    BEGIN
      VATVIESDeclaration.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName)
    END;

    [RequestPageHandler]
    PROCEDURE PurchaseReceiptRequestPageHandler@18(VAR PurchaseReceipt@1000 : TestRequestPage 408);
    BEGIN
      PurchaseReceipt.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [ERM]
      Unsupported version tags:
      SE: Unable to Execute
      NO: Unable to Execute (TFS ID: 47894)

      Test various Financial Reports.
       1. Check VAT Statement Report for Purchase with Open VAT Entries.
       2. Check VAT Statement Report for Purchase with Closed VAT Entries.
       3. Check VAT Statement Report for Sales with Open VAT Entries.
       4. Check VAT Statement Report for Sales with Closed VAT Entries.
       5. Check Error Message when Posting Date is not filled while running Calc. and Post VAT Settlement Report.
       6. Check Error Message when Document No. is not filled while running Calc. and Post VAT Settlement Report.
       7. Check Error Message when Settlement Account is not filled while running Calc. and Post VAT Settlement Report.
       8. Check Calc. and Post VAT Settlement Report for Sales and when posting is TRUE.
       9. Check Calc. and Post VAT Settlement Report for Sales and when posting is FALSE.
      10. Check Calc. and Post VAT Settlement Report for Purchase and when posting is TRUE.
      11. Check Calc. and Post VAT Settlement Report for Purchase and when posting is FALSE.
      12. Verify VAT VIES Declaration Tax Auth. Report.
      13. Check data on Calc. and Post VAT Settlement Report after post Sales Order with blank "VAT Bus. Posting Group".
      14. Check data on Calc. and Post VAT Settlement Report after post Purchase Order with blank "VAT Bus. Posting Group".
      15. Verify that Purchase Receipt Report displaying Company Name.

      Covers Test cases: 271435
      ----------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                              TFS ID
      ----------------------------------------------------------------------------------------------------------------------------------------
      VATStatementWithOpenEntriesPurchase, VATStatementWithClosedEntriesPurchase
      VATStatementWithOpenEntriesSales, VATStatementWithClosedEntriesSales
      CalcAndPostVATSettlementPostingDateError, CalcAndPostVATSettlementDocNoError, CalcAndPostVATSettlementAccountError              140947
      CalcAndPostVATSettlementSalesPostTrue, CalcAndPostVATSettlementSalesPostFalse
      CalcAndPostVATSettlementPurchasePostTrue, CalcAndPostVATSettlementPurchasePostFalse

      Covers Test cases: 271314
      ----------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                              TFS ID
      ----------------------------------------------------------------------------------------------------------------------------------------
      VATVIESDeclarationReport                                                                                                        145135

      Covers Test cases:
      ---------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                              TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------------
      CalculateVATSettlementAfterPostSalesOrder, CalculateVATSettlementAfterPostPurchaseOrder                                         293149                                                              293149

      BUG ID 310501
      ---------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                              TFS ID
      ---------------------------------------------------------------------------------------------------------------------------------------
      CheckCompanyNameInPurchaseReceiptReport
    }
    END.
  }
}

