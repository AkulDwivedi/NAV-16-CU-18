OBJECT Codeunit 134823 ERM Cost Accounting - Pages II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      LibraryCostAccounting@1000 : Codeunit 131340;
      IndentBeginEndError@1002 : TextConst 'ENU=End-Total %1 does not belong to the corresponding Begin-Total.';
      IsInitialized@1003 : Boolean;
      IndentationError@1004 : TextConst 'ENU=Indentation must be correct.';

    [Test]
    [HandlerFunctions(ConfirmHandlerYes)]
    PROCEDURE TestChartOfCostTypeEndTotalTypeCostType@156();
    VAR
      CostType@1000 : Record 1103;
      ChartOfCostTypePage@1001 : TestPage 1100;
      Type@1002 : 'Cost Type,Heading,Total,Begin-Total,End-Total';
    BEGIN
      // Test that error is displayed on invoking Indent Cost Type Action when there is no corresponding Begin-Total for a given End-Total.

      // Setup: Initialize and Create Cost Type.
      Initialize;
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);

      // Exercise: Modify Type of Cost Type and invoke Indent Cost Type Action on Chart Of Cost Type Page.
      UpdateCostType(CostType,Type::"End-Total",'');
      ChartOfCostTypePage.OPENEDIT;
      ASSERTERROR ChartOfCostTypePage.IndentCostType.INVOKE;

      // Verify: To check error is diplayed when there is no corresponding 'Begin-Total' type Cost Type for every 'End-Total' type Cost Type.
      Assert.ExpectedError(STRSUBSTNO(IndentBeginEndError,CostType."No."));

      // Tear Down.
      ChartOfCostTypePage.CLOSE;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerYes)]
    PROCEDURE TestChartOfCostTypeIndentCostTypeAction@155();
    VAR
      CostType@1000 : ARRAY [4] OF Record 1103;
      ChartOfCostTypePage@1005 : TestPage 1100;
      Type@1004 : 'Cost Type,Heading,Total,Begin-Total,End-Total';
      i@1007 : Integer;
    BEGIN
      // Test Indent Cost Type Action on Chart Of Cost Type is working successfully or not.

      // Setup: Create four Cost Type of four different Type i.e; Heading,Begin-Total,Cost Type, End-Total.
      Initialize;
      FOR i := 1 TO 4 DO
        LibraryCostAccounting.CreateCostType(CostType[i]);

      UpdateCostType(CostType[1],Type::Heading,'');
      UpdateCostType(CostType[2],Type::"Begin-Total",'');
      UpdateCostType(CostType[3],Type::"Cost Type",'');
      UpdateCostType(CostType[4],Type::"End-Total",'');

      // Exercise: To open Chart of Cost Type Page and invoke Indent Cost Type Action.
      ChartOfCostTypePage.OPENEDIT;
      ChartOfCostTypePage.IndentCostType.INVOKE;

      // Verify: To verify the indentation of created Cost Type after invoking Indent Cost Type Action.
      FOR i := 1 TO 4 DO
        VerifyIndentationOfChartofCostType(CostType[i]);

      // Tear Down.
      ChartOfCostTypePage.CLOSE;
    END;

    LOCAL PROCEDURE Initialize@1();
    BEGIN
      IF IsInitialized THEN
        EXIT;
      IsInitialized := TRUE;
      COMMIT;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@125(Message@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@124(Message@1000 : Text[1024]);
    BEGIN
    END;

    LOCAL PROCEDURE UpdateCostType@153(VAR CostType@1000 : Record 1103;Type@1001 : 'Cost Type,Heading,Total,Begin-Total,End-Total';GLAccountNo2@1002 : Code[20]);
    BEGIN
      CostType.VALIDATE(Type,Type);
      CostType.VALIDATE("G/L Account Range",GLAccountNo2);
      CostType.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyIndentationOfChartofCostType@152(ActualCostType@1000 : Record 1103);
    VAR
      CostType@1002 : Record 1103;
      Type@1003 : 'Cost Type,Heading,Total,Begin-Total,End-Total';
    BEGIN
      CostType.SETFILTER("No.",'%1',ActualCostType."No.");
      IF CostType.FINDFIRST THEN
        CASE ActualCostType.Type OF
          Type::"Cost Type":
            Assert.AreEqual(CostType.Indentation,1,IndentationError);
          Type::Heading:
            Assert.AreEqual(CostType.Indentation,0,IndentationError);
          Type::"Begin-Total":
            Assert.AreEqual(CostType.Indentation,0,IndentationError);
          Type::"End-Total":
            Assert.AreEqual(CostType.Indentation,0,IndentationError);
        END;
    END;

    BEGIN
    {
      // [FEATURE] [Cost Accounting] [Cost Type] [UI]
      Splitted in two codeunit of 134821, due to localization in DE.
      ----------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                  TFS ID
      ----------------------------------------------------------------------------------------------------------
      TestChartOfCostTypeEndTotalTypeCostType,                                                            270024
      TestChartOfCostTypeIndentCostTypeAction,
    }
    END.
  }
}

