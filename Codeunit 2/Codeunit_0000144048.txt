OBJECT Codeunit 144048 FUV 3.8
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1500203 : Codeunit 130000;
      LibraryERM@1500200 : Codeunit 131300;
      LibraryPurchase@1500201 : Codeunit 130512;
      LibraryUtility@1500000 : Codeunit 131000;
      LibraryTDS@1500202 : Codeunit 143000;
      LibraryVariableStorage@1501002 : Codeunit 131004;
      LibraryRandom@1500001 : Codeunit 130440;
      AmountMsg@1500206 : TextConst 'ENU=Amount must be rounded';
      TDSGroupPayableToNonResidentErr@1501000 : TextConst 'ENU=TDS Group must be equal to ''Payable to Non Residents''  in TDS Setup';
      StringErr@1501001 : TextConst 'ENU=must be less than or equal to 12 characters.';

    [Test]
    PROCEDURE BankPmtWithPartyType@1500201();
    VAR
      IncomeTaxPeriodSetup@1500203 : Record 16501;
      TDSNatureOfDeduction@1500205 : Record 13726;
      NODNOCHeader@1500207 : Record 13786;
      GenJournalLine@1500209 : Record 81;
      TDSNatureOfDeductionCode@1500204 : Code[10];
      PostedDocumentNo@1500208 : Code[20];
      VendorNo@1500202 : Code[20];
      OldWorkDate@1500201 : Date;
      PartyCode@1500200 : Code[10];
      MinorHeadCode@1500210 : ' ,200,400';
      ActApplicable@1500206 : ' ,IT,DTAA';
    BEGIN
      // Verify Nature of Remittance,Act Applicable on TDS Entry and Form 26Q/27Q Entry after posting normal Bank payment.

      // Setup: Create and Post Purchase Order with multiple TDS Groups.
      Initialize;
      OldWorkDate := SetupIncomeTaxAccountingPeriod(IncomeTaxPeriodSetup);
      PartyCode := CreateAndUpdateParty;
      VendorNo := CreateVendor(FindCurrency,FindCountryRegion);
      TDSNatureOfDeductionCode := CreateSetupForTDSNatureOfDeduc(PartyCode,TDSNatureOfDeduction."TDS Group"::Contractor,
        '',ActApplicable::" ",'',LibraryRandom.RandInt(10),NODNOCHeader.Type::Party);

      // Exercise: Post Bank Payment Voucher with Nature of Remittance.
      PostedDocumentNo := CreateAndPostBankPmntVoucher(VendorNo,
        TDSNatureOfDeductionCode,GenJournalLine."Gen. Posting Type"::" ",'',ActApplicable::" ",
        GenJournalLine."Party Type"::Party,PartyCode);

      // Verify: Verify Nature of Remittance,Act Applicable,TDS Paid on TDS and Form 26Q/27Q Entry.
      VerifyTDSEntry(PostedDocumentNo,MinorHeadCode::" ",0D,'',ActApplicable::" ",PartyCode);

      // Tear down.
      WORKDATE := OldWorkDate;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler,GenerateCertificateNosRequestPageHandler)]
    PROCEDURE ChallanRegWithMinorHeadCode@1500001();
    VAR
      IncomeTaxPeriodSetup@1500200 : Record 16501;
      PurchaseHeader@1500208 : Record 38;
      TDSNatureOfDeduction@1500204 : Record 13726;
      NODNOCHeader@1500206 : Record 13786;
      GenJournalLine@1500210 : Record 81;
      TDSNatureOfDeductionCode@1500203 : Code[10];
      PostedDocumentNo@1500207 : Code[20];
      VendorNo@1500202 : Code[20];
      ActApplicable@1500205 : ' ,IT,DTAA';
      MinorHeadCode@1500209 : ' ,200,400';
      OldWorkdate@1500201 : Date;
    BEGIN
      // Verify TDS Entry and Form 26Q/27Q Entry after Generating Certificate No with Minor Head Code with updated Challan details
      // after posting Purchase Document.

      // Setup.
      Initialize;
      OldWorkdate := SetupIncomeTaxAccountingPeriod(IncomeTaxPeriodSetup);
      VendorNo := CreateVendor('','');
      TDSNatureOfDeductionCode := CreateSetupForTDSNatureOfDeduc(
        VendorNo,TDSNatureOfDeduction."TDS Group"::Contractor,
        '',ActApplicable::" ",'',LibraryRandom.RandInt(10),NODNOCHeader.Type::Vendor);
      PostedDocumentNo := CreateAndPostPurchaseDoc(
        PurchaseHeader,VendorNo,FindGLAccountNo,LibraryRandom.RandDec(100,2),TDSNatureOfDeductionCode);
      MinorHeadCode := MinorHeadCode::"400";
      UpdateChallanDetAfterPayTDS(PostedDocumentNo,TDSNatureOfDeduction."TDS Group"::Contractor,
        GenJournalLine."Gen. Posting Type"::" ",PurchaseHeader."Document Type"::Invoice,MinorHeadCode);

      // Exercise: Run Generate Certificate No. Report.
      RunGenerateCertificateNos2(VendorNo,TDSNatureOfDeduction."TDS Group"::Contractor,IncomeTaxPeriodSetup."Starting Date");

      // Verify: Verify Nature of Remittance,Act Applicable,TDS Paid on TDS and Form 26Q/27Q Entry.
      VerifyTDSEntry(PostedDocumentNo,MinorHeadCode,WORKDATE,'',ActApplicable::" ",VendorNo);
      VerifyForm26Q27QEntry(PostedDocumentNo,TRUE,'',ActApplicable::" ",MinorHeadCode);

      // Tear down.
      WORKDATE := OldWorkdate;
    END;

    [Test]
    PROCEDURE ChallanRegWithUpdatedAmounts@1500206();
    VAR
      IncomeTaxPeriodSetup@1500210 : Record 16501;
      PurchaseHeader@1500209 : Record 38;
      TDSNatureOfDeduction@1500208 : Record 13726;
      NODNOCHeader@1500207 : Record 13786;
      GenJournalLine@1500206 : Record 81;
      TDSNatureOfDeductionCode@1500205 : Code[10];
      PostedDocumentNo@1500204 : Code[20];
      VendorNo@1500203 : Code[20];
      UpdatedTDSAmount@1500211 : Decimal;
      ActApplicable@1500202 : ' ,IT,DTAA';
      MinorHeadCode@1500201 : ' ,200,400';
      OldWorkdate@1500200 : Date;
      ChallanNo@1501000 : Code[20];
    BEGIN
      // Verify TDS Intrest Amount,Others,Fee with Minor Head Code on Challan Register record after running Update challan register.

      // Setup: Post Purchase Document with Minor Header Code and update challan details After Pay TDS.
      Initialize;
      OldWorkdate := SetupIncomeTaxAccountingPeriod(IncomeTaxPeriodSetup);
      VendorNo := CreateVendor('','');
      TDSNatureOfDeductionCode := CreateSetupForTDSNatureOfDeduc(VendorNo,
        TDSNatureOfDeduction."TDS Group"::Contractor,'',
        ActApplicable::" ",'',LibraryRandom.RandInt(10),NODNOCHeader.Type::Vendor);
      PostedDocumentNo := CreateAndPostPurchaseDoc(
        PurchaseHeader,VendorNo,
        FindGLAccountNo,LibraryRandom.RandDec(100,2),TDSNatureOfDeductionCode);
      MinorHeadCode := MinorHeadCode::"400";
      ChallanNo := UpdateChallanDetAfterPayTDS(PostedDocumentNo,TDSNatureOfDeduction."TDS Group"::Contractor,
        GenJournalLine."Gen. Posting Type"::" ",PurchaseHeader."Document Type"::Invoice,MinorHeadCode);

      // Exercise: Run Update Challan Register to update TDS Intrest Amount,TDS Others,TDS Fee.
      UpdatedTDSAmount := RunUpdateChallanRegister(ChallanNo,MinorHeadCode);

      // Verify: Verify values on Challan Register.
      VerifyValuesOnChallanRegister(ChallanNo,UpdatedTDSAmount,MinorHeadCode);

      // Tear down.
      WORKDATE := OldWorkdate;
    END;

    [Test]
    PROCEDURE NatureOfRemWithTDSPerZero@1500225();
    VAR
      PurchaseLine@1500213 : Record 39;
      OldWorkDate@1500200 : Date;
    BEGIN
      // Verify TDS Amount is Zero with Nature of remittance on Purchase Line when TDS Percentage is Zero.

      // Setup & Exercise.
      Initialize;
      OldWorkDate := CreateAndCalTDSOnPurchLine(PurchaseLine,0);

      // Verfy : Verify TDS Amount is calculated on Purchase Line after calculate TDS according to TDS Setup with Nature of Remittance.
      VerifyTDSAmountOnPurchaseLine(PurchaseLine,0,PurchaseLine."TDS Group");

      // Tear down.
      WORKDATE := OldWorkDate;
    END;

    [Test]
    PROCEDURE NatureOfRemOnPuchLine@1500205();
    VAR
      PurchaseLine@1500201 : Record 39;
      TDSPercentage@1500202 : Decimal;
      OldWorkDate@1500200 : Date;
    BEGIN
      // Verify TDS Amount is calculated with Nature of remittance on Purchase Line with TDS Percentage.

      // Setup & Exercise.
      Initialize;
      TDSPercentage := LibraryRandom.RandDecInRange(1,10,2);
      OldWorkDate := CreateAndCalTDSOnPurchLine(PurchaseLine,TDSPercentage);

      // Verfy : Verify TDS Amount is calculated on Purchase Line after calculate TDS according to TDS Setup with Nature of Remittance.
      VerifyTDSAmountOnPurchaseLine(PurchaseLine,
        ROUND(PurchaseLine."Line Amount" * TDSPercentage / 100),PurchaseLine."TDS Group");

      // Tear down.
      WORKDATE := OldWorkDate;
    END;

    [Test]
    PROCEDURE NatureOfRemAfterPostPurchDoc@1500213();
    VAR
      IncomeTaxPeriodSetup@1500213 : Record 16501;
      PurchaseHeader@1500212 : Record 38;
      PurchaseLine@1500211 : Record 39;
      TDSNatureOfDeduction@1500210 : Record 13726;
      NODNOCHeader@1500209 : Record 13786;
      GenJournalLine@1500208 : Record 81;
      NatureOfRemittance@1500207 : Record 13783;
      TDSNatureOfDeductionCode@1500206 : Code[10];
      PostedDocumentNo@1500205 : Code[20];
      VendorNo@1500204 : Code[20];
      TDSPercentage@1500203 : Decimal;
      ActApplicable@1500202 : ' ,IT,DTAA';
      MinorHeadCode@1500201 : ' ,200,400';
      OldWorkdate@1500200 : Date;
    BEGIN
      // Verify Nature of Remittance,Act Applicable,TDS Paid on Table "Form 26Q/27Q" after posting Purchase Invoice.

      // Setup : Create Purchase line with Nature of Remittance.
      Initialize;
      OldWorkdate := SetupIncomeTaxAccountingPeriod(IncomeTaxPeriodSetup);
      TDSPercentage := LibraryRandom.RandInt(10);
      VendorNo := CreateVendor(FindCurrency,FindCountryRegion);
      LibraryTDS.CreateNatureOfRemittance(NatureOfRemittance);
      TDSNatureOfDeductionCode := CreateSetupForTDSNatureOfDeduc(
        VendorNo,TDSNatureOfDeduction."TDS Group"::"Payable to Non Residents",
        NatureOfRemittance.Code,ActApplicable::IT,FindCountryRegion,TDSPercentage,NODNOCHeader.Type::Vendor);

      // Exercise: Post Purchase Order.
      PostedDocumentNo := PostPurchDocWithNatureOfRemit(
        '',VendorNo,TDSNatureOfDeductionCode,NatureOfRemittance.Code,FindCountryRegion);

      // Verify: Verify values on "Form 26Q/27Q".
      VerifyForm26Q27QEntry(PostedDocumentNo,FALSE,NatureOfRemittance.Code,ActApplicable::IT,MinorHeadCode::" ");

      // Tear down.
      WORKDATE := OldWorkdate;
    END;

    [Test]
    PROCEDURE NatureOfRemWithContractor@1500209();
    VAR
      IncomeTaxPeriodSetup@1500213 : Record 16501;
      TDSNatureOfDeduction@1500210 : Record 13726;
      NODNOCHeader@1500209 : Record 13786;
      NatureOfRemittance@1500207 : Record 13783;
      ActApplicable@1500202 : ' ,IT,DTAA';
      OldWorkdate@1500200 : Date;
    BEGIN
      // Verify Error message while updating Nature of remittance for TDS Group other than "Payable to Non Residents".

      // Setup: Setup Income Tax Accounting period.
      Initialize;
      OldWorkdate := SetupIncomeTaxAccountingPeriod(IncomeTaxPeriodSetup);
      LibraryTDS.CreateNatureOfRemittance(NatureOfRemittance);

      // Exercise: Create setup for TDS Nature Of Deduction with NOD/NOC.
      ASSERTERROR CreateSetupForTDSNatureOfDeduc(
        CreateVendor('',FindCountryRegion),TDSNatureOfDeduction."TDS Group"::Contractor,
        NatureOfRemittance.Code,ActApplicable::IT,FindCountryRegion,LibraryRandom.RandInt(10),NODNOCHeader.Type::Vendor);

      // Verify: Verify Error message while updating Nature of remittance for TDS Group other than "Payable to Non Residents"
      Assert.ExpectedError(TDSGroupPayableToNonResidentErr);

      // Tear down.
      WORKDATE := OldWorkdate;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler,GenerateCertificateNosRequestPageHandler)]
    PROCEDURE NatureOfRemWithAdvPayment@1500210();
    VAR
      IncomeTaxPeriodSetup@1500213 : Record 16501;
      PurchaseHeader@1500212 : Record 38;
      PurchaseLine@1500211 : Record 39;
      TDSNatureOfDeduction@1500210 : Record 13726;
      NODNOCHeader@1500209 : Record 13786;
      GenJournalLine@1500208 : Record 81;
      NatureOfRemittance@1500207 : Record 13783;
      TDSNatureOfDeductionCode@1500206 : Code[10];
      PostedDocumentNo@1500205 : Code[20];
      VendorNo@1500204 : Code[20];
      TDSPercentage@1500203 : Decimal;
      ActApplicable@1500202 : ' ,IT,DTAA';
      MinorHeadCode@1500201 : ' ,200,400';
      OldWorkdate@1500200 : Date;
    BEGIN
      // Verify Nature of Remittance,Act Applicable,TDS Paid on Table "Form 26Q/27Q" when advance Bank payment applied to Purchase Inv.

      // Setup: Update Challan Details with Nature of remittance when we apply advance payment to Invoice.
      Initialize;
      OldWorkdate := SetupIncomeTaxAccountingPeriod(IncomeTaxPeriodSetup);
      VendorNo := CreateVendor(FindCurrency,FindCountryRegion);
      LibraryTDS.CreateNatureOfRemittance(NatureOfRemittance);
      TDSNatureOfDeductionCode := CreateSetupForTDSNatureOfDeduc(
        VendorNo,TDSNatureOfDeduction."TDS Group"::"Payable to Non Residents",
        NatureOfRemittance.Code,ActApplicable::IT,FindCountryRegion,LibraryRandom.RandInt(10),NODNOCHeader.Type::Vendor);
      PostedDocumentNo := CreateAndPostBankPmntVoucher(VendorNo,TDSNatureOfDeductionCode,GenJournalLine."Gen. Posting Type"::" ",
        NatureOfRemittance.Code,ActApplicable::IT,GenJournalLine."Party Type"::Vendor,VendorNo);
      PostedDocumentNo := PostPurchDocWithNatureOfRemit(
        PostedDocumentNo,VendorNo,TDSNatureOfDeductionCode,NatureOfRemittance.Code,FindCountryRegion);
      MinorHeadCode := MinorHeadCode::"400";
      UpdateChallanDetAfterPayTDS(PostedDocumentNo,TDSNatureOfDeduction."TDS Group"::"Payable to Non Residents",
        GenJournalLine."Gen. Posting Type"::" ",PurchaseHeader."Document Type"::Invoice,MinorHeadCode);

      // Exercise: Run Generate Certificate No. Report.
      RunGenerateCertificateNos2(VendorNo,TDSNatureOfDeduction."TDS Group"::"Payable to Non Residents",IncomeTaxPeriodSetup."Starting Date");

      // Verify: Verify Nature of Remittance,Act Applicable,TDS Paid on TDS and Form 26Q/27Q Entry.
      VerifyTDSEntry(PostedDocumentNo,MinorHeadCode,WORKDATE,NatureOfRemittance.Code,ActApplicable::IT,VendorNo);
      VerifyForm26Q27QEntry(PostedDocumentNo,TRUE,NatureOfRemittance.Code,ActApplicable::IT,MinorHeadCode);

      // Tear down.
      WORKDATE := OldWorkdate;
    END;

    [Test]
    PROCEDURE NatureOfRemAfterPostBankPmt@1500215();
    VAR
      GenJournalLine@1500207 : Record 81;
      IncomeTaxPeriodSetup@1500206 : Record 16501;
      NatureOfRemittance@1500204 : Record 13783;
      NODNOCHeader@1500210 : Record 13786;
      TDSNatureOfDeduction@1500205 : Record 13726;
      TDSNatureOfDeductionCode@1500208 : Code[20];
      DocumentNo@1500203 : Code[20];
      PostedDocumentNo@1500202 : Code[20];
      VendorNo@1500201 : Code[20];
      ActApplicable@1500209 : ' ,IT,DTAA';
      MinorHeadCode@1500211 : ' ,200,400';
      OldWorkdate@1500200 : Date;
    BEGIN
      // Verify Nature of Remittance,Act Applicable on TDS Entry and Form 26Q/27Q Entry after posting normal Bank payment.

      // Setup: Create and Post Purchase Order with multiple TDS Groups.
      Initialize;
      OldWorkdate := SetupIncomeTaxAccountingPeriod(IncomeTaxPeriodSetup);
      LibraryTDS.CreateNatureOfRemittance(NatureOfRemittance);
      VendorNo := CreateVendor(FindCurrency,FindCountryRegion);
      TDSNatureOfDeductionCode := CreateSetupForTDSNatureOfDeduc(
        VendorNo,TDSNatureOfDeduction."TDS Group"::"Payable to Non Residents",
        NatureOfRemittance.Code,ActApplicable::DTAA,FindCountryRegion,LibraryRandom.RandInt(10),NODNOCHeader.Type::Vendor);

      // Exercise: Post Bank Payment Voucher with Nature of Remittance.
      PostedDocumentNo := CreateAndPostBankPmntVoucher(VendorNo,
        TDSNatureOfDeductionCode,GenJournalLine."Gen. Posting Type"::" ",NatureOfRemittance.Code,ActApplicable::DTAA,
        GenJournalLine."Party Type"::Vendor,VendorNo);

      // Verify: Verify Nature of Remittance,Act Applicable,TDS Paid on TDS and Form 26Q/27Q Entry and .
      VerifyTDSEntry(PostedDocumentNo,MinorHeadCode::" ",0D,NatureOfRemittance.Code,ActApplicable::DTAA,VendorNo);
      VerifyForm26Q27QEntry(PostedDocumentNo,FALSE,NatureOfRemittance.Code,ActApplicable::DTAA,MinorHeadCode::" ");

      // Tear down.
      WORKDATE := OldWorkdate;
    END;

    [Test]
    PROCEDURE PayTDSDocNoWithMultTDSGps@1500211();
    VAR
      GenJournalLine@1500206 : Record 81;
      IncomeTaxPeriodSetup@1500200 : Record 16501;
      TDSNatureOfDeductionCode@1500203 : Code[10];
      TDSNatureOfDeductionCode2@1500204 : Code[10];
      TDSNatureOfDeduction@1500000 : Record 13726;
      DocumentNo@1500207 : Code[20];
      PostedDocumentNo@1500205 : Code[20];
      VendorNo@1500202 : Code[20];
      OldWorkdate@1500201 : Date;
    BEGIN
      // Verify Pay TDS Document No. and TDS Paid on TDS Entry after payment of TDS when Purchase Invoice posted with multiple Tax Groups.

      // Setup: Create and Post Purchase Order with multiple TDS Groups.
      Initialize;
      OldWorkdate := SetupIncomeTaxAccountingPeriod(IncomeTaxPeriodSetup);
      VendorNo := CreateVendor('','');
      CreateNODNOCWithMulTDSGroups(TDSNatureOfDeductionCode,TDSNatureOfDeductionCode2,VendorNo);
      PostedDocumentNo := PostPurchDocWithMultTDSGps(VendorNo,TDSNatureOfDeductionCode,TDSNatureOfDeductionCode2);
      PayTDS(PostedDocumentNo,TDSNatureOfDeduction."TDS Group"::Contractor,GenJournalLine."Gen. Posting Type"::Purchase);

      // Exercise: Pay TDS.
      DocumentNo := PayTDS(PostedDocumentNo,TDSNatureOfDeduction."TDS Group"::Commission,GenJournalLine."Gen. Posting Type"::Purchase);

      // Verify: Verify Pay TDS Document No And TDS Paid in TDS Entry.
      VerifyValuesInTDSEntry(PostedDocumentNo,DocumentNo);

      // Tear down.
      WORKDATE := OldWorkdate;
    END;

    [Test]
    PROCEDURE TANRegistrationNoOnCompanyInfo@1500203();
    VAR
      CompanyInformation@1500200 : Record 79;
    BEGIN
      // Verify error message appeared when TAN Registration No. is greater than its length on Company Information.

      // Setup.
      Initialize;
      CompanyInformation.GET;

      // Exercise: Update greater than "TAN Registration No." length in Company Information.
      ASSERTERROR UpdateCompanyInformation(GetNewCode);

      // Verify: Verify the error message.
      Assert.ExpectedError(StringErr);

      // Teardown.
      UpdateCompanyInformation(CompanyInformation."TAN Registration No.");
    END;

    LOCAL PROCEDURE Initialize@1500200();
    BEGIN
      LibraryRandom.SetSeed(1);
    END;

    LOCAL PROCEDURE CreateAndPostBankPmntVoucher@5(VendorNo@1027 : Code[20];CodeContractor@1028 : Code[10];GenPostingType@1500200 : Option;NatureOfRemittance@1500201 : Code[10];ActApplicable@1500202 : Option;PartyType@1500203 : Option;PartyNo@1500204 : Code[20]) DocumentNo : Code[20];
    VAR
      GenJournalLine@1030 : Record 81;
      Vendor@1500000 : Record 23;
    BEGIN
      Vendor.GET(VendorNo);
      CreateGeneralJournalLine(GenJournalLine,VendorNo,LibraryRandom.RandDec(1000,2),GenJournalLine."Account Type"::Vendor,
        Vendor."Location Code",GenPostingType);
      WITH GenJournalLine DO BEGIN
        VALIDATE("Party Type",PartyType);
        VALIDATE("Party Code",PartyNo);
        VALIDATE("Location Code",Vendor."Location Code");
        VALIDATE("TDS Nature of Deduction",CodeContractor);
        VALIDATE("Gen. Posting Type",GenPostingType);
        "Nature of Remittance" := NatureOfRemittance;
        "Act Applicable" := ActApplicable;
        MODIFY(TRUE);
        DocumentNo := "Document No.";
        LibraryERM.PostGeneralJnlLine(GenJournalLine);
      END;
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDoc@1500000(VAR PurchaseHeader@1047 : Record 38;VendorNo@1048 : Code[20];GLAccountNo@1049 : Code[20];Amount@1050 : Decimal;TDSNatureOfDeductionCode@1051 : Code[10]) PostedDocumentNo : Code[20];
    VAR
      PurchaseLine@1054 : Record 39;
      NoSeriesManagement@1500000 : Codeunit 396;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,VendorNo,'',PurchaseHeader."Applies-to Doc. Type"::" ");
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",GLAccountNo,1);
      PurchaseLine.VALIDATE("Direct Unit Cost",Amount);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",TDSNatureOfDeductionCode);
      PurchaseLine.MODIFY(TRUE);
      PostedDocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Posting No. Series",WORKDATE,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@7(VAR GenJournalLine@1033 : Record 81;VendorNo@1034 : Code[20];Amount@1035 : Decimal;AccountType@1500000 : Option;LocationCode@1500001 : Code[10];GenPostingType@1500200 : Option);
    VAR
      GenJournalBatch@1039 : Record 232;
      GenJournalTemplate@1500002 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::General);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.SETRANGE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalTemplate.FINDFIRST;
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine.
        "Document Type"::Payment,AccountType,VendorNo,Amount);
      WITH GenJournalLine DO BEGIN
        VALIDATE("Document No.",LibraryUtility.GenerateRandomCode(FIELDNO("Document No."),DATABASE::"Gen. Journal Line"));
        VALIDATE("Gen. Posting Type",GenPostingType);
        VALIDATE("Bal. Account Type","Bal. Account Type"::"Bank Account");
        VALIDATE("Bal. Account No.",FindBankAccount);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateIncomeTaxAccPeriod@25(VAR IncomeTaxPeriodSetup@1500200 : Record 16501) OldWorkDate : Date;
    VAR
      IncomeTaxAccountingPeriod@1000 : Record 13724;
    BEGIN
      IncomeTaxAccountingPeriod.FINDLAST;
      WORKDATE := IncomeTaxAccountingPeriod."Starting Date";
      IncomeTaxPeriodSetup.SETRANGE("Starting Date",WORKDATE);
      IF IncomeTaxPeriodSetup.FINDFIRST THEN
        EXIT;
      CreateIncomeTaxPeriodSetup(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.");
    END;

    LOCAL PROCEDURE CreateIncomeTaxPeriodSetup@22(VAR IncomeTaxPeriodSetup@1500200 : Record 16501;IncomeTaxAccountingPeriodNo@1000 : Integer) : Integer;
    BEGIN
      WITH IncomeTaxPeriodSetup DO BEGIN
        LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriodNo,Quarter::Q1);
        "Starting Date" := WORKDATE;
        VALIDATE("Ending Date",CALCDATE('<4M>',WORKDATE)); // Standard Accounting Period Quarter in IN
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateSetupForTDSNatureOfDeduc@1500214(VendorNo@1500202 : Code[20];TDSGroup@1500203 : Option;NatureOfRemittance@1500204 : Code[10];ActApplicable@1500205 : Option;CountryCode@1500206 : Code[10];TDSPercentage@1500208 : Decimal;Type@1500209 : Option) : Code[10];
    VAR
      AssesseeCode@1500200 : Code[10];
      TDSNatureOfDeduction@1500201 : Code[10];
      NODNOCHeader@1500207 : Record 13786;
    BEGIN
      AssesseeCode := LibraryTDS.CreateAssesseeCode();
      CreateTDSNatureDeductionAndTDS(TDSNatureOfDeduction,TDSGroup,AssesseeCode,
        NatureOfRemittance,ActApplicable,CountryCode,TDSPercentage);
      CreateNODNOCSetup(NODNOCHeader,
        VendorNo,AssesseeCode,TDSNatureOfDeduction,NatureOfRemittance,ActApplicable,Type);
      EXIT(TDSNatureOfDeduction);
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@1500220(VAR PurchaseHeader@1500200 : Record 38;VendorNo@1500201 : Code[20];AppliesToDocNo@1500203 : Code[20];AppliesToDoctype@1500202 : Option);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      WITH PurchaseHeader DO BEGIN
        VALIDATE("Vendor Invoice No.","No.");
        VALIDATE("Applies-to Doc. Type",AppliesToDoctype);
        VALIDATE("Applies-to Doc. No.",AppliesToDocNo);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseLine@1500223(VAR PurchaseLine@1500200 : Record 39;VAR PurchaseHeader@1500201 : Record 38;TDSNatureOfDeductionCode@1500202 : Code[10];NatureOfRemittance@1500203 : Code[10];ActApplicable@1500204 : Option;CountryCode@1500205 : Code[10]);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",FindGLAccountNo,LibraryRandom.RandDec(10,2));
      WITH PurchaseLine DO BEGIN
        VALIDATE("Direct Unit Cost",LibraryRandom.RandDecInRange(1000,10000,2));
        VALIDATE("TDS Nature of Deduction",TDSNatureOfDeductionCode);
        VALIDATE("Nature of Remittance",NatureOfRemittance);
        VALIDATE("Act Applicable",ActApplicable);
        VALIDATE("Country Code",CountryCode);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateAndUpdateParty@1500240() : Code[10];
    VAR
      Party@1500200 : Record 13730;
    BEGIN
      LibraryTDS.CreateParty(Party);
      Party.VALIDATE("P.A.N. No.",'ACFPH4256A');  // Valid P.A.N. No.
      Party.MODIFY(TRUE);
      EXIT(Party.Code);
    END;

    LOCAL PROCEDURE CreateNODNOCWithMulTDSGroups@1500227(VAR TDSNatureOfDeductionCode@1500200 : Code[10];VAR TDSNatureOfDeductionCode2@1500201 : Code[10];VendorNo@1500206 : Code[20]);
    VAR
      AssesseeCode@1500202 : Code[10];
      ActApplicable@1500203 : ' ,IT,DTAA';
      NODNOCHeader@1500204 : Record 13786;
      NODNOCLines@1500205 : Record 13785;
      TDSNatureOfDeduction@1500001 : Record 13726;
    BEGIN
      AssesseeCode := LibraryTDS.CreateAssesseeCode();
      CreateTDSNatureDeductionAndTDS(TDSNatureOfDeductionCode,TDSNatureOfDeduction."TDS Group"::Contractor,AssesseeCode,
        '',ActApplicable::" ",'',LibraryRandom.RandInt(10));
      CreateTDSNatureDeductionAndTDS(TDSNatureOfDeductionCode2,TDSNatureOfDeduction."TDS Group"::Commission,AssesseeCode,
        '',ActApplicable::" ",'',LibraryRandom.RandInt(10));
      CreateNODNOCSetup(
        NODNOCHeader,VendorNo,AssesseeCode,TDSNatureOfDeductionCode,'',ActApplicable::" ",NODNOCHeader.Type::Vendor);
      LibraryTDS.CreateNODNOCLines(NODNOCLines,NODNOCHeader,TDSNatureOfDeductionCode2,TRUE,'',ActApplicable::" ");
    END;

    LOCAL PROCEDURE CreateAndCalTDSOnPurchLine@1500236(VAR PurchaseLine@1500201 : Record 39;TDSPercentage@1500200 : Decimal) OldWorkDate : Date;
    VAR
      IncomeTaxPeriodSetup@1500215 : Record 16501;
      PurchaseHeader@1500214 : Record 38;
      TDSNatureOfDeduction@1500212 : Record 13726;
      NODNOCHeader@1500211 : Record 13786;
      GenJournalLine@1500210 : Record 81;
      NatureOfRemittance@1500209 : Record 13783;
      TDSNatureOfDeductionCode@1500208 : Code[10];
      PostedDocumentNo@1500207 : Code[20];
      VendorNo@1500206 : Code[20];
      MinorHeadCode@1500203 : '200,400';
      ActApplicable@1500202 : ' ,IT,DTAA';
    BEGIN
      // Create Purchase line with Nature of Remittance.
      OldWorkDate := SetupIncomeTaxAccountingPeriod(IncomeTaxPeriodSetup);
      VendorNo := CreateVendor(FindCurrency,FindCountryRegion);
      LibraryTDS.CreateNatureOfRemittance(NatureOfRemittance);
      TDSNatureOfDeductionCode := CreateSetupForTDSNatureOfDeduc(
        VendorNo,TDSNatureOfDeduction."TDS Group"::"Payable to Non Residents",
        NatureOfRemittance.Code,ActApplicable::IT,FindCountryRegion,TDSPercentage,NODNOCHeader.Type::Vendor);
      CreatePurchaseHeader(PurchaseHeader,VendorNo,'',PurchaseHeader."Applies-to Doc. Type"::" ");
      CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,TDSNatureOfDeductionCode,NatureOfRemittance.Code,ActApplicable::IT,FindCountryRegion);

      // Calculate TDS Amount.
      PurchaseLine.CalculateTDS(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateNODNOCSetup@8(VAR NODNOCHeader@1040 : Record 13786;No@1042 : Code[20];AssesseeCode@1043 : Code[10];CodeContractor@1044 : Code[10];NaturOfRemittance@1500200 : Code[10];ActApplicable@1500202 : Option;Type@1500203 : Option);
    VAR
      NODNOCLines@1500201 : Record 13785;
    BEGIN
      LibraryTDS.CreateNODNOCHeader(NODNOCHeader,Type,No,AssesseeCode);
      LibraryTDS.CreateNODNOCLines(NODNOCLines,NODNOCHeader,CodeContractor,TRUE,NaturOfRemittance,ActApplicable);
    END;

    LOCAL PROCEDURE CreateTDSNatureDeductionAndTDS@10(VAR TDSNatureDeduction@1055 : Code[10];TDSGroup@1056 : Option;AssesseeCode@1057 : Code[10];NaturOfRemittance@1500201 : Code[10];ActApplicable@1500200 : Option;CountryCode@1500202 : Code[10];TDSPercentage@1500203 : Decimal);
    VAR
      TDSSetup@1058 : Record 13728;
    BEGIN
      TDSNatureDeduction := LibraryTDS.CreateTDSNatureDeduction(TDSGroup);
      CreateTDSSetup(
        TDSSetup,TDSNatureDeduction,AssesseeCode,NaturOfRemittance,ActApplicable,CountryCode,TDSPercentage);
    END;

    LOCAL PROCEDURE CreateTDSSetup@11(VAR TDSSetup@1060 : Record 13728;TDSNatureDeductionCode@1061 : Code[10];AssesseeCode@1062 : Code[10];NaturOfRemittance@1500201 : Code[10];ActApplicable@1500200 : Option;CountryCode@1500202 : Code[10];TDSPercentage@1500203 : Decimal);
    BEGIN
      LibraryTDS.CreateTDSSetup(
        TDSSetup,TDSNatureDeductionCode,AssesseeCode,WORKDATE,'',NaturOfRemittance,ActApplicable,CountryCode);
      TDSSetup.VALIDATE("TDS %",TDSPercentage);
      TDSSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendor@12(CurrencyCode@1500200 : Code[10];CountryRegionCode@1500201 : Code[10]) : Code[20];
    VAR
      Vendor@1063 : Record 23;
      GeneralPostingSetup@1064 : Record 252;
      Location@1500001 : Record 14;
    BEGIN
      GeneralPostingSetup.SETFILTER("Purch. Account",'<>%1','');
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryPurchase.CreateVendor(Vendor);
      WITH Vendor DO BEGIN
        VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
        VALIDATE("P.A.N. No.",'ACFPH4256B'); // Valid P.A.N. No.
        VALIDATE("Country/Region Code",CountryRegionCode);
        VALIDATE("Currency Code",CurrencyCode);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE FindBankAccount@6() : Code[20];
    VAR
      BankAccount@1032 : Record 270;
    BEGIN
      BankAccount.SETFILTER("Currency Code",'');
      LibraryERM.FindBankAccount(BankAccount);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE FindGLAccountNo@13() : Code[20];
    VAR
      GLAccount@1065 : Record 15;
      GeneralPostingSetup@1066 : Record 252;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryERM.FindGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE FindCurrency@1500221() : Code[10];
    VAR
      Currency@1500200 : Record 4;
    BEGIN
      LibraryERM.FindCurrency(Currency);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE FindCountryRegion@1500231() : Code[10];
    VAR
      CountryRegion@1500200 : Record 9;
    BEGIN
      CountryRegion.FINDFIRST;
      EXIT(CountryRegion.Code);
    END;

    LOCAL PROCEDURE GetNewCode@1500208() : Code[20];
    VAR
      Str@1500200 : Text[30];
    BEGIN
      IF Str = '' THEN
        Str := 'XX000';
      Str := INCSTR(Str);
      EXIT(FORMAT(TIME) + Str);
    END;

    LOCAL PROCEDURE GetFinancialYear@1500218() : Code[6];
    VAR
      IncomeTaxAccountingPeriod@1500200 : Record 13724;
    BEGIN
      IncomeTaxAccountingPeriod.SETRANGE("Starting Date",WORKDATE);
      IncomeTaxAccountingPeriod.FINDFIRST;
      EXIT(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
    END;

    PROCEDURE GetTDSPayableAccount@1500032(TDSGroupCode@1500000 : Option) : Code[20];
    VAR
      TDSGroup@1500001 : Record 13731;
    BEGIN
      TDSGroup.SETRANGE("TDS Group",TDSGroupCode);
      TDSGroup.FINDFIRST;
      EXIT(TDSGroup."TDS Account");
    END;

    LOCAL PROCEDURE PostPurchDocWithNatureOfRemit@1500224(PostedDocumentNo@1500203 : Code[20];VendorNo@1500202 : Code[20];TDSNatureOfDeductionCode@1500204 : Code[10];NatureOfRemittance@1500205 : Code[10];CountryCode@1500206 : Code[10]) DocumentNo : Code[20];
    VAR
      PurchaseHeader@1500200 : Record 38;
      PurchaseLine@1500201 : Record 39;
      ActApplicable@1500207 : ' ,IT,DTAA';
      NoSeriesManagement@1500208 : Codeunit 396;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,VendorNo,PostedDocumentNo,PurchaseHeader."Applies-to Doc. Type"::Payment);
      CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,TDSNatureOfDeductionCode,NatureOfRemittance,ActApplicable::IT,CountryCode);
      DocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Posting No. Series",WORKDATE,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE PostPurchDocWithMultTDSGps@1500226(VendorNo@1500203 : Code[20];TDSNatureDeductionCode@1500204 : Code[20];TDSNatureDeduction2Code@1500205 : Code[20]) PostedDocumentNo : Code[20];
    VAR
      PurchaseHeader@1500200 : Record 38;
      PurchaseLine@1500201 : Record 39;
      PurchaseLine2@1500202 : Record 39;
      NoSeriesManagement@1500206 : Codeunit 396;
      ActApplicable@1500207 : ' ,IT,DTAA';
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",FindGLAccountNo,1);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchaseLine.VALIDATE("TDS Nature of Deduction",TDSNatureDeductionCode);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine2,PurchaseHeader,PurchaseLine.Type::"G/L Account",FindGLAccountNo,1);
      PurchaseLine2.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchaseLine2.VALIDATE("TDS Nature of Deduction",TDSNatureDeduction2Code);
      PurchaseLine2.MODIFY(TRUE);
      PostedDocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Posting No. Series",WORKDATE,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE PayTDS@1500003(PostedDocumentNo@1500000 : Code[20];TDSNatureOfDeduction@1500002 : Option;GenPostingType@1500201 : Option) DocumentNo : Code[20];
    VAR
      PayTDS@1500004 : Page 13788;
      TDSEntry@1500003 : Record 13729;
      GenJnlLine@1500005 : Record 81;
      CompanyInformation@1500200 : Record 79;
    BEGIN
      CreateGeneralJournalLine(GenJnlLine,GetTDSPayableAccount(TDSNatureOfDeduction),0,
        GenJnlLine."Account Type"::"G/L Account",'',GenPostingType);
      CompanyInformation.GET;
      GenJnlLine."T.A.N. No." := CompanyInformation."T.A.N. No.";
      GenJnlLine."Pay TDS" := TRUE;
      GenJnlLine.MODIFY;
      TDSEntry.SETFILTER("Document No.",PostedDocumentNo);
      TDSEntry.FINDSET;
      PayTDS.SetBatch(GenJnlLine."Journal Batch Name",GenJnlLine."Journal Template Name",GenJnlLine."Line No.");
      PayTDS.SETTABLEVIEW(TDSEntry);
      PayTDS.PayTDS(TDSEntry);
      DocumentNo := GenJnlLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJnlLine);
    END;

    LOCAL PROCEDURE EnqueueValuesinGenerateCertNosReqPageHandler@1500422(VendorNo@1500215 : Code[20];TDSGroupCode@1500216 : Option;StartingDate@1500217 : Date);
    VAR
      IncomeTaxPeriodSetup@1500219 : Record 16501;
    BEGIN
      WITH IncomeTaxPeriodSetup DO BEGIN
        SETRANGE("Starting Date",StartingDate);
        FINDFIRST;
        LibraryVariableStorage.Enqueue(VendorNo);
        LibraryVariableStorage.Enqueue(TDSGroupCode);
        LibraryVariableStorage.Enqueue("Starting Date");
        LibraryVariableStorage.Enqueue("Ending Date");
      END;
    END;

    LOCAL PROCEDURE RunGenerateCertificateNos2@1500441(NODNOCHeaderNo@1500130 : Code[20];TDSNatureDeductionTDSGroup@1500131 : Option;StartingDate@1500132 : Date);
    BEGIN
      EnqueueValuesinGenerateCertNosReqPageHandler(NODNOCHeaderNo,TDSNatureDeductionTDSGroup,StartingDate);
      COMMIT;
      REPORT.RUN(REPORT::"Generate Certificate Nos.");
    END;

    [RequestPageHandler]
    PROCEDURE GenerateCertificateNosRequestPageHandler@1500461(VAR GenerateCertificateNos@1500118 : TestRequestPage 13720);
    VAR
      Party@1500119 : Variant;
      TDSGroupCode@1500120 : Variant;
      StartingDate@1500121 : Variant;
      EndingDate@1500122 : Variant;
      PartyType@1500123 : ' ,Party,Customer,Vendor';
    BEGIN
      LibraryVariableStorage.Dequeue(Party);
      LibraryVariableStorage.Dequeue(TDSGroupCode);
      LibraryVariableStorage.Dequeue(StartingDate);
      LibraryVariableStorage.Dequeue(EndingDate);
      GenerateCertificateNos.PartyType.SETVALUE(PartyType::Vendor);
      GenerateCertificateNos.Party.SETVALUE(Party);
      GenerateCertificateNos.TDSGroup.SETVALUE(TDSGroupCode);
      GenerateCertificateNos.StartingDate.SETVALUE(StartingDate);
      GenerateCertificateNos.EndingDate.SETVALUE(EndingDate);
      GenerateCertificateNos.ReceiptNumber.SETVALUE('ABCDEFGH');
      GenerateCertificateNos.OK.INVOKE;
    END;

    LOCAL PROCEDURE RunUpdateChallanRegister@1500217(ChallanNo@1501000 : Code[20];MinorHeadCode@1500200 : Option) UpdatedTDSAmount : Decimal;
    VAR
      ChallanRegister@1500201 : Record 16504;
      UpdateChallanRegister@1500203 : Report 16503;
    BEGIN
      UpdatedTDSAmount := ROUND(LibraryRandom.RandDecInRange(1,10,2));
      ChallanRegister.SETRANGE("Challan No.",ChallanNo);
      COMMIT;
      UpdateChallanRegister.SETTABLEVIEW(ChallanRegister);
      UpdateChallanRegister.UpdateChallan(UpdatedTDSAmount,UpdatedTDSAmount,UpdatedTDSAmount,1);
      UpdateChallanRegister.USEREQUESTPAGE(FALSE);
      UpdateChallanRegister.RUNMODAL;
    END;

    LOCAL PROCEDURE SetupDeductoryCode@19();
    VAR
      DeductorCategory@1000 : Record 16498;
      CompanyInformation@1001 : Record 79;
    BEGIN
      CompanyInformation.GET;
      IF DeductorCategory.FINDFIRST THEN
        CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code)
      ELSE BEGIN
        LibraryTDS.CreateDeductorCategory(DeductorCategory);
        CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      END;
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetupIncomeTaxAccountingPeriod@1500216(VAR IncomeTaxPeriodSetup@1500200 : Record 16501) OldWorkDate : Date;
    BEGIN
      OldWorkDate := WORKDATE;
      CreateIncomeTaxAccPeriod(IncomeTaxPeriodSetup);
      SetupDeductoryCode;
    END;

    LOCAL PROCEDURE UpdateChallanDetails@1500004(DocumentNo@1500001 : Code[20];DocumentType@1500000 : Option;MinorHeadCode@1500200 : Option) ChallanNo : Code[20];
    VAR
      TDSEntry@1500002 : Record 13729;
      UpdateChallanDetails@1500003 : Report 13721;
    BEGIN
      ChallanNo := FORMAT(LibraryRandom.RandInt(1000));
      TDSEntry.SETFILTER("Document No.",DocumentNo);
      TDSEntry.FINDLAST;
      UpdateChallanDetails.InitializeRequest(TDSEntry."Pay TDS Document No.",ChallanNo,WORKDATE,
        LibraryUtility.GenerateGUID,COPYSTR(LibraryUtility.GenerateGUID,1,7),LibraryUtility.GenerateGUID,WORKDATE,MinorHeadCode);
      UpdateChallanDetails.USEREQUESTPAGE(FALSE);
      UpdateChallanDetails.RUN;
    END;

    LOCAL PROCEDURE UpdateCompanyInformation@1500202(TANRegistrationNo@1500201 : Code[12]) : Integer;
    VAR
      CompanyInformation@1500200 : Record 79;
    BEGIN
      WITH CompanyInformation DO BEGIN
        GET;
        "TAN Registration No." := TANRegistrationNo;
        MODIFY;
        EXIT(STRLEN("TAN Registration No."));
      END;
    END;

    LOCAL PROCEDURE UpdateChallanDetAfterPayTDS@1500212(PostedDocumentNo@1500200 : Code[20];TDSGroup@1500201 : Option;GenPostingType@1500202 : Option;DocumentType@1500203 : Option;MinorHeadCode@1500204 : Option) ChallanNo : Code[20];
    BEGIN
      PayTDS(PostedDocumentNo,TDSGroup,GenPostingType);
      ChallanNo := UpdateChallanDetails(PostedDocumentNo,DocumentType,MinorHeadCode);
    END;

    LOCAL PROCEDURE VerifyValuesInTDSEntry@1500229(PostedDocumentNo@1500201 : Code[20];DocumentNo@1500202 : Code[20]);
    VAR
      TDSEntry@1500200 : Record 13729;
    BEGIN
      WITH TDSEntry DO BEGIN
        SETRANGE("Document No.",PostedDocumentNo);
        FINDSET;
        REPEAT
          TESTFIELD("Pay TDS Document No.",DocumentNo);
          TESTFIELD("TDS Paid",TRUE);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyValuesOnChallanRegister@1500219(ChallanNo@1501000 : Code[20];UpdatedTDSAmount@1500200 : Decimal;MinorHeadCode@1500202 : Option);
    VAR
      ChallanRegister@1500201 : Record 16504;
      GeneralLedgerSetup@1500203 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      WITH ChallanRegister DO BEGIN
        SETRANGE("Challan No.",ChallanNo);
        FINDFIRST;
        Assert.AreNearlyEqual(
          "TDS Interest Amount",UpdatedTDSAmount,GeneralLedgerSetup."TDS Rounding Precision",AmountMsg);
        Assert.AreNearlyEqual(
          "TDS Others",UpdatedTDSAmount,GeneralLedgerSetup."TDS Rounding Precision",AmountMsg);
        Assert.AreNearlyEqual(
          "TDS Fee",UpdatedTDSAmount,GeneralLedgerSetup."TDS Rounding Precision",AmountMsg);
      END;
    END;

    LOCAL PROCEDURE VerifyForm26Q27QEntry@1500222(PostedDocumentNo@1500200 : Code[20];TDSPaid@1500201 : Boolean;NatureOfRemittance@1500202 : Code[10];ActApplicable@1500203 : Option;MinorHeadCode@1500205 : Option);
    VAR
      Form26Q27QEntry@1500204 : Record 16505;
    BEGIN
      WITH Form26Q27QEntry DO BEGIN
        SETRANGE("Document No.",PostedDocumentNo);
        FINDFIRST;
        TESTFIELD("TDS Paid",TDSPaid);
        TESTFIELD("Nature of Remittance",NatureOfRemittance);
        TESTFIELD("Act Applicable",ActApplicable);
        TESTFIELD("Minor Head Code",MinorHeadCode);
      END;
    END;

    LOCAL PROCEDURE VerifyTDSEntry@1500228(PostedDocumentNo@1500201 : Code[20];MinorHeadCode@1500202 : Option;ChallanDate@1500203 : Date;NatureOfRemittance@1500204 : Code[10];ActApplicable@1500205 : Option;PartyCode@1500206 : Code[20]);
    VAR
      TDSEntry@1500200 : Record 13729;
    BEGIN
      WITH TDSEntry DO BEGIN
        SETRANGE("Document No.",PostedDocumentNo);
        FINDFIRST;
        TESTFIELD("Minor Head Code",MinorHeadCode);
        TESTFIELD("Challan Date",ChallanDate);
        TESTFIELD("Check Date",ChallanDate);
        TESTFIELD("Nature of Remittance",NatureOfRemittance);
        TESTFIELD("Act Applicable",ActApplicable);
        TESTFIELD("Party Code",PartyCode);
      END;
    END;

    LOCAL PROCEDURE VerifyTDSAmountOnPurchaseLine@1500230(PurchaseLine@1500201 : Record 39;TDSAmount@1500202 : Decimal;TDSGroup@1500200 : Option);
    BEGIN
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      PurchaseLine.TESTFIELD("TDS Group",TDSGroup);
      Assert.AreEqual(TDSAmount,PurchaseLine."TDS Amount",AmountMsg);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500207(Msg@1500200 : Text[1024]);
    BEGIN
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@1500501(Text@1500101 : Text[1024];VAR Reply@1500102 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      Check the functionalities of FUV3.8.

        1. Verify Nature of Remittance,Act Applicable on TDS Entry and Form 26Q/27Q Entry after posting normal Bank payment.
        2. Verify TDS Entry and Form 26Q/27Q Entry after Generating Certificate No with Minor Head Code with updated Challan details
           after posting Purchase Document.
        3. Verify TDS Intrest Amount,Others,Fee with Minor Head Code on Challan Register record after running Update challan register.
        4. Verify TDS Amount is Zero with Nature of remittance on Purchase Line when TDS Percentage is Zero.
        5. Verify TDS Amount is calculated with Nature of remittance on Purchase Line with TDS Percentage.
        6. Verify Nature of Remittance,Act Applicable,TDS Paid on Table "Form 26Q/27Q" after posting Purchase Invoice.
        7. Verify Error message while updating Nature of remittance for TDS Group other than "Payable to Non Residents".
        8. Verify Nature of Remittance,Act Applicable,TDS Paid on Table "Form 26Q/27Q" when advance Bank payment applied to Purchase Inv.
        9. Verify Nature of Remittance,Act Applicable on TDS Entry and Form 26Q/27Q Entry after posting normal Bank payment.
       10. Verify Pay TDS Document No. and TDS Paid on TDS Entry after payment of TDS when Purchase Invoice posted with
           multiple Tax Groups.
       11. Verify error message appeared when TAN Registration No. is greater than its length on Company Information.

           Covers Test Cases for WI - 351206
           ----------------------------------------------------------------------------------------------
           Test Function Name                                                                      TFS ID
           ----------------------------------------------------------------------------------------------
           BankPmtWithPartyType, ChallanRegWithMinorHeadCode, ChallanRegWithUpdatedAmounts
           NatureOfRemWithTDSPerZero, NatureOfRemOnPuchLine, NatureOfRemAfterPostPurchDoc
           NatureOfRemWithContractor, NatureOfRemWithAdvPayment, NatureOfRemAfterPostBankPmt
           PayTDSDocNoWithMultTDSGps, TANRegistrationNoOnCompanyInfo                                351206
    }
    END.
  }
}

