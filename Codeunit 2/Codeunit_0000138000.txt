OBJECT Codeunit 138000 SMB Simplify UI Sales Invoice
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      LibraryUtility@1004 : Codeunit 131000;
      LibraryVariableStorage@1025 : Codeunit 131004;
      LibrarySales@1012 : Codeunit 130509;
      LibrarySmallBusiness@1009 : Codeunit 132213;
      LibraryERM@1011 : Codeunit 131300;
      LibraryRandom@1002 : Codeunit 130440;
      MiniLinesInstructionMgt@1010 : Codeunit 1320;
      isInitialized@1000 : Boolean;
      SelectCustErr@1007 : TextConst 'ENU=You must select an existing customer.';
      CannotBeZeroEmptyErr@1008 : TextConst 'ENU=It cannot be zero or empty.';
      SelectVendorErr@1003 : TextConst 'ENU=You must select an existing vendor.';
      SellToCustomerName4HandlerFunction@1006 : Text[50];
      LeaveDocWithoutPostingTxt@1005 : TextConst 'ENU=This document is not posted.';
      FollowUpQst@1013 : TextConst '@@@={Locked};ENU=Do you want to create a follow-up to-do?';
      QuoteTxt@1014 : TextConst '@@@={Locked};ENU=Quote';
      CrMemoTxt@1015 : TextConst '@@@={Locked};ENU=Credit Memo';

    [Test]
    [HandlerFunctions(QuoteReportRequestPageHandler)]
    PROCEDURE RunQuoteReport@164();
    VAR
      Cust@1000 : Record 18;
      Item@1001 : Record 27;
      MiniSalesQuote@1004 : TestPage 1324;
    BEGIN
      // This will test that report runs. Other existing tests are checking the content
      Initialize;

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust.Name := Cust."No.";
      Cust.MODIFY(TRUE);

      LibrarySmallBusiness.CreateItem(Item);

      MiniSalesQuote.OPENNEW;
      MiniSalesQuote."Sell-to Customer Name".SETVALUE(Cust.Name);
      MiniSalesQuote.SalesLines.NEW;
      MiniSalesQuote.SalesLines."No.".SETVALUE(Item."No.");
      MiniSalesQuote.SalesLines.Quantity.SETVALUE(1);
      COMMIT;

      // Exercise
      MiniSalesQuote.Print.INVOKE;
      MiniSalesQuote.CLOSE;
    END;

    [Test]
    [HandlerFunctions(QuoteReportRequestPageHandler)]
    PROCEDURE RunQuoteReportFromList@165();
    VAR
      Cust@1000 : Record 18;
      Item@1001 : Record 27;
      MiniSalesQuote@1004 : TestPage 1324;
      MiniSalesQuotesList@1002 : TestPage 1326;
    BEGIN
      // This will test that report runs. Other existing tests are checking the content
      Initialize;

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust.Name := Cust."No.";
      Cust.MODIFY(TRUE);

      LibrarySmallBusiness.CreateItem(Item);

      MiniSalesQuote.OPENNEW;
      MiniSalesQuote."Sell-to Customer Name".SETVALUE(Cust.Name);
      MiniSalesQuote.SalesLines.NEW;
      MiniSalesQuote.SalesLines."No.".SETVALUE(Item."No.");
      MiniSalesQuote.SalesLines.Quantity.SETVALUE(1);
      MiniSalesQuote.CLOSE;

      MiniSalesQuotesList.OPENVIEW;
      MiniSalesQuotesList.FIRST;
      COMMIT;

      // Exercise
      MiniSalesQuotesList.Print.INVOKE;
      MiniSalesQuotesList.CLOSE;
    END;

    [Test]
    [HandlerFunctions(CurrencyHandler,ConfirmHandler)]
    PROCEDURE Currency@45();
    VAR
      Cust@1000 : Record 18;
      Item@1001 : Record 27;
      CurrencyExchangeRate@1003 : Record 330;
      MiniSalesInvoice@1004 : TestPage 1304;
    BEGIN
      Initialize;

      IF CurrencyExchangeRate.FINDFIRST THEN;

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust.Name := Cust."No.";
      Cust.VALIDATE("Currency Code",CurrencyExchangeRate."Currency Code");
      Cust.MODIFY(TRUE);

      LibrarySmallBusiness.CreateItem(Item);

      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Cust.Name);
      MiniSalesInvoice."Currency Code".ASSISTEDIT;
      MiniSalesInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(CurrencyHandler)]
    PROCEDURE CurrencyQuote@59();
    VAR
      Cust@1000 : Record 18;
      Item@1001 : Record 27;
      CurrencyExchangeRate@1002 : Record 330;
      MiniSalesQuote@1004 : TestPage 1324;
    BEGIN
      Initialize;

      IF CurrencyExchangeRate.FINDFIRST THEN;

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust.Name := Cust."No.";
      Cust.VALIDATE("Currency Code",CurrencyExchangeRate."Currency Code");
      Cust.MODIFY(TRUE);

      LibrarySmallBusiness.CreateItem(Item);

      MiniSalesQuote.OPENNEW;
      MiniSalesQuote."Sell-to Customer Name".SETVALUE(Cust.Name);
      MiniSalesQuote."Currency Code".ASSISTEDIT;
      MiniSalesQuote.CLOSE;
    END;

    [Test]
    [HandlerFunctions(CurrencyHandler)]
    PROCEDURE CurrencyPurchase@171();
    VAR
      Vendor@1000 : Record 23;
      Item@1001 : Record 27;
      CurrencyExchangeRate@1003 : Record 330;
      MiniPurchaseInvoice@1004 : TestPage 1354;
    BEGIN
      Initialize;

      IF CurrencyExchangeRate.FINDFIRST THEN;

      LibrarySmallBusiness.CreateVendor(Vendor);
      Vendor.Name := Vendor."No.";
      Vendor.VALIDATE("Currency Code",CurrencyExchangeRate."Currency Code");
      Vendor.MODIFY(TRUE);

      LibrarySmallBusiness.CreateItem(Item);

      MiniPurchaseInvoice.OPENNEW;
      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(Vendor.Name);
      MiniPurchaseInvoice."Currency Code".ASSISTEDIT;
      MiniPurchaseInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ResponsibilityCenters@42();
    VAR
      Cust@1000 : Record 18;
      Item@1001 : Record 27;
      UserSetup@1005 : Record 91;
      ResponsibilityCenter@1006 : Record 5714;
      SalesHeader@1002 : Record 36;
      MiniSalesInvoice@1004 : TestPage 1304;
      SavedResponsibilityCenterCode@1003 : Code[10];
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust.Name := Cust."No.";
      Cust.MODIFY(TRUE);

      LibrarySmallBusiness.CreateItem(Item);

      UserSetup.RESET;
      UserSetup.SETRANGE("User ID",USERID);
      UserSetup.FINDFIRST;

      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Cust.Name);
      SalesHeader.SETRANGE("Sell-to Customer No.",Cust."No.");
      SalesHeader.FINDFIRST;
      MiniSalesInvoice.CLOSE;

      Assert.AreEqual(UserSetup."Sales Resp. Ctr. Filter",SalesHeader."Responsibility Center",'');

      LibrarySmallBusiness.CreateResponsabilityCenter(ResponsibilityCenter);

      SavedResponsibilityCenterCode := UserSetup."Sales Resp. Ctr. Filter";
      UserSetup.VALIDATE("Sales Resp. Ctr. Filter",ResponsibilityCenter.Code);
      UserSetup.MODIFY;

      MiniSalesInvoice.OPENEDIT;
      Assert.IsFalse(MiniSalesInvoice.GOTORECORD(SalesHeader),'');
      MiniSalesInvoice.CLOSE;

      // Tear Down
      UserSetup.VALIDATE("Sales Resp. Ctr. Filter",SavedResponsibilityCenterCode);
      UserSetup.MODIFY;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE SelectCustomerWithSpecialCharacters@134();
    VAR
      Cust@1005 : Record 18;
      MiniSalesInvoice@1000 : TestPage 1304;
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust.Name := '(XXXX)';
      Cust.MODIFY(TRUE);

      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Cust.Name);
      MiniSalesInvoice.CLOSE;
    END;

    [Test]
    PROCEDURE SelectVendorWithSpecialCharacters@139();
    VAR
      Vendor@1005 : Record 23;
      MiniPurchaseInvoice@1000 : TestPage 1354;
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateVendor(Vendor);
      Vendor.Name := '(YYYY)';
      Vendor.MODIFY(TRUE);

      MiniPurchaseInvoice.OPENNEW;
      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(Vendor.Name);
      MiniPurchaseInvoice.CLOSE;
    END;

    [Test]
    PROCEDURE ResponsibilityCentersPurchase@82();
    VAR
      Vendor@1000 : Record 23;
      Item@1001 : Record 27;
      UserSetup@1005 : Record 91;
      ResponsibilityCenter@1006 : Record 5714;
      PurchaseHeader@1002 : Record 38;
      MiniPurchaseInvoice@1004 : TestPage 1354;
      SavedResponsibilityCenterCode@1003 : Code[10];
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateVendor(Vendor);
      Vendor.Name := Vendor."No.";
      Vendor.MODIFY(TRUE);

      LibrarySmallBusiness.CreateItem(Item);

      UserSetup.RESET;
      UserSetup.SETRANGE("User ID",USERID);
      UserSetup.FINDFIRST;

      MiniPurchaseInvoice.OPENNEW;
      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(Vendor.Name);
      PurchaseHeader.SETRANGE("Buy-from Vendor No.",Vendor."No.");
      PurchaseHeader.FINDFIRST;
      MiniPurchaseInvoice.CLOSE;

      Assert.AreEqual(UserSetup."Purchase Resp. Ctr. Filter",PurchaseHeader."Responsibility Center",
        'Responsibility centers don''t match.');

      LibrarySmallBusiness.CreateResponsabilityCenter(ResponsibilityCenter);

      SavedResponsibilityCenterCode := UserSetup."Purchase Resp. Ctr. Filter";
      UserSetup.VALIDATE("Purchase Resp. Ctr. Filter",ResponsibilityCenter.Code);
      UserSetup.MODIFY;

      MiniPurchaseInvoice.OPENEDIT;
      Assert.IsFalse(MiniPurchaseInvoice.GOTORECORD(PurchaseHeader),'User shouldn''t be able to edit this invoice.');
      MiniPurchaseInvoice.CLOSE;

      // Tear Down
      UserSetup.VALIDATE("Purchase Resp. Ctr. Filter",SavedResponsibilityCenterCode);
      UserSetup.MODIFY;
    END;

    [Test]
    [HandlerFunctions(CustCheckCreditLimitModalPageHandler,ConfirmHandler)]
    PROCEDURE CreateInvoiceForCustomerWithCreditLimit@13();
    VAR
      Cust@1001 : Record 18;
      SalesReceivablesSetup@1002 : Record 311;
      MiniSalesInvoice@1000 : TestPage 1304;
      OldCreditWarning@1003 : Option;
    BEGIN
      Initialize;
      SetCreditWarning(OldCreditWarning,SalesReceivablesSetup."Credit Warnings"::"Credit Limit");

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust."Credit Limit (LCY)" := -1;
      Cust.Name := Cust."No.";
      Cust.MODIFY;

      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Cust.Name);
      MiniSalesInvoice.CLOSE;

      SetCreditWarning(OldCreditWarning,OldCreditWarning);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreateInvoiceForCustomerWithoutCreditLimit@147();
    VAR
      Cust@1001 : Record 18;
      SalesReceivablesSetup@1002 : Record 311;
      MiniSalesInvoice@1000 : TestPage 1304;
      OldCreditWarning@1003 : Option;
    BEGIN
      Initialize;
      SetCreditWarning(OldCreditWarning,SalesReceivablesSetup."Credit Warnings"::"No Warning");

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust."Credit Limit (LCY)" := 0;
      Cust.Name := Cust."No.";
      Cust.MODIFY;

      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Cust.Name);
      MiniSalesInvoice.CLOSE;

      SetCreditWarning(OldCreditWarning,OldCreditWarning);
    END;

    [Test]
    [HandlerFunctions(CustCheckCreditLimitModalPageHandler,ConfirmHandler)]
    PROCEDURE CreateInvoiceForCustomerWithoutCreditLimitAndChangeCust@148();
    VAR
      Cust@1001 : Record 18;
      SalesReceivablesSetup@1004 : Record 311;
      CustWithLimit@1002 : Record 18;
      MiniSalesInvoice@1000 : TestPage 1304;
      OldCreditWarning@1003 : Option;
    BEGIN
      Initialize;
      SetCreditWarning(OldCreditWarning,SalesReceivablesSetup."Credit Warnings"::"Credit Limit");

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust."Credit Limit (LCY)" := 0;
      Cust.Name := Cust."No.";
      Cust.MODIFY;

      LibrarySmallBusiness.CreateCustomer(CustWithLimit);
      CustWithLimit."Credit Limit (LCY)" := -1;
      CustWithLimit.Name := CustWithLimit."No.";
      CustWithLimit.MODIFY;

      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Cust.Name);
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(CustWithLimit.Name);
      MiniSalesInvoice.CLOSE;

      SetCreditWarning(OldCreditWarning,OldCreditWarning);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ExtendedText@41();
    VAR
      Cust@1000 : Record 18;
      Item@1001 : Record 27;
      ExtendedTextHeader@1002 : Record 279;
      ExtendedTextLine@1003 : Record 280;
      MiniSalesInvoice@1004 : TestPage 1304;
      TableNameOption@1005 : 'Standard Text,G/L Account,Item,Resource';
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust.Name := Cust."No.";
      Cust.MODIFY(TRUE);

      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateExtendedTextHeader(ExtendedTextHeader,TableNameOption::Item,Item."No.");
      LibrarySmallBusiness.CreateExtendedTextLine(ExtendedTextLine,ExtendedTextHeader);

      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Cust.Name);

      MiniSalesInvoice.SalesLines.NEW;
      MiniSalesInvoice.SalesLines."No.".SETVALUE(Item."No.");
      MiniSalesInvoice.SalesLines.InsertExtText.INVOKE;
      MiniSalesInvoice.CLOSE;
    END;

    [Test]
    PROCEDURE ExtendedTextPurchase@81();
    VAR
      Vendor@1000 : Record 23;
      Item@1001 : Record 27;
      ExtendedTextHeader@1002 : Record 279;
      ExtendedTextLine@1003 : Record 280;
      MiniPurchaseInvoice@1004 : TestPage 1354;
      TableNameOption@1005 : 'Standard Text,G/L Account,Item,Resource';
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateVendor(Vendor);
      Vendor.Name := Vendor."No.";
      Vendor.MODIFY(TRUE);

      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateExtendedTextHeader(ExtendedTextHeader,TableNameOption::Item,Item."No.");
      LibrarySmallBusiness.CreateExtendedTextLine(ExtendedTextLine,ExtendedTextHeader);

      MiniPurchaseInvoice.OPENNEW;
      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(Vendor.Name);

      MiniPurchaseInvoice.PurchLines.NEW;
      MiniPurchaseInvoice.PurchLines."No.".SETVALUE(Item."No.");
      MiniPurchaseInvoice.PurchLines.InsertExtTexts.INVOKE;
      MiniPurchaseInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(MiniCustomerPageHandler)]
    PROCEDURE SalesInvoiceLookup@126();
    VAR
      Cust@1001 : Record 18;
      MiniSalesInvoice@1000 : TestPage 1304;
    BEGIN
      Initialize;
      LibrarySmallBusiness.CreateCustomer(Cust);
      LibraryVariableStorage.Enqueue(Cust."No.");
      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".LOOKUP;
      Assert.AreEqual(Cust.Name,MiniSalesInvoice."Sell-to Customer Name".VALUE,'Wrong Customer Name');
    END;

    [Test]
    [HandlerFunctions(MiniCustomerPageHandler)]
    PROCEDURE SalesQuoteLookup@156();
    VAR
      Cust@1001 : Record 18;
      MiniSalesQuote@1000 : TestPage 1324;
    BEGIN
      Initialize;
      LibrarySmallBusiness.CreateCustomer(Cust);
      LibraryVariableStorage.Enqueue(Cust."No.");
      MiniSalesQuote.OPENNEW;
      MiniSalesQuote."Sell-to Customer Name".LOOKUP;
      Assert.AreEqual(Cust.Name,MiniSalesQuote."Sell-to Customer Name".VALUE,'Wrong Customer Name');
    END;

    [Test]
    [HandlerFunctions(MiniVendorPageHandler)]
    PROCEDURE PurchaseInvoiceLookup@160();
    VAR
      Vend@1001 : Record 23;
      MiniPurchaseInvoice@1000 : TestPage 1354;
    BEGIN
      Initialize;
      LibrarySmallBusiness.CreateVendor(Vend);
      LibraryVariableStorage.Enqueue(Vend."No.");
      MiniPurchaseInvoice.OPENNEW;
      MiniPurchaseInvoice."Buy-from Vendor Name".LOOKUP;
      Assert.AreEqual(Vend.Name,MiniPurchaseInvoice."Buy-from Vendor Name".VALUE,'Wrong Vendor Name');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE Comments@39();
    VAR
      Cust@1000 : Record 18;
      Item@1001 : Record 27;
      CommentLine@1005 : Record 97;
      MiniSalesInvoice@1004 : TestPage 1304;
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust.Name := Cust."No.";
      Cust.MODIFY(TRUE);

      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateCommentLine(CommentLine,CommentLine."Table Name"::Item,Item."No.");
      CommentLine.VALIDATE(Code,LibraryUtility.GenerateRandomCode(CommentLine.FIELDNO(Code),
          DATABASE::"Comment Line"));
      CommentLine.VALIDATE(Comment,LibraryUtility.GenerateRandomCode(CommentLine.FIELDNO(Comment),
          DATABASE::"Comment Line"));
      CommentLine.MODIFY(TRUE);

      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Cust.Name);

      MiniSalesInvoice.SalesLines.NEW;
      MiniSalesInvoice.SalesLines."No.".SETVALUE(Item."No.");
      MiniSalesInvoice.CLOSE;
    END;

    [Test]
    PROCEDURE CommentsPurchase@187();
    VAR
      Vendor@1000 : Record 23;
      Item@1001 : Record 27;
      CommentLine@1005 : Record 97;
      MiniPurchaseInvoice@1004 : TestPage 1354;
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateVendor(Vendor);
      Vendor.Name := Vendor."No.";
      Vendor.MODIFY(TRUE);

      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateCommentLine(CommentLine,CommentLine."Table Name"::Item,Item."No.");
      CommentLine.VALIDATE(Code,LibraryUtility.GenerateRandomCode(CommentLine.FIELDNO(Code),
          DATABASE::"Comment Line"));
      CommentLine.VALIDATE(Comment,LibraryUtility.GenerateRandomCode(CommentLine.FIELDNO(Comment),
          DATABASE::"Comment Line"));
      CommentLine.MODIFY(TRUE);

      MiniPurchaseInvoice.OPENNEW;
      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(Vendor.Name);

      MiniPurchaseInvoice.PurchLines.NEW;
      MiniPurchaseInvoice.PurchLines."No.".SETVALUE(Item."No.");
      MiniPurchaseInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE SelectNoWhenMakingInvoiceFromQuote@70();
    VAR
      Cust@1001 : Record 18;
      MiniSalesQuote@1002 : TestPage 1324;
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust.Name := Cust."No.";
      Cust.MODIFY(TRUE);

      MiniSalesQuote.OPENNEW;
      MiniSalesQuote."Sell-to Customer Name".SETVALUE(Cust.Name);

      LibraryVariableStorage.Enqueue(FALSE);
      MiniSalesQuote.MakeInvoice.INVOKE;
      MiniSalesQuote.CLOSE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE SelectNoWhenMakingInvoiceFromQuoteList@66();
    VAR
      Cust@1001 : Record 18;
      SalesHeader@1003 : Record 36;
      MiniSalesQuotesList@1000 : TestPage 1326;
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust.Name := Cust."No.";
      Cust.MODIFY(TRUE);

      LibrarySmallBusiness.CreateSalesQuoteHeader(SalesHeader,Cust);

      MiniSalesQuotesList.OPENVIEW;
      MiniSalesQuotesList.FILTER.SETFILTER("No.",SalesHeader."No.");
      LibraryVariableStorage.Enqueue(FALSE);
      MiniSalesQuotesList.MakeInvoice.INVOKE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE MakeInvoiceFromQuoteSetsSameFieldsAsCreatingInvoiceWithSameData@61();
    VAR
      ReferenceInvoiceSalesHeader@1000 : Record 36;
      ReferenceSalesLine@1008 : Record 37;
      InvoiceSalesHeader@1006 : Record 36;
      InvoiceSalesLine@1012 : Record 37;
      Item@1004 : Record 27;
      Cust@1001 : Record 18;
      MiniSalesQuote@1002 : TestPage 1324;
      MiniSalesInvoice@1005 : TestPage 1304;
      ItemQuantity@1010 : Integer;
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust.Name := Cust."No.";
      Cust.MODIFY(TRUE);
      LibrarySmallBusiness.CreateItem(Item);

      ItemQuantity := LibraryRandom.RandIntInRange(2,100);

      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Cust.Name);

      MiniSalesInvoice.SalesLines.NEW;
      MiniSalesInvoice.SalesLines."No.".SETVALUE(Item."No.");
      MiniSalesInvoice.SalesLines.Quantity.SETVALUE(ItemQuantity);
      MiniSalesInvoice.CLOSE;

      ReferenceInvoiceSalesHeader.SETRANGE("Document Type",ReferenceInvoiceSalesHeader."Document Type"::Invoice);
      ReferenceInvoiceSalesHeader.SETRANGE("Sell-to Customer No.",Cust."No.");
      ReferenceInvoiceSalesHeader.FINDFIRST;

      ReferenceSalesLine.SETRANGE("Document Type",ReferenceInvoiceSalesHeader."Document Type");
      ReferenceSalesLine.SETRANGE("Document No.",ReferenceInvoiceSalesHeader."No.");
      ReferenceSalesLine.FINDFIRST;

      MiniSalesQuote.OPENNEW;
      MiniSalesQuote."Sell-to Customer Name".SETVALUE(Cust.Name);

      MiniSalesQuote.SalesLines.NEW;
      MiniSalesQuote.SalesLines."No.".SETVALUE(Item."No.");
      MiniSalesQuote.SalesLines.Quantity.SETVALUE(ItemQuantity);

      CLEAR(MiniSalesInvoice);
      MiniSalesInvoice.TRAP;
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(TRUE);
      MiniSalesQuote.MakeInvoice.INVOKE;

      MiniSalesInvoice.CLOSE;

      InvoiceSalesHeader.SETFILTER("Document Type",'=%1',ReferenceInvoiceSalesHeader."Document Type"::Invoice);
      InvoiceSalesHeader.SETFILTER("Sell-to Customer No.",Cust."No.");
      InvoiceSalesHeader.SETFILTER("No.",'<>%1',ReferenceInvoiceSalesHeader."No.");
      InvoiceSalesHeader.FINDFIRST;

      InvoiceSalesLine.SETRANGE("Document Type",InvoiceSalesHeader."Document Type");
      InvoiceSalesLine.SETRANGE("Document No.",InvoiceSalesHeader."No.");
      InvoiceSalesLine.FINDFIRST;

      VerifySalesDocumentsMatch(ReferenceInvoiceSalesHeader,InvoiceSalesHeader);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE MakeInvoiceFromQuoteTransfersAllFields@75();
    VAR
      QuoteSalesHeader@1000 : Record 36;
      ReferenceQuoteSalesHeader@1007 : Record 36;
      InvoiceSalesHeader@1006 : Record 36;
      Item@1004 : Record 27;
      Cust@1001 : Record 18;
      MiniSalesQuote@1002 : TestPage 1324;
      MiniSalesInvoice@1005 : TestPage 1304;
      ItemQuantity@1010 : Integer;
      NoOfLines@1011 : Integer;
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust.Name := Cust."No.";
      Cust.MODIFY(TRUE);
      LibrarySmallBusiness.CreateItem(Item);

      NoOfLines := LibraryRandom.RandIntInRange(2,10);
      ItemQuantity := LibraryRandom.RandIntInRange(2,100);

      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateSalesQuoteHeaderWithLines(QuoteSalesHeader,Cust,Item,ItemQuantity,NoOfLines);
      LibrarySmallBusiness.CreateSalesQuoteHeaderWithLines(ReferenceQuoteSalesHeader,Cust,Item,ItemQuantity,NoOfLines);
      ReferenceQuoteSalesHeader."External Document No." := QuoteSalesHeader."External Document No.";
      ReferenceQuoteSalesHeader.MODIFY;

      MiniSalesQuote.OPENEDIT;
      MiniSalesQuote.GOTORECORD(QuoteSalesHeader);

      MiniSalesInvoice.TRAP;
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(TRUE);
      MiniSalesQuote.MakeInvoice.INVOKE;

      MiniSalesInvoice.CLOSE;

      InvoiceSalesHeader.SETRANGE("Sell-to Customer No.",Cust."No.");
      InvoiceSalesHeader.SETRANGE("Document Type",InvoiceSalesHeader."Document Type"::Invoice);
      Assert.AreEqual(1,InvoiceSalesHeader.COUNT,'Only one header record should be present');
      InvoiceSalesHeader.FINDFIRST;

      VerifySalesDocumentsMatch(ReferenceQuoteSalesHeader,InvoiceSalesHeader);
      Assert.AreEqual(
        InvoiceSalesHeader."Posting Date",WORKDATE,'Posting date should be assigned to workdate if it was not set by invoice');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE MakeInvoiceFromQuoteTransfersComments@116();
    VAR
      QuoteSalesHeader@1000 : Record 36;
      QuoteSalesLine@1008 : Record 37;
      InvoiceSalesHeader@1006 : Record 36;
      Item@1004 : Record 27;
      Cust@1001 : Record 18;
      TempSalesCommentLine@1013 : TEMPORARY Record 44;
      SalesCommentLine@1009 : Record 44;
      InvoiceSalesCommentLine@1014 : Record 44;
      MiniSalesQuote@1002 : TestPage 1324;
      MiniSalesInvoice@1005 : TestPage 1304;
      ItemQuantity@1010 : Integer;
      NoOfLines@1011 : Integer;
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust.Name := Cust."No.";
      Cust.MODIFY(TRUE);
      LibrarySmallBusiness.CreateItem(Item);

      NoOfLines := LibraryRandom.RandIntInRange(2,10);
      ItemQuantity := LibraryRandom.RandIntInRange(2,100);

      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateSalesQuoteHeaderWithLines(QuoteSalesHeader,Cust,Item,ItemQuantity,NoOfLines);
      QuoteSalesLine.SETRANGE("Document Type",QuoteSalesLine."Document Type"::Quote);
      QuoteSalesLine.SETRANGE("Document No.",QuoteSalesHeader."No.");
      QuoteSalesLine.FINDFIRST;
      LibrarySmallBusiness.CreateSalesCommentLine(SalesCommentLine,QuoteSalesLine);
      TempSalesCommentLine := SalesCommentLine;

      MiniSalesQuote.OPENEDIT;
      MiniSalesQuote.GOTORECORD(QuoteSalesHeader);

      MiniSalesInvoice.TRAP;
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(TRUE);
      MiniSalesQuote.MakeInvoice.INVOKE;
      MiniSalesInvoice.CLOSE;

      InvoiceSalesHeader.SETRANGE("Sell-to Customer No.",Cust."No.");
      InvoiceSalesHeader.SETRANGE("Document Type",InvoiceSalesHeader."Document Type"::Invoice);
      Assert.AreEqual(1,InvoiceSalesHeader.COUNT,'Only one header record should be present');
      InvoiceSalesHeader.FINDFIRST;

      InvoiceSalesCommentLine.SETRANGE("Document Type",SalesCommentLine."Document Type"::Invoice);
      InvoiceSalesCommentLine.SETRANGE("No.",InvoiceSalesHeader."No.");
      Assert.AreEqual(1,InvoiceSalesCommentLine.COUNT,'Only one Comment line should be present');
      InvoiceSalesCommentLine.FINDFIRST;

      Assert.AreEqual(InvoiceSalesCommentLine.Date,TempSalesCommentLine.Date,'Date was not set');
      Assert.AreEqual(InvoiceSalesCommentLine.Comment,TempSalesCommentLine.Comment,'Comment text was not transfered');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE MakeInvoiceFromQuoteKeepsUserEnteredInformation@64();
    VAR
      QuoteSalesHeader@1000 : Record 36;
      Item@1004 : Record 27;
      Cust@1001 : Record 18;
      MiniSalesQuote@1002 : TestPage 1324;
      MiniSalesInvoice@1005 : TestPage 1304;
      ItemQuantity@1010 : Integer;
      NoOfLines@1011 : Integer;
      NewShipToAddress@1015 : Text[50];
      NewShipToName@1016 : Text[50];
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust.Name := Cust."No.";
      Cust.Address := LibraryUtility.GenerateRandomCode(Cust.FIELDNO(Address),DATABASE::Customer);

      Cust.MODIFY(TRUE);
      LibrarySmallBusiness.CreateItem(Item);

      NoOfLines := LibraryRandom.RandIntInRange(2,10);
      ItemQuantity := LibraryRandom.RandIntInRange(2,100);

      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateSalesQuoteHeaderWithLines(QuoteSalesHeader,Cust,Item,ItemQuantity,NoOfLines);

      MiniSalesQuote.OPENEDIT;
      MiniSalesQuote.GOTORECORD(QuoteSalesHeader);

      NewShipToAddress := LibraryUtility.GenerateRandomCode(QuoteSalesHeader.FIELDNO("Ship-to Address"),DATABASE::"Sales Header");
      NewShipToName := LibraryUtility.GenerateRandomCode(QuoteSalesHeader.FIELDNO("Ship-to Name"),DATABASE::"Sales Header");
      MiniSalesQuote."Ship-to Name".SETVALUE(NewShipToName);
      MiniSalesQuote."Ship-to Address".SETVALUE(NewShipToAddress);

      MiniSalesInvoice.TRAP;
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(TRUE);
      MiniSalesQuote.MakeInvoice.INVOKE;

      Assert.AreEqual(MiniSalesInvoice."Ship-to Name".VALUE,NewShipToName,'Validation has overrided value set by user');
      Assert.AreEqual(MiniSalesInvoice."Ship-to Address".VALUE,NewShipToAddress,'Validation has overrided value set by user');
      MiniSalesInvoice.CLOSE;
    END;

    [Test]
    PROCEDURE ResponsibilityCentersQuote@57();
    VAR
      Cust@1000 : Record 18;
      Item@1001 : Record 27;
      UserSetup@1005 : Record 91;
      ResponsibilityCenter@1006 : Record 5714;
      SalesHeader@1002 : Record 36;
      MiniSalesQuote@1004 : TestPage 1324;
      SavedResponsibilityCenterCode@1003 : Code[10];
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust.Name := Cust."No.";
      Cust.MODIFY(TRUE);

      LibrarySmallBusiness.CreateItem(Item);
      UserSetup.RESET;
      UserSetup.SETRANGE("User ID",USERID);
      UserSetup.FINDFIRST;

      MiniSalesQuote.OPENNEW;
      MiniSalesQuote."Sell-to Customer Name".SETVALUE(Cust.Name);

      SalesHeader.SETRANGE("Sell-to Customer No.",Cust."No.");
      SalesHeader.FINDFIRST;
      MiniSalesQuote.CLOSE;

      Assert.AreEqual(UserSetup."Sales Resp. Ctr. Filter",SalesHeader."Responsibility Center",'');

      LibrarySmallBusiness.CreateResponsabilityCenter(ResponsibilityCenter);

      SavedResponsibilityCenterCode := UserSetup."Sales Resp. Ctr. Filter";
      UserSetup.VALIDATE("Sales Resp. Ctr. Filter",ResponsibilityCenter.Code);
      UserSetup.MODIFY;

      MiniSalesQuote.OPENEDIT;
      Assert.IsFalse(MiniSalesQuote.GOTORECORD(SalesHeader),'');
      MiniSalesQuote.CLOSE;

      // Tear Down
      UserSetup.VALIDATE("Sales Resp. Ctr. Filter",SavedResponsibilityCenterCode);
      UserSetup.MODIFY;
    END;

    [Test]
    PROCEDURE ExtendedTextQuote@55();
    VAR
      Cust@1000 : Record 18;
      Item@1001 : Record 27;
      ExtendedTextHeader@1002 : Record 279;
      ExtendedTextLine@1003 : Record 280;
      MiniSalesQuote@1004 : TestPage 1324;
      TableNameOption@1005 : 'Standard Text,G/L Account,Item,Resource';
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust.Name := Cust."No.";
      Cust.MODIFY(TRUE);

      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateExtendedTextHeader(ExtendedTextHeader,TableNameOption::Item,Item."No.");
      LibrarySmallBusiness.CreateExtendedTextLine(ExtendedTextLine,ExtendedTextHeader);

      MiniSalesQuote.OPENNEW;
      MiniSalesQuote."Sell-to Customer Name".SETVALUE(Cust.Name);

      MiniSalesQuote.SalesLines.NEW;
      MiniSalesQuote.SalesLines."No.".SETVALUE(Item."No.");
      MiniSalesQuote.SalesLines.InsertExtText.INVOKE;
      MiniSalesQuote.CLOSE;
    END;

    [Test]
    PROCEDURE CommentsQuote@47();
    VAR
      Cust@1000 : Record 18;
      Item@1001 : Record 27;
      CommentLine@1005 : Record 97;
      MiniSalesQuote@1004 : TestPage 1324;
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateCustomer(Cust);
      Cust.Name := Cust."No.";
      Cust.MODIFY(TRUE);

      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateCommentLine(CommentLine,CommentLine."Table Name"::Item,Item."No.");
      CommentLine.VALIDATE(Code,LibraryUtility.GenerateRandomCode(CommentLine.FIELDNO(Code),
          DATABASE::"Comment Line"));
      CommentLine.VALIDATE(Comment,LibraryUtility.GenerateRandomCode(CommentLine.FIELDNO(Comment),
          DATABASE::"Comment Line"));
      CommentLine.MODIFY(TRUE);

      MiniSalesQuote.OPENNEW;
      MiniSalesQuote."Sell-to Customer Name".SETVALUE(Cust.Name);

      MiniSalesQuote.SalesLines.NEW;
      MiniSalesQuote.SalesLines."No.".SETVALUE(Item."No.");
      MiniSalesQuote.CLOSE;
    END;

    [Test]
    PROCEDURE ExistingCustomerQuote@1();
    VAR
      Customer@1000 : Record 18;
      MiniSalesQuote@1001 : TestPage 1324;
    BEGIN
      Initialize;

      CreateCustomer(Customer);

      // Exercise: Select existing customer.
      MiniSalesQuote.OPENNEW;
      MiniSalesQuote."Sell-to Customer Name".SETVALUE(Customer.Name);

      // Verify.
      VerifyMiniSalesQuoteAgainstCustomer(MiniSalesQuote,Customer,Customer.Name);
      VerifyMiniSalesQuoteAgainstBillToCustomer(MiniSalesQuote,Customer);
    END;

    [Test]
    PROCEDURE ExistingCustomer@129();
    VAR
      Customer@1000 : Record 18;
      MiniSalesInvoice@1001 : TestPage 1304;
    BEGIN
      Initialize;
      CreateCustomer(Customer);

      // Exercise: Select existing customer.
      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Customer.Name);

      // Verify.
      VerifyMiniSalesInvoiceAgainstCustomer(MiniSalesInvoice,Customer,Customer.Name);
      VerifyMiniSalesInvoiceAgainstBillToCustomer(MiniSalesInvoice,Customer);
    END;

    [Test]
    PROCEDURE ExistingVendorPurchase@190();
    VAR
      Vendor@1000 : Record 23;
      MiniPurchaseInvoice@1001 : TestPage 1354;
    BEGIN
      Initialize;
      CreateVendor(Vendor);

      // Exercise: Select existing customer.
      MiniPurchaseInvoice.OPENNEW;
      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(Vendor.Name);

      // Verify.
      VerifyMiniPurchaseInvoiceAgainstVendor(MiniPurchaseInvoice,Vendor,Vendor.Name);
      VerifyMiniPurchaseInvoiceAgainstPayToVendor(MiniPurchaseInvoice,Vendor);
    END;

    [Test]
    [HandlerFunctions(CopyDocRequestPageHandler)]
    PROCEDURE QuoteFromInvoiceCopyDocument@63();
    VAR
      Customer@1005 : Record 18;
      Item@1007 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      SalesHeader2@1001 : Record 36;
      MiniSalesQuote@1000 : TestPage 1324;
    BEGIN
      Initialize;

      // Create Sales Invoice and copy to another Sales Quote
      CreateCustomer(Customer);
      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateSalesInvoiceHeader(SalesHeader,Customer);
      LibrarySmallBusiness.CreateSalesLine(SalesLine,SalesHeader,Item,LibraryRandom.RandDec(100,2));

      // Create the quote
      SalesHeader2.INIT;
      SalesHeader2.VALIDATE("Document Type",SalesHeader2."Document Type"::Quote);
      SalesHeader2.INSERT(TRUE);
      COMMIT;
      MiniSalesQuote.OPENEDIT;
      MiniSalesQuote.GOTORECORD(SalesHeader2);
      MiniSalesQuote.SalesLines.FIRST;

      // Enqueue for the request page handler
      LibraryVariableStorage.Enqueue(3); // doc type on the request page
      LibraryVariableStorage.Enqueue(SalesHeader."No.");
      LibraryVariableStorage.Enqueue('');
      LibraryVariableStorage.Enqueue('');
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(FALSE);
      COMMIT;
      MiniSalesQuote.CopyDocument.INVOKE;
      MiniSalesQuote.CLOSE;

      // Verify
      SalesHeader2.GET(SalesHeader2."Document Type",SalesHeader2."No.");
      VerifySalesDocumentsMatch(SalesHeader,SalesHeader2);
    END;

    [Test]
    [HandlerFunctions(CopyDocRequestPageHandler,ConfirmHandler)]
    PROCEDURE InvoiceFromInvoiceCopyDocument@65();
    VAR
      Customer@1005 : Record 18;
      Item@1007 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      SalesHeader2@1001 : Record 36;
      MiniSalesInvoice@1000 : TestPage 1304;
    BEGIN
      Initialize;

      // Create Sales Invoice and copy to another Sales Quote
      CreateCustomer(Customer);
      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateSalesInvoiceHeader(SalesHeader,Customer);
      LibrarySmallBusiness.CreateSalesLine(SalesLine,SalesHeader,Item,LibraryRandom.RandDec(100,2));

      SalesHeader2.INIT;
      SalesHeader2.VALIDATE("Document Type",SalesHeader2."Document Type"::Invoice);
      SalesHeader2.INSERT(TRUE);
      COMMIT;
      MiniSalesInvoice.OPENEDIT;
      MiniSalesInvoice.GOTORECORD(SalesHeader2);
      MiniSalesInvoice.SalesLines.FIRST;

      // Enqueue for the request page handler
      LibraryVariableStorage.Enqueue(3); // doc type on the request page
      LibraryVariableStorage.Enqueue(SalesHeader."No.");
      LibraryVariableStorage.Enqueue('');
      LibraryVariableStorage.Enqueue('');
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(FALSE);
      COMMIT;
      MiniSalesInvoice.CopyDocument.INVOKE;
      MiniSalesInvoice.CLOSE;

      // Verify
      SalesHeader2.GET(SalesHeader2."Document Type",SalesHeader2."No.");
      VerifySalesDocumentsMatch(SalesHeader,SalesHeader2);
    END;

    [Test]
    [HandlerFunctions(PurchaseCopyDocRequestPageHandler)]
    PROCEDURE PurchaseInvoiceFromInvoiceCopyDocument@83();
    VAR
      Vendor@1005 : Record 23;
      Item@1007 : Record 27;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      PurchaseHeader2@1001 : Record 38;
      MiniPurchaseInvoice@1000 : TestPage 1354;
    BEGIN
      Initialize;

      // Create Sales Invoice and copy to another Sales Quote
      CreateVendor(Vendor);
      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreatePurchaseInvoiceHeader(PurchaseHeader,Vendor);
      LibrarySmallBusiness.CreatePurchaseLine(PurchaseLine,PurchaseHeader,Item,LibraryRandom.RandDec(100,2));

      PurchaseHeader2.INIT;
      PurchaseHeader2.VALIDATE("Document Type",PurchaseHeader2."Document Type"::Invoice);
      PurchaseHeader2.INSERT(TRUE);
      COMMIT;
      MiniPurchaseInvoice.OPENEDIT;
      MiniPurchaseInvoice.GOTORECORD(PurchaseHeader2);
      MiniPurchaseInvoice.PurchLines.FIRST;

      // Enqueue for the request page handler
      LibraryVariableStorage.Enqueue(3); // doc type on the request page
      LibraryVariableStorage.Enqueue(PurchaseHeader."No.");
      LibraryVariableStorage.Enqueue('');
      LibraryVariableStorage.Enqueue('');
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(FALSE);
      COMMIT;
      MiniPurchaseInvoice.CopyDocument.INVOKE;
      MiniPurchaseInvoice.CLOSE;

      // Verify
      PurchaseHeader2.GET(PurchaseHeader2."Document Type",PurchaseHeader2."No.");
      VerifyPurchaseDocumentsMatch(PurchaseHeader,PurchaseHeader2);
    END;

    [Test]
    PROCEDURE UpdateCustomerNameWithExistingCustomerName@3();
    VAR
      Customer1@1003 : Record 18;
      Customer@1000 : Record 18;
      MiniSalesInvoice@1001 : TestPage 1304;
    BEGIN
      Initialize;
      CreateCustomer(Customer);
      CreateCustomer(Customer1);

      // Exercise: Select existing customer.
      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice.SalesLines.FIRST;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Customer.Name);
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Customer1.Name);

      // Verify.
      VerifyMiniSalesInvoiceAgainstCustomer(MiniSalesInvoice,Customer1,Customer1.Name);
    END;

    [Test]
    PROCEDURE UpdateCustomerNameWithExistingCustomerNameQuote@43();
    VAR
      Customer1@1003 : Record 18;
      Customer@1000 : Record 18;
      MiniSalesQuote@1001 : TestPage 1324;
    BEGIN
      Initialize;
      CreateCustomer(Customer);
      CreateCustomer(Customer1);

      // Exercise: Select existing customer.
      MiniSalesQuote.OPENNEW;
      MiniSalesQuote.SalesLines.FIRST;
      MiniSalesQuote."Sell-to Customer Name".SETVALUE(Customer.Name);
      MiniSalesQuote."Sell-to Customer Name".SETVALUE(Customer1.Name);

      // Verify.
      VerifyMiniSalesQuoteAgainstCustomer(MiniSalesQuote,Customer1,Customer1.Name);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MiniCustomerCardTemplatePageHandler)]
    PROCEDURE NewBillToCustomerDefaultTemplate@53();
    VAR
      Customer@1000 : Record 18;
      BillToCustomer@1005 : Record 18;
      ConfigTemplateHeader@1002 : Record 8618;
      MiniSalesInvoice@1001 : TestPage 1304;
      BillToCustomerNo@1004 : Variant;
      BillToCustomerName@1003 : Text[50];
    BEGIN
      Initialize;
      CreateCustomer(Customer);
      LibrarySmallBusiness.CreateCustomerTemplate(ConfigTemplateHeader);

      // Exercise.
      BillToCustomerName := LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Name),DATABASE::Customer);
      LibraryVariableStorage.Enqueue(TRUE); // for the confirm handler when asking whether to create a bill-to customer on the fly
      LibraryVariableStorage.Enqueue(TRUE); // for the confirm handler when asking whether you want to change the bill-to customer no.

      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice.SalesLines.FIRST;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Customer.Name);
      MiniSalesInvoice."Bill-to Name".SETVALUE(BillToCustomerName);

      // Verify.
      LibraryVariableStorage.Dequeue(BillToCustomerNo);
      BillToCustomer.GET(BillToCustomerNo);
      VerifyCustomerAgainstTemplate(BillToCustomer,ConfigTemplateHeader);
      VerifyMiniSalesInvoiceAgainstBillToCustomer(MiniSalesInvoice,BillToCustomer);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MiniCustomerCardTemplatePageHandler)]
    PROCEDURE NewCustomerDefaultTemplate@19();
    VAR
      Customer@1000 : Record 18;
      ConfigTemplateHeader@1002 : Record 8618;
      MiniSalesInvoice@1001 : TestPage 1304;
      CustomerNo@1004 : Variant;
      CustomerName@1003 : Text[50];
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateCustomerTemplate(ConfigTemplateHeader);

      // Exercise.
      CustomerName := LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Name),DATABASE::Customer);
      LibraryVariableStorage.Enqueue(TRUE); // for the confirm handler

      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice.SalesLines.FIRST;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(CustomerName);

      // Verify.
      LibraryVariableStorage.Dequeue(CustomerNo);
      Customer.GET(CustomerNo);
      VerifyCustomerAgainstTemplate(Customer,ConfigTemplateHeader);
      VerifyMiniSalesInvoiceAgainstCustomer(MiniSalesInvoice,Customer,Customer.Name);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MiniCustomerCardTemplatePageHandler)]
    PROCEDURE NewCustomerDefaultTemplateQuote@46();
    VAR
      Customer@1000 : Record 18;
      ConfigTemplateHeader@1002 : Record 8618;
      MiniSalesQuote@1001 : TestPage 1324;
      CustomerNo@1004 : Variant;
      CustomerName@1003 : Text[50];
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateCustomerTemplate(ConfigTemplateHeader);

      // Exercise.
      CustomerName := LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Name),DATABASE::Customer);
      LibraryVariableStorage.Enqueue(TRUE); // for the confirm handler

      MiniSalesQuote.OPENNEW;
      MiniSalesQuote.SalesLines.FIRST;
      MiniSalesQuote."Sell-to Customer Name".SETVALUE(CustomerName);

      // Verify.
      LibraryVariableStorage.Dequeue(CustomerNo);
      Customer.GET(CustomerNo);
      VerifyCustomerAgainstTemplate(Customer,ConfigTemplateHeader);
      VerifyMiniSalesQuoteAgainstCustomer(MiniSalesQuote,Customer,Customer.Name);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ConfigTemplateListPageHandler,MiniCustomerCardTemplatePageHandler)]
    PROCEDURE NewCustomerSelectTemplate@69();
    VAR
      Customer@1000 : Record 18;
      ConfigTemplateHeader@1004 : Record 8618;
      ConfigTemplateHeader1@1002 : Record 8618;
      MiniSalesInvoice@1001 : TestPage 1304;
      CustomerNo@1005 : Variant;
      CustomerName@1003 : Text[50];
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateCustomerTemplate(ConfigTemplateHeader);
      LibrarySmallBusiness.CreateCustomerTemplate(ConfigTemplateHeader1);

      // Exercise.
      CustomerName := LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Name),DATABASE::Customer);
      LibraryVariableStorage.Enqueue(TRUE); // for the new customer confirm handler
      LibraryVariableStorage.Enqueue(ConfigTemplateHeader1.Description); // for the customer card page handler
      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice.SalesLines.FIRST;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(CustomerName);

      // Verify.
      LibraryVariableStorage.Dequeue(CustomerNo);
      Customer.GET(CustomerNo);
      VerifyCustomerAgainstTemplate(Customer,ConfigTemplateHeader1);
      VerifyMiniSalesInvoiceAgainstCustomer(MiniSalesInvoice,Customer,Customer.Name);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ConfigTemplateListPageHandler,MiniCustomerCardTemplatePageHandler)]
    PROCEDURE NewCustomerSelectTemplateQuote@48();
    VAR
      Customer@1000 : Record 18;
      ConfigTemplateHeader@1004 : Record 8618;
      ConfigTemplateHeader1@1002 : Record 8618;
      MiniSalesQuote@1001 : TestPage 1324;
      CustomerNo@1005 : Variant;
      CustomerName@1003 : Text[50];
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateCustomerTemplate(ConfigTemplateHeader);
      LibrarySmallBusiness.CreateCustomerTemplate(ConfigTemplateHeader1);

      // Exercise.
      CustomerName := LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Name),DATABASE::Customer);
      LibraryVariableStorage.Enqueue(TRUE); // for the new customer confirm handler
      LibraryVariableStorage.Enqueue(ConfigTemplateHeader1.Description); // for the customer card page handler
      MiniSalesQuote.OPENNEW;
      MiniSalesQuote.SalesLines.FIRST;
      MiniSalesQuote."Sell-to Customer Name".SETVALUE(CustomerName);

      // Verify.
      LibraryVariableStorage.Dequeue(CustomerNo);
      Customer.GET(CustomerNo);
      VerifyCustomerAgainstTemplate(Customer,ConfigTemplateHeader1);
      VerifyMiniSalesQuoteAgainstCustomer(MiniSalesQuote,Customer,Customer.Name);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MiniCustomerCardPageHandler)]
    PROCEDURE NewCustomerWithNoTemplate@8();
    VAR
      Customer@1000 : Record 18;
      MiniSalesInvoice@1001 : TestPage 1304;
      CustomerNo@1004 : Variant;
      CustomerName@1003 : Text[50];
    BEGIN
      Initialize;

      // Exercise.
      CustomerName := LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Name),DATABASE::Customer);
      LibraryVariableStorage.Enqueue(TRUE); // for the new customer confirm handler
      LibraryVariableStorage.Enqueue(CustomerName); // for the customer card page handler
      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice.SalesLines.FIRST;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(CustomerName);

      // Verify.
      LibraryVariableStorage.Dequeue(CustomerNo);
      Customer.GET(CustomerNo);
      VerifyMiniSalesInvoiceAgainstCustomer(MiniSalesInvoice,Customer,Customer.Name);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MiniCustomerCardPageHandler)]
    PROCEDURE NewCustomerWithNoTemplateQuote@51();
    VAR
      Customer@1000 : Record 18;
      MiniSalesQuote@1001 : TestPage 1324;
      CustomerNo@1004 : Variant;
      CustomerName@1003 : Text[50];
    BEGIN
      Initialize;

      // Exercise.
      CustomerName := LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Name),DATABASE::Customer);
      LibraryVariableStorage.Enqueue(TRUE); // for the new customer confirm handler
      LibraryVariableStorage.Enqueue(CustomerName); // for the customer card page handler
      MiniSalesQuote.OPENNEW;
      MiniSalesQuote.SalesLines.FIRST;
      MiniSalesQuote."Sell-to Customer Name".SETVALUE(CustomerName);

      // Verify.
      LibraryVariableStorage.Dequeue(CustomerNo);
      Customer.GET(CustomerNo);
      VerifyMiniSalesQuoteAgainstCustomer(MiniSalesQuote,Customer,Customer.Name);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MiniVendorCardTemplatePageHandler)]
    PROCEDURE NewPayToVendorDefaultTemplate@99();
    VAR
      Vendor@1000 : Record 23;
      PayToVendor@1005 : Record 23;
      ConfigTemplateHeader@1002 : Record 8618;
      MiniPurchaseInvoice@1001 : TestPage 1354;
      PayToVendorNo@1004 : Variant;
      PayToVendorName@1003 : Text[50];
    BEGIN
      Initialize;
      CreateVendor(Vendor);
      LibrarySmallBusiness.CreateVendorTemplate(ConfigTemplateHeader);

      // Exercise.
      PayToVendorName := LibraryUtility.GenerateRandomCode(Vendor.FIELDNO(Name),DATABASE::Vendor);
      LibraryVariableStorage.Enqueue(TRUE); // for the confirm handler when asking whether to create a pay-to vendor on the fly
      LibraryVariableStorage.Enqueue(TRUE); // for the confirm handler when asking whether you want to change the pay-to vendor no.

      MiniPurchaseInvoice.OPENNEW;
      MiniPurchaseInvoice.PurchLines.FIRST;
      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(Vendor.Name);
      MiniPurchaseInvoice."Pay-to Name".SETVALUE(PayToVendorName);

      // Verify.
      LibraryVariableStorage.Dequeue(PayToVendorNo);
      PayToVendor.GET(PayToVendorNo);
      VerifyVendorAgainstTemplate(PayToVendor,ConfigTemplateHeader);
      VerifyMiniPurchaseInvoiceAgainstPayToVendor(MiniPurchaseInvoice,PayToVendor);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MiniVendorCardTemplatePageHandler)]
    PROCEDURE NewVendorDefaultTemplate@92();
    VAR
      Vendor@1000 : Record 23;
      ConfigTemplateHeader@1002 : Record 8618;
      MiniPurchaseInvoice@1001 : TestPage 1354;
      VendorNo@1004 : Variant;
      VendorName@1003 : Text[50];
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateVendorTemplate(ConfigTemplateHeader);

      // Exercise.
      VendorName := LibraryUtility.GenerateRandomCode(Vendor.FIELDNO(Name),DATABASE::Vendor);
      LibraryVariableStorage.Enqueue(TRUE); // for the confirm handler

      MiniPurchaseInvoice.OPENNEW;
      MiniPurchaseInvoice.PurchLines.FIRST;
      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(VendorName);

      // Verify.
      LibraryVariableStorage.Dequeue(VendorNo);
      Vendor.GET(VendorNo);
      VerifyVendorAgainstTemplate(Vendor,ConfigTemplateHeader);
      VerifyMiniPurchaseInvoiceAgainstVendor(MiniPurchaseInvoice,Vendor,Vendor.Name);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CancelCreatingNewCustomer@20();
    VAR
      Customer@1000 : Record 18;
      MiniSalesInvoice@1001 : TestPage 1304;
      CustomerName@1002 : Text;
    BEGIN
      Initialize;

      // Exercise: New customer name.
      CustomerName := LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Name),DATABASE::Customer);
      LibraryVariableStorage.Enqueue(FALSE); // for the new customer confirm handler
      MiniSalesInvoice.OPENNEW;
      ASSERTERROR MiniSalesInvoice."Sell-to Customer Name".SETVALUE(CustomerName);
      Assert.ExpectedError(SelectCustErr);

      // Verify.
      Customer.SETRANGE(Name,CustomerName);
      ASSERTERROR Customer.FINDFIRST;
      Assert.AssertNothingInsideFilter;

      VerifySellToEmptyOnMiniSalesInvoice(MiniSalesInvoice);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CancelCreatingNewCustomerQuote@54();
    VAR
      Customer@1000 : Record 18;
      MiniSalesQuote@1001 : TestPage 1324;
      CustomerName@1002 : Text;
    BEGIN
      Initialize;

      // Exercise: New customer name.
      CustomerName := LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Name),DATABASE::Customer);
      LibraryVariableStorage.Enqueue(FALSE); // for the new customer confirm handler
      MiniSalesQuote.OPENNEW;
      ASSERTERROR MiniSalesQuote."Sell-to Customer Name".SETVALUE(CustomerName);
      Assert.ExpectedError(SelectCustErr);

      // Verify.
      Customer.SETRANGE(Name,CustomerName);
      ASSERTERROR Customer.FINDFIRST;
      Assert.AssertNothingInsideFilter;

      VerifySellToEmptyOnMiniSalesQuote(MiniSalesQuote);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ConfigTemplateListCancelPageHandler)]
    PROCEDURE NewCustomerCancelSelectTemplate@78();
    VAR
      Customer@1000 : Record 18;
      ConfigTemplateHeader@1002 : Record 8618;
      MiniSalesInvoice@1001 : TestPage 1304;
      CustomerName@1003 : Text;
    BEGIN
      Initialize;

      // Create 2 template headers and use only the second
      LibrarySmallBusiness.CreateCustomerTemplate(ConfigTemplateHeader);
      LibrarySmallBusiness.CreateCustomerTemplate(ConfigTemplateHeader);

      // Exercise.
      CustomerName := LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Name),DATABASE::Customer);
      LibraryVariableStorage.Enqueue(TRUE); // for the new customer confirm handler
      MiniSalesInvoice.OPENNEW;
      ASSERTERROR MiniSalesInvoice."Sell-to Customer Name".SETVALUE(CustomerName);
      Assert.ExpectedError(SelectCustErr);

      // Verify.
      Customer.SETRANGE(Name,CustomerName);
      ASSERTERROR Customer.FINDFIRST;
      Assert.AssertNothingInsideFilter;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ConfigTemplateListCancelPageHandler)]
    PROCEDURE NewCustomerCancelSelectTemplateQuote@56();
    VAR
      Customer@1000 : Record 18;
      ConfigTemplateHeader@1002 : Record 8618;
      MiniSalesQuote@1001 : TestPage 1324;
      CustomerName@1003 : Text;
    BEGIN
      Initialize;

      // Create 2 template headers and use only the second
      LibrarySmallBusiness.CreateCustomerTemplate(ConfigTemplateHeader);
      LibrarySmallBusiness.CreateCustomerTemplate(ConfigTemplateHeader);

      // Exercise.
      CustomerName := LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Name),DATABASE::Customer);
      LibraryVariableStorage.Enqueue(TRUE); // for the new customer confirm handler
      MiniSalesQuote.OPENNEW;
      ASSERTERROR MiniSalesQuote."Sell-to Customer Name".SETVALUE(CustomerName);
      Assert.ExpectedError(SelectCustErr);

      // Verify.
      Customer.SETRANGE(Name,CustomerName);
      ASSERTERROR Customer.FINDFIRST;
      Assert.AssertNothingInsideFilter;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MiniCustomerCardCancelEditPageHandler)]
    PROCEDURE CancelEditNewCustomer@5();
    VAR
      Customer@1000 : Record 18;
      MiniSalesInvoice@1001 : TestPage 1304;
      CustomerName@1002 : Text;
    BEGIN
      Initialize;

      // Exercise: New customer name.
      CustomerName := LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Name),DATABASE::Customer);
      LibraryVariableStorage.Enqueue(TRUE); // for the new customer confirm handler
      LibraryVariableStorage.Enqueue(CustomerName); // for the customer card page handler
      MiniSalesInvoice.OPENNEW;
      ASSERTERROR MiniSalesInvoice."Sell-to Customer Name".SETVALUE(CustomerName);
      Assert.ExpectedError(CannotBeZeroEmptyErr);

      // Verify customer still created even if not fully edited
      Customer.SETRANGE(Name,CustomerName);
      Customer.FINDFIRST;

      VerifySellToEmptyOnMiniSalesInvoice(MiniSalesInvoice);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MiniCustomerCardCancelEditPageHandler)]
    PROCEDURE CancelEditNewCustomerQuote@58();
    VAR
      Customer@1000 : Record 18;
      MiniSalesQuote@1001 : TestPage 1324;
      CustomerName@1002 : Text;
    BEGIN
      Initialize;

      // Exercise: New customer name.
      CustomerName := LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Name),DATABASE::Customer);
      LibraryVariableStorage.Enqueue(TRUE); // for the new customer confirm handler
      LibraryVariableStorage.Enqueue(CustomerName); // for the customer card page handler
      MiniSalesQuote.OPENNEW;
      ASSERTERROR MiniSalesQuote."Sell-to Customer Name".SETVALUE(CustomerName);
      Assert.ExpectedError(CannotBeZeroEmptyErr);

      // Verify customer still created even if not fully edited
      Customer.SETRANGE(Name,CustomerName);
      Customer.FINDFIRST;

      VerifySellToEmptyOnMiniSalesQuote(MiniSalesQuote);
    END;

    [Test]
    [HandlerFunctions(CustomerListPageHandler)]
    PROCEDURE CustomersWithSameName@26();
    VAR
      Customer@1000 : Record 18;
      MiniSalesInvoice@1001 : TestPage 1304;
    BEGIN
      Initialize;

      CreateTwoCustomersSameName(Customer);

      // Exercise: Select existing customer - second one in the page handler
      LibraryVariableStorage.Enqueue(Customer.Name); // for the customer list page handler
      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Customer.Name);

      // Verify.
      VerifyMiniSalesInvoiceAgainstCustomer(MiniSalesInvoice,Customer,Customer.Name);
    END;

    [Test]
    [HandlerFunctions(VerifyNumberOfCustomersAndClosePage)]
    PROCEDURE TestSelectCustomerWithSpecifyingBeginningOfName@121();
    VAR
      Customer@1000 : Record 18;
      MiniSalesInvoice@1001 : TestPage 1304;
      NameBeginning@1002 : Text[10];
      NameMiddle@1003 : Text[10];
      NameEnd@1004 : Text[10];
      IncompleteCustomerName@1005 : Text;
    BEGIN
      Initialize;

      CreateSelectCustomerSetup(NameBeginning,NameMiddle,NameEnd,Customer);

      MiniSalesInvoice.OPENNEW;

      // Test autocomplete when there is only one match
      IncompleteCustomerName := COPYSTR(Customer.Name,1,STRLEN(Customer.Name) - 1);
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(IncompleteCustomerName);

      // Verify.
      VerifyMiniSalesInvoiceAgainstCustomer(MiniSalesInvoice,Customer,Customer.Name);

      // Test entering beginning of the name
      LibraryVariableStorage.Enqueue(2);
      ASSERTERROR MiniSalesInvoice."Sell-to Customer Name".SETVALUE(NameBeginning);
      Assert.ExpectedError(SelectCustErr);

      MiniSalesInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(VerifyNumberOfCustomersAndClosePage,ConfirmHandler)]
    PROCEDURE TestSelectCustomerWithSpecifyingMiddleOfName@141();
    VAR
      Customer@1000 : Record 18;
      MiniSalesInvoice@1001 : TestPage 1304;
      NameBeginning@1002 : Text[10];
      NameMiddle@1003 : Text[10];
      NameEnd@1004 : Text[10];
    BEGIN
      Initialize;

      CreateSelectCustomerSetup(NameBeginning,NameMiddle,NameEnd,Customer);

      MiniSalesInvoice.OPENNEW;

      // Test entering middle of the name
      LibraryVariableStorage.Enqueue(2);
      ASSERTERROR MiniSalesInvoice."Sell-to Customer Name".SETVALUE(NameMiddle);
      Assert.ExpectedError(SelectCustErr);

      MiniSalesInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(VerifyNumberOfCustomersAndClosePage,ConfirmHandler)]
    PROCEDURE TestSelectCustomerWithSpecifyingEndOfName@142();
    VAR
      Customer@1000 : Record 18;
      MiniSalesInvoice@1001 : TestPage 1304;
      NameBeginning@1002 : Text[10];
      NameMiddle@1003 : Text[10];
      NameEnd@1004 : Text[10];
    BEGIN
      Initialize;

      CreateSelectCustomerSetup(NameBeginning,NameMiddle,NameEnd,Customer);

      MiniSalesInvoice.OPENNEW;

      // Test entering middle of the name
      LibraryVariableStorage.Enqueue(2);
      ASSERTERROR MiniSalesInvoice."Sell-to Customer Name".SETVALUE(NameEnd);
      Assert.ExpectedError(SelectCustErr);

      MiniSalesInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE TestSelectCustomerWithSpecifyingExactName@122();
    VAR
      Customer@1000 : Record 18;
      Customer2@1005 : Record 18;
      MiniSalesInvoice@1001 : TestPage 1304;
    BEGIN
      Initialize;

      CreateCustomer(Customer);
      Customer.VALIDATE(Name,'Customer Name');
      Customer.MODIFY(TRUE);

      CreateCustomer(Customer2);
      Customer2.VALIDATE(Name,Customer.Name + ' 2');
      Customer2.MODIFY(TRUE);

      // Entering full name should match to first customer
      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Customer.Name);
      VerifyMiniSalesInvoiceAgainstCustomer(MiniSalesInvoice,Customer,Customer.Name);
      MiniSalesInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(VerifyNumberOfVendorsAndClosePage)]
    PROCEDURE TestSelectVendorWithSpecifyingBeginningOfName@133();
    VAR
      Vendor@1000 : Record 23;
      MiniPurchaseInvoice@1007 : TestPage 1354;
      NameBeginning@1002 : Text[10];
      NameMiddle@1003 : Text[10];
      NameEnd@1004 : Text[10];
      IncompleteVendorName@1005 : Text;
    BEGIN
      Initialize;

      CreateSelectVendorSetup(NameBeginning,NameMiddle,NameEnd,Vendor);

      MiniPurchaseInvoice.OPENNEW;

      // Test autocomplete when there is only one match
      IncompleteVendorName := COPYSTR(Vendor.Name,1,STRLEN(Vendor.Name) - 1);
      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(IncompleteVendorName);

      // Verify.
      VerifyMiniPurchaseInvoiceAgainstVendor(MiniPurchaseInvoice,Vendor,Vendor.Name);

      // Test entering beginning of the name
      LibraryVariableStorage.Enqueue(2);
      ASSERTERROR MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(NameBeginning);
      Assert.ExpectedError(SelectVendorErr);

      MiniPurchaseInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(VerifyNumberOfVendorsAndClosePage)]
    PROCEDURE TestSelectVendorWithSpecifyingMiddleOfName@132();
    VAR
      Vendor@1000 : Record 23;
      MiniPurchaseInvoice@1001 : TestPage 1354;
      NameBeginning@1002 : Text[10];
      NameMiddle@1003 : Text[10];
      NameEnd@1004 : Text[10];
    BEGIN
      Initialize;

      CreateSelectVendorSetup(NameBeginning,NameMiddle,NameEnd,Vendor);

      MiniPurchaseInvoice.OPENNEW;

      // Test entering middle of the name
      LibraryVariableStorage.Enqueue(2);
      ASSERTERROR MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(NameMiddle);
      Assert.ExpectedError(SelectVendorErr);

      MiniPurchaseInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(VerifyNumberOfVendorsAndClosePage)]
    PROCEDURE TestSelectVendorWithSpecifyingEndOfName@130();
    VAR
      Vendor@1000 : Record 23;
      MiniPurchaseInvoice@1009 : TestPage 1354;
      NameBeginning@1002 : Text[10];
      NameMiddle@1003 : Text[10];
      NameEnd@1004 : Text[10];
    BEGIN
      Initialize;

      CreateSelectVendorSetup(NameBeginning,NameMiddle,NameEnd,Vendor);

      MiniPurchaseInvoice.OPENNEW;

      // Test entering end of the name
      LibraryVariableStorage.Enqueue(2);
      ASSERTERROR MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(NameEnd);
      Assert.ExpectedError(SelectVendorErr);

      MiniPurchaseInvoice.CLOSE;
    END;

    [Test]
    PROCEDURE TestSelectVendorWithSpecifyingExactName@123();
    VAR
      Vendor@1000 : Record 23;
      Vendor2@1001 : Record 23;
      MiniPurchaseInvoice@1009 : TestPage 1354;
    BEGIN
      Initialize;

      CreateVendor(Vendor);
      Vendor.VALIDATE(Name,'Vendor Name');
      Vendor.MODIFY(TRUE);

      CreateVendor(Vendor2);
      Vendor2.VALIDATE(Name,Vendor.Name + ' 2');
      Vendor2.MODIFY(TRUE);

      // Setting exact name should select vendor 1
      MiniPurchaseInvoice.OPENNEW;
      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(Vendor.Name);
      VerifyMiniPurchaseInvoiceAgainstVendor(MiniPurchaseInvoice,Vendor,Vendor.Name);
      MiniPurchaseInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(CustomerListPageHandler)]
    PROCEDURE CustomersWithSameNameQuote@60();
    VAR
      Customer@1000 : Record 18;
      MiniSalesQuote@1001 : TestPage 1324;
    BEGIN
      Initialize;

      CreateTwoCustomersSameName(Customer);

      // Exercise: Select existing customer - second one in the page handler
      LibraryVariableStorage.Enqueue(Customer.Name); // for the customer list page handler
      MiniSalesQuote.OPENNEW;
      MiniSalesQuote."Sell-to Customer Name".SETVALUE(Customer.Name);

      // Verify.
      VerifyMiniSalesQuoteAgainstCustomer(MiniSalesQuote,Customer,Customer.Name);
    END;

    [Test]
    [HandlerFunctions(CustomerListCancelPageHandler)]
    PROCEDURE CustomersWithSameNameCancelSelect@6();
    VAR
      Customer@1000 : Record 18;
      MiniSalesInvoice@1001 : TestPage 1304;
    BEGIN
      Initialize;

      CreateTwoCustomersSameName(Customer);

      // Exercise: Select existing customer - second one in the page handler
      LibraryVariableStorage.Enqueue(Customer.Name); // for the customer list page handler
      MiniSalesInvoice.OPENNEW;
      ASSERTERROR MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Customer.Name);
      Assert.ExpectedError(SelectCustErr);
    END;

    [Test]
    [HandlerFunctions(CustomerListCancelPageHandler)]
    PROCEDURE CustomersWithSameNameCancelSelectQuote@62();
    VAR
      Customer@1000 : Record 18;
      MiniSalesQuote@1001 : TestPage 1324;
    BEGIN
      Initialize;

      CreateTwoCustomersSameName(Customer);

      // Exercise: Select existing customer - second one in the page handler
      LibraryVariableStorage.Enqueue(Customer.Name); // for the customer list page handler
      MiniSalesQuote.OPENNEW;
      ASSERTERROR MiniSalesQuote."Sell-to Customer Name".SETVALUE(Customer.Name);
      Assert.ExpectedError(SelectCustErr);
    END;

    [Test]
    PROCEDURE OpenCustomerCardFromSortedCustomerList@125();
    VAR
      Customer@1001 : Record 18;
      TestItem@1002 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      MiniCustomerList@1003 : TestPage 1301;
    BEGIN
      // [FEATURE] [Mini Customer Card]
      // [SCENARIO] Mini Customer Card should be open for Customer that is sorted by "Balance Due" and has different Balance and "Balance Due"
      Initialize;

      // [GIVEN] Create Customer which Balance and "Balance Due" are different by posting 2 sales invoices:
      LibrarySmallBusiness.CreateCustomer(Customer);
      LibrarySmallBusiness.CreateItem(TestItem);
      // [GIVEN] Sales Invoice posted on WORKDATE
      LibrarySmallBusiness.CreateSalesInvoiceHeader(SalesHeader,Customer);
      LibrarySmallBusiness.CreateSalesLine(SalesLine,SalesHeader,TestItem,LibraryRandom.RandInt(100));
      LibrarySmallBusiness.PostSalesInvoice(SalesHeader);
      // [GIVEN] Sales Invoice posted on (WORKDATE + 1)
      WORKDATE := WORKDATE + 1;
      LibrarySmallBusiness.CreateSalesInvoiceHeader(SalesHeader,Customer);
      LibrarySmallBusiness.CreateSalesLine(SalesLine,SalesHeader,TestItem,LibraryRandom.RandInt(100));
      LibrarySmallBusiness.PostSalesInvoice(SalesHeader);
      WORKDATE := WORKDATE - 1;

      // [GIVEN] Sort Customers by "Balance Due" in the Mini Customer List
      MiniCustomerList.OPENVIEW;
      MiniCustomerList.FILTER.SETFILTER("No.",Customer."No."); // decrease number of shown customers
      MiniCustomerList.FILTER.SETCURRENTKEY("Balance Due");

      // [WHEN] Run action View to open the Mini Customer Card
      // [THEN] The Card is open and shows Customers data
      VerifySortedCustomerList(MiniCustomerList);
    END;

    [Test]
    [HandlerFunctions(ChangeBuyFromPayToVendorConfirmHandler)]
    PROCEDURE UpdateVendorNameWithExistingVendorName@105();
    VAR
      Vendor1@1003 : Record 23;
      Vendor@1000 : Record 23;
      MiniPurchaseInvoice@1001 : TestPage 1354;
    BEGIN
      Initialize;
      CreateVendor(Vendor);
      CreateVendor(Vendor1);

      // Exercise: Select existing Vendor.
      MiniPurchaseInvoice.OPENNEW;
      MiniPurchaseInvoice.PurchLines.FIRST;
      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(Vendor.Name);
      // Enqueue for ChangeSellToBillToVendorConfirmHandler that is called twice
      // for sell-to and bill-to
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(TRUE);
      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(Vendor1.Name);

      // Verify.
      VerifyMiniPurchaseInvoiceAgainstVendor(MiniPurchaseInvoice,Vendor1,Vendor1.Name);
    END;

    [Test]
    [HandlerFunctions(VendorListPageHandler)]
    PROCEDURE VendorsWithSameName@98();
    VAR
      Vendor@1000 : Record 23;
      MiniPurchaseInvoice@1001 : TestPage 1354;
    BEGIN
      Initialize;

      CreateTwoVendorsSameName(Vendor);

      // Exercise: Select existing Vendor - second one in the page handler
      LibraryVariableStorage.Enqueue(Vendor.Name); // for the Vendor list page handler
      MiniPurchaseInvoice.OPENNEW;
      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(Vendor.Name);

      // Verify.
      VerifyMiniPurchaseInvoiceAgainstVendor(MiniPurchaseInvoice,Vendor,Vendor.Name);
    END;

    [Test]
    [HandlerFunctions(VendorListCancelPageHandler)]
    PROCEDURE VendorsWithSameNameCancelSelect@197();
    VAR
      Vendor@1000 : Record 23;
      MiniPurchaseInvoice@1001 : TestPage 1354;
    BEGIN
      Initialize;

      CreateTwoVendorsSameName(Vendor);

      // Exercise: Select existing Vendor - second one in the page handler
      LibraryVariableStorage.Enqueue(Vendor.Name); // for the Vendor list page handler
      MiniPurchaseInvoice.OPENNEW;
      ASSERTERROR MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(Vendor.Name);
      Assert.ExpectedError(SelectVendorErr);
    END;

    [Test]
    [HandlerFunctions(MiniStandardPurchaseCodeCardPageHandler)]
    PROCEDURE CreateInvoiceFromStandardPurchaseCodes@96();
    VAR
      Item@1000 : Record 27;
      Vendor@1001 : Record 23;
      StandardPurchaseCode@1002 : Record 173;
      StandardVendorPurchaseCode@1004 : Record 175;
      PurchaseHeader@1005 : Record 38;
      MiniPurchaseInvoice@1009 : TestPage 1354;
    BEGIN
      Initialize;

      // Create data
      LibrarySmallBusiness.CreateItem(Item);
      CreateVendor(Vendor);
      LibrarySmallBusiness.CreateStandardPurchaseCode(StandardPurchaseCode);
      LibrarySmallBusiness.CreateVendorPurchaseCode(StandardVendorPurchaseCode,Vendor."No.",StandardPurchaseCode.Code);
      CreatePurchaseStandardCodeWithItemAndDescr(StandardPurchaseCode,Item);

      // Exercise
      LibrarySmallBusiness.CreatePurchaseInvoiceHeader(PurchaseHeader,Vendor);
      MiniPurchaseInvoice.OPENEDIT;
      MiniPurchaseInvoice.GOTORECORD(PurchaseHeader);
      MiniPurchaseInvoice.GetRecurringPurchaseLines.INVOKE;

      // Verify
      VerifyPurchaseInvoiceLinesFromStandardCodes(PurchaseHeader,StandardPurchaseCode);
    END;

    [Test]
    PROCEDURE CheckStandardCodeCreationPurchase@89();
    VAR
      Item@1000 : Record 27;
      StandardPurchaseCode@1002 : Record 173;
    BEGIN
      Initialize;

      // Create data
      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateStandardPurchaseCode(StandardPurchaseCode);

      // Exercise
      CreatePurchaseStandardCodeWithItemAndDescr(StandardPurchaseCode,Item);

      // Verify
      VerifyStandardPurchaseCodes(StandardPurchaseCode);
    END;

    [Test]
    [HandlerFunctions(MiniItemListPageHandler)]
    PROCEDURE DrillDownOnSILineNo@29();
    VAR
      MiniSalesInvoiceSubform@1000 : TestPage 1305;
    BEGIN
      Initialize;
      MiniSalesInvoiceSubform.OPENEDIT;
      MiniSalesInvoiceSubform."No.".LOOKUP;
    END;

    [Test]
    PROCEDURE ItemListShowsTypeColumn@18();
    VAR
      Item@1001 : Record 27;
      ItemAsService@1002 : Record 27;
      MiniItemList@1000 : TestPage 1303;
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateItemAsService(ItemAsService);

      MiniItemList.OPENVIEW;
      MiniItemList.GOTORECORD(ItemAsService);
      MiniItemList.Type.ASSERTEQUALS(ItemAsService.Type);
      MiniItemList.GOTORECORD(Item);
      MiniItemList.Type.ASSERTEQUALS(Item.Type);
    END;

    [Test]
    PROCEDURE ItemCardControls@12();
    VAR
      Item@1001 : Record 27;
      MiniItemCard@1000 : TestPage 1302;
    BEGIN
      Initialize;

      MiniItemCard.OPENNEW;
      MiniItemCard.Description.SETVALUE(
        LibraryUtility.GenerateRandomCode(Item.FIELDNO(Description),
          DATABASE::Item));

      Assert.IsTrue(MiniItemCard."Costing Method".VALUE = FORMAT(Item."Costing Method"::FIFO),
        'Costing method should be always FIFO.');
      Assert.IsFalse(MiniItemCard."Costing Method".ENABLED,
        'Costing method should be disabled.');
      Assert.IsTrue(MiniItemCard."Unit Cost".EDITABLE,
        FORMAT('Unit Cost should be enabled when Type is %1 and no ILEs exists',Item.Type::Service));

      MiniItemCard.Type.SETVALUE(FORMAT(Item.Type::Service));
      Assert.IsFalse(MiniItemCard."Costing Method".ENABLED,
        'Costing method should be disabled.');
      Assert.IsFalse(MiniItemCard."Inventory Posting Group".EDITABLE,
        FORMAT('Inventory Posting Group should be disabled when Type is %1.',Item.Type::Service));
      Assert.IsFalse(MiniItemCard.Inventory.EDITABLE,
        FORMAT('Inventory should be disabled when Type is %1.',Item.Type::Service));
      Assert.IsTrue(MiniItemCard."Unit Cost".EDITABLE,
        FORMAT('Unit Cost should be enabled when Type is %1.',Item.Type::Service));
    END;

    [Test]
    PROCEDURE VendorCardAndListControls@86();
    VAR
      Vendor@1001 : Record 23;
      PostCode@1005 : Record 225;
      MiniVendorCard@1000 : TestPage 1330;
      MiniVendorList@1002 : TestPage 1331;
      RandomContact@1003 : Code[30];
      PhoneNumber@1004 : Text;
    BEGIN
      Initialize;
      LibrarySmallBusiness.CreateVendor(Vendor);

      // invoke Edit on the created vendor, from the vendor list
      MiniVendorList.OPENVIEW;
      MiniVendorList.GOTORECORD(Vendor);
      MiniVendorCard.TRAP;
      MiniVendorList.EDIT.INVOKE;

      // modify some fields on the vendor card
      MiniVendorCard.Address.SETVALUE(LibraryUtility.GenerateRandomCode(Vendor.FIELDNO(Address),DATABASE::Vendor));
      MiniVendorCard."Address 2".SETVALUE(LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("Address 2"),DATABASE::Vendor));
      LibraryERM.CreatePostCode(PostCode);
      MiniVendorCard.City.SETVALUE(PostCode.City);
      MiniVendorCard."Post Code".SETVALUE(PostCode.Code);
      RandomContact := LibraryUtility.GenerateRandomCode(Vendor.FIELDNO(Contact),DATABASE::Vendor);
      MiniVendorCard.Contact.SETVALUE(RandomContact);
      PhoneNumber := '+4544444444';
      MiniVendorCard."Phone No.".SETVALUE(PhoneNumber);
      MiniVendorCard.OK.INVOKE;

      // verify vendor card modifications on the vendor list controls
      MiniVendorList.GOTORECORD(Vendor);
      Assert.AreEqual(Vendor.Name,MiniVendorList.Name.VALUE,'Unexpected vendor name.');
      Assert.AreEqual(PhoneNumber,MiniVendorList."Phone No.".VALUE,'Unexpected vendor phone number.');
      Assert.AreEqual(RandomContact,MiniVendorList.Contact.VALUE,'Unexpected vendor contact.');
    END;

    [Test]
    [HandlerFunctions(PurchaseInvoicePageHandler)]
    PROCEDURE CreatePurchaseInvoiceFromVendorList@76();
    VAR
      Vendor@1001 : Record 23;
      MiniVendorList@1003 : TestPage 1331;
    BEGIN
      Initialize;
      LibrarySmallBusiness.CreateVendor(Vendor);
      MiniVendorList.OPENVIEW;
      MiniVendorList.GOTORECORD(Vendor);
      LibraryVariableStorage.Enqueue(Vendor.Name);
      MiniVendorList.NewPurchaseInvoice.INVOKE;
    END;

    [Test]
    [HandlerFunctions(PurchaseInvoicePageHandler)]
    PROCEDURE CreatePurchaseInvoiceFromVendorCard@67();
    VAR
      Vendor@1001 : Record 23;
      MiniVendorCard@1003 : TestPage 1330;
    BEGIN
      Initialize;
      LibrarySmallBusiness.CreateVendor(Vendor);
      MiniVendorCard.OPENVIEW;
      MiniVendorCard.GOTORECORD(Vendor);
      LibraryVariableStorage.Enqueue(Vendor.Name);
      MiniVendorCard."Page Mini Purchase Invoice".INVOKE;
    END;

    [Test]
    [HandlerFunctions(PurchaseCreditMemoPageHandler)]
    PROCEDURE CreateCreditMemoFromVendorList@77();
    VAR
      Vendor@1001 : Record 23;
      MiniVendorList@1000 : TestPage 1331;
    BEGIN
      Initialize;
      LibrarySmallBusiness.CreateVendor(Vendor);
      MiniVendorList.OPENVIEW;
      MiniVendorList.GOTORECORD(Vendor);
      LibraryVariableStorage.Enqueue(Vendor.Name);
      MiniVendorList.NewPurchaseCreditMemo.INVOKE;
    END;

    [Test]
    [HandlerFunctions(PurchaseCreditMemoPageHandler)]
    PROCEDURE CreatePurchaseCreditMemoFromVendorCard@85();
    VAR
      Vendor@1001 : Record 23;
      MiniVendorCard@1003 : TestPage 1330;
    BEGIN
      Initialize;
      LibrarySmallBusiness.CreateVendor(Vendor);
      MiniVendorCard.OPENVIEW;
      MiniVendorCard.GOTORECORD(Vendor);
      LibraryVariableStorage.Enqueue(Vendor.Name);
      MiniVendorCard."Page Mini Purchase Credit Memo".INVOKE;
    END;

    [Test]
    [HandlerFunctions(CreatePurchaseInvoiceHandler,SelectVendorHandler)]
    PROCEDURE CreatePurchaseInvoiceFromSalesInvoceAllLines@71();
    VAR
      Vendor@1000 : Record 23;
      Item@1003 : Record 27;
      Customer@1002 : Record 18;
      ItemAsService@1001 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1009 : Record 37;
      PurchaseHeader@1010 : Record 38;
      MiniSalesInvoice@1005 : TestPage 1304;
      MiniPurchaseInvoice@1008 : TestPage 1354;
      CopyAllItems@1006 : Integer;
      ConfirmOnVendorSelection@1007 : Boolean;
    BEGIN
      Initialize;
      LibrarySmallBusiness.CreateVendor(Vendor);
      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateItemAsService(ItemAsService);
      CreateCustomer(Customer);

      LibrarySmallBusiness.CreateSalesInvoiceHeader(SalesHeader,Customer);
      AddRandomNumberOfLinesToSalesHeader(SalesHeader,Item);
      AddRandomNumberOfLinesToSalesHeader(SalesHeader,ItemAsService);

      MiniSalesInvoice.OPENEDIT;
      MiniSalesInvoice.GOTORECORD(SalesHeader);
      MiniSalesInvoice.SalesLines.NEW;
      MiniSalesInvoice.SalesLines.Description.SETVALUE('Description Text');

      CopyAllItems := 1;
      ConfirmOnVendorSelection := FALSE;

      LibraryVariableStorage.Enqueue(CopyAllItems);
      LibraryVariableStorage.Enqueue(Vendor."No.");
      LibraryVariableStorage.Enqueue(ConfirmOnVendorSelection);

      MiniPurchaseInvoice.TRAP;
      MiniSalesInvoice.CreatePurchaseInvoice.INVOKE;
      MiniPurchaseInvoice.CLOSE;

      PurchaseHeader.SETRANGE("Buy-from Vendor No.",Vendor."No.");
      PurchaseHeader.FINDLAST;

      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");

      VerifyPuchaseLinesCreatedFromSalesLines(PurchaseHeader,SalesLine);
    END;

    [Test]
    [HandlerFunctions(CreatePurchaseInvoiceHandler,SelectVendorHandler)]
    PROCEDURE CreatePurchaseInvoiceFromSalesInvoiceSelectedLines@113();
    VAR
      Vendor@1000 : Record 23;
      Item@1003 : Record 27;
      Customer@1002 : Record 18;
      ItemAsService@1001 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1009 : Record 37;
      PurchaseHeader@1010 : Record 38;
      MiniSalesInvoice@1005 : TestPage 1304;
      MiniPurchaseInvoice@1008 : TestPage 1354;
      CopySelectedItems@1006 : Integer;
      ConfirmOnVendorSelection@1007 : Boolean;
    BEGIN
      Initialize;
      LibrarySmallBusiness.CreateVendor(Vendor);
      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateItemAsService(ItemAsService);
      CreateCustomer(Customer);

      LibrarySmallBusiness.CreateSalesInvoiceHeader(SalesHeader,Customer);
      AddRandomNumberOfLinesToSalesHeader(SalesHeader,Item);

      MiniSalesInvoice.OPENEDIT;
      MiniSalesInvoice.GOTORECORD(SalesHeader);

      CopySelectedItems := 2;
      ConfirmOnVendorSelection := FALSE;

      LibraryVariableStorage.Enqueue(CopySelectedItems);
      LibraryVariableStorage.Enqueue(Vendor."No.");
      LibraryVariableStorage.Enqueue(ConfirmOnVendorSelection);

      MiniPurchaseInvoice.TRAP;
      MiniSalesInvoice.CreatePurchaseInvoice.INVOKE;
      MiniPurchaseInvoice.CLOSE;

      PurchaseHeader.SETRANGE("Buy-from Vendor No.",Vendor."No.");
      PurchaseHeader.FINDLAST;

      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.FINDFIRST;
      SalesLine.SETRANGE("Line No.",SalesLine."Line No.");
      VerifyPuchaseLinesCreatedFromSalesLines(PurchaseHeader,SalesLine);
    END;

    [Test]
    [HandlerFunctions(CreatePurchaseInvoiceHandler,SelectVendorHandler)]
    PROCEDURE CreatePurchaseInvoiceFromSalesInvoiceNoLines@118();
    VAR
      Vendor@1000 : Record 23;
      Item@1003 : Record 27;
      Customer@1002 : Record 18;
      ItemAsService@1001 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1009 : Record 37;
      PurchaseHeader@1010 : Record 38;
      MiniSalesInvoice@1005 : TestPage 1304;
      MiniPurchaseInvoice@1008 : TestPage 1354;
      CopyAllItems@1006 : Integer;
      ConfirmOnVendorSelection@1007 : Boolean;
    BEGIN
      Initialize;
      LibrarySmallBusiness.CreateVendor(Vendor);
      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateItemAsService(ItemAsService);
      CreateCustomer(Customer);

      LibrarySmallBusiness.CreateSalesInvoiceHeader(SalesHeader,Customer);
      MiniSalesInvoice.OPENEDIT;
      MiniSalesInvoice.GOTORECORD(SalesHeader);

      CopyAllItems := 1;
      ConfirmOnVendorSelection := FALSE;

      LibraryVariableStorage.Enqueue(CopyAllItems);
      LibraryVariableStorage.Enqueue(Vendor."No.");
      LibraryVariableStorage.Enqueue(ConfirmOnVendorSelection);

      MiniPurchaseInvoice.TRAP;
      MiniSalesInvoice.CreatePurchaseInvoice.INVOKE;
      MiniPurchaseInvoice.CLOSE;

      PurchaseHeader.SETRANGE("Buy-from Vendor No.",Vendor."No.");
      PurchaseHeader.FINDLAST;

      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");

      VerifyPuchaseLinesCreatedFromSalesLines(PurchaseHeader,SalesLine);
    END;

    [Test]
    [HandlerFunctions(CreatePurchaseInvoiceHandler,SelectVendorHandler)]
    PROCEDURE CreatePurchaseInvoiceCancelScenarios@119();
    VAR
      Vendor@1000 : Record 23;
      Item@1003 : Record 27;
      Customer@1002 : Record 18;
      ItemAsService@1001 : Record 27;
      SalesHeader@1004 : Record 36;
      PurchaseHeader@1010 : Record 38;
      MiniSalesInvoice@1005 : TestPage 1304;
      Cancel@1006 : Integer;
      CopyAllItems@1012 : Integer;
      CancelOnVendorSelection@1007 : Boolean;
    BEGIN
      Initialize;
      LibrarySmallBusiness.CreateVendor(Vendor);
      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateItemAsService(ItemAsService);
      CreateCustomer(Customer);

      LibrarySmallBusiness.CreateSalesInvoiceHeader(SalesHeader,Customer);
      AddRandomNumberOfLinesToSalesHeader(SalesHeader,Item);

      MiniSalesInvoice.OPENEDIT;
      MiniSalesInvoice.GOTORECORD(SalesHeader);

      Cancel := 0;
      LibraryVariableStorage.Enqueue(Cancel);
      MiniSalesInvoice.CreatePurchaseInvoice.INVOKE;

      PurchaseHeader.SETRANGE("Buy-from Vendor No.",Vendor."No.");
      Assert.IsFalse(PurchaseHeader.FINDLAST,'Purchase Invoice was created when user selected cancel');

      CopyAllItems := 1;
      LibraryVariableStorage.Enqueue(CopyAllItems);
      LibraryVariableStorage.Enqueue(Vendor."No.");

      CancelOnVendorSelection := TRUE;
      LibraryVariableStorage.Enqueue(CancelOnVendorSelection);
      MiniSalesInvoice.CreatePurchaseInvoice.INVOKE;

      Assert.IsFalse(PurchaseHeader.FINDLAST,'Purchase Invoice was created when user selected cancel');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,CreatePurchaseInvoiceHandler,SelectVendorHandler)]
    PROCEDURE CreatePurchaseInvoiceFromSalesInvoiceAndPost@102();
    VAR
      Vendor@1000 : Record 23;
      Item@1003 : Record 27;
      Customer@1002 : Record 18;
      ItemAsService@1001 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1009 : Record 37;
      PurchInvHeader@1010 : Record 122;
      MiniSalesInvoice@1005 : TestPage 1304;
      MiniPurchaseInvoice@1008 : TestPage 1354;
      CopySelectedItems@1006 : Integer;
      ConfirmOnVendorSelection@1007 : Boolean;
    BEGIN
      Initialize;
      LibrarySmallBusiness.CreateVendor(Vendor);
      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateItemAsService(ItemAsService);
      CreateCustomer(Customer);

      LibrarySmallBusiness.CreateSalesInvoiceHeader(SalesHeader,Customer);
      AddRandomNumberOfLinesToSalesHeader(SalesHeader,Item);

      MiniSalesInvoice.OPENEDIT;
      MiniSalesInvoice.GOTORECORD(SalesHeader);

      CopySelectedItems := 2;
      ConfirmOnVendorSelection := FALSE;

      LibraryVariableStorage.Enqueue(CopySelectedItems);
      LibraryVariableStorage.Enqueue(Vendor."No.");
      LibraryVariableStorage.Enqueue(ConfirmOnVendorSelection);

      MiniPurchaseInvoice.TRAP;
      MiniSalesInvoice.CreatePurchaseInvoice.INVOKE;
      MiniPurchaseInvoice."Vendor Invoice No.".SETVALUE(LibraryRandom.RandIntInRange(1,1000));
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(FALSE); // Open posted invoice?

      MiniPurchaseInvoice.Post.INVOKE;

      PurchInvHeader.SETRANGE("Buy-from Vendor No.",Vendor."No.");
      PurchInvHeader.FINDLAST;

      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.FINDFIRST;
      SalesLine.SETRANGE("Line No.",SalesLine."Line No.");
      VerifyPostedPuchaseLinesCreatedFromSalesLines(PurchInvHeader,SalesLine);
    END;

    [Test]
    [HandlerFunctions(CreateSQuoteHandler)]
    PROCEDURE CreateSalesQuoteFromCustomerCard@106();
    VAR
      Cust@1001 : Record 18;
      MiniCustCard@1003 : TestPage 1300;
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateCustomer(Cust);

      MiniCustCard.OPENVIEW;
      MiniCustCard.GOTORECORD(Cust);
      SellToCustomerName4HandlerFunction := Cust.Name;

      MiniCustCard.NewSalesQuote.INVOKE;

      MiniCustCard.OK.INVOKE;
    END;

    [Test]
    [HandlerFunctions(CreateSQuoteHandler)]
    PROCEDURE CreateSalesQuoteFromCustomerList@135();
    VAR
      Cust@1001 : Record 18;
      MiniCustList@1003 : TestPage 1301;
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateCustomer(Cust);

      MiniCustList.OPENVIEW;
      MiniCustList.GOTORECORD(Cust);
      SellToCustomerName4HandlerFunction := Cust.Name;

      MiniCustList.NewSalesQuote.INVOKE;

      MiniCustList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CreateSQuoteHandler@107(VAR MiniSalesQuote@1000 : TestPage 1324);
    BEGIN
      Assert.AreEqual(SellToCustomerName4HandlerFunction,MiniSalesQuote."Sell-to Customer Name".VALUE,'Wrong Customer selected');

      MiniSalesQuote.OK.INVOKE;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE SalesInvoiceLinesControlsItem@16();
    VAR
      Item@1002 : Record 27;
      Customer@1001 : Record 18;
      MiniSalesInvoice@1000 : TestPage 1304;
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateItem(Item);
      CreateCustomer(Customer);

      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Customer.Name);

      // Set item on line - if no errors than is ok
      MiniSalesInvoice.SalesLines."No.".SETVALUE(Item."No.");
      MiniSalesInvoice.SalesLines.Quantity.SETVALUE(LibraryRandom.RandDec(100,2));

      // Set description only - if no errors than is ok
      MiniSalesInvoice.SalesLines.NEW;
      MiniSalesInvoice.SalesLines.Description.SETVALUE(LibraryUtility.GenerateRandomCode(Item.FIELDNO(Description),DATABASE::Item));

      LibraryVariableStorage.Enqueue(TRUE); // for the posting confirm handler
      LibraryVariableStorage.Enqueue(FALSE); // for open posted sales invoice confirm handler
      MiniSalesInvoice.Post.INVOKE;

      VerifyUnitCostOnItemCard(Item,FALSE); // ILEs exist and control should be non - editable
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE SalesInvoiceLinesControlsService@27();
    VAR
      Item@1002 : Record 27;
      Customer@1001 : Record 18;
      MiniSalesInvoice@1000 : TestPage 1304;
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateItemAsService(Item);
      CreateCustomer(Customer);

      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Customer.Name);

      // Set item as service on line - if no errors than is ok
      MiniSalesInvoice.SalesLines."No.".SETVALUE(Item."No.");
      MiniSalesInvoice.SalesLines.Quantity.SETVALUE(LibraryRandom.RandDec(100,2));

      // Set description only - if no errors than is ok
      MiniSalesInvoice.SalesLines.NEW;
      MiniSalesInvoice.SalesLines.Description.SETVALUE(LibraryUtility.GenerateRandomCode(Item.FIELDNO(Description),DATABASE::Item));

      LibraryVariableStorage.Enqueue(TRUE); // for the posting confirm handler
      LibraryVariableStorage.Enqueue(FALSE); // for open posted sales invoice confirm handler
      MiniSalesInvoice.Post.INVOKE;

      VerifyUnitCostOnItemCard(Item,TRUE); // ILEs exist and control should be editable
    END;

    [Test]
    PROCEDURE DueDateAutoFilled@33();
    VAR
      Customer@1001 : Record 18;
      MiniSalesInvoice@1000 : TestPage 1304;
    BEGIN
      Initialize;

      CreateCustomer(Customer);
      Customer."Payment Terms Code" := '';
      Customer.MODIFY;

      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Customer.Name);

      Assert.AreEqual(MiniSalesInvoice."Payment Terms Code".VALUE,'','Payment Terms Code should be empty by default');
      Assert.AreEqual(MiniSalesInvoice."Due Date".ASDATE,MiniSalesInvoice."Document Date".ASDATE,'Due Date incorrectly calculated.');
    END;

    [Test]
    PROCEDURE DueDateUpdatedWithPaymentTermsChange@25();
    VAR
      Customer@1001 : Record 18;
      PaymentTerms@1002 : Record 3;
      MiniSalesInvoice@1000 : TestPage 1304;
      ExpectedDueDate@1003 : Date;
    BEGIN
      Initialize;

      CreateCustomer(Customer);

      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Customer.Name);

      PaymentTerms.FINDLAST;
      MiniSalesInvoice."Payment Terms Code".SETVALUE(PaymentTerms.Code);
      ExpectedDueDate := CALCDATE(PaymentTerms."Due Date Calculation",MiniSalesInvoice."Document Date".ASDATE);
      Assert.AreEqual(MiniSalesInvoice."Due Date".ASDATE,ExpectedDueDate,'Due Date incorrectly calculated.');
    END;

    [Test]
    PROCEDURE ShipmentDatePresentOnSalesInvoice@15();
    VAR
      MiniSalesInvoice@1000 : TestPage 1304;
      MiniPostedSalesInvoice@1002 : TestPage 1307;
    BEGIN
      Initialize;

      MiniSalesInvoice.OPENNEW;
      Assert.IsTrue(MiniSalesInvoice."Shipment Date".ENABLED,
        FORMAT('Shipment Date should be present on Sales Invoice'));

      MiniPostedSalesInvoice.OPENVIEW;
      Assert.IsTrue(MiniSalesInvoice."Shipment Date".ENABLED,
        FORMAT('Shipment Date should be present on Posted Sales Invoice'));
    END;

    [Test]
    [HandlerFunctions(MiniStandardSalesCodeCardPageHandler)]
    PROCEDURE CreateInvoiceFromStandardSalesCodes@21();
    VAR
      Item@1000 : Record 27;
      Customer@1001 : Record 18;
      StandardSalesCode@1002 : Record 170;
      StandardCustomerSalesCode@1004 : Record 172;
      SalesHeader@1005 : Record 36;
      MiniSalesInvoice@1009 : TestPage 1304;
    BEGIN
      Initialize;

      // Create data
      LibrarySmallBusiness.CreateItem(Item);
      CreateCustomer(Customer);
      LibrarySmallBusiness.CreateStandardSalesCode(StandardSalesCode);
      LibrarySmallBusiness.CreateCustomerSalesCode(StandardCustomerSalesCode,Customer."No.",StandardSalesCode.Code);
      CreateStandardCodeWithItemAndDescr(StandardSalesCode,Item);

      // Exercise
      LibrarySmallBusiness.CreateSalesInvoiceHeader(SalesHeader,Customer);
      MiniSalesInvoice.OPENEDIT;
      MiniSalesInvoice.GOTORECORD(SalesHeader);
      MiniSalesInvoice.GetRecurringSalesLines.INVOKE;

      // Verify
      VerifyInvoiceLinesFromStandardCodes(SalesHeader,StandardSalesCode);
    END;

    [Test]
    [HandlerFunctions(MiniStandardSalesCodeCardPageHandler)]
    PROCEDURE CreateQuoteFromStandardSalesCodes@37();
    VAR
      Item@1000 : Record 27;
      Customer@1001 : Record 18;
      StandardSalesCode@1002 : Record 170;
      StandardCustomerSalesCode@1004 : Record 172;
      SalesHeader@1005 : Record 36;
      MiniSalesQuote@1009 : TestPage 1324;
    BEGIN
      Initialize;

      // Create data
      LibrarySmallBusiness.CreateItem(Item);
      CreateCustomer(Customer);
      LibrarySmallBusiness.CreateStandardSalesCode(StandardSalesCode);
      LibrarySmallBusiness.CreateCustomerSalesCode(StandardCustomerSalesCode,Customer."No.",StandardSalesCode.Code);
      CreateStandardCodeWithItemAndDescr(StandardSalesCode,Item);

      // Exercise
      LibrarySmallBusiness.CreateSalesQuoteHeader(SalesHeader,Customer);
      MiniSalesQuote.OPENEDIT;
      MiniSalesQuote.GOTORECORD(SalesHeader);
      MiniSalesQuote.GetRecurringSalesLines.INVOKE;

      // Verify
      VerifyInvoiceLinesFromStandardCodes(SalesHeader,StandardSalesCode);
    END;

    [Test]
    PROCEDURE CheckStandardCodeCreation@24();
    VAR
      Item@1000 : Record 27;
      StandardSalesCode@1002 : Record 170;
    BEGIN
      Initialize;

      // Create data
      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateStandardSalesCode(StandardSalesCode);

      // Exercise
      CreateStandardCodeWithItemAndDescr(StandardSalesCode,Item);

      // Verify
      VerifyStandardCodes(StandardSalesCode);
    END;

    [Test]
    [HandlerFunctions(FollowUpConfirmHandler,EmailDialogMPH)]
    PROCEDURE EmailMiniSalesQuote@32();
    VAR
      SalesHeader@1000 : Record 36;
      MiniSalesQuote@1004 : TestPage 1324;
    BEGIN
      // [FEATURE] [Quote] [UI] [Email]
      // [SCENARIO 379041] Email Dialog is opened for the opened Sales Quote when perform "Email" action
      Initialize;

      // [GIVEN] Several Sales Quotes.
      CreateSevMiniSalesQuotes(SalesHeader);
      // [GIVEN] Open Sales Quote "X".
      MiniSalesQuote.OPENVIEW;
      MiniSalesQuote.GOTORECORD(SalesHeader);

      // [WHEN] Perform "Email" action.
      LibraryVariableStorage.Enqueue(QuoteTxt);
      LibraryVariableStorage.Enqueue(SalesHeader."No.");
      MiniSalesQuote.Email.INVOKE;

      // [THEN] Confirm is shown: "Do you want to create a follow-up to-do?"
      // FollowUpConfirmHandler

      // [THEN] Email Dialog is shown with Sales Quote "X" in Subject and Attachment description
      // EmailDialogMPH
    END;

    [Test]
    [HandlerFunctions(FollowUpConfirmHandler,EmailDialogMPH)]
    PROCEDURE EmailMiniSalesQuoteFromList@154();
    VAR
      SalesHeader@1000 : Record 36;
      MiniSalesQuotesList@1004 : TestPage 1326;
    BEGIN
      // [FEATURE] [Quote] [UI] [Email]
      // [SCENARIO 379041] Email Dialog is opened for the selected Sales Quote from the list when perform "Email" action
      Initialize;

      // [GIVEN] Several Sales Quotes.
      CreateSevMiniSalesQuotes(SalesHeader);
      // [GIVEN] Open Sales Quote List. Select Quote "X".
      MiniSalesQuotesList.OPENVIEW;
      MiniSalesQuotesList.GOTORECORD(SalesHeader);

      // [WHEN] Perform "Email" action.
      LibraryVariableStorage.Enqueue(QuoteTxt);
      LibraryVariableStorage.Enqueue(SalesHeader."No.");
      MiniSalesQuotesList.Email.INVOKE;

      // [THEN] Confirm is shown: "Do you want to create a follow-up to-do?"
      // FollowUpConfirmHandler

      // [THEN] Email Dialog is shown with Sales Quote "X" in Subject and Attachment description
      // EmailDialogMPH
    END;

    [Test]
    [HandlerFunctions(EmailDialogMPH)]
    PROCEDURE EmailMiniPostedSalesCrMemo@140();
    VAR
      SalesCrMemoHeader@1000 : Record 114;
      MiniPostedSalesCreditMemo@1004 : TestPage 1322;
    BEGIN
      // [FEATURE] [Credit Memo] [UI] [Email]
      // [SCENARIO 379564] Email Dialog is opened for the opened Posted Sales Credit Memo when perform "Email" action
      Initialize;

      // [GIVEN] Several Posted Sales Credit Memos.
      CreatePostSevMiniSalesCrMemos(SalesCrMemoHeader);
      // [GIVEN] Open Posted Sales Credit Memo "X".
      MiniPostedSalesCreditMemo.OPENVIEW;
      MiniPostedSalesCreditMemo.GOTORECORD(SalesCrMemoHeader);

      // [WHEN] Perform "Email" action.
      LibraryVariableStorage.Enqueue(CrMemoTxt);
      LibraryVariableStorage.Enqueue(SalesCrMemoHeader."No.");
      MiniPostedSalesCreditMemo.Email.INVOKE;

      // [THEN] Email Dialog is shown with Posted Sales Credit Memo "X" in Subject and Attachment description
      // EmailDialogMPH
    END;

    [Test]
    [HandlerFunctions(EmailDialogMPH)]
    PROCEDURE EmailMiniPostedSalesCrMemoFromList@100();
    VAR
      SalesCrMemoHeader@1000 : Record 114;
      MiniPostedSalesCreditMemos@1004 : TestPage 1321;
    BEGIN
      // [FEATURE] [Credit Memo] [UI] [Email]
      // [SCENARIO 379564] Email Dialog is opened for the selected Posted Sales Credit Memo from the list when perform "Email" action
      Initialize;

      // [GIVEN] Several Posted Sales Credit Memos.
      CreatePostSevMiniSalesCrMemos(SalesCrMemoHeader);
      // [GIVEN] Open Posted Sales Credit Memos list. Select Credit Memo "X".
      MiniPostedSalesCreditMemos.OPENVIEW;
      MiniPostedSalesCreditMemos.GOTORECORD(SalesCrMemoHeader);

      // [WHEN] Perform "Email" action.
      LibraryVariableStorage.Enqueue(CrMemoTxt);
      LibraryVariableStorage.Enqueue(SalesCrMemoHeader."No.");
      MiniPostedSalesCreditMemos.Email.INVOKE;

      // [THEN] Email Dialog is shown with Posted Sales Credit Memo "X" in Subject and Attachment description
      // EmailDialogMPH
    END;

    [Test]
    [HandlerFunctions(SalesCreditMemo_RPH)]
    PROCEDURE PrintMiniPostedSalesCrMemo@146();
    VAR
      SalesCrMemoHeader@1000 : Record 114;
      MiniPostedSalesCreditMemo@1004 : TestPage 1322;
    BEGIN
      // [FEATURE] [Credit Memo] [UI] [Print]
      // [SCENARIO 379577] REP207 "Sales - Credit Memo" is opened for the opened Posted Sales Credit Memo when perform "Print" action
      Initialize;

      // [GIVEN] Open Posted Sales Credit Memo
      SalesCrMemoHeader.GET(CreatePostMiniSalesCrMemo);
      MiniPostedSalesCreditMemo.OPENVIEW;
      MiniPostedSalesCreditMemo.GOTORECORD(SalesCrMemoHeader);

      // [WHEN] Perform "Print" action
      MiniPostedSalesCreditMemo.Print.INVOKE;

      // [THEN] REP207 "Sales - Credit Memo" is shown
      // EmailDialogMPH
    END;

    [Test]
    [HandlerFunctions(SalesCreditMemo_RPH)]
    PROCEDURE PrintMiniPostedSalesCrMemoFromList@145();
    VAR
      SalesCrMemoHeader@1000 : Record 114;
      MiniPostedSalesCreditMemos@1004 : TestPage 1321;
    BEGIN
      // [FEATURE] [Credit Memo] [UI] [Print]
      // [SCENARIO 379577] REP207 "Sales - Credit Memo" is opened for the selected Posted Sales Credit Memo from the list when perform "Print" action
      Initialize;

      // [GIVEN] Select Posted Sales Credit Memos from the list
      SalesCrMemoHeader.GET(CreatePostMiniSalesCrMemo);
      MiniPostedSalesCreditMemos.OPENVIEW;
      MiniPostedSalesCreditMemos.GOTORECORD(SalesCrMemoHeader);

      // [WHEN] Perform "Print" action
      MiniPostedSalesCreditMemos.Print.INVOKE;

      // [THEN] REP207 "Sales - Credit Memo" is shown
      // EmailDialogMPH
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      ConfigTemplateHeader@1000 : Record 8618;
      SalesReceivablesSetup@1001 : Record 311;
      UserSetup@1002 : Record 91;
      ResponsibilityCenter@1003 : Record 5714;
      MarketingSetup@1006 : Record 5079;
      CompanyInformation@1005 : Record 79;
      LibraryERMCountryData@1004 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      ConfigTemplateHeader.DELETEALL(TRUE);

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibrarySmallBusiness.CreateResponsabilityCenter(ResponsibilityCenter);

      CLEAR(UserSetup);
      UserSetup.DELETEALL;
      UserSetup."User ID" := USERID;
      UserSetup.VALIDATE("Sales Resp. Ctr. Filter",ResponsibilityCenter.Code);
      UserSetup.VALIDATE("Purchase Resp. Ctr. Filter",ResponsibilityCenter.Code);
      UserSetup.INSERT(TRUE);

      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Stockout Warning",FALSE);
      SalesReceivablesSetup.MODIFY(TRUE);

      MiniLinesInstructionMgt.DisableMessageForCurrentUser;

      // Required for full DK (not mini)
      MarketingSetup.GET;
      MarketingSetup.VALIDATE("Bus. Rel. Code for Customers",'');
      MarketingSetup.MODIFY(TRUE);

      // Required for CH
      CompanyInformation.GET;
      CompanyInformation."Bank Name" := LibraryUtility.GenerateGUID;
      CompanyInformation.MODIFY;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateCustomer@7(VAR Customer@1000 : Record 18);
    BEGIN
      LibrarySmallBusiness.CreateCustomer(Customer);
      Customer.VALIDATE(Name,LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Name),DATABASE::Customer));
      Customer.VALIDATE(Address,LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Address),DATABASE::Customer));
      Customer.VALIDATE("Address 2",LibraryUtility.GenerateRandomCode(Customer.FIELDNO("Address 2"),DATABASE::Customer));
      Customer.VALIDATE(City,LibraryUtility.GenerateRandomCode(Customer.FIELDNO(City),DATABASE::Customer));
      Customer.VALIDATE("Post Code",LibraryUtility.GenerateRandomCode(Customer.FIELDNO("Post Code"),DATABASE::Customer));
      Customer.MODIFY;
    END;

    LOCAL PROCEDURE CreateVendor@91(VAR Vendor@1000 : Record 23);
    BEGIN
      LibrarySmallBusiness.CreateVendor(Vendor);
      Vendor.VALIDATE(Name,LibraryUtility.GenerateRandomCode(Vendor.FIELDNO(Name),DATABASE::Vendor));
      Vendor.VALIDATE(Address,LibraryUtility.GenerateRandomCode(Vendor.FIELDNO(Address),DATABASE::Vendor));
      Vendor.VALIDATE("Address 2",LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("Address 2"),DATABASE::Vendor));
      Vendor.VALIDATE(City,LibraryUtility.GenerateRandomCode(Vendor.FIELDNO(City),DATABASE::Vendor));
      Vendor.VALIDATE("Post Code",LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("Post Code"),DATABASE::Vendor));
      Vendor.MODIFY;
    END;

    LOCAL PROCEDURE CreateTwoCustomersSameName@17(VAR Customer@1000 : Record 18);
    VAR
      Customer1@1001 : Record 18;
    BEGIN
      CreateCustomer(Customer1);
      CreateCustomer(Customer);
      Customer.VALIDATE(Name,Customer1.Name);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTwoVendorsSameName@108(VAR Vendor@1000 : Record 23);
    VAR
      Vendor1@1001 : Record 23;
    BEGIN
      CreateVendor(Vendor1);
      CreateVendor(Vendor);
      Vendor.VALIDATE(Name,Vendor1.Name);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSevMiniSalesQuotes@144(VAR SalesHeader@1002 : Record 36);
    VAR
      Customer@1000 : Record 18;
      Item@1001 : Record 27;
      i@1003 : Integer;
    BEGIN
      LibrarySmallBusiness.CreateCustomer(Customer);
      LibrarySmallBusiness.CreateItem(Item);
      FOR i := 1 TO LibraryRandom.RandIntInRange(2,5) DO
        LibrarySmallBusiness.CreateSalesQuoteHeaderWithLines(
          SalesHeader,Customer,Item,LibraryRandom.RandIntInRange(2,5),LibraryRandom.RandIntInRange(2,5));
    END;

    LOCAL PROCEDURE CreatePostMiniSalesCrMemo@149() : Code[20];
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      Customer@1000 : Record 18;
      Item@1001 : Record 27;
    BEGIN
      LibrarySmallBusiness.CreateCustomer(Customer);
      LibrarySmallBusiness.CreateItem(Item);
      LibrarySmallBusiness.CreateSalesCrMemoHeader(SalesHeader,Customer);
      LibrarySmallBusiness.CreateSalesLine(SalesLine,SalesHeader,Item,LibraryRandom.RandInt(10));
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreatePostSevMiniSalesCrMemos@155(VAR SalesCrMemoHeader@1001 : Record 114);
    VAR
      DocumentNo@1002 : Code[20];
      i@1000 : Integer;
    BEGIN
      FOR i := 1 TO LibraryRandom.RandIntInRange(2,5) DO
        DocumentNo := CreatePostMiniSalesCrMemo;
      SalesCrMemoHeader.GET(DocumentNo);
    END;

    LOCAL PROCEDURE VerifyCustomerAgainstTemplate@40(VAR Customer@1000 : Record 18;ConfigTemplateHeader@1001 : Record 8618);
    VAR
      ConfigTemplateLine@1002 : Record 8619;
      RecRef@1003 : RecordRef;
      FieldRef@1004 : FieldRef;
      FieldText@1005 : Variant;
    BEGIN
      RecRef.GETTABLE(Customer);
      ConfigTemplateLine.SETRANGE("Data Template Code",ConfigTemplateHeader.Code);
      IF ConfigTemplateLine.FINDSET THEN
        REPEAT
          FieldRef := RecRef.FIELD(ConfigTemplateLine."Field ID");
          FieldText := FieldRef.VALUE;
          Assert.AreEqual(ConfigTemplateLine."Default Value",FieldText,'Wrong value for field ' + FieldRef.NAME)
        UNTIL ConfigTemplateLine.NEXT = 0;
      RecRef.SETTABLE(Customer);
    END;

    LOCAL PROCEDURE VerifyVendorAgainstTemplate@101(VAR Vendor@1000 : Record 23;ConfigTemplateHeader@1001 : Record 8618);
    VAR
      ConfigTemplateLine@1002 : Record 8619;
      RecRef@1003 : RecordRef;
      FieldRef@1004 : FieldRef;
      FieldText@1005 : Variant;
    BEGIN
      RecRef.GETTABLE(Vendor);
      ConfigTemplateLine.SETRANGE("Data Template Code",ConfigTemplateHeader.Code);
      IF ConfigTemplateLine.FINDSET THEN
        REPEAT
          FieldRef := RecRef.FIELD(ConfigTemplateLine."Field ID");
          FieldText := FieldRef.VALUE;
          Assert.AreEqual(ConfigTemplateLine."Default Value",FieldText,'Wrong value for field ' + FieldRef.NAME)
        UNTIL ConfigTemplateLine.NEXT = 0;
      RecRef.SETTABLE(Vendor);
    END;

    LOCAL PROCEDURE VerifyMiniSalesInvoiceAgainstCustomer@44(MiniSalesInvoice@1000 : TestPage 1304;Customer@1001 : Record 18;NewCustomerName@1002 : Text[50]);
    BEGIN
      MiniSalesInvoice."Sell-to Customer Name".ASSERTEQUALS(NewCustomerName);
      MiniSalesInvoice."Sell-to Address".ASSERTEQUALS(Customer.Address);
      MiniSalesInvoice."Sell-to City".ASSERTEQUALS(Customer.City);
      MiniSalesInvoice."Sell-to Post Code".ASSERTEQUALS(Customer."Post Code");
    END;

    LOCAL PROCEDURE VerifyMiniSalesInvoiceAgainstBillToCustomer@23(MiniSalesInvoice@1000 : TestPage 1304;Customer@1001 : Record 18);
    BEGIN
      MiniSalesInvoice."Bill-to Name".ASSERTEQUALS(Customer.Name);
      MiniSalesInvoice."Bill-to Address".ASSERTEQUALS(Customer.Address);
      MiniSalesInvoice."Bill-to City".ASSERTEQUALS(Customer.City);
      MiniSalesInvoice."Bill-to Post Code".ASSERTEQUALS(Customer."Post Code");
    END;

    LOCAL PROCEDURE VerifySellToEmptyOnMiniSalesInvoice@10(MiniSalesInvoice@1000 : TestPage 1304);
    BEGIN
      MiniSalesInvoice."Sell-to Customer Name".ASSERTEQUALS('');
      MiniSalesInvoice."Sell-to Address".ASSERTEQUALS('');
      MiniSalesInvoice."Sell-to City".ASSERTEQUALS('');
      MiniSalesInvoice."Sell-to Post Code".ASSERTEQUALS('');
    END;

    LOCAL PROCEDURE VerifyMiniSalesQuoteAgainstCustomer@36(MiniSalesQuote@1000 : TestPage 1324;Customer@1001 : Record 18;NewCustomerName@1002 : Text[50]);
    BEGIN
      MiniSalesQuote."Sell-to Customer Name".ASSERTEQUALS(NewCustomerName);
      MiniSalesQuote."Sell-to Address".ASSERTEQUALS(Customer.Address);
      MiniSalesQuote."Sell-to City".ASSERTEQUALS(Customer.City);
      MiniSalesQuote."Sell-to Post Code".ASSERTEQUALS(Customer."Post Code");
    END;

    LOCAL PROCEDURE VerifyMiniSalesQuoteAgainstBillToCustomer@34(MiniSalesQuote@1002 : TestPage 1324;Customer@1001 : Record 18);
    BEGIN
      MiniSalesQuote."Bill-to Name".ASSERTEQUALS(Customer.Name);
      MiniSalesQuote."Bill-to Address".ASSERTEQUALS(Customer.Address);
      MiniSalesQuote."Bill-to City".ASSERTEQUALS(Customer.City);
      MiniSalesQuote."Bill-to Post Code".ASSERTEQUALS(Customer."Post Code");
    END;

    LOCAL PROCEDURE VerifySellToEmptyOnMiniSalesQuote@131(MiniSalesQuote@1001 : TestPage 1324);
    BEGIN
      MiniSalesQuote."Sell-to Customer Name".ASSERTEQUALS('');
      MiniSalesQuote."Sell-to Address".ASSERTEQUALS('');
      MiniSalesQuote."Sell-to City".ASSERTEQUALS('');
      MiniSalesQuote."Sell-to Post Code".ASSERTEQUALS('');
    END;

    LOCAL PROCEDURE VerifyMiniPurchaseInvoiceAgainstVendor@95(MiniPurchaseInvoice@1000 : TestPage 1354;Vendor@1001 : Record 23;NewVendorName@1002 : Text[50]);
    BEGIN
      MiniPurchaseInvoice."Buy-from Vendor Name".ASSERTEQUALS(NewVendorName);
      MiniPurchaseInvoice."Buy-from Address".ASSERTEQUALS(Vendor.Address);
      MiniPurchaseInvoice."Buy-from City".ASSERTEQUALS(Vendor.City);
      MiniPurchaseInvoice."Buy-from Post Code".ASSERTEQUALS(Vendor."Post Code");
    END;

    LOCAL PROCEDURE VerifyMiniPurchaseInvoiceAgainstPayToVendor@93(MiniPurchaseInvoice@1000 : TestPage 1354;Vendor@1001 : Record 23);
    BEGIN
      MiniPurchaseInvoice."Pay-to Name".ASSERTEQUALS(Vendor.Name);
      MiniPurchaseInvoice."Pay-to Address".ASSERTEQUALS(Vendor.Address);
      MiniPurchaseInvoice."Pay-to City".ASSERTEQUALS(Vendor.City);
      MiniPurchaseInvoice."Pay-to Post Code".ASSERTEQUALS(Vendor."Post Code");
    END;

    LOCAL PROCEDURE VerifyUnitCostOnItemCard@22(Item@1000 : Record 27;Editable@1002 : Boolean);
    VAR
      MiniItemCard@1001 : TestPage 1302;
    BEGIN
      MiniItemCard.OPENEDIT;
      MiniItemCard.GOTORECORD(Item);
      Assert.IsTrue(MiniItemCard."Unit Cost".EDITABLE = Editable,
        'Editable property for Unit cost field should be: ' + FORMAT(Editable));
    END;

    LOCAL PROCEDURE VerifyInvoiceLinesFromStandardCodes@38(SalesHeader@1000 : Record 36;StandardSalesCode@1001 : Record 170);
    VAR
      SalesLine@1002 : Record 37;
      StandardSalesLine@1003 : Record 171;
    BEGIN
      StandardSalesLine.SETRANGE("Standard Sales Code",StandardSalesCode.Code);
      IF StandardSalesLine.FINDSET THEN
        REPEAT
          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
          SalesLine.SETRANGE("Document No.",SalesHeader."No.");
          SalesLine.SETRANGE("No.",StandardSalesLine."No.");
          SalesLine.SETRANGE(Description,StandardSalesLine.Description);
          SalesLine.SETRANGE(Quantity,StandardSalesLine.Quantity);
          SalesLine.SETRANGE(Type,StandardSalesLine.Type);

          Assert.IsTrue(SalesLine.FINDFIRST,'No lines with filter ' + SalesLine.GETFILTERS);
        UNTIL StandardSalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPurchaseInvoiceLinesFromStandardCodes@110(PurchaseHeader@1000 : Record 38;StandardPurchaseCode@1001 : Record 173);
    VAR
      PurchaseLine@1002 : Record 39;
      StandardPurchaseLine@1003 : Record 174;
    BEGIN
      StandardPurchaseLine.SETRANGE("Standard Purchase Code",StandardPurchaseCode.Code);
      IF StandardPurchaseLine.FINDSET THEN
        REPEAT
          PurchaseLine.RESET;
          PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
          PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
          PurchaseLine.SETRANGE("No.",StandardPurchaseLine."No.");
          PurchaseLine.SETRANGE(Description,StandardPurchaseLine.Description);
          PurchaseLine.SETRANGE(Quantity,StandardPurchaseLine.Quantity);
          PurchaseLine.SETRANGE(Type,StandardPurchaseLine.Type);

          Assert.IsTrue(PurchaseLine.FINDFIRST,'No lines with filter ' + PurchaseLine.GETFILTERS);
        UNTIL StandardPurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyStandardCodes@52(StandardSalesCode@1001 : Record 170);
    VAR
      StandardSalesLine@1000 : Record 171;
    BEGIN
      StandardSalesLine.SETRANGE("Standard Sales Code",StandardSalesCode.Code);
      IF StandardSalesLine.FINDSET THEN
        REPEAT
          IF StandardSalesLine."No." <> '' THEN
            Assert.IsTrue(StandardSalesLine.Type = StandardSalesLine.Type::Item,'Type should be ' +
              FORMAT(StandardSalesLine.Type::Item))
          ELSE
            IF StandardSalesLine.Description <> '' THEN
              Assert.IsTrue(StandardSalesLine.Type = StandardSalesLine.Type::" ",'Type should be Empty');
        UNTIL StandardSalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyStandardPurchaseCodes@111(StandardPurchaseCode@1001 : Record 173);
    VAR
      StandardPurchaseLine@1000 : Record 174;
    BEGIN
      StandardPurchaseLine.SETRANGE("Standard Purchase Code",StandardPurchaseCode.Code);
      IF StandardPurchaseLine.FINDSET THEN
        REPEAT
          IF StandardPurchaseLine."No." <> '' THEN
            Assert.IsTrue(StandardPurchaseLine.Type = StandardPurchaseLine.Type::Item,'Type should be ' +
              FORMAT(StandardPurchaseLine.Type::Item))
          ELSE
            IF StandardPurchaseLine.Description <> '' THEN
              Assert.IsTrue(StandardPurchaseLine.Type = StandardPurchaseLine.Type::" ",'Type should be Empty');
        UNTIL StandardPurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifySalesDocumentsMatch@84(SalesHeader1@1000 : Record 36;SalesHeader2@1001 : Record 36);
    VAR
      SalesLine1@1004 : Record 37;
      SalesLine2@1005 : Record 37;
      RecordRef1@1003 : RecordRef;
      RecordRef2@1002 : RecordRef;
      SalesHeaderExcludedFieldRef@1007 : ARRAY [7] OF FieldRef;
      SalesLineExcludedFieldRef@1008 : ARRAY [2] OF FieldRef;
      I@1006 : Integer;
    BEGIN
      RecordRef1.GETTABLE(SalesHeader1);
      RecordRef2.GETTABLE(SalesHeader2);

      SalesHeaderExcludedFieldRef[1] := RecordRef1.FIELD(SalesHeader1.FIELDNO("Document Type"));
      SalesHeaderExcludedFieldRef[2] := RecordRef1.FIELD(SalesHeader1.FIELDNO("Quote No."));
      SalesHeaderExcludedFieldRef[3] := RecordRef1.FIELD(SalesHeader1.FIELDNO("No."));
      SalesHeaderExcludedFieldRef[4] := RecordRef1.FIELD(SalesHeader1.FIELDNO("Posting Date"));
      SalesHeaderExcludedFieldRef[5] := RecordRef1.FIELD(SalesHeader1.FIELDNO("Posting Description"));
      SalesHeaderExcludedFieldRef[6] := RecordRef1.FIELD(SalesHeader1.FIELDNO("No. Series"));
      SalesHeaderExcludedFieldRef[7] := RecordRef1.FIELD(SalesHeader1.FIELDNO("Time of Removal"));


      VerifyRecordRefsMatch(RecordRef1,RecordRef2,SalesHeaderExcludedFieldRef);

      SalesLine1.SETRANGE("Document Type",SalesHeader1."Document Type");
      SalesLine1.SETRANGE("Document No.",SalesHeader1."No.");
      SalesLine2.SETRANGE("Document Type",SalesHeader2."Document Type");
      SalesLine2.SETRANGE("Document No.",SalesHeader2."No.");
      Assert.AreEqual(SalesLine1.COUNT,SalesLine2.COUNT,'Both documents should have same number of lines');

      CLEAR(RecordRef1);
      RecordRef1.OPEN(DATABASE::"Sales Line");
      SalesLineExcludedFieldRef[1] := RecordRef1.FIELD(SalesLine1.FIELDNO("Document Type"));
      SalesLineExcludedFieldRef[2] := RecordRef1.FIELD(SalesLine1.FIELDNO("Document No."));

      FOR I := 1 TO SalesLine1.COUNT DO BEGIN
        SalesLine1.NEXT;
        SalesLine2.NEXT;
        RecordRef1.GETTABLE(SalesLine1);
        RecordRef2.GETTABLE(SalesLine2);
        VerifyRecordRefsMatch(RecordRef1,RecordRef2,SalesLineExcludedFieldRef);
      END;
    END;

    LOCAL PROCEDURE VerifySortedCustomerList@127(VAR MiniCustomerList@1000 : TestPage 1301);
    VAR
      MiniCustomerCard@1004 : TestPage 1300;
      CurrentCustomerNo@1005 : Code[20];
    BEGIN
      MiniCustomerList.FIRST;
      REPEAT
        CurrentCustomerNo := MiniCustomerList."No.".VALUE;
        MiniCustomerCard.TRAP;
        MiniCustomerList.VIEW.INVOKE;
        Assert.AreEqual(MiniCustomerCard."No.".VALUE,CurrentCustomerNo,'Unexpected customer opened.');
      UNTIL NOT MiniCustomerList.NEXT;
    END;

    LOCAL PROCEDURE VerifyPurchaseDocumentsMatch@88(PurchaseHeader1@1000 : Record 38;PurchaseHeader2@1001 : Record 38);
    VAR
      PurchaseLine1@1004 : Record 39;
      PurchaseLine2@1005 : Record 39;
      RecordRef1@1003 : RecordRef;
      RecordRef2@1002 : RecordRef;
      PurchaseHeaderExcludedFieldRef@1007 : ARRAY [6] OF FieldRef;
      PurchaseLineExcludedFieldRef@1008 : ARRAY [2] OF FieldRef;
      I@1006 : Integer;
    BEGIN
      RecordRef1.GETTABLE(PurchaseHeader1);
      RecordRef2.GETTABLE(PurchaseHeader2);

      PurchaseHeaderExcludedFieldRef[1] := RecordRef1.FIELD(PurchaseHeader1.FIELDNO("Document Type"));
      PurchaseHeaderExcludedFieldRef[2] := RecordRef1.FIELD(PurchaseHeader1.FIELDNO("Quote No."));
      PurchaseHeaderExcludedFieldRef[3] := RecordRef1.FIELD(PurchaseHeader1.FIELDNO("No."));
      PurchaseHeaderExcludedFieldRef[4] := RecordRef1.FIELD(PurchaseHeader1.FIELDNO("Posting Date"));
      PurchaseHeaderExcludedFieldRef[5] := RecordRef1.FIELD(PurchaseHeader1.FIELDNO("Posting Description"));
      PurchaseHeaderExcludedFieldRef[6] := RecordRef1.FIELD(PurchaseHeader1.FIELDNO("No. Series"));

      VerifyRecordRefsMatch(RecordRef1,RecordRef2,PurchaseHeaderExcludedFieldRef);

      PurchaseLine1.SETRANGE("Document Type",PurchaseHeader1."Document Type");
      PurchaseLine1.SETRANGE("Document No.",PurchaseHeader1."No.");
      PurchaseLine2.SETRANGE("Document Type",PurchaseHeader2."Document Type");
      PurchaseLine2.SETRANGE("Document No.",PurchaseHeader2."No.");
      Assert.AreEqual(PurchaseLine1.COUNT,PurchaseLine2.COUNT,'Both documents should have same number of lines');

      CLEAR(RecordRef1);
      RecordRef1.OPEN(DATABASE::"Purchase Line");
      PurchaseLineExcludedFieldRef[1] := RecordRef1.FIELD(PurchaseLine1.FIELDNO("Document Type"));
      PurchaseLineExcludedFieldRef[2] := RecordRef1.FIELD(PurchaseLine1.FIELDNO("Document No."));

      FOR I := 1 TO PurchaseLine1.COUNT DO BEGIN
        PurchaseLine1.NEXT;
        PurchaseLine2.NEXT;
        RecordRef1.GETTABLE(PurchaseLine1);
        RecordRef2.GETTABLE(PurchaseLine2);
        VerifyRecordRefsMatch(RecordRef1,RecordRef2,PurchaseLineExcludedFieldRef);
      END;
    END;

    LOCAL PROCEDURE ExcludeFromComparisment@94(FieldRef@1000 : FieldRef;FieldRefArrayToExclude@1001 : ARRAY [100] OF FieldRef) : Boolean;
    VAR
      I@1002 : Integer;
    BEGIN
      FOR I := 1 TO ARRAYLEN(FieldRefArrayToExclude) DO BEGIN
        IF FieldRef.NAME = FieldRefArrayToExclude[I].NAME THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE VerifyRecordRefsMatch@73(RecordRef1@1004 : RecordRef;RecordRef2@1003 : RecordRef;FieldRefArrayToExclude@1005 : ARRAY [100] OF FieldRef);
    VAR
      FieldRef1@1002 : FieldRef;
      FieldRef2@1001 : FieldRef;
      I@1000 : Integer;
    BEGIN
      FOR I := 1 TO RecordRef1.FIELDCOUNT DO BEGIN
        FieldRef1 := RecordRef1.FIELDINDEX(I);
        FieldRef2 := RecordRef2.FIELDINDEX(I);

        IF NOT ExcludeFromComparisment(FieldRef1,FieldRefArrayToExclude) AND Assert.IsDataTypeSupported(FieldRef1.VALUE) THEN
          Assert.AreEqual(FieldRef1.VALUE,FieldRef2.VALUE,STRSUBSTNO('Field values for field %1 do not match',FieldRef1.CAPTION));
      END;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@2(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      VarReply@1002 : Variant;
    BEGIN
      IF STRPOS(Question,LeaveDocWithoutPostingTxt) > 0 THEN BEGIN
        Reply := TRUE;
        EXIT;
      END;
      LibraryVariableStorage.Dequeue(VarReply);
      Reply := VarReply;
    END;

    LOCAL PROCEDURE CreateStandardCodeWithItemAndDescr@28(StandardSalesCode@1002 : Record 170;Item@1000 : Record 27);
    VAR
      StandardSalesLine@1003 : Record 171;
      MiniStandardSalesCodeCard@1001 : TestPage 1311;
    BEGIN
      // Create Standard Code lines with one item and one description line
      MiniStandardSalesCodeCard.OPENEDIT;
      MiniStandardSalesCodeCard.GOTORECORD(StandardSalesCode);
      MiniStandardSalesCodeCard.StdSalesLines.NEW;
      MiniStandardSalesCodeCard.StdSalesLines.Description.SETVALUE(
        LibraryUtility.GenerateRandomCode(StandardSalesLine.FIELDNO(Description),DATABASE::"Standard Sales Line"));
      MiniStandardSalesCodeCard.StdSalesLines.NEW;
      MiniStandardSalesCodeCard.StdSalesLines."No.".SETVALUE(Item."No.");
      MiniStandardSalesCodeCard.StdSalesLines.Quantity.SETVALUE(LibraryRandom.RandDec(1000,2));
    END;

    LOCAL PROCEDURE CreatePurchaseStandardCodeWithItemAndDescr@109(StandardPurchaseCode@1002 : Record 173;Item@1000 : Record 27);
    VAR
      StandardPurchaseLine@1003 : Record 174;
      MiniStdPurchaseCodeCard@1001 : TestPage 1361;
    BEGIN
      // Create Standard Code lines with one item and one description line
      MiniStdPurchaseCodeCard.OPENEDIT;
      MiniStdPurchaseCodeCard.GOTORECORD(StandardPurchaseCode);
      MiniStdPurchaseCodeCard.StdPurchaseLines.NEW;
      MiniStdPurchaseCodeCard.StdPurchaseLines.Description.SETVALUE(
        LibraryUtility.GenerateRandomCode(StandardPurchaseLine.FIELDNO(Description),DATABASE::"Standard Purchase Line"));
      MiniStdPurchaseCodeCard.StdPurchaseLines.NEW;
      MiniStdPurchaseCodeCard.StdPurchaseLines."No.".SETVALUE(Item."No.");
      MiniStdPurchaseCodeCard.StdPurchaseLines.Quantity.SETVALUE(LibraryRandom.RandDec(1000,2));
    END;

    LOCAL PROCEDURE CreateSelectCustomerSetup@136(VAR NameStart@1000 : Text[10];VAR NameMiddle@1001 : Text[10];VAR NameEnd@1002 : Text[10];VAR Customer@1003 : Record 18);
    VAR
      Customer2@1005 : Record 18;
      NewCustomer1Name@1004 : Text[50];
      NewCustomer2Name@1006 : Text[50];
    BEGIN
      CreateCustomer(Customer);
      CreateCustomer(Customer2);

      // Make beginning of the names the same
      NameStart := 'XXX Start ';

      // Make middle of the names match
      NameMiddle := 'YYY Middle';

      // Make endign of the names match
      NameEnd := ' ZZZ End';

      NewCustomer1Name := NameStart + '1' + NameMiddle + NameEnd;
      NewCustomer2Name := NameStart + '2' + NameMiddle + NameEnd;

      Customer.VALIDATE(Name,NewCustomer1Name);
      Customer2.VALIDATE(Name,NewCustomer2Name);
      Customer.MODIFY(TRUE);
      Customer2.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSelectVendorSetup@137(VAR NameStart@1000 : Text[10];VAR NameMiddle@1001 : Text[10];VAR NameEnd@1002 : Text[10];VAR Vendor@1003 : Record 23);
    VAR
      Vendor2@1005 : Record 23;
      NewVendor1Name@1004 : Text[50];
      NewVendor2Name@1006 : Text[50];
    BEGIN
      CreateVendor(Vendor);
      CreateVendor(Vendor2);

      // Make beginning of the names the same
      NameStart := 'XXX Start';

      // Make middle of the names match
      NameMiddle := 'YYY Middle';

      // Make ending of the names match
      NameEnd := 'ZZZ End';

      NewVendor1Name := NameStart + '1' + NameMiddle + NameEnd;
      NewVendor2Name := NameStart + '2' + NameMiddle + NameEnd;

      Vendor.VALIDATE(Name,NewVendor1Name);
      Vendor2.VALIDATE(Name,NewVendor2Name);
      Vendor.MODIFY(TRUE);
      Vendor2.MODIFY(TRUE);
    END;

    [ModalPageHandler]
    PROCEDURE CustomerListPageHandler@35(VAR CustomerList@1000 : TestPage 1301);
    VAR
      CustomerName@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(CustomerName);
      CustomerList.FILTER.SETFILTER(Name,CustomerName);
      CustomerList.LAST;
      CustomerList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE VendorListPageHandler@117(VAR MiniVendorList@1000 : TestPage 1331);
    VAR
      VendorName@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(VendorName);
      MiniVendorList.FILTER.SETFILTER(Name,VendorName);
      MiniVendorList.LAST;
      MiniVendorList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CustomerListCancelPageHandler@9(VAR CustomerList@1000 : TestPage 1301);
    BEGIN
      CustomerList.Cancel.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE VendorListCancelPageHandler@120(VAR MiniVendorList@1000 : TestPage 1331);
    BEGIN
      MiniVendorList.Cancel.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE MiniCustomerCardPageHandler@11(VAR MiniCustomerCard@1000 : TestPage 1300);
    VAR
      Customer@1002 : Record 18;
      Customer2@1004 : Record 18;
      PostCode@1003 : Record 225;
      CustomerName@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(CustomerName);
      MiniCustomerCard.Name.ASSERTEQUALS(CustomerName);
      MiniCustomerCard.Address.SETVALUE(LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Address),DATABASE::Customer));
      MiniCustomerCard."Address 2".SETVALUE(LibraryUtility.GenerateRandomCode(Customer.FIELDNO("Address 2"),DATABASE::Customer));
      LibraryERM.CreatePostCode(PostCode);
      MiniCustomerCard.City.SETVALUE(PostCode.City);
      MiniCustomerCard."Post Code".SETVALUE(PostCode.Code);
      MiniCustomerCard."Gen. Bus. Posting Group".SETVALUE(LibrarySmallBusiness.FindGenBusPostingGroup);
      MiniCustomerCard."Customer Posting Group".SETVALUE(LibrarySales.FindCustomerPostingGroup);
      LibraryVariableStorage.Enqueue(MiniCustomerCard."No.".VALUE);
      MiniCustomerCard.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE MiniCustomerCardTemplatePageHandler@30(VAR MiniCustomerCard@1000 : TestPage 1300);
    VAR
      Customer@1002 : Record 18;
      PostCode@1003 : Record 225;
    BEGIN
      // Set other fields on customer card
      MiniCustomerCard.Address.SETVALUE(LibraryUtility.GenerateRandomCode(Customer.FIELDNO(Address),DATABASE::Customer));
      MiniCustomerCard."Address 2".SETVALUE(LibraryUtility.GenerateRandomCode(Customer.FIELDNO("Address 2"),DATABASE::Customer));
      LibraryERM.CreatePostCode(PostCode);
      MiniCustomerCard.City.SETVALUE(PostCode.City);
      MiniCustomerCard."Post Code".SETVALUE(PostCode.Code);

      LibraryVariableStorage.Enqueue(MiniCustomerCard."No.".VALUE);
      MiniCustomerCard.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE MiniCustomerCardCancelEditPageHandler@14(VAR MiniCustomerCard@1000 : TestPage 1300);
    VAR
      CustomerName@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(CustomerName);
      MiniCustomerCard.Name.ASSERTEQUALS(CustomerName);
    END;

    [ModalPageHandler]
    PROCEDURE MiniVendorCardTemplatePageHandler@103(VAR MiniVendorCard@1000 : TestPage 1330);
    VAR
      Vendor@1002 : Record 23;
      PostCode@1003 : Record 225;
    BEGIN
      // Set other fields on Vendor card
      MiniVendorCard.Address.SETVALUE(LibraryUtility.GenerateRandomCode(Vendor.FIELDNO(Address),DATABASE::Vendor));
      MiniVendorCard."Address 2".SETVALUE(LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("Address 2"),DATABASE::Vendor));
      LibraryERM.CreatePostCode(PostCode);
      MiniVendorCard.City.SETVALUE(PostCode.City);
      MiniVendorCard."Post Code".SETVALUE(PostCode.Code);

      LibraryVariableStorage.Enqueue(MiniVendorCard."No.".VALUE);
      MiniVendorCard.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseInvoicePageHandler@74(VAR MiniPurchaseInvoicePage@1000 : TestPage 1354);
    VAR
      VendorName@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(VendorName);
      MiniPurchaseInvoicePage."Buy-from Vendor Name".ASSERTEQUALS(VendorName);
      MiniPurchaseInvoicePage.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseCreditMemoPageHandler@80(VAR MiniPurchaseCreditMemoPage@1000 : TestPage 1369);
    VAR
      VendorName@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(VendorName);
      MiniPurchaseCreditMemoPage."Buy-from Vendor Name".ASSERTEQUALS(VendorName);
      MiniPurchaseCreditMemoPage.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ConfigTemplateListPageHandler@72(VAR MiniConfigTemplates@1000 : TestPage 1340);
    VAR
      TemplateName@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TemplateName);
      MiniConfigTemplates.FILTER.SETFILTER(Description,TemplateName);
      MiniConfigTemplates.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ConfigTemplateListCancelPageHandler@79(VAR MiniConfigTemplates@1000 : TestPage 1340);
    BEGIN
      MiniConfigTemplates.Cancel.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ChangeBuyFromPayToVendorConfirmHandler@114(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      VarReply@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(VarReply);
      Reply := VarReply;
    END;

    [ModalPageHandler]
    PROCEDURE MiniStandardSalesCodeCardPageHandler@49(VAR MiniStdCustomerSalesCodes@1001 : TestPage 1314);
    BEGIN
      MiniStdCustomerSalesCodes.FIRST;
      MiniStdCustomerSalesCodes.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE MiniStandardPurchaseCodeCardPageHandler@112(VAR MiniStandardVendorPurchase@1001 : TestPage 1364);
    BEGIN
      MiniStandardVendorPurchase.FIRST;
      MiniStandardVendorPurchase.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CurrencyHandler@50(VAR ChangeExchRate@1000 : TestPage 511);
    BEGIN
      ChangeExchRate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE MiniItemListPageHandler@31(VAR MiniItemList@1000 : TestPage 1303);
    BEGIN
      MiniItemList.CLOSE;
    END;

    [ModalPageHandler]
    PROCEDURE MiniCustomerPageHandler@138(VAR MiniCustomerList@1000 : TestPage 1301);
    VAR
      Cust@1001 : Record 18;
      CustNo@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(CustNo);
      Cust.GET(CustNo);
      MiniCustomerList.GOTORECORD(Cust);
      MiniCustomerList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE MiniVendorPageHandler@161(VAR MiniVendorList@1000 : TestPage 1331);
    VAR
      Vendor@1001 : Record 23;
      VendNo@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(VendNo);
      Vendor.GET(VendNo);
      MiniVendorList.GOTORECORD(Vendor);
      MiniVendorList.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE QuoteReportRequestPageHandler@175(VAR SalesQuote@1001 : TestRequestPage 204);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE CopyDocRequestPageHandler@68(VAR CopySalesDocument@1000 : TestRequestPage 292);
    VAR
      ValueFromQueue@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ValueFromQueue); // Doc type
      CopySalesDocument.DocumentType.SETVALUE(ValueFromQueue);

      LibraryVariableStorage.Dequeue(ValueFromQueue); // Doc no
      CopySalesDocument.DocumentNo.SETVALUE(ValueFromQueue);

      LibraryVariableStorage.Dequeue(ValueFromQueue); // Sell-to no
      CopySalesDocument.SellToCustNo.SETVALUE(ValueFromQueue);

      LibraryVariableStorage.Dequeue(ValueFromQueue); // Sell-to name
      CopySalesDocument.SellToCustName.SETVALUE(ValueFromQueue);

      LibraryVariableStorage.Dequeue(ValueFromQueue); // Include header
      CopySalesDocument.IncludeHeader_Options.SETVALUE(ValueFromQueue);

      LibraryVariableStorage.Dequeue(ValueFromQueue); // Recalc lines
      CopySalesDocument.RecalculateLines.SETVALUE(ValueFromQueue);

      CopySalesDocument.OK.INVOKE;
    END;

    LOCAL PROCEDURE AddRandomNumberOfLinesToSalesHeader@97(SalesHeader@1000 : Record 36;Item@1001 : Record 27);
    VAR
      SalesLine@1003 : Record 37;
      I@1002 : Integer;
      ItemQuantity@1004 : Integer;
      NumberOfLines@1005 : Integer;
    BEGIN
      NumberOfLines := LibraryRandom.RandIntInRange(1,30);
      ItemQuantity := LibraryRandom.RandIntInRange(1,30);

      FOR I := 1 TO NumberOfLines DO
        LibrarySmallBusiness.CreateSalesLine(SalesLine,SalesHeader,Item,ItemQuantity);
    END;

    [StrMenuHandler]
    [HandlerFunctions(CreatePurchaseInvoiceHandler)]
    PROCEDURE CreatePurchaseInvoiceHandler@87(Options@1000 : Text;VAR Choice@1001 : Integer;InstructionText@1002 : Text);
    VAR
      ChoiceToSelect@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ChoiceToSelect);
      Choice := ChoiceToSelect;
    END;

    [ModalPageHandler]
    PROCEDURE SelectVendorHandler@90(VAR MiniVendorList@1000 : TestPage 1331);
    VAR
      VendorNo@1001 : Variant;
      CancelVariant@1002 : Variant;
      Cancel@1003 : Boolean;
    BEGIN
      LibraryVariableStorage.Dequeue(VendorNo);
      MiniVendorList.FILTER.SETFILTER("No.",VendorNo);
      LibraryVariableStorage.Dequeue(CancelVariant);
      Cancel := CancelVariant;

      IF Cancel THEN
        MiniVendorList.Cancel.INVOKE
      ELSE
        MiniVendorList.OK.INVOKE;
    END;

    LOCAL PROCEDURE VerifyPuchaseLinesCreatedFromSalesLines@195(PurchaseHeader@1000 : Record 38;VAR SalesLine@1001 : Record 37);
    VAR
      PurchaseLine@1002 : Record 39;
    BEGIN
      PurchaseLine.SETFILTER("Document Type",'=%1',PurchaseHeader."Document Type");
      PurchaseLine.SETFILTER("Document No.",PurchaseHeader."No.");

      Assert.AreEqual(SalesLine.COUNT,PurchaseLine.COUNT,'Number of records is not the same, not all lines were transfered');
      IF SalesLine.COUNT > 0 THEN BEGIN
        PurchaseLine.FINDSET;
        SalesLine.FINDSET;
        REPEAT
          CASE SalesLine.Type OF
            SalesLine.Type::" ":
              Assert.AreEqual(PurchaseLine.Type,PurchaseLine.Type::" ",'Type does not match');
            SalesLine.Type::Item:
              Assert.AreEqual(PurchaseLine.Type,PurchaseLine.Type::Item,'Type does not match');
            ELSE
              Assert.Fail('Unsupported case found');
          END;

          Assert.AreEqual(PurchaseLine."No.",SalesLine."No.",'No. does not match');
          Assert.AreEqual(PurchaseLine.Description,SalesLine.Description,'Description does not match');
          Assert.AreEqual(PurchaseLine.Quantity,SalesLine.Quantity,'Quantity does not match');
          Assert.AreEqual(PurchaseLine."Unit of Measure Code",SalesLine."Unit of Measure Code",'UOM Code does not match');
        UNTIL (PurchaseLine.NEXT = 0) AND (SalesLine.NEXT = 0);
      END;
    END;

    LOCAL PROCEDURE VerifyPostedPuchaseLinesCreatedFromSalesLines@104(PurchInvHeader@1000 : Record 122;VAR SalesLine@1001 : Record 37);
    VAR
      PurchInvLine@1002 : Record 123;
    BEGIN
      PurchInvLine.SETFILTER("Document No.",PurchInvHeader."No.");

      Assert.AreEqual(SalesLine.COUNT,PurchInvLine.COUNT,'Number of records is not the same, not all lines were transfered');
      IF SalesLine.COUNT > 0 THEN BEGIN
        PurchInvLine.FINDSET;
        REPEAT
          CASE SalesLine.Type OF
            SalesLine.Type::" ":
              Assert.AreEqual(PurchInvLine.Type,PurchInvLine.Type::" ",'Type does not match');
            SalesLine.Type::Item:
              Assert.AreEqual(PurchInvLine.Type,PurchInvLine.Type::Item,'Type does not match');
            ELSE
              Assert.Fail('Unsupported case found');
          END;

          Assert.AreEqual(PurchInvLine."No.",SalesLine."No.",'No. does not match');
          Assert.AreEqual(PurchInvLine.Description,SalesLine.Description,'Description does not match');
          Assert.AreEqual(PurchInvLine.Quantity,SalesLine.Quantity,'Quantity does not match');
          Assert.AreEqual(PurchInvLine."Unit of Measure Code",SalesLine."Unit of Measure Code",'UOM Code does not match');
          SalesLine.NEXT;
        UNTIL PurchInvLine.NEXT = 0;
      END;
    END;

    [RequestPageHandler]
    PROCEDURE PurchaseCopyDocRequestPageHandler@128(VAR CopyPurchaseDocument@1000 : TestRequestPage 492);
    VAR
      ValueFromQueue@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ValueFromQueue); // Doc type
      CopyPurchaseDocument.DocumentType.SETVALUE(ValueFromQueue);

      LibraryVariableStorage.Dequeue(ValueFromQueue); // Doc no
      CopyPurchaseDocument.DocumentNo.SETVALUE(ValueFromQueue);

      LibraryVariableStorage.Dequeue(ValueFromQueue); // Sell-to no
      CopyPurchaseDocument.BuyfromVendorNo.SETVALUE(ValueFromQueue);

      LibraryVariableStorage.Dequeue(ValueFromQueue); // Sell-to name
      CopyPurchaseDocument.BuyfromVendorName.SETVALUE(ValueFromQueue);

      LibraryVariableStorage.Dequeue(ValueFromQueue); // Include header
      CopyPurchaseDocument.IncludeHeader_Options.SETVALUE(ValueFromQueue);

      LibraryVariableStorage.Dequeue(ValueFromQueue); // Recalc lines
      CopyPurchaseDocument.RecalculateLines.SETVALUE(ValueFromQueue);

      CopyPurchaseDocument.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE VerifyNumberOfCustomersAndClosePage@124(VAR MiniCustomerList@1000 : TestPage 1301);
    VAR
      ExpectedNoOfUsers@1001 : Variant;
      NumberOfRows@1002 : Integer;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedNoOfUsers);

      NumberOfRows := 0;

      IF MiniCustomerList.FIRST THEN BEGIN
        NumberOfRows := 1;
        WHILE MiniCustomerList.NEXT DO
          NumberOfRows += 1;
      END;

      Assert.AreEqual(ExpectedNoOfUsers,NumberOfRows,'Wrong number of users on select customer page');

      MiniCustomerList.Cancel.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE VerifyNumberOfVendorsAndClosePage@115(VAR MiniVendorList@1000 : TestPage 1331);
    VAR
      ExpectedNoOfUsers@1001 : Variant;
      NumberOfRows@1002 : Integer;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedNoOfUsers);

      NumberOfRows := 0;

      IF MiniVendorList.FIRST THEN BEGIN
        NumberOfRows := 1;
        WHILE MiniVendorList.NEXT DO
          NumberOfRows += 1;
      END;

      Assert.AreEqual(ExpectedNoOfUsers,NumberOfRows,'Wrong number of users on select vendor page');

      MiniVendorList.Cancel.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CustCheckCreditLimitModalPageHandler@143(VAR CheckCreditLimit@1000 : TestPage 343);
    BEGIN
      CheckCreditLimit.Yes.INVOKE;
    END;

    LOCAL PROCEDURE SetCreditWarning@199(VAR OldCreditWarning@1000 : Option;NewCreditWarning@1001 : Option);
    VAR
      SalesReceivablesSetup@1002 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      IF NewCreditWarning <> SalesReceivablesSetup."Credit Warnings" THEN BEGIN
        OldCreditWarning := SalesReceivablesSetup."Credit Warnings";
        SalesReceivablesSetup."Credit Warnings" := NewCreditWarning;
        SalesReceivablesSetup.MODIFY;
      END;
    END;

    [ConfirmHandler]
    PROCEDURE FollowUpConfirmHandler@162(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Assert.ExpectedMessage(FollowUpQst,Question);
      Reply := FALSE;
    END;

    [ModalPageHandler]
    PROCEDURE EmailDialogMPH@169(VAR EMailDialog@1000 : TestPage 9700);
    VAR
      ExpectedText@1001 : Text;
    BEGIN
      ExpectedText := LibraryVariableStorage.DequeueText; // Document Type text
      ExpectedText += ' ' + LibraryVariableStorage.DequeueText; // Document No. text
      Assert.IsTrue(STRPOS(EMailDialog.Subject.VALUE,ExpectedText) <> 0,'');
      Assert.IsTrue(STRPOS(EMailDialog."Attachment Name".VALUE,ExpectedText) <> 0,'');
      EMailDialog.Cancel.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE SalesCreditMemo_RPH@153(VAR SalesCreditMemo@1000 : TestRequestPage 207);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [SMB] [Sales]
    }
    END.
  }
}

