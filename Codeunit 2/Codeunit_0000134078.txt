OBJECT Codeunit 134078 ERM Currency With Ledger Entry
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1010 : Codeunit 132201;
      LibrarySales@1006 : Codeunit 130509;
      LibraryPurchase@1004 : Codeunit 130512;
      LibraryERM@1002 : Codeunit 131300;
      LibraryRandom@1001 : Codeunit 130440;
      Assert@1005 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      CurrencyCodeError@1007 : TextConst 'ENU=Currency code must be %1.';
      AmountErrorMessage@1008 : TextConst 'ENU=%1 must be %2 in %3.';
      DocumentType@1009 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';
      ExpectedMessage@1003 : TextConst 'ENU=The Credit Memo doesn''t have a Corrected Invoice No. Do you want to continue?';

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreditMemoAndVendorLedgerEntry@7();
    BEGIN
      // Covers documents TC_ID=5296 and 5303.

      // Check that Vendor Ledger Entry has same Currency Code and Amount after Posting Purchase Credit Memo.
      CreateAndVerifyLedgerEntry(TRUE,DocumentType::"Credit Memo");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE InvoiceAndVendorLedgerEntry@19();
    BEGIN
      // Covers documents TC_ID=5297 and 5305.

      // Check that Vendor Ledger Entry has same Currency Code and Amount after Posting Purchase Invoice.
      CreateAndVerifyLedgerEntry(TRUE,DocumentType::Invoice);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE OrderAndVendorLedgerEntry@27();
    BEGIN
      // Covers documents TC_ID=5298 and 5307.

      // Check that Vendor Ledger Entry has same Currency Code and Amount after Posting Purchase Order.
      CreateAndVerifyLedgerEntry(TRUE,DocumentType::Order);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CreditMemoCustomerLedgerEntry@12();
    BEGIN
      // Covers documents TC_ID=5299 and 5309.

      // Check that Customer Ledger Entry has same Currency Code and Amount after Posting Sales Credit Memo.
      CreateAndVerifyLedgerEntry(FALSE,DocumentType::"Credit Memo");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE InvoiceAndCustomerLedgerEntry@33();
    BEGIN
      // Covers documents TC_ID=5300 and 5311.

      // Check that Customer Ledger Entry has same Currency Code and Amount after Posting Sales Invoice.
      CreateAndVerifyLedgerEntry(FALSE,DocumentType::Invoice);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE OrderAndCustomerLedgerEntry@25();
    BEGIN
      // Covers documents TC_ID=5301 and 5313.

      // Check that Customer Ledger Entry has same Currency Code and Amount after Posting Sales Order.
      CreateAndVerifyLedgerEntry(FALSE,DocumentType::Order);
    END;

    LOCAL PROCEDURE CreateAndVerifyLedgerEntry@24(PurchaseDocument@1000 : Boolean;DocType@1001 : Option);
    VAR
      PurchaseHeader@1009 : Record 38;
      SalesHeader@1004 : Record 36;
      PostedInvoiceNo@1003 : Code[20];
      TotalAmount@1002 : Decimal;
    BEGIN
      // Setup.
      Initialize;

      IF PurchaseDocument THEN BEGIN
        // Setup: Create Currency and Purchase Document as per the option selected after release.
        CreatePurchaseDocument(PurchaseHeader,CreateCurrencyAndExchangeRate,DocType);
        LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
        PurchaseHeader.CALCFIELDS("Amount Including VAT");
        TotalAmount := PurchaseHeader."Amount Including VAT";

        // Exercise: Post Purchase Document.
        PostedInvoiceNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

        // Verify: Check that Vendor Ledger Entry for Purchase Document has same Currency Code and Amount Posted.
        IF PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::"Credit Memo" THEN
          VerifyVendorLedgerEntry(PostedInvoiceNo,PurchaseHeader."Currency Code",TotalAmount)
        ELSE
          VerifyVendorLedgerEntry(PostedInvoiceNo,PurchaseHeader."Currency Code",-TotalAmount);
      END ELSE BEGIN
        // Setup: Create Currency and Sales Document as per the option selected after release.
        CreateSalesDocument(SalesHeader,CreateCurrencyAndExchangeRate,DocType);
        LibrarySales.ReleaseSalesDocument(SalesHeader);
        SalesHeader.CALCFIELDS("Amount Including VAT");
        TotalAmount := SalesHeader."Amount Including VAT";

        // Exercise: Post Sales Document.
        PostedInvoiceNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

        // Verify: Check that Customer Ledger Entry for Sales Document has same Currency Code and Amount Posted.
        IF SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo" THEN
          VerifyCustomerLedgerEntry(PostedInvoiceNo,SalesHeader."Currency Code",-TotalAmount)
        ELSE
          VerifyCustomerLedgerEntry(PostedInvoiceNo,SalesHeader."Currency Code",TotalAmount);
      END;
    END;

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      ExecuteUIHandler;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE CreatePurchaseDocument@22(VAR PurchaseHeader@1000 : Record 38;CurrencyCode@1004 : Code[10];DocumentType@1005 : Option) : Code[20];
    VAR
      PurchaseLine@1001 : Record 39;
      NoSeriesManagement@1007 : Codeunit 396;
      Counter@1002 : Integer;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,CreateVendor(CurrencyCode));
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);

      // Create multiple Purchase Lines. Make sure that No. of Lines always greater than 2 to better Testability.
      FOR Counter := 1 TO 1 + LibraryRandom.RandInt(8) DO BEGIN
        // Required Random Value for Quantity and "Direct Unit Cost" field value is not important.
        LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItemNo,
          LibraryRandom.RandInt(100));

        IF PurchaseLine."Document Type" = PurchaseLine."Document Type"::"Credit Memo" THEN
          PurchaseLine.VALIDATE("Qty. to Receive",0);  // Value not required for Purchase Credit Memo.
        PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandInt(100));
        PurchaseLine.MODIFY(TRUE);
      END;
      EXIT(NoSeriesManagement.GetNextNo(PurchaseHeader."Posting No. Series",WORKDATE,FALSE));
    END;

    [Normal]
    LOCAL PROCEDURE CreateSalesDocument@2(VAR SalesHeader@1000 : Record 36;CurrencyCode@1004 : Code[10];DocumentType@1001 : Option);
    VAR
      SalesLine@1002 : Record 37;
      Counter@1006 : Integer;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CreateCustomer(CurrencyCode));

      // Create multiple Sales Lines. Make sure that No. of Lines always greater than 2 to better Testability.
      FOR Counter := 1 TO 1 + LibraryRandom.RandInt(8) DO BEGIN
        // Required Random Value for Quantity and "Unit Price" field value is not important.
        LibrarySales.CreateSalesLine(
          SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(100));
        IF SalesLine."Document Type" = SalesLine."Document Type"::"Credit Memo" THEN
          SalesLine.VALIDATE("Qty. to Ship",0); // Value not required for Sales Credit Memo.
        SalesLine.VALIDATE("Unit Price",LibraryRandom.RandInt(100));
        SalesLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateVendor@6(CurrencyCode@1004 : Code[10]) : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateCustomer@16(CurrencyCode@1004 : Code[10]) : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",CurrencyCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCurrencyAndExchangeRate@29() : Code[10];
    VAR
      Currency@1007 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      Currency.VALIDATE("Invoice Rounding Precision",LibraryERM.GetInvoiceRoundingPrecisionLCY);
      Currency.MODIFY(TRUE);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE VerifyVendorLedgerEntry@15(DocumentNo@1007 : Code[20];CurrencyCode@1006 : Code[10];LineAmount@1003 : Decimal);
    VAR
      VendorLedgerEntry@1001 : Record 25;
      Currency@1002 : Record 4;
    BEGIN
      VendorLedgerEntry.SETRANGE("Document No.",DocumentNo);
      VendorLedgerEntry.FINDFIRST;
      Assert.AreEqual(CurrencyCode,VendorLedgerEntry."Currency Code",STRSUBSTNO(CurrencyCodeError,CurrencyCode));

      VendorLedgerEntry.CALCFIELDS("Amount (LCY)");
      Currency.GET(CurrencyCode);
      Currency.InitRoundingPrecision;
      Assert.AreNearlyEqual(LibraryERM.ConvertCurrency(LineAmount,Currency.Code,'',WORKDATE),VendorLedgerEntry."Amount (LCY)",
        Currency."Amount Rounding Precision",STRSUBSTNO(AmountErrorMessage,VendorLedgerEntry.FIELDCAPTION("Amount (LCY)"),
          VendorLedgerEntry."Amount (LCY)",VendorLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@3(DocumentNo@1000 : Code[20];CurrencyCode@1007 : Code[10];LineAmount@1006 : Decimal);
    VAR
      CustLedgerEntry@1001 : Record 21;
      Currency@1002 : Record 4;
    BEGIN
      CustLedgerEntry.SETRANGE("Document No.",DocumentNo);
      CustLedgerEntry.FINDFIRST;
      Assert.AreEqual(CurrencyCode,CustLedgerEntry."Currency Code",STRSUBSTNO(CurrencyCodeError,CurrencyCode));

      CustLedgerEntry.CALCFIELDS("Amount (LCY)");
      Currency.GET(CurrencyCode);
      Currency.InitRoundingPrecision;
      Assert.AreNearlyEqual(LibraryERM.ConvertCurrency(LineAmount,Currency.Code,'',WORKDATE),CustLedgerEntry."Amount (LCY)",
        Currency."Amount Rounding Precision",STRSUBSTNO(AmountErrorMessage,CustLedgerEntry.FIELDCAPTION("Amount (LCY)"),
          CustLedgerEntry."Amount (LCY)",CustLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE ExecuteUIHandler@78();
    BEGIN
      // Generate Dummy message. Required for executing the test case successfully.
      IF CONFIRM(STRSUBSTNO(ExpectedMessage)) THEN ;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@1(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Ledger Entry] [Currency Code]
      Unsupported version tags:
      NA: Unable to Compile

      Test for ERM - Check Currency code for Sales and Purchase Ledger Entries.
        1. Create Credit memo Vendor Ledger Entries, Post a Credit Memo and check that Currency Code is included in Vendor Ledger Entries.
        2. Create Purchase Invoice Vendor Ledger Entries, Post and check that Currency Code is included in Vendor Ledger Entries.
        3. Create Credit memo Vendor Ledger Entries, Post and check that Currency Code is included in Vendor Ledger Entries.
        4. Create Credit memo Cust Ledger Entries, Post Credit Memo and check that Currency Code is included in Customer Ledger Entries.
        5. Create Invoice Cust Ledger Entries, Post an invoice and check that Currency Code is included in Customer Ledger Entries.
        6. Create Order Cust Ledger Entries, Post an order Credit Memo and check that Currency Code is included in Customer Ledger
           Entries.

      This test code unit replaces Manual Test Suite (TS5295).
      TFS_TS_ID = 20566,20567,20568,20569,20570,20571,20572

      Cover Test cases:
        TC-5296 TFS_TC_ID=8900
        TC-5297 TFS_TC_ID=7167
        TC-5298 TFS_TC_ID=7168
        TC-5299 TFS_TC_ID=7169
        TC-5300 TFS_TC_ID=7170
        TC-5301 TFS_TC_ID=7171
        TC-5303 TFS_TC_ID=7172
        TC-5305 TFS_TC_ID=7173
        TC-5307 TFS_TC_ID=7174
        TC-5309 TFS_TC_ID=7175
        TC-5311 TFS_TC_ID=7176
        TC-5313 TFS_TC_ID=7177
    }
    END.
  }
}

