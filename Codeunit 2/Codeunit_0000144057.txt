OBJECT Codeunit 144057 TDS - Payment
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1500010 : Codeunit 131300;
      LibraryRandom@1500009 : Codeunit 130440;
      LibraryTDS@1500008 : Codeunit 143000;
      LibraryPurchase@1500007 : Codeunit 130512;
      LibraryJournal@1500006 : Codeunit 131306;
      LibraryUtility@1500005 : Codeunit 131000;
      LibraryJournals@1500004 : Codeunit 131306;
      LibraryInventory@1500002 : Codeunit 132201;
      LibraryFixedAsset@1500011 : Codeunit 131330;
      LibraryVariableStorage@1500014 : Codeunit 131004;
      LibrarySales@1500015 : Codeunit 130509;
      LibraryServiceTax@1500017 : Codeunit 143001;
      Assert@1500001 : Codeunit 130000;
      AccountErr@1500012 : TextConst '@@@="%1 = AccountNo";ENU=There are no TDS entries for Account No. %1.;ENN=There are no TDS entries for Account No. %1.';
      ServiceTaxWithTDSHelper@1500013 : Codeunit 143005;
      AmountErr@1500000 : TextConst '@@@="%1 = Amount";ENU=Amount must be %1.';
      DocumentErr@1500018 : TextConst '@@@="%1 = DocumentNo.";ENU=Document must be %1';
      CustomerNo@1500016 : Code[20];

    [Test]
    PROCEDURE CreatePurchaseInvoiceWithConcessionalCode@1500009();
    VAR
      TDSNatureDeduction@1500006 : Record 13726;
      NODNOCHeader@1500005 : Record 13786;
      PurchaseHeader@1500004 : Record 38;
      TDSSetup@1500003 : Record 13728;
      PurchaseLine@1500002 : Record 39;
      ExpectedTDSEntry@1500008 : Record 13729;
      ConcessionalCode@1500010 : Record 13718;
      Vendor@1500000 : Record 23;
      DocumentNo@1500001 : Code[20];
    BEGIN
      //[SCENARIO 164261] Check if the program is creating TDS entries correctly when set the Concessional Value in TDS setup window with purchase invoice
      //[FEATURE] Purchase Invoice

      //[GIVEN] Created Concessional Code, NODNOC Setup,TDS Nature of Deduction and TDS Setup For Purchase Invoice.
      CreateVendorWithPAN(Vendor);
      LibraryTDS.CreateConcessionalCode(ConcessionalCode);
      InitializeSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,Vendor."No.",TDSNatureDeduction,TDSSetup,ConcessionalCode.Code);
      UpdateNODNOCLines(NODNOCHeader,ConcessionalCode.Code,TRUE,TRUE);

      //[WHEN] Created Purchase Invoice & Posted, Calculated Expected TDS Amount by using TDS Setup
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",
        PurchaseLine.Type::Item,TDSNatureDeduction.Code,WORKDATE,ConcessionalCode.Code);
      CalculateTDSFromBase(ExpectedTDSEntry,TDSSetup,PurchaseLine."Line Amount");
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      //[THEN] Calculated TDS Values by using TDS Setup and Verified the Expected and Actual TDS Values.
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,ExpectedTDSEntry."Document Type"::Invoice,FALSE);
      VerifyGLEntry(DocumentNo,PurchaseLine."Line Amount");
    END;

    [Test]
    PROCEDURE VerifyZeroTDSEntryInPaymentJournal@1500000();
    VAR
      GenJournalLine@1500000 : Record 81;
      GenJournalBatch@1500001 : Record 232;
      ExpectedTDSEntry@1500005 : Record 13729;
      BankAccount@1500006 : Record 270;
      GLAccount@1500007 : Record 15;
      DocumentNo@1500003 : Code[20];
      DummyAmount@1500004 : Decimal;
    BEGIN
      //[SCENARIO 164265] Check if the program is calculating TDS payment to Government Authorities Payment Journal.

      //[GIVEN] Created Setup for Assesse Code,Bank and GLAccount
      LibraryERM.CreateBankAccount(BankAccount);
      LibraryERM.CreateGLAccount(GLAccount);

      //[WHEN] Created Payment Journal Line with Balancing Account Bank.
      CreatePaymentLine(GenJournalLine,GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",
        BankAccount."No.",LibraryTDS.CreateTANNo,GenJournalLine."Bal. Account Type"::"Bank Account",DummyAmount);
      ASSERTERROR PayTDS(GenJournalLine);

      //[THEN] Zero TDS Entry has been created.
      Assert.ExpectedError(STRSUBSTNO(AccountErr,GenJournalLine."Account No."));
    END;

    [Test]
    PROCEDURE CalculateTDSPaymentinPaymentJournal@1500044();
    VAR
      GLAccount@1500018 : Record 15;
      TDSSetup@1500017 : Record 13728;
      NODNOCHeader@1500016 : Record 13786;
      TDSNatureDeduction@1500015 : Record 13726;
      GenJournalLine@1500014 : Record 81;
      GenJournalLine2@1500013 : Record 81;
      GenJournalLine3@1500012 : Record 81;
      GenJournalTemplate@1500009 : Record 80;
      GenJournalBatch@1500008 : Record 232;
      BankAccount@1500006 : Record 270;
      ExpectedTDSEntry@1500000 : Record 13729;
      Vendor@1500005 : Record 23;
      DocumentNo@1500004 : Code[20];
      Amount@1500003 : Decimal;
      Amoount1@1500002 : Decimal;
      AccountNo@1500001 : Code[20];
    BEGIN
      //[SCENARIO 164265] Check if the program is calculating TDS payment to Government Authorities Payment Journal

      //[GIVEN] Created Concessional Code, NODNOC Setup,TDS Nature of Deduction and TDS Setup For General and Payment Journal
      LibraryERM.CreateGLAccount(GLAccount);
      CreateVendorWithPAN(Vendor);
      InitializeSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,Vendor."No.",TDSNatureDeduction,TDSSetup,'');
      UpdateNODNOCLines(NODNOCHeader,'',FALSE,FALSE);
      UpdateAccountNumberInTDSGroup(TDSNatureDeduction."TDS Group",GLAccount."No.");
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      Amount := LibraryRandom.RandDec(40000,2);

      //[WHEN] Created General Journal & Posted, Calculated Expected TDS Amount by using TDS Setup
      LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",'',
        GenJournalLine."Bal. Account Type"::"G/L Account",GLAccount."No.",Amount);
      DocumentNo := UpdateGeneralJournalLine(GenJournalLine,GenJournalLine."Party Type"::Vendor,NODNOCHeader."No.",
        TDSNatureDeduction.Code,'');
      CalculateTDSFromBase(ExpectedTDSEntry,TDSSetup,Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      //[WHEN] Created Payment Journal & Posted, Calculated Expected TDS Amount by using TDS Setup
      LibraryERM.CreateBankAccount(BankAccount);
      CreatePaymentLine(GenJournalLine2,GenJournalLine2."Account Type"::"G/L Account",GLAccount."No.",
        BankAccount."No.",GenJournalLine."T.A.N. No.",GenJournalLine2."Bal. Account Type"::"Bank Account",0);
      PayTDS(GenJournalLine2);
      DocumentNo := GenJournalLine2."Document No.";
      GetTaxEntry(GenJournalLine2,Amoount1);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);

      //[WHEN] Post Payment Journal Line
      LibraryERM.CreateBankAccount(BankAccount);
      CreatePaymentLine(GenJournalLine3,GenJournalLine3."Account Type"::"G/L Account",GLAccount."No.",
        BankAccount."No.",GenJournalLine."T.A.N. No.",GenJournalLine3."Bal. Account Type"::"Bank Account",Amount);
      ASSERTERROR PayTDS(GenJournalLine3);

      //[THEN] Calculated TDS Values And Bank Entries by using TDS Setup and Verified the Expected and Actual TDS Values.
      Assert.ExpectedError(STRSUBSTNO(AccountErr,GenJournalLine3."Account No."));
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,GenJournalLine."Document No.",
        ExpectedTDSEntry."Document Type"::Payment,FALSE);
      VerifyBankEntry(DocumentNo,Amoount1);
      VerifyGLEntry(DocumentNo,Amoount1);
    END;

    [Test]
    PROCEDURE VerifyZeroTDSEntryInCashJournal@1500049();
    VAR
      GenJournalLine@1500004 : Record 81;
      GenJournalBatch@1500002 : Record 232;
      GLAccount@1500005 : Record 15;
      GLAccount2@1500006 : Record 15;
      DocumentNo@1500001 : Code[20];
      DummyAmount@1500000 : Decimal;
    BEGIN
      //[SCENARIO 164266] Check if the program is calculating TDS payment to Government Authorities Payment Voucher

      //[GIVEN] Created Setup for GL Account
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGLAccount(GLAccount2);

      //[WHEN] Created Cash Payment Voucher
      CreatePaymentLine(GenJournalLine,GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",
        GLAccount2."No.",LibraryTDS.CreateTANNo,GenJournalLine."Bal. Account Type"::"G/L Account",DummyAmount);
      ASSERTERROR PayTDS(GenJournalLine);

      //[THEN] TDS Entry has been created,
      Assert.ExpectedError(STRSUBSTNO(AccountErr,GenJournalLine."Account No."));
    END;

    [Test]
    PROCEDURE CalculateTDSPaymentInCashJournal@1500043();
    VAR
      GenJournalLine@1500015 : Record 81;
      GenJournalLine2@1500014 : Record 81;
      GenJournalLine3@1500013 : Record 81;
      GenJournalTemplate@1500011 : Record 80;
      GenJournalBatch@1500010 : Record 232;
      TDSSetup@1500002 : Record 13728;
      NODNOCHeader@1500006 : Record 13786;
      TDSNatureDeduction@1500005 : Record 13726;
      GLAccount@1500004 : Record 15;
      GLAccount2@1500003 : Record 15;
      ExpectedTDSEntry@1500000 : Record 13729;
      Vendor@1500007 : Record 23;
      DocumentNo@1500009 : Code[20];
      Amount@1500008 : Decimal;
      Amoount1@1500001 : Decimal;
    BEGIN
      //[SCENARIO 164266] Check if the program is calculating TDS payment to Government Authorities Cash Payment Voucher

      //[GIVEN] Created Concessional Code, NODNOC Setup,TDS Nature of Deduction and TDS Setup For Genral and Payment Journal.
      LibraryERM.CreateGLAccount(GLAccount);
      CreateVendorWithPAN(Vendor);
      InitializeSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,Vendor."No.",TDSNatureDeduction,TDSSetup,'');
      UpdateNODNOCLines(NODNOCHeader,'',FALSE,FALSE);
      UpdateAccountNumberInTDSGroup(TDSNatureDeduction."TDS Group",GLAccount."No.");
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      Amount := LibraryRandom.RandDec(40000,2);

      //[WHEN] Created General Journal  & Posted, Calculated Expected TDS Amount by using TDS Setup
      LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",'',
        GenJournalLine."Bal. Account Type"::"G/L Account",GLAccount."No.",Amount);
      DocumentNo := UpdateGeneralJournalLine(GenJournalLine,GenJournalLine."Party Type"::Vendor,NODNOCHeader."No.",
        TDSNatureDeduction.Code,'');
      CalculateTDSFromBase(ExpectedTDSEntry,TDSSetup,Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      //[WHEN] Created Payment Journal  & Posted, Calculated Expected TDS Amount by using TDS Setup
      LibraryERM.CreateGLAccount(GLAccount2);
      CreatePaymentLine(GenJournalLine2,GenJournalLine2."Account Type"::"G/L Account",GLAccount."No.",
        GLAccount2."No.",GenJournalLine."T.A.N. No.",GenJournalLine2."Bal. Account Type"::"G/L Account",0);
      PayTDS(GenJournalLine2);
      DocumentNo := GenJournalLine2."Document No.";
      GetTaxEntry(GenJournalLine2,Amoount1);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);

      //[WHEN] Created Cash Payment Journal Line
      LibraryERM.CreateGLAccount(GLAccount2);
      CreatePaymentLine(GenJournalLine3,GenJournalLine3."Account Type"::"G/L Account",
        GLAccount."No.",GLAccount2."No.",GenJournalLine."T.A.N. No.",GenJournalLine3."Bal. Account Type"::"G/L Account",Amount);
      ASSERTERROR PayTDS(GenJournalLine3);

      //[THEN] Calculated TDS Values by using TDS Setup and Verified the Expected and Actual TDS Values.
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,GenJournalLine."Document No.",
        ExpectedTDSEntry."Document Type"::Payment,FALSE);
      Assert.ExpectedError(STRSUBSTNO(AccountErr,GenJournalLine3."Account No."));
      VerifyGLEntry(DocumentNo,Amoount1);
    END;

    [Test]
    PROCEDURE CreateGenJnlWithThresholdLimit@1500041();
    VAR
      AssesseeCode@1500012 : Record 13727;
      NODNOCHeader@1500011 : Record 13786;
      TDSNatureDeduction@1500010 : Record 13726;
      TDSSetup@1500009 : Record 13728;
      GenJournalLine@1500008 : Record 81;
      GenJournalTemplate@1500007 : Record 80;
      GenJournalBatch@1500006 : Record 232;
      GLAccount@1500000 : Record 15;
      GLAccount2@1500015 : Record 15;
      ExpectedTDSEntry@1500001 : Record 13729;
      Vendor@1500016 : Record 23;
      NODNOCLines@1500013 : Record 13785;
      Amount1@1500005 : Decimal;
      Amount2@1500004 : Decimal;
      DocumentNo@1500003 : Code[20];
      DocumentNo2@1500002 : Code[20];
    BEGIN
      // [SCENARIO 164422] Verify the TDS entry when threshold limit is defined for first invoice is less and sencond invoice is more than threshold
      //[GIVEN] Created Concessional Code, NODNOC Setup,TDS Nature of Deduction and TDS Setup For Invoice Journal.
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGLAccount(GLAccount2);
      CreateVendorWithPAN(Vendor);
      InitializeSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,Vendor."No.",TDSNatureDeduction,TDSSetup,'');
      UpdateNODNOCLines(NODNOCHeader,'',FALSE,FALSE);
      UpdateAccountNumberInTDSGroup(TDSNatureDeduction."TDS Group",GLAccount."No.");

      //[WHEN] Created General With Document Type Invoice & Posted, Calculated Expected TDS Amount by using TDS Setup
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      Amount1 := LibraryRandom.RandDec(10000,2);
      Amount2 := LibraryRandom.RandDec(50000,2);

      LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::"G/L Account",'',
        GenJournalLine."Bal. Account Type"::"G/L Account",'',-Amount1);
      DocumentNo := UpdateGeneralJournalLine(GenJournalLine,GenJournalLine."Party Type"::Vendor,NODNOCHeader."No.",
        TDSNatureDeduction.Code,'');
      LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",
        GenJournalLine."Bal. Account Type"::"G/L Account",'',Amount1);
      UpdateGeneralJournalLine(GenJournalLine,GenJournalLine."Party Type"::Vendor,'','',DocumentNo);

      LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::"G/L Account",'',
        GenJournalLine."Bal. Account Type"::"G/L Account",'',-Amount2);
      DocumentNo2 := UpdateGeneralJournalLine(GenJournalLine,GenJournalLine."Party Type"::Vendor,NODNOCHeader."No.",
        TDSNatureDeduction.Code,'');
      LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::"G/L Account",GLAccount2."No.",
        GenJournalLine."Bal. Account Type"::"G/L Account",'',Amount2);
      UpdateGeneralJournalLine(GenJournalLine,GenJournalLine."Party Type"::Vendor,'','',DocumentNo2);

      CalculateTDSFromBase(ExpectedTDSEntry,TDSSetup,Amount2 + Amount1);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      //[THEN] Calculated TDS Values by using TDS Setup and Verified the Expected and Actual TDS Values.
      VerifyGLEntry(DocumentNo,Amount1);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo2,ExpectedTDSEntry."Document Type"::Invoice,FALSE);
    END;

    [Test]
    PROCEDURE CreatePurchaseInvoiceItem@1500024();
    VAR
      TDSNatureDeduction@1500006 : Record 13726;
      NODNOCHeader@1500005 : Record 13786;
      PurchaseHeader@1500004 : Record 38;
      TDSSetup@1500003 : Record 13728;
      PurchaseLine@1500002 : Record 39;
      ExpectedTDSEntryPurchLine@1500008 : Record 39;
      Vendor@1500000 : Record 23;
    BEGIN
      //[SCENARIO 164243] calculating TDS related amount successfully different effective dates:Invoice received from vendor in Purchase Invoice
      //[FEATURE] Purchase Invoice

      //[GIVEN] Created Concessional Code, NODNOC Setup,TDS Nature of Deduction and TDS Setup For Purchase Invoice.
      CreateVendorWithPAN(Vendor);
      InitializeSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,Vendor."No.",TDSNatureDeduction,TDSSetup,'');
      UpdateNODNOCLines(NODNOCHeader,'',TRUE,TRUE);

      //[WHEN] Created Purchase Invoice, Calculated Expected TDS Amount by using TDS Setup
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",
        PurchaseLine.Type::Item,TDSNatureDeduction.Code,WORKDATE,'');
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmountsPurchaseLine(ExpectedTDSEntryPurchLine,TDSSetup,PurchaseLine.Amount);

      //[THEN] Calculated TDS Values by using TDS Setup and Verified the Expected and Actual TDS Values.
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSEntryPurchLine,PurchaseLine);
    END;

    [Test]
    PROCEDURE CreatePurchaseInvoiceItemWithEffectiveDate@1500025();
    VAR
      TDSNatureDeduction@1500009 : Record 13726;
      NODNOCHeader@1500008 : Record 13786;
      PurchaseHeader@1500007 : Record 38;
      TDSSetup@1500006 : Record 13728;
      PurchaseLine@1500005 : Record 39;
      ExpectedTDSEntryPurchLine@1500003 : Record 39;
      Vendor@1500000 : Record 23;
    BEGIN
      //[SCENARIO 164243] calculating TDS related amount successfully different effective dates:Invoice received from vendor in Purchase Invoice
      //[FEATURE] Purchase Invoice

      //[GIVEN] Created Concessional Code, NODNOC Setup,TDS Nature of Deduction and TDS Setup For Purchase Invoice.
      CreateVendorWithPAN(Vendor);
      InitializeSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,Vendor."No.",TDSNatureDeduction,TDSSetup,'');
      UpdateNODNOCLines(NODNOCHeader,'',TRUE,TRUE);

      //[WHEN] Created Purchase Invoice, Calculated Expected TDS Amount by using TDS Setup
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",
        PurchaseLine.Type::Item,TDSNatureDeduction.Code,GetEffectiveDate,'');
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmountsPurchaseLine(ExpectedTDSEntryPurchLine,TDSSetup,PurchaseLine.Amount);

      //[THEN] Calculated TDS Values by using TDS Setup and Verified the Expected and Actual TDS Values.
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSEntryPurchLine,PurchaseLine);
    END;

    [Test]
    PROCEDURE CreatePurchaseInvoiceGLAccount@1500006();
    VAR
      TDSNatureDeduction@1500008 : Record 13726;
      NODNOCHeader@1500007 : Record 13786;
      PurchaseHeader@1500006 : Record 38;
      TDSSetup@1500005 : Record 13728;
      PurchaseLine@1500004 : Record 39;
      ExpectedTDSEntryPurchLine@1500002 : Record 39;
      Vendor@1500000 : Record 23;
    BEGIN
      //[SCENARIO 164243] calculating TDS related amount successfully different effective dates:Invoice received from vendor in Purchase Invoice
      //[FEATURE] Purchase Invoice

      //[GIVEN] Created Concessional Code, NODNOC Setup,TDS Nature of Deduction and TDS Setup For Purchase Invoice.
      CreateVendorWithPAN(Vendor);
      InitializeSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,Vendor."No.",TDSNatureDeduction,TDSSetup,'');
      UpdateNODNOCLines(NODNOCHeader,'',TRUE,TRUE);

      //[WHEN] Created Purchase Invoice, Calculated Expected TDS Amount by using TDS Setup
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",
        PurchaseLine.Type::"G/L Account",TDSNatureDeduction.Code,WORKDATE,'');
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmountsPurchaseLine(ExpectedTDSEntryPurchLine,TDSSetup,PurchaseLine.Amount);

      //[THEN] Calculated TDS Values by using TDS Setup and Verified the Expected and Actual TDS Values.
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSEntryPurchLine,PurchaseLine);
    END;

    [Test]
    PROCEDURE CreatePurchaseInvoiceGLAccountWithEffectiveDate@1500019();
    VAR
      TDSNatureDeduction@1500008 : Record 13726;
      NODNOCHeader@1500007 : Record 13786;
      PurchaseHeader@1500006 : Record 38;
      TDSSetup@1500005 : Record 13728;
      PurchaseLine@1500004 : Record 39;
      ExpectedTDSEntryPurchLine@1500002 : Record 39;
      Vendor@1500009 : Record 23;
      Amount@1500001 : Decimal;
    BEGIN
      //[SCENARIO 164243] calculating TDS related amount successfully different effective dates:Invoice received from vendor in Purchase Invoice
      //[FEATURE] Purchase Invoice

      //[GIVEN] Created Concessional Code, NODNOC Setup,TDS Nature of Deduction and TDS Setup For Purchase Invoice.
      CreateVendorWithPAN(Vendor);
      InitializeSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,Vendor."No.",TDSNatureDeduction,TDSSetup,'');
      UpdateNODNOCLines(NODNOCHeader,'',TRUE,TRUE);

      //[WHEN] Created Purchase Invoice, Calculated Expected TDS Amount by using TDS Setup
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",
        PurchaseLine.Type::"G/L Account",TDSNatureDeduction.Code,GetEffectiveDate,'');
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmountsPurchaseLine(ExpectedTDSEntryPurchLine,TDSSetup,PurchaseLine.Amount);

      //[THEN] Calculated TDS Values by using TDS Setup and Verified the Expected and Actual TDS Values.
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSEntryPurchLine,PurchaseLine);
    END;

    [Test]
    PROCEDURE CreatePurchaseInvoiceFixedAsset@1500023();
    VAR
      TDSNatureDeduction@1500008 : Record 13726;
      NODNOCHeader@1500007 : Record 13786;
      PurchaseHeader@1500006 : Record 38;
      TDSSetup@1500005 : Record 13728;
      PurchaseLine@1500004 : Record 39;
      ExpectedTDSEntryPurchLine@1500002 : Record 39;
      Vendor@1500000 : Record 23;
    BEGIN
      //[SCENARIO 164243] Calculating TDS related amount successfully different effective dates:Invoice received from vendor in Purchase Invoice
      //[FEATURE] Purchase Invoice

      //[GIVEN] Created Concessional Code, NODNOC Setup,TDS Nature of Deduction and TDS Setup For Purchase Invoice.
      CreateVendorWithPAN(Vendor);
      InitializeSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,Vendor."No.",TDSNatureDeduction,TDSSetup,'');
      UpdateNODNOCLines(NODNOCHeader,'',TRUE,TRUE);

      //[WHEN] Created Purchase Invoice, Calculated Expected TDS Amount by using TDS Setup
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",
        PurchaseLine.Type::"Fixed Asset",TDSNatureDeduction.Code,WORKDATE,'');
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmountsPurchaseLine(ExpectedTDSEntryPurchLine,TDSSetup,PurchaseLine.Amount);

      //[THEN] Calculated TDS Values by using TDS Setup and Verified the Expected and Actual TDS Values.
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSEntryPurchLine,PurchaseLine);
    END;

    [Test]
    PROCEDURE CreatePurchaseInvoiceFixedAssetWithEffectiveDate@1500028();
    VAR
      TDSNatureDeduction@1500008 : Record 13726;
      NODNOCHeader@1500007 : Record 13786;
      PurchaseHeader@1500006 : Record 38;
      TDSSetup@1500005 : Record 13728;
      PurchaseLine@1500004 : Record 39;
      ExpectedTDSEntryPurchLine@1500002 : Record 39;
      Vendor@1500000 : Record 23;
    BEGIN
      //[SCENARIO 164243] Calculating TDS related amount successfully different effective dates:Invoice received from vendor in Purchase Invoice
      //[FEATURE] Purchase Invoice

      //[GIVEN] Created Concessional Code, NODNOC Setup,TDS Nature of Deduction and TDS Setup For Purchase Invoice.
      CreateVendorWithPAN(Vendor);
      InitializeSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,Vendor."No.",TDSNatureDeduction,TDSSetup,'');
      UpdateNODNOCLines(NODNOCHeader,'',TRUE,TRUE);

      //[WHEN] Created Purchase Invoice, Calculated Expected TDS Amount by using TDS Setup
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",
        PurchaseLine.Type::"Fixed Asset",TDSNatureDeduction.Code,GetEffectiveDate,'');
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmountsPurchaseLine(ExpectedTDSEntryPurchLine,TDSSetup,PurchaseLine.Amount);

      //[THEN] Calculated TDS Values by using TDS Setup and Verified the Expected and Actual TDS Values.
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSEntryPurchLine,PurchaseLine);
    END;

    [Test]
    PROCEDURE CreatePurchaseInvoiceChargeItem@1500018();
    VAR
      TDSNatureDeduction@1500008 : Record 13726;
      NODNOCHeader@1500007 : Record 13786;
      PurchaseHeader@1500006 : Record 38;
      TDSSetup@1500005 : Record 13728;
      PurchaseLine@1500004 : Record 39;
      ExpectedTDSEntryPurchLine@1500002 : Record 39;
      Vendor@1500000 : Record 23;
    BEGIN
      //[SCENARIO 164243] Calculating TDS related amount successfully different effective dates:Invoice received from vendor in Purchase Invoice
      //[FEATURE] Purchase Invoice

      //[GIVEN] Created Concessional Code, NODNOC Setup,TDS Nature of Deduction and TDS Setup For Purchase Invoice.
      CreateVendorWithPAN(Vendor);
      InitializeSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,Vendor."No.",TDSNatureDeduction,TDSSetup,'');
      UpdateNODNOCLines(NODNOCHeader,'',TRUE,TRUE);


      //[WHEN] Created Purchase Invoice, Calculated Expected TDS Amount by using TDS Setup
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",
        PurchaseLine.Type::"Charge (Item)",TDSNatureDeduction.Code,WORKDATE,'');
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmountsPurchaseLine(ExpectedTDSEntryPurchLine,TDSSetup,PurchaseLine.Amount);

      //[THEN] Calculated TDS Values by using TDS Setup and Verified the Expected and Actual TDS Values.
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSEntryPurchLine,PurchaseLine);
    END;

    [Test]
    PROCEDURE CreatePurchaseInvoiceChargeItemWithEffectiveDate@1500020();
    VAR
      TDSNatureDeduction@1500008 : Record 13726;
      NODNOCHeader@1500007 : Record 13786;
      PurchaseHeader@1500006 : Record 38;
      TDSSetup@1500005 : Record 13728;
      PurchaseLine@1500004 : Record 39;
      ExpectedTDSEntryPurchLine@1500002 : Record 39;
      Vendor@1500000 : Record 23;
    BEGIN
      //[SCENARIO 164243] Calculating TDS related amount successfully different effective dates:Invoice received from vendor in Purchase Invoice
      //[FEATURE] Purchase Invoice

      //[GIVEN] Created Concessional Code, NODNOC Setup,TDS Nature of Deduction and TDS Setup For Purchase Invoice.
      CreateVendorWithPAN(Vendor);
      InitializeSetup(NODNOCHeader,NODNOCHeader.Type::Vendor,Vendor."No.",TDSNatureDeduction,TDSSetup,'');
      UpdateNODNOCLines(NODNOCHeader,'',TRUE,TRUE);

      //[WHEN] Created Purchase Invoice, Calculated Expected TDS Amount by using TDS Setup
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",
        PurchaseLine.Type::"Charge (Item)",TDSNatureDeduction.Code,GetEffectiveDate,'');
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmountsPurchaseLine(ExpectedTDSEntryPurchLine,TDSSetup,PurchaseLine.Amount);

      //[THEN] Calculated TDS Values by using TDS Setup and Verified the Expected and Actual TDS Values.
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSEntryPurchLine,PurchaseLine);
    END;

    [Test]
    PROCEDURE GeneralJnlLineWithMulitpleLine@1500040();
    VAR
      TDSNatureDeduction@1500010 : Record 13726;
      NODNOCHeader@1500009 : Record 13786;
      GenJournalLine@1500008 : Record 81;
      GenJournalTemplate@1500014 : Record 80;
      GenJournalBatch@1500004 : Record 232;
      GLAccount@1500003 : Record 15;
      BankAccount@1500013 : Record 270;
      TDSSetup@1500001 : Record 13728;
      Party@1500005 : Record 13730;
      Amount@1500011 : Decimal;
      DocumentNo@1500002 : Code[20];
    BEGIN
      // [SCENARIO 164423] Post General Journal with multiple Journal Lines

      // [GIVEN]  Created Setup For TDS.
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      Amount := LibraryRandom.RandDec(10458,0);
      LibraryERM.CreateBankAccount(BankAccount);
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryTDS.CreateParty(Party);
      InitializeSetup(NODNOCHeader,NODNOCHeader.Type::Party,Party.Code,TDSNatureDeduction,TDSSetup,'');
      UpdateNODNOCLines(NODNOCHeader,'',FALSE,FALSE);

      // [WHEN] Created general journal line & Posted
      LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",GLAccount."No.",
        GenJournalLine."Bal. Account Type"::"G/L Account",'',Amount);
      DocumentNo := UpdateGeneralJournalLine(GenJournalLine,GenJournalLine."Party Type"::Party,NODNOCHeader."No.",
        TDSNatureDeduction.Code,'');

      LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"Bank Account",BankAccount."No.",
        GenJournalLine."Bal. Account Type"::"G/L Account",'',-Amount);
      UpdateGeneralJournalLine(GenJournalLine,GenJournalLine."Party Type"::Vendor,'','',DocumentNo);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] G/L Entry has been created.
      VerifyGLEntry(GenJournalLine."Document No.",Amount);
    END;

    [Test]
    PROCEDURE CreateTDSWithMultipleJournal@1500012();
    VAR
      Vendor@1500002 : Record 23;
      TdsNatureOfDeduction@1500006 : Record 13726;
      NodNocHeader@1500005 : Record 13786;
      TDSSetup@1500003 : Record 13728;
      AssesseeCode@1500004 : Record 13727;
      TdsNatureOfDeduction2@1500007 : Record 13726;
      GenJournalLine@1500011 : Record 81;
      GenJournalTemplate@1500012 : Record 80;
      BankAccount@1500014 : Record 270;
      GenJournalBatch@1500015 : Record 232;
      Amount@1500001 : Decimal;
      Amount2@1500000 : Decimal;
      DocumentNo@1500013 : Code[20];
    BEGIN
      // [SCENARIO 164433] - Verify the TDS amount if multiple TDS nature of deduction is defined on the multiple journal lines.

      // [GIVEN] Create NODNOC Setup,TDS Nature of Deduction and TDS Setup For General Journal Line.
      Amount := LibraryRandom.RandDec(10000,2);
      Amount2 := LibraryRandom.RandDec(15000,2);
      CreateVendorWithPAN(Vendor);
      LibraryERM.CreateBankAccount(BankAccount);
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      InitializeSetup(NodNocHeader,NodNocHeader.Type::Vendor,Vendor."No.",TdsNatureOfDeduction,TDSSetup,'');
      UpdateNODNOCLines(NodNocHeader,'',FALSE,FALSE);
      GetAssesseCodeAndCreateNODNOCLines(NodNocHeader,AssesseeCode,TdsNatureOfDeduction2);

      // [WHEN] Create Multiple journl Lines and Post. Calculated Expected TDS Amount by using TDS Setup
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::"G/L Account",'',GenJournalLine."Bal. Account Type"::"G/L Account",'',Amount);
      DocumentNo :=
        UpdateGeneralJournalLine(GenJournalLine,GenJournalLine."Party Type"::Vendor,Vendor."No.",TdsNatureOfDeduction.Code,'');

      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::"G/L Account",'',GenJournalLine."Bal. Account Type"::"G/L Account",'',Amount2);
      GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",Vendor."No.");
      GenJournalLine.VALIDATE("TDS Nature of Deduction",TdsNatureOfDeduction2.Code);
      GenJournalLine.MODIFY(TRUE);

      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::"Bank Account",BankAccount."No.",
        GenJournalLine."Bal. Account Type"::"G/L Account",'',-(Amount + Amount2));
      UpdateGeneralJournalLine(GenJournalLine,GenJournalLine."Party Type"::Vendor,'','',DocumentNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Calculated TDS Values by using TDS Setup and Verified the Expected and Actual TDS Values.
      VerifyGLEntry(DocumentNo,GenJournalLine."Credit Amount");
    END;

    [Test]
    PROCEDURE VerifyCheckLedgerWithBankcharges@1500030();
    VAR
      Vendor@1500001 : Record 23;
      NodNocHeader@1500002 : Record 13786;
      TdsNatureOfDeduction@1500003 : Record 13726;
      TDSSetup@1500004 : Record 13728;
      GenJournalLine@1500005 : Record 81;
      GenJournalBatch@1500006 : Record 232;
      GenJournalTemplate@1500007 : Record 80;
      BankAccount@1500009 : Record 270;
      ExpectedTDSEntry@1500010 : Record 13729;
      Amount2@1500011 : Decimal;
      Amount@1500000 : Decimal;
      DocumentNo@1500008 : Code[20];
    BEGIN
      // [SCENARIO 164432] Verify TDS and check ledger entry is created after considering the bank charges in case of Manual Cheque.

      // [GIVEN] Create NODNOC Setup,TDS Nature of Deduction and TDS Setup For Bank Payment Voucher.
      Amount := LibraryRandom.RandDec(50000,2);
      Amount2 := LibraryRandom.RandDec(500,2);
      CreateVendorWithPAN(Vendor);
      LibraryERM.CreateBankAccount(BankAccount);
      InitializeSetup(NodNocHeader,NodNocHeader.Type::Vendor,Vendor."No.",TdsNatureOfDeduction,TDSSetup,'');
      UpdateNODNOCLines(NodNocHeader,'',TRUE,TRUE);
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalTemplate.MODIFY(TRUE);

      // [WHEN] Create Bank Payment Voucher with With Manual Check and Post.
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::"G/L Account",'',GenJournalLine."Bal. Account Type"::"Bank Account",'',Amount);
      DocumentNo :=
        UpdateGnlJnlLineWithCheckEntry(GenJournalLine,GenJournalLine."Party Type"::Vendor,Vendor."No.",TdsNatureOfDeduction.Code,'');
      CalculateTDSFromBase(ExpectedTDSEntry,TDSSetup,GenJournalLine.Amount);

      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::"Bank Account",BankAccount."No.",GenJournalLine."Bal. Account Type"::"G/L Account",'',-Amount);
      UpdateGnlJnlLineWithCheckEntry(GenJournalLine,GenJournalLine."Party Type"::Vendor,'','',DocumentNo);
      CreateJournalBankCharge(GenJournalLine,CreateBankCharge,Amount2);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Calculated TDS Values by using TDS Setup and Verified the Expected and Actual TDS Values.
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,GenJournalLine."Document No.",
        ExpectedTDSEntry."Document Type"::Payment,FALSE);
    END;

    [Test]
    [HandlerFunctions(PurchOrderStatisticsMPH,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE CreatePurchaseOrderWithTDSAdjustment@1500017();
    VAR
      TdsNatureOfDeduction@1500006 : Record 13726;
      NodNocHeader@1500005 : Record 13786;
      PurchaseHeader@1500004 : Record 38;
      TDSSetup@1500003 : Record 13728;
      PurchaseLine@1500002 : Record 39;
      ExpectedTDSEntry@1500008 : Record 13729;
      Vendor@1500009 : Record 23;
      Amount@1500000 : Decimal;
      DocumentNo@1500001 : Code[20];
    BEGIN
      // [SCENARIO 164268] Check if the program is creating TDS entries and TDS Adjustment Journal with Purchcase Order
      // [FEATURE] Purchase Order

      // [GIVEN] Create NODNOC Setup,TDS Nature of Deduction and TDS Setup For Purchase Order.
      CreateVendorWithPAN(Vendor);
      InitializeSetup(NodNocHeader,NodNocHeader.Type::Vendor,Vendor."No.",TdsNatureOfDeduction,TDSSetup,'');
      UpdateNODNOCLines(NodNocHeader,'',TRUE,TRUE);

      // [WHEN] Create Purchase Order & Post, Calculate Expected TDS Amount by using TDS Setup
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,NodNocHeader."No.",
        PurchaseLine.Type::Item,TdsNatureOfDeduction.Code,WORKDATE,'');
      CalculateTDSFromBase(ExpectedTDSEntry,TDSSetup,PurchaseLine."Line Amount");
      VerifyPurchaseOrderStatistics(PurchaseHeader,ExpectedTDSEntry."Total TDS Including SHE CESS");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [WHEN] Verify TDS entry and Post Tax Adjustment Journal.
      CreateAndPostTDSAdjustmentJournal(NodNocHeader."No.",DocumentNo,Amount);

      // [THEN] Calculated TDS Values by using TDS Setup and Verified the Expected and Actual TDS Values.
      VerifyGLEntry(DocumentNo,-Amount);
    END;

    [Test]
    [HandlerFunctions(UpdateTDSReceivablePageHandler)]
    PROCEDURE CreateSalesOrderWithTDSReceivable@1500027();
    VAR
      Customer@1500001 : Record 18;
      SalesHeader@1500005 : Record 36;
      SalesLine@1500006 : Record 37;
      VATPostingSetup@1500010 : Record 325;
      ServiceTaxGroups@1500013 : Record 16471;
      AccountNo@1500000 : Code[20];
      PostingType@1500007 : Option;
    BEGIN
      // [SCENARIO 164324] Check if the program is creating TDS Receivable with Sales Order
      // [FEATURE] Sales Order

      // [GIVEN] Create Customer,GL Account for Sales Order
      LibrarySales.CreateCustomer(Customer);
      AccountNo := LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,PostingType);
      InitializeSetupforTDSReceivable;
      CreateServiceTaxGroupandServiceTaxSetup(ServiceTaxGroups,WORKDATE);
      UpdateServiceTaxGroupInGLAccount(AccountNo,ServiceTaxGroups.Code);

      // [WHEN] Create Sales Order with Structure and Post.
      CreateSalesInvoiceDocumentforTCS(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,Customer."No.",SalesLine.Type::"G/L Account",AccountNo,TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] TDS Certificate Receivable and Received.
      UpdateTDSReceivablesFromCustomer(Customer."No.",SalesLine.Amount,FALSE);
    END;

    [Test]
    [HandlerFunctions(UpdateTDSReceivablePageHandler)]
    PROCEDURE CreateSalesInvoiceWithTDSReceivable@1500038();
    VAR
      Customer@1500001 : Record 18;
      SalesHeader@1500005 : Record 36;
      SalesLine@1500006 : Record 37;
      VATPostingSetup@1500010 : Record 325;
      ServiceTaxGroups@1500013 : Record 16471;
      AccountNo@1500000 : Code[20];
      PostingType@1500007 : Option;
    BEGIN
      // [SCENARIO 164324] Check if the program is creating TDS Receivable Sales Invoice
      // [FEATURE] Sales Invoice

      // [GIVEN] Create GL Account and Customer setup for Sales Invoices.
      LibrarySales.CreateCustomer(Customer);
      AccountNo := LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,PostingType);
      InitializeSetupforTDSReceivable;
      CreateServiceTaxGroupandServiceTaxSetup(ServiceTaxGroups,WORKDATE);
      UpdateServiceTaxGroupInGLAccount(AccountNo,ServiceTaxGroups.Code);

      // [WHEN] Create Sales Invoice with Structure and Post.
      CreateSalesInvoiceDocumentforTCS(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Invoice,Customer."No.",SalesLine.Type::"G/L Account",AccountNo,TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Verify TDS Certificate Receivable and Certificate Received entry has been created.
      UpdateTDSReceivablesFromCustomer(Customer."No.",SalesLine.Amount,FALSE);
    END;

    [Test]
    [HandlerFunctions(UpdateTDSReceivablePageHandler)]
    PROCEDURE CreateGenJournalWithTDSReceivable@1500046();
    VAR
      Customer@1500000 : Record 18;
      VATPostingSetup@1500004 : Record 325;
      GenJournalTemplate@1500006 : Record 80;
      GenJournalBatch@1500007 : Record 232;
      GenJournalLine@1500008 : Record 81;
      ServiceTaxGroups@1500010 : Record 16471;
      AccountNo@1500002 : Code[20];
      PostingType@1500005 : Option;
      Amount@1500003 : Decimal;
    BEGIN
      // [SCENARIO 164324] Check if the program is creating TDS Receivable with General Journal Line

      // [GIVEN] Created GL Account and Customer setup for General Journal.
      LibrarySales.CreateCustomer(Customer);
      AccountNo := LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,PostingType);
      Amount := LibraryRandom.RandDec(10000,2);
      InitializeSetupforTDSReceivable;
      CreateServiceTaxGroupandServiceTaxSetup(ServiceTaxGroups,WORKDATE);
      UpdateServiceTaxGroupInGLAccount(AccountNo,ServiceTaxGroups.Code);
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);

      // [WHEN] Create General Journal with TDS Certificate Receivable and Post.
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,Customer."No.",GenJournalLine."Bal. Account Type"::"G/L Account",AccountNo,Amount);
      GenJournalLine.VALIDATE("Bal. Gen. Posting Type",GenJournalLine."Bal. Gen. Posting Type"::Sale);
      GenJournalLine.VALIDATE("TDS Certificate Receivable",TRUE);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify TDS Certificate Receivable and Certificate Received.
      UpdateTDSReceivablesFromCustomer(Customer."No.",Amount,FALSE);
    END;

    [Test]
    [HandlerFunctions(UpdateTDSReceivablePageHandler)]
    PROCEDURE CreateJournalVoucherWithTDSReceivable@1500055();
    VAR
      Customer@1500000 : Record 18;
      VATPostingSetup@1500004 : Record 325;
      GenJournalTemplate@1500006 : Record 80;
      GenJournalBatch@1500007 : Record 232;
      GenJournalLine@1500008 : Record 81;
      ServiceTaxGroups@1500010 : Record 16471;
      AccountNo@1500002 : Code[20];
      PostingType@1500005 : Option;
      Amount@1500003 : Decimal;
    BEGIN
      // [SCENARIO 164324] Check if the program is creating TDS Receivable  with Journal Voucher

      // [GIVEN] Created GL Account and Customer setup for Journal Voucher
      LibrarySales.CreateCustomer(Customer);
      AccountNo := LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,PostingType);
      Amount := LibraryRandom.RandDec(10000,2);
      InitializeSetupforTDSReceivable;
      CreateServiceTaxGroupandServiceTaxSetup(ServiceTaxGroups,WORKDATE);
      UpdateServiceTaxGroupInGLAccount(AccountNo,ServiceTaxGroups.Code);
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Journal Voucher");
      GenJournalTemplate.MODIFY(TRUE);

      // [WHEN] Create Journal Voucher with TDS Receivable and Post.
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,Customer."No.",GenJournalLine."Bal. Account Type"::"G/L Account",AccountNo,Amount);
      GenJournalLine.VALIDATE("Bal. Gen. Posting Type",GenJournalLine."Bal. Gen. Posting Type"::Sale);
      GenJournalLine.VALIDATE("TDS Certificate Receivable",TRUE);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify TDS Certificate Receivable and Certificate Received.
      UpdateTDSReceivablesFromCustomer(Customer."No.",Amount,FALSE);
    END;

    [Test]
    [HandlerFunctions(UpdateTDSReceivablePageHandler)]
    PROCEDURE CreateCashReceiptJournalWithTDSReceivable@1500060();
    VAR
      Customer@1500000 : Record 18;
      GenJournalTemplate@1500006 : Record 80;
      GenJournalBatch@1500007 : Record 232;
      GenJournalLine@1500008 : Record 81;
      BankAccount@1500010 : Record 270;
      Amount@1500001 : Decimal;
    BEGIN
      // [SCENARIO 164324] Check if the program is creating TDS Certificate Receivable with Cash Receipt Journal

      // [GIVEN] Created GL Account and Customer setup for Cash Receipt Journal
      LibrarySales.CreateCustomer(Customer);
      LibraryERM.CreateBankAccount(BankAccount);
      Amount := LibraryRandom.RandDec(10000,2);
      InitializeSetupforTDSReceivable;
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate.Type::"Cash Receipts");
      GenJournalTemplate.MODIFY(TRUE);

      // [WHEN] Create Cash Receipt Journal with TDS Receivable and Post.
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,Customer."No.",GenJournalLine."Bal. Account Type"::"Bank Account",
        BankAccount."No.",Amount);
      GenJournalLine.VALIDATE("TDS Certificate Receivable",TRUE);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify TDS Certificate Receivable and Certificate Received.
      UpdateTDSReceivablesFromCustomer(Customer."No.",Amount,FALSE);
    END;

    [Test]
    [HandlerFunctions(UpdateTDSReceivablePageHandler)]
    PROCEDURE CreateCashReceiptVoucherWithTDSReceivable@1500067();
    VAR
      Customer@1500000 : Record 18;
      GenJournalTemplate@1500006 : Record 80;
      GenJournalBatch@1500007 : Record 232;
      GenJournalLine@1500008 : Record 81;
      BankAccount@1500010 : Record 270;
      Amount@1500001 : Decimal;
    BEGIN
      // [SCENARIO 164324] Check if the program is creating TDS Receivable with Cash Receipt Voucher

      // [GIVEN] Created GL Account and Customer setup for Cash Receipt Voucher.
      LibrarySales.CreateCustomer(Customer);
      LibraryERM.CreateBankAccount(BankAccount);
      Amount := LibraryRandom.RandDec(10000,2);
      InitializeSetupforTDSReceivable;
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Cash Receipt Voucher");
      GenJournalTemplate.MODIFY(TRUE);

      // [WHEN] Create Cash Receipt Voucher with TDS Receivable and Post.
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,Customer."No.",GenJournalLine."Bal. Account Type"::"Bank Account",
        BankAccount."No.",Amount);
      GenJournalLine.VALIDATE("TDS Certificate Receivable",TRUE);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify TDS Certificate Receivable and Certificate Received.
      UpdateTDSReceivablesFromCustomer(Customer."No.",Amount,FALSE);
    END;

    [Test]
    [HandlerFunctions(UpdateTDSReceivablePageHandler)]
    PROCEDURE CreateBankReceiptVoucherWithTDSReceivable@1500069();
    VAR
      Customer@1500000 : Record 18;
      GenJournalTemplate@1500006 : Record 80;
      GenJournalBatch@1500007 : Record 232;
      GenJournalLine@1500008 : Record 81;
      BankAccount@1500010 : Record 270;
      Amount@1500001 : Decimal;
    BEGIN
      // [SCENARIO 164324] Check if the program is creating TDS Receivable with Bank Receipt Voucher

      // [GIVEN] Created GL Account and Customer setup for Bank Receipt Voucher
      LibrarySales.CreateCustomer(Customer);
      LibraryERM.CreateBankAccount(BankAccount);
      Amount := LibraryRandom.RandDec(10000,2);
      InitializeSetupforTDSReceivable;
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Receipt Voucher");
      GenJournalTemplate.MODIFY(TRUE);

      // [WHEN] Create Bank Receipt Voucher with TDS Receivable and Post.
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,Customer."No.",GenJournalLine."Bal. Account Type"::"Bank Account",
        BankAccount."No.",Amount);
      GenJournalLine.VALIDATE("TDS Certificate Receivable",TRUE);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify TDS Certificate Receivable and Certificate Received.
      UpdateTDSReceivablesFromCustomer(Customer."No.",Amount,FALSE);
    END;

    [Test]
    PROCEDURE CreateSalesOrderWithoutTDSReceivable@1500057();
    VAR
      Customer@1500001 : Record 18;
      SalesHeader@1500005 : Record 36;
      SalesLine@1500006 : Record 37;
      VATPostingSetup@1500010 : Record 325;
      ServiceTaxGroups@1500012 : Record 16471;
      DocumentNo@1500007 : Code[20];
      AccountNo@1500000 : Code[20];
      PostingType@1500009 : Option;
    BEGIN
      // [SCENARIO 164325] Check if the program is creating Without TDS Receivable with Sales Order
      // [FEATURE] Sales Order

      // [GIVEN] Created Customer,GL Account for Sales Order
      LibrarySales.CreateCustomer(Customer);
      AccountNo := LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,PostingType);
      InitializeSetupforTDSReceivable;
      CreateServiceTaxGroupandServiceTaxSetup(ServiceTaxGroups,WORKDATE);
      UpdateServiceTaxGroupInGLAccount(AccountNo,ServiceTaxGroups.Code);

      // [WHEN] Create Sales Order with Structure and Post.
      CreateSalesInvoiceDocumentforTCS(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,Customer."No.",SalesLine.Type::"G/L Account",AccountNo,FALSE);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Verify TDS Certificate Receivable and Certificate Received.
      VerifyTDSCertificateDetails(SalesHeader."Sell-to Customer No.",DocumentNo);
    END;

    [Test]
    PROCEDURE CreateSalesInvoiceWithoutTDSReceivable@1500056();
    VAR
      Customer@1500001 : Record 18;
      SalesHeader@1500005 : Record 36;
      SalesLine@1500006 : Record 37;
      VATPostingSetup@1500010 : Record 325;
      ServiceTaxGroups@1500013 : Record 16471;
      DocumentNo@1500002 : Code[20];
      AccountNo@1500000 : Code[20];
      PostingType@1500003 : Option;
    BEGIN
      // [SCENARIO 164325] Check if the program is creating Without TDS Receivable Sales Invoice
      // [FEATURE] Sales Invoice

      // [GIVEN] Created GL Account and Customer setup for Sales Invoices.
      LibrarySales.CreateCustomer(Customer);
      AccountNo := LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,PostingType);
      InitializeSetupforTDSReceivable;
      CreateServiceTaxGroupandServiceTaxSetup(ServiceTaxGroups,WORKDATE);
      UpdateServiceTaxGroupInGLAccount(AccountNo,ServiceTaxGroups.Code);

      // [WHEN] Create Sales Invoice with Structure and Post.
      CreateSalesInvoiceDocumentforTCS(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Invoice,Customer."No.",SalesLine.Type::"G/L Account",AccountNo,FALSE);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] TDS Certificate Received.
      VerifyTDSCertificateDetails(SalesHeader."Sell-to Customer No.",DocumentNo);
    END;

    [Test]
    PROCEDURE CreateGenJournalWithoutTDSReceivable@1500054();
    VAR
      Customer@1500000 : Record 18;
      VATPostingSetup@1500004 : Record 325;
      GenJournalTemplate@1500006 : Record 80;
      GenJournalBatch@1500007 : Record 232;
      GenJournalLine@1500008 : Record 81;
      ServiceTaxGroups@1500010 : Record 16471;
      AccountNo@1500002 : Code[20];
      PostingType@1500005 : Option;
      Amount@1500003 : Decimal;
    BEGIN
      // [SCENARIO 164325] Check if the program is creating Without TDS Receivable with General Journal Line

      // [GIVEN] Created GL Account and Customer setup for General Journal.
      LibrarySales.CreateCustomer(Customer);
      AccountNo := LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,PostingType);
      Amount := LibraryRandom.RandDec(10000,2);
      InitializeSetupforTDSReceivable;
      CreateServiceTaxGroupandServiceTaxSetup(ServiceTaxGroups,WORKDATE);
      UpdateServiceTaxGroupInGLAccount(AccountNo,ServiceTaxGroups.Code);

      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);

      // [WHEN] Create General Journal without TDS Certificate Receivable and Post.
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,Customer."No.",GenJournalLine."Bal. Account Type"::"G/L Account",AccountNo,Amount);
      GenJournalLine.VALIDATE("Bal. Gen. Posting Type",GenJournalLine."Bal. Gen. Posting Type"::Sale);
      GenJournalLine.VALIDATE("TDS Certificate Receivable",FALSE);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify TDS Certificate Receivable and Certificate Received.
      VerifyTDSCertificateDetails(GenJournalLine."Account No.",GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE CreateJournalVoucherWithoutTDSReceivable@1500053();
    VAR
      Customer@1500000 : Record 18;
      VATPostingSetup@1500004 : Record 325;
      GenJournalTemplate@1500006 : Record 80;
      GenJournalBatch@1500007 : Record 232;
      GenJournalLine@1500008 : Record 81;
      ServiceTaxGroups@1500010 : Record 16471;
      AccountNo@1500002 : Code[20];
      PostingType@1500005 : Option;
      Amount@1500003 : Decimal;
    BEGIN
      // [SCENARIO 164325] Check if the program is creating Without TDS Receivable  with Journal Voucher

      // [GIVEN] Created GL Account and Customer setup for Journal Voucher
      LibrarySales.CreateCustomer(Customer);
      AccountNo := LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,PostingType);
      Amount := LibraryRandom.RandDec(10000,2);
      InitializeSetupforTDSReceivable;
      CreateServiceTaxGroupandServiceTaxSetup(ServiceTaxGroups,WORKDATE);
      UpdateServiceTaxGroupInGLAccount(AccountNo,ServiceTaxGroups.Code);
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Journal Voucher");
      GenJournalTemplate.MODIFY(TRUE);

      // [WHEN] Create Journal Voucher without TDS Receivable and Post.
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,Customer."No.",GenJournalLine."Bal. Account Type"::"G/L Account",AccountNo,Amount);
      GenJournalLine.VALIDATE("Bal. Gen. Posting Type",GenJournalLine."Bal. Gen. Posting Type"::Sale);
      GenJournalLine.VALIDATE("TDS Certificate Receivable",FALSE);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify TDS Certificate Receivable and Certificate Received.
      VerifyTDSCertificateDetails(GenJournalLine."Account No.",GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE CreateCashReceiptJournalWithoutTDSReceivable@1500050();
    VAR
      Customer@1500000 : Record 18;
      GenJournalTemplate@1500006 : Record 80;
      GenJournalBatch@1500007 : Record 232;
      GenJournalLine@1500008 : Record 81;
      BankAccount@1500010 : Record 270;
      Amount@1500001 : Decimal;
    BEGIN
      // [SCENARIO 164325] Check if the program is creating Without TDS Certificate Receivable with Cash Receipt Journal

      // [GIVEN] Created GL Account and Customer setup for Cash Receipt Journal
      LibrarySales.CreateCustomer(Customer);
      LibraryERM.CreateBankAccount(BankAccount);
      Amount := LibraryRandom.RandDec(10000,2);
      InitializeSetupforTDSReceivable;
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate.Type::"Cash Receipts");
      GenJournalTemplate.MODIFY(TRUE);

      // [WHEN] Create Cash Receipt Journal without TDS Receivable and Post.
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,Customer."No.",GenJournalLine."Bal. Account Type"::"Bank Account",
        BankAccount."No.",Amount);
      GenJournalLine.VALIDATE("TDS Certificate Receivable",FALSE);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify TDS Certificate Receivable and Certificate Received.
      VerifyTDSCertificateDetails(GenJournalLine."Account No.",GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE CreateCashReceiptVoucherWithoutTDSReceivable@1500047();
    VAR
      Customer@1500000 : Record 18;
      GenJournalTemplate@1500006 : Record 80;
      GenJournalBatch@1500007 : Record 232;
      GenJournalLine@1500008 : Record 81;
      BankAccount@1500010 : Record 270;
      Amount@1500001 : Decimal;
    BEGIN
      // [SCENARIO 164325] Check if the program is creating Without TDS Receivable with Cash Receipt Voucher

      // [GIVEN] Created GL Account and Customer setup for Cash Receipt Voucher.
      LibrarySales.CreateCustomer(Customer);
      LibraryERM.CreateBankAccount(BankAccount);
      Amount := LibraryRandom.RandDec(10000,2);
      InitializeSetupforTDSReceivable;
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Cash Receipt Voucher");
      GenJournalTemplate.MODIFY(TRUE);

      // [WHEN] Create Cash Receipt Voucher without TDS Receivable and Post.
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,Customer."No.",GenJournalLine."Bal. Account Type"::"Bank Account",
        BankAccount."No.",Amount);
      GenJournalLine.VALIDATE("TDS Certificate Receivable",FALSE);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify TDS Certificate Receivable and Certificate Received.
      VerifyTDSCertificateDetails(GenJournalLine."Account No.",GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE CreateBankReceiptVoucherWithoutTDSReceivable@1500042();
    VAR
      Customer@1500000 : Record 18;
      GenJournalTemplate@1500006 : Record 80;
      GenJournalBatch@1500007 : Record 232;
      GenJournalLine@1500008 : Record 81;
      BankAccount@1500010 : Record 270;
      Amount@1500001 : Decimal;
    BEGIN
      // [SCENARIO 164325] Check if the program is creating Without TDS Receivable with Bank Receipt Voucher

      // [GIVEN] Created GL Account and Customer setup for Bank Receipt Voucher
      LibrarySales.CreateCustomer(Customer);
      LibraryERM.CreateBankAccount(BankAccount);
      Amount := LibraryRandom.RandDec(10000,2);
      InitializeSetupforTDSReceivable;
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Receipt Voucher");
      GenJournalTemplate.MODIFY(TRUE);

      // [WHEN] Create Bank Receipt Voucher without TDS Receivable and Post.
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,Customer."No.",GenJournalLine."Bal. Account Type"::"Bank Account",
        BankAccount."No.",Amount);
      GenJournalLine.VALIDATE("TDS Certificate Receivable",FALSE);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify TDS Certificate Receivable and Certificate Received.
      VerifyTDSCertificateDetails(GenJournalLine."Account No.",GenJournalLine."Document No.");
    END;

    [Test]
    [HandlerFunctions(UpdateTDSReceivablePageHandler)]
    PROCEDURE CreateSalesOrderTDSReceivableWithRectifyTDSCertificate@1500061();
    VAR
      Customer@1500001 : Record 18;
      SalesHeader@1500005 : Record 36;
      SalesLine@1500006 : Record 37;
      VATPostingSetup@1500010 : Record 325;
      ServiceTaxGroups@1500013 : Record 16471;
      AccountNo@1500000 : Code[20];
      PostingType@1500002 : Option;
    BEGIN
      // [SCENARIO 164327] Check if the program is creating TDS Receivable Sales Order with Rectify TDS Certificate
      // [FEATURE] Sales Order

      // [GIVEN] Created Customer,GL Account for Sales Order
      LibrarySales.CreateCustomer(Customer);
      AccountNo := LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,PostingType);
      InitializeSetupforTDSReceivable;
      CreateServiceTaxGroupandServiceTaxSetup(ServiceTaxGroups,WORKDATE);
      UpdateServiceTaxGroupInGLAccount(AccountNo,ServiceTaxGroups.Code);

      // [WHEN] Create Sales Order with Structure and Post.
      CreateSalesInvoiceDocumentforTCS(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,Customer."No.",SalesLine.Type::"G/L Account",AccountNo,TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Verify TDS Certificate Receivable and Certificate Received.
      UpdateTDSReceivablesFromCustomer(Customer."No.",SalesLine.Amount,TRUE);
    END;

    LOCAL PROCEDURE InitializeSetup@1500051(VAR NODNOCHeader@1500008 : Record 13786;Type@1500007 : Option;No@1500006 : Code[20];VAR TDSNatureDeduction@1500005 : Record 13726;VAR TDSSetup@1500004 : Record 13728;ConcessionCode@1500009 : Code[10]);
    VAR
      IncomeTaxAccountingPeriod@1500013 : Record 13724;
      AssesseeCode@1500000 : Record 13727;
      NODNOCLines@1500001 : Record 13785;
    BEGIN
      LibraryERM.CreateIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      IncomeTaxAccountingPeriod.VALIDATE("Starting Date",WORKDATE);
      IncomeTaxAccountingPeriod.VALIDATE("Ending Date",GetRequiredDateFromWorkDate(LibraryRandom.RandInt(5)));
      IncomeTaxAccountingPeriod.MODIFY(TRUE);
      CreateIncomeTaxPeriodSetup(IncomeTaxAccountingPeriod."No.");
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(TDSNatureDeduction,TDSNatureDeduction."TDS Group"::Contractor,AssesseeCode.Code,TDSSetup,
        ConcessionCode,WORKDATE);
      LibraryTDS.CreateNODNOCHeader(NODNOCHeader,Type,No,AssesseeCode.Code);
      LibraryERM.CreateNODNOCLines(NODNOCLines,NODNOCHeader,TDSNatureDeduction.Code);
    END;

    LOCAL PROCEDURE InitializeSetupforTDSReceivable@1500075();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
    BEGIN
      LibraryERM.CreateIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      IncomeTaxAccountingPeriod.VALIDATE("Starting Date",WORKDATE);
      IncomeTaxAccountingPeriod.VALIDATE("Ending Date",GetRequiredDateFromWorkDate(LibraryRandom.RandInt(5)));
      IncomeTaxAccountingPeriod.MODIFY(TRUE);
      CreateIncomeTaxPeriodSetup(IncomeTaxAccountingPeriod."No.");
    END;

    LOCAL PROCEDURE CreateIncomeTaxPeriodSetup@1500035(IncomeTaxAccountingPeriodNo@1500000 : Integer);
    VAR
      IncomeTaxPeriodSetup@1500001 : Record 16501;
    BEGIN
      LibraryERM.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriodNo,IncomeTaxPeriodSetup.Quarter::Q1);
      IncomeTaxPeriodSetup."Starting Date" := WORKDATE;
      IncomeTaxPeriodSetup."Ending Date" := GetRequiredDateFromWorkDate(LibraryRandom.RandInt(2));
      IncomeTaxPeriodSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetRequiredDateFromWorkDate@1500034(Days@1500000 : Integer) NewDate : Date;
    BEGIN
      NewDate := CALCDATE('<' + FORMAT(Days) + 'D>',WORKDATE);
    END;

    LOCAL PROCEDURE UpdateTDSReceivablesFromCustomer@1500039(CustNo@1500000 : Code[20];Amount@1500001 : Decimal;TDSCertificateReceived@1500003 : Boolean);
    VAR
      CustLedgerEntry@1500004 : Record 21;
      UpdateTDSCertDetails@1500002 : Page 16499;
    BEGIN
      UpdateTDSCertDetails.SetCertificateDetail(LibraryUtility.GenerateGUID,WORKDATE,CustNo,Amount,DATE2DMY(WORKDATE,3),1);
      CustomerNo := CustNo;
      CustLedgerEntry.SETRANGE("Customer No.",CustNo);
      CustLedgerEntry.FINDFIRST;
      CustLedgerEntry.VALIDATE("TDS Certificate Received",TDSCertificateReceived);
      CustLedgerEntry.MODIFY(TRUE);

      UpdateTDSCertDetails.RUNMODAL;
    END;

    LOCAL PROCEDURE UpdateTDSNatureDeductionAndTDSSetup@1500031(TDSSetup@1500000 : Record 13728;EffectiveDate@1500005 : Date);
    BEGIN
      TDSSetup.VALIDATE("TDS %",LibraryRandom.RandInt(8));
      TDSSetup.VALIDATE("Surcharge %",LibraryRandom.RandInt(3));
      TDSSetup.VALIDATE("eCESS %",LibraryRandom.RandInt(4));
      TDSSetup.VALIDATE("SHE Cess %",LibraryRandom.RandInt(4));
      TDSSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetEffectiveDate@1500005() : Date;
    BEGIN
      EXIT(CALCDATE('<' +FORMAT(1)+ 'D>',WORKDATE));
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@1500029(VAR PurchaseHeader@1500009 : Record 38;VAR PurchaseLine@1500006 : Record 39;DocumentType@1500005 : Option;VendorNo@1500004 : Code[20];LineType@1500003 : ' ,G/L Account,Item,,Fixed Asset,Charge (Item)';CodeContractor@1500001 : Code[10];EffectiveDate@1500000 : Date;ConcessionCode@1500012 : Code[10]);
    VAR
      Amount@1500002 : Decimal;
    BEGIN
      Amount := LibraryRandom.RandDec(30000,2);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      PurchaseHeader.VALIDATE("Posting Date",EffectiveDate);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,LineType,'',1);
      PurchaseLine.VALIDATE("Direct Unit Cost",Amount);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      IF ConcessionCode <> '' THEN
        PurchaseLine.VALIDATE("Concessional Code",ConcessionCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesInvoiceDocumentforTCS@1500048(VAR SalesHeader@1500007 : Record 36;VAR SalesLine@1500006 : Record 37;DocumentType@1500005 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';CustomerNo@1500004 : Code[20];LineType@1500003 : Option;No@1500002 : Code[20];TDSReceivable@1500000 : Boolean);
    VAR
      Amount@1500001 : Decimal;
    BEGIN
      Amount := LibraryRandom.RandDec(10000,2);
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      SalesHeader.VALIDATE(Structure,CreateStructure);
      SalesHeader.VALIDATE("TDS Certificate Receivable",TDSReceivable);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,LineType,No,LibraryRandom.RandDec(1,2));

      SalesLine.VALIDATE("Unit Price",Amount);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTDSNatureDeductionAndTDSSetup@1500011(VAR TDSNatureDeduction@1500003 : Record 13726;TDSGroup@1500002 : Option;AssesseeCode@1500001 : Code[10];VAR TDSSetup@1500000 : Record 13728;ConcessionalCode@1500004 : Code[10];EffectiveDate@1500005 : Date);
    BEGIN
      LibraryERM.CreateTDSNatureDeduction(TDSNatureDeduction);
      TDSNatureDeduction.VALIDATE("TDS Group",TDSGroup);
      TDSNatureDeduction.MODIFY(TRUE);
      LibraryERM.CreateTDSSetup(TDSSetup,TDSNatureDeduction.Code,AssesseeCode,EffectiveDate,ConcessionalCode);
      IF WORKDATE < EffectiveDate THEN BEGIN
        TDSSetup.VALIDATE("TDS %",LibraryRandom.RandInt(4));
        TDSSetup.VALIDATE("Surcharge %",LibraryRandom.RandInt(3));
        TDSSetup.VALIDATE("eCESS %",LibraryRandom.RandInt(5));
        TDSSetup.VALIDATE("SHE Cess %",LibraryRandom.RandInt(6));
        TDSSetup.MODIFY(TRUE);
      END ELSE BEGIN
        TDSSetup.VALIDATE("TDS %",LibraryRandom.RandInt(2));
        TDSSetup.VALIDATE("Surcharge %",LibraryRandom.RandInt(2));
        TDSSetup.VALIDATE("eCESS %",LibraryRandom.RandInt(4));
        TDSSetup.VALIDATE("SHE Cess %",LibraryRandom.RandInt(3));
        TDSSetup.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateDeductoryCodeAndUpdateOnCompanyInformation@1500032();
    VAR
      DeductorCategory@1500001 : Record 16498;
      CompanyInformation@1500000 : Record 79;
    BEGIN
      CompanyInformation.GET;
      IF DeductorCategory.FINDFIRST THEN
        CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code)
      ELSE BEGIN
        LibraryERM.CreateDeductorCategory(DeductorCategory);
        CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code)
      END;
      CompanyInformation.VALIDATE("T.A.N. No.",LibraryTDS.CreateTANNo);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePaymentLine@1500016(VAR GenJournalLine@1500008 : Record 81;AccountType@1500003 : Option;AccountNo@1500006 : Code[20];BalAccountNo@1500005 : Code[20];TANNo@1500002 : Code[20];BalAccType@1500001 : Option;Amount@1500000 : Decimal);
    VAR
      GenJournalTemplate@1500009 : Record 80;
      GenJournalBatch@1500004 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::Payments);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalTemplate.Type,AccountType,AccountNo,Amount);
      GenJournalLine.VALIDATE("Bal. Account Type",BalAccType);
      GenJournalLine.VALIDATE("Bal. Account No.",BalAccountNo);
      GenJournalLine.VALIDATE("T.A.N. No.",TANNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceTaxGroupandServiceTaxSetup@1500059(VAR ServiceTaxGroups@1500003 : Record 16471;FromDate@1500002 : Date);
    BEGIN
      ServiceTaxGroups.INIT;
      ServiceTaxGroups.VALIDATE(Code,LibraryUtility.GenerateRandomCode(1,16471));
      ServiceTaxGroups.VALIDATE(Description,ServiceTaxGroups.Code);
      ServiceTaxGroups.INSERT(TRUE);
      LibraryServiceTax.CreateServiceTaxSetup(ServiceTaxGroups.Code,FromDate);
    END;

    LOCAL PROCEDURE GetAssesseCodeAndCreateNODNOCLines@1500013(NodNocHeader@1500000 : Record 13786;VAR AssesseeCode@1500001 : Record 13727;VAR TdsNatureOfDeduction@1500002 : Record 13726);
    VAR
      TDSGroup@1500003 : Record 13731;
      TDSSetup@1500004 : Record 13728;
      NodNocLines@1500005 : Record 13785;
    BEGIN
      AssesseeCode.GET(NodNocHeader."Assesse Code");
      CreateTDSNatureDeductionAndTDSSetup(
        TdsNatureOfDeduction,TDSGroup."TDS Group"::Professional,AssesseeCode.Code,TDSSetup,'',WORKDATE);
      LibraryERM.CreateNODNOCLines(NodNocLines,NodNocHeader,TdsNatureOfDeduction.Code);
      UpdateNODNOCLines(NodNocHeader,'',FALSE,FALSE);
    END;

    LOCAL PROCEDURE CreateTaxJournalTemplate@1500420(VAR TaxJournalTemplate@1500222 : Record 16585);
    BEGIN
      WITH TaxJournalTemplate DO BEGIN
        INIT;
        VALIDATE(
          Name,COPYSTR(
            LibraryUtility.GenerateRandomCode(FIELDNO(Name),DATABASE::"Tax Journal Template"),1,
            LibraryUtility.GetFieldLength(DATABASE::"Tax Journal Template",FIELDNO(Name))));
        VALIDATE(Description,Name);
        INSERT(TRUE);
        VALIDATE(Type,Type::"TDS Adjustments");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateTaxJournalBatch@1500421(VAR TaxJournalBatch@1500220 : Record 16586;JournalTemplateName@1500221 : Code[10]);
    BEGIN
      WITH TaxJournalBatch DO BEGIN
        INIT;
        VALIDATE("Journal Template Name",JournalTemplateName);
        VALIDATE(
          Name,COPYSTR(
            LibraryUtility.GenerateRandomCode(FIELDNO(Name),DATABASE::"Tax Journal Batch"),1,
            LibraryUtility.GetFieldLength(DATABASE::"Tax Journal Batch",FIELDNO(Name))));
        VALIDATE(Description,Name);
        INSERT(TRUE);
        VALIDATE("No. Series",CreateNoseries);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateGeneralJournalLine@1500015(VAR GenJournalLine@1500005 : Record 81;PartyType@1500007 : Option;PartyCode@1500004 : Code[20];CodeContractor@1500002 : Code[10];DocumentNo@1500000 : Code[20]) : Code[20];
    BEGIN
      IF DocumentNo = '' THEN BEGIN
        GenJournalLine.VALIDATE("Party Type",PartyType);
        GenJournalLine.VALIDATE("Party Code",PartyCode);
        GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      END ELSE
        GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.MODIFY(TRUE);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE CreateVendorWithPAN@1500001(VAR Vendor@1500000 : Record 23);
    VAR
      GeneralPostingSetup@1500001 : Record 252;
      GenBusinessPostingGroup@1500003 : Record 250;
      GenProductPostingGroup@1500002 : Record 251;
    BEGIN
      LibraryERM.CreateGenBusPostingGroup(GenBusinessPostingGroup);
      LibraryERM.CreateGenProdPostingGroup(GenProductPostingGroup);
      LibraryERM.CreateGeneralPostingSetup(GeneralPostingSetup,GenBusinessPostingGroup.Code,GenProductPostingGroup.Code);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      Vendor.VALIDATE("P.A.N. No.",LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("P.A.N. No."),DATABASE::Vendor));
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAccountNumberInTDSGroup@1500010(VAR TDSGroup@1500001 : Option;VAR AccountNo@1500000 : Code[20]);
    VAR
      TDSGroups@1500002 : Record 13731;
    BEGIN
      TDSGroups.SETRANGE("TDS Group",TDSGroup);
      TDSGroups.FINDFIRST;
      TDSGroups.VALIDATE("TDS Account",AccountNo);
      TDSGroups.VALIDATE("TDS Threshold Amount",LibraryRandom.RandDec(20000,2));
      TDSGroups.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostTDSAdjustmentJournal@1500408(PartyCode@1500302 : Code[20];VAR DocumentNo@1500002 : Code[20];VAR AdjustmentAmount@1500003 : Decimal) : Code[20];
    VAR
      TaxJournalTemplate@1500303 : Record 16585;
      TaxJournalBatch@1500304 : Record 16586;
      TDSEntry@1500305 : Record 13729;
      DummyTaxJournalLine@1500000 : Record 16587;
      TDSAdjustmentJournal@1500004 : TestPage 13791;
    BEGIN
      CreateTaxJournalTemplate(TaxJournalTemplate);
      CreateTaxJournalBatch(TaxJournalBatch,TaxJournalTemplate.Name);
      TDSEntry.SETRANGE("Party Code",PartyCode);
      TDSEntry.FINDFIRST;
      COMMIT;
      WITH TDSAdjustmentJournal DO BEGIN
        OPENEDIT;
        CurrentJnlBatchName.SETVALUE(TaxJournalBatch.Name);
        "Transaction No".SETVALUE(TDSEntry."Entry No.");
        DummyTaxJournalLine.SETRANGE("TDS/TCS Transaction No.",TDSEntry."Entry No.");
        DummyTaxJournalLine.FINDFIRST;
        DummyTaxJournalLine.VALIDATE("TDS/TCS % Applied",1);
        DocumentNo := DummyTaxJournalLine."Document No.";
        AdjustmentAmount := DummyTaxJournalLine.Amount;
        DummyTaxJournalLine.MODIFY(TRUE);
        Post.INVOKE;
        COMMIT;
      END;
      EXIT(TaxJournalTemplate.Name);
    END;

    LOCAL PROCEDURE PayTDS@1500008(VAR GenJournalLine@1500000 : Record 81);
    VAR
      TDSEntry@1500002 : Record 13729;
      PayTDS1@1500001 : Page 13788;
    BEGIN
      WITH GenJournalLine DO BEGIN
        TESTFIELD("Document No.");
        TESTFIELD("Account No.");
        TESTFIELD("T.A.N. No.");
        "Pay TDS" := TRUE;
        MODIFY;
        TDSEntry.RESET;
        TDSEntry.SETRANGE("Account No.","Account No.");
        TDSEntry.SETRANGE("T.A.N. No.","T.A.N. No.");
        TDSEntry.SETFILTER("Total TDS Including SHE CESS",'<>%1',0);
        TDSEntry.SETRANGE("TDS Paid",FALSE);
        TDSEntry.SETRANGE(Reversed,FALSE);
        IF TDSEntry.FINDFIRST THEN BEGIN
          PayTDS1.SetBatch(GenJournalLine."Journal Batch Name",GenJournalLine."Journal Template Name",GenJournalLine."Line No.");
          PayTDS1.PayTDS(TDSEntry)
        END ELSE
          ERROR(AccountErr,"Account No.");
      END;
    END;

    LOCAL PROCEDURE CalculateTDSFromBase@1500007(VAR ExpectedTDSAmounts@1500006 : Record 13729;VAR TDSSetup@1500000 : Record 13728;TaxBaseAmount@1500003 : Decimal);
    VAR
      GenJournalLine@1500002 : Record 81;
    BEGIN
      WITH ExpectedTDSAmounts DO BEGIN
        "TDS Base Amount" := TaxBaseAmount;
        "TDS Amount" := LibraryTDS.RoundTDS(TDSSetup."TDS %" / 100 * "TDS Base Amount");
        "Surcharge Amount" := LibraryTDS.RoundTDS(TDSSetup."Surcharge %" / 100 * "TDS Amount");
        "eCESS Amount" := LibraryTDS.RoundTDS(TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        "SHE Cess Amount" := LibraryTDS.RoundTDS(TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        "Total TDS Including SHE CESS" := "TDS Amount" + "eCESS Amount" + "SHE Cess Amount" + "Surcharge Amount";
      END;
    END;

    LOCAL PROCEDURE GetTaxEntry@1500004(VAR GenJournalLine@1500001 : Record 81;VAR Amount@1500000 : Decimal);
    VAR
      TDSEntry@1500002 : Record 13729;
    BEGIN
      Amount := 0;
      TDSEntry.SETRANGE("Pay TDS Document No.",GenJournalLine."Document No.");
      TDSEntry.SETRANGE("Account No.",GenJournalLine."Account No.");
      TDSEntry.SETRANGE("TDS Paid",FALSE);
      IF TDSEntry.FINDFIRST THEN
        REPEAT
          Amount := Amount + TDSEntry."Bal. TDS Including SHE CESS";
        UNTIL TDSEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyBankEntry@1500003(DocumentNo@1500001 : Code[20];Amount@1500000 : Decimal);
    VAR
      BankAccountLedgerEntry@1500004 : Record 271;
      CreditAmount@1500002 : Decimal;
    BEGIN
      BankAccountLedgerEntry.SETRANGE("Document No.",DocumentNo);
      BankAccountLedgerEntry.FINDSET;
      REPEAT
         CreditAmount += BankAccountLedgerEntry."Credit Amount";
      UNTIL BankAccountLedgerEntry.NEXT = 0;
      Assert.AreEqual(ABS(CreditAmount),Amount,STRSUBSTNO(AmountErr,CreditAmount,Amount));
    END;

    [Normal]
    LOCAL PROCEDURE VerifyGLEntry@1500002(DocumentNo@1500001 : Code[20];Amount@1500000 : Decimal);
    VAR
      GLEntry@1500004 : Record 17;
      GeneralLedgerSetup@1500002 : Record 98;
      CreditAmount@1500003 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDSET;
      REPEAT
        CreditAmount += GLEntry."Credit Amount";
      UNTIL GLEntry.NEXT = 0;
      Assert.AreEqual(ABS(CreditAmount),Amount,STRSUBSTNO(AmountErr,CreditAmount,Amount));
    END;

    LOCAL PROCEDURE CalcExpectedTDSAmountsPurchaseLine@1500021(VAR ExpectedTDSAmtPurchaseLine@1500000 : Record 39;TDSSetup@1500002 : Record 13728;PurchaseLineAmount@1500001 : Decimal);
    BEGIN
      WITH ExpectedTDSAmtPurchaseLine DO BEGIN
        "TDS %" := TDSSetup."TDS %";
        "Surcharge %" := TDSSetup."Surcharge %";
        "eCESS % on TDS" := TDSSetup."eCESS %";
        "SHE Cess % On TDS" := TDSSetup."SHE Cess %";
        "TDS Base Amount" := PurchaseLineAmount;
        "TDS Amount" := LibraryTDS.RoundTDS((TDSSetup."TDS %" / 100 * "TDS Base Amount"));
        "Surcharge Amount" := LibraryTDS.RoundTDS((TDSSetup."Surcharge %" / 100 * "TDS Amount"));
        "eCESS on TDS Amount" := LibraryTDS.RoundTDS((TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount")));
        "SHE Cess on TDS Amount" := LibraryTDS.RoundTDS((TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount")));
        "Total TDS Including SHE CESS" :=
          LibraryTDS.RoundTDS("TDS Amount" + "eCESS on TDS Amount" + "SHE Cess on TDS Amount"+"Surcharge Amount");
      END;
    END;

    LOCAL PROCEDURE VerifyTDSAmountsPurchaseDoc@1500078(VAR ExpectedPurchaseLineTDSValue@1500005 : Record 39;PurchaseLine@1500007 : Record 39);
    VAR
      GLSetup@1500003 : Record 98;
      PurchLine@1500002 : Record 39;
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchaseLine."Document Type");
      PurchLine.SETRANGE("Document No.",PurchaseLine."Document No.");
      PurchLine.FINDFIRST;

      GLSetup.GET;
      Assert.AreEqual(
        ExpectedPurchaseLineTDSValue."TDS %",PurchLine."TDS %",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("TDS %"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."TDS Amount",PurchLine."TDS Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("TDS Amount"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."TDS Base Amount",PurchLine."TDS Base Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("TDS Base Amount"),PurchLine.TABLECAPTION));
      Assert.AreEqual(
        ExpectedPurchaseLineTDSValue."eCESS % on TDS",PurchLine."eCESS % on TDS",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("eCESS % on TDS"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."eCESS on TDS Amount",PurchLine."eCESS on TDS Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("eCESS on TDS Amount"),PurchLine.TABLECAPTION));
      Assert.AreEqual(
        ExpectedPurchaseLineTDSValue."SHE Cess % On TDS",PurchLine."SHE Cess % On TDS",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("SHE Cess % On TDS"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."SHE Cess on TDS Amount",PurchLine."SHE Cess on TDS Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("SHE Cess on TDS Amount"),PurchLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE UpdateNODNOCLines@1500033(NODNOCHeader@1500000 : Record 13786;ConcessionCode@1500001 : Code[10];ThresholdOverlook@1500003 : Boolean;SurchargeOverlook@1500004 : Boolean);
    VAR
      NODNOCLines@1500002 : Record 13785;
    BEGIN
      NODNOCLines.SETRANGE(Type,NODNOCHeader.Type);
      NODNOCLines.SETRANGE("No.",NODNOCHeader."No.");
      NODNOCLines.FINDSET;
      NODNOCLines.VALIDATE("Concessional Code",ConcessionCode);
      NODNOCLines.VALIDATE("Threshold Overlook",ThresholdOverlook);
      NODNOCLines.VALIDATE("Surcharge Overlook",SurchargeOverlook);
      NODNOCLines.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGnlJnlLineWithCheckEntry@1500036(VAR GenJournalLine@1500005 : Record 81;PartyType@1500007 : Option;PartyCode@1500004 : Code[20];CodeContractor@1500002 : Code[10];DocumentNo@1500000 : Code[20]) : Code[20];
    BEGIN
      IF DocumentNo = '' THEN BEGIN
        GenJournalLine.VALIDATE("Party Type",PartyType);
        GenJournalLine.VALIDATE("Party Code",PartyCode);
        GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
        GenJournalLine.VALIDATE("Bank Payment Type",GenJournalLine."Bank Payment Type"::"Manual Check");
        GenJournalLine.VALIDATE("Cheque Date",WORKDATE);
        GenJournalLine.VALIDATE("Cheque No.",LibraryUtility.GenerateGUID);
      END ELSE
        GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.MODIFY(TRUE);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE UpdateServiceTaxGroupInGLAccount@1500064(GLAccNo@1500000 : Code[20];ServiceTaxGroup@1500001 : Code[20]);
    VAR
      GLAccount@1500002 : Record 15;
    BEGIN
      GLAccount.GET(GLAccNo);
      GLAccount.VALIDATE("Service Tax Group Code",ServiceTaxGroup);
      GLAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBankCharge@1500014() : Code[10];
    VAR
      BankCharge@1500000 : Record 16510;
      GLAccount@1500001 : Record 15;
    BEGIN
      WITH BankCharge DO BEGIN
        LibraryERM.CreateGLAccount(GLAccount);
        INIT;
        VALIDATE(Code,LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::"Bank Charge"));
        VALIDATE(Description,Code);
        VALIDATE(Account,GLAccount."No.");
        INSERT(TRUE);
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE CreateJournalBankCharge@1500037(GenJournalLine@1500000 : Record 81;BankCharge@1500003 : Code[10];Amount2@1500001 : Decimal);
    VAR
      JnlBankCharges@1500004 : Record 16511;
    BEGIN
      WITH JnlBankCharges DO BEGIN
        INIT;
        VALIDATE("Journal Template Name",GenJournalLine."Journal Template Name");
        VALIDATE("Journal Batch Name",GenJournalLine."Journal Batch Name");
        VALIDATE("Line No.",GenJournalLine."Line No.");
        VALIDATE("Bank Charge",BankCharge);
        INSERT(TRUE);
        VALIDATE(Amount,Amount2);
        MODIFY(TRUE);
      END
    END;

    LOCAL PROCEDURE CreateNoseries@1500418() : Code[10];
    VAR
      NoSeries@1501000 : Record 308;
      NoSeriesLine@1501001 : Record 309;
    BEGIN
      LibraryUtility.CreateNoSeries(NoSeries,TRUE,TRUE,FALSE);
      LibraryUtility.CreateNoSeriesLine(NoSeriesLine,NoSeries.Code,'00001','99999');  // Required 5 Digits for Starting No.and Ending No.'s.
      EXIT(NoSeries.Code);
    END;

    LOCAL PROCEDURE CreateStructure@1500052() : Code[10];
    VAR
      StructureHeader@1500000 : Record 13792;
      StructureDetails@1500003 : Record 13793;
    BEGIN
      LibraryERM.CreateStructureHeader(StructureHeader);
      LibraryERM.CreateStructureDetails(StructureDetails,StructureHeader.Code,1,StructureDetails.Type::"Service Tax",'',''); // Value 1 for Calculation Order.
      StructureDetails.VALIDATE("Include Base",TRUE);
      StructureDetails.MODIFY(TRUE);
      EXIT(StructureHeader.Code);
    END;

    [Normal]
    LOCAL PROCEDURE OpenPurchaseOrderStatistics@1500071(PurchaseHeader@1500000 : Record 38);
    VAR
      PurchasesPayablesSetup@1500002 : Record 312;
      PurchaseLine@1500001 : Record 39;
    BEGIN
      PurchasesPayablesSetup.GET;
      WITH PurchaseHeader DO BEGIN
        PurchaseLine.SETRANGE("Document Type","Document Type");
        PurchaseLine.SETRANGE("Document No.","No.");
        PurchaseLine.FINDSET;
        IF PurchasesPayablesSetup."Calc. Inv. Discount" THEN BEGIN
          CalcInvDiscForHeader;
          COMMIT;
        END;
        REPEAT
          IF Structure <> '' THEN BEGIN
            PurchaseLine.CalculateStructures(PurchaseHeader);
            PurchaseLine.AdjustStructureAmounts(PurchaseHeader);
            PurchaseLine.UpdatePurchLines(PurchaseHeader);
          END;
          PurchaseLine.CalculateTDS(PurchaseHeader);
        UNTIL PurchaseLine.NEXT = 0;
        COMMIT;
        PAGE.RUNMODAL(PAGE::"Purchase Order Statistics",PurchaseHeader);
      END;
    END;

    [ModalPageHandler]
    PROCEDURE PurchOrderStatisticsMPH@1500072(VAR PurchaseOrderStatistics@1500000 : TestPage 403);
    VAR
      Value@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Value);
      PurchaseOrderStatistics.Control1500012.ASSERTEQUALS(Value);
    END;

    LOCAL PROCEDURE VerifyTDSCertificateDetails@1500058(CustNo@1500000 : Code[20];DocumentNo@1500002 : Code[20]);
    VAR
      CustLedgerEntry@1500001 : Record 21;
      CustDocument@1500003 : Code[20];
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.",CustNo);
      IF CustLedgerEntry.FINDFIRST THEN BEGIN
        CustLedgerEntry.CALCFIELDS(Amount);
        CustDocument := CustLedgerEntry."Document No.";
      END;
      Assert.AreEqual(CustDocument,DocumentNo,STRSUBSTNO(DocumentErr,DocumentNo));
    END;

    [Normal]
    LOCAL PROCEDURE VerifyPurchaseOrderStatistics@1500074(PurchaseHeader@1500001 : Record 38;Amount@1500000 : Decimal);
    BEGIN
      LibraryVariableStorage.Enqueue(Amount);
      OpenPurchaseOrderStatistics(PurchaseHeader);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@1500022(QuestionText@1500001 : Text[1024];VAR Relpy@1500000 : Boolean);
    BEGIN
      Relpy := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500502(Msg@1560501 : Text);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE UpdateTDSReceivablePageHandler@1500045(VAR UpdateTDSCertDetails@1500000 : TestPage 16499);
    BEGIN
      UpdateTDSCertDetails.FILTER.SETFILTER("Customer No.",CustomerNo);
      UpdateTDSCertDetails.FILTER.SETFILTER("TDS Certificate Receivable",FORMAT(TRUE));
      UpdateTDSCertDetails.FILTER.SETFILTER("Certificate Received",FORMAT(FALSE));
      UpdateTDSCertDetails.Action1500033.INVOKE;
    END;

    BEGIN
    END.
  }
}

