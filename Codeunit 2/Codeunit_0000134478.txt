OBJECT Codeunit 134478 ERM Dimension Fixed Assets
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1004 : Codeunit 130000;
      LibraryDimension@1005 : Codeunit 131001;
      LibraryERM@1002 : Codeunit 131300;
      LibraryFiscalYear@1010 : Codeunit 131302;
      LibraryFixedAsset@1006 : Codeunit 131330;
      LibraryUtility@1003 : Codeunit 131000;
      LibraryRandom@1000 : Codeunit 130440;
      isInitialized@1001 : Boolean;
      DepreciationBookErr@1008 : TextConst '@@@=%1: Deprecciation Book Name;ENU=The %1 does not exist.';
      LinesMustNotBeCreatedErr@1009 : TextConst '@@@=%1: Fixed Asset Name;ENU="Lines must not be created for Fixed Asset %1. "';
      DimensionValueErr@1007 : TextConst '@@@=%1: Table Caption1,%2: Field Value1,%3: Field Value2,%4: Field Value3,%5:Field Caption1,%6:Field Caption2,%7:Field Value4,%8: Table Caption2,%9: Field Value5.;ENU=A dimension used in %1 %2, %3, %4 has caused an error. Select a %5 for the %6 %7 for %8 %9.';
      CheckDimValueInGenJournalErr@1011 : TextConst '@@@=%1: Table Caption1,%2: Field Value1,%3: Field Value2,%4: Field Value3.;ENU="Wrong %1 in Dimension Set for Gen. Journal Line. Document No. = %2, Account No. = %3, Batch Name = %4."';

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;
      LibraryFiscalYear.CreateFiscalYear;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryFixedAsset.CreateFAIncomeTaxAccPeriod(WORKDATE);

      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE AutomaticInsuranceLedger@15();
    VAR
      GenJournalLine@1000 : Record 81;
      OldInsuranceDeprBook@1004 : Code[10];
      AutomaticInsurancePosting@1003 : Boolean;
      DimensionSetID@1005 : Integer;
    BEGIN
      // Test the Fixed Asset General Journal with Insurance.

      // 1.Setup: Create FA General Journal Line of Fixed Asset type, update the Insurance Number, modify the
      // Insurance Depreciation Book in FA Setup Dimension in General Journal Line.
      Initialize;
      CreateFAGLJournalLine(GenJournalLine);
      InsuranceInGenJournalLine(GenJournalLine,FindInsurance);
      OldInsuranceDeprBook := InsuranceDeprBookInFASetup(GenJournalLine."Depreciation Book Code");
      AutomaticInsurancePosting := ModifyInsurancePosting(TRUE);
      AttachDimensionInJournalLine(GenJournalLine);
      DimensionSetID := GenJournalLine."Dimension Set ID";

      // 2.Exercise: Post the General Journal Line.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3.Verify: Verify Insurance Ledger Entries.
      VerifyInsCoverageLedgerEntry(GenJournalLine."Account No.",DimensionSetID);

      // 4.Tear Down: Change back to the Insurance Depreciation Book in FA Setup.
      InsuranceDeprBookInFASetup(OldInsuranceDeprBook);
      ModifyInsurancePosting(AutomaticInsurancePosting);
    END;

    [Test]
    PROCEDURE ManualInsuranceNotDefaultDim@90();
    VAR
      GenJournalLine@1007 : Record 81;
      OldInsuranceDeprBook@1003 : Code[10];
      AutomaticInsurancePosting@1002 : Boolean;
      OldUseDefaultDimension@1001 : Boolean;
      DimensionSetID@1000 : Integer;
    BEGIN
      // Test the Fixed Asset General Journal with Automatic Insurance Posting False in FA Setup with Insurance and
      // Use Default Dimension False in Depreciation Book.

      // 1.Setup: Create General Journal Line of Fixed Asset type and update the Insurance Number, Dimension in General Journal Line.
      Initialize;
      CreateFAGLJournalLine(GenJournalLine);
      OldUseDefaultDimension := UseDefaultDimDepreciationBook(GenJournalLine."Depreciation Book Code",FALSE);
      InsuranceInGenJournalLine(GenJournalLine,FindInsurance);
      AutomaticInsurancePosting := ModifyInsurancePosting(FALSE);
      OldInsuranceDeprBook := InsuranceDeprBookInFASetup(GenJournalLine."Depreciation Book Code");
      AttachDimensionInJournalLine(GenJournalLine);
      DimensionSetID := GenJournalLine."Dimension Set ID";

      // 2.Exercise: Post the General Journal Line.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3.Verify: Verify Insurance Journal Line.
      VerifyInsuranceJournalLine(GenJournalLine."Account No.",DimensionSetID);

      // 4.Tear Down: Change back to the FA Setup.
      InsuranceDeprBookInFASetup(OldInsuranceDeprBook);
      ModifyInsurancePosting(AutomaticInsurancePosting);
      UseDefaultDimDepreciationBook(GenJournalLine."Depreciation Book Code",OldUseDefaultDimension);
    END;

    [Test]
    PROCEDURE ManualInsuranceWithDefaultDim@91();
    VAR
      DefaultDimension@1005 : Record 352;
      GenJournalLine@1007 : Record 81;
      OldInsuranceDeprBook@1003 : Code[10];
      AutomaticInsurancePosting@1002 : Boolean;
      OldUseDefaultDimension@1001 : Boolean;
    BEGIN
      // Test the Fixed Asset General Journal with Automatic Insurance Posting FALSE in FA Setup with new Insurance and
      // Use Default Dimension True in Depreciation Book.

      // 1.Setup: Create General Journal Line of Fixed Asset type and update the Insurance Number.
      Initialize;
      CreateFAGLJournalLine(GenJournalLine);
      OldUseDefaultDimension := UseDefaultDimDepreciationBook(GenJournalLine."Depreciation Book Code",TRUE);
      InsuranceInGenJournalLine(GenJournalLine,CreateInsuranceWithDimension);
      AutomaticInsurancePosting := ModifyInsurancePosting(FALSE);
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Insurance,GenJournalLine."Insurance No.");
      OldInsuranceDeprBook := InsuranceDeprBookInFASetup(GenJournalLine."Depreciation Book Code");
      AttachDimensionInJournalLine(GenJournalLine);

      // 2.Exercise: Post the General Journal Line.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3.Verify: Verify Insurance's Dimension on Insurance Journal Line.
      VerifyInsuranceDimension(DefaultDimension,GenJournalLine."Account No.");

      // 4.Tear Down: Change back to the FA Setup.
      InsuranceDeprBookInFASetup(OldInsuranceDeprBook);
      ModifyInsurancePosting(AutomaticInsurancePosting);
      UseDefaultDimDepreciationBook(GenJournalLine."Depreciation Book Code",OldUseDefaultDimension);
    END;

    [Test]
    PROCEDURE DepreciationBalanceAccount@2();
    VAR
      FAAllocation@1001 : Record 5615;
      FANo@1000 : Code[20];
    BEGIN
      // Test the Calculate Depreciation with Balance Account.

      // 1.Setup,Exercise: Calculate Depreciation.
      Initialize;
      FANo := DepreciationWithFixedAsset(FAAllocation,TRUE);

      // 2.Verify: Verify Dimension on FA GL Journal.
      VerifyDimensionOnGLJournal(FANo,FAAllocation.Code,FAAllocation."Allocation Type"::Depreciation);
      VerifyFAGLJournal(FANo,0);
    END;

    [Test]
    PROCEDURE DepreciationNotBalanceAccount@28();
    VAR
      FAAllocation@1001 : Record 5615;
      FANo@1000 : Code[20];
    BEGIN
      // Test the Calculate Depreciation with out Balance Account.

      // 1.Setup,Exercise: Calculate Depreciation.
      Initialize;
      FANo := DepreciationWithFixedAsset(FAAllocation,FALSE);

      // 2.Verify: Verify FA General Journal.
      VerifyFAGLJournal(FANo,0);
    END;

    [Test]
    PROCEDURE DimensionOnFALedgerEntry@30();
    VAR
      GenJournalLine@1000 : Record 81;
      DimensionSetID@1002 : Integer;
    BEGIN
      // Test the FA Ledger Entry with FA General Journal.

      // 1.Setup: Create FA Gen Journal Line of Fixed Asset type, Dimension in FA General Journal Line.
      Initialize;
      CreateFAGLJournalLine(GenJournalLine);
      AttachDimensionInJournalLine(GenJournalLine);
      DimensionSetID := GenJournalLine."Dimension Set ID";

      // 2.Exercise: Post the General Journal Line.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3.Verify: Verify FA Ledger Entries.
      VerifyFALedgerEntry(GenJournalLine."Account No.",DimensionSetID);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CancelLedgerEntry@64();
    VAR
      FADepreciationBook@1003 : Record 5612;
      FALedgerEntry@1000 : Record 5601;
      GenJournalLine@1001 : Record 81;
      DimensionSetID@1005 : Integer;
    BEGIN
      // 1.Setup: Create Fixed Asset, Depreciation Book, FA Depreciation Book, create FA Journal Line, create the Dimensions for
      // FA General Journal, post the created FA Gl Journal.
      Initialize;
      CreateFixedAssetDepreciation(FADepreciationBook);
      CreateFAGLJournalLines(GenJournalLine,FADepreciationBook);
      AttachDimensionInJournalLine(GenJournalLine);
      DimensionSetID := GenJournalLine."Dimension Set ID";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      FindFALedgerEntry(FALedgerEntry,GenJournalLine."Account No.");

      // Exercise: Cancel FA Ledger Entries.
      RunCancelFAEntries(FALedgerEntry);

      // Verify: Verify the FA Journal Line.
      VerifyFAGLJournal(GenJournalLine."Account No.",DimensionSetID);
      LibraryFixedAsset.VerifyLastFARegisterGLRegisterOneToOneRelation; // TFS 376879
    END;

    [Test]
    PROCEDURE CancelLedgerBalanceAccount@26();
    BEGIN
      // Test the Cancel FA Ledger Entry with Balance Account.
      CancelFALedgerEntry(TRUE);
    END;

    [Test]
    PROCEDURE CancelLedgerNotBalanceAccount@58();
    BEGIN
      // Test the Cancel FA Ledger Entry with out Balance Account.
      CancelFALedgerEntry(FALSE);
    END;

    LOCAL PROCEDURE CancelFALedgerEntry@57(BalAccount@1000 : Boolean);
    VAR
      FADepreciationBook@1001 : Record 5612;
      GenJournalLine@1004 : Record 81;
      DimensionSetID@1005 : Integer;
    BEGIN
      // 1.Setup: Create Fixed Asset, Depreciation Book, FA Depreciation Book, create FA Journal Line, create the Dimensions for
      // FA General Journal, post the created FA Gl Journal.
      Initialize;
      CreateFixedAssetDepreciation(FADepreciationBook);
      CreateFAGLJournalLines(GenJournalLine,FADepreciationBook);
      AttachDimensionInJournalLine(GenJournalLine);
      DimensionSetID := GenJournalLine."Dimension Set ID";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2.Exercise: Run the Cancel FA Ledger Entry.
      RunCancelFALedgerEntry(GenJournalLine."Account No.",GenJournalLine."Depreciation Book Code",BalAccount);

      // 3.Verify: Verify General Journal.
      VerifyFAGLJournal(GenJournalLine."Account No.",DimensionSetID);
      LibraryFixedAsset.VerifyLastFARegisterGLRegisterOneToOneRelation; // TFS 376879
    END;

    [Test]
    PROCEDURE DepreciationByCopyDepreciation@31();
    VAR
      GenJournalLine@1001 : Record 81;
      DimensionSetID@1003 : Integer;
      DepreciationBookToCopy@1002 : Code[10];
    BEGIN
      // Test the Copy Depreciation Book.

      // 1.Setup: Create FA General Journal Line, create Dimension for FA General Journal, post the FA GL Journal, Create a new
      // Depreciation Book.
      Initialize;
      CreateFAGLJournalLine(GenJournalLine);
      AttachDimensionInJournalLine(GenJournalLine);
      DimensionSetID := GenJournalLine."Dimension Set ID";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      DepreciationBookToCopy := CreateDepreciationBookAndSetup;

      // 2.Exercise: Run Copy Depreciation Book.
      RunCopyDepreciationBook(GenJournalLine."Account No.",GenJournalLine."Depreciation Book Code",DepreciationBookToCopy);

      // 3.Verify: Verify FA Journal Line and FA Ledger Entry.
      VerifyFAJournalLine(GenJournalLine."Account No.",DepreciationBookToCopy,DimensionSetID);
      VerifyFALedgerEntry(GenJournalLine."Account No.",DimensionSetID);
    END;

    [Test]
    PROCEDURE DuplicateWithOutUseDefaultDim@71();
    BEGIN
      // Test the creation of Journal by Duplication of Journal and Use Default Dimension is FALSE.
      CreatingJournalByDuplication(FALSE);
    END;

    [Test]
    PROCEDURE DuplicateWithUseDefaultDim@72();
    BEGIN
      // Test the creation of Journal by Duplication of Journal and Use Default Dimension is TRUE.
      CreatingJournalByDuplication(TRUE);
    END;

    LOCAL PROCEDURE CreatingJournalByDuplication@69(UseDefaultDimension@1007 : Boolean);
    VAR
      FADepreciationBook@1003 : Record 5612;
      FixedAsset@1004 : Record 5600;
      GenJournalLine@1000 : Record 81;
      OldUseDefaultDimension@1006 : Boolean;
      DimensionSetID@1005 : Integer;
      DepreciationBookToCopy@1001 : Code[10];
    BEGIN
      // 1.Setup: Create FA General Journal Line, create Dimension for FA General Journal, post the FA GL Journal, Create a new
      // Depreciation Book.
      Initialize;
      CreateFAGLJournalLine(GenJournalLine);
      FixedAsset.GET(GenJournalLine."Account No.");
      OldUseDefaultDimension := UseDefaultDimDepreciationBook(GenJournalLine."Depreciation Book Code",UseDefaultDimension);
      UseDefaultDimDepreciationBook(GenJournalLine."Depreciation Book Code",OldUseDefaultDimension);
      DepreciationBookToCopy := CreateDepreciationBookAndSetup;
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",DepreciationBookToCopy,FixedAsset."FA Posting Group");
      GenJournalLine.VALIDATE("Duplicate in Depreciation Book",DepreciationBookToCopy);
      GenJournalLine.MODIFY(TRUE);
      AttachDimensionInJournalLine(GenJournalLine);
      DimensionSetID := GenJournalLine."Dimension Set ID";

      // 2.Exercise: Post the FA General Line.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3.Verify: Verify the FA Journal.
      VerifyFAJournalLine(FixedAsset."No.",DepreciationBookToCopy,DimensionSetID);
    END;

    [Test]
    PROCEDURE DimensionOnFixedAsset@80();
    VAR
      DimensionValue@1004 : Record 349;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Test the dimension in FA Ledger Entry of Fixed Asset.

      // 1.Setup: Create FA Gen Journal Line of Fixed Asset type, attach dimension on Fixed Asset, update the Account No in FA General
      // Journal Line.
      Initialize;
      CreateFAGLJournalLine(GenJournalLine);
      AttachDimensionOnFixedAsset(DimensionValue,GenJournalLine."Account No.");
      UpdateAccountNoInJournalLine(GenJournalLine,GenJournalLine."Account No.");

      // 2.Exercise: Post the General Journal Line.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3.Verify: Verify dimension in FA Ledger Entry.
      VerifyDimensionOnLedgerEntry(DimensionValue,GenJournalLine."Account No.");
    END;

    [Test]
    PROCEDURE DimensionOnMaintenanceLedger@40();
    VAR
      GenJournalLine@1000 : Record 81;
      DimensionSetID@1003 : Integer;
    BEGIN
      // Test the Dimension in Maintenance Ledger Entry.

      // 1.Setup: Create FA General Journal Line of Posting Type Maintenance, create Dimension for FA General Journal.
      Initialize;
      CreateFAGLJournalLine(GenJournalLine);
      ModifyFAPostingType(GenJournalLine,GenJournalLine."FA Posting Type"::Maintenance);
      AttachDimensionInJournalLine(GenJournalLine);
      DimensionSetID := GenJournalLine."Dimension Set ID";

      // 2.Exercise: Post the FA General Journal Line.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3.Verify: Verify Maintenance Ledger Entry.
      VerifyMaintenanceLedgerEntry(GenJournalLine."Account No.",DimensionSetID);
    END;

    [Test]
    PROCEDURE DimensionOnLedgerEntry@44();
    VAR
      FADepreciationBook@1008 : Record 5612;
      GenJournalBatch@1007 : Record 232;
      GenJournalLine@1000 : Record 81;
      GLAccount@1002 : Record 15;
      DimensionSetID@1005 : Integer;
      DimensionSetID2@1006 : Integer;
      FixedAssetNo@1001 : Code[20];
      FixedAssetNo2@1003 : Code[20];
    BEGIN
      // Test the Dimension in FA Ledger Entry and Maintenance Ledger Entry.

      // 1.Setup: Create FA General Journal Lines and attach Dimension on FA General Journal Line.
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      CreateFAGLJournalLine(GenJournalLine);
      FixedAssetNo := GenJournalLine."Account No.";
      AttachDimensionInJournalLine(GenJournalLine);
      DimensionSetID := GenJournalLine."Dimension Set ID";
      GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
      CreateFixedAssetDepreciation(FADepreciationBook);
      FixedAssetNo2 := FADepreciationBook."FA No.";
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,FixedAssetNo2,GenJournalLine."FA Posting Type"::Maintenance,GLAccount."No.",
        LibraryRandom.RandDec(1000,2));  // Take Random Value.
      AttachDimensionInJournalLine(GenJournalLine);
      DimensionSetID2 := GenJournalLine."Dimension Set ID";

      // 2.Exercise: Post the FA General Journal Line.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3.Verify: Verify FA Ledger Entry and Maintenance Ledger Entry.
      VerifyFALedgerEntry(FixedAssetNo,DimensionSetID);
      VerifyMaintenanceLedgerEntry(FixedAssetNo2,DimensionSetID2);
      LibraryFixedAsset.VerifyLastFARegisterGLRegisterOneToOneRelation; // TFS 376879
    END;

    [Test]
    PROCEDURE DimensionOnInsuranceLedger@19();
    VAR
      Insurance@1003 : Record 5628;
      InsuranceJournalLine@1000 : Record 5635;
      FANo@1001 : Code[20];
      DimensionSetID@1002 : Integer;
    BEGIN
      // Test the Dimension in Insurance Ledger Entry.

      // 1.Setup: Create Insurance Journal Line, create Dimension for Insurance Journal.
      Initialize;
      LibraryFixedAsset.CreateInsurance(Insurance);
      CreateInsuranceJournalLine(InsuranceJournalLine,Insurance."No.");
      DimensionOnInsuranceJournal(InsuranceJournalLine);
      FANo := InsuranceJournalLine."FA No.";
      DimensionSetID := InsuranceJournalLine."Dimension Set ID";

      // 2.Exercise: Post the created Insurance Journal Line.
      LibraryFixedAsset.PostInsuranceJournal(InsuranceJournalLine);

      // 3.Verify: Verify Insurance Ledger Entry.
      VerifyInsCoverageLedgerEntry(FANo,DimensionSetID);
    END;

    [Test]
    PROCEDURE IndexFAWithBalanceAccount@76();
    VAR
      DimensionValue@1005 : Record 349;
      FANo@1000 : Code[20];
      FAAllocationCode@1001 : Code[10];
    BEGIN
      // Test the Index Fixed Assets with Balance Account.

      // 1.Setup, Exercise: Create and post FA General Journal for Posting Type Acquisition Cost, run the Index Fixed Assets.
      Initialize;
      FANo := IndexFixedAsset(DimensionValue,FAAllocationCode,TRUE);

      // 2.Verify: Verify the FA General Journal.
      VerifyFAGLJournalLines(DimensionValue,FANo);
      VerifyDimensionOnFAAllocation(FANo,FAAllocationCode);
    END;

    [Test]
    PROCEDURE IndexFAWithOutBalanceAccount@75();
    VAR
      DimensionValue@1005 : Record 349;
      FANo@1001 : Code[20];
      FAAllocationCode@1000 : Code[10];
    BEGIN
      // Test the Index Fixed Assets with out Balance Account.

      // 1.Setup, Exercise: Create and post FA General Journal for Posting Type Acquisition Cost, run the Index Fixed Assets.
      Initialize;
      FANo := IndexFixedAsset(DimensionValue,FAAllocationCode,FALSE);

      // 2.Verify: Verify the FA General Journal.
      VerifyFAGLJournalLines(DimensionValue,FANo);
    END;

    [Test]
    PROCEDURE InsuranceIndex@50();
    VAR
      DefaultDimension@1010 : Record 352;
      InsuranceJournalLine@1006 : Record 5635;
      FANo@1007 : Code[20];
      InsuranceNo@1000 : Code[20];
    BEGIN
      // Test the Index Insurance.

      // 1.Setup: Create and post the created Insurance Journal Line.
      Initialize;
      CreateInsuranceJournalLine(InsuranceJournalLine,CreateInsuranceWithDimension);
      FANo := InsuranceJournalLine."FA No.";
      InsuranceNo := InsuranceJournalLine."Insurance No.";
      LibraryFixedAsset.PostInsuranceJournal(InsuranceJournalLine);

      // 2.Exercise: Run the Index Insurance.
      RunIndexInsurance(FANo);

      // 3.Verify: Verify Dimension on Insurance Journal.
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Insurance,InsuranceNo);
      VerifyInsuranceDimension(DefaultDimension,FANo);
    END;

    [Test]
    PROCEDURE InsertFABalanceAccount@17();
    VAR
      DimensionValue@1006 : Record 349;
      FADepreciationBook@1001 : Record 5612;
      GenJournalBatch@1005 : Record 232;
      GenJournalLine@1003 : Record 81;
      FAGetBalanceAccount@1004 : Codeunit 5603;
    BEGIN
      // Test the Insert Balance Account.

      // 1.Setup: Create Insurance Journal, create Dimension for Insurance Journal.
      Initialize;
      CreateFixedAssetDepreciation(FADepreciationBook);
      AttachDimensionOnFixedAsset(DimensionValue,FADepreciationBook."FA No.");
      CreateGenJournalBatch(GenJournalBatch);
      CreateGenJournalNoBalAccount(GenJournalLine,GenJournalBatch,FADepreciationBook."FA No.");

      // 2.Exercise: Post the FA General Journal Line.
      FAGetBalanceAccount.InsertAcc(GenJournalLine);

      // 3.Verify: Verify the FA General Journal Lines.
      VerifyFAGLJournalLines(DimensionValue,FADepreciationBook."FA No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReclassifyFixedAsset@1();
    VAR
      DimensionValue@1001 : Record 349;
      DimensionValue2@1002 : Record 349;
      FixedAsset@1000 : Record 5600;
      FixedAsset2@1006 : Record 5600;
      FAReclassJournalLine@1003 : Record 5624;
      GenJournalLine@1004 : Record 81;
    BEGIN
      // Test Reclassify the FA Reclass Journal.

      // 1.Setup: Create FA General Journal Line, attach dimesnion on Fixed Asset, post the created FA General Journal Line,
      // Create FA Reclass Journal Line.
      Initialize;
      CreateFAGLJournalLine(GenJournalLine);
      AttachDimensionOnFixedAsset(DimensionValue,GenJournalLine."Account No.");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      FixedAsset.GET(GenJournalLine."Account No.");
      ModifyAccountInFAPostingGroup(FixedAsset."FA Posting Group");
      CreateFAGLJournalLine(GenJournalLine);
      AttachDimensionOnFixedAsset(DimensionValue2,GenJournalLine."Account No.");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      FixedAsset2.GET(GenJournalLine."Account No.");
      ModifyAccountInFAPostingGroup(FixedAsset2."FA Posting Group");
      CreateFAReclassJournalLine(FAReclassJournalLine);
      UpdateFAReclassJournal(FAReclassJournalLine,FixedAsset."No.",FixedAsset2."No.");

      // 2.Exercise: Reclassify the Journal.
      CODEUNIT.RUN(CODEUNIT::"FA Reclass. Jnl.-Transfer",FAReclassJournalLine);

      // 3.Verify: Verify the created FA General Journal Lines.
      VerifyFAGLJournalLines(DimensionValue,FixedAsset."No.");
      VerifyFAGLJournalLines(DimensionValue2,FixedAsset2."No.");
    END;

    [Test]
    PROCEDURE CreateFixedAssetWithDimension@87();
    VAR
      DimensionValue@1001 : Record 349;
      FixedAsset@1000 : Record 5600;
    BEGIN
      // Test Create New Fixed Asset and Attach a Dimension with Fixed Asset.

      // 1. Setup: Create Fixed Asset.
      Initialize;
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);

      // 2. Exercise: Adding Dimension on Fixed Asset.
      AttachDimensionOnFixedAsset(DimensionValue,FixedAsset."No.");

      // 3. Verify: Verify Fixed Asset Dimension Values.
      VerifyDimensionValue(DimensionValue,FixedAsset."No.");
    END;

    [Test]
    PROCEDURE CancelFALedgerEntryDepreciationBookError@88();
    VAR
      DepreciationBook@1000 : Record 5611;
    BEGIN
      // Test error occurs on Running Cancel FA Ledger Entry Report without Depreciation Book Code.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Run Cancel FA Ledger Entry Report.
      ASSERTERROR RunCancelFALedgerEntry('','',FALSE);

      // 3. Verify: Verify error occurs on Running Cancel FA Ledger Entry Report without Depreciation Book Code.
      Assert.ExpectedError(STRSUBSTNO(DepreciationBookErr,DepreciationBook.TABLECAPTION));
    END;

    [Test]
    PROCEDURE CancelFALedgerEntryGLIntegrationFalse@92();
    VAR
      DepreciationBook@1000 : Record 5611;
      FANo@1001 : Code[20];
    BEGIN
      // Test and verify Cancel FA Ledger Entry Report functionality for Depreciation Book G/L Integration as FALSE.

      // 1. Setup: Create Initial Setup for Fixed Asset. Update G/L Integration on Depreciation Book as FALSE.
      // Create and post FA Journal Lines.
      Initialize;
      FANo := CreateInitialSetupAndPostFAJournalLines(DepreciationBook);

      // 2. Exercise: Run Cancel FA Ledger Entry Report.
      RunCancelFALedgerEntry(FANo,DepreciationBook.Code,TRUE);

      // 3. Verify: Verify created FA Journal Lines after running Cancel FA Ledger Entry Report.
      VerifyCancelFAJournalLines(FANo);

      // 4. Tear Down: Roll back changes on Depreciation Book.
      UpdateGLIntegration(
        DepreciationBook.Code,DepreciationBook."G/L Integration - Acq. Cost",DepreciationBook."G/L Integration - Depreciation");
    END;

    [Test]
    PROCEDURE CancelFALedgerEntryGLIntegrationTrue@89();
    VAR
      DepreciationBook@1002 : Record 5611;
      FANo@1000 : Code[20];
    BEGIN
      // Test and verify Cancel FA Ledger Entry Report functionality for Depreciation Book G/L Integration as TRUE.

      // 1. Setup: Create Initial Setup for Fixed Asset. Update G/L Integration on Depreciation Book as FALSE.
      // Create and post FA Journal Lines.
      Initialize;
      FANo := CreateInitialSetupAndPostFAJournalLines(DepreciationBook);

      // 2. Exercise: Update G/L Integration on Depreciation Book as TRUE and run Cancel FA Ledger Entry Report.
      UpdateGLIntegration(DepreciationBook.Code,TRUE,TRUE);
      RunCancelFALedgerEntry(FANo,DepreciationBook.Code,TRUE);

      // 3. Verify: Verify created General Journal Lines after running Cancel FA Ledger Entry Report.
      VerifyCancelGenJournalLines(FANo);

      // 4. Tear Down: Roll back changes on Depreciation Book.
      UpdateGLIntegration(
        DepreciationBook.Code,DepreciationBook."G/L Integration - Acq. Cost",DepreciationBook."G/L Integration - Depreciation");
    END;

    [Test]
    PROCEDURE CancelFALedgerEntryWithInactiveFixedAsset@96();
    VAR
      DepreciationBook@1000 : Record 5611;
      FANo@1001 : Code[20];
    BEGIN
      // Test and verify Cancel FA Ledger Entry Report functionality for Inactive Fixed Asset.

      // 1. Setup: Create Initial Setup for Fixed Asset. Update G/L Integration on Depreciation Book as FALSE.
      // Create and post FA Journal Lines.
      Initialize;
      FANo := CreateInitialSetupAndPostFAJournalLines(DepreciationBook);

      // 2. Exercise: Check Inactive on Fixed Asset and run Cancel FA Ledger Entry Report.
      UpdateInactiveOnFixedAsset(FANo);
      RunCancelFALedgerEntry(FANo,DepreciationBook.Code,TRUE);

      // 3. Verify: Verify General Journal Lines and FA Journal Lines must not be create after running Cancel FA Ledger Entry Report.
      Assert.IsFalse(FindFAJournalLine(FANo),STRSUBSTNO(LinesMustNotBeCreatedErr,FANo));
      Assert.IsFalse(FindGeneralJournalLine(FANo),STRSUBSTNO(LinesMustNotBeCreatedErr,FANo));

      // 4. Tear Down: Roll back changes on Depreciation Book.
      UpdateGLIntegration(
        DepreciationBook.Code,DepreciationBook."G/L Integration - Acq. Cost",DepreciationBook."G/L Integration - Depreciation");
    END;

    [Test]
    PROCEDURE CancelFALedgerEntryUseNewPostingDateGenJnl@7();
    VAR
      FAJournalSetup@1007 : Record 5605;
      FADepreciationBook@1003 : Record 5612;
      DepreciationBook@1005 : Record 5611;
      GenJournalBatch@1000 : Record 232;
      GenJournalLine@1004 : Record 81;
      ExpectedDocumentNo@1008 : Code[20];
      PostingDate@1001 : Date;
      NewPostingDate@1006 : Date;
    BEGIN
      // Test and verify general journal line "Document No." created by Cancel FA Ledger Entry Report with UseNewPostingDate option

      CreateFixedAssetDepreciation(FADepreciationBook);
      DepreciationBook.GET(FADepreciationBook."Depreciation Book Code"); // Get Depreciation book record to save values before updating
      UpdateUseSameDates(DepreciationBook.Code,FALSE);

      CreateAndPostGenJournalLines(GenJournalLine,FADepreciationBook."FA No.");
      PostingDate := GenJournalLine."Posting Date";

      // Clean up Gen. Journal Lines with new batch created by procedure CreateAndPostGenJournalLines
      DeleteGeneralJournalLine(GenJournalLine."Journal Template Name",''); // take '' for batch name

      CreateGenJournalBatchWithNoSeries(GenJournalBatch,FADepreciationBook."Depreciation Book Code",PostingDate,2); // take 2 to series line count
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);

      // Use new period (new series line) for the next calculations
      NewPostingDate := CALCDATE('<1M>',PostingDate);

      // Change template and batch to get Expected Document No from batch series line.
      GenJournalLine."Journal Template Name" := GenJournalBatch."Journal Template Name";
      GenJournalLine."Journal Batch Name" := GenJournalBatch.Name;
      ExpectedDocumentNo := FAJournalSetup.GetGenJnlDocumentNo(GenJournalLine,NewPostingDate,FALSE);

      // Exercise: Run Cancel FA Ledger Entry Report for the first period. Use New Posting date - next period.
      RunCancelFALedgerEntryWithtParams(
        FADepreciationBook."FA No.",DepreciationBook.Code,PostingDate,PostingDate,TRUE,NewPostingDate,FALSE);

      // Verify
      VerifyExpectedGenJnlDocNo(GenJournalBatch."Journal Template Name",GenJournalBatch.Name,ExpectedDocumentNo);

      // Tear Down: Rollbak Depreciation Book and clean up Gen. Journal Lines
      UpdateUseSameDates(FADepreciationBook."Depreciation Book Code",DepreciationBook."Use Same FA+G/L Posting Dates");
      DeleteGeneralJournalLine(GenJournalBatch."Journal Template Name",GenJournalBatch.Name);
      LibraryFixedAsset.VerifyLastFARegisterGLRegisterOneToOneRelation; // TFS 376879
    END;

    [Test]
    PROCEDURE CancelFALedgerEntryUseNewPostingDateFAJnl@104();
    VAR
      FAJournalSetup@1002 : Record 5605;
      FADepreciationBook@1000 : Record 5612;
      DepreciationBook@1001 : Record 5611;
      FAJournalBatch@1005 : Record 5620;
      FAJournalLine@1004 : Record 5621;
      ExpectedDocumentNo@1007 : Code[20];
      PostingDate@1003 : Date;
      NewPostingDate@1008 : Date;
    BEGIN
      // Test and verify FA journal line "Document No." created by Cancel FA Ledger Entry Report with UseNewPostingDate option

      CreateFixedAssetDepreciation(FADepreciationBook);
      DepreciationBook.GET(FADepreciationBook."Depreciation Book Code"); // Get Depreciation book record to save values before updating
      UpdateUseSameDates(DepreciationBook.Code,FALSE);
      UpdateGLIntegration(DepreciationBook.Code,FALSE,FALSE);

      PostingDate := CreateAndPostFAJournalLines(FAJournalLine,FADepreciationBook);

      // Clean up FA Journal Lines with new batch created by procedure CreateAndPostFAJournalLines
      DeleteFAJournalLine(FAJournalLine."Journal Template Name",''); // take '' for batch name

      CreateFAJournalBatchWithNoSeries(FAJournalBatch,FADepreciationBook."Depreciation Book Code",PostingDate,2); // take 2 to series line count
      FAJournalLine.SETRANGE("Journal Template Name",FAJournalBatch."Journal Template Name");
      FAJournalLine.SETRANGE("Journal Batch Name",FAJournalBatch.Name);

      // Use new period (new series line) for the next calculations
      NewPostingDate := CALCDATE('<1M>',PostingDate);

      // Change template and batch to get Expected Document No from batch series line.
      FAJournalLine."Journal Template Name" := FAJournalBatch."Journal Template Name";
      FAJournalLine."Journal Batch Name" := FAJournalBatch.Name;
      ExpectedDocumentNo := FAJournalSetup.GetFAJnlDocumentNo(FAJournalLine,NewPostingDate,FALSE);

      // Exercise: Run Cancel FA Ledger Entry Report for the first period. Use New Posting date - next period.
      RunCancelFALedgerEntryWithtParams(
        FADepreciationBook."FA No.",DepreciationBook.Code,PostingDate,PostingDate,TRUE,NewPostingDate,FALSE);

      // Verify
      VerifyExpectedFAJnlDocNo(FAJournalBatch."Journal Template Name",FAJournalBatch.Name,ExpectedDocumentNo);

      // Tear Down: Rollback Depreciation Book and delete FA Journal Lines,
      UpdateUseSameDates(FADepreciationBook."Depreciation Book Code",DepreciationBook."Use Same FA+G/L Posting Dates");
      UpdateGLIntegration(
        FADepreciationBook."Depreciation Book Code",DepreciationBook."G/L Integration - Acq. Cost",
        DepreciationBook."G/L Integration - Depreciation");
      DeleteFAJournalLine(FAJournalBatch."Journal Template Name",FAJournalBatch.Name);
    END;

    [Test]
    PROCEDURE DimensionErrorOnFixedAsset@84();
    VAR
      DefaultDimension@1003 : Record 352;
      FADepreciationBook@1004 : Record 5612;
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1002 : Record 232;
      GLAccount@1008 : Record 15;
    BEGIN
      // Test Error Message while posting Disposal of zero Amount from FA GL Journal Line when Balance Account having Dimension Value Blank and Value Posting as Code Mandatory.

      // 1. Setup: Create Disposal entry for Fixed Asset using FA GL Journal with Zero Amount, Take Balance Account with Dimension Value Blank and Value Posting Code Mandatory.
      Initialize;
      CreateFixedAssetDepreciation(FADepreciationBook);
      CreateGenJournalBatch(GenJournalBatch);
      CreateGLAccountWithDimension(DefaultDimension);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,FADepreciationBook."FA No.",GenJournalLine."FA Posting Type"::Disposal,DefaultDimension."No.",
        0);

      // 2. Exercise: Try to post General Journal Line.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify Error Message.
      Assert.ExpectedError(
        STRSUBSTNO(
          DimensionValueErr,GenJournalLine.TABLECAPTION,GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",
          GenJournalLine."Line No.",DefaultDimension.FIELDCAPTION("Dimension Value Code"),
          DefaultDimension.FIELDCAPTION("Dimension Code"),DefaultDimension."Dimension Code",GLAccount.TABLECAPTION,
          GenJournalLine."Bal. Account No."));
    END;

    [Test]
    PROCEDURE DimensionErrorOnFixedAssetAllocation@134();
    VAR
      DefaultDimension@1003 : Record 352;
      FAAllocation@1004 : Record 5615;
      FADepreciationBook@1001 : Record 5612;
      GenJournalBatch@1002 : Record 232;
      GenJournalLine@1000 : Record 81;
      GLAccount@1008 : Record 15;
    BEGIN
      // Test Error Message while posting Disposal of zero Amount from FA GL Journal Line when Dimension Value on FA Allocation Dimension Account is Blank and Value Posting is Code Mandatory.

      // 1. Setup: Create FA Allocation with Account having Dimension Value Blank, Create Aquisition Cost and Disposal Entry for Fixed Asset using FA GL Journal, take Random Amount.
      Initialize;
      LibraryERM.CreateGLAccount(GLAccount);
      CreateGLAccountWithDimension(DefaultDimension);
      CreateFixedAssetDepreciation(FADepreciationBook);
      CreateAndAttachDimensionOnFAAllocation(FAAllocation,FADepreciationBook."FA Posting Group",FAAllocation."Allocation Type"::Loss);
      UpdateAccountNoInFAAllocation(FAAllocation,DefaultDimension."No.");

      CreateGenJournalBatch(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,FADepreciationBook."FA No.",GenJournalLine."FA Posting Type"::"Acquisition Cost",
        GLAccount."No.",LibraryRandom.RandDec(100,2));
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,FADepreciationBook."FA No.",GenJournalLine."FA Posting Type"::Disposal,GLAccount."No.",0);

      // 2. Exercise: Try to post General Journal Line.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify Error Message.
      Assert.ExpectedError(
        STRSUBSTNO(DimensionValueErr,FAAllocation.TABLECAPTION,FAAllocation.Code,FAAllocation."Allocation Type",
          FAAllocation."Line No.",DefaultDimension.FIELDCAPTION("Dimension Value Code"),
          DefaultDimension.FIELDCAPTION("Dimension Code"),DefaultDimension."Dimension Code",GLAccount.TABLECAPTION,
          DefaultDimension."No."));
    END;

    [Test]
    PROCEDURE DepreciationBalanceAccountDimension@106();
    VAR
      GLAccount@1000 : Record 15;
      DefaultDimension@1007 : Record 352;
      DimensionValue@1008 : Record 349;
      FADepreciationBook@1002 : Record 5612;
      FAAllocation@1003 : Record 5615;
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1006 : Record 81;
    BEGIN
      // Test the Calculate Depreciation with Bal Account and two Dimensions.

      // 1. Setup.
      Initialize;
      GLAccount.GET(CreateGLAccountWithDimension(DefaultDimension));
      CreateFixedAssetDepreciation(FADepreciationBook);
      CreateAndAttachDimensionOnFAAllocation(FAAllocation,
        FADepreciationBook."FA Posting Group",FAAllocation."Allocation Type"::Depreciation);
      UpdateAccountNoInFAAllocation(FAAllocation,GLAccount."No.");

      LibraryDimension.FindDimensionValue(DimensionValue,DefaultDimension."Dimension Code");
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Fixed Asset",FADepreciationBook."FA No.",
        DimensionValue."Dimension Code",DimensionValue.Code);

      CreateGenJournalBatch(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,FADepreciationBook."FA No.",GenJournalLine."FA Posting Type"::"Acquisition Cost",
        GLAccount."No.",LibraryRandom.RandDec(100,2));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2.Exercise: Run the Calculate Depreciation.
      RunCalculateDepreciation(FADepreciationBook."FA No.",FADepreciationBook."Depreciation Book Code",TRUE);

      // 3. Verify.
      VerifyDimensionValueOnGLJournal(FADepreciationBook."FA No.",GLAccount."No.",DimensionValue);
    END;

    [Test]
    PROCEDURE CombinedDiffDefaultDimOnCalculateDepreciationWithInsertBalAcc@114();
    VAR
      FADepreciationBook@1002 : Record 5612;
      GLAccNo@1000 : Code[20];
      GLIntegrationAcqCostOld@1004 : Boolean;
    BEGIN
      // [FEATURE] [Depreciation]
      // [SCENARIO 361995] Combination of the different Default Dimensions when depreciation calculated with "Insert Bal. Account" option

      Initialize;
      // [GIVEN] G/L Account "X" with Default Dimension "A"
      GLAccNo := CreateGLAccountWithDefaultDimension;
      // [GIVEN] Create Fixed Asset with "Depreciation Expense Acc." = "X" and Default Dimension "B"
      CreateFixedAssetDepreciationWithSetup(FADepreciationBook,GLIntegrationAcqCostOld,GLAccNo);
      CreateDefaultDim(DATABASE::"Fixed Asset",FADepreciationBook."FA No.");

      // [GiVEN] Posted Acquisition
      PostAcquisitionCost(FADepreciationBook);

      // [WHEN] Run Calculate Depreciation Job with "Insert Bal. Account"
      RunCalculateDepreciation(FADepreciationBook."FA No.",FADepreciationBook."Depreciation Book Code",TRUE);

      // [THEN] "Dimension Set ID" in "Gen. Journal Line" with "Bal. Account" = "X" combined from default dimensions "A" and "B"
      VerifyDimSetEntryOnGenJnlLine(
        FADepreciationBook."FA No.",GLAccNo,GetDefaultDimID(GLAccNo,FADepreciationBook."FA No."));

      // Teardown
      ModifyAcquisitionIntegration(FADepreciationBook."Depreciation Book Code",GLIntegrationAcqCostOld);
    END;

    [Test]
    PROCEDURE CombinedSameDefaultDimOnCalculateDepreciationWithInsertBalAcc@129();
    VAR
      GLAccount@1000 : Record 15;
      DefaultDimension@1001 : Record 352;
      DimensionValue@1008 : Record 349;
      FADepreciationBook@1002 : Record 5612;
      GLIntegrationAcqCostOld@1004 : Boolean;
    BEGIN
      // [FEATURE] [Depreciation]
      // [SCENARIO 361995] Combination of the same Default Dimensions with different values when depreciation calculated with "Insert Bal. Account" option

      Initialize;
      // [GIVEN] G/L Account "X" with Default Dimension "Area" = "A"
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryDimension.CreateDimWithDimValue(DimensionValue);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"G/L Account",GLAccount."No.",
        DimensionValue."Dimension Code",DimensionValue.Code);

      // [GIVEN] Create Fixed Asset with "Depreciation Expense Acc." = "X" and Default Dimension "Area" = "B"
      CreateFixedAssetDepreciationWithSetup(FADepreciationBook,GLIntegrationAcqCostOld,GLAccount."No.");
      LibraryDimension.CreateDimensionValue(DimensionValue,DimensionValue."Dimension Code");
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Fixed Asset",FADepreciationBook."FA No.",
        DimensionValue."Dimension Code",DimensionValue.Code);

      // [GiVEN] Posted Acquisition
      PostAcquisitionCost(FADepreciationBook);

      // [WHEN] Run Calculate Depreciation Job with "Insert Bal. Account"
      RunCalculateDepreciation(FADepreciationBook."FA No.",FADepreciationBook."Depreciation Book Code",TRUE);

      // [THEN] "Dimension Set ID" in "Gen. Journal Line" with "Bal. Account" = "X" is equal default dimension "Area" = "B"
      VerifyDimSetEntryOnGenJnlLine(
        FADepreciationBook."FA No.",GLAccount."No.",GetDefaultDimID('',FADepreciationBook."FA No."));

      // Teardown
      ModifyAcquisitionIntegration(FADepreciationBook."Depreciation Book Code",GLIntegrationAcqCostOld);
    END;

    LOCAL PROCEDURE AllowIndexationInDepreciation@78(Code@1002 : Code[10];AllowIndexation@1001 : Boolean) AllowIndexationOld : Boolean;
    VAR
      DepreciationBook@1000 : Record 5611;
    BEGIN
      DepreciationBook.GET(Code);
      AllowIndexationOld := DepreciationBook."Allow Indexation";
      DepreciationBook.VALIDATE("Allow Indexation",AllowIndexation);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AttachDimensionInJournalLine@5(VAR GenJournalLine@1000 : Record 81);
    VAR
      DimensionValue@1004 : Record 349;
    BEGIN
      FindNonGlobalDimValue(DimensionValue);
      GenJournalLine.VALIDATE(
        "Dimension Set ID",
        LibraryDimension.CreateDimSet(GenJournalLine."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code));
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AttachDimensionInFAJournalLine@77(VAR FAJournalLine@1000 : Record 5621);
    VAR
      DimensionValue@1004 : Record 349;
    BEGIN
      FindNonGlobalDimValue(DimensionValue);
      FAJournalLine.VALIDATE(
        "Dimension Set ID",
        LibraryDimension.CreateDimSet(FAJournalLine."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code));
      FAJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AttachDimensionOnFAAllocation@23(VAR FAAllocation@1000 : Record 5615);
    VAR
      Dimension@1001 : Record 348;
      DimensionValue@1002 : Record 349;
    BEGIN
      LibraryDimension.FindDimension(Dimension);

      FAAllocation.SETRANGE(Code,FAAllocation.Code);
      FAAllocation.FINDSET;
      REPEAT
        LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
        FAAllocation.VALIDATE(
          "Dimension Set ID",LibraryDimension.CreateDimSet(FAAllocation."Dimension Set ID",Dimension.Code,DimensionValue.Code));
        Dimension.NEXT;
        FAAllocation.MODIFY(TRUE);
      UNTIL FAAllocation.NEXT = 0;
    END;

    LOCAL PROCEDURE AttachDimensionOnFixedAsset@52(VAR DimensionValue@1001 : Record 349;FixedAssetNo@1000 : Code[20]);
    VAR
      DefaultDimension@1003 : Record 352;
    BEGIN
      FindNonGlobalDimValue(DimensionValue);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Fixed Asset",FixedAssetNo,DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateAndAttachDimensionOnFAAllocation@182(VAR FAAllocation@1000 : Record 5615;FAPostingGroup@1001 : Code[10];AllocationType@1002 : Option);
    BEGIN
      CreateFAAllocation(FAAllocation,FAPostingGroup,AllocationType);
      AttachDimensionOnFAAllocation(FAAllocation);
    END;

    LOCAL PROCEDURE CreateInitialSetupAndPostFAJournalLines@94(VAR DepreciationBook@1002 : Record 5611) : Code[20];
    VAR
      FAJournalBatch@1000 : Record 5620;
      FAJournalLine@1001 : Record 5621;
      FADepreciationBook@1003 : Record 5612;
    BEGIN
      CreateFixedAssetDepreciation(FADepreciationBook);
      DepreciationBook.GET(FADepreciationBook."Depreciation Book Code");
      UpdateGLIntegration(DepreciationBook.Code,FALSE,FALSE);
      CreateFAJournalBatch(FAJournalBatch);
      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FADepreciationBook,FAJournalLine."FA Posting Type"::"Acquisition Cost",
        LibraryRandom.RandDec(1000,2) * 100);  // Take Random Value.
      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FADepreciationBook,FAJournalLine."FA Posting Type"::Depreciation,-FAJournalLine.Amount / 2);
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);
      EXIT(FADepreciationBook."FA No.");
    END;

    LOCAL PROCEDURE CreateDepreciationBookAndSetup@32() : Code[10];
    VAR
      DepreciationBook@1000 : Record 5611;
    BEGIN
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      CreateFAJournalSetup(DepreciationBook.Code);
      EXIT(DepreciationBook.Code);
    END;

    LOCAL PROCEDURE CreateFAAllocation@21(VAR FAAllocation@1000 : Record 5615;FAPostingGroup@1001 : Code[10];AllocationType@1003 : Option);
    VAR
      Counter@1002 : Integer;
    BEGIN
      // Using Random Number Generator for creating the lines between 1 to 4.
      FOR Counter := 1 TO 1 + LibraryRandom.RandInt(3) DO BEGIN
        CLEAR(FAAllocation);
        LibraryFixedAsset.CreateFAAllocation(FAAllocation,FAPostingGroup,AllocationType);
        UpdateAllocationPercent(FAAllocation);
      END;
    END;

    LOCAL PROCEDURE CreateFADepreciationBook@56(VAR FADepreciationBook@1000 : Record 5612;No@1001 : Code[20];DepreciationBookCode@1002 : Code[10];FAPostingGroup@1003 : Code[10]);
    BEGIN
      LibraryFixedAsset.CreateFADepreciationBook(FADepreciationBook,No,DepreciationBookCode);
      UpdateDateFADepreciationBook(FADepreciationBook,DepreciationBookCode);
      FADepreciationBook.VALIDATE("FA Posting Group",FAPostingGroup);
      FADepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFAJournalBatch@93(VAR FAJournalBatch@1001 : Record 5620);
    VAR
      FAJournalTemplate@1000 : Record 5619;
    BEGIN
      FAJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryFixedAsset.FindFAJournalTemplate(FAJournalTemplate);
      LibraryFixedAsset.CreateFAJournalBatch(FAJournalBatch,FAJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateFAJournalBatchWithNoSeries@121(VAR FAJournalBatch@1000 : Record 5620;DepreciationBookCode@1002 : Code[10];PostingDate@1001 : Date;SeriesLineCount@1003 : Integer);
    BEGIN
      // Create a few series lines with Starting Date starts from first day of month. Period is 1 month.

      CreateFAJournalBatch(FAJournalBatch);
      FAJournalBatch.VALIDATE("No. Series",CreateNoSeriesCode(SeriesLineCount,CALCDATE('<-CM>',PostingDate)));
      FAJournalBatch.MODIFY(TRUE);
      CreateFAJnlSetupWithTemplateBatch(DepreciationBookCode,FAJournalBatch."Journal Template Name",FAJournalBatch.Name,TRUE);
    END;

    LOCAL PROCEDURE CreateNoSeriesCode@103(NoOfPeriods@1002 : Integer;StartingDate@1004 : Date) : Code[10];
    VAR
      NoSeries@1000 : Record 308;
      NoSeriesLine@1001 : Record 309;
      i@1003 : Integer;
    BEGIN
      LibraryUtility.CreateNoSeries(NoSeries,TRUE,TRUE,FALSE);
      FOR i := 1 TO NoOfPeriods DO BEGIN
        LibraryUtility.CreateNoSeriesLine(NoSeriesLine,NoSeries.Code,FORMAT(i) + '00000000',FORMAT(i) + '99999999');
        NoSeriesLine.VALIDATE("Starting Date",StartingDate);
        NoSeriesLine.MODIFY(TRUE);
        StartingDate := CALCDATE('<1M>',StartingDate);
      END;
      EXIT(NoSeries.Code);
    END;

    LOCAL PROCEDURE CreateFAJournalLine@60(VAR FAJournalLine@1001 : Record 5621;FAJournalBatch@1002 : Record 5620;FADepreciationBook@1003 : Record 5612;FAPostingType@1004 : Option;Amount@1006 : Decimal);
    BEGIN
      LibraryFixedAsset.CreateFAJournalLine(FAJournalLine,FAJournalBatch."Journal Template Name",FAJournalBatch.Name);
      FAJournalLine.VALIDATE("Document Type",FAJournalLine."Document Type"::" ");
      FAJournalLine.VALIDATE("Document No.",FADepreciationBook."FA No.");
      FAJournalLine.VALIDATE("Posting Date",WORKDATE);
      FAJournalLine.VALIDATE("FA Posting Date",WORKDATE);
      FAJournalLine.VALIDATE("FA Posting Type",FAPostingType);
      FAJournalLine.VALIDATE("FA No.",FADepreciationBook."FA No.");
      FAJournalLine.VALIDATE(Amount,Amount);
      FAJournalLine.VALIDATE("Depreciation Book Code",FADepreciationBook."Depreciation Book Code");
      FAJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFAJournalSetup@33(DepreciationBook@1000 : Code[10]);
    VAR
      FAJournalSetup@1001 : Record 5605;
    BEGIN
      LibraryFixedAsset.CreateFAJournalSetup(FAJournalSetup,DepreciationBook,'');
      UpdateFAJournalSetup(FAJournalSetup);
    END;

    LOCAL PROCEDURE CreateFAJnlSetupWithTemplateBatch@111(DepreciationBook@1000 : Code[10];JournalTemplateName@1002 : Code[10];JournalBatchName@1003 : Code[10];UpdateFASetup@1004 : Boolean);
    VAR
      FAJournalSetup@1001 : Record 5605;
    BEGIN
      IF NOT FAJournalSetup.GET(DepreciationBook,'') THEN
        LibraryFixedAsset.CreateFAJournalSetup(FAJournalSetup,DepreciationBook,'');
      IF UpdateFASetup THEN BEGIN
        FAJournalSetup.VALIDATE("FA Jnl. Template Name",JournalTemplateName);
        FAJournalSetup.VALIDATE("FA Jnl. Batch Name",JournalBatchName);
      END ELSE BEGIN
        FAJournalSetup.VALIDATE("Gen. Jnl. Template Name",JournalTemplateName);
        FAJournalSetup.VALIDATE("Gen. Jnl. Batch Name",JournalBatchName);
      END;
      FAJournalSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFAGLJournalLine@65(VAR GenJournalLine@1000 : Record 81);
    VAR
      FADepreciationBook@1002 : Record 5612;
      GenJournalBatch@1003 : Record 232;
      GLAccount@1001 : Record 15;
    BEGIN
      CreateFixedAssetDepreciation(FADepreciationBook);
      LibraryERM.CreateGLAccount(GLAccount);

      // Using Random Number Generator for Amount.
      CreateGenJournalBatch(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,FADepreciationBook."FA No.",GenJournalLine."FA Posting Type"::"Acquisition Cost",
        GLAccount."No.",LibraryRandom.RandDec(1000,2));
    END;

    LOCAL PROCEDURE CreateFAGLJournalLines@51(VAR GenJournalLine@1000 : Record 81;FADepreciationBook@1001 : Record 5612);
    VAR
      GenJournalBatch@1002 : Record 232;
      GLAccount@1003 : Record 15;
    BEGIN
      // Using Random Number Generator for Amount.
      LibraryERM.CreateGLAccount(GLAccount);
      CreateGenJournalBatch(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,FADepreciationBook."FA No.",GenJournalLine."FA Posting Type"::"Acquisition Cost",
        GLAccount."No.",LibraryRandom.RandDec(1000,2));
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,FADepreciationBook."FA No.",GenJournalLine."FA Posting Type"::Depreciation,GLAccount."No.",
        -GenJournalLine.Amount / 2);
    END;

    LOCAL PROCEDURE CreateFAReclassJournalBatch@73(VAR FAReclassJournalBatch@1000 : Record 5623);
    VAR
      FAReclassJournalTemplate@1001 : Record 5622;
    BEGIN
      FAReclassJournalTemplate.FINDFIRST;
      LibraryFixedAsset.CreateFAReclassJournalBatch(FAReclassJournalBatch,FAReclassJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateFAReclassJournalLine@61(VAR FAReclassJournalLine@1000 : Record 5624);
    VAR
      FAReclassJournalBatch@1001 : Record 5623;
    BEGIN
      CreateFAReclassJournalBatch(FAReclassJournalBatch);
      LibraryFixedAsset.CreateFAReclassJournal(
        FAReclassJournalLine,FAReclassJournalBatch."Journal Template Name",FAReclassJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateFixedAssetDepreciationWithSetup@120(VAR FADepreciationBook@1002 : Record 5612;VAR GLIntegrationAcqCostOld@1000 : Boolean;GLAccNo@1001 : Code[20]);
    BEGIN
      CreateFixedAssetDepreciation(FADepreciationBook);
      UpdateDeprExpenseAccInFAPostingGroup(FADepreciationBook."FA Posting Group",GLAccNo);
      GLIntegrationAcqCostOld := ModifyAcquisitionIntegration(FADepreciationBook."Depreciation Book Code",FALSE);
    END;

    LOCAL PROCEDURE CreateFixedAssetDepreciation@53(VAR FADepreciationBook@1001 : Record 5612);
    VAR
      FixedAsset@1000 : Record 5600;
      DepreciationBook@1002 : Record 5611;
    BEGIN
      DepreciationBook.GET(LibraryFixedAsset.GetDefaultDeprBook);
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",DepreciationBook.Code,FixedAsset."FA Posting Group");
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@14(VAR GenJournalLine@1003 : Record 81;GenJournalBatch@1004 : Record 232;AccountNo@1001 : Code[20];FAPostingType@1000 : Option;BalAccountNo@1005 : Code[20];Amount@1002 : Decimal);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"Fixed Asset",AccountNo,Amount);
      GenJournalLine.VALIDATE("FA Posting Type",FAPostingType);
      GenJournalLine.VALIDATE("Bal. Account No.",BalAccountNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGenJournalNoBalAccount@67(VAR GenJournalLine@1000 : Record 81;GenJournalBatch@1001 : Record 232;AccountNo@1002 : Code[20]);
    BEGIN
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,AccountNo,GenJournalLine."FA Posting Type"::Depreciation,'',
        -LibraryRandom.RandDec(1000,2));  // Take Random Amount, using Blank for Balance Account No.
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLines@55(VAR GenJournalLine@1002 : Record 81;FANo@1003 : Code[20]);
    VAR
      GLAccount@1000 : Record 15;
      GenJournalBatch@1001 : Record 232;
    BEGIN
      CreateGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGLAccount(GLAccount);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,FANo,GenJournalLine."FA Posting Type"::"Acquisition Cost",GLAccount."No.",
        LibraryRandom.RandDec(1000,2));
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,FANo,GenJournalLine."FA Posting Type"::Depreciation,GLAccount."No.",-GenJournalLine.Amount / 2);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE DeleteGeneralJournalLine@113(JournalTemplateName@1000 : Code[20];JournalBatchName@1001 : Code[20]);
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      IF JournalBatchName <> '' THEN
        GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      GenJournalLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostFAJournalLines@95(VAR FAJournalLine@1001 : Record 5621;FADepreciationBook@1002 : Record 5612) PostingDate : Date;
    VAR
      FAJournalBatch@1000 : Record 5620;
    BEGIN
      CreateFAJournalBatch(FAJournalBatch);
      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FADepreciationBook,FAJournalLine."FA Posting Type"::"Acquisition Cost",
        LibraryRandom.RandDec(1000,2) * 100);
      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FADepreciationBook,FAJournalLine."FA Posting Type"::Depreciation,-FAJournalLine.Amount / 2);
      PostingDate := FAJournalLine."Posting Date";
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);
    END;

    LOCAL PROCEDURE DeleteFAJournalLine@116(JournalTemplateName@1001 : Code[20];JournalBatchName@1000 : Code[20]);
    VAR
      FAJournalLine@1002 : Record 5621;
    BEGIN
      FAJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      IF JournalBatchName <> '' THEN
        FAJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      FAJournalLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE CreateGenJournalBatch@16(VAR GenJournalBatch@1002 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.INIT;
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::Assets);
      GenJournalTemplate.SETRANGE(Recurring,FALSE);

      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateGenJournalBatchWithNoSeries@107(VAR GenJournalBatch@1000 : Record 232;DepreciationBookCode@1004 : Code[10];PostingDate@1003 : Date;SeriesLineCount@1001 : Integer);
    BEGIN
      // Create a few series lines with Starting Date starts from first day of month. Period is 1 month.

      CreateGenJournalBatch(GenJournalBatch);
      GenJournalBatch.VALIDATE("No. Series",CreateNoSeriesCode(SeriesLineCount,CALCDATE('<-CM>',PostingDate)));
      GenJournalBatch.MODIFY(TRUE);
      CreateFAJnlSetupWithTemplateBatch(DepreciationBookCode,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,FALSE);
    END;

    LOCAL PROCEDURE CreateGLAccountWithDimension@99(VAR DefaultDimension@1002 : Record 352) : Code[20];
    VAR
      GLAccount@1000 : Record 15;
      Dimension@1001 : Record 348;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDefaultDimension(DefaultDimension,DATABASE::"G/L Account",GLAccount."No.",Dimension.Code,'');  // Passing Blank for Dimension Value Code.
      DefaultDimension.VALIDATE("Value Posting",DefaultDimension."Value Posting"::"Code Mandatory");
      DefaultDimension.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateGLAccountWithDefaultDimension@131() GLAccountNo : Code[20];
    BEGIN
      GLAccountNo := LibraryERM.CreateGLAccountNo;
      CreateDefaultDim(DATABASE::"G/L Account",GLAccountNo);
    END;

    LOCAL PROCEDURE CreateDefaultDim@133(TableID@1000 : Integer;No@1001 : Code[20]);
    VAR
      DimensionValue@1003 : Record 349;
      DefaultDimension@1002 : Record 352;
    BEGIN
      LibraryDimension.CreateDimWithDimValue(DimensionValue);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,TableID,No,
        DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateInsuranceJournalBatch@46(VAR InsuranceJournalBatch@1001 : Record 5634);
    VAR
      InsuranceJournalTemplate@1000 : Record 5633;
    BEGIN
      InsuranceJournalTemplate.FINDFIRST;
      LibraryFixedAsset.CreateInsuranceJournalBatch(InsuranceJournalBatch,InsuranceJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateInsuranceJournalLine@47(VAR InsuranceJournalLine@1000 : Record 5635;InsuranceNo@1002 : Code[20]);
    VAR
      InsuranceJournalBatch@1001 : Record 5634;
    BEGIN
      CreateInsuranceJournalBatch(InsuranceJournalBatch);
      LibraryFixedAsset.CreateInsuranceJournalLine(
        InsuranceJournalLine,InsuranceJournalBatch."Journal Template Name",InsuranceJournalBatch.Name);
      UpdateInsuranceJournalLine(InsuranceJournalLine,InsuranceNo);
    END;

    LOCAL PROCEDURE CreateInsuranceWithDimension@13() : Code[20];
    VAR
      DefaultDimension@1003 : Record 352;
      DimensionValue@1004 : Record 349;
      Insurance@1000 : Record 5628;
    BEGIN
      LibraryFixedAsset.CreateInsurance(Insurance);
      FindNonGlobalDimValue(DimensionValue);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::Insurance,Insurance."No.",DimensionValue."Dimension Code",DimensionValue.Code);
      EXIT(Insurance."No.");
    END;

    LOCAL PROCEDURE CalculateDepreciationDateAfterOneYear@115() : Date;
    BEGIN
      EXIT(CALCDATE('<1Y>',WORKDATE));
    END;

    LOCAL PROCEDURE DepreciationWithFixedAsset@18(VAR FAAllocation@1005 : Record 5615;BalAccount@1001 : Boolean) FANo : Code[20];
    VAR
      FADepreciationBook@1006 : Record 5612;
      FAJournalBatch@1009 : Record 5620;
      FAJournalLine@1000 : Record 5621;
      GLIntegrationAcqCostOld@1008 : Boolean;
    BEGIN
      // 1.Setup: Create Fixed Asset, Depreciation Book, FA Depreciation Book, modify Depreciation Book, create FA Journal Line, Post the
      // FA Journal Line, create FA Allocation with Dimension.
      CreateFixedAssetDepreciation(FADepreciationBook);
      GLIntegrationAcqCostOld := ModifyAcquisitionIntegration(FADepreciationBook."Depreciation Book Code",FALSE);
      CreateFAJournalBatch(FAJournalBatch);
      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FADepreciationBook,FAJournalLine."FA Posting Type"::"Acquisition Cost",
        LibraryRandom.RandDec(1000,2));  // Take Random Amount.
      AttachDimensionInFAJournalLine(FAJournalLine);
      FANo := FADepreciationBook."FA No.";
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);
      CreateAndAttachDimensionOnFAAllocation(
        FAAllocation,FADepreciationBook."FA Posting Group",FAAllocation."Allocation Type"::Depreciation);

      // 2.Exercise: Run the Calculate Depreciation.
      RunCalculateDepreciation(FADepreciationBook."FA No.",FADepreciationBook."Depreciation Book Code",BalAccount);
      ModifyAcquisitionIntegration(FADepreciationBook."Depreciation Book Code",GLIntegrationAcqCostOld);
    END;

    LOCAL PROCEDURE DimensionOnInsuranceJournal@54(VAR InsuranceJournalLine@1000 : Record 5635);
    VAR
      DimensionValue@1002 : Record 349;
    BEGIN
      FindNonGlobalDimValue(DimensionValue);
      InsuranceJournalLine.VALIDATE(
        "Dimension Set ID",
        LibraryDimension.CreateDimSet(InsuranceJournalLine."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code));
      InsuranceJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindNonGlobalDimValue@41(VAR DimensionValue@1001 : Record 349);
    VAR
      Dimension@1000 : Record 348;
    BEGIN
      Dimension.SETRANGE(Blocked,FALSE);
      Dimension.SETFILTER(Code,'<>%1&<>%2',LibraryERM.GetGlobalDimensionCode(1),LibraryERM.GetGlobalDimensionCode(2));
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
    END;

    LOCAL PROCEDURE FindFAJournalLine@108(FANo@1001 : Code[20]) : Boolean;
    VAR
      FAJournalLine@1000 : Record 5621;
    BEGIN
      FAJournalLine.SETRANGE("FA No.",FANo);
      EXIT(FAJournalLine.FINDFIRST);
    END;

    LOCAL PROCEDURE FindGeneralJournalLine@110(AccountNo@1001 : Code[20]) : Boolean;
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Account No.",AccountNo);
      EXIT(GenJournalLine.FINDFIRST);
    END;

    LOCAL PROCEDURE FindFALedgerEntry@27(VAR FALedgerEntry@1001 : Record 5601;FANo@1000 : Code[20]);
    BEGIN
      FALedgerEntry.SETRANGE("FA No.",FANo);
      FALedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindInsurance@4() : Code[20];
    VAR
      Insurance@1000 : Record 5628;
    BEGIN
      Insurance.FINDFIRST;
      EXIT(Insurance."No.");
    END;

    LOCAL PROCEDURE FindGenJnlLine@126(VAR GenJnlLine@1000 : Record 81;DocumentNo@1001 : Code[20];AccountNo@1002 : Code[20]);
    BEGIN
      WITH GenJnlLine DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Account No.",AccountNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE IndexFixedAsset@82(VAR DimensionValue@1005 : Record 349;VAR FAAllocationCode@1003 : Code[10];BalAccount@1006 : Boolean) : Code[20];
    VAR
      FAAllocation@1002 : Record 5615;
      FixedAsset@1007 : Record 5600;
      GenJournalLine@1000 : Record 81;
      AllowIndexationOld@1004 : Boolean;
    BEGIN
      // Create and post FA General Journal for Posting Type Acquisition Cost, modify the Allow Indexation in Depreciation Book,
      // create FA Allocation with dimension.
      CreateFAGLJournalLine(GenJournalLine);
      FixedAsset.GET(GenJournalLine."Account No.");
      AttachDimensionOnFixedAsset(DimensionValue,FixedAsset."No.");
      AllowIndexationOld := AllowIndexationInDepreciation(GenJournalLine."Depreciation Book Code",TRUE);
      ModifyAccountInFAPostingGroup(FixedAsset."FA Posting Group");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateAndAttachDimensionOnFAAllocation(FAAllocation,FixedAsset."FA Posting Group",FAAllocation."Allocation Type"::Acquisition);
      FAAllocationCode := FAAllocation.Code;

      // 2.Exercise: Run the Index Fixed Assets.
      RunIndexFixedAssets(FixedAsset."No.",GenJournalLine."Depreciation Book Code",BalAccount);

      // 3.Tear Down: Change back into the Depreciation Book.
      AllowIndexationInDepreciation(GenJournalLine."Depreciation Book Code",AllowIndexationOld);
      EXIT(FixedAsset."No.");
    END;

    LOCAL PROCEDURE InsuranceDeprBookInFASetup@39(InsuranceDeprBook@1000 : Code[10]) OldInsuranceDeprBook : Code[10];
    VAR
      FASetup@1001 : Record 5603;
    BEGIN
      FASetup.GET;
      OldInsuranceDeprBook := FASetup."Insurance Depr. Book";
      FASetup.VALIDATE("Insurance Depr. Book",InsuranceDeprBook);
      FASetup.MODIFY(TRUE)
    END;

    LOCAL PROCEDURE InsuranceInGenJournalLine@43(VAR GenJournalLine@1000 : Record 81;InsuranceNo@1001 : Code[20]);
    BEGIN
      GenJournalLine.VALIDATE("Insurance No.",InsuranceNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetDefaultDimID@127(GLAccountNo@1000 : Code[20];FANo@1001 : Code[20]) : Integer;
    VAR
      DimMgt@1004 : Codeunit 408;
      GlobalDim1Code@1006 : Code[20];
      GlobalDim2Code@1005 : Code[20];
      No@1003 : ARRAY [10] OF Code[20];
      TableID@1002 : ARRAY [10] OF Integer;
    BEGIN
      IF FANo <> '' THEN BEGIN
        TableID[1] := DATABASE::"Fixed Asset";
        No[1] := FANo;
      END;
      IF GLAccountNo <> '' THEN BEGIN
        TableID[2] := DATABASE::"G/L Account";
        No[2] := GLAccountNo;
      END;
      EXIT(DimMgt.GetDefaultDimID(TableID,No,'',GlobalDim1Code,GlobalDim2Code,0,0));
    END;

    LOCAL PROCEDURE ModifyAcquisitionIntegration@9(DepreciationBookCode@1002 : Code[10];GLIntegrationAcqCost@1001 : Boolean) GLIntegrationAcqCostOld : Boolean;
    VAR
      DepreciationBook@1000 : Record 5611;
    BEGIN
      DepreciationBook.GET(DepreciationBookCode);
      GLIntegrationAcqCostOld := DepreciationBook."G/L Integration - Acq. Cost";
      DepreciationBook.VALIDATE("G/L Integration - Acq. Cost",GLIntegrationAcqCost);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyAccountInFAPostingGroup@70(Code@1000 : Code[10]);
    VAR
      FAPostingGroup@1001 : Record 5606;
    BEGIN
      FAPostingGroup.GET(Code);
      FAPostingGroup.VALIDATE("Acquisition Cost Bal. Acc.",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.VALIDATE("Appreciation Bal. Account",LibraryERM.CreateGLAccountNo);
      FAPostingGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyFAPostingType@42(VAR GenJournalLine@1000 : Record 81;FAPostingType@1001 : Option);
    BEGIN
      GenJournalLine.VALIDATE("FA Posting Type",FAPostingType);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyInsurancePosting@12(AutomaticInsurancePosting@1000 : Boolean) AutomaticInsurancePostingOld : Boolean;
    VAR
      FASetup@1001 : Record 5603;
    BEGIN
      FASetup.GET;
      AutomaticInsurancePostingOld := FASetup."Automatic Insurance Posting";
      FASetup.VALIDATE("Automatic Insurance Posting",AutomaticInsurancePosting);
      FASetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunCalculateDepreciation@22(No@1001 : Code[20];DepreciationBookCode@1003 : Code[10];BalAccount@1004 : Boolean);
    VAR
      FixedAsset@1002 : Record 5600;
      CalculateDepreciation@1000 : Report 5692;
    BEGIN
      CLEAR(CalculateDepreciation);
      FixedAsset.SETRANGE("No.",No);
      CalculateDepreciation.SETTABLEVIEW(FixedAsset);

      CalculateDepreciation.InitializeRequest(
        DepreciationBookCode,CalculateDepreciationDateAfterOneYear,FALSE,0,0D,No,FixedAsset.Description,BalAccount);
      CalculateDepreciation.USEREQUESTPAGE(FALSE);
      CalculateDepreciation.RUN;
    END;

    LOCAL PROCEDURE RunCancelFALedgerEntry@49(No@1001 : Code[20];DepreciationBookCode@1003 : Code[10];BalAccount@1005 : Boolean);
    VAR
      FixedAsset@1002 : Record 5600;
      CancelFALedgerEntries@1000 : Report 5688;
    BEGIN
      CLEAR(CancelFALedgerEntries);
      FixedAsset.SETRANGE("No.",No);
      CancelFALedgerEntries.SETTABLEVIEW(FixedAsset);
      CancelFALedgerEntries.InitializeRequest(DepreciationBookCode,WORKDATE,WORKDATE,FALSE,0D,No,FixedAsset.Description,BalAccount);
      CancelFALedgerEntries.SetCancelAcquisitionCost(TRUE);
      CancelFALedgerEntries.SetCancelDepreciation(TRUE);
      CancelFALedgerEntries.USEREQUESTPAGE(FALSE);
      CancelFALedgerEntries.RUN;
    END;

    LOCAL PROCEDURE RunCancelFALedgerEntryWithtParams@102(No@1000 : Code[20];DepreciationBookCode@1001 : Code[10];StartingDateFrom@1006 : Date;EndingDateFrom@1007 : Date;UseNewPostingDate@1002 : Boolean;NewPostingDate@1003 : Date;BalAccount@1008 : Boolean);
    VAR
      FixedAsset@1005 : Record 5600;
      CancelFALedgerEntries@1004 : Report 5688;
    BEGIN
      CLEAR(CancelFALedgerEntries);
      FixedAsset.SETRANGE("No.",No);
      CancelFALedgerEntries.SETTABLEVIEW(FixedAsset);
      CancelFALedgerEntries.InitializeRequest(
        DepreciationBookCode,StartingDateFrom,EndingDateFrom,UseNewPostingDate,NewPostingDate,'','',BalAccount);
      CancelFALedgerEntries.SetCancelDepreciation(TRUE);
      CancelFALedgerEntries.USEREQUESTPAGE(FALSE);
      CancelFALedgerEntries.RUN;
    END;

    LOCAL PROCEDURE RunCancelFAEntries@3(VAR FALedgerEntry@1000 : Record 5601);
    VAR
      CancelFAEntries@1001 : Report 5686;
    BEGIN
      CLEAR(CancelFAEntries);
      CancelFAEntries.GetFALedgEntry(FALedgerEntry);
      CancelFAEntries.USEREQUESTPAGE(FALSE);
      CancelFAEntries.RUN;
    END;

    LOCAL PROCEDURE RunCopyDepreciationBook@35(No@1000 : Code[20];DepreciationBookCode@1003 : Code[10];DepreciationBookCode2@1004 : Code[10]);
    VAR
      FixedAsset@1001 : Record 5600;
      CopyDepreciationBook@1002 : Report 5687;
    BEGIN
      CLEAR(CopyDepreciationBook);
      FixedAsset.SETRANGE("No.",No);
      CopyDepreciationBook.SETTABLEVIEW(FixedAsset);
      CopyDepreciationBook.InitializeRequest(
        DepreciationBookCode,DepreciationBookCode2,WORKDATE,CalculateDepreciationDateAfterOneYear,No,FixedAsset.Description,FALSE);
      CopyDepreciationBook.SetCopyAcquisitionCost(TRUE);
      CopyDepreciationBook.USEREQUESTPAGE(FALSE);
      CopyDepreciationBook.RUN;
    END;

    LOCAL PROCEDURE RunIndexFixedAssets@79(No@1000 : Code[20];DepreciationBookCode@1003 : Code[10];BalAccount@1001 : Boolean);
    VAR
      FixedAsset@1004 : Record 5600;
      IndexFixedAssets@1002 : Report 5690;
    BEGIN
      CLEAR(IndexFixedAssets);
      FixedAsset.SETRANGE("No.",No);
      IndexFixedAssets.SETTABLEVIEW(FixedAsset);
      IndexFixedAssets.InitializeRequest(DepreciationBookCode,LibraryRandom.RandInt(100),WORKDATE,0D,No,No,BalAccount);  // Using Random Value for Index.
      IndexFixedAssets.SetIndexAcquisitionCost(TRUE);
      IndexFixedAssets.SetIndexDepreciation(TRUE);
      IndexFixedAssets.USEREQUESTPAGE(FALSE);
      IndexFixedAssets.RUN;
    END;

    LOCAL PROCEDURE RunIndexInsurance@81(No@1000 : Code[20]);
    VAR
      FixedAsset@1001 : Record 5600;
      IndexInsurance@1002 : Report 5691;
    BEGIN
      CLEAR(IndexInsurance);
      FixedAsset.SETRANGE("No.",No);
      IndexInsurance.SETTABLEVIEW(FixedAsset);
      IndexInsurance.InitializeRequest(No,No,WORKDATE,LibraryRandom.RandInt(100));  // Using Random Value for Index Figure.
      IndexInsurance.USEREQUESTPAGE(FALSE);
      IndexInsurance.RUN;
    END;

    LOCAL PROCEDURE UpdateAccountNoInFAAllocation@191(FAAllocation@1000 : Record 5615;AccountNo@1001 : Code[20]);
    BEGIN
      FAAllocation.VALIDATE("Account No.",AccountNo);
      FAAllocation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAccountNoInJournalLine@85(VAR GenJournalLine@1000 : Record 81;AccountNo@1001 : Code[20]);
    BEGIN
      GenJournalLine.VALIDATE("Account No.",AccountNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAllocationPercent@24(VAR FAAllocation@1000 : Record 5615);
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      FAAllocation.SETRANGE(Code,FAAllocation.Code);
      FAAllocation.SETRANGE("Allocation Type",FAAllocation."Allocation Type");
      FAAllocation.FINDSET;

      // Using Random Number Generator for Allocation Percent.
      REPEAT
        LibraryERM.CreateGLAccount(GLAccount);
        FAAllocation.VALIDATE("Account No.",GLAccount."No.");
        FAAllocation.VALIDATE("Allocation %",LibraryRandom.RandInt(20));
        FAAllocation.MODIFY(TRUE);
        GLAccount.NEXT;
      UNTIL FAAllocation.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateDateFADepreciationBook@48(VAR FADepreciationBook@1000 : Record 5612;DepreciationBookCode@1001 : Code[10]);
    BEGIN
      FADepreciationBook.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      FADepreciationBook.VALIDATE("Depreciation Starting Date",WORKDATE);

      FADepreciationBook.VALIDATE("Depreciation Ending Date",CalculateDepreciationDateAfterOneYear);
      FADepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateFAJournalSetup@34(VAR FAJournalSetup@1000 : Record 5605);
    VAR
      FAJournalSetup2@1005 : Record 5605;
      FASetup@1004 : Record 5603;
    BEGIN
      FASetup.GET;
      FAJournalSetup2.SETRANGE("Depreciation Book Code",FASetup."Default Depr. Book");
      FAJournalSetup2.FINDFIRST;
      FAJournalSetup.TRANSFERFIELDS(FAJournalSetup2,FALSE);
      FAJournalSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateFAReclassJournal@68(VAR FAReclassJournalLine@1000 : Record 5624;FANo@1001 : Code[20];NewFANo@1002 : Code[20]);
    BEGIN
      FAReclassJournalLine.VALIDATE("FA Posting Date",WORKDATE);
      FAReclassJournalLine.VALIDATE("Document No.",FANo);
      FAReclassJournalLine.VALIDATE("FA No.",FANo);
      FAReclassJournalLine.VALIDATE("New FA No.",NewFANo);
      FAReclassJournalLine.VALIDATE("Reclassify Acq. Cost %",LibraryRandom.RandInt(100));  // Using Ranodm Reclassify Acq. Cost.
      FAReclassJournalLine.VALIDATE("Reclassify Acquisition Cost",TRUE);
      FAReclassJournalLine.VALIDATE("Reclassify Depreciation",TRUE);
      FAReclassJournalLine.VALIDATE("Insert Bal. Account",TRUE);
      FAReclassJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUseSameDates@105(Code@1000 : Code[10];UseSameFAGLDates@1002 : Boolean);
    VAR
      DepreciationBook@1001 : Record 5611;
    BEGIN
      DepreciationBook.GET(Code);
      DepreciationBook.VALIDATE("Use Same FA+G/L Posting Dates",UseSameFAGLDates);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGLIntegration@98(Code@1003 : Code[10];GLIntegrationAcqCost@1001 : Boolean;GLIntegrationDepreciation@1002 : Boolean);
    VAR
      DepreciationBook@1000 : Record 5611;
    BEGIN
      DepreciationBook.GET(Code);
      DepreciationBook.VALIDATE("G/L Integration - Acq. Cost",GLIntegrationAcqCost);
      DepreciationBook.VALIDATE("G/L Integration - Depreciation",GLIntegrationDepreciation);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInactiveOnFixedAsset@100(No@1001 : Code[20]);
    VAR
      FixedAsset@1000 : Record 5600;
    BEGIN
      FixedAsset.GET(No);
      FixedAsset.VALIDATE(Inactive,TRUE);
      FixedAsset.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInsuranceJournalLine@62(VAR InsuranceJournalLine@1000 : Record 5635;InsuranceNo@1004 : Code[20]);
    VAR
      FADepreciationBook@1002 : Record 5612;
    BEGIN
      CreateFixedAssetDepreciation(FADepreciationBook);

      InsuranceJournalLine.VALIDATE("Posting Date",WORKDATE);
      InsuranceJournalLine.VALIDATE("Document No.",FADepreciationBook."FA No.");
      InsuranceJournalLine.VALIDATE("FA No.",FADepreciationBook."FA No.");
      InsuranceJournalLine.VALIDATE("Insurance No.",InsuranceNo);
      InsuranceJournalLine.VALIDATE(Amount,LibraryRandom.RandDec(1000,2));  // Using Random Number Generator for Amount.
      InsuranceJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDeprExpenseAccInFAPostingGroup@117(FAPostingGroupCode@1000 : Code[10];GLAccountNo@1001 : Code[20]);
    VAR
      FAPostingGroup@1002 : Record 5606;
    BEGIN
      FAPostingGroup.GET(FAPostingGroupCode);
      FAPostingGroup.VALIDATE("Depreciation Expense Acc.",GLAccountNo);
      FAPostingGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UseDefaultDimDepreciationBook@63(Code@1000 : Code[10];UseDefaultDimension@1001 : Boolean) OldUseDefaultDimension : Boolean;
    VAR
      DepreciationBook@1002 : Record 5611;
    BEGIN
      DepreciationBook.GET(Code);
      OldUseDefaultDimension := DepreciationBook."Use Default Dimension";
      DepreciationBook.VALIDATE("Use Default Dimension",UseDefaultDimension);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostAcquisitionCost@124(VAR FADepreciationBook@1002 : Record 5612);
    VAR
      FAJournalBatch@1001 : Record 5620;
      FAJournalLine@1000 : Record 5621;
    BEGIN
      CreateFAJournalBatch(FAJournalBatch);
      CreateFAJournalLine(
        FAJournalLine,FAJournalBatch,FADepreciationBook,FAJournalLine."FA Posting Type"::"Acquisition Cost",
        LibraryRandom.RandDec(10000,2));
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);
    END;

    LOCAL PROCEDURE VerifyCancelFAJournalLines@123(FANo@1001 : Code[20]);
    VAR
      FALedgerEntry@1000 : Record 5601;
      FAJournalLine@1002 : Record 5621;
    BEGIN
      FALedgerEntry.SETRANGE("FA No.",FANo);
      FALedgerEntry.FINDSET;
      REPEAT
        FAJournalLine.SETRANGE("FA Error Entry No.",FALedgerEntry."Entry No.");
        FAJournalLine.FINDFIRST;
        FAJournalLine.TESTFIELD("FA No.",FALedgerEntry."FA No.");
        FAJournalLine.TESTFIELD(Amount,-FALedgerEntry.Amount);
      UNTIL FALedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyCancelGenJournalLines@97(FANo@1001 : Code[20]);
    VAR
      FALedgerEntry@1000 : Record 5601;
      GenJournalLine@1002 : Record 81;
    BEGIN
      FALedgerEntry.SETRANGE("FA No.",FANo);
      FALedgerEntry.FINDSET;
      REPEAT
        GenJournalLine.SETRANGE("FA Error Entry No.",FALedgerEntry."Entry No.");
        GenJournalLine.FINDFIRST;
        GenJournalLine.TESTFIELD("Account No.",FALedgerEntry."FA No.");
        GenJournalLine.TESTFIELD(Amount,-FALedgerEntry.Amount);
      UNTIL FALedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDimensionCodeAndValue@101(FAAllocation@1000 : Record 5615;GenJournalLine@1001 : Record 81);
    VAR
      DimensionSetEntry@1003 : Record 480;
      DimensionSetEntry2@1005 : Record 480;
    BEGIN
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,FAAllocation."Dimension Set ID");
      GenJournalLine.SETRANGE("Account No.",FAAllocation."Account No.");
      GenJournalLine.FINDFIRST;
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry2,GenJournalLine."Dimension Set ID");
      DimensionSetEntry2.SETRANGE("Dimension Set ID",DimensionSetEntry."Dimension Set ID");
      DimensionSetEntry2.FINDFIRST;
      DimensionSetEntry2.TESTFIELD("Dimension Code",DimensionSetEntry."Dimension Code");
      DimensionSetEntry2.TESTFIELD("Dimension Value Code",DimensionSetEntry."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDimensionOnFAAllocation@83(DocumentNo@1002 : Code[20];Code@1001 : Code[10]);
    VAR
      FAAllocation@1000 : Record 5615;
      GenJournalLine@1003 : Record 81;
    BEGIN
      FAAllocation.SETRANGE(Code,Code);
      FAAllocation.SETRANGE("Allocation Type",FAAllocation."Allocation Type"::Acquisition);
      FAAllocation.FINDSET;
      GenJournalLine.SETRANGE("Document No.",DocumentNo);
      GenJournalLine.FINDFIRST;
      REPEAT
        VerifyDimensionCodeAndValue(FAAllocation,GenJournalLine);
      UNTIL FAAllocation.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDimensionOnGLJournal@59(DocumentNo@1004 : Code[20];Code@1001 : Code[10];AllocationType@1003 : Option);
    VAR
      FAAllocation@1000 : Record 5615;
      GenJournalLine@1002 : Record 81;
    BEGIN
      FAAllocation.SETRANGE(Code,Code);
      FAAllocation.SETRANGE("Allocation Type",AllocationType);
      FAAllocation.FINDSET;
      GenJournalLine.SETRANGE("Document No.",DocumentNo);
      REPEAT
        GenJournalLine.SETRANGE("Account No.",FAAllocation."Account No.");
        GenJournalLine.FINDFIRST;
        GenJournalLine.TESTFIELD("Dimension Set ID",FAAllocation."Dimension Set ID");
      UNTIL FAAllocation.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDimensionValueOnGLJournal@119(DocumentNo@1004 : Code[20];AccountNo@1003 : Code[20];DimensionValue@1005 : Record 349);
    VAR
      GenJournalLine@1002 : Record 81;
      DimensionSetEntry@1001 : Record 480;
      FAJournalSetup@1006 : Record 5605;
    BEGIN
      FAJournalSetup.FINDLAST;
      WITH GenJournalLine DO BEGIN
        FindGenJnlLine(GenJournalLine,DocumentNo,AccountNo);
        LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,"Dimension Set ID");
        Assert.AreEqual(
          DimensionValue."Dimension Code",DimensionSetEntry."Dimension Code",
          STRSUBSTNO(CheckDimValueInGenJournalErr,DimensionSetEntry.FIELDCAPTION("Dimension Code"),
            "Document No.","Account No.",FAJournalSetup."Gen. Jnl. Batch Name"));
        Assert.AreEqual(
          DimensionValue.Code,DimensionSetEntry."Dimension Value Code",
          STRSUBSTNO(CheckDimValueInGenJournalErr,DimensionSetEntry.FIELDCAPTION("Dimension Value Code"),
            "Document No.","Account No.",FAJournalSetup."Gen. Jnl. Batch Name"));
      END;
    END;

    LOCAL PROCEDURE VerifyDimSetEntryOnGenJnlLine@125(DocumentNo@1004 : Code[20];AccountNo@1003 : Code[20];ExpectedDimSetEntry@1005 : Integer);
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      WITH GenJournalLine DO BEGIN
        FindGenJnlLine(GenJournalLine,DocumentNo,AccountNo);
        Assert.AreEqual(ExpectedDimSetEntry,"Dimension Set ID",FIELDCAPTION("Dimension Set ID"));
      END;
    END;

    LOCAL PROCEDURE VerifyDimensionOnLedgerEntry@86(DimensionValue@1001 : Record 349;FANo@1002 : Code[20]);
    VAR
      DimensionSetEntry@1003 : Record 480;
      FALedgerEntry@1000 : Record 5601;
      LibraryDimension@1004 : Codeunit 131001;
    BEGIN
      FALedgerEntry.SETRANGE("FA No.",FANo);
      FALedgerEntry.FINDFIRST;
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,FALedgerEntry."Dimension Set ID");
      DimensionSetEntry.TESTFIELD("Dimension Code",DimensionValue."Dimension Code");
      DimensionSetEntry.TESTFIELD("Dimension Value Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE VerifyFAGLJournal@37(AccountNo@1000 : Code[20];DimensionSetID@1001 : Integer);
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Account No.",AccountNo);
      GenJournalLine.FINDFIRST;
      GenJournalLine.TESTFIELD("Dimension Set ID",DimensionSetID);
    END;

    LOCAL PROCEDURE VerifyFAGLJournalLines@66(DimensionValue@1000 : Record 349;AccountNo@1001 : Code[20]);
    VAR
      DimensionSetEntry@1002 : Record 480;
      GenJournalLine@1003 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Account No.",AccountNo);
      GenJournalLine.FINDFIRST;
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,GenJournalLine."Dimension Set ID");
      DimensionSetEntry.TESTFIELD("Dimension Code",DimensionValue."Dimension Code");
      DimensionSetEntry.TESTFIELD("Dimension Value Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE VerifyFAJournalLine@36(FANo@1000 : Code[20];DepreciationBookCode@1004 : Code[10];DimensionSetID@1001 : Integer);
    VAR
      FAJournalLine@1003 : Record 5621;
    BEGIN
      FAJournalLine.SETRANGE("Depreciation Book Code",DepreciationBookCode);
      FAJournalLine.SETRANGE("FA No.",FANo);
      FAJournalLine.FINDFIRST;
      FAJournalLine.TESTFIELD("Dimension Set ID",DimensionSetID);
    END;

    LOCAL PROCEDURE VerifyFALedgerEntry@25(FANo@1001 : Code[20];DimensionSetID@1000 : Integer);
    VAR
      FALedgerEntry@1002 : Record 5601;
    BEGIN
      FindFALedgerEntry(FALedgerEntry,FANo);
      FALedgerEntry.TESTFIELD("Dimension Set ID",DimensionSetID);
    END;

    LOCAL PROCEDURE VerifyInsuranceDimension@10(DefaultDimension@1000 : Record 352;FANo@1002 : Code[20]);
    VAR
      DimensionSetEntry@1004 : Record 480;
      InsuranceJournalLine@1001 : Record 5635;
    BEGIN
      InsuranceJournalLine.SETRANGE("FA No.",FANo);
      InsuranceJournalLine.FINDFIRST;
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,InsuranceJournalLine."Dimension Set ID");
      DimensionSetEntry.TESTFIELD("Dimension Code",DefaultDimension."Dimension Code");
      DimensionSetEntry.TESTFIELD("Dimension Value Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyInsuranceJournalLine@11(FANo@1001 : Code[20];DimensionSetID@1000 : Integer);
    VAR
      InsuranceJournalLine@1002 : Record 5635;
    BEGIN
      InsuranceJournalLine.SETRANGE("FA No.",FANo);
      InsuranceJournalLine.FINDFIRST;
      InsuranceJournalLine.TESTFIELD("Dimension Set ID",DimensionSetID);
    END;

    LOCAL PROCEDURE VerifyInsCoverageLedgerEntry@6(FANo@1000 : Code[20];DimensionSetID@1001 : Integer);
    VAR
      InsCoverageLedgerEntry@1002 : Record 5629;
    BEGIN
      InsCoverageLedgerEntry.SETRANGE("FA No.",FANo);
      InsCoverageLedgerEntry.FINDFIRST;
      InsCoverageLedgerEntry.TESTFIELD("Dimension Set ID",DimensionSetID);
    END;

    LOCAL PROCEDURE VerifyMaintenanceLedgerEntry@45(FANo@1000 : Code[20];DimensionSetID@1002 : Integer);
    VAR
      MaintenanceLedgerEntry@1001 : Record 5625;
    BEGIN
      MaintenanceLedgerEntry.SETRANGE("FA No.",FANo);
      MaintenanceLedgerEntry.FINDFIRST;
      MaintenanceLedgerEntry.TESTFIELD("Dimension Set ID",DimensionSetID);
    END;

    LOCAL PROCEDURE VerifyDimensionValue@146(DimensionValue@1000 : Record 349;FixedAssetNo@1001 : Code[20]);
    VAR
      DefaultDimension@1002 : Record 352;
    BEGIN
      DefaultDimension.GET(DATABASE::"Fixed Asset",FixedAssetNo,DimensionValue."Dimension Code");
      DefaultDimension.TESTFIELD("Dimension Value Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE VerifyExpectedGenJnlDocNo@109(JournalTemplateName@1000 : Code[20];JournalBatchName@1003 : Code[20];ExpectedDocumentNo@1001 : Code[20]);
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      GenJournalLine.FINDFIRST;
      GenJournalLine.TESTFIELD("Document No.",ExpectedDocumentNo);
    END;

    LOCAL PROCEDURE VerifyExpectedFAJnlDocNo@112(JournalTemplateName@1003 : Code[20];JournalBatchName@1001 : Code[20];ExpectedDocumentNo@1000 : Code[20]);
    VAR
      FAJournalLine@1002 : Record 5621;
    BEGIN
      FAJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      FAJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      FAJournalLine.FINDFIRST;
      FAJournalLine.TESTFIELD("Document No.",ExpectedDocumentNo);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@74(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@29(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Fixed Asset] [Dimension]
      Unsupported version tags:
      NA: Unable to Compile
      ES: Unable to Execute
      DE: Unable to Execute

      Test the Dimension on Fixed Asset.
        1. Test the Fixed Asset GLJournal with Insurance.
        2. Test the Fixed Asset GLJournal with Automatic Insurance Posting False in FA Setup.
        3. Test the Fixed Asset GLJournal with new Insurance, Automatic Insurance Posting False in FA Setup and Use Default
           Dimension TRUE in Depreciation Book.
        4. Test the Calculate Depreciation with Bal Account.
        5. Test the Calculate Depreciation without Bal Account.
        6. Test the FA Ledger Entry with FA GL Journal.
        7. Test the cancel FA Entries.
        8. Test the Cancel FA Ledger Entry with Bal Account.
        9. Test the Cancel FA Ledger Entry without Bal Account.
       10. Test the Copy Depreciation Book.
       11. Test the creation of Journal by Duplication.
       12. Test the creation of Journal by Duplication with Use Default Dimension TRUE in Depreciation Book.
       13. Test the Dimension in FA Ledger Entry of Fixed Asset.
       14. Test the Dimension in Maintenance Ledger Entry.
       15. Test the Dimension in Insurance Ledger Entry.
       16. Test the Index Fixed Assets with Balance Account.
       17. Test the Index Fixed Assets with out Balance Account.
       18. Test the Index Insurance.
       19. Test the Insert Balance Account.
       20. Test Reclassify the FA Reclass Journal.
       21. Test Create New Fixed Asset and Attach a Dimension with Fixed Asset.
       22. Test error occurs on Running Cancel FA Ledger Entry Report without Depreciation Book Code.
       23. Test and verify Cancel FA Ledger Entry Report functionality for Depreciation Book G/L Integration as FALSE.
       24. Test and verify Cancel FA Ledger Entry Report functionality for Depreciation Book G/L Integration as TRUE.
       25. Test and verify Cancel FA Ledger Entry Report functionality for Inactive Fixed Asset.
       26. Test Error Message while posting Disposal of zero Amount from FA GL Journal Line when Balance Account having Dimension Value Blank and Value Posting as Code Mandatory.
       27. Test Error Message while posting Disposal of zero Amount from FA GL Journal Line when Dimension Value on FA Allocation Dimension Account is Blank and Value Posting is Code Mandatory.
       28. Test the Calculate Depreciation with Bal Account and two Dimensions.

      TFS_TS_ID = 201111
      Covers Test cases:
      --------------------------------------------------------------------------------------------------------
      Test Function Name                                                                               TFS ID
      --------------------------------------------------------------------------------------------------------
      AutomaticInsuranceLedger,ManualInsuranceNotDefaultDim, ManualInsuranceWithDefaultDim             140721
      DepreciationBalanceAccount, DepreciationNotBalanceAccount                                        140722
      DimensionOnFALedgerEntry, CancelLedgerEntry, CancelLedgerBalanceAccount                          140723
      CancelLedgerNotBalanceAccount                                                                    140723
      DepreciationByCopyDepreciation                                                                   140724
      DuplicateWithOutUseDefaultDim, DuplicateWithUseDefaultDim                                        140725

      TFS_TS_ID = 201112
      Covers Test cases:
      --------------------------------------------------------------------------------------------------------
      Test Function Name                                                                               TFS ID
      --------------------------------------------------------------------------------------------------------
      DimensionOnFixedAsset, DimensionOnMaintenanceLedger, DimensionOnInsuranceLedger                  140726
      IndexFAWithBalanceAccount, IndexFAWithOutBalanceAccount, InsuranceIndex                          140728
      InsertFABalanceAccount                                                                           140729
      ReclassifyFixedAsset                                                                             140730

      TFS_TS_ID = 237335
      Covers Test case:
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      CreateFixedAssetWithDimension                                                 143242

      TFS_TS_ID = 261073
      Covers Test case:
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      CancelFALedgerEntryDepreciationBookError                                      129071
      CancelFALedgerEntryGLIntegrationFalse                                         129071
      CancelFALedgerEntryGLIntegrationTrue                                          129071
      CancelFALedgerEntryWithInactiveFixedAsset                                     129071

      Covers Test case: TFS_TS_ID = 282614
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      DimensionErrorOnFixedAsset                                                    279900
      DimensionErrorOnFixedAssetAllocation                                          279901

      CancelFALedgerEntryUseNewPostingDateGenJnl,CancelFALedgerEntryUseNewPostingDateFAJnl             290482

      Covers Test case: TFS_TS_ID = 358859
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      DepreciationBalanceAccountDimension                                           358859
    }
    END.
  }
}

