OBJECT Codeunit 137042 SCM Capacity Req. Planning
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      SalesReceivablesSetup@1002 : Record 311;
      ManufacturingSetup@1004 : Record 99000765;
      LibraryRandom@1000 : Codeunit 130440;
      LibraryManufacturing@1003 : Codeunit 132202;
      LibraryPlanning@1011 : Codeunit 132203;
      Assert@1006 : Codeunit 130000;
      isInitialized@1001 : Boolean;
      ErrAllocatedTimeMustBeSame@1009 : TextConst 'ENU=Allocated Time Must Be Same';
      ErrTimeMustBeSame@1010 : TextConst 'ENU=%1 must be %2 in %3.';
      ErrEfficiencyZero@1007 : TextConst 'ENU=Efficiency must';
      ErrorGeneratedMustBeSame@1008 : TextConst 'ENU=Error Generated Must Be Same';

    [Test]
    PROCEDURE CapacityNeedAllocTime@1();
    VAR
      TempSalesReceivablesSetup@1000 : TEMPORARY Record 311;
      TempManufacturingSetup@1001 : TEMPORARY Record 99000765;
      ProductionOrder@1004 : Record 5405;
      AllocatedTime@1002 : Decimal;
    BEGIN
      // Setup : Update Sales and Manufacturing Setup.Create Items, Production BOM,Routing and update Item.
      // Create Planned Production Order. Update and Refresh it
      Initialize;
      CapReqPlanningSetup(TempSalesReceivablesSetup,TempManufacturingSetup,ProductionOrder);
      AllocatedTime := CalculateAllocatedTime(ProductionOrder);

      // Verify : Verify Allocated Time of Prouction Order Capacity Need Table with Production Order Routing Line.
      VerifyCapNeedAllocatedTime(ProductionOrder,AllocatedTime);

      // 4. Tear down: Set Sales & Receivables Setup as default for Credit Warnings and Stockout Warning.
      // Set Manufacturing Setup as Default for Normal Start Time and Normal End Time.
      RestoreSalesReceivablesSetup(TempSalesReceivablesSetup);
      RestoreManufacturingSetup(TempManufacturingSetup);
    END;

    [Test]
    PROCEDURE ChangeQtyCapacityNeedAllocTime@3();
    VAR
      TempSalesReceivablesSetup@1000 : TEMPORARY Record 311;
      TempManufacturingSetup@1001 : TEMPORARY Record 99000765;
      ProductionOrder@1004 : Record 5405;
      AllocatedTime@1002 : Decimal;
    BEGIN
      // Setup : Update Sales and Manufacturing Setup.Create Items, Production BOM,Routing and update Item.
      // Create Planned Production Order.Update and Refresh it.
      Initialize;
      CapReqPlanningSetup(TempSalesReceivablesSetup,TempManufacturingSetup,ProductionOrder);

      // Exercise: Change Production Order Quantity.
      ProductionOrder.GET(ProductionOrder.Status::Planned,ProductionOrder."No.");
      UpdateProdOrder(ProductionOrder,LibraryRandom.RandInt(5));
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
      AllocatedTime := CalculateAllocatedTime(ProductionOrder);

      // Verify : Verify Allocated Time of Production Order Capacity Need Table with Production Order Routing Line.
      VerifyCapNeedAllocatedTime(ProductionOrder,AllocatedTime);

      // 4. Tear down: Set Sales & Receivables Setup as default for Credit Warnings and Stockout Warning.
      // Set Manufacturing Setup as Default for Normal Start Time and Normal End Time.
      RestoreSalesReceivablesSetup(TempSalesReceivablesSetup);
      RestoreManufacturingSetup(TempManufacturingSetup);
    END;

    [Test]
    PROCEDURE EfficiencyMachWorkCenterUpdate@12();
    VAR
      TempSalesReceivablesSetup@1000 : TEMPORARY Record 311;
      TempManufacturingSetup@1003 : TEMPORARY Record 99000765;
      ProductionOrder@1004 : Record 5405;
      MachineCenter@1001 : Record 99000758;
      AllocatedTime@1005 : Decimal;
    BEGIN
      // Setup : Update Sales and Manufacturing Setup.Create Items, Production BOM,Routing and update Item.
      // Create Planned Production Order.Update and Refresh it.
      Initialize;
      SalesReceivablesSetup.GET;
      CapReqPlanningSetup(TempSalesReceivablesSetup,TempManufacturingSetup,ProductionOrder);

      // Exercise: Change Efficiency on Machine Center and Work Center,
      UpdateWorkCenterEfficiency(ProductionOrder,LibraryRandom.RandInt(100));
      UpdateMachCenterEfficiency(MachineCenter,ProductionOrder,LibraryRandom.RandInt(100));
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
      AllocatedTime := CalculateAllocatedTime(ProductionOrder);

      // Verify : Verify Allocated Time of Production Order Capacity Need Table with Production Order Routing Line.
      VerifyCapNeedAllocatedTime(ProductionOrder,AllocatedTime);

      // 4. Tear down: Set Sales & Receivables Setup as default for Credit Warnings and Stockout Warning.
      // Set Manufacturing Setup as Default for Normal Start Time and Normal End Time.
      RestoreSalesReceivablesSetup(TempSalesReceivablesSetup);
      RestoreManufacturingSetup(TempManufacturingSetup);
    END;

    [Test]
    PROCEDURE EfficiencyMachWorkCenterToDec@11();
    VAR
      TempSalesReceivablesSetup@1003 : TEMPORARY Record 311;
      TempManufacturingSetup@1001 : TEMPORARY Record 99000765;
      ProductionOrder@1004 : Record 5405;
      ProdOrderRoutingLine@1000 : Record 5409;
      MachineCenter@1006 : Record 99000758;
      AllocatedTime@1002 : Decimal;
    BEGIN
      // Setup : Update Sales and Manufacturing Setup.Create Items, Production BOM,Routing and update Item.
      // Create Planned Production Order.Update and Refresh it.
      Initialize;
      SalesReceivablesSetup.GET;
      CapReqPlanningSetup(TempSalesReceivablesSetup,TempManufacturingSetup,ProductionOrder);

      // Exercise: Change Efficiency to decimal value on Machine Center and Work Center,
      UpdateWorkCenterEfficiency(ProductionOrder,LibraryRandom.RandDec(5,2));
      UpdateMachCenterEfficiency(MachineCenter,ProductionOrder,LibraryRandom.RandDec(5,2));
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
      AllocatedTime := CalculateAllocatedTime(ProductionOrder);

      // Verify : Verify Allocated Time of Production Order Capacity Need Table with Production Order Routing Line.
      // Verify Run Time and Setup Time On Machine and Work Center.
      VerifyCapNeedAllocatedTime(ProductionOrder,AllocatedTime);
      VerifyRunSetupTime(ProductionOrder,ProdOrderRoutingLine.Type::"Work Center");
      VerifyRunSetupTime(ProductionOrder,ProdOrderRoutingLine.Type::"Machine Center");

      // 4. Tear down: Set Sales & Receivables Setup as default for Credit Warnings and Stockout Warning.
      // Set Manufacturing Setup as Default for Normal Start Time and Normal End Time.
      RestoreSalesReceivablesSetup(TempSalesReceivablesSetup);
      RestoreManufacturingSetup(TempManufacturingSetup);
    END;

    [Test]
    PROCEDURE EfficiencyMachCenterToZero@18();
    VAR
      TempSalesReceivablesSetup@1000 : TEMPORARY Record 311;
      TempManufacturingSetup@1001 : TEMPORARY Record 99000765;
      ProductionOrder@1004 : Record 5405;
      MachineCenter@1006 : Record 99000758;
    BEGIN
      // Setup : Update Sales and Manufacturing Setup.Create Items, Production BOM,Routing and update Item.
      // Create Planned Production Order.Update and Refresh it.
      Initialize;
      SalesReceivablesSetup.GET;
      CapReqPlanningSetup(TempSalesReceivablesSetup,TempManufacturingSetup,ProductionOrder);

      // Exercise: Change Efficiency to Zero on Machine Center and Work Center,
      UpdateMachCenterEfficiency(MachineCenter,ProductionOrder,0);
      ASSERTERROR LibraryManufacturing.CalculateMachCenterCalendar(MachineCenter,CALCDATE('<-1M>',WORKDATE),CALCDATE('<1M>',WORKDATE));

      // 3. Verify : Verify Error message generated on Validation Efficiency by Zero.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ErrEfficiencyZero) > 0,ErrorGeneratedMustBeSame);
      CLEARLASTERROR;

      // 4. Tear down: Set Sales & Receivables Setup as default for Credit Warnings and Stockout Warning.
      // Set Manufacturing Setup as Default for Normal Start Time and Normal End Time.
      RestoreManufacturingSetup(TempManufacturingSetup);
    END;

    LOCAL PROCEDURE CapReqPlanningSetup@16(VAR TempSalesReceivablesSetup@1005 : TEMPORARY Record 311;VAR TempManufacturingSetup@1000 : TEMPORARY Record 99000765;VAR ProductionOrder@1002 : Record 5405);
    VAR
      Item@1004 : Record 27;
    BEGIN
      // Setup : Update Sales and Manufacturing Setup.Create Items, Production BOM with three Items,Routing and update Item.
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      UpdateManufacturingSetup(TempManufacturingSetup);
      CreateProdOrderItemSetup(Item,Item."Flushing Method"::Manual,3);

      // Create Planned Production Order.Update and Refresh it.
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Planned,ProductionOrder."Source Type"::Item,Item."No.",
        LibraryRandom.RandInt(5));
      UpdateProdOrder(ProductionOrder,0);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    [Test]
    PROCEDURE ProdOrderLine@26();
    VAR
      TempSalesReceivablesSetup@1002 : TEMPORARY Record 311;
      ProductionOrder@1000 : Record 5405;
      Item@1004 : Record 27;
    BEGIN
      // Setup : Update Sales Setup.Create Items, Production BOM with three Items,Routing and update Item.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateProdOrderItemSetup(Item,Item."Flushing Method"::Forward,2);

      // Create Planned Production Order.Refresh it.
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Planned,ProductionOrder."Source Type"::Item,Item."No.",
        LibraryRandom.RandDec(5,2));

      // Exercise : Refresh Production Order.
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);

      // Verify : Created Production Order Line with Production Header.
      VerifyProdOrderLine(ProductionOrder);

      // Tear down: Set Sales & Receivables Setup as default for Credit Warnings and Stockout Warning.
      RestoreSalesReceivablesSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(ModalPageHandler,MessageHandler)]
    PROCEDURE SalesOrderPlanningProdOrder@25();
    VAR
      TempSalesReceivablesSetup@1002 : TEMPORARY Record 311;
      ProductionOrder@1000 : Record 5405;
      Item@1004 : Record 27;
      SalesHeader@1005 : Record 36;
    BEGIN
      // Setup : Update Sales Setup.Create Items, Production BOM with three Items,Routing and update Item.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateProdOrderItemSetup(Item,Item."Flushing Method"::Forward,2);

      // Exercise:Create Sales Order and Create Firm Planned Production order using order Planning.
      CreateSalesOrder(SalesHeader,Item."No.");
      LibraryPlanning.CreateProdOrderUsingPlanning(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",SalesHeader."No.",Item."No.");

      // Verify : Firm Planned Production Order created.
      ProductionOrder.SETRANGE(Status,ProductionOrder.Status::"Firm Planned");
      ProductionOrder.SETRANGE("Source No.",Item."No.");
      ProductionOrder.FINDLAST;

      // Tear down: Set Sales & Receivables Setup as default for Credit Warnings and Stockout Warning.
      RestoreSalesReceivablesSetup(TempSalesReceivablesSetup);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateVATData;

      isInitialized := TRUE;
      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateSalesReceivablesSetup@20(VAR BaseSalesReceivablesSetup@1000 : Record 311);
    BEGIN
      SalesReceivablesSetup.GET;
      BaseSalesReceivablesSetup := SalesReceivablesSetup;
      BaseSalesReceivablesSetup.INSERT(TRUE);

      // Values used are important for test.
      SalesReceivablesSetup.VALIDATE("Credit Warnings",SalesReceivablesSetup."Credit Warnings"::"No Warning");
      SalesReceivablesSetup.VALIDATE("Stockout Warning",FALSE);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE UpdateManufacturingSetup@14(VAR BaseManufacturingSetup@1001 : Record 99000765);
    BEGIN
      ManufacturingSetup.GET;
      BaseManufacturingSetup := ManufacturingSetup;
      BaseManufacturingSetup.INSERT(TRUE);

      // Values used are important for test.
      ManufacturingSetup.VALIDATE("Normal Starting Time",080000T);
      ManufacturingSetup.VALIDATE("Normal Ending Time",160000T);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RestoreSalesReceivablesSetup@24(TempSalesReceivablesSetup@1000 : TEMPORARY Record 311);
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Credit Warnings",TempSalesReceivablesSetup."Credit Warnings");
      SalesReceivablesSetup.VALIDATE("Stockout Warning",TempSalesReceivablesSetup."Stockout Warning");
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RestoreManufacturingSetup@56(TempManufacturingSetup@1001 : TEMPORARY Record 99000765);
    BEGIN
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Normal Starting Time",TempManufacturingSetup."Normal Starting Time");
      ManufacturingSetup.VALIDATE("Normal Ending Time",TempManufacturingSetup."Normal Ending Time");
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProdOrderItemSetup@27(VAR Item@1003 : Record 27;FlushingMethod@1004 : Option;NoBOMLine@1000 : Integer);
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
      RoutingHeader@1002 : Record 99000763;
    BEGIN
      // Create Item, Routing and Production BOM with two lines.
      CreateItem(Item,Item."Replenishment System"::"Prod. Order");
      CreateRouting(RoutingHeader,FlushingMethod);
      CreateProdBOM(ProductionBOMHeader,Item."Replenishment System"::Purchase,Item."Base Unit of Measure",NoBOMLine);
      UpdateItem(Item,ProductionBOMHeader."No.",RoutingHeader."No.");
    END;

    LOCAL PROCEDURE CreateItem@48(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option);
    BEGIN
      // Random values used are important for test.
      LibraryManufacturing.CreateItemManufacturing(
        Item,Item."Costing Method"::Standard,LibraryRandom.RandDec(50,2),
        Item."Reordering Policy",Item."Flushing Method"::Manual,'','');
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProdBOM@5(VAR ProductionBOMHeader@1000 : Record 99000771;ReplenishmentSystem@1006 : Option;BaseUnitOfMeasure@1005 : Code[10];NoBOMLine@1007 : Integer);
    VAR
      ProductionBOMLine@1003 : Record 99000772;
      Item@1010 : Record 27;
      ItemNo@1008 : ARRAY [5] OF Code[20];
      Count@1009 : Integer;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,BaseUnitOfMeasure);

      FOR Count := 1 TO NoBOMLine DO BEGIN
        CreateItem(Item,ReplenishmentSystem);
        ItemNo[Count] := Item."No.";
        LibraryManufacturing.CreateProductionBOMLine(
          ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo[Count],1);
      END;

      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateRouting@9(VAR RoutingHeader@1001 : Record 99000763;FlushingMethod@1000 : Option);
    VAR
      RoutingLine@1004 : Record 99000764;
      WorkCenter@1003 : Record 99000754;
      MachineCenter@1002 : Record 99000758;
    BEGIN
      CreateSetupWorkCenter(WorkCenter,FlushingMethod);
      CreateSetupMachineCenter(MachineCenter,WorkCenter."No.");
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.");
      RoutingLine.Type := RoutingLine.Type::"Machine Center";
      CreateRoutingLine(RoutingLine,RoutingHeader,MachineCenter."No.");
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateRoutingLine@17(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;CenterNo@1002 : Code[20]);
    VAR
      OperationNo@1001 : Code[10];
    BEGIN
      // Random used such that the Next Operation No is greater than the Previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));

      // Random is used, values not important for test.
      LibraryManufacturing.CreateRoutingLineSetup(
        RoutingLine,RoutingHeader,CenterNo,OperationNo,LibraryRandom.RandInt(5),LibraryRandom.RandInt(5));
    END;

    LOCAL PROCEDURE CreateSetupWorkCenter@70(VAR WorkCenter@1001 : Record 99000754;FlushingMethod@1004 : Option);
    BEGIN
      LibraryManufacturing.CreateWorkCenterWithCalendar(WorkCenter);
      WorkCenter.VALIDATE("Flushing Method",FlushingMethod);
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSetupMachineCenter@69(VAR MachineCenter@1003 : Record 99000758;WorkCenterNo@1000 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateMachineCenterWithCalendar(MachineCenter,WorkCenterNo,105); // Value used is important for test.
    END;

    LOCAL PROCEDURE CreateSalesOrder@30(VAR SalesHeader@1001 : Record 36;ItemNo@1004 : Code[20]);
    VAR
      SalesLine@1000 : Record 37;
      LibrarySales@1002 : Codeunit 130509;
    BEGIN
      // Random values used are not important for test.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE UpdateItem@7(VAR Item@1000 : Record 27;ProductionBOMHeaderNo@1001 : Code[20];RoutingNo@1002 : Code[20]);
    BEGIN
      Item.VALIDATE("Production BOM No.",ProductionBOMHeaderNo);
      Item.VALIDATE("Routing No.",RoutingNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProdOrder@6(VAR ProductionOrder@1000 : Record 5405;Quantity@1001 : Decimal);
    BEGIN
      ProductionOrder.VALIDATE("Starting Date",WORKDATE);
      ProductionOrder.VALIDATE("Ending Date",WORKDATE);
      ProductionOrder.VALIDATE("Due Date",WORKDATE);
      ProductionOrder.VALIDATE(Quantity,ProductionOrder.Quantity + Quantity);
      ProductionOrder.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateWorkCenterEfficiency@10(ProductionOrder@1000 : Record 5405;Efficiency@1004 : Decimal);
    VAR
      ProdOrderRoutingLine@1003 : Record 5409;
      WorkCenter@1001 : Record 99000754;
    BEGIN
      FindProdOrderRoutingLine(ProdOrderRoutingLine,ProductionOrder."No.",ProdOrderRoutingLine.Type::"Work Center");
      WorkCenter.GET(ProdOrderRoutingLine."No.");
      WorkCenter.VALIDATE(Efficiency,Efficiency + Efficiency);
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateMachCenterEfficiency@22(VAR MachineCenter@1002 : Record 99000758;ProductionOrder@1000 : Record 5405;Efficiency@1004 : Decimal);
    VAR
      ProdOrderRoutingLine@1003 : Record 5409;
    BEGIN
      FindProdOrderRoutingLine(ProdOrderRoutingLine,ProductionOrder."No.",ProdOrderRoutingLine.Type::"Machine Center");
      MachineCenter.GET(ProdOrderRoutingLine."No.");
      MachineCenter.VALIDATE(Efficiency,Efficiency + Efficiency);
      MachineCenter.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE FindLastOperationNo@19(RoutingNo@1000 : Code[20]) : Code[10];
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      IF RoutingLine.FINDLAST THEN
        EXIT(RoutingLine."Operation No.");
    END;

    LOCAL PROCEDURE FindProdOrderRoutingLine@15(VAR ProdOrderRoutingLine@1000 : Record 5409;ProdOrderNo@1002 : Code[20];Type@1001 : Option);
    BEGIN
      ProdOrderRoutingLine.SETRANGE(Status,ProdOrderRoutingLine.Status::Planned);
      ProdOrderRoutingLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderRoutingLine.SETRANGE(Type,Type);
      ProdOrderRoutingLine.FINDSET;
    END;

    LOCAL PROCEDURE FindRoutingLine@21(VAR RoutingLine@1000 : Record 99000764;RoutingNo@1001 : Code[20];Type@1002 : Option;No@1003 : Code[20]);
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      RoutingLine.SETRANGE(Type,Type);
      RoutingLine.SETRANGE("No.",No);
      RoutingLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CalculateAllocatedTime@23(ProductionOrder@1000 : Record 5405) ExpectedlAllocatedTime : Decimal;
    VAR
      ProdOrderCapacityNeed@1001 : Record 5410;
    BEGIN
      ProdOrderCapacityNeed.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderCapacityNeed.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderCapacityNeed.FINDSET;
      REPEAT
        ExpectedlAllocatedTime += ProdOrderCapacityNeed."Allocated Time"
      UNTIL ProdOrderCapacityNeed.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyCapNeedAllocatedTime@2(ProductionOrder@1001 : Record 5405;ExpectedlAllocatedTime@1004 : Decimal);
    VAR
      ProdOrderRoutingLine@1000 : Record 5409;
      ActualAllocatedTime@1003 : Decimal;
    BEGIN
      ProdOrderRoutingLine.SETRANGE(Status,ProdOrderRoutingLine.Status::Planned);
      ProdOrderRoutingLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderRoutingLine.FINDSET;
      REPEAT
        ActualAllocatedTime += ProdOrderRoutingLine."Setup Time" + ProductionOrder.Quantity * ProdOrderRoutingLine."Run Time";
      UNTIL ProdOrderRoutingLine.NEXT = 0;

      Assert.AreEqual(ExpectedlAllocatedTime,ActualAllocatedTime,ErrAllocatedTimeMustBeSame);
    END;

    LOCAL PROCEDURE VerifyRunSetupTime@13(ProductionOrder@1000 : Record 5405;Type@1003 : Option);
    VAR
      ProdOrderRoutingLine@1001 : Record 5409;
      RoutingLine@1002 : Record 99000764;
    BEGIN
      FindProdOrderRoutingLine(ProdOrderRoutingLine,ProductionOrder."No.",Type);
      FindRoutingLine(
        RoutingLine,ProdOrderRoutingLine."Routing No.",Type,ProdOrderRoutingLine."No.");
      Assert.AreEqual(
        ProdOrderRoutingLine."Setup Time",RoutingLine."Setup Time",STRSUBSTNO(ErrTimeMustBeSame,
          RoutingLine.FIELDCAPTION("Setup Time"),RoutingLine."Setup Time",RoutingLine.TABLECAPTION));
      Assert.AreEqual(
        ProdOrderRoutingLine."Run Time",RoutingLine."Run Time",STRSUBSTNO(ErrTimeMustBeSame,
          RoutingLine.FIELDCAPTION("Run Time"),RoutingLine."Run Time",RoutingLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyProdOrderLine@45(ProductionOrder@1000 : Record 5405);
    VAR
      ProdOrderLine@1005 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;
      ProdOrderLine.TESTFIELD("Item No.",ProductionOrder."Source No.");
      ProdOrderLine.TESTFIELD(Quantity,ProductionOrder.Quantity);
    END;

    [ModalPageHandler]
    PROCEDURE ModalPageHandler@28(VAR CreateOrderFromSales@1000 : Page 99000884;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::Yes;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@88(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [SCM]
      Test for Capacity Requirement Planning:
        1. Create Items,BOM's and Routing.Create and Refresh Planned Production Order.Verify Allocated Capacity Time.
        2. Create Items,BOM's and Routing.Create and Refresh Planned Production Order.Change Quantity and Verify Allocated Capacity Time.
        3. Create Items,BOM's and Routing.Create and Refresh Planned Production Order.Change Efficiency on Machine and Work center.
           Verify Allocated Capacity Time.
        4. Create Items,BOM's and Routing.Create and Refresh Planned Production Order.Change Efficiency to decimal value on Machine and
           and Work center.Verify Allocated Capacity Time, Run time and Setup Time.
        5. Create Items,BOM's and Routing.Create and Refresh Planned Production Order.Change Efficiency to Zero on Machine center.
           Verify Error message generated on Validation Efficiency by Zero.

      Test for Go Green SCM Create Prod. Order:
        6. Create Items,BOM's and Routing.Create and Refresh Planned Production Order.Verify Production Order Line Created.
        7. Create Items,BOM's and Routing.Create Sales Order and create Firm Planned Production order using Sales Order Planning option.
           Verify Firm Planned Production Order Created.

       Covers Test cases:
        --------------------------------------------------------------------------------------
        Test Function Name                TFS ID
        --------------------------------------------------------------------------------------
        CapacityNeedAllocTime             121337,135760,135761,135762
        ChangeQtyCapacityNeedAllocTime    121337,135760,135761,135762
        EfficiencyMachWorkCenterUpdate    121337,135760,135761,135762
        EfficiencyMachWorkCenterToDec     121337,135760,135761,135762
        EfficiencyMachCenterToZero        121337,135760,135761,135762

      Covers Go Green Cases:
        --------------------------------------------------------------------------------------
        Test Function Name                TFS ID
        --------------------------------------------------------------------------------------
        ProdOrderLine                     141417
        SalesOrderPlanningProdOrder       141417
    }
    END.
  }
}

