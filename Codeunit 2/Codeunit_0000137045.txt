OBJECT Codeunit 137045 SCM Bugfixes
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      GeneralLedgerSetup@1015 : Record 98;
      SalesReceivablesSetup@1005 : Record 311;
      LibraryRandom@1000 : Codeunit 130440;
      LibraryInventory@1002 : Codeunit 132201;
      LibraryItemTracking@1008 : Codeunit 130502;
      LibraryPlanning@1004 : Codeunit 132203;
      LibraryWarehouse@1003 : Codeunit 132204;
      LibraryUtility@1027 : Codeunit 131000;
      Assert@1009 : Codeunit 130000;
      LibraryPurchase@1011 : Codeunit 130512;
      LibrarySales@1018 : Codeunit 130509;
      LibraryVariableStorage@1007 : Codeunit 131004;
      LibraryManufacturing@1020 : Codeunit 132202;
      isInitialized@1001 : Boolean;
      LocationCode@1019 : ARRAY [3] OF Code[10];
      ConfirmMessage@1006 : TextConst 'ENU="Do you want to change "';
      NoReservEntryErr@1012 : TextConst 'ENU=No reservation entries created for requisition line.';
      ReservEntryNotDeletedErr@1013 : TextConst 'ENU=Requisition line is deleted. All reservation entries must be deleted as well.';
      WrongReservEntryQtyErr@1014 : TextConst 'ENU=Quantity in reservation entry is incorrect.';
      WrongPurchLineQtyErr@1016 : TextConst 'ENU=Quantity in purchase line is incorrect after carrying performing action message.';
      ItemTrackingDefinedErr@1017 : TextConst 'ENU=You must delete the existing item tracking before modifying or deleting the %1.';
      WrongSKUUnitCostErr@1010 : TextConst 'ENU=Stockkeeping unit''s unit cost must be equal to item unit cost';
      UseInTransitLocationErr@1038 : TextConst '@@@="%1 = In-Transit Location Code";ENU=You can use In-Transit location %1 for transfer orders only.';

    [Test]
    PROCEDURE PostSalesShipmentAndInvoice@3();
    VAR
      SalesHeader@1006 : Record 36;
      TempSalesReceivablesSetup@1003 : TEMPORARY Record 311;
      FromDocumentType@1002 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
    BEGIN
      // Setup : Update Sales Setup.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup,SalesReceivablesSetup."Credit Warnings"::"No Warning",FALSE);

      // Exercise And Verify.
      CreateSalesDocument(FromDocumentType::"Posted Shipment",SalesHeader."Document Type"::Invoice,FALSE);  // Set False for Ship Only Posting.

      // Tear Down : Restore Sales Setup.
      RestoreSalesReceivablesSetup(SalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE PostSalesInvoiceAndCreditMemo@7();
    VAR
      SalesHeader@1004 : Record 36;
      TempSalesReceivablesSetup@1003 : TEMPORARY Record 311;
      FromDocumentType@1001 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
    BEGIN
      // Setup : Update Sales Setup.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup,SalesReceivablesSetup."Credit Warnings"::"No Warning",FALSE);

      // Exercise And Verify.
      CreateSalesDocument(FromDocumentType::"Posted Invoice",SalesHeader."Document Type"::"Credit Memo",TRUE);  // Set True for Posting with Invoice Option.

      // Tear Down : Restore Sales Setup.
      RestoreSalesReceivablesSetup(SalesReceivablesSetup);
    END;

    LOCAL PROCEDURE CreateSalesDocument@12(FromDocumentType@1006 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';DocumentType@1007 : Option;Invoice@1009 : Boolean);
    VAR
      Item@1002 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1003 : Record 37;
      DocumentNo@1011 : Code[20];
    BEGIN
      CreateItem(Item,Item."Reordering Policy"::"Lot-for-Lot",Item."Replenishment System"::Purchase,TRUE);

      // Create Sales Order, Post Ship And Invoice and Create Sales Credit Memo with Copy Document.
      // Random values used for item quantity.
      CreateSalesOrder(SalesHeader,Item."No.",'',LibraryRandom.RandDec(15,2),SalesHeader."Document Type"::Order);
      SalesHeader.VALIDATE("External Document No.",SalesHeader."No.");
      SalesHeader.MODIFY(TRUE);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,Invoice);
      CopySalesDocument(SalesHeader,DocumentType,FromDocumentType,DocumentNo);

      // Verify : Verify the Sales Lines With FromDocumentType.
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.");
      VerifySalesLine(SalesLine,FromDocumentType,DocumentNo);
    END;

    [Test]
    PROCEDURE ReservationSystemPlanning@58();
    VAR
      Item@1005 : Record 27;
      TempSalesReceivablesSetup@1001 : TEMPORARY Record 311;
      RequisitionLine@1002 : Record 246;
      SalesOrderQuantity@1006 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup,SalesReceivablesSetup."Credit Warnings"::"No Warning",FALSE);

      // Exercise.
      CreateReservationSystem(Item,RequisitionLine,SalesOrderQuantity);

      // Verify : Verify Item, Quantity and Transfer Location on Planning Work Sheet.
      VerifyPlanningWorkSheet(Item."No.",SalesOrderQuantity,LocationCode[2]);

      // Tear Down.
      RestoreSalesReceivablesSetup(SalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE ReservationSystemRequisition@21();
    VAR
      Item@1005 : Record 27;
      RequisitionLine@1002 : Record 246;
      SalesOrderQuantity@1007 : Decimal;
    BEGIN
      // Setup : Update Sales Setup. Create Item.
      Initialize;

      // Exercise.
      CreateReservationSystem(Item,RequisitionLine,SalesOrderQuantity);
      CarryOutActionMsgPlanSetup(RequisitionLine,Item."No.");

      // Verify : Verify Item , Quantity and Transfer Location on Requisition Work Sheet.
      VerifyPlanningWorkSheet(Item."No.",SalesOrderQuantity,LocationCode[2]);

      // Tear Down.
      RestoreSalesReceivablesSetup(SalesReceivablesSetup);
    END;

    LOCAL PROCEDURE CreateReservationSystem@18(VAR Item@1006 : Record 27;VAR RequisitionLine@1002 : Record 246;VAR SalesOrderQuantity@1007 : Decimal);
    VAR
      SalesHeader@1005 : Record 36;
      ItemJournalLine@1004 : Record 83;
      StockkeepingUnit@1001 : Record 5700;
    BEGIN
      CreateItem(Item,Item."Reordering Policy"::"Lot-for-Lot",Item."Replenishment System"::Purchase,TRUE);
      // Create Location Array, Update Location, Create Transfer Route, Create Stock Keeping unit for each Item
      // at each Location, Post two Item Journal lines to update Item Inventory for each location, Create Sales Order
      // and Accept Capable To Promise. Random values used for item quantity.
      CreateUpdateLocations;
      CreateTransferRoutes;
      CreateUpdateStockKeepUnit(StockkeepingUnit,Item."No.");
      CreateAndPostItemJrnl(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationCode,LibraryRandom.RandDec(15,2),2);
      SalesOrderQuantity := LibraryRandom.RandDec(10,2);
      Item.SETFILTER("Location Filter",LocationCode[1]);
      Item.CALCFIELDS(Inventory);
      CreateSalesOrder(SalesHeader,Item."No.",LocationCode[1],Item.Inventory + SalesOrderQuantity,SalesHeader."Document Type"::Order);
      AcceptCapableToPromise(RequisitionLine,SalesHeader);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE WorkFlowPurchaseOrder@26();
    VAR
      PurchaseHeader@1001 : Record 38;
      VendorNo@1000 : Code[20];
    BEGIN
      // Setup.
      Initialize;
      VendorNo := LibraryPurchase.CreateVendorNo;
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      PurchaseHeader.VALIDATE("Buy-from Vendor No.",'');
      PurchaseHeader.MODIFY(TRUE);

      // Exercise : Create Purchase Order And Verify Buy From Vendor No. Confirmation.
      PurchaseHeader.VALIDATE("Buy-from Vendor No.",VendorNo);
      PurchaseHeader.MODIFY(TRUE);

      // Verify : Verify that Vendor No is available on the Purchase Header.
      PurchaseHeader.TESTFIELD("Buy-from Vendor No.",VendorNo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE WorkFlowSalesOrder@30();
    VAR
      SalesHeader@1003 : Record 36;
      CustomerNo@1002 : Code[20];
    BEGIN
      // Setup :
      Initialize;
      CustomerNo := LibrarySales.CreateCustomerNo;
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      SalesHeader.VALIDATE("Sell-to Customer No.",'');
      SalesHeader.MODIFY(TRUE);

      // Exercise : Create Sales Order And Verify Sell to Customer No. Confirmation.
      SalesHeader.VALIDATE("Sell-to Customer No.",CustomerNo);
      SalesHeader.MODIFY(TRUE);

      // Verify : Verify that Customer No is available on the Sales Header.
      SalesHeader.TESTFIELD("Sell-to Customer No.",CustomerNo);
    END;

    [Test]
    PROCEDURE QtyCanBeChangedInReqLine@96();
    VAR
      RequisitionLine@1013 : Record 246;
    BEGIN
      CreateRequisitionLineChangeQuantity(RequisitionLine);

      WITH RequisitionLine DO
        VerifyReservationEntryQuantity("No.","Worksheet Template Name",Quantity - "Original Quantity");
    END;

    [Test]
    PROCEDURE ReservEntriesDeletedAfterQtyChange@98();
    VAR
      RequisitionLine@1001 : Record 246;
      ReservEntry@1000 : Record 337;
    BEGIN
      CreateRequisitionLineChangeQuantity(RequisitionLine);

      ReservEntry.SETRANGE("Item No.",RequisitionLine."No.");
      Assert.IsFalse(ReservEntry.ISEMPTY,NoReservEntryErr);

      // Exercise: Delete requisition line
      RequisitionLine.DELETE(TRUE);

      // Verify: All reservation entries deleted
      Assert.IsTrue(ReservEntry.ISEMPTY,ReservEntryNotDeletedErr);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CarryOutActionMessageAfterQtyChange@95();
    VAR
      RequisitionLine@1002 : Record 246;
      TempRequisitionLine@1001 : TEMPORARY Record 246;
    BEGIN
      CreateRequisitionLineChangeQuantity(RequisitionLine);
      // Carry Out Action Message batch job deletes requisition line. Need to save it for verification.
      TempRequisitionLine := RequisitionLine;

      // Exercise: Carry out action message
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,0D,WORKDATE,WORKDATE,WORKDATE,'');

      // Verify: Quantity in purchase line is updated correctly
      WITH TempRequisitionLine DO
        VerifyPurchaseLineQuantity("Ref. Order No.","Ref. Line No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ActionMsgAfterReshedAndQtyChange@91();
    VAR
      RequisitionLine@1000 : Record 246;
      TempRequisitionLine@1001 : TEMPORARY Record 246;
    BEGIN
      CreateRequisitionLineChangeQuantity(RequisitionLine);

      WITH RequisitionLine DO BEGIN
        VALIDATE("Due Date",CALCDATE('<+1D>',"Due Date"));
        // New qty. must not exceed original quanity.
        VALIDATE(Quantity,Quantity + 1);
        MODIFY(TRUE);
      END;

      TempRequisitionLine := RequisitionLine;

      // Exercise: Carry out action message
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,0D,WORKDATE,WORKDATE,WORKDATE,'');

      // Verify: Quantity in purchase line is updated correctly
      WITH TempRequisitionLine DO
        VerifyPurchaseLineQuantity("Ref. Order No.","Ref. Line No.",Quantity);
    END;

    [Test]
    PROCEDURE QuantityCannotExceedOriginalQty@93();
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      CreateOrdersAndRequisitionPlan(RequisitionLine);
      WITH RequisitionLine DO
        ASSERTERROR VALIDATE(Quantity,"Original Quantity" + LibraryRandom.RandIntInRange(1,10));
      Assert.ExpectedError(STRSUBSTNO(ItemTrackingDefinedErr,RequisitionLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(OrderTrackingHandler,SalesReturnOrderHandler)]
    PROCEDURE OpenSalesReturnOrderFromOrderTracking@6();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
    BEGIN
      // Check Sales Return Order page will open from Order Tracking.

      // Setup : create item,Sales order and calculated Regenrative plan
      Initialize;
      CreateItemWithReorderValues(Item);
      CreateSalesOrder(SalesHeader,Item."No.",'',-LibraryRandom.RandDec(15,2),SalesHeader."Document Type"::"Return Order");
      LibraryVariableStorage.Enqueue(SalesHeader."No.");
      LibraryPlanning.CalcRegenPlanForPlanWkshPlanningParams(
        Item,WORKDATE,CALCDATE(STRSUBSTNO('<%1m>',LibraryRandom.RandInt(3)),WORKDATE),FALSE);

      // Exercise : Open Planning work sheet and invoke Order Tracking page.
      OpenOrderTrackingFromPlanWorkSheet(Item."No.");

      // Verify : Verification of opening SalesReturnOrder Page done in SalesReturnOrderHandler.
    END;

    [Test]
    PROCEDURE PostReclassificationJournalToTransitLocation@238();
    VAR
      Location@1002 : Record 14;
      ItemJournalLine@1001 : Record 83;
      ItemJournalBatch@1000 : Record 233;
    BEGIN
      // [FEATURE] [Item Reclassification Journal] [Transit Location]
      // [SCENARIO 377757] It should be prohibited to Post Reclassification Journal to In-Transit Location
      Initialize;

      // [GIVEN] In-Transit Location "X"
      LibraryWarehouse.CreateInTransitLocation(Location);

      // [GIVEN] Reclassification Journal with "Location Code" = "X"
      CreatItemJournalLine(ItemJournalBatch,ItemJournalLine."Entry Type"::Transfer,Location.Code,'');

      // [WHEN] Post Reclassification Journal
      ASSERTERROR LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // [THEN] Error is thrown: "You can use In-Transit location X for Transfer Orders only."
      Assert.ExpectedError(STRSUBSTNO(UseInTransitLocationErr,Location.Code));
    END;

    [Test]
    PROCEDURE PostReclassificationJournalFromTransitLocation@826();
    VAR
      Location@1002 : Record 14;
      ItemJournalLine@1001 : Record 83;
      ItemJournalBatch@1000 : Record 233;
    BEGIN
      // [FEATURE] [Reclassification Journal] [Transit Location]
      // [SCENARIO 377757] It should be prohibited to Post Reclassification Journal from In-Transit Location
      Initialize;

      // [GIVEN] In-Transit Location "X"
      LibraryWarehouse.CreateInTransitLocation(Location);

      // [GIVEN] Reclassification Journal with "New Location Code" = "X"
      CreatItemJournalLine(ItemJournalBatch,ItemJournalLine."Entry Type"::Transfer,'',Location.Code);

      // [WHEN] Post Reclassification Journal
      ASSERTERROR LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // [THEN] Error is thrown: "You can use In-Transit location X for Transfer Orders only."
      Assert.ExpectedError(STRSUBSTNO(UseInTransitLocationErr,Location.Code));
    END;

    [Test]
    PROCEDURE ItemUnitCostIsTransferredToNewSKU@45();
    VAR
      Item@1000 : Record 27;
      SKU@1001 : Record 5700;
    BEGIN
      // [FEATURE] [Stockkeeping Unit]
      // [SCENARIO 361539] Check that item unit cost is transferred to the stockkeeping unit card when a new SKU is created
      // [GIVEN] Item "A" with "Unit Cost" = "X"
      LibraryInventory.CreateItem(Item);
      Item."Unit Cost" := LibraryRandom.RandDec(1000,2);
      Item.MODIFY;

      // [WHEN] "Item No." is set to "A" in a new stockkeeping unit card
      SKU.INIT;
      SKU.VALIDATE("Item No.",Item."No.");

      // [THEN] "Unit Cost" is "X" in the stockkeping unit card
      Assert.AreEqual(Item."Unit Cost",SKU."Unit Cost",WrongSKUUnitCostErr);
    END;

    [Test]
    PROCEDURE VendorNoValidationDoesNotChangeLocationInSystemCreatedReqLine@46();
    VAR
      Item@1000 : Record 27;
      Location@1004 : Record 14;
      Vendor@1005 : Record 23;
      SalesHeader@1001 : Record 36;
      ReqWkshName@1003 : Record 245;
      ReqLine@1006 : Record 246;
      ReqWorksheet@1007 : TestPage 291;
    BEGIN
      // [FEATURE] [Requisition Worksheet]
      // [SCENARIO 362374] Location code is not updated in the requisition line when Vendor No. is changed after modifying Due Date

      // [GIVEN] Item with "Lot-for-Lot" reordering policy
      CreateItem(Item,Item."Reordering Policy"::"Lot-for-Lot",Item."Replenishment System"::Purchase,TRUE);

      // [GIVEN] Vendor "V" with default location "L1"
      LibraryPurchase.CreateVendorWithLocationCode(Vendor,LibraryWarehouse.CreateLocation(Location));

      // [GIVEN] Sales Order with location "L2"
      LibraryWarehouse.CreateLocation(Location);
      CreateSalesOrder(SalesHeader,Item."No.",Location.Code,LibraryRandom.RandDec(100,2),SalesHeader."Document Type"::Order);

      // [GIVEN] Calculate requisition plan
      CalculateRequisitionPlan(ReqWkshName,Item);

      ReqWorksheet.TRAP;
      PAGE.RUN(PAGE::"Req. Worksheet");
      FindRequisitionLine(ReqLine,ReqWkshName,ReqLine."Action Message"::New);
      ReqWorksheet.CurrentJnlBatchName.SETVALUE(ReqLine."Journal Batch Name");
      ReqWorksheet.GOTORECORD(ReqLine);

      // [GIVEN] Change "Due Date" in the requisition line
      ReqWorksheet."Due Date".SETVALUE(CALCDATE('<1W>',ReqLine."Due Date"));

      // [WHEN] "Vendor No." in the requisition line is set to "V"
      ReqWorksheet."Vendor No.".SETVALUE(Vendor."No.");

      // [THEN] "Location Code" in the requisition line is "L2"
      ReqWorksheet."Location Code".ASSERTEQUALS(Location.Code);
    END;

    [Test]
    PROCEDURE ProdBOMWithComponentStartingDateIsPlannedWhenDateIsValid@2();
    VAR
      Item@1000 : ARRAY [3] OF Record 27;
      SalesHeader@1003 : Record 36;
      RequisitionLine@1002 : Record 246;
      I@1001 : Integer;
    BEGIN
      // [FEATURE] [Capable to Promise] [Production BOM]
      // [SCENARIO 382250] Items included in a production BOM with a starting date, should be planned if Starting Date is equal to WORKDATE

      Initialize;

      // [GIVEN] Create 3 "Critical" items: "I1", "I2", "I3"
      // [GIVEN] Items "I2" and "I3" are replenished via production, "I1" is purchased
      CreateCriticalItem(Item[1],Item[1]."Replenishment System"::Purchase);
      FOR I := 2 TO 3 DO
        CreateCriticalItem(Item[I],Item[I]."Replenishment System"::"Prod. Order");

      // [GIVEN] Create production BOM structure, so that "I1" is a component of "I2", and "I2" is a component of "I3"
      // [GIVEN] Low-level component "I1" is included in a production BOM with the Starting Date = WORKDATE
      AssignProductionBOMToItem(Item[2],Item[1]."No.",WORKDATE,1);
      AssignProductionBOMToItem(Item[3],Item[2]."No.",0D,1);

      // [GIVEN] Create a sales order with item "I3"
      CreateSalesOrder(SalesHeader,Item[3]."No.",'',LibraryRandom.RandInt(100),SalesHeader."Document Type"::Order);

      // [WHEN] Run "Capable-to-Promise" for item "I3"
      AcceptCapableToPromise(RequisitionLine,SalesHeader);

      // [THEN] Replenishment is planned for all 3 items in the planning worksheet
      FOR I := 1 TO 3 DO
        VerifyRequisitionLineCount(Item[I]."No.",1);
    END;

    [Test]
    PROCEDURE ProdBOMWithComponentStartingDateIsNotPlannedWhenDateIsInvalid@56();
    VAR
      Item@1000 : ARRAY [3] OF Record 27;
      SalesHeader@1003 : Record 36;
      RequisitionLine@1002 : Record 246;
      I@1001 : Integer;
    BEGIN
      // [FEATURE] [Capable to Promise] [Production BOM]
      // [SCENARIO 382250] Items included in a production BOM with a starting date, should not be planned if Starting Date is greater than WORKDATE

      Initialize;

      // [GIVEN] Create 3 "Critical" items: "I1", "I2", "I3"
      // [GIVEN] Items "I2" and "I3" are replenished via production, "I1" is purchased
      CreateCriticalItem(Item[1],Item[1]."Replenishment System"::Purchase);
      FOR I := 2 TO 3 DO
        CreateCriticalItem(Item[I],Item[I]."Replenishment System"::"Prod. Order");

      // [GIVEN] Create production BOM structure, so that "I1" is a component of "I2", and "I2" is a component of "I3"
      // [GIVEN] Low-level component "I1" is included in a production BOM with the Starting Date = WORKDATE + 1 week
      AssignProductionBOMToItem(Item[2],Item[1]."No.",CALCDATE('<1W>',WORKDATE),1);
      AssignProductionBOMToItem(Item[3],Item[2]."No.",0D,1);

      // [GIVEN] Create a sales order with item "I3"
      CreateSalesOrder(SalesHeader,Item[3]."No.",'',LibraryRandom.RandInt(100),SalesHeader."Document Type"::Order);

      // [WHEN] Run "Capable-to-Promise" for item "I3"
      AcceptCapableToPromise(RequisitionLine,SalesHeader);

      // [THEN] Items "I2" and "I3" are planned in the planning worksheet, there is no plan for item "I1"
      VerifyRequisitionLineCount(Item[1]."No.",0);
      FOR I := 2 TO 3 DO
        VerifyRequisitionLineCount(Item[I]."No.",1);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateVATData;

      GeneralLedgerSetup.GET;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetup@34(VAR TempSalesReceivablesSetup@1001 : TEMPORARY Record 311;CreditWarnings@1004 : Option;StockoutWarning@1003 : Boolean);
    VAR
      SalesReceivablesSetup@1002 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      TempSalesReceivablesSetup := SalesReceivablesSetup;
      TempSalesReceivablesSetup.INSERT;

      SalesReceivablesSetup.VALIDATE("Credit Warnings",CreditWarnings);
      SalesReceivablesSetup.VALIDATE("Stockout Warning",StockoutWarning);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AssignProductionBOMToItem@60(VAR ParentItem@1001 : Record 27;ComponentItemNo@1002 : Code[20];ComponentStartingDate@1003 : Date;QtyPer@1004 : Decimal);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      CreateCertifiedProductionBOMWithComponentStartingDate(
        ProductionBOMHeader,ParentItem."Base Unit of Measure",ComponentItemNo,QtyPer,ComponentStartingDate);
      UpdateProductionBOMNoOnItem(ParentItem,ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateItem@48(VAR Item@1000 : Record 27;ReorderingPolicy@1006 : Option;ReplenishmentSystem@1007 : Option;IncludeInventory@1001 : Boolean);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Reordering Policy",ReorderingPolicy);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Include Inventory",IncludeInventory);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostItemJrnl@25(EntryType@1002 : Option;ItemNo@1004 : Code[20];LocationCode@1006 : ARRAY [3] OF Code[10];Quantity@1005 : Decimal;NoOfLines@1009 : Integer);
    VAR
      ItemJournalTemplate@1001 : Record 82;
      ItemJournalBatch@1000 : Record 233;
      ItemJournalLine@1003 : Record 83;
      Count@1007 : Integer;
    BEGIN
      // Create Item Journal to populate Item Quantity.
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);

      // Creating only two Item Journal lines.
      FOR Count := 1 TO NoOfLines DO BEGIN
        LibraryInventory.CreateItemJournalLine(
          ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Quantity);
        ItemJournalLine."Location Code" := LocationCode[Count];
        ItemJournalLine.MODIFY(TRUE);
      END;
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateCertifiedProductionBOMWithComponentStartingDate@37(VAR ProductionBOMHeader@1000 : Record 99000771;UOMCode@1001 : Code[10];ItemNo@1002 : Code[20];QtyPer@1003 : Decimal;StartingDate@1004 : Date);
    VAR
      ProductionBOMLine@1005 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,UOMCode);
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo,QtyPer);
      ProductionBOMLine.VALIDATE("Starting Date",StartingDate);
      ProductionBOMLine.MODIFY(TRUE);

      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalculateRequisitionPlan@88(VAR ReqWkshName@1002 : Record 245;Item@1003 : Record 27);
    VAR
      ReqWkshTemplate@1000 : Record 244;
      DateRec@1004 : Record 2000000007;
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,ReqWkshName."Template Type"::"Req.");
      ReqWkshTemplate.FINDFIRST;
      LibraryPlanning.CreateRequisitionWkshName(ReqWkshName,ReqWkshTemplate.Name);

      DateRec.SETRANGE("Period Type",DateRec."Period Type"::Year);
      DateRec.SETFILTER("Period Start",'<=%1',WORKDATE);
      DateRec.FINDLAST;
      LibraryPlanning.CalculatePlanForReqWksh(
        Item,ReqWkshTemplate.Name,ReqWkshName.Name,DateRec."Period Start",NORMALDATE(DateRec."Period End"));
    END;

    LOCAL PROCEDURE CreateCriticalItem@8(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);

      WITH Item DO BEGIN
        VALIDATE(Critical,TRUE);
        VALIDATE("Replenishment System",ReplenishmentSystem);
        VALIDATE("Manufacturing Policy","Manufacturing Policy"::"Make-to-Order");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateItemTrackingCodeWithLotSpecTracking@28(VAR ItemTrackingCode@1000 : Record 6502);
    BEGIN
      WITH ItemTrackingCode DO BEGIN
        LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,FALSE);
        VALIDATE("Lot Purchase Inbound Tracking",TRUE);
        VALIDATE("Lot Sales Outbound Tracking",TRUE);
        VALIDATE("Lot Specific Tracking",TRUE);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateOrdersAndRequisitionPlan@120(VAR RequisitionLine@1000 : Record 246);
    VAR
      Item@1001 : Record 27;
      PurchHeader@1002 : Record 38;
      PurchLine@1003 : Record 39;
      SalesHeader@1004 : Record 36;
      ReqWkshName@1005 : Record 245;
    BEGIN
      CreateTrackedItem(Item);

      CreatePurchaseOrder(PurchHeader,Item."No.",LibraryRandom.RandIntInRange(10,15));
      FindPurchaseLine(PurchLine,PurchHeader."No.");
      CreateSalesOrder(
        SalesHeader,Item."No.",'',
        PurchLine.Quantity - LibraryRandom.RandIntInRange(5,8),SalesHeader."Document Type"::Order);
      CalculateRequisitionPlan(ReqWkshName,Item);

      FindRequisitionLine(RequisitionLine,ReqWkshName,RequisitionLine."Action Message"::"Change Qty.");
    END;

    LOCAL PROCEDURE CreateRequisitionLineChangeQuantity@44(VAR RequisitionLine@1000 : Record 246);
    BEGIN
      CreateOrdersAndRequisitionPlan(RequisitionLine);

      WITH RequisitionLine DO BEGIN
        // Change requisition line quantity. New quantity must be greater than sales line qty., but less than purch. line
        VALIDATE(Quantity,Quantity + LibraryRandom.RandIntInRange(1,"Original Quantity" - Quantity - 1));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateTrackedItem@129(VAR Item@1000 : Record 27);
    VAR
      NoSeries@1002 : Record 308;
      ItemTrackingCode@1003 : Record 6502;
    BEGIN
      LibraryUtility.CreateNoSeries(NoSeries,TRUE,FALSE,FALSE);
      CreateItemTrackingCodeWithLotSpecTracking(ItemTrackingCode);
      LibraryInventory.CreateTrackedItem(Item,NoSeries.Code,'',ItemTrackingCode.Code);

      WITH Item DO BEGIN
        VALIDATE("Replenishment System","Replenishment System"::Purchase);
        VALIDATE("Reordering Policy","Reordering Policy"::"Lot-for-Lot");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateUpdateLocations@19();
    VAR
      Location@1000 : Record 14;
      HandlingTime@1002 : DateFormula;
      HandlingTime2@1001 : DateFormula;
      k@1003 : Integer;
    BEGIN
      // Values Used are important for Test.
      EVALUATE(HandlingTime,'<1D>');
      EVALUATE(HandlingTime2,'<0D>');
      FOR k := 1 TO 3 DO BEGIN  // Creating three Locations.
        LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
        LocationCode[k] := Location.Code;
      END;

      // Update Two Locations only because third location is In-Transit.
      FOR k := 1 TO 2 DO
        UpdateLocation(LocationCode[k],FALSE,HandlingTime2,HandlingTime2);
      UpdateLocation(LocationCode[3],TRUE,HandlingTime2,HandlingTime2);
    END;

    LOCAL PROCEDURE CreateUpdateStockKeepUnit@32(VAR StockkeepingUnit@1000 : Record 5700;ItemNo@1001 : Code[20]);
    VAR
      Item@1003 : Record 27;
      SKUCreationMethod@1002 : 'Location,Variant,Location & Variant';
    BEGIN
      Item.SETRANGE("No.",ItemNo);
      Item.SETRANGE("Location Filter",LocationCode[1],LocationCode[2]);
      LibraryInventory.CreateStockKeepingUnit(Item,SKUCreationMethod::Location,FALSE,FALSE);

      // Update Replenishment System in Stock Keeping Unit.
      UpdateStockKeepingUnit(StockkeepingUnit."Replenishment System"::Purchase,LocationCode[1],ItemNo,'','');
      UpdateStockKeepingUnit(StockkeepingUnit."Replenishment System"::Transfer,LocationCode[1],ItemNo,'',LocationCode[2]);
    END;

    LOCAL PROCEDURE CreateTransferRoutes@13();
    VAR
      TransferRoute@1000 : Record 5742;
      ShippingAgent@1001 : Record 291;
      ShippingAgentServicesCode@1002 : ARRAY [3] OF Code[10];
      i@1004 : Integer;
      j@1005 : Integer;
      k@1003 : Integer;
    BEGIN
      CreateShippingAgentServices(ShippingAgent,ShippingAgentServicesCode);

      // Transfer Route for Location Code.
      k := 1;
      FOR i := 1 TO 2 DO
        FOR j := i + 1 TO 2 DO BEGIN
          LibraryWarehouse.CreateTransferRoute(TransferRoute,LocationCode[i],LocationCode[j]);
          UpdateTransferRoute(TransferRoute,ShippingAgentServicesCode[k],ShippingAgent.Code);
          LibraryWarehouse.CreateTransferRoute(TransferRoute,LocationCode[j],LocationCode[i]);
          UpdateTransferRoute(TransferRoute,ShippingAgentServicesCode[k],ShippingAgent.Code);
          k := k + 1;
        END;
    END;

    LOCAL PROCEDURE CreatItemJournalLine@55(VAR ItemJournalBatch@1000 : Record 233;EntryType@1007 : Option;LocationCode@1005 : Code[10];NewLocationCode@1006 : Code[10]);
    VAR
      Item@1004 : Record 27;
      ItemJournalLine@1002 : Record 83;
      ItemJournalTemplate@1001 : Record 82;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        EntryType,Item."No.",LibraryRandom.RandDec(15,2));
      ItemJournalLine."Location Code" := LocationCode;
      ItemJournalLine."New Location Code" := NewLocationCode;
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindPurchaseLine@42(VAR PurchLine@1000 : Record 39;PurchDocNo@1001 : Code[20]);
    BEGIN
      WITH PurchLine DO BEGIN
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE("Document No.",PurchDocNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindRequisitionLine@140(VAR RequisitionLine@1000 : Record 246;RequisitionWkshName@1001 : Record 245;ActionMessage@1002 : Option);
    BEGIN
      WITH RequisitionLine DO BEGIN
        SETRANGE("Worksheet Template Name",RequisitionWkshName."Worksheet Template Name");
        SETRANGE("Journal Batch Name",RequisitionWkshName.Name);
        SETRANGE("Action Message",ActionMessage);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE UpdateProductionBOMNoOnItem@41(VAR Item@1000 : Record 27;ProdBOMNo@1001 : Code[20]);
    BEGIN
      Item.VALIDATE("Production BOM No.",ProdBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateTransferRoute@11(VAR TransferRoute@1000 : Record 5742;ShippingAgentServiceCode@1001 : Code[10];ShippingAgentCode@1002 : Code[10]);
    BEGIN
      TransferRoute.VALIDATE("In-Transit Code",LocationCode[3]);
      TransferRoute.VALIDATE("Shipping Agent Code",ShippingAgentCode);
      TransferRoute.VALIDATE("Shipping Agent Service Code",ShippingAgentServiceCode);
      TransferRoute.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateStockKeepingUnit@17(ReplenishmentSystem@1003 : Option;LocationCode@1000 : Code[10];ItemNo@1001 : Code[20];VendorNo@1004 : Code[20];TransferfromCode@1005 : Code[10]);
    VAR
      StockkeepingUnit@1002 : Record 5700;
    BEGIN
      StockkeepingUnit.SETRANGE("Location Code",LocationCode);
      StockkeepingUnit.SETRANGE("Item No.",ItemNo);
      StockkeepingUnit.FINDFIRST;
      StockkeepingUnit.VALIDATE("Replenishment System",ReplenishmentSystem);
      StockkeepingUnit.VALIDATE("Transfer-from Code",TransferfromCode);
      StockkeepingUnit.VALIDATE("Vendor No.",VendorNo);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateLocation@1(Code@1002 : Code[10];UseAsInTransit@1001 : Boolean;OutboundWhseHandlingTime@1003 : DateFormula;InboundWhseHandlingTime@1004 : DateFormula);
    VAR
      Location@1000 : Record 14;
    BEGIN
      Location.GET(Code);
      Location.VALIDATE("Use As In-Transit",UseAsInTransit);
      Location.VALIDATE("Outbound Whse. Handling Time",OutboundWhseHandlingTime);
      Location.VALIDATE("Inbound Whse. Handling Time",InboundWhseHandlingTime);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@35(VAR PurchHeader@1003 : Record 38;ItemNo@1004 : Code[20];Quantity@1005 : Decimal);
    VAR
      PurchLine@1002 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchaseDocumentWithItem(
        PurchHeader,PurchLine,PurchHeader."Document Type"::Order,'',ItemNo,Quantity,'',WORKDATE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@14(VAR SalesHeader@1001 : Record 36;ItemNo@1004 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal;DocumentType@1006 : Option);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,DocumentType,'',ItemNo,Quantity,LocationCode,WORKDATE);
    END;

    LOCAL PROCEDURE AcceptCapableToPromise@16(VAR RequisitionLine@1004 : Record 246;SalesHeader@1001 : Record 36);
    VAR
      OrderPromisingLine@1002 : Record 99000880;
      AvailabilityMgt@1000 : Codeunit 99000889;
    BEGIN
      AvailabilityMgt.SetSalesHeader(OrderPromisingLine,SalesHeader);
      AvailabilityMgt.CalcCapableToPromise(OrderPromisingLine,SalesHeader."No.");
      OrderPromisingLine.FINDFIRST;
      AvailabilityMgt.UpdateSource(OrderPromisingLine);
      RequisitionLine.SETRANGE("Order Promising ID",SalesHeader."No.");
      RequisitionLine.FINDSET;
      REPEAT
        RequisitionLine.VALIDATE("Accept Action Message",TRUE);
        RequisitionLine.MODIFY(TRUE);
      UNTIL RequisitionLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateShippingAgentServices@9(VAR ShippingAgent@1002 : Record 291;VAR ShippingAgentServicesCode@1004 : ARRAY [3] OF Code[10]);
    VAR
      ShippingAgentServices@1003 : Record 5790;
      ShippingTime@1000 : DateFormula;
      j@1001 : Integer;
    BEGIN
      LibraryInventory.CreateShippingAgent(ShippingAgent);

      FOR j := 1 TO 3 DO BEGIN  // Count equal to no of Locations.
        EVALUATE(ShippingTime,'<' + FORMAT(j) + 'D>');
        LibraryInventory.CreateShippingAgentService(ShippingAgentServices,ShippingAgent.Code,ShippingTime);
        ShippingAgentServicesCode[j] := ShippingAgentServices.Code;
      END;
    END;

    LOCAL PROCEDURE CarryOutActionMsgPlanSetup@23(VAR RequisitionLine@1000 : Record 246;ItemNo@1001 : Code[20]);
    VAR
      RequisitionWkshName@1006 : Record 245;
      NewProdOrderChoice@1004 : ' ,Planned,Firm Planned,Firm Planned & Print,Copy to Req. Wksh';
      NewPurchOrderChoice@1003 : ' ,Make Purch. Orders,Make Purch. Orders & Print,Copy to Req. Wksh';
      NewTransOrderChoice@1002 : ' ,Make Trans. Orders,Make Trans. Orders & Print,Copy to Req. Wksh';
      NewAsmOrderChoice@1007 : ' ,Make Assembly Orders,Make Assembly Orders & Print';
    BEGIN
      // Update Vendor No in Requisition Worksheet and Carry Out Action Message.
      // Update Accept Action Message in Planning Worksheet.
      UpdatePlanningWorkSheet(RequisitionLine,ItemNo);

      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,RequisitionLine."Worksheet Template Name");

      LibraryPlanning.CarryOutPlanWksh(
        RequisitionLine,
        NewProdOrderChoice::Planned,NewPurchOrderChoice::"Copy to Req. Wksh",
        NewTransOrderChoice::"Copy to Req. Wksh",NewAsmOrderChoice::" ",
        RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name,
        RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);
    END;

    LOCAL PROCEDURE UpdatePlanningWorkSheet@27(VAR RequisitionLine@1000 : Record 246;ItemNo@1001 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",ItemNo);
      RequisitionLine.FINDSET;
      REPEAT
        RequisitionLine.VALIDATE("Accept Action Message",TRUE);
        RequisitionLine.MODIFY(TRUE);
      UNTIL RequisitionLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CopySalesDocument@5(VAR SalesHeader@1000 : Record 36;DocumentType@1003 : Option;FromDocType@1002 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';DocumentNo@1004 : Code[20]);
    BEGIN
      SalesHeader.INIT;
      SalesHeader.VALIDATE("Document Type",DocumentType);
      SalesHeader.INSERT(TRUE);
      LibrarySales.CopySalesDocument(SalesHeader,FromDocType,DocumentNo,TRUE,TRUE);
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
    END;

    LOCAL PROCEDURE FindSalesLine@31(VAR SalesLine@1001 : Record 37;DocumentType@1002 : Option;DocumentNo@1000 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifySalesLine@33(SalesLine@1001 : Record 37;DocumentType@1003 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';DocumentNo@1000 : Code[20]);
    VAR
      SalesShipmentLine@1002 : Record 111;
      SalesInvoiceLine@1004 : Record 113;
    BEGIN
      CASE DocumentType OF
        DocumentType::"Posted Invoice":
          BEGIN
            SalesInvoiceLine.SETRANGE("Document No.",DocumentNo);
            SalesInvoiceLine.SETRANGE(Type,SalesInvoiceLine.Type::Item);
            SalesInvoiceLine.FINDFIRST;
            SalesLine.TESTFIELD(Type,SalesInvoiceLine.Type);
            SalesLine.TESTFIELD("No.",SalesInvoiceLine."No.");
            SalesLine.TESTFIELD(Quantity,SalesInvoiceLine.Quantity);
          END;
        DocumentType::"Posted Shipment":
          BEGIN
            SalesShipmentLine.SETRANGE("Document No.",DocumentNo);
            SalesShipmentLine.SETRANGE(Type,SalesShipmentLine.Type::Item);
            SalesShipmentLine.FINDFIRST;
            SalesLine.TESTFIELD(Type,SalesShipmentLine.Type);
            SalesLine.TESTFIELD("No.",SalesShipmentLine."No.");
            SalesLine.TESTFIELD(Quantity,SalesShipmentLine.Quantity);
          END;
      END;
    END;

    LOCAL PROCEDURE VerifyPlanningWorkSheet@24(ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode2@1003 : Code[10]);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      FindRequsitionLine(RequisitionLine,ItemNo);
      RequisitionLine.TESTFIELD("Ref. Order Type",RequisitionLine."Ref. Order Type"::Transfer);
      RequisitionLine.TESTFIELD(Quantity,Quantity);
      RequisitionLine.TESTFIELD("Transfer-from Code",LocationCode2);
    END;

    LOCAL PROCEDURE RestoreSalesReceivablesSetup@10(TempSalesReceivablesSetup@1000 : TEMPORARY Record 311);
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Credit Warnings",TempSalesReceivablesSetup."Credit Warnings");
      SalesReceivablesSetup.VALIDATE("Stockout Warning",TempSalesReceivablesSetup."Stockout Warning");
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithReorderValues@57(VAR Item@1001 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        CreateItem(Item,"Reordering Policy"::"Fixed Reorder Qty.","Replenishment System"::Purchase,TRUE);
        VALIDATE("Reorder Point",LibraryRandom.RandDec(10,2));
        VALIDATE("Reorder Quantity",LibraryRandom.RandDec(10,2));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE OpenOrderTrackingFromPlanWorkSheet@38(ItemNo@1001 : Code[20]);
    VAR
      RequisitionLine@1002 : Record 246;
      PlanningWorksheet@1003 : TestPage 99000852;
    BEGIN
      RequisitionLine.SETRANGE("Accept Action Message",FALSE);
      FindRequsitionLine(RequisitionLine,ItemNo);

      PlanningWorksheet.OPENEDIT;
      PlanningWorksheet.GOTORECORD(RequisitionLine);
      PlanningWorksheet.OrderTracking.INVOKE;
    END;

    LOCAL PROCEDURE FindRequsitionLine@29(VAR RequisitionLine@1000 : Record 246;ItemNo@1001 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE("No.",ItemNo);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyPurchaseLineQuantity@43(RefOrderNo@1001 : Code[20];RefLineNo@1002 : Integer;ExpectedQuantity@1003 : Decimal);
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      WITH PurchLine DO BEGIN
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE("Document No.",RefOrderNo);
        SETRANGE("Line No.",RefLineNo);
        FINDFIRST;
        Assert.AreEqual(ExpectedQuantity,Quantity,WrongPurchLineQtyErr);
      END;
    END;

    LOCAL PROCEDURE VerifyRequisitionLineCount@15(ItemNo@1000 : Code[20];ExpectedCount@1002 : Integer);
    VAR
      RequisitionLine@1001 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",ItemNo);
      Assert.RecordCount(RequisitionLine,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyReservationEntryQuantity@39(ItemNo@1000 : Code[20];SourceID@1001 : Code[20];ExpectedQuantity@1003 : Decimal);
    VAR
      ReservEntry@1002 : Record 337;
    BEGIN
      WITH ReservEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Source ID",SourceID);
        FINDFIRST;
        Assert.AreEqual(ExpectedQuantity,Quantity,WrongReservEntryQtyErr);
      END;
    END;

    LOCAL PROCEDURE ConvertMessage@89(ErrorMessage@1000 : Text[1024]) : Text[1024];
    VAR
      NewLine@1001 : Text[1];
    BEGIN
      // Remove New Line Character from Error Message.
      NewLine[1] := 13;
      EXIT(DELCHR(ErrorMessage,'=',NewLine));
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@22(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Check confirmation message.
      Assert.AreNotEqual(STRPOS(ConvertMessage(Question),ConfirmMessage),0,Question);
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE SalesReturnOrderHandler@20(VAR SalesReturnOrder@1000 : TestPage 6630);
    VAR
      SalesReturnOrderNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(SalesReturnOrderNo);
      SalesReturnOrder."No.".ASSERTEQUALS(SalesReturnOrderNo);
    END;

    [ModalPageHandler]
    PROCEDURE OrderTrackingHandler@40(VAR OrderTracking@1000 : TestPage 99000822);
    BEGIN
      OrderTracking.Show.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@47(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [SCM]
      Unsupported version tags:
      IT: Unable to Execute

      1. Check Sales Line Created correctly when sales order created with copy document posted shipment.
      2. Check Sales Line Created correctly when sales Credit Memo created with copy document posted Invoice.
      3. Check Planning Worksheet is created correctly when calculate capable to promise.
      4. Check Requisition Worksheet is created correctly when created from carry out action for.
      5. Check Confirmation message when buy from vendor change from purchase header.
      6. Check Confirmation message when Sell to Customer change from Sales Header.
      7. Check that quantity in reservation entry is updated correctly when raising quantity in requisition worksheet.
      8. Check that all related reservation entries are deleted when requisition line is deleted.
      9. Check that Carry Out Action Message batch job updates purch. order correctly after changing req. line quantity.
      10. Check that Carry Out Action Message batch job updates purch. order correctly after changing req. line date and qty.
      11. Check that new quantity in requisition line cannot exceed the original quantity from purchase order
      12. Check that item unit cost is transferred to the stockkeeping unit card when a new SKU is created
      7. Check Sales Return Order page will open from Order Tracking.
      8. Check that quantity in reservation entry is updated correctly when raising quantity in requisition worksheet.
      9. Check that all related reservation entries are deleted when requisition line is deleted.
      10. Check that Carry Out Action Message batch job updates purch. order correctly after changing req. line quantity.
      11. Check that Carry Out Action Message batch job updates purch. order correctly after changing req. line date and qty.
      12. Check that new quantity in requisition line cannot exceed the original quantity from purchase order

      Covers Test cases: 232922
        --------------------------------------------------------------------------------------
        Test Function Name                TFS ID
        --------------------------------------------------------------------------------------
        PostSalesShipmentAndInvoice      135695,135696,135698
        PostSalesInvoiceAndCreditMemo    135695,135697,135698
        ReservationSystemPlanning        135689,135690,135689
        ReservationSystemRequisition     135689,135690,135689
        WorkFlowPurchaseOrder            135756,135757,135759
        WorkFlowSalesOrder               135756,135758,135759

      Covers Test case for Bug Id: 52696
        --------------------------------------------------------------------------------------
        Test Function Name
        --------------------------------------------------------------------------------------
        PostSalesShipmentAndInvoice           135695,135696,135698
        PostSalesInvoiceAndCreditMemo         135695,135697,135698
        ReservationSyatemPlanning             135689,135690,135689
        ReservationSyatemRequisition          135689,135690,135689
        WorkFlowPurchaseOrder                 135756,135757,135759
        WorkFlowSalesOrder                    135756,135758,135759
        QtyCanBeChangedInReqLine              354833
        ReservEntriesDeletedAfterQtyChange    354833
        CarryOutActionMessageAfterQtyChange   354833
        ActionMsgAfterReshedAndQtyChange      354833
        QuantityCannotExceedOriginalQty       354833
        ItemUnitCostIsTransferredToNewSKU     361539
        OpenSalesRetrunOrderFromOrderTracking

        QtyCanBeChangedInReqLine              91337
        ReservEntriesDeletedAfterQtyChange    91337
        CarryOutActionMessageAfterQtyChange   91337
        ActionMsgAfterReshedAndQtyChange      91337
        QuantityCannotExceedOriginalQty       91337
    }
    END.
  }
}

