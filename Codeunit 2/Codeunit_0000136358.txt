OBJECT Codeunit 136358 UT T Purchase Line Usage Link
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Job@1003 : Record 167;
      JobTask@1002 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      Vendor@1008 : Record 23;
      LibraryPurchase@1007 : Codeunit 130512;
      Assert@1000 : Codeunit 130000;
      Text001@1006 : TextConst 'ENU=Rolling back changes.';

    [Normal]
    LOCAL PROCEDURE SetUp@1();
    VAR
      Item@1004 : Record 27;
      LibraryJob@1000 : Codeunit 131920;
      LibraryERMCountryData@1002 : Codeunit 131305;
      LibraryInventory@1003 : Codeunit 132201;
    BEGIN
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Apply Usage Link",TRUE);
      Job.MODIFY;
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("No.",LibraryInventory.CreateItem(Item));
      JobPlanningLine.VALIDATE(Quantity,RANDOM(1000));
      JobPlanningLine.MODIFY;

      LibraryPurchase.CreateVendor(Vendor);

      PurchaseHeader.INIT;
      PurchaseHeader.VALIDATE("Document Type",PurchaseHeader."Document Type"::Order);
      PurchaseHeader.VALIDATE("Buy-from Vendor No.",Vendor."No.");
      PurchaseHeader.INSERT(TRUE);

      PurchaseLine.INIT;
      PurchaseLine.VALIDATE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.VALIDATE("Document No.",PurchaseHeader."No.");
      CASE JobPlanningLine.Type OF
        JobPlanningLine.Type::Item:
          PurchaseLine.VALIDATE(Type,PurchaseLine.Type::Item);
        JobPlanningLine.Type::"G/L Account":
          PurchaseLine.VALIDATE(Type,PurchaseLine.Type::"G/L Account");
      END;
      PurchaseLine.VALIDATE("No.",JobPlanningLine."No.");
      PurchaseLine.VALIDATE("Job No.",Job."No.");
      PurchaseLine.VALIDATE("Job Task No.",JobTask."Job Task No.");
      PurchaseLine.VALIDATE("Job Line Type",PurchaseLine."Job Line Type"::Schedule);
      PurchaseLine.INSERT(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE TearDown@2();
    BEGIN
      CLEAR(Job);
      CLEAR(JobTask);
      CLEAR(JobPlanningLine);
      CLEAR(PurchaseHeader);
      CLEAR(PurchaseLine);
      CLEAR(Vendor);

      ASSERTERROR ERROR(Text001);
    END;

    [Test]
    PROCEDURE TestInitialization@3();
    BEGIN
      SetUp;

      // Verify that "Job Planning Line No." is initialized correctly.
      Assert.AreEqual(0,PurchaseLine."Job Planning Line No.",'Job Planning Line No. is not 0 by default.');

      // Verify that "Remaining Qty." is initialized correctly.
      Assert.AreEqual(0,PurchaseLine."Job Remaining Qty.",'Remaining Qty. is not 0 by default.');

      // Verify that "Remaining Qty." is initialized correctly.
      Assert.AreEqual(0,PurchaseLine."Job Remaining Qty. (Base)",'Remaining Qty. is not 0 by default.');

      TearDown;
    END;

    [Test]
    PROCEDURE TestFieldLineType@10();
    BEGIN
      SetUp;

      // Verify that "Line Type" is set to the correct value when a "Job Planning Line No." is set.
      PurchaseLine.VALIDATE("Job Line Type",0);
      PurchaseLine.VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
      Assert.AreEqual(JobPlanningLine."Line Type",PurchaseLine."Job Line Type" - 1,
        'Line type is not set correctly when Job Planning Line No. is defined.');

      // Verify that "Line Type" can't be changed if a "Job Planning Line No." is defined.
      ASSERTERROR PurchaseLine.VALIDATE("Job Line Type",0);

      TearDown;
    END;

    [Test]
    PROCEDURE TestFieldJobPlanningLineNo@4();
    BEGIN
      SetUp;

      // Verify that "Job Planning Line No." and "Remaining Qty." are blanked when the No. changes.
      PurchaseLine.VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
      PurchaseLine.TESTFIELD("Job Planning Line No.");
      PurchaseLine.VALIDATE("No.",'');
      Assert.AreEqual(0,PurchaseLine."Job Planning Line No.",'Job Planning Line No. is not 0 when No. changes.');
      Assert.AreEqual(0,PurchaseLine."Job Remaining Qty.",'Remaining Qty. is not 0 when No. changes.');
      Assert.AreEqual(0,PurchaseLine."Job Remaining Qty. (Base)",'Remaining Qty. (Base) is not 0 when No. changes.');

      TearDown;

      SetUp;

      // Verify that "Job Planning Line No." is blanked when the Job No. changes.
      PurchaseLine.VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
      PurchaseLine.TESTFIELD("Job Planning Line No.");
      PurchaseLine.VALIDATE("Job No.",'');
      Assert.AreEqual(0,PurchaseLine."Job Planning Line No.",'Job Planning Line No. is not 0 when Job No. changes.');

      // Remaining test for this field are found in test function TestFieldRemainingQty.

      TearDown;
    END;

    [Test]
    PROCEDURE TestFieldRemainingQty@5();
    VAR
      QtyDelta@1001 : Decimal;
      OldRemainingQty@1000 : Decimal;
    BEGIN
      SetUp;

      // Verify that "Remaining Qty." can't be set if "Job Planning Line No." isn't set.
      ASSERTERROR PurchaseLine.VALIDATE("Job Remaining Qty.",RANDOM(ROUND(PurchaseLine.Quantity,1)));

      TearDown;

      SetUp;

      // Verify that "Remaining Qty." is set correctly when a "Job Planning Line No." is defined.
      PurchaseLine.TESTFIELD("Job Planning Line No.",0);
      PurchaseLine.TESTFIELD("Job Remaining Qty.",0);
      PurchaseLine.TESTFIELD("Job Remaining Qty. (Base)",0);
      PurchaseLine.TESTFIELD(Quantity,0);
      PurchaseLine.VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
      PurchaseLine.TESTFIELD("Job Remaining Qty.",JobPlanningLine."Remaining Qty.");
      PurchaseLine.TESTFIELD("Job Remaining Qty. (Base)",
        ROUND(PurchaseLine."Job Remaining Qty." * PurchaseLine."Qty. per Unit of Measure",0.00001));

      // Verify that "Remaining Qty." changes correctly when Quantity is changed.
      OldRemainingQty := PurchaseLine."Job Remaining Qty.";
      QtyDelta := RANDOM(ROUND(PurchaseLine."Job Remaining Qty.",1));
      PurchaseLine.VALIDATE(Quantity,PurchaseLine.Quantity + QtyDelta);
      PurchaseLine.TESTFIELD("Job Remaining Qty.",OldRemainingQty - QtyDelta);
      PurchaseLine.TESTFIELD("Job Remaining Qty. (Base)",
        ROUND(PurchaseLine."Job Remaining Qty." * PurchaseLine."Qty. per Unit of Measure",0.00001));

      TearDown;
    END;

    BEGIN
    {
      // [FEATURE] [Purchase] [Job]
      This unit test codeunit tests all fields added during implementation of feature 92820 - Planning and Execution Jobs and Service:

      "Job Planning Line No."
      "Remaining Qty."
      "Remaining Qty. (Base)"

      In order to make the unit test orthogonal (i.e. independent) to other functionalities and tests,
      data will be purely artificial (i.e. not real data created by other functionalities such as posting routines and the like).

      Code snippets:
      IF NOT CONFIRM('%1',TRUE,VAR) THEN ERROR('');
    }
    END.
  }
}

