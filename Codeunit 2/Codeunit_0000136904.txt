OBJECT Codeunit 136904 Resource - Labels
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryService@1000 : Codeunit 131902;
      LibraryUtility@1003 : Codeunit 131000;
      Assert@1002 : Codeunit 130000;
      LibraryReportDataset@1006 : Codeunit 131007;
      LibraryRandom@1004 : Codeunit 130440;
      isInitialized@1001 : Boolean;
      EmployeeAddrCap@1007 : TextConst '@@@=do not translate;ENU=EmployeeAddr_%1__%2_';
      ContactLabelAddrCap@1009 : TextConst '@@@=do not translate;ENU=ContAddr_%1__%2_';
      SegmentLabelAddrCap@1010 : TextConst '@@@=do not translate;ENU=ContAddr%1%2';
      ServiceitemLabelAddrCap@1011 : TextConst '@@@=do not translate;ENU=Addr%1%2';

    LOCAL PROCEDURE Initialize@4();
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;

      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(ContactLabelsReportsHandler)]
    PROCEDURE ContactLabels36x70mm3Columns@6();
    VAR
      LabelFormatFrom@1000 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Test that the Contact - Labels report is generated properly in 36 x 70 mm (3 columns) format.

      ContactLabelsReport(LabelFormatFrom::"36 x 70 mm (3 columns)");
    END;

    [Test]
    [HandlerFunctions(ContactLabelsReportsHandler)]
    PROCEDURE ContactLabels37x70mm3Columns@3();
    VAR
      LabelFormatFrom@1000 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Test that the Contact - Labels report is generated properly in 37 x 70 mm (3 columns) format.

      ContactLabelsReport(LabelFormatFrom::"37 x 70 mm (3 columns)");
    END;

    [Test]
    [HandlerFunctions(ContactLabelsReportsHandler)]
    PROCEDURE ContactLabels36x105mm2Columns@5();
    VAR
      LabelFormatFrom@1000 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Test that the Contact - Labels report is generated properly in 36 x 105 mm (2 columns) format.

      ContactLabelsReport(LabelFormatFrom::"36 x 105 mm (2 columns)");
    END;

    [Test]
    [HandlerFunctions(ContactLabelsReportsHandler)]
    PROCEDURE ContactLabels37x105mm2Columns@11();
    VAR
      LabelFormatFrom@1000 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Test that the Contact - Labels report is generated properly in 37 x 105 mm (2 columns) format.

      ContactLabelsReport(LabelFormatFrom::"37 x 105 mm (2 columns)");
    END;

    LOCAL PROCEDURE ContactLabelsReport@2(LabelFormatFrom@1005 : Option);
    VAR
      Contact@1004 : Record 5050;
      Contact2@1006 : Record 5050;
      Contact3@1000 : Record 5050;
      FilterExpression@1007 : Text[250];
    BEGIN
      // 1. Setup: Create three new Contacts.
      Initialize;
      CreateContactWithAddress(Contact);
      CreateContactWithAddress(Contact2);
      CreateContactWithAddress(Contact3);

      // 2. Exercise: Generate the Contact - Labels report.
      FilterExpression := Contact."No." + '|' + Contact2."No." + '|' + Contact3."No.";
      RunContactLabelsReport(FilterExpression,LabelFormatFrom);

      // 3. Verify: Check that the report is generated properly.
      LibraryReportDataset.LoadDataSetFile;
      VerifyContactLabels(Contact,ContactLabelAddrCap);
      VerifyContactLabels(Contact2,ContactLabelAddrCap);
      VerifyContactLabels(Contact3,ContactLabelAddrCap);
    END;

    [Test]
    [HandlerFunctions(SegmentLabelReportsHandler)]
    PROCEDURE SegmentLabels36x70mm3Columns@29();
    VAR
      LabelFormatFrom@1000 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Test that the Segment - Labels report is generated properly in 36 x 70 mm (3 columns) format.

      SegmentLabelsReport(LabelFormatFrom::"36 x 70 mm (3 columns)");
    END;

    [Test]
    [HandlerFunctions(SegmentLabelReportsHandler)]
    PROCEDURE SegmentLabels37x70mm3Columns@28();
    VAR
      LabelFormatFrom@1000 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Test that the Segment - Labels report is generated properly in 37 x 70 mm (3 columns) format.

      SegmentLabelsReport(LabelFormatFrom::"37 x 70 mm (3 columns)");
    END;

    [Test]
    [HandlerFunctions(SegmentLabelReportsHandler)]
    PROCEDURE SegmentLabels36x105mm2Columns@27();
    VAR
      LabelFormatFrom@1000 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Test that the Segment - Labels report is generated properly in 36 x 105 mm (2 columns) format.

      SegmentLabelsReport(LabelFormatFrom::"36 x 105 mm (2 columns)");
    END;

    [Test]
    [HandlerFunctions(SegmentLabelReportsHandler)]
    PROCEDURE SegmentLabels37x105mm2Columns@26();
    VAR
      LabelFormatFrom@1000 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Test that the Segment - Labels report is generated properly in 37 x 105 mm (2 columns) format.

      SegmentLabelsReport(LabelFormatFrom::"37 x 105 mm (2 columns)");
    END;

    LOCAL PROCEDURE SegmentLabelsReport@7(LabelFormatFrom@1008 : Option);
    VAR
      SegmentHeader@1000 : Record 5076;
      Contact@1002 : Record 5050;
      SegmentHeader2@1004 : Record 5076;
      Contact2@1003 : Record 5050;
      SegmentHeader3@1006 : Record 5076;
      Contact3@1005 : Record 5050;
      LibraryMarketing@1001 : Codeunit 131900;
      FilterExpression@1007 : Text[250];
    BEGIN
      // 1. Setup: Create three new Contacts and Segment Headers. Add Contacts to Segments by running Add Contacts.
      Initialize;
      LibraryMarketing.CreateSegmentHeader(SegmentHeader);
      CreateContactWithAddress(Contact);
      AddContactsToSegment(Contact,SegmentHeader);

      LibraryMarketing.CreateSegmentHeader(SegmentHeader2);
      CreateContactWithAddress(Contact2);
      AddContactsToSegment(Contact2,SegmentHeader2);

      LibraryMarketing.CreateSegmentHeader(SegmentHeader3);
      CreateContactWithAddress(Contact3);
      AddContactsToSegment(Contact3,SegmentHeader3);

      // 2. Exercise: Generate the Segment - Labels report.
      FilterExpression := SegmentHeader."No." + '|' + SegmentHeader2."No." + '|' + SegmentHeader3."No.";
      RunSegmentLabelsReport(FilterExpression,LabelFormatFrom);

      // 3. Verify: Check that the report is generated properly.
      LibraryReportDataset.LoadDataSetFile;
      VerifyContactLabels(Contact,SegmentLabelAddrCap);
      VerifyContactLabels(Contact2,SegmentLabelAddrCap);
      VerifyContactLabels(Contact3,SegmentLabelAddrCap);
    END;

    [Test]
    [HandlerFunctions(SerivceItemLabelsReportsHandler)]
    PROCEDURE ServiceItemLineLabelsReport@12();
    VAR
      ServiceHeader@1000 : Record 5900;
      Customer@1001 : Record 18;
      ServiceItemLine@1002 : Record 5901;
      ServiceItem@1003 : Record 5940;
      ServiceItemLineLabels@1004 : Report 5901;
      LibrarySales@1005 : Codeunit 130509;
    BEGIN
      // Test that the Service Item Line Labels report is generated properly.

      // 1. Setup: Create Service Header, Service Item, Service Item Line.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItem(ServiceItem,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      // 2. Exercise: Generate the Service Item Line Labels report.
      ServiceItemLine.SETRANGE("Document Type",ServiceItemLine."Document Type");
      ServiceItemLine.SETRANGE("Document No.",ServiceItemLine."Document No.");
      CLEAR(ServiceItemLineLabels);
      ServiceItemLineLabels.SETTABLEVIEW(ServiceItemLine);
      COMMIT;
      ServiceItemLineLabels.RUN;

      // 3. Verify: Check that the report is generated properly.
      LibraryReportDataset.LoadDataSetFile;
      VerifyServiceItemLineLabels(ServiceItemLine);
    END;

    [Test]
    [HandlerFunctions(EmployeeLablesReportsHandler)]
    PROCEDURE EmployeeLabels36x70mm3Columns@20();
    VAR
      AddrFormatFrom@1001 : 'Home Address,Current Alternative Address';
      LabelFormatFrom@1000 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Test that the Employee - Labels report is generated properly in 36 x 70 mm (3 columns) format.

      EmployeeLabelsReport(AddrFormatFrom::"Home Address",LabelFormatFrom::"36 x 70 mm (3 columns)");
    END;

    [Test]
    [HandlerFunctions(EmployeeLablesReportsHandler)]
    PROCEDURE EmployeeLabels37x70mm3Columns@19();
    VAR
      AddrFormatFrom@1001 : 'Home Address,Current Alternative Address';
      LabelFormatFrom@1000 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Test that the Employee - Labels report is generated properly in 37 x 70 mm (3 columns) format.

      EmployeeLabelsReport(AddrFormatFrom::"Home Address",LabelFormatFrom::"37 x 70 mm (3 columns)");
    END;

    [Test]
    [HandlerFunctions(EmployeeLablesReportsHandler)]
    PROCEDURE EmployeeLabels36x105mm2Columns@18();
    VAR
      AddrFormatFrom@1001 : 'Home Address,Current Alternative Address';
      LabelFormatFrom@1000 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Test that the Employee - Labels report is generated properly in 36 x 105 mm (2 columns) format.

      EmployeeLabelsReport(AddrFormatFrom::"Home Address",LabelFormatFrom::"36 x 105 mm (2 columns)");
    END;

    [Test]
    [HandlerFunctions(EmployeeLablesReportsHandler)]
    PROCEDURE EmployeeLabels37x105mm2Columns@17();
    VAR
      AddrFormatFrom@1001 : 'Home Address,Current Alternative Address';
      LabelFormatFrom@1000 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Test that the Employee - Labels report is generated properly in 37 x 105 mm (2 columns) format.

      EmployeeLabelsReport(AddrFormatFrom::"Home Address",LabelFormatFrom::"37 x 105 mm (2 columns)");
    END;

    LOCAL PROCEDURE EmployeeLabelsReport@33(AddrFormatFrom@1001 : Option;LabelFormatFrom@1005 : Option);
    VAR
      Employee@1004 : Record 5200;
      Employee2@1006 : Record 5200;
      Employee3@1000 : Record 5200;
      FilterExpression@1007 : Text[250];
    BEGIN
      // 1. Setup: Create three new Employee.
      Initialize;
      CreateEmployeeWithAddress(Employee);
      CreateEmployeeWithAddress(Employee2);
      CreateEmployeeWithAddress(Employee3);

      // 2. Exercise: Generate the Employee - Labels report.
      FilterExpression := Employee."No." + '|' + Employee2."No." + '|' + Employee3."No.";
      RunEmployeeLabelsReport(FilterExpression,AddrFormatFrom,LabelFormatFrom);

      // 3. Verify: Check that the report is generated properly.
      LibraryReportDataset.LoadDataSetFile;
      VerifyEmployeeLabels(Employee);
      VerifyEmployeeLabels(Employee2);
      VerifyEmployeeLabels(Employee3);
    END;

    [Test]
    [HandlerFunctions(EmployeeLablesReportsHandler)]
    PROCEDURE EmployeeAlternate36x703Column@30();
    VAR
      AddrFormatFrom@1001 : 'Home Address,Current Alternative Address';
      LabelFormatFrom@1000 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Test that the Employee - Labels report is generated properly in 36 x 70 mm (3 columns) format.

      EmployeeAlternateLabelsReport(AddrFormatFrom::"Current Alternative Address",LabelFormatFrom::"36 x 70 mm (3 columns)");
    END;

    [Test]
    [HandlerFunctions(EmployeeLablesReportsHandler)]
    PROCEDURE EmployeeAlternate37x703Column@25();
    VAR
      AddrFormatFrom@1001 : 'Home Address,Current Alternative Address';
      LabelFormatFrom@1000 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Test that the Employee - Labels report is generated properly in 37 x 70 mm (3 columns) format.

      EmployeeAlternateLabelsReport(AddrFormatFrom::"Current Alternative Address",LabelFormatFrom::"37 x 70 mm (3 columns)");
    END;

    [Test]
    [HandlerFunctions(EmployeeLablesReportsHandler)]
    PROCEDURE EmployeeAlternate36x1052Column@24();
    VAR
      AddrFormatFrom@1001 : 'Home Address,Current Alternative Address';
      LabelFormatFrom@1000 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Test that the Employee - Labels report is generated properly in 36 x 105 mm (2 columns) format.

      EmployeeAlternateLabelsReport(AddrFormatFrom::"Current Alternative Address",LabelFormatFrom::"36 x 105 mm (2 columns)");
    END;

    [Test]
    [HandlerFunctions(EmployeeLablesReportsHandler)]
    PROCEDURE EmployeeAlternate37x1052Column@22();
    VAR
      AddrFormatFrom@1001 : 'Home Address,Current Alternative Address';
      LabelFormatFrom@1000 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Test that the Employee - Labels report is generated properly in 37 x 105 mm (2 columns) format.

      EmployeeAlternateLabelsReport(AddrFormatFrom::"Current Alternative Address",LabelFormatFrom::"37 x 105 mm (2 columns)");
    END;

    LOCAL PROCEDURE EmployeeAlternateLabelsReport@15(AddrFormatFrom@1001 : Option;LabelFormatFrom@1005 : Option);
    VAR
      Employee@1004 : Record 5200;
      Employee2@1006 : Record 5200;
      Employee3@1000 : Record 5200;
      AlternativeAddress@1002 : Record 5201;
      AlternativeAddress2@1003 : Record 5201;
      AlternativeAddress3@1008 : Record 5201;
      FilterExpression@1007 : Text[250];
    BEGIN
      // 1. Setup: Create three new Employee and their Alternative Address.
      Initialize;
      CreateEmployeeWithAddress(Employee);
      CreateAlternativeAddress(AlternativeAddress,Employee."No.");
      AttachAlternativeAddress(Employee,AlternativeAddress.Code);

      CreateEmployeeWithAddress(Employee2);
      CreateAlternativeAddress(AlternativeAddress2,Employee2."No.");
      AttachAlternativeAddress(Employee2,AlternativeAddress2.Code);

      CreateEmployeeWithAddress(Employee3);
      CreateAlternativeAddress(AlternativeAddress3,Employee3."No.");
      AttachAlternativeAddress(Employee3,AlternativeAddress3.Code);

      // 2. Exercise: Generate the Employee - Labels report.
      FilterExpression := Employee."No." + '|' + Employee2."No." + '|' + Employee3."No.";
      RunEmployeeLabelsReport(FilterExpression,AddrFormatFrom,LabelFormatFrom);

      // 3. Verify: Check that the report is generated properly.
      LibraryReportDataset.LoadDataSetFile;
      VerifyAlternativeAddress(AlternativeAddress);
      VerifyAlternativeAddress(AlternativeAddress2);
      VerifyAlternativeAddress(AlternativeAddress3);
    END;

    LOCAL PROCEDURE AddContactsToSegment@16(Contact@1002 : Record 5050;SegmentHeader@1001 : Record 5076);
    VAR
      AddContacts@1000 : Report 5198;
    BEGIN
      Contact.SETRANGE("No.",Contact."No.");
      SegmentHeader.SETRANGE("No.",SegmentHeader."No.");

      AddContacts.SETTABLEVIEW(SegmentHeader);
      AddContacts.SETTABLEVIEW(Contact);
      AddContacts.USEREQUESTPAGE(FALSE);
      AddContacts.RUNMODAL;
    END;

    LOCAL PROCEDURE AttachAlternativeAddress@34(Employee@1000 : Record 5200;AltAddressCode@1001 : Code[10]);
    BEGIN
      // Use TODAY instead of WORKDATE because original code uses TODAY.
      Employee.VALIDATE("Alt. Address Code",AltAddressCode);
      Employee.VALIDATE("Alt. Address Start Date",CALCDATE('<-' + FORMAT(RANDOM(10)) + 'D>',TODAY));
      Employee.VALIDATE("Alt. Address End Date",CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',TODAY));
      Employee.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAlternativeAddress@32(VAR AlternativeAddress@1001 : Record 5201;EmployeeNo@1000 : Code[20]);
    VAR
      PostCode@1004 : Record 225;
      LibraryHumanResource@1002 : Codeunit 131901;
    BEGIN
      CreatePostCode(PostCode);

      LibraryHumanResource.CreateAlternativeAddress(AlternativeAddress,EmployeeNo);
      AlternativeAddress.VALIDATE(
        Address,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(AlternativeAddress.FIELDNO(Address),DATABASE::"Alternative Address"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Alternative Address",AlternativeAddress.FIELDNO(Address))));
      AlternativeAddress.VALIDATE(
        "Address 2",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(AlternativeAddress.FIELDNO("Address 2"),DATABASE::"Alternative Address"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Alternative Address",AlternativeAddress.FIELDNO("Address 2"))));
      AlternativeAddress.VALIDATE("Post Code",PostCode.Code);
      AlternativeAddress.VALIDATE("Country/Region Code",PostCode."Country/Region Code");
      AlternativeAddress.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateContactWithAddress@10(VAR Contact@1000 : Record 5050);
    VAR
      PostCode@1003 : Record 225;
      LibraryMarketing@1002 : Codeunit 131900;
    BEGIN
      CreatePostCode(PostCode);

      LibraryMarketing.CreateContact(Contact);
      Contact.VALIDATE(
        Address,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Contact.FIELDNO(Address),DATABASE::Contact),
          1,
          LibraryUtility.GetFieldLength(DATABASE::Contact,Contact.FIELDNO(Address))));
      Contact.VALIDATE(
        "Address 2",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Contact.FIELDNO("Address 2"),DATABASE::Contact),
          1,
          LibraryUtility.GetFieldLength(DATABASE::Contact,Contact.FIELDNO("Address 2"))));
      Contact.VALIDATE("Post Code",PostCode.Code);
      Contact.VALIDATE("Country/Region Code",PostCode."Country/Region Code");
      Contact.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateEmployeeWithAddress@21(VAR Employee@1000 : Record 5200);
    VAR
      PostCode@1003 : Record 225;
      LibraryHumanResource@1001 : Codeunit 131901;
    BEGIN
      CreatePostCode(PostCode);

      LibraryHumanResource.CreateEmployee(Employee);
      Employee.VALIDATE(
        Address,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Employee.FIELDNO(Address),DATABASE::Employee),
          1,
          LibraryUtility.GetFieldLength(DATABASE::Employee,Employee.FIELDNO(Address))));
      Employee.VALIDATE(
        "Address 2",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Employee.FIELDNO("Address 2"),DATABASE::Employee),
          1,
          LibraryUtility.GetFieldLength(DATABASE::Employee,Employee.FIELDNO("Address 2"))));
      Employee.VALIDATE("Post Code",PostCode.Code);
      Employee.VALIDATE("Country/Region Code",PostCode."Country/Region Code");
      Employee.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePostCode@40(VAR PostCode@1002 : Record 225);
    VAR
      CountryRegion@1001 : Record 9;
      LibraryERM@1000 : Codeunit 131300;
    BEGIN
      LibraryERM.CreatePostCode(PostCode);  // Creation of Post Code is required to avoid special characters in existing ones.
      CountryRegion.SETRANGE("Address Format",CountryRegion."Address Format"::"Post Code+City");
      CountryRegion.NEXT(LibraryRandom.RandInt(CountryRegion.COUNT));
      PostCode.VALIDATE("Country/Region Code",CountryRegion.Code);
      PostCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunContactLabelsReport@14(FilterExpression@1002 : Text[250];LabelFormatFrom@1003 : Option);
    VAR
      Contact@1001 : Record 5050;
      ContactLabels@1000 : Report 5056;
    BEGIN
      CLEAR(ContactLabels);
      Contact.SETFILTER("No.",FilterExpression);
      ContactLabels.InitializeRequest(LabelFormatFrom);
      ContactLabels.SETTABLEVIEW(Contact);
      COMMIT;
      ContactLabels.RUN;
    END;

    LOCAL PROCEDURE RunEmployeeLabelsReport@23(FilterExpression@1002 : Text[250];AddrFormatFrom@1004 : Option;LabelFormatFrom@1003 : Option);
    VAR
      Employee@1001 : Record 5200;
      EmployeeLabels@1000 : Report 5200;
    BEGIN
      CLEAR(EmployeeLabels);
      Employee.SETFILTER("No.",FilterExpression);
      EmployeeLabels.InitializeRequest(AddrFormatFrom,LabelFormatFrom);
      EmployeeLabels.SETTABLEVIEW(Employee);
      COMMIT;
      EmployeeLabels.RUN;
    END;

    LOCAL PROCEDURE RunSegmentLabelsReport@8(FilterExpression@1003 : Text[250];LabelFormatFrom@1002 : Option);
    VAR
      SegmentHeader@1001 : Record 5076;
      SegmentLabels@1000 : Report 5065;
    BEGIN
      CLEAR(SegmentLabels);
      SegmentHeader.SETFILTER("No.",FilterExpression);
      SegmentLabels.InitializeRequest(LabelFormatFrom);
      SegmentLabels.SETTABLEVIEW(SegmentHeader);
      COMMIT;
      SegmentLabels.RUN;
    END;

    LOCAL PROCEDURE VerifyAlternativeAddress@37(AlternativeAddress@1000 : Record 5201);
    VAR
      CountryRegion@1001 : Record 9;
      FormatAddress@1002 : Codeunit 365;
      PostCodeCity@1003 : Text[90];
      County@1004 : Text[50];
      Column@1007 : Integer;
      Row@1006 : Integer;
      XmlElementName@1005 : Text[250];
      Found@1008 : Boolean;
    BEGIN
      Column := 0;
      Row := 1;
      Found := FALSE;
      WHILE (FALSE = Found) AND (Column <= 3) DO BEGIN
        Column += 1;
        XmlElementName := STRSUBSTNO(EmployeeAddrCap,Column,Row);
        LibraryReportDataset.SetRangeWithTrimmedValues(XmlElementName,AlternativeAddress."Employee No.",TRUE);
        Found := LibraryReportDataset.GetNextRow;
      END;

      Assert.IsTrue(Found,AlternativeAddress."Employee No.");

      IF Found THEN BEGIN
        Row += 1;
        LibraryReportDataset.AssertCurrentRowValue(STRSUBSTNO(EmployeeAddrCap,Column,Row),
          AlternativeAddress.Address);
        Row += 1;
        LibraryReportDataset.AssertCurrentRowValue(STRSUBSTNO(EmployeeAddrCap,Column,Row),
          AlternativeAddress."Address 2");
        CountryRegion.GET(AlternativeAddress."Country/Region Code");
        FormatAddress.FormatPostCodeCity(PostCodeCity,County,AlternativeAddress.City,
          AlternativeAddress."Post Code",AlternativeAddress.County,CountryRegion.Code);
        Row += 1;
        LibraryReportDataset.AssertCurrentRowValue(STRSUBSTNO(EmployeeAddrCap,Column,Row),PostCodeCity);
        IF County <> '' THEN BEGIN
          Row += 1;
          LibraryReportDataset.AssertCurrentRowValue(STRSUBSTNO(EmployeeAddrCap,Column,Row),County);
        END;
        Row += 1;
        LibraryReportDataset.AssertCurrentRowValue(STRSUBSTNO(EmployeeAddrCap,Column,Row),CountryRegion.Name);
      END;
    END;

    LOCAL PROCEDURE VerifyContactLabels@1(Contact@1000 : Record 5050;ElementCaption@1009 : Text[50]);
    VAR
      CountryRegion@1001 : Record 9;
      FormatAddress@1002 : Codeunit 365;
      PostCodeCity@1003 : Text[90];
      County@1004 : Text[50];
      Column@1008 : Integer;
      Row@1007 : Integer;
      XmlElementName@1006 : Text[250];
      Found@1005 : Boolean;
    BEGIN
      Column := 0;
      Row := 1;
      Found := FALSE;
      WHILE (FALSE = Found) AND (Column <= 3) DO BEGIN
        Column += 1;
        XmlElementName := STRSUBSTNO(ElementCaption,Column,Row);
        LibraryReportDataset.SetRange(XmlElementName,Contact."No.");
        Found := LibraryReportDataset.GetNextRow;
      END;

      Assert.IsTrue(Found,Contact."No.");
      IF Found THEN BEGIN
        Row += 1;
        LibraryReportDataset.AssertCurrentRowValue(STRSUBSTNO(ElementCaption,Column,Row),
          Contact.Address);
        Row += 1;
        LibraryReportDataset.AssertCurrentRowValue(STRSUBSTNO(ElementCaption,Column,Row),
          Contact."Address 2");
        CountryRegion.GET(Contact."Country/Region Code");
        FormatAddress.FormatPostCodeCity(PostCodeCity,County,Contact.City,
          Contact."Post Code",Contact.County,CountryRegion.Code);
        Row += 1;
        LibraryReportDataset.AssertCurrentRowValue(STRSUBSTNO(ElementCaption,Column,Row),PostCodeCity);
        IF County <> '' THEN BEGIN
          Row += 1;
          LibraryReportDataset.AssertCurrentRowValue(STRSUBSTNO(ElementCaption,Column,Row),County);
        END;
        Row += 1;
        LibraryReportDataset.AssertCurrentRowValue(STRSUBSTNO(ElementCaption,Column,Row),CountryRegion.Name);
      END;
    END;

    LOCAL PROCEDURE VerifyEmployeeLabels@9(Employee@1000 : Record 5200);
    VAR
      CountryRegion@1001 : Record 9;
      FormatAddress@1002 : Codeunit 365;
      PostCodeCity@1003 : Text[90];
      County@1004 : Text[50];
      Column@1008 : Integer;
      Row@1007 : Integer;
      XmlElementName@1006 : Text[250];
      Found@1005 : Boolean;
    BEGIN
      Column := 0;
      Row := 1;
      Found := FALSE;
      WHILE (FALSE = Found) AND (Column <= 3) DO BEGIN
        Column += 1;
        XmlElementName := STRSUBSTNO(EmployeeAddrCap,Column,Row);
        LibraryReportDataset.SetRangeWithTrimmedValues(XmlElementName,Employee."No.",TRUE);
        Found := LibraryReportDataset.GetNextRow;
      END;

      Assert.IsTrue(Found,Employee."No.");

      IF Found THEN BEGIN
        Row += 1;
        LibraryReportDataset.AssertCurrentRowValue(STRSUBSTNO(EmployeeAddrCap,Column,Row),
          Employee.Address);
        Row += 1;
        LibraryReportDataset.AssertCurrentRowValue(STRSUBSTNO(EmployeeAddrCap,Column,Row),
          Employee."Address 2");
        CountryRegion.GET(Employee."Country/Region Code");
        FormatAddress.FormatPostCodeCity(PostCodeCity,County,Employee.City,
          Employee."Post Code",Employee.County,CountryRegion.Code);
        Row += 1;
        LibraryReportDataset.AssertCurrentRowValue(STRSUBSTNO(EmployeeAddrCap,Column,Row),PostCodeCity);
        IF County <> '' THEN BEGIN
          Row += 1;
          LibraryReportDataset.AssertCurrentRowValue(STRSUBSTNO(EmployeeAddrCap,Column,Row),County);
        END;
        Row += 1;
        LibraryReportDataset.AssertCurrentRowValue(STRSUBSTNO(EmployeeAddrCap,Column,Row),CountryRegion.Name);
      END;
    END;

    LOCAL PROCEDURE VerifyServiceItemLineLabels@31(ServiceItemLine@1000 : Record 5901);
    VAR
      Column@1003 : Integer;
      Row@1002 : Integer;
      XmlElementName@1001 : Text[250];
    BEGIN
      Row := 0;
      Column := 1;

      Row += 1;
      XmlElementName := ServiceitemLabelAddrCap;
      LibraryReportDataset.SetRange(STRSUBSTNO(XmlElementName,Column,Row),
        ServiceItemLine.FIELDCAPTION("Document No.") + ' ' + ServiceItemLine."Document No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,ServiceItemLine."Document No.");

      Row += 1;
      LibraryReportDataset.AssertCurrentRowValue(STRSUBSTNO(XmlElementName,Column,Row),
        ServiceItemLine.FIELDCAPTION("Service Item No.") + ' ' + ServiceItemLine."Service Item No.");

      Row += 2;
      LibraryReportDataset.AssertCurrentRowValue(STRSUBSTNO(XmlElementName,Column,Row),
        ServiceItemLine.Description);
    END;

    [RequestPageHandler]
    PROCEDURE EmployeeLablesReportsHandler@35(VAR EmployeeLabelsRequestPage@1001 : TestRequestPage 5200);
    BEGIN
      EmployeeLabelsRequestPage.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ContactLabelsReportsHandler@39(VAR ContactLabelsRequestPage@1001 : TestRequestPage 5056);
    BEGIN
      ContactLabelsRequestPage.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE SegmentLabelReportsHandler@59(VAR SegmentLabelsRequestPage@1001 : TestRequestPage 5065);
    BEGIN
      SegmentLabelsRequestPage.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE SerivceItemLabelsReportsHandler@83(VAR ServiceItemlineLabelsRequestPage@1001 : TestRequestPage 5901);
    BEGIN
      ServiceItemlineLabelsRequestPage.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Reports] [Labels]
      1. Check that the Contact - Labels report is generated properly.
      2. Check that the Segment - Labels report is generated properly.
      3. Check that the Service Item Line Labels report is generated properly.
      4. Check that the Employee - Labels report is generated properly.

      TFS_TS_ID = 234881
      Cover Test cases:
      ---------------------------------------------------------------------------
      Test Function Name                                                  TFS ID
      ---------------------------------------------------------------------------
      ContactLabels36x70mm3Columns, ContactLabels37x70mm3Columns          139490
      ContactLabels36x105mm2Columns, ContactLabels37x105mm2Columns        139490
      SegmentLabels36x70mm3Columns, SegmentLabels37x70mm3Columns          139493
      SegmentLabels36x105mm2Columns, SegmentLabels37x105mm2Columns        139493
      ServiceItemLineLabelsReport                                         139448
      EmployeeLabels36x70mm3Columns, EmployeeLabels37x70mm3Columns        139617
      EmployeeLabels36x105mm2Columns, EmployeeLabels37x105mm2Columns      139617
      EmployeeAlternate36x703Column, EmployeeAlternate37x703Column        139617
      EmployeeAlternate36x1052Column, EmployeeAlternate37x1052Column      139617
    }
    END.
  }
}

