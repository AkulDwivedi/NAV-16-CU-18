OBJECT Codeunit 134910 ERM Suggest Reminder
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryERM@1004 : Codeunit 131300;
      LibrarySales@1000 : Codeunit 130509;
      LibraryInventory@1006 : Codeunit 132201;
      LibraryRandom@1002 : Codeunit 130440;
      IsInitialized@1003 : Boolean;
      ReminderCaptionTxt@1007 : TextConst '@@@="%1=Reminder Terms Code;%2=Reminder Level";ENU=Edit - Reminder Text - %1 %2 Beginning';
      CaptionErr@1001 : TextConst 'ENU=Page Captions must match.';
      ReminderLineExistErr@1009 : TextConst 'ENU=Reminder Line must not exist.';
      ReminderHeaderExistErr@1008 : TextConst 'ENU=Reminder Header must not exist.';

    [Test]
    PROCEDURE SuggestReminderforCustomer@5();
    VAR
      ReminderHeaderNo@1000 : Code[20];
    BEGIN
      // Check that Reminder Lines will be created after Running Suggest Reminder Lines Report.

      // Create Reminder and suggest Reminder Lines. Take random no. of days to calculate Document Date after Due Date.
      Initialize;
      ReminderHeaderNo := CreateAndSuggestReminderLine(LibraryRandom.RandInt(10));

      // Verify: Verify the Creation of Reminder Lines.
      VerifyReminderLine(ReminderHeaderNo);
    END;

    [Test]
    PROCEDURE NoReminderLinesBeforeDueDate@9();
    VAR
      ReminderLine@1001 : Record 296;
      Assert@1002 : Codeunit 130000;
      ReminderNo@1000 : Code[20];
    BEGIN
      // Check that no Reminder Line exist while creating and suggesting Reminder through Page Testability and Document Date is before Due Date.

      // Create Reminder and suggest Reminder Lines. Take Negative random no. of days to calculate Document Date before Due Date.
      Initialize;
      ReminderNo := CreateAndSuggestReminderLine(-LibraryRandom.RandInt(10));

      // Verify: Check that no Reminder Line exists when Document Date is before Due Date.
      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      Assert.IsTrue(ReminderLine.ISEMPTY,ReminderLineExistErr);
    END;

    [Test]
    PROCEDURE NoReminderLinesWithInterestCalculation@10();
    VAR
      ReminderHeader@1006 : Record 295;
      GenJournalLine@1005 : Record 81;
      Assert@1002 : Codeunit 130000;
      ReminderNo@1000 : Code[20];
      CustomerNo@1003 : Code[20];
      Amt@1004 : Decimal;
    BEGIN
      // [SCENARIO TFS121135] Create Reminder and remove Reminder Header if total balance is negative.

      // [GIVEN] Create new customer.
      Initialize;
      CustomerNo := CreateCustomer;
      Amt := LibraryRandom.RandIntInRange(1000,1500);

      // [GIVEN] Credit Memo posted with amount 'A1', where calculated Interest = 'I'.
      CreatePostGeneralJnlLine(
        CustomerNo,GenJournalLine."Document Type"::"Credit Memo",WORKDATE,-Amt);

      // [GIVEN] Invoice posted on the 1 year after work date with amount 'A2', where ('A1'+ 'I') > 'A2' > 'A1'.
      CreatePostGeneralJnlLine(
        CustomerNo,GenJournalLine."Document Type"::Invoice,CALCDATE('<1Y>',WORKDATE),
        Amt + LibraryRandom.RandIntInRange(5,10));

      // [WHEN] Create Reminder Header and Suggest Reminder Line.
      ReminderNo := CreateAndSuggestingReminder(CustomerNo,CALCDATE('<1Y+1M>',WORKDATE));

      // [THEN] Check that no Reminder exists when Total Balance is negative.
      ReminderHeader.SETRANGE("No.",ReminderNo);
      Assert.IsTrue(ReminderHeader.ISEMPTY,ReminderHeaderExistErr);
    END;

    LOCAL PROCEDURE CreateAndSuggestReminderLine@37(NoOfDays@1003 : Integer) ReminderNo : Code[20];
    VAR
      SalesHeader@1002 : Record 36;
      GracePeriod@1000 : DateFormula;
    BEGIN
      // Setup: Create and Post Sale Invoice, Calculate Document Date and Create Reminder for Customer.
      CreateAndPostSalesInvoice(SalesHeader);
      GetReminderLevel(GracePeriod,SalesHeader."Sell-to Customer No.");

      // Exercise: Create Reminder Header and Suggest Reminder Line.
      ReminderNo :=
        CreateAndSuggestingReminder(
          SalesHeader."Sell-to Customer No.",CALCDATE('<' + FORMAT(NoOfDays) + 'D>',CALCDATE(GracePeriod,SalesHeader."Due Date")));
    END;

    [Test]
    PROCEDURE ReminderTextPageCaption@6();
    VAR
      ReminderLevel@1001 : Record 293;
      ReminderTerms@1000 : Record 292;
      ReminderText@1002 : Record 294;
      ReminderLevels@1006 : TestPage 432;
      ReminderTextPage@1005 : TestPage 433;
      ReminderTermsCode@1004 : Code[10];
      BeginningText@1003 : Text[100];
    BEGIN
      // Check Reminder Text Page's caption updated according to Reminder Terms.

      // Setup: Create Reminder Terms with Reminder Level and Beginning Text.
      Initialize;
      ReminderTermsCode := CreateReminderTerms;
      BeginningText := ReminderTermsCode + FORMAT(RANDOM(10));  // Create any Beginning Text using Random.
      FindReminderLevel(ReminderLevel,ReminderTermsCode);
      LibraryERM.CreateReminderText(ReminderText,ReminderTermsCode,ReminderLevel."No.",
        ReminderText.Position::Beginning,BeginningText);

      // Open Reminder Text Page from Reminder Levels Page.
      OpenReminderTextPage(ReminderLevels,ReminderTermsCode,ReminderLevel."No.");
      ReminderTextPage.TRAP;

      // Exercise: Invoke Reminder Text Page.
      ReminderLevels.BeginningText.INVOKE;

      // Verify: Verify page caption for Reminder Text Page.
      Assert.AreEqual(STRSUBSTNO(ReminderCaptionTxt,ReminderTermsCode,ReminderLevel."No."),ReminderTextPage.CAPTION,CaptionErr);

      // Tear Down: Delete Reminder Terms created earlier.
      ReminderTerms.GET(ReminderTermsCode);
      ReminderTerms.DELETE(TRUE);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateGenJournalBatch@11(VAR GenJournalBatch@1000 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoice@17(VAR SalesHeader@1001 : Record 36);
    VAR
      Item@1002 : Record 27;
      SalesLine@1000 : Record 37;
    BEGIN
      // Random value used are not important for test.
      LibraryInventory.CreateItemWithUnitPriceAndUnitCost(Item,
        LibraryRandom.RandDec(1000,2),LibraryRandom.RandDec(1000,2));
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CreateCustomer);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(100,2));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreatePostGeneralJnlLine@18(CustomerNo@1000 : Code[20];DocType@1001 : Option;DocDate@1002 : Date;Amt@1003 : Decimal);
    VAR
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1005 : Record 81;
    BEGIN
      CreateGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLineWithBalAcc(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        DocType,GenJournalLine."Account Type"::Customer,CustomerNo,
        GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,Amt);
      GenJournalLine.VALIDATE("Posting Date",DocDate);
      GenJournalLine.MODIFY(TRUE);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateCustomer@1() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Reminder Terms Code",CreateReminderTerms);
      Customer.VALIDATE("Fin. Charge Terms Code",CreateFinanceChargeTerms);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.")
    END;

    LOCAL PROCEDURE CreateReminderLevel@3(ReminderTermsCode@1000 : Code[10]);
    VAR
      ReminderLevel@1001 : Record 293;
    BEGIN
      // Create Reminder Level with a Random Grace Period and Random Additional Fee.
      LibraryERM.CreateReminderLevel(ReminderLevel,ReminderTermsCode);
      EVALUATE(ReminderLevel."Grace Period",'<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>');
      ReminderLevel.VALIDATE("Calculate Interest",TRUE);
      ReminderLevel.VALIDATE("Additional Fee (LCY)",LibraryRandom.RandInt(10));
      ReminderLevel.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReminderTerms@4() : Code[10];
    VAR
      ReminderTerms@1000 : Record 292;
    BEGIN
      LibraryERM.CreateReminderTerms(ReminderTerms);
      ReminderTerms.VALIDATE("Post Interest",TRUE);
      ReminderTerms.MODIFY(TRUE);
      CreateReminderLevel(ReminderTerms.Code);
      EXIT(ReminderTerms.Code);
    END;

    LOCAL PROCEDURE CreateFinanceChargeTerms@53() : Code[10];
    VAR
      FinanceChargeTerms@1000 : Record 5;
    BEGIN
      WITH FinanceChargeTerms DO BEGIN
        LibraryERM.CreateFinanceChargeTerms(FinanceChargeTerms);
        VALIDATE("Interest Rate",LibraryRandom.RandDec(10,2));
        VALIDATE("Additional Fee (LCY)",LibraryRandom.RandDec(100,2));
        VALIDATE("Interest Period (Days)",LibraryRandom.RandInt(30));
        EVALUATE("Due Date Calculation",'<' + FORMAT(LibraryRandom.RandInt(30)) + 'D>');
        VALIDATE("Post Additional Fee",TRUE);
        VALIDATE("Post Interest",TRUE);
        MODIFY(TRUE);
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE GetReminderLevel@15(VAR GracePeriod@1003 : DateFormula;CustomerNo@1000 : Code[20]);
    VAR
      Customer@1002 : Record 18;
      ReminderLevel@1001 : Record 293;
    BEGIN
      Customer.GET(CustomerNo);
      FindReminderLevel(ReminderLevel,Customer."Reminder Terms Code");
      GracePeriod := ReminderLevel."Grace Period";
    END;

    LOCAL PROCEDURE CreateAndSuggestingReminder@2(CustomerNo@1001 : Code[20];DocumentDate@1003 : Date) : Code[20];
    VAR
      ReminderHeader@1002 : Record 295;
      SuggestReminderLines@1000 : Report 189;
    BEGIN
      LibraryERM.CreateReminderHeader(ReminderHeader);
      ReminderHeader.VALIDATE("Customer No.",CustomerNo);
      ReminderHeader.VALIDATE("Document Date",DocumentDate);
      ReminderHeader.MODIFY(TRUE);

      ReminderHeader.SETRANGE("No.",ReminderHeader."No.");
      SuggestReminderLines.SETTABLEVIEW(ReminderHeader);
      SuggestReminderLines.USEREQUESTPAGE(FALSE);
      SuggestReminderLines.RUN;
      EXIT(ReminderHeader."No.");
    END;

    LOCAL PROCEDURE FindReminderLevel@48(VAR ReminderLevel@1001 : Record 293;ReminderTermsCode@1000 : Code[10]);
    BEGIN
      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderTermsCode);
      ReminderLevel.FINDFIRST;
    END;

    LOCAL PROCEDURE OpenReminderTextPage@29(VAR ReminderLevels@1001 : TestPage 432;Code@1003 : Code[10];No@1004 : Integer);
    VAR
      ReminderTerms@1002 : TestPage 431;
    BEGIN
      ReminderTerms.OPENEDIT;
      ReminderTerms.FILTER.SETFILTER(Code,Code);
      ReminderLevels.TRAP;
      ReminderTerms."Page Reminder Levels".INVOKE;
      ReminderLevels.FILTER.SETFILTER("No.",FORMAT(No));
    END;

    LOCAL PROCEDURE VerifyReminderLine@7(ReminderNo@1001 : Code[20]);
    VAR
      ReminderLine@1000 : Record 296;
    BEGIN
      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      ReminderLine.FINDFIRST;
    END;

    BEGIN
    {
      // [FEATURE] [Reminder] [Suggest]
      Unsupported version tags:
      NA: Unable to Execute
      ES: Unable to Execute

      Test Suggest Reminder Lines for a Customer.
        1. Verify Reminder Line will be created after Running Suggest Reminder Lines Report.
        2. Verify that no Reminder Line exists when Document Date is earlier than Due Date.
        3. Verify that Reminder Text Page caption updates with different Reminder Terms.

        Covers Test Cases
        ----------------------------------------------
        Test Function Name              TFS ID
        ----------------------------------------------
        SuggestReminderforCustomer      125688,125689

        Covers Test Cases for WI: 265335
        ----------------------------------------------
        Test Function Name              TFS ID
        ----------------------------------------------
        NoReminderLinesBeforeDueDate    121521

        Covers Test Cases for WI: 268350
        ----------------------------------------------
        Test Function Name              TFS ID
        ----------------------------------------------
        ReminderTextPageCaption         244937
    }
    END.
  }
}

