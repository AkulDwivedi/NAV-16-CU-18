OBJECT Codeunit 137403 SCM Budget and Analysis
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1007 : Codeunit 132201;
      LibraryUtility@1005 : Codeunit 131000;
      AnalysisColumnTemplateName@1002 : Code[10];
      AnalysisLineTemplateName@1001 : Code[10];
      NewRowNo@1000 : Code[20];
      AssemblyOutpuTxt@1006 : TextConst 'ENU=Assembly Output';
      DirectCostTxt@1008 : TextConst 'ENU=Direct Cost';

    [Test]
    [HandlerFunctions(ItemListPageHandler,RenumberAnalysisLinesHandler,MessageHandler)]
    PROCEDURE RenumberAnalysisLines@16();
    VAR
      AnalysisLineTemplate@1000 : Record 7112;
      AnalysisLine@1001 : Record 7114;
    BEGIN
      // [FEATURE] [Analysis Line]
      // [SCENARIO] Check that Analysis Lines can be renumbered.

      // [GIVEN] Create Analysis Line Template and three Analysis Lines for that template.
      Initialize;
      LibraryInventory.CreateAnalysisLineTemplate(AnalysisLineTemplate,AnalysisLineTemplate."Analysis Area"::Sales);
      CreateAnalysisLine(AnalysisLineTemplate.Name);
      CreateAnalysisLine(AnalysisLineTemplate.Name);
      CreateAnalysisLine(AnalysisLineTemplate.Name);

      // [WHEN] Renumber the Analysis Lines with the new "Row No." of 20 chars length
      // NewRowNo is made global as it is used in the handler.
      NewRowNo :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(AnalysisLine.FIELDNO("Row Ref. No."),DATABASE::"Analysis Line"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Analysis Line",AnalysisLine.FIELDNO("Row Ref. No.")));
      NewRowNo := PADSTR(NewRowNo,MAXSTRLEN(AnalysisLine."Row Ref. No."),'0');
      RunRenumberAnalysisLines(AnalysisLineTemplate.Name);

      // [THEN] Verify that the Analysis Lines gets renumbered.
      VerifyRowNoInAnalysisLines(AnalysisLineTemplate.Name);
    END;

    [Test]
    [HandlerFunctions(SalesAnalysisLineHandler)]
    PROCEDURE SalesAnalysisLineTemplate@24();
    VAR
      AnalysisLineTemplate@1000 : Record 7112;
    BEGIN
      // Test to validate Name on Analysis Lines page invoked by Sales Analysis Line Templates.
      Initialize;
      CreateAnalysisLineTemplateAndOpenAnalysisLines(AnalysisLineTemplate."Analysis Area"::Sales);
    END;

    [Test]
    [HandlerFunctions(PurchaseAnalysisLineHandler)]
    PROCEDURE PurchaseAnalysisLineTemplate@22();
    VAR
      AnalysisLineTemplate@1000 : Record 7112;
    BEGIN
      // Test to validate Name on Analysis Lines page invoked by Purchase Analysis Line Templates.
      Initialize;
      CreateAnalysisLineTemplateAndOpenAnalysisLines(AnalysisLineTemplate."Analysis Area"::Purchase);
    END;

    [Test]
    [HandlerFunctions(InventoryAnalysisLineHandler)]
    PROCEDURE InventoryAnalysisLineTemplate@32();
    VAR
      AnalysisLineTemplate@1000 : Record 7112;
    BEGIN
      // Test to validate Name on Analysis Lines page invoked by Inventory Analysis Line Templates.
      Initialize;
      CreateAnalysisLineTemplateAndOpenAnalysisLines(AnalysisLineTemplate."Analysis Area"::Inventory);
    END;

    LOCAL PROCEDURE CreateAnalysisLineTemplateAndOpenAnalysisLines@33(AnalysisArea@1000 : Option);
    VAR
      AnalysisLineTemplate@1001 : Record 7112;
      AnalysisLineTemplates@1002 : TestPage 7112;
    BEGIN
      // Setup: Create an Analysis Line Template.
      LibraryInventory.CreateAnalysisLineTemplate(AnalysisLineTemplate,AnalysisArea);
      AnalysisLineTemplateName := AnalysisLineTemplate.Name;  // This variable is made global as it is to be verified in the handler.

      // Exercise: Open Analysis Lines page from the Analysis Line Templates page using Handler.
      AnalysisLineTemplates.OPENEDIT;
      AnalysisLineTemplates.FILTER.SETFILTER(Name,AnalysisLineTemplate.Name);
      AnalysisLineTemplates.Lines.INVOKE;

      // Verify: Verification is done in Analysis Line Handler.
    END;

    [Test]
    [HandlerFunctions(AnalysisColumnHandler)]
    PROCEDURE SalesAnalysisColumnTemplate@5();
    VAR
      AnalysisColumnTemplate@1000 : Record 7116;
    BEGIN
      // Test to validate Name on Analysis Columns page invoked by Sales Analysis Column Templates.
      Initialize;
      CreateAnalysisColumnTemplateAndOpenAnalysisColumns(AnalysisColumnTemplate."Analysis Area"::Sales);
    END;

    [Test]
    [HandlerFunctions(AnalysisColumnHandler)]
    PROCEDURE PurchaseAnalysisColumnTemplate@10();
    VAR
      AnalysisColumnTemplate@1000 : Record 7116;
    BEGIN
      // Test to validate Name on Analysis Columns page invoked by Purchase Analysis Column Templates.
      Initialize;
      CreateAnalysisColumnTemplateAndOpenAnalysisColumns(AnalysisColumnTemplate."Analysis Area"::Purchase);
    END;

    [Test]
    [HandlerFunctions(AnalysisColumnHandler)]
    PROCEDURE InventoryAnalysisColumnTemplate@13();
    VAR
      AnalysisColumnTemplate@1000 : Record 7116;
    BEGIN
      // Test to validate Name on Analysis Columns page invoked by Inventory Analysis Column Templates.
      Initialize;
      CreateAnalysisColumnTemplateAndOpenAnalysisColumns(AnalysisColumnTemplate."Analysis Area"::Inventory);
    END;

    LOCAL PROCEDURE CreateAnalysisColumnTemplateAndOpenAnalysisColumns@12(AnalysisArea@1002 : Option);
    VAR
      AnalysisColumnTemplate@1000 : Record 7116;
      AnalysisColumnTemplates@1001 : TestPage 7113;
    BEGIN
      // Setup: Create an Analysis Column Template.
      LibraryInventory.CreateAnalysisColumnTemplate(AnalysisColumnTemplate,AnalysisArea);
      AnalysisColumnTemplateName := AnalysisColumnTemplate.Name;  // This variable is made global as it is to be verified in the handler.

      // Exercise: Open Analysis Columns page from the Analysis Column Templates page.
      AnalysisColumnTemplates.OPENEDIT;
      AnalysisColumnTemplates.FILTER.SETFILTER("Analysis Area",FORMAT(AnalysisColumnTemplate."Analysis Area"));
      AnalysisColumnTemplates.FILTER.SETFILTER(Name,AnalysisColumnTemplate.Name);
      AnalysisColumnTemplates.Columns.INVOKE;

      // Verify: Verification is done in Analysis Column Handler.
    END;

    [Test]
    PROCEDURE CheckItemLedgerEntryTypeFilter@3();
    VAR
      AnalysisType@1001 : Record 7113;
      AnalysisTypes@1000 : TestPage 7110;
    BEGIN
      // [FEATURE] [Analysis Types]
      // [SCENARIO 363540] Item Ledger Entry Type Filter field on Analysis Type Page stores a text option value if was set in text form

      // [GIVEN] Analysis Type Page where "Item Ledger Entry Type Filter" is blank
      AnalysisTypes.OPENNEW;
      AnalysisTypes.Code.SETVALUE(LibraryUtility.GenerateGUID);
      AnalysisTypes."Value Type".SETVALUE(AnalysisType."Value Type"::"Cost Amount");

      // [WHEN] Set "Item Ledger Entry Type Filter" to "Assembly Output" in text form
      AnalysisTypes."Item Ledger Entry Type Filter".SETVALUE(AssemblyOutpuTxt);

      // [THEN] "Item Ledger Entry Type Filter" is "Assembly Output"
      AnalysisTypes."Item Ledger Entry Type Filter".ASSERTEQUALS(AssemblyOutpuTxt);
      AnalysisTypes.CLOSE;
    END;

    [Test]
    PROCEDURE CheckValueEntryTypeFilter@26();
    VAR
      AnalysisType@1001 : Record 7113;
      AnalysisTypes@1000 : TestPage 7110;
    BEGIN
      // [FEATURE] [Analysis Types]
      // [SCENARIO 363540] Value Entry Type Filter field on Analysis Type Page stores a text option value if was set in text form

      // [GIVEN] Analysis Type Page where "Item Ledger Entry Type Filter" is blank
      AnalysisTypes.OPENNEW;
      AnalysisTypes.Code.SETVALUE(LibraryUtility.GenerateGUID);
      AnalysisTypes."Value Type".SETVALUE(AnalysisType."Value Type"::"Cost Amount");

      // [WHEN] Set "Value Entry Type Filter" to "Direct Cost" in text form
      AnalysisTypes."Value Entry Type Filter".SETVALUE(DirectCostTxt);

      // [THEN] "Item Ledger Entry Type Filter" is "Direct Cost"
      AnalysisTypes."Value Entry Type Filter".ASSERTEQUALS(DirectCostTxt);
      AnalysisTypes.CLOSE;
    END;

    [Test]
    PROCEDURE CheckItemLedgerEntryTypeFilterNumeric@9();
    VAR
      ItemStatisticsBuffer@1002 : Record 5821;
      AnalysisType@1001 : Record 7113;
      AnalysisTypes@1000 : TestPage 7110;
    BEGIN
      // [FEATURE] [Analysis Types]
      // [SCENARIO 363540] Item Ledger Entry Type Filter field on Analysis Type Page stores a text option value if was set in numeric form

      // [GIVEN] Analysis Type Page where "Item Ledger Entry Type Filter" is blank
      AnalysisTypes.OPENNEW;
      AnalysisTypes.Code.SETVALUE(LibraryUtility.GenerateGUID);
      AnalysisTypes."Value Type".SETVALUE(AnalysisType."Value Type"::"Cost Amount");

      // [WHEN] Set "Item Ledger Entry Type Filter" to '9' (numeric value for "Assembly Output")
      AnalysisTypes."Item Ledger Entry Type Filter".SETVALUE(ItemStatisticsBuffer."Item Ledger Entry Type Filter"::"Assembly Output");

      // [THEN] "Item Ledger Entry Type Filter" is "Assembly Output"
      AnalysisTypes."Item Ledger Entry Type Filter".ASSERTEQUALS(AssemblyOutpuTxt);
      AnalysisTypes.CLOSE;
    END;

    [Test]
    PROCEDURE CheckValueEntryTypeFilterNumeric@8();
    VAR
      ItemStatisticsBuffer@1002 : Record 5821;
      AnalysisType@1000 : Record 7113;
      AnalysisTypes@1001 : TestPage 7110;
    BEGIN
      // [FEATURE] [Analysis Types]
      // [SCENARIO 363540] Value Entry Type Filter field on Analysis Type Page stores a text option value if was set in numeric form

      // [GIVEN] Analysis Type Page where "Item Ledger Entry Type Filter" is blank
      AnalysisTypes.OPENNEW;
      AnalysisTypes.Code.SETVALUE(LibraryUtility.GenerateGUID);
      AnalysisTypes."Value Type".SETVALUE(AnalysisType."Value Type"::"Cost Amount");

      // [WHEN] Set "Value Entry Type Filter" to '0' (numeric value for "Direct Cost")
      AnalysisTypes."Value Entry Type Filter".SETVALUE(ItemStatisticsBuffer."Entry Type Filter"::"Direct Cost");

      // [THEN] "Item Ledger Entry Type Filter" is "Direct Cost"
      AnalysisTypes."Value Entry Type Filter".ASSERTEQUALS(DirectCostTxt);
      AnalysisTypes.CLOSE;
    END;

    LOCAL PROCEDURE Initialize@4();
    BEGIN
      CLEAR(AnalysisColumnTemplateName);
      CLEAR(AnalysisLineTemplateName);
      CLEAR(NewRowNo);
    END;

    LOCAL PROCEDURE CreateAnalysisLine@17(AnalysisLineTemplateName@1000 : Code[10]);
    VAR
      AnalysisLine@1002 : Record 7114;
      InsertAnalysisLine@1003 : Codeunit 7111;
      RecRef@1001 : RecordRef;
    BEGIN
      AnalysisLine.VALIDATE("Analysis Area",AnalysisLine."Analysis Area"::Sales);
      AnalysisLine.VALIDATE("Analysis Line Template Name",AnalysisLineTemplateName);
      RecRef.GETTABLE(AnalysisLine);
      AnalysisLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,AnalysisLine.FIELDNO("Line No.")));
      AnalysisLine.VALIDATE(Type,AnalysisLine.Type::Item);
      InsertAnalysisLine.InsertItems(AnalysisLine);
    END;

    LOCAL PROCEDURE RunRenumberAnalysisLines@18(AnalysisLineTemplateName@1002 : Code[20]);
    VAR
      AnalysisLine@1001 : Record 7114;
      RenumberAnalysisLines@1000 : Report 7110;
    BEGIN
      COMMIT; // COMMIT is required for running Batch report.
      CLEAR(RenumberAnalysisLines);
      AnalysisLine.SETRANGE("Analysis Line Template Name",AnalysisLineTemplateName);
      RenumberAnalysisLines.Init(AnalysisLine);
      RenumberAnalysisLines.RUN;
    END;

    LOCAL PROCEDURE VerifyRowNoInAnalysisLines@20(AnalysisLineTemplateName@1000 : Code[20]);
    VAR
      AnalysisLine@1001 : Record 7114;
    BEGIN
      // Verify that the Row Reference Number gets updated.
      AnalysisLine.SETRANGE("Analysis Line Template Name",AnalysisLineTemplateName);
      AnalysisLine.FINDSET;
      AnalysisLine.TESTFIELD("Row Ref. No.",NewRowNo);
      AnalysisLine.NEXT;
      NewRowNo := INCSTR(NewRowNo);
      AnalysisLine.TESTFIELD("Row Ref. No.",NewRowNo);
      AnalysisLine.NEXT;
      NewRowNo := INCSTR(NewRowNo);
      AnalysisLine.TESTFIELD("Row Ref. No.",NewRowNo);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@21(Message@1000 : Text[1024]);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE RenumberAnalysisLinesHandler@34(VAR RenumberAnalysisLines@1000 : TestRequestPage 7110);
    BEGIN
      RenumberAnalysisLines.StartRowRefNo.SETVALUE(NewRowNo);
      RenumberAnalysisLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SalesAnalysisLineHandler@40(VAR SalesAnalysisLines@1000 : TestPage 7120);
    BEGIN
      SalesAnalysisLines.CurrentAnalysisLineTempl.ASSERTEQUALS(AnalysisLineTemplateName);
      SalesAnalysisLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseAnalysisLineHandler@39(VAR PurchaseAnalysisLines@1000 : TestPage 7121);
    BEGIN
      PurchaseAnalysisLines.CurrentAnalysisLineTempl.ASSERTEQUALS(AnalysisLineTemplateName);
      PurchaseAnalysisLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE InventoryAnalysisLineHandler@38(VAR InventoryAnalysisLines@1000 : TestPage 7115);
    BEGIN
      InventoryAnalysisLines.CurrentAnalysisLineTempl.ASSERTEQUALS(AnalysisLineTemplateName);
      InventoryAnalysisLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE AnalysisColumnHandler@23(VAR AnalysisColumns@1000 : TestPage 7114);
    BEGIN
      AnalysisColumns.CurrentColumnName.ASSERTEQUALS(AnalysisColumnTemplateName);
      AnalysisColumns.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemListPageHandler@1(VAR ItemList@1000 : TestPage 31);
    BEGIN
      ItemList.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Analysis] [SCM]
      Test Analysis Lines:
      1. Check that Analysis Lines can be renumbered.
      2. Test to validate Name on Analysis Lines page invoked by Sales Analysis Line Templates.
      3. Test to validate Name on Analysis Lines page invoked by Purchase Analysis Line Templates.
      4. Test to validate Name on Analysis Lines page invoked by Inventory Analysis Line Templates.
      5. Test to validate Name on Analysis Columns page invoked by Sales Analysis Column Templates.
      6. Test to validate Name on Analysis Columns page invoked by Purchase Analysis Column Templates.
      7. Test to validate Name on Analysis Columns page invoked by Inventory Analysis Column Templates.

        TFS_WI: 268603
        Covers Test Case:
        ------------------------------------------------------------
        Test Function Name                                   TFS ID
        ------------------------------------------------------------
        RenumberAnalysisLines                                129116

        TFS_WI: 268593
        Covers Test Case:
        ------------------------------------------------------------
        Test Function Name                                   TFS ID
        ------------------------------------------------------------
        SalesAnalysisLineTemplate                            129118
        PurchaseAnalysisLineTemplate                         129119
        InventoryAnalysisLineTemplate                        129120

        TFS_WI: 268598
        Covers Test Case:
        ------------------------------------------------------------
        Test Function Name                                   TFS ID
        ------------------------------------------------------------
        SalesAnalysisColumnTemplate                          129121
        PurchaseAnalysisColumnTemplate                       129122
        InventoryAnalysisColumnTemplate                      129133
    }
    END.
  }
}

