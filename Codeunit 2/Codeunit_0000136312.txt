OBJECT Codeunit 136312 Job Reservation
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1014 : Codeunit 130000;
      LibraryJob@1013 : Codeunit 131920;
      LibraryInventory@1011 : Codeunit 132201;
      LibraryPurchase@1007 : Codeunit 130512;
      LibrarySales@1001 : Codeunit 130509;
      LibraryUtility@1000 : Codeunit 131000;
      LibraryWarehouse@1002 : Codeunit 132204;
      LibraryPlanning@1019 : Codeunit 132203;
      LibraryRandom@1130 : Codeunit 130440;
      LibraryVariableStorage@1020 : Codeunit 131004;
      IsInitialized@1005 : Boolean;
      ReservationError@1006 : TextConst '@@@="%1 Field Caption must not be changed when a quantity is reserved in %2 Table Caption%3 Field Caption=''%4'',%5 Field Caption=''%6'',%7 Field Caption =''%8''.";ENU="%1 must not be changed when a quantity is reserved in %2 %3=''%4'',%5=''%6'',%7=''%8''."';
      PlanningLinesReservationErrorForReserve@1004 : TextConst '@@@=%1 Field Caption %2 Table Caption %3 Field Caption%4 value, %5 Table Caption %6 value %7 Field Caption %8 value.%9 value.;ENU="%1 must be equal to ''0''  in %2: %3=%4, %5=%6, %7=%8. Current value is ''%9''."';
      PlanningDateError@1016 : TextConst 'ENU=The change leads to a date conflict with existing reservations.';
      ExpectedDateError@1015 : TextConst 'ENU="Validation error for Field: Expected Receipt Date,  Message = ''The change leads to a date conflict with existing reservations."';
      RequisitionLineError@1003 : TextConst 'ENU=You cannot reserve this entry because it is not a true demand or supply.';
      OriginalQuantity@1008 : Decimal;
      DescriptionEmptyErr@1022 : TextConst 'ENU=Description 2 should be empty.';
      DescriptionItemRefErr@1023 : TextConst 'ENU=Description in Requisition Line should be same as in Item Cross Reference';
      DescriptionErr@1012 : TextConst 'ENU=Description should be %1 which from Item Cross Reference card.';
      LocationCodeErr@1017 : TextConst 'ENU=Location Code should be %1 which from Vendor card.';
      NotResetErr@1018 : TextConst 'ENU=The field should be reset when Vendor No. is cleared.';
      VendorNoIsNotMatchErr@1009 : TextConst 'ENU=Vendor No. is not match.';
      VendorItemNoErr@1010 : TextConst 'ENU=Vendor Item No. should be %1';
      NotCreateReservationEntryErr@1021 : TextConst 'ENU=The Reservation Entry should not be created.';

    [Test]
    PROCEDURE AssignResourceLocationName@31();
    VAR
      Location@1000 : Record 14;
      ResourceLocation@1001 : Record 5952;
    BEGIN
      // Verify Location Name assigning from Location.Name

      // Setup.
      Initialize;
      LibraryWarehouse.CreateLocation(Location);
      Location.VALIDATE(Name,PADSTR(Location.Name,MAXSTRLEN(Location.Name),'.'));
      Location.MODIFY(TRUE);

      // Exercise.
      ResourceLocation.INIT;
      ResourceLocation."Location Code" := Location.Code;
      // Flow field calculation does not check for overflow, thus assign value explicitly
      ResourceLocation."Location Name" := Location.Name;
      ResourceLocation.INSERT(TRUE);

      // Verify.
      Assert.AreEqual(Location.Name,ResourceLocation."Location Name",ResourceLocation.FIELDCAPTION("Location Name"));
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE ChangePurchaseLineItemAfterReserve@16();
    VAR
      Item@1004 : Record 27;
      JobPlanningLine@1002 : Record 1003;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify after Reserve Purchase Order, not possible to modify Item on Purchase Line.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseLine);
      CreateJobAndPlanningLine(JobPlanningLine,PurchaseLine."No.");
      PurchaseLine.ShowReservation;
      LibraryInventory.CreateItem(Item);

      // Exercise.
      ASSERTERROR PurchaseLine.VALIDATE("No.",Item."No.");

      // Verify.
      VerifyPurchaseLineError(PurchaseLine,Item.FIELDCAPTION("No."));
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE ChangePurchaseLineVariantAfterReserve@68();
    VAR
      ItemVariant@1005 : Record 5401;
      JobPlanningLine@1002 : Record 1003;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify after Reserve Purchase Order, not possible to modify Vairant Code on Purchase Line.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseLine);
      CreateJobAndPlanningLine(JobPlanningLine,PurchaseLine."No.");
      PurchaseLine.ShowReservation;

      // Exercise.
      ASSERTERROR PurchaseLine.VALIDATE("Variant Code",LibraryInventory.CreateItemVariant(ItemVariant,PurchaseLine."No."));

      // Verify.
      VerifyPurchaseLineError(PurchaseLine,PurchaseLine.FIELDCAPTION("Variant Code"));
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE ChangePurchaseLineLocationAfterReserve@73();
    VAR
      JobPlanningLine@1002 : Record 1003;
      Location@1004 : Record 14;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify after Reserve Purchase Order, not possible to modify Location Code on Purchase Line.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseLine);
      CreateJobAndPlanningLine(JobPlanningLine,PurchaseLine."No.");
      PurchaseLine.ShowReservation;

      // Exercise.
      ASSERTERROR PurchaseLine.VALIDATE("Location Code",LibraryWarehouse.CreateLocation(Location));

      // Verify.
      VerifyPurchaseLineError(PurchaseLine,PurchaseLine.FIELDCAPTION("Location Code"));
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE ChangePurchaseLineExpectedReceiptDateAfterReserve@81();
    VAR
      JobPlanningLine@1002 : Record 1003;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify after Reserve Purchase Order, not possible to modify Expected Receipt Date on Purchase Line.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseLine);
      CreateJobAndPlanningLine(JobPlanningLine,PurchaseLine."No.");
      PurchaseLine.ShowReservation;

      // Exercise.
      ASSERTERROR OpenPurchaseOrderToChangeExpectedReceiptDate(
          PurchaseLine."Document No.",LibraryRandom.RandDateFrom(JobPlanningLine."Planning Date",5));

      // Verify.
      Assert.ExpectedError(ExpectedDateError);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE ChangeJobPlanningLinesItemAfterReserve@103();
    VAR
      Item@1004 : Record 27;
      JobPlanningLine@1002 : Record 1003;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify after Reserve Purchase Order, not possible to modify Item on Job Planning Line.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseLine);
      CreateJobAndPlanningLine(JobPlanningLine,PurchaseLine."No.");
      PurchaseLine.ShowReservation;
      LibraryInventory.CreateItem(Item);

      // Exercise.
      ASSERTERROR JobPlanningLine.VALIDATE("No.",Item."No.");

      // Verify.
      VerifyJobPlanningLineError(JobPlanningLine,JobPlanningLine.FIELDCAPTION("No."));
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE ChangeJobPlanningLinesVariantAfterReserve@114();
    VAR
      ItemVariant@1005 : Record 5401;
      JobPlanningLine@1002 : Record 1003;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify after Reserve Purchase Order, not possible to modify Variant Code on Job Planning Line.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseLine);
      CreateJobAndPlanningLine(JobPlanningLine,PurchaseLine."No.");
      PurchaseLine.ShowReservation;

      // Exercise.
      ASSERTERROR JobPlanningLine.VALIDATE("Variant Code",LibraryInventory.CreateItemVariant(ItemVariant,PurchaseLine."No."));

      // Verify.
      VerifyJobPlanningLineError(JobPlanningLine,JobPlanningLine.FIELDCAPTION("Variant Code"));
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE ChangeJobPlanningLinesLocationAfterReserve@116();
    VAR
      JobPlanningLine@1002 : Record 1003;
      Location@1004 : Record 14;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify after Reserve Purchase Order, not possible to modify Location Code on Job Planning Line.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseLine);
      CreateJobAndPlanningLine(JobPlanningLine,PurchaseLine."No.");
      PurchaseLine.ShowReservation;

      // Exercise.
      ASSERTERROR JobPlanningLine.VALIDATE("Location Code",LibraryWarehouse.CreateLocation(Location));

      // Verify.
      VerifyJobPlanningLineError(JobPlanningLine,JobPlanningLine.FIELDCAPTION("Location Code"));
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE ChangeJobPlanningLinesPlanningDateAfterReserve@41();
    VAR
      JobPlanningLine@1002 : Record 1003;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify after Reserve Purchase Order, not possible to modify Planning Date on Job Planning Line.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseLine);
      CreateJobAndPlanningLine(JobPlanningLine,PurchaseLine."No.");
      PurchaseLine.ShowReservation;

      // Exercise.
      ASSERTERROR JobPlanningLine.VALIDATE(
          "Planning Date",CALCDATE('<' + FORMAT(-LibraryRandom.RandInt(5)) + 'Y>',JobPlanningLine."Planning Date"));

      // Verify.
      Assert.ExpectedError(PlanningDateError);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE ChangeJobPlanningLinesUsageLinkAfterReserve@120();
    VAR
      JobPlanningLine@1002 : Record 1003;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify after Reserve Purchase Order, not possible to modify Usage Link on Job Planning Line.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseLine);
      CreateJobAndPlanningLine(JobPlanningLine,PurchaseLine."No.");
      PurchaseLine.ShowReservation;

      // Exercise.
      ASSERTERROR JobPlanningLine.VALIDATE("Usage Link",FALSE);

      // Verify.
      VerifyJobPlanningLineError(JobPlanningLine,JobPlanningLine.FIELDCAPTION("Usage Link"));
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE ChangeJobPlanningLinesReserveAfterReserve@123();
    VAR
      JobPlanningLine@1002 : Record 1003;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify after Reserve Purchase Order, not possible to modify Reserve on Job Planning Line.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseLine);
      CreateJobAndPlanningLine(JobPlanningLine,PurchaseLine."No.");
      PurchaseLine.ShowReservation;
      JobPlanningLine.CALCFIELDS("Reserved Qty. (Base)");

      // Exercise.
      ASSERTERROR JobPlanningLine.VALIDATE(Reserve,JobPlanningLine.Reserve::Never);

      // Verify.
      Assert.ExpectedError(
        STRSUBSTNO(
          PlanningLinesReservationErrorForReserve,JobPlanningLine.FIELDCAPTION("Reserved Qty. (Base)"),JobPlanningLine.TABLECAPTION,
          JobPlanningLine.FIELDCAPTION("Job No."),JobPlanningLine."Job No.",
          JobPlanningLine.FIELDCAPTION("Job Task No."),JobPlanningLine."Job Task No.",JobPlanningLine.FIELDCAPTION("Line No."),
          JobPlanningLine."Line No.",JobPlanningLine."Reserved Qty. (Base)"));
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE ModifyFactorsFromPurchaseOrderToJobOrder@8();
    VAR
      JobPlanningLine@1002 : Record 1003;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify Reserved Quantity on Purchase Line and Job Planning Line after modifying the various field on Purchase and Job Planning Line after Reservation.

      // Setup: Create and modify Purchase Order, create Job Planning Line, again modify Purchase Line after Reservation.
      Initialize;
      CreatePurchaseDocument(PurchaseLine);
      ModifyPurchaseLineReceiptDate(PurchaseLine,LibraryRandom.RandDate(5));  // Using Random for calculating Expected Receipt Date.
      CreateJobAndPlanningLine(JobPlanningLine,PurchaseLine."No.");
      PurchaseLine.ShowReservation;
      PurchaseLine.VALIDATE(Quantity,PurchaseLine.Quantity - LibraryUtility.GenerateRandomFraction);  // Using Random to modify Quantity.
      ModifyPurchaseLineReceiptDate(PurchaseLine,JobPlanningLine."Planning Date");

      // Exercise: Modify various feilds on Demand. Using Random to modify Quantity and Planning Date.
      UpdateJobPlanningLine(
        JobPlanningLine,JobPlanningLine.Quantity - LibraryUtility.GenerateRandomFraction,
        LibraryRandom.RandDateFrom(JobPlanningLine."Planning Date",5),JobPlanningLine.Reserve::Always,'');

      // Verify: Verify Purchase Line and Job Planning Line for Reserved Quantity.
      PurchaseLine.CALCFIELDS("Reserved Quantity");
      PurchaseLine.TESTFIELD("Reserved Quantity",PurchaseLine.Quantity);
      VerifyJobPlanningLine(JobPlanningLine,PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler)]
    PROCEDURE ModifyFactorsFromJobOrderToItemLedgerEntry@6();
    VAR
      JobPlanningLine@1002 : Record 1003;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify Reserved Quantity on Job Planning Line after modifying the various field on Job Planning Line after Reservation.

      // Setup: Create and receive Purchase Order and create Job Planning Lines. Reserve Job Planning Line against Item Ledger Entry.
      Initialize;
      CreateAndReceivePurchaseOrder(PurchaseLine,'');  // Pass blank Location Code.
      CreateJobAndPlanningLine(JobPlanningLine,PurchaseLine."No.");
      JobPlanningLine.ShowReservation;

      // Exercise: Modify various feilds on Demand.
      UpdateJobPlanningLine(
        JobPlanningLine,PurchaseLine.Quantity - LibraryUtility.GenerateRandomFraction,LibraryRandom.RandDate(-5),
        JobPlanningLine.Reserve,'');  // Using Random to modify Quantity and Planning Date.

      // Verify: Verify Job Planning Line for Reserved Quantity.
      VerifyJobPlanningLine(JobPlanningLine,JobPlanningLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler)]
    PROCEDURE ReservationFromRequisitionLine@10();
    VAR
      JobPlanningLine@1004 : Record 1003;
      RequisitionLine@1003 : Record 246;
    BEGIN
      // Verify that Reservation from Requisition Line to Job Order is not allowed.

      // Setup.
      Initialize;
      CreateRequisitionLine(RequisitionLine);
      CreateJobAndPlanningLine(JobPlanningLine,RequisitionLine."No.");

      // Exercise.
      ASSERTERROR RequisitionLine.ShowReservation;

      // Verify.
      Assert.ExpectedError(RequisitionLineError);
    END;

    [Test]
    [HandlerFunctions(TransferOrderStringMenuHandler,ReserveFromCurrentLineHandler)]
    PROCEDURE ModifyFactorsFromTransferOrderReceiptToJobOrder@15();
    VAR
      JobPlanningLine@1002 : Record 1003;
      Location@1005 : Record 14;
      PurchaseLine@1001 : Record 39;
      TransferLine@1004 : Record 5741;
    BEGIN
      // Verify Reserved Quantity on Job Planning Line after modifying the various field on Transfer Order and Job Planning Line after Reservation.

      // Setup: Create Purchase Order and receive it, Create Transfer Order and Job Planning Line.
      Initialize;
      CreateAndReceivePurchaseOrder(PurchaseLine,LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location));
      CreateTransferOrder(TransferLine,PurchaseLine);
      CreateJobAndPlanningLine(JobPlanningLine,PurchaseLine."No.");
      UpdateJobPlanningLine(
        JobPlanningLine,NewValue(TransferLine.Quantity - 1,TransferLine.Quantity),JobPlanningLine."Planning Date",
        JobPlanningLine.Reserve,TransferLine."Transfer-to Code");  // Using Random to modify Quantity.

      // Reserve Transfer Order against Job Planning Line and modify Transfer Line with Random value.
      TransferLine.ShowReservation;
      TransferLine.VALIDATE(Quantity,NewValue(JobPlanningLine.Quantity,TransferLine.Quantity));
      TransferLine.VALIDATE("Receipt Date",JobPlanningLine."Planning Date");
      TransferLine.MODIFY(TRUE);

      // Exercise.
      UpdateJobPlanningLine(
        JobPlanningLine,NewValue(JobPlanningLine.Quantity - 1,JobPlanningLine.Quantity),
        LibraryRandom.RandDateFrom(JobPlanningLine."Planning Date",5),JobPlanningLine.Reserve,
        JobPlanningLine."Location Code");  // Using Random to modify Quantity and Planning Date.

      // Verify: Verify Job Planning Line for Reserved Quantity.
      VerifyJobPlanningLine(JobPlanningLine,JobPlanningLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler)]
    PROCEDURE ReservationEntryWhenReserveIsOptional@19();
    VAR
      JobPlanningLine@1001 : Record 1003;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify Reservation entry created by a Purchase Order and Job Planning Line while Reserve type is Optional.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseLine);
      CreateJobAndPlanningLine(JobPlanningLine,PurchaseLine."No.");

      // Exercise.
      PurchaseLine.ShowReservation;

      // Verify.
      VerifyReservationEntry(JobPlanningLine,PurchaseLine.Quantity);
    END;

    LOCAL PROCEDURE CreateAndReceivePurchaseOrder@27(VAR PurchaseLine@1000 : Record 39;LocationCode@1003 : Code[10]);
    VAR
      PurchaseHeader@1002 : Record 38;
    BEGIN
      CreatePurchaseDocument(PurchaseLine);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    [Test]
    PROCEDURE CreateRequisitionWorksheetlineAndUpdateVendorNo@115();
    VAR
      Vendor@1005 : Record 23;
      Item@1003 : Record 27;
      ItemVariant@1000 : Record 5401;
      ItemCrossReference@1007 : Record 5717;
      RequisitionLine@1004 : Record 246;
      ReqWorksheet@1011 : TestPage 291;
      OriginalDescription@1008 : Text[50];
      OriginalLocationCode@1009 : Code[20];
    BEGIN
      // [FEATURE] [Requisition Worksheet]
      // [SCENARIO] Description and Location Code are updated when updating "Vendor No." in Requisition Worksheet line.

      // Fill the Item No. in Requisition Line - Description updated according to "Item" card;
      // Fill the Item No. and Variant Code in Requisition Line - Description updated according to "Item Variants" card;
      // Fill the Item No. and Variant Code and Vendor No. in Requisition Line - Description updated according to "Item Cross Reference" card;

      // [GIVEN] Create a vendor with Location, create a item with Item Variant and Item Cross Reference.
      CreateVendorWithLocation(Vendor);
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      CreateItemCrossReference(
        ItemCrossReference,Item."No.",ItemVariant.Code,ItemCrossReference."Cross-Reference Type"::Vendor,Vendor."No.");

      // [GIVEN] Create a line in Requisition Worksheet
      CreateRequisitionWorksheetline(RequisitionLine,Item."No.",ItemVariant.Code);
      OpenRequisitionWorksheetPage(ReqWorksheet,RequisitionLine."Journal Batch Name");
      OriginalDescription := ReqWorksheet.Description.VALUE;
      OriginalLocationCode := ReqWorksheet."Location Code".VALUE;

      // [WHEN] Change Vendor No..
      ReqWorksheet."Vendor No.".SETVALUE(Vendor."No.");
      // [THEN] Description and Location Code are updated.
      Assert.AreEqual(
        ItemCrossReference.Description,ReqWorksheet.Description.VALUE,STRSUBSTNO(DescriptionErr,ItemCrossReference.Description));
      Assert.AreEqual(
        Vendor."Location Code",ReqWorksheet."Location Code".VALUE,STRSUBSTNO(LocationCodeErr,Vendor."Location Code"));

      // [WHEN] Clear "Vendor No.".
      ReqWorksheet."Vendor No.".SETVALUE('');
      // [THEN] Description and Location Code are reset.
      Assert.AreEqual(OriginalDescription,ReqWorksheet.Description.VALUE,NotResetErr);
      Assert.AreEqual(OriginalLocationCode,ReqWorksheet."Location Code".VALUE,NotResetErr);

      // [WHEN] Reset Vendor No., remove the Location Code.
      ReqWorksheet."Vendor No.".SETVALUE(Vendor."No.");
      ReqWorksheet."Location Code".SETVALUE('');
      // [THEN] Vendor No. is not changed. Description is copied from the item cross reference.
      Assert.AreEqual(Vendor."No.",ReqWorksheet."Vendor No.".VALUE,VendorNoIsNotMatchErr);
      Assert.AreEqual(ItemCrossReference.Description,ReqWorksheet.Description.VALUE,NotResetErr);
    END;

    [Test]
    PROCEDURE CreateRequisitionWorksheetlineAndValidateVendorNo@34();
    VAR
      Vendor@1007 : Record 23;
      Item@1006 : Record 27;
      ItemCrossReference@1000 : Record 5717;
      RequisitionLine@1003 : Record 246;
      ReqWorksheet@1001 : TestPage 291;
    BEGIN
      // [FEATURE] [Requisition Worksheet] [Item Cross Reference]
      // [SCENARIO 378246] "Description 2" in Requisition Line should be empty when vendor with Item Cross Reference is selected in "Vendor No."

      // [GIVEN] Create Item with filled "Description 2" field
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Description 2",LibraryUtility.GenerateGUID);
      Item.MODIFY(TRUE);

      // [GIVEN] Create Vendor
      LibraryPurchase.CreateVendor(Vendor);

      // [GIVEN] Create Requisition Line with filled "Description 2" field
      CreateRequisitionWorksheetline(RequisitionLine,Item."No.",'');
      RequisitionLine.VALIDATE("Description 2",LibraryUtility.GenerateGUID);
      RequisitionLine.MODIFY(TRUE);

      // [GIVEN] Generate Item Cross Reference with Description = "X"
      LibraryInventory.CreateItemCrossReference(
        ItemCrossReference,Item."No.",ItemCrossReference."Cross-Reference Type"::Vendor,Vendor."No.");
      ItemCrossReference.VALIDATE(Description,LibraryUtility.GenerateGUID);
      ItemCrossReference.MODIFY(TRUE);

      // [GIVEN] Open Requisition Worksheet Page with Requisition Line inside
      OpenRequisitionWorksheetPage(ReqWorksheet,RequisitionLine."Journal Batch Name");

      // [WHEN] Set "Vendor No." in Requisition Line
      ReqWorksheet."Vendor No.".SETVALUE(Vendor."No.");

      RequisitionLine.FIND;

      // [THEN] "Description" in Requisition Line should be same as in ItemCrossReference
      Assert.AreEqual(ItemCrossReference.Description,RequisitionLine.Description,DescriptionItemRefErr);

      // [THEN] "Description 2" in Requisition Line should be empty
      Assert.AreEqual('',RequisitionLine."Description 2",DescriptionEmptyErr);
    END;

    [Test]
    PROCEDURE LocationCodeNotUpdateWhenUpdateVendorNoForReservedEntry@23();
    VAR
      Vendor@1001 : Record 23;
      Vendor2@1007 : Record 23;
      Item@1000 : Record 27;
      SalesHeader@1006 : Record 36;
      RequisitionWkshName@1002 : Record 245;
      ReqWorksheet@1003 : TestPage 291;
    BEGIN
      // Verify Location Code is not updated when updating Vendor No. in Requisition Worksheet line which contain Reservation Entry.

      // Setup: Create 2 vendor with Location. Create a item.
      CreateVendorWithLocation(Vendor);
      CreateVendorWithLocation(Vendor2);
      CreateItem(Item,Vendor."No.",Item."Reordering Policy"::Order);

      // Create a demand and Calculate Plan for Requisition Worksheet.
      CreateSalesOrder(
        SalesHeader,WORKDATE + LibraryRandom.RandInt(5),Vendor."Location Code",Item."No.",LibraryRandom.RandDec(5,2));
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item,WORKDATE - 30,WORKDATE + 30);

      // Exercise: Change Vendor No..
      // Verify: Location Code is not updated.
      OpenRequisitionWorksheetPage(ReqWorksheet,RequisitionWkshName.Name);
      ReqWorksheet."Vendor No.".SETVALUE(Vendor2."No.");
      Assert.AreEqual(
        Vendor."Location Code",ReqWorksheet."Location Code".VALUE,STRSUBSTNO(LocationCodeErr,Vendor."Location Code"));

      // Exercise: Clear Vendor No..
      // Verify: Location Code is not updated.
      ReqWorksheet."Vendor No.".SETVALUE('');
      Assert.AreEqual(
        Vendor."Location Code",ReqWorksheet."Location Code".VALUE,STRSUBSTNO(LocationCodeErr,Vendor."Location Code"));
    END;

    [Test]
    PROCEDURE CreateRequisitionWorksheetlineAndVerifyVendorItemNo@119();
    VAR
      Vendor@1005 : Record 23;
      Item@1003 : Record 27;
      ItemVariant@1000 : Record 5401;
      ItemCrossReference1@1007 : Record 5717;
      ItemCrossReference2@1001 : Record 5717;
      RequisitionLine@1004 : Record 246;
      ReqWorksheet@1011 : TestPage 291;
    BEGIN
      // Verify Vendor Item No. is correct when creating Requisition Worksheet line manually.

      // Setup: Create a item with Variant and Cross Reference.
      CreateItemWithVariantAndCrossReference(Vendor,Item,ItemVariant,ItemCrossReference1,ItemCrossReference2);

      // Exercise: Create a line in Requisition Worksheet
      CreateRequisitionWorksheetline(RequisitionLine,Item."No.",ItemVariant.Code);

      // Verify: Vendor Item No. is displayed correctly with Variant Code
      OpenRequisitionWorksheetPage(ReqWorksheet,RequisitionLine."Journal Batch Name");
      Assert.AreEqual(
        ItemCrossReference2."Cross-Reference No.",ReqWorksheet."Vendor Item No.".VALUE,
        STRSUBSTNO(VendorItemNoErr,ItemCrossReference2."Cross-Reference No."));

      // Exercise and Verify: Vendor Item No. is displayed correctly when clear and reset the Vendor No..
      ResetAndVerifyVendorItemNo(ReqWorksheet,ItemCrossReference2."Cross-Reference No.",Vendor."No.");
    END;

    [Test]
    PROCEDURE CalculatePlanInRequisitionWorksheetAndVerifyVendorItemNo@150();
    VAR
      Vendor@1001 : Record 23;
      Item@1000 : Record 27;
      ItemVariant@1005 : Record 5401;
      ItemCrossReference1@1004 : Record 5717;
      ItemCrossReference2@1008 : Record 5717;
      SalesHeader@1002 : Record 36;
      RequisitionWkshName@1006 : Record 245;
      ReqWorksheet@1003 : TestPage 291;
    BEGIN
      // Verify Vendor Item No. is correct when calculate plan in Requisition Worksheet.

      // Setup: Create a item with Variant and Cross Reference.
      CreateItemWithVariantAndCrossReference(Vendor,Item,ItemVariant,ItemCrossReference1,ItemCrossReference2);

      // Create 2 demands.
      CreateSalesOrderWithVariantCode(
        SalesHeader,WORKDATE + LibraryRandom.RandInt(5),
        Vendor."Location Code",Item."No.",LibraryRandom.RandDec(5,2),'');
      CLEAR(SalesHeader);
      CreateSalesOrderWithVariantCode(
        SalesHeader,WORKDATE + LibraryRandom.RandInt(5),
        Vendor."Location Code",Item."No.",LibraryRandom.RandDec(5,2),ItemVariant.Code);

      // Exercise: Calculate Plan for Requisition Worksheet.
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item,WORKDATE - 30,WORKDATE + 30);

      // Verify: Vendor Item No. is displayed correctly with Variant Code
      OpenRequisitionWorksheetPage(ReqWorksheet,RequisitionWkshName.Name);
      Assert.AreEqual(
        ItemCrossReference1."Cross-Reference No.",ReqWorksheet."Vendor Item No.".VALUE,
        STRSUBSTNO(VendorItemNoErr,ItemCrossReference1."Cross-Reference No."));

      ReqWorksheet.NEXT;
      Assert.AreEqual(
        ItemCrossReference2."Cross-Reference No.",ReqWorksheet."Vendor Item No.".VALUE,
        STRSUBSTNO(VendorItemNoErr,ItemCrossReference2."Cross-Reference No."));

      // Exercise and Verify: Vendor Item No. is displayed correctly when clear and reset the Vendor No..
      ResetAndVerifyVendorItemNo(ReqWorksheet,ItemCrossReference2."Cross-Reference No.",Vendor."No.");
    END;

    [Test]
    PROCEDURE CreateReqWorksheetlineAndVerifyDefaultLocationCodeFromVendorCard@30();
    VAR
      Vendor@1005 : Record 23;
      Vendor2@1001 : Record 23;
      Item@1003 : Record 27;
      RequisitionLine@1004 : Record 246;
      ReqWorksheet@1011 : TestPage 291;
    BEGIN
      // Verify default Location Code from Vendor Card is filled when creating Requisition Worksheet line manually.

      // Setup: Create a vendor with Location, create a item with Vendor No..
      CreateVendorWithLocation(Vendor);
      CreateItem(Item,Vendor."No.",Item."Reordering Policy"::Order);

      // Exercise: Set the Item No. in Requisition Worksheet line
      CreateRequisitionWorksheetline(RequisitionLine,Item."No.",'');
      OpenRequisitionWorksheetPage(ReqWorksheet,RequisitionLine."Journal Batch Name");
      ReqWorksheet."No.".SETVALUE(Item."No.");

      // Verify: Vendor No. and Location Code from Vendor Card is filled in Req. Worksheet line.
      Assert.AreEqual(Vendor."No.",ReqWorksheet."Vendor No.".VALUE,VendorNoIsNotMatchErr);
      Assert.AreEqual(
        Vendor."Location Code",ReqWorksheet."Location Code".VALUE,STRSUBSTNO(LocationCodeErr,Vendor."Location Code"));

      // Exercise: Clear Vendor No..
      // Verify: Location Code are cleared
      ReqWorksheet."Vendor No.".SETVALUE('');
      Assert.AreEqual('',ReqWorksheet."Location Code".VALUE,NotResetErr);

      // Exercise: Create a new vendor, and change Vendor No. to the new one
      // Verify: Location Code is updated according to the new vendor.
      CreateVendorWithLocation(Vendor2);
      ReqWorksheet."Vendor No.".SETVALUE(Vendor2."No.");
      Assert.AreEqual(
        Vendor2."Location Code",ReqWorksheet."Location Code".VALUE,STRSUBSTNO(LocationCodeErr,Vendor."Location Code"));
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,MessageHandler)]
    PROCEDURE ValidateItemNoOnReservedPurchaseLine@33();
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify no Surplus Reservation Entry is created after validating the same Item No. on reserved Purchase Line.

      // Setup: Create Purchase Order and Sales Order. Auto Reserve the Purchase Line to Sales Line.
      Initialize;
      AutoReservePurchaseLineToSalesLine(PurchaseLine);

      // Exercise: Validated the No. field on Purchase Line with the same Item No..
      PurchaseLine.VALIDATE("No.",PurchaseLine."No.");
      PurchaseLine.MODIFY(TRUE);

      // Verify: Verify no Surplus Reservation Entry is created.
      VerifyNoSurplusReservationEntry(PurchaseLine."No.");
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE DateConflictRaisedWhenPlannedDeliveryDateInJobPlLineReservedFromPurchOrderIsChanged@36();
    VAR
      JobPlanningLine@1002 : Record 1003;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [FEATURE] [Date conflict]
      // [SCENARIO 381252] The date conflict is raised when "Planned Delivery Date" in Job Planning Line reserved from Purchase Order is changed

      Initialize;

      // [GIVEN] Purchase Order with "Expected Receipt Date" = 10.01
      CreatePurchaseDocument(PurchaseLine);

      // [GIVEN] Job Planning Line with "Planning Date" and "Planned Delivery Date" equal 10.01 and reserved from Purchase Order
      CreateJobAndPlanningLine(JobPlanningLine,PurchaseLine."No.");
      PurchaseLine.ShowReservation;

      // [WHEN] Change "Planned Delivery Date" of Job Planning Line to 01.01
      ASSERTERROR
        JobPlanningLine.VALIDATE("Planned Delivery Date",LibraryRandom.RandDate(-5));

      // [THEN] Error message "The change leads to a date conflict with existing reservations" is raised
      Assert.ExpectedError(PlanningDateError);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE JobPlanningLineIsPlannedWhenFullQtyIsAutoReserved@38();
    VAR
      JobPlanningLine@1001 : Record 1003;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [SCENARIO 381257] The value of field "Planned" in Job Planning Line is TRUE when Job Planning Line auto-reserved from Purchase Order

      Initialize;

      // [GIVEN] Purchase Order with Item "X" and Quantity = 10
      CreatePurchaseDocument(PurchaseLine);

      // [GIVEN] Job Planning Line with Item "X" and Quantity = 10
      CreateJobAndPlanningLine(JobPlanningLine,PurchaseLine."No.");
      JobPlanningLine.VALIDATE(Quantity,PurchaseLine.Quantity);
      JobPlanningLine.MODIFY(TRUE);

      // [THEN] Auto-reserve Job Planning Line from Purchase Line
      JobPlanningLine.ShowReservation;

      // [THEN] Planned is TRUE in Job Planning Line
      JobPlanningLine.FIND;
      JobPlanningLine.TESTFIELD(Planned);
    END;

    [Test]
    [HandlerFunctions(ReserveFromCurrentLineHandler)]
    PROCEDURE JobPlanningLineIsPlannedWhenFullQtyIsReservedFromCurrPurchLine@52();
    VAR
      JobPlanningLine@1001 : Record 1003;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [SCENARIO 381257] The value of field "Planned" in Job Planning Line is TRUE when Job Planning Line reserved from current Purchase Line

      Initialize;

      // [GIVEN] Purchase Order with Item "X" and Quantity = 10
      CreatePurchaseDocument(PurchaseLine);

      // [GIVEN] Job Planning Line with Item "X" and Quantity = 10
      CreateJobAndPlanningLine(JobPlanningLine,PurchaseLine."No.");
      JobPlanningLine.VALIDATE(Quantity,PurchaseLine.Quantity);
      JobPlanningLine.MODIFY(TRUE);

      // [THEN] Reserve Job Planning Line from current Purchase Line
      JobPlanningLine.ShowReservation;

      // [THEN] Planned is TRUE in Job Planning Line
      JobPlanningLine.FIND;
      JobPlanningLine.TESTFIELD(Planned);
    END;

    [Test]
    [HandlerFunctions(ReserveOrCancelReservationPageHandler,ConfirmHandler)]
    PROCEDURE JobPlanningLineIsNotPlannedWhenReservationIsCanceled@39();
    VAR
      JobPlanningLine@1001 : Record 1003;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [SCENARIO 381257] The value of field "Planned" in Job Planning Line is FALSE when reservation of Job Planning Line is canceled

      Initialize;

      // [GIVEN] Purchase Order with Item "X" and Quantity = 10
      CreatePurchaseDocument(PurchaseLine);

      // [GIVEN] Job Planning Line with Item "X" and Quantity = 10 reserved from current Purchase Line
      CreateJobAndPlanningLine(JobPlanningLine,PurchaseLine."No.");
      JobPlanningLine.VALIDATE(Quantity,PurchaseLine.Quantity);
      JobPlanningLine.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(TRUE); // Set TRUE to reserve entry in ReserveOrCancelReservationPageHandler
      JobPlanningLine.ShowReservation;

      LibraryVariableStorage.Enqueue(FALSE); // Set FALSE to cancel reservation in ReserveOrCancelReservationPageHandler

      // [WHEN] Cancel Reservation from current Purchase Line
      JobPlanningLine.ShowReservation;

      // [THEN] Planned is FALSE in Job Planning Line
      JobPlanningLine.FIND;
      JobPlanningLine.TESTFIELD(Planned,FALSE);
    END;

    LOCAL PROCEDURE Initialize@2();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      OriginalQuantity := 0;
      LibraryVariableStorage.Clear;
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CalculatePlanForRequisitionWorksheet@91(VAR RequisitionWkshName@1001 : Record 245;Item@1005 : Record 27;StartDate@1000 : Date;EndDate@1004 : Date);
    VAR
      ReqWkshTemplate@1002 : Record 244;
    BEGIN
      SelectRequisitionTemplate(ReqWkshTemplate,ReqWkshTemplate.Type::"Req.");
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      LibraryPlanning.CalculatePlanForReqWksh(Item,ReqWkshTemplate.Name,RequisitionWkshName.Name,StartDate,EndDate);
    END;

    LOCAL PROCEDURE CreateVendorWithLocation@5(VAR Vendor@1000 : Record 23);
    VAR
      Location@1001 : Record 14;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Location Code",LibraryWarehouse.CreateLocation(Location));
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItem@29(VAR Item@1002 : Record 27;VendorNo@1001 : Code[20];ReorderingPolicy@1000 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Vendor No.",VendorNo);
      Item.VALIDATE("Reordering Policy",ReorderingPolicy);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemCrossReference@9(VAR ItemCrossReference@1009 : Record 5717;ItemNo@1008 : Code[20];ItemVariantNo@1000 : Code[10];CrossReferenceType@1007 : Option;CrossReferenceTypeNo@1006 : Code[30]);
    BEGIN
      WITH ItemCrossReference DO BEGIN
        INIT;
        VALIDATE("Item No.",ItemNo);
        VALIDATE("Variant Code",ItemVariantNo);
        VALIDATE("Cross-Reference Type",CrossReferenceType);
        VALIDATE("Cross-Reference Type No.",CrossReferenceTypeNo);
        VALIDATE(
          "Cross-Reference No.",
          LibraryUtility.GenerateRandomCode(FIELDNO("Cross-Reference No."),DATABASE::"Item Cross Reference"));
        VALIDATE(Description,CrossReferenceTypeNo);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateItemWithVariantAndCrossReference@151(VAR Vendor@1004 : Record 23;VAR Item@1003 : Record 27;VAR ItemVariant@1002 : Record 5401;VAR ItemCrossReference1@1001 : Record 5717;VAR ItemCrossReference2@1000 : Record 5717);
    BEGIN
      CreateVendorWithLocation(Vendor);
      CreateItem(Item,Vendor."No.",Item."Reordering Policy"::"Lot-for-Lot");

      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");

      CreateItemCrossReference(
        ItemCrossReference1,Item."No.",'',ItemCrossReference1."Cross-Reference Type"::Vendor,Vendor."No.");
      CreateItemCrossReference(
        ItemCrossReference2,Item."No.",ItemVariant.Code,ItemCrossReference2."Cross-Reference Type"::Vendor,Vendor."No.");
    END;

    LOCAL PROCEDURE CreateRequisitionWorksheetline@13(VAR RequisitionLine@1001 : Record 246;ItemNo@1005 : Code[20];ItemVariantCode@1006 : Code[10]);
    VAR
      RequisitionWkshName@1004 : Record 245;
      ReqWkshTemplate@1003 : Record 244;
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplate.Type::"Req.");
      ReqWkshTemplate.FINDFIRST;
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);

      WITH RequisitionLine DO BEGIN
        VALIDATE(Type,Type::Item);
        VALIDATE("No.",ItemNo);
        VALIDATE("Variant Code",ItemVariantCode);
        VALIDATE(Quantity,LibraryRandom.RandDec(100,2) + LibraryUtility.GenerateRandomFraction);  // Use Random for Quantity.
        VALIDATE("Due Date",WORKDATE);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateSalesOrder@24(VAR SalesHeader@1008 : Record 36;ShipmentDate@1000 : Date;LocationCode@1001 : Code[10];ItemNo@1003 : Code[20];Quantity@1002 : Decimal);
    VAR
      SalesLine@1006 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.VALIDATE("Shipment Date",ShipmentDate);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithVariantCode@153(VAR SalesHeader@1008 : Record 36;ShipmentDate@1000 : Date;LocationCode@1001 : Code[10];ItemNo@1003 : Code[20];Quantity@1002 : Decimal;VariantCode@1004 : Code[10]);
    VAR
      SalesLine@1006 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.VALIDATE("Shipment Date",ShipmentDate);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Variant Code",VariantCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@37(VAR PurchaseLine@1000 : Record 39);
    VAR
      Item@1004 : Record 27;
      PurchaseHeader@1001 : Record 38;
      Vendor@1002 : Record 23;
      LibraryPurchase@1003 : Codeunit 130512;
    BEGIN
      // Create Purchase Order with Random Quantity.
      LibraryPurchase.CreateVendor(Vendor);
      OriginalQuantity := LibraryRandom.RandInt(10) + LibraryUtility.GenerateRandomFraction;  // Assign in global variable.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItem(Item),OriginalQuantity);
    END;

    LOCAL PROCEDURE CreateJobAndPlanningLine@12(VAR JobPlanningLine@1000 : Record 1003;No@1001 : Code[20]);
    VAR
      JobTask@1002 : Record 1001;
    BEGIN
      CreateJobWithJobTask(JobTask);
      CreateJobPlanningLine(JobPlanningLine,JobPlanningLine."Line Type"::Schedule,JobTask,No);
    END;

    LOCAL PROCEDURE CreateJobPlanningLine@28(VAR JobPlanningLine@1001 : Record 1003;LineType@1002 : Option;JobTask@1000 : Record 1001;No@1004 : Code[20]);
    BEGIN
      // Use Random values for Quantity, Planning Date and Unit Cost because values are not important.
      LibraryJob.CreateJobPlanningLine(LineType,LibraryJob.ItemType,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("No.",No);
      JobPlanningLine.VALIDATE("Planning Date",CALCDATE('<' + FORMAT(LibraryRandom.RandIntInRange(6,10)) + 'M>',WORKDATE)); // The Planning Date is later than Receipt Date on Transfer Line.
      JobPlanningLine.VALIDATE("Usage Link",TRUE);
      JobPlanningLine.VALIDATE(Quantity,OriginalQuantity + LibraryRandom.RandInt(10) + LibraryUtility.GenerateRandomFraction);
      JobPlanningLine.VALIDATE(Reserve,JobPlanningLine.Reserve::Optional);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobWithJobTask@3(VAR JobTask@1000 : Record 1001);
    VAR
      Job@1001 : Record 167;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
    END;

    LOCAL PROCEDURE CreateRequisitionLine@21(VAR RequisitionLine@1000 : Record 246);
    VAR
      Item@1003 : Record 27;
      RequisitionWkshName@1002 : Record 245;
      ReqWkshTemplate@1001 : Record 244;
      LibraryPlanning@1004 : Codeunit 132203;
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplate.Type::"Req.");
      ReqWkshTemplate.FINDFIRST;
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);
      RequisitionLine.VALIDATE(Type,RequisitionLine.Type::Item);
      RequisitionLine.VALIDATE("No.",LibraryInventory.CreateItem(Item));
      RequisitionLine.VALIDATE(Quantity,LibraryRandom.RandInt(10) + LibraryUtility.GenerateRandomFraction);  // Use Random for Quantity.
      RequisitionLine.VALIDATE("Due Date",WORKDATE);
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTransferOrder@22(VAR TransferLine@1000 : Record 5741;PurchaseLine@1001 : Record 39);
    VAR
      Location@1003 : Record 14;
      Location2@1002 : Record 14;
      TransferHeader@1004 : Record 5740;
    BEGIN
      Location.SETRANGE("Use As In-Transit",TRUE);
      Location.FINDFIRST;
      LibraryWarehouse.CreateTransferHeader(
        TransferHeader,PurchaseLine."Location Code",LibraryWarehouse.CreateLocation(Location2),Location.Code);
      LibraryWarehouse.CreateTransferLine(
        TransferHeader,TransferLine,PurchaseLine."No.",PurchaseLine.Quantity - LibraryUtility.GenerateRandomFraction);  // Use Random for Quantity.
      TransferLine.VALIDATE("Receipt Date",LibraryRandom.RandDate(5));  // Use Random value to calculate the Receipt Date.
      TransferLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyPurchaseLineReceiptDate@20(VAR PurchaseLine@1000 : Record 39;ExpectedReceiptDate@1001 : Date);
    BEGIN
      PurchaseLine.VALIDATE("Expected Receipt Date",ExpectedReceiptDate);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyItemOrderTrackingPolicy@35(ItemNo@1001 : Code[20]);
    VAR
      Item@1000 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      Item.VALIDATE("Order Tracking Policy",Item."Order Tracking Policy"::"Tracking Only");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE NewValue@113(MinValue@1000 : Decimal;MaxValue@1001 : Decimal) : Decimal;
    BEGIN
      IF MinValue < 0 THEN
        MinValue := 0;
      EXIT(LibraryRandom.RandDecInDecimalRange(MinValue,MaxValue,2));
    END;

    LOCAL PROCEDURE OpenPurchaseOrderToChangeExpectedReceiptDate@7(No@1000 : Code[20];ExpectedReceiptDate@1002 : Date);
    VAR
      PurchaseOrder@1001 : TestPage 50;
    BEGIN
      PurchaseOrder.OPENEDIT;
      PurchaseOrder.FILTER.SETFILTER("No.",No);
      PurchaseOrder.PurchLines."Expected Receipt Date".SETVALUE(ExpectedReceiptDate);
    END;

    LOCAL PROCEDURE OpenRequisitionWorksheetPage@17(VAR ReqWorksheet@1000 : TestPage 291;Name@1001 : Code[20]);
    BEGIN
      ReqWorksheet.OPENEDIT;
      ReqWorksheet.CurrentJnlBatchName.SETVALUE(Name);
    END;

    LOCAL PROCEDURE SelectRequisitionTemplate@63(VAR ReqWkshTemplate@1000 : Record 244;Type@1001 : Option);
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,Type);
      ReqWkshTemplate.SETRANGE(Recurring,FALSE);
      ReqWkshTemplate.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateJobPlanningLine@4(VAR JobPlanningLine@1000 : Record 1003;Quantity@1001 : Decimal;PlanningDate@1002 : Date;Reserve@1003 : Option;LocationCode@1004 : Code[10]);
    BEGIN
      JobPlanningLine.VALIDATE(Quantity,Quantity);
      JobPlanningLine.VALIDATE("Planning Date",PlanningDate);
      JobPlanningLine.VALIDATE(Reserve,Reserve);
      JobPlanningLine.VALIDATE("Location Code",LocationCode);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AutoReservePurchaseLineToSalesLine@32(VAR PurchaseLine@1000 : Record 39);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      CreatePurchaseDocument(PurchaseLine);
      ModifyItemOrderTrackingPolicy(PurchaseLine."No.");
      CreateSalesOrder(
        SalesHeader,LibraryRandom.RandDateFrom(PurchaseLine."Expected Receipt Date",5),
        '',PurchaseLine."No.",PurchaseLine.Quantity);
      PurchaseLine.ShowReservation;
    END;

    LOCAL PROCEDURE VerifyPurchaseLineError@25(PurchaseLine@1001 : Record 39;ColumnCaption@1000 : Text[30]);
    BEGIN
      Assert.ExpectedError(
        STRSUBSTNO(
          ReservationError,ColumnCaption,PurchaseLine.TABLECAPTION,PurchaseLine.FIELDCAPTION("Document Type"),
          PurchaseLine."Document Type",
          PurchaseLine.FIELDCAPTION("Document No."),PurchaseLine."Document No.",PurchaseLine.FIELDCAPTION("Line No."),
          PurchaseLine."Line No."));
    END;

    LOCAL PROCEDURE VerifyJobPlanningLineError@26(JobPlanningLine@1001 : Record 1003;ColumnCaption@1000 : Text[30]);
    BEGIN
      Assert.ExpectedError(
        STRSUBSTNO(
          ReservationError,ColumnCaption,JobPlanningLine.TABLECAPTION,JobPlanningLine.FIELDCAPTION("Job No."),
          JobPlanningLine."Job No.",
          JobPlanningLine.FIELDCAPTION("Job Task No."),JobPlanningLine."Job Task No.",JobPlanningLine.FIELDCAPTION("Line No."),
          JobPlanningLine."Line No."));
    END;

    LOCAL PROCEDURE VerifyJobPlanningLine@14(JobPlanningLine@1000 : Record 1003;ReservedQuantity@1001 : Decimal);
    BEGIN
      JobPlanningLine.CALCFIELDS("Reserved Quantity");
      JobPlanningLine.TESTFIELD("Reserved Quantity",ReservedQuantity);
    END;

    LOCAL PROCEDURE VerifyReservationEntry@11(JobPlanningLine@1000 : Record 1003;Quantity@1002 : Decimal);
    VAR
      ReservationEntry@1001 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Source Type",DATABASE::"Job Planning Line");
      ReservationEntry.SETRANGE("Source ID",JobPlanningLine."Job No.");
      ReservationEntry.FINDFIRST;
      ReservationEntry.TESTFIELD("Item No.",JobPlanningLine."No.");
      ReservationEntry.TESTFIELD("Quantity (Base)",-Quantity);
    END;

    LOCAL PROCEDURE VerifyNoSurplusReservationEntry@45(ItemNo@1000 : Code[20]);
    VAR
      ReservationEntry@1001 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE("Reservation Status",ReservationEntry."Reservation Status"::Surplus);
      Assert.IsTrue(ReservationEntry.ISEMPTY,NotCreateReservationEntryErr);
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@1(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Auto Reserve".INVOKE;
      Reservation.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReserveFromCurrentLineHandler@78(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Reserve from Current Line".INVOKE;
      Reservation.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReserveOrCancelReservationPageHandler@57(VAR Reservation@1000 : TestPage 498);
    BEGIN
      IF LibraryVariableStorage.DequeueBoolean THEN
        Reservation."Reserve from Current Line".INVOKE
      ELSE
        Reservation.CancelReservationCurrentLine.INVOKE;
      Reservation.OK.INVOKE;
    END;

    LOCAL PROCEDURE ResetAndVerifyVendorItemNo@152(ReqWorksheet@1000 : TestPage 291;CrossReferenceNo@1001 : Code[20];VendorNo@1004 : Code[20]);
    BEGIN
      ReqWorksheet."Vendor No.".SETVALUE('');
      Assert.AreEqual('',ReqWorksheet."Vendor Item No.".VALUE,NotResetErr);

      ReqWorksheet."Vendor No.".SETVALUE(VendorNo);
      Assert.AreEqual(
        CrossReferenceNo,ReqWorksheet."Vendor Item No.".VALUE,
        STRSUBSTNO(VendorItemNoErr,CrossReferenceNo));
    END;

    [StrMenuHandler]
    PROCEDURE TransferOrderStringMenuHandler@18(Option@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := 2;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@43(Msg@1000 : Text[1024]);
    BEGIN
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@66(Question@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Reservation] [Job]
      1..10. Attempt to modify some factors that influence Reservation outside limits and Verify failing Error.
         11. Verify Reserved Quantity on Purchase Line and Job Planning Line after modifying the various field on Purchase and Job Planning Line after Reservation.
         12. Verify Reserved Quantity on Job Planning Line after modifying the various field on Job Planning Line after Reservation.
         13. Verify that Reservation from Requisition Line to Job Order is not allowed.
         14. Verify Reserved Quantity on Job Planning Line after modifying the various field on Transfer Order and Job Planning Line after Reservation.
         15. Verify Reservation entry created by a Purchase Order and Job Planning Line while Reserve type is Optional.
         16. Verify Description and Location Code are updated when updating Vendor No.in Requisition Worksheet line.
         17. Verify Location Code is not updated when updating Vendor No. in Requisition Worksheet line which contain Reservation Entry.
         18. Verify Vendor Item No. is correct when creating Requisition Worksheet line manually.
         19. Verify Vendor Item No. is correct when calculating plan in Requisition Worksheet.
         20. Verify default Location Code from Vendor Card is filled when creating Requisition Worksheet line manually.
         21. Verify no Surplus Reservation Entry is created after validating the same Item No. on reserved Purchase Line.

      TFS_TS_ID = 274079
      Covers Test Cases:
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------
      ChangePurchaseLineItemAfterReserve, ChangePurchaseLineVariantAfterReserve
      ChangePurchaseLineLocationAfterReserve, ChangePurchaseLineExpectedReceiptDateAfterReserve
      ChangeJobPlanningLinesItemAfterReserve, ChangeJobPlanningLinesVariantAfterReserve
      ChangeJobPlanningLinesLocationAfterReserve, ChangeJobPlanningLinesPlanningDateAfterReserve
      ChangeJobPlanningLinesUsageLinkAfterReserve, ChangeJobPlanningLinesReserveAfterReserve        177921

      TFS_TS_ID = 274083
      Covers Test Cases:
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------
      ModifyFactorsFromPurchaseOrderToJobOrder                                                      174248
      ModifyFactorsFromJobOrderToItemLedgerEntry                                                    177563
      ReservationFromRequisitionLine                                                                177653
      ModifyFactorsFromTransferOrderReceiptToJobOrder                                               177659
      ReservationEntryWhenReserveIsOptional                                                         178038

      TFS_TS_ID = 50330
      Covers Test Cases:
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------
      CreateRequisitionWorksheetlineAndUpdateVendorNo                                                50330
      LocationCodeNotUpdateWhenUpdateVendorNoForReservedEntry                                        50330

      TFS_TS_ID = 55904
      Covers Test Cases:
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------
      CreateRequisitionWorksheetlineAndVerifyVendorItemNo                                            55904
      CalculatePlanInRequisitionWorksheetAndVerifyVendorItemNo                                       55904

      TFS_TS_ID = 71816
      Covers Test Cases:
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------
      CreateReqWorksheetlineAndVerifyDefaultLocationFromVendorCard                                   71816

      TFS_TS_ID = 88424
      Covers Test Cases:
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------
      ValidateItemNoOnReservedPurchaseLine                                                           88424
    }
    END.
  }
}

