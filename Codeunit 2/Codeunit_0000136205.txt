OBJECT Codeunit 136205 Marketing Setup
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryUtility@1003 : Codeunit 131000;
      LibraryMarketing@1002 : Codeunit 131900;
      LibrarySales@1007 : Codeunit 130509;
      Assert@1001 : Codeunit 130000;
      IsInitialized@1000 : Boolean;
      SalespersonCode@1005 : Code[10];
      UnknownError@1004 : TextConst 'ENU=Unexpected Error.';
      SalesCycleCodeError@1006 : TextConst 'ENU=You must fill in the %1 field.';
      FieldErrorServiceTier@1009 : TextConst 'ENU="%1 must have a value in %2: Primary Key=. It cannot be zero or empty."';
      SalutationCode@1008 : Code[10];
      ExpectedMessage@1015 : TextConst 'ENU=The field IBAN is mandatory. You will not be able to use the account in a payment file until the IBAN is correctly filled in.\\Are you sure you want to continue?';

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibrarySales.SetCreditWarningsToNoWarnings;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE ValuesWithInheritance@1();
    VAR
      Contact@1000 : Record 5050;
      Contact2@1005 : Record 5050;
    BEGIN
      // Covers document number TC0029 - refer to TFS ID 21737.
      // Test values on Contact of Type Person successfully updated with values on Contact of Type Company on updating Company No. on
      // Contact with Inheritance Setup.

      // 1. Setup: Create Contact of Type Company and Update all values marked on Inheritance Setup on Contact.
      Initialize;
      LibraryMarketing.CreateContact(Contact);
      UpdateContact(Contact);

      // 2. Exercise: Create Contact of Type Person and Assign Company No. equal Contact no. of Type Company.
      LibraryMarketing.CreateContact(Contact2);
      Contact2.VALIDATE(Type,Contact2.Type::Person);
      Contact2.VALIDATE("Company No.",Contact."No.");
      Contact2.MODIFY(TRUE);

      // 3. Verify: Verify values on Contact of Type Person successfully updated.
      Contact2.TESTFIELD("Salesperson Code",Contact."Salesperson Code");
      Contact2.TESTFIELD("Territory Code",Contact."Territory Code");
      Contact2.TESTFIELD("Country/Region Code",Contact."Country/Region Code");
      Contact2.TESTFIELD("Language Code",Contact."Language Code");
      Contact2.TESTFIELD(Address,Contact.Address);
      Contact2.TESTFIELD("E-Mail",Contact."E-Mail");
    END;

    [Test]
    PROCEDURE ValuesWOInheritance@3();
    VAR
      Contact@1000 : Record 5050;
      Contact2@1005 : Record 5050;
    BEGIN
      // Covers document number TC0029 - refer to TFS ID 21737.
      // Test values not updated on Contact of Type Person with values Contact of Type Company after updating Company No. on Contact
      // without Inheritance Setup.

      // 1. Setup: Create Contact of Type Company, Update all values marked on Inheritance Setup on Contact and Update all Values to
      // False on Inheritance Tab of Marketing Setup.
      Initialize;
      LibraryMarketing.CreateContact(Contact);
      UpdateContact(Contact);
      UpdateInheritanceSetup(FALSE);

      // 2. Exercise: Create Contact of Type Person and Assign Company No. equal Contact no. of Type Company.
      LibraryMarketing.CreateContact(Contact2);
      Contact2.VALIDATE(Type,Contact2.Type::Person);
      Contact2.VALIDATE("Company No.",Contact."No.");
      Contact2.MODIFY(TRUE);

      // 3. Verify: Verify No values update on Contact of Type Person.
      Contact2.TESTFIELD(Address,'');
      Contact2.TESTFIELD("E-Mail",'');

      // 4. Teardown: Update all Values to True on Inheritance Tab of Marketing Setup.
      UpdateInheritanceSetup(TRUE);
    END;

    [Test]
    PROCEDURE NoDefaultValuesTypeCompany@6();
    BEGIN
      // Covers document number TC0030 - refer to TFS ID 21737.
      // Test Default values not Update on Creation Contact of Type Company after clear Default values from Marketing Setup.

      NoDefaultValuesContact(FALSE);
    END;

    [Test]
    PROCEDURE NoDefaultValuesTypePerson@7();
    BEGIN
      // Covers document number TC0030 - refer to TFS ID 21737.
      // Test Default values not Update on Creation Contact of Type Person after clear Default values from Marketing Setup.

      NoDefaultValuesContact(TRUE);
    END;

    LOCAL PROCEDURE NoDefaultValuesContact@36(PersonType@1002 : Boolean);
    VAR
      TempMarketingSetup@1003 : TEMPORARY Record 5079;
      Contact@1001 : Record 5050;
    BEGIN
      // Covers document number TC0030 - refer to TFS ID 21737.
      // Test Default values not Update on Creation Contact of Type Person after clear Default values from Marketing Setup.

      // 1. Setup: Update Default values on Marketing Setup.
      Initialize;
      ClearDefaultValueSetup(TempMarketingSetup);

      // 2. Exercise: Create Contact of Type as per parameter.
      LibraryMarketing.CreateContact(Contact);
      IF PersonType THEN BEGIN
        Contact.VALIDATE(Type,Contact.Type::Person);
        Contact.MODIFY(TRUE);
      END;

      // 3. Verify: Verify No Default Values update on Contact.
      Contact.TESTFIELD("Territory Code",'');
      Contact.TESTFIELD("Country/Region Code",'');
      Contact.TESTFIELD("Language Code",'');
      Contact.TESTFIELD("Salutation Code",'');
      Contact.TESTFIELD("Correspondence Type",Contact."Correspondence Type"::" ");

      // 4. Teardown: Set all values to default Values on Marketing Setup.
      RollbackDefaultValueSetup(TempMarketingSetup);
    END;

    [Test]
    PROCEDURE DefaultValuesTypeCompany@8();
    BEGIN
      // Covers document number TC0030 - refer to TFS ID 21737.
      // Test Default values successfully update on Creation Contact of Type Company with Default values on Marketing Setup.

      DefaultValuesContact(FALSE);
    END;

    [Test]
    PROCEDURE DefaultValuesTypePerson@9();
    BEGIN
      // Covers document number TC0030 - refer to TFS ID 21737.
      // Test Default values successfully update on Creation Contact of Type Person with Default values on Marketing Setup.

      DefaultValuesContact(TRUE);
    END;

    LOCAL PROCEDURE DefaultValuesContact@40(PersonType@1002 : Boolean);
    VAR
      TempMarketingSetup@1000 : TEMPORARY Record 5079;
      MarketingSetup@1007 : Record 5079;
      Contact@1001 : Record 5050;
    BEGIN
      // Covers document number TC0030 - refer to TFS ID 21737.
      // Test Default values successfully update on Creation Contact of Type Person with Default values on Marketing Setup.

      // 1. Setup: Update Default values on Marketing Setup.
      Initialize;
      UpdateDefaultValueSetup(TempMarketingSetup,MarketingSetup);

      // 2. Exercise: Create Contact of Type as per parameter.
      LibraryMarketing.CreateContact(Contact);
      IF PersonType THEN BEGIN
        Contact.VALIDATE(Type,Contact.Type::Person);
        Contact.MODIFY(TRUE);
      END;

      // 3. Verify: Verify Default Values update on Contact.
      VerifyDefaultValueOnContact(Contact,MarketingSetup);

      // 4. Teardown: Set all values to default Values on Marketing Setup.
      RollbackDefaultValueSetup(TempMarketingSetup);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity)]
    PROCEDURE OpportunityWithSalesCycleCode@10();
    VAR
      Contact@1000 : Record 5050;
      Opportunity@1001 : Record 5092;
      TempOpportunity@1002 : TEMPORARY Record 5092;
      SalesCycle@1003 : Record 5090;
      MarketingSetup@1004 : Record 5079;
      DefaultSalesCycleCode@1005 : Code[10];
    BEGIN
      // Covers document number TC0031 - refer to TFS ID 21737.
      // Test Opportunity for contact successfully created with Default Sales Cycle Code on Marketing Setup.

      // 1. Setup: Create Contact and Update Default Sales Cycle Code on Marketing Setup.
      Initialize;
      LibraryMarketing.CreateContact(Contact);

      SalespersonCode := Contact."Salesperson Code";  // Set Global Variable for Form Handler.
      SalesCycle.FINDFIRST;
      MarketingSetup.GET;
      DefaultSalesCycleCode := MarketingSetup."Default Sales Cycle Code";
      MarketingSetup.VALIDATE("Default Sales Cycle Code",SalesCycle.Code);
      MarketingSetup.MODIFY(TRUE);

      // 2. Exercise: Create opportunity for Contact.
      Opportunity.SETRANGE("Contact No.",Contact."No.");
      TempOpportunity.CreateOppFromOpp(Opportunity);

      // 3. Verify: Verify Opportunity successfully created.
      Opportunity.SETRANGE("Contact No.",Contact."No.");
      Opportunity.FINDFIRST;
      Opportunity.TESTFIELD("Salesperson Code",Contact."Salesperson Code");

      // 4. Teardown: Set Default Sales Cycle Code on Marketing Setup to default value.
      MarketingSetup.VALIDATE("Default Sales Cycle Code",DefaultSalesCycleCode);
      MarketingSetup.MODIFY(TRUE);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity)]
    PROCEDURE OpportunityWOSalesCycleCode@13();
    VAR
      Contact@1000 : Record 5050;
      Opportunity@1001 : Record 5092;
      TempOpportunity@1002 : TEMPORARY Record 5092;
      MarketingSetup@1004 : Record 5079;
      DefaultSalesCycleCode@1005 : Code[10];
    BEGIN
      // Covers document number TC0031 - refer to TFS ID 21737.
      // Test error occurs on creation of Opportunity for Contact without Default Sales Cycle Code on Marketing Setup.

      // 1. Setup: Create Contact and Clear Default Sales Cycle Code on Marketing Setup.
      Initialize;
      LibraryMarketing.CreateContact(Contact);

      SalespersonCode := Contact."Salesperson Code";  // Set Global Variable for Form Handler.
      MarketingSetup.GET;
      DefaultSalesCycleCode := MarketingSetup."Default Sales Cycle Code";
      MarketingSetup.VALIDATE("Default Sales Cycle Code",'');
      MarketingSetup.MODIFY(TRUE);

      // 2. Exercise: Create opportunity for Contact.
      Opportunity.SETRANGE("Contact No.",Contact."No.");
      ASSERTERROR TempOpportunity.CreateOppFromOpp(Opportunity);

      // 3. Verify: Verify error Occurs on creation of Opportunity for Contact without Default Sales Cycle Code on Marketing Setup.
      Assert.AreEqual(STRSUBSTNO(SalesCycleCodeError,Opportunity.FIELDCAPTION("Sales Cycle Code")),GETLASTERRORTEXT,'');

      // 4. Teardown: Set Default Sales Cycle Code on Marketing Setup to default value.
      MarketingSetup.VALIDATE("Default Sales Cycle Code",DefaultSalesCycleCode);
      MarketingSetup.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE ContactFromCustomerWithSetup@11();
    VAR
      Customer@1000 : Record 18;
      BusinessRelation@1003 : Record 5053;
      ContactBusinessRelation@1001 : Record 5054;
      DefaultBusRelCodeforCustomers@1005 : Code[10];
    BEGIN
      // Covers document number TC0032 - refer to TFS ID 21737.
      // Test Contact successfully created on creation of Customer with Bus. Relation Code for Customers on Marketing Setup.

      // 1. Setup: Set value of Bus. Relation Code for Customers on Marketing Setup.
      Initialize;
      BusinessRelation.FINDFIRST;
      DefaultBusRelCodeforCustomers := UpdateBusRelCodeforCustomers(BusinessRelation.Code);

      // 2. Exercise: Create Customer.
      LibrarySales.CreateCustomer(Customer);

      // 3. Verify: Verify Contact Business Relation and Contact successfully created.
      VerifyContact(ContactBusinessRelation."Link to Table"::Customer,Customer."No.");

      // 4. Teardown: Set Default value of Bus. Relation Code for Customers on Marketing Setup.
      UpdateBusRelCodeforCustomers(DefaultBusRelCodeforCustomers);
    END;

    [Test]
    PROCEDURE ContactFromVendorWithSetup@12();
    VAR
      Vendor@1000 : Record 23;
      BusinessRelation@1004 : Record 5053;
      ContactBusinessRelation@1001 : Record 5054;
      LibraryPurchase@1002 : Codeunit 130512;
      DefaultBusRelCodeforVendors@1003 : Code[10];
    BEGIN
      // Covers document number TC0032 - refer to TFS ID 21737.
      // Test Contact successfully created on creation of Vendor with Bus. Relation Code for Vendors on Marketing Setup.

      // 1. Setup: Set value of Bus. Relation Code for Vendors on Marketing Setup.
      Initialize;
      BusinessRelation.FINDFIRST;
      DefaultBusRelCodeforVendors := UpdateBusRelCodeforVendors(BusinessRelation.Code);

      // 2. Exercise: Create Vendor.
      LibraryPurchase.CreateVendor(Vendor);

      // 3. Verify: Verify Contact Business Relation and Contact successfully created.
      VerifyContact(ContactBusinessRelation."Link to Table"::Vendor,Vendor."No.");

      // 4. Teardown: Set Default value of Bus. Relation Code for Vendors on Marketing Setup.
      UpdateBusRelCodeforVendors(DefaultBusRelCodeforVendors);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE ContactFromBankWithSetup@14();
    VAR
      BankAccount@1000 : Record 270;
      BusinessRelation@1003 : Record 5053;
      ContactBusinessRelation@1001 : Record 5054;
      LibraryERM@1002 : Codeunit 131300;
      DefaultBusRelCodeforBankAccs@1004 : Code[10];
    BEGIN
      // Covers document number TC0032 - refer to TFS ID 21737.
      // Test Contact successfully created on creation of Bank Account with Bus. Relation Code for Bank Acc. on Marketing Setup.

      // 1. Setup: Set value of Bus. Relation Code for Bank Acc. on Marketing Setup.
      Initialize;
      ExecuteUIHandler;
      BusinessRelation.FINDFIRST;
      DefaultBusRelCodeforBankAccs := UpdateBusRelCodeforBankAccount(BusinessRelation.Code);

      // 2. Exercise: Create Bank Account.
      LibraryERM.CreateBankAccount(BankAccount);

      // 3. Verify: Verify Contact Business Relation and Contact successfully created.
      VerifyContact(ContactBusinessRelation."Link to Table"::"Bank Account",BankAccount."No.");

      // 4. Teardown: Set Default value of Bus. Relation Code for Bank Acc. on Marketing Setup.
      UpdateBusRelCodeforBankAccount(DefaultBusRelCodeforBankAccs);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE VendorFromContactWithSetup@18();
    VAR
      Contact@1000 : Record 5050;
      ContactBusinessRelation@1001 : Record 5054;
      Vendor@1003 : Record 23;
      BusinessRelation@1004 : Record 5053;
      DefaultBusRelCodeforVendors@1002 : Code[10];
    BEGIN
      // Covers document number TC0032 - refer to TFS ID 21737.
      // Test Vendor successfully created from Contact with Bus. Relation Code for Vendors on Marketing Setup.

      // 1. Setup: Set value of Bus. Relation Code for Vendors on Marketing Setup and Create Contact.
      Initialize;
      BusinessRelation.FINDFIRST;
      DefaultBusRelCodeforVendors := UpdateBusRelCodeforVendors(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);

      // 2. Exercise: Create Vendor from Contact.
      Contact.CreateVendor;

      // 3. Verify: Verify Contact Business Relation and Vendor successfully created.
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Vendor);
      ContactBusinessRelation.SETRANGE("Contact No.",Contact."No.");
      ContactBusinessRelation.FINDFIRST;

      Vendor.GET(ContactBusinessRelation."No.");

      // 4. Teardown: Set Default value of Bus. Relation Code for Vendors on Marketing Setup.
      UpdateBusRelCodeforVendors(DefaultBusRelCodeforVendors);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE BankFromContactWithSetup@19();
    VAR
      Contact@1000 : Record 5050;
      ContactBusinessRelation@1001 : Record 5054;
      BankAccount@1003 : Record 270;
      BusinessRelation@1004 : Record 5053;
      DefaultBusRelCodeforBankAccs@1002 : Code[10];
    BEGIN
      // Covers document number TC0032 - refer to TFS ID 21737.
      // Test Bank Account successfully created from Contact with Bus. Relation Code for Bank Acc. on Marketing Setup.

      // 1. Setup: Set value of Bus. Relation Code for Bank Acc. on Marketing Setup and Create Contact.
      Initialize;
      BusinessRelation.FINDFIRST;
      DefaultBusRelCodeforBankAccs := UpdateBusRelCodeforBankAccount(BusinessRelation.Code);
      LibraryMarketing.CreateContact(Contact);

      // 2. Exercise: Create Bank Account from Contact.
      Contact.CreateBankAccount;

      // 3. Verify: Verify Contact Business Relation and Bank Account successfully created.
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::"Bank Account");
      ContactBusinessRelation.SETRANGE("Contact No.",Contact."No.");
      ContactBusinessRelation.FINDFIRST;

      BankAccount.GET(ContactBusinessRelation."No.");

      // 4. Teardown: Set Default value of Bus. Relation Code for Bank Acc. on Marketing Setup.
      UpdateBusRelCodeforBankAccount(DefaultBusRelCodeforBankAccs);
    END;

    [Test]
    PROCEDURE CheckCampaignWithSetup@33();
    VAR
      MarketingSetup@1000 : Record 5079;
      Campaign@1001 : Record 5071;
    BEGIN
      // Covers document number TC0033 - refer to TFS ID 21737.
      // Test Campaign successfully created with Campaign Nos. on Marketing Setup.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Campaign.
      LibraryMarketing.CreateCampaign(Campaign);

      // 3. Verify: Verify Campaign successfully created.
      MarketingSetup.GET;
      Campaign.GET(Campaign."No.");
      Campaign.TESTFIELD("No. Series",MarketingSetup."Campaign Nos.");
    END;

    [Test]
    PROCEDURE CheckSegmentWithSetup@41();
    VAR
      MarketingSetup@1000 : Record 5079;
      SegmentHeader@1001 : Record 5076;
    BEGIN
      // Covers document number TC0033 - refer to TFS ID 21737.
      // Test Segment Header successfully created with Segment Nos. on Marketing Setup.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Segment Header.
      LibraryMarketing.CreateSegmentHeader(SegmentHeader);

      // 3. Verify: Verify Segment Header successfully created.
      MarketingSetup.GET;
      SegmentHeader.GET(SegmentHeader."No.");
      SegmentHeader.TESTFIELD("No. Series",MarketingSetup."Segment Nos.");
    END;

    [Test]
    PROCEDURE CheckContactWithSetup@42();
    VAR
      MarketingSetup@1000 : Record 5079;
      Contact@1001 : Record 5050;
    BEGIN
      // Covers document number TC0033 - refer to TFS ID 21737.
      // Test Contact successfully created with Contact Nos. on Marketing Setup.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Contact.
      LibraryMarketing.CreateContact(Contact);

      // 3. Verify: Verify Contact successfully created.
      MarketingSetup.GET;
      Contact.GET(Contact."No.");
      Contact.TESTFIELD("No. Series",MarketingSetup."Contact Nos.");
    END;

    [Test]
    PROCEDURE CheckCampaignWOSetup@43();
    VAR
      MarketingSetup@1000 : Record 5079;
      Campaign@1001 : Record 5071;
    BEGIN
      // Covers document number TC0033 - refer to TFS ID 21737.
      // Test error occurs on creation of Campaign without Campaign Nos. on Marketing Setup.

      // 1. Setup: Clear Campaign Nos. on Marketing Setup.
      Initialize;
      MarketingSetup.GET;
      MarketingSetup.VALIDATE("Campaign Nos.",'');
      MarketingSetup.MODIFY(TRUE);

      // 2. Exercise: Create Campaign.
      Campaign.INIT;
      ASSERTERROR Campaign.INSERT(TRUE);

      // 3. Verify: Verify error occurs on creation of Campaign.
      VerifyFieldError(MarketingSetup.FIELDCAPTION("Campaign Nos."));
    END;

    [Test]
    PROCEDURE CheckSegmentWOSetup@44();
    VAR
      MarketingSetup@1001 : Record 5079;
      SegmentHeader@1000 : Record 5076;
    BEGIN
      // Covers document number TC0033 - refer to TFS ID 21737.
      // Test error occurs on creation of Segment Header without Segment Nos. on Marketing Setup.

      // 1. Setup: Clear Segment Nos. on Marketing Setup.
      Initialize;
      MarketingSetup.GET;
      MarketingSetup.VALIDATE("Segment Nos.",'');
      MarketingSetup.MODIFY(TRUE);

      // 2. Exercise: Create Segment Header.
      SegmentHeader.INIT;
      ASSERTERROR SegmentHeader.INSERT(TRUE);

      // 3. Verify: Verify error occurs on creation of Segment Header.
      VerifyFieldError(MarketingSetup.FIELDCAPTION("Segment Nos."));
    END;

    [Test]
    PROCEDURE CheckContactWOSetup@45();
    VAR
      MarketingSetup@1002 : Record 5079;
      Contact@1001 : Record 5050;
    BEGIN
      // Covers document number TC0033 - refer to TFS ID 21737.
      // Test error occurs on creation of Contact without Contact Nos. on Marketing Setup.

      // 1. Setup: Clear Contact Nos. on Marketing Setup.
      Initialize;
      MarketingSetup.GET;
      MarketingSetup.VALIDATE("Contact Nos.",'');
      MarketingSetup.MODIFY(TRUE);

      // 2. Exercise: Create Contact.
      Contact.INIT;
      ASSERTERROR Contact.INSERT(TRUE);

      // 3. Verify: Verify error occurs on creation of Contact.
      VerifyFieldError(MarketingSetup.FIELDCAPTION("Contact Nos."));
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerForToDo)]
    PROCEDURE CheckToDoWOSetup@46();
    VAR
      MarketingSetup@1002 : Record 5079;
      SalespersonPurchaser@1001 : Record 13;
      ToDo@1004 : Record 5080;
      TempToDo@1005 : TEMPORARY Record 5080;
    BEGIN
      // Covers document number TC0033 - refer to TFS ID 21737.
      // Test error occurs on creation of To-do for Salesperson without To-do Nos. on Marketing Setup.

      // 1. Setup: Clear To-do Nos. on Marketing Setup.
      Initialize;
      MarketingSetup.GET;
      MarketingSetup.VALIDATE("To-do Nos.",'');
      MarketingSetup.MODIFY(TRUE);

      // 2. Exercise: Create Salesperson and To-Do.
      LibrarySales.CreateSalesperson(SalespersonPurchaser);

      ToDo.SETRANGE("Salesperson Code",SalespersonPurchaser.Code);
      ASSERTERROR TempToDo.CreateToDoFromToDo(ToDo);

      // 3. Verify: Verify error occurs on creation of To-Do.
      VerifyFieldError(MarketingSetup.FIELDCAPTION("To-do Nos."));
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity)]
    PROCEDURE CheckOpportunityWOSetup@47();
    VAR
      Contact@1004 : Record 5050;
      Opportunity@1003 : Record 5092;
      TempOpportunity@1002 : TEMPORARY Record 5092;
      MarketingSetup@1000 : Record 5079;
      SalesCycle@1005 : Record 5090;
    BEGIN
      // Covers document number TC0033 - refer to TFS ID 21737.
      // Test error occurs on creation of Opportunity for Contact without Opportunity Nos. on Marketing Setup.

      // 1. Setup: Create Contact and Clear Opportunity Nos. on Marketing Setup.
      Initialize;
      LibraryMarketing.CreateContact(Contact);

      SalespersonCode := Contact."Salesperson Code";  // Set Global Variable for Form Handler.
      SalesCycle.FINDFIRST;
      MarketingSetup.GET;
      MarketingSetup.VALIDATE("Default Sales Cycle Code",SalesCycle.Code);
      MarketingSetup.VALIDATE("Opportunity Nos.",'');
      MarketingSetup.MODIFY(TRUE);

      // 2. Exercise: Create Opportunity for contact.
      Opportunity.SETRANGE("Contact No.",Contact."No.");
      ASSERTERROR TempOpportunity.CreateOppFromOpp(Opportunity);

      // 3. Verify: Verify error occurs on creation of Opportunity.
      VerifyFieldError(MarketingSetup.FIELDCAPTION("Opportunity Nos."));
    END;

    [Test]
    PROCEDURE CreateSalutation@20();
    VAR
      Salutation@1002 : Record 5068;
    BEGIN
      // Covers document number TC0027 - refer to TFS ID 123227.
      // Test Salutation Successfully Created.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Salutation.
      LibraryMarketing.CreateSalutation(Salutation);

      // 3. Verify: Verify Salutation created.
      Salutation.GET(Salutation.Code);
    END;

    [Test]
    PROCEDURE SalutationFormulaFormal@52();
    VAR
      SalutationFormula@1004 : Record 5069;
    BEGIN
      // Covers document number TC0027 - refer to TFS ID 123227.
      // Test Salutation Formula created with Salutation Type Formal.

      CreateSalutationFormula(SalutationFormula."Salutation Type"::Formal,'');
    END;

    [Test]
    PROCEDURE SalutationFormulaInformal@49();
    VAR
      SalutationFormula@1004 : Record 5069;
    BEGIN
      // Covers document number TC0027 - refer to TFS ID 123227.
      // Test Salutation Formula created with Salutation Type InFormal.

      CreateSalutationFormula(SalutationFormula."Salutation Type"::Informal,'');
    END;

    [Test]
    PROCEDURE SalutationFormulaFormalLang@17();
    VAR
      SalutationFormula@1004 : Record 5069;
    BEGIN
      // Covers document number TC0027 - refer to TFS ID 123227.
      // Test Salutation Formula created with Salutation Type Formal with Language.

      CreateSalutationFormula(SalutationFormula."Salutation Type"::Formal,SelectLanguage);
    END;

    [Test]
    PROCEDURE SalutationFormulaInformalLang@16();
    VAR
      SalutationFormula@1004 : Record 5069;
    BEGIN
      // Covers document number TC0027 - refer to TFS ID 123227.
      // Test Salutation Formula created with Salutation Type InFormal with Language.

      CreateSalutationFormula(SalutationFormula."Salutation Type"::Informal,SelectLanguage);
    END;

    LOCAL PROCEDURE CreateSalutationFormula@2(SalutationType@1006 : Option;LanguageCode@1000 : Code[10]);
    VAR
      Salutation@1002 : Record 5068;
      SalutationFormula@1004 : Record 5069;
    BEGIN
      // 1. Setup: Create Salutation.
      Initialize;
      LibraryMarketing.CreateSalutation(Salutation);

      // 2. Exercise: Create and Update Salutation Formula with Specified SalutationType.
      LibraryMarketing.CreateSalutationFormula(SalutationFormula,Salutation.Code,LanguageCode,SalutationType);
      UpdateSalutationFormula(SalutationFormula);

      // 3. Verify: Verify Salutation Formula created with Specified SalutationType.
      SalutationFormula.GET(Salutation.Code,LanguageCode,SalutationType);
    END;

    [Test]
    [HandlerFunctions(ModalFormNameDetails)]
    PROCEDURE ContactSaluation@15();
    VAR
      Contact@1000 : Record 5050;
      Salutation@1002 : Record 5068;
      NameDetails@1001 : Page 5055;
    BEGIN
      // Covers document number TC0027 - refer to TFS ID 123227.
      // Test Salutation Code Successfully updated on Contact.

      // 1. Setup: Create Contact of Type Person and Salutation.
      Initialize;
      LibraryMarketing.CreateContact(Contact);
      Contact.VALIDATE(Type,Contact.Type::Person);
      Contact.MODIFY(TRUE);

      LibraryMarketing.CreateSalutation(Salutation);
      SalutationCode := Salutation.Code;  // Set Global Variable for Form Handler.

      // 2. Exercise: Run Name Details form and Update Salutation code on it.
      CLEAR(NameDetails);
      NameDetails.SETRECORD(Contact);
      NameDetails.RUNMODAL;

      // 3. Verify: Verify Salutation Code updated on Contact.
      Contact.GET(Contact."No.");
      Contact.TESTFIELD("Salutation Code",Salutation.Code);
    END;

    LOCAL PROCEDURE ClearDefaultValueSetup@64(VAR TempMarketingSetup@1001 : TEMPORARY Record 5079);
    VAR
      MarketingSetup@1000 : Record 5079;
    BEGIN
      MarketingSetup.GET;
      TempMarketingSetup.INIT;
      TempMarketingSetup := MarketingSetup;
      TempMarketingSetup.INSERT;
      MarketingSetup.VALIDATE("Default Territory Code",'');
      MarketingSetup.VALIDATE("Default Country/Region Code",'');
      MarketingSetup.VALIDATE("Default Language Code",'');
      MarketingSetup.VALIDATE("Default Person Salutation Code",'');
      MarketingSetup.VALIDATE("Def. Company Salutation Code",'');
      MarketingSetup.VALIDATE("Default Correspondence Type",MarketingSetup."Default Correspondence Type"::" ");
      MarketingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RollbackDefaultValueSetup@35(VAR TempMarketingSetup@1001 : TEMPORARY Record 5079);
    VAR
      MarketingSetup@1000 : Record 5079;
    BEGIN
      MarketingSetup.GET;
      MarketingSetup.VALIDATE("Default Territory Code",TempMarketingSetup."Default Territory Code");
      MarketingSetup.VALIDATE("Default Country/Region Code",TempMarketingSetup."Default Country/Region Code");
      MarketingSetup.VALIDATE("Default Language Code",TempMarketingSetup."Default Language Code");
      MarketingSetup.VALIDATE("Default Person Salutation Code",TempMarketingSetup."Default Person Salutation Code");
      MarketingSetup.VALIDATE("Def. Company Salutation Code",TempMarketingSetup."Def. Company Salutation Code");
      MarketingSetup.VALIDATE("Default Correspondence Type",TempMarketingSetup."Default Correspondence Type");
      MarketingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectLanguage@21() : Code[10];
    VAR
      Language@1001 : Record 8;
    BEGIN
      Language.FINDFIRST;
      EXIT(Language.Code);
    END;

    LOCAL PROCEDURE UpdateBusRelCodeforBankAccount@55(BusRelCodeforBankAccs@1000 : Code[10]) DefaultBusRelCodeforBankAccs : Code[10];
    VAR
      MarketingSetup@1001 : Record 5079;
    BEGIN
      MarketingSetup.GET;
      DefaultBusRelCodeforBankAccs := MarketingSetup."Bus. Rel. Code for Bank Accs.";
      MarketingSetup.VALIDATE("Bus. Rel. Code for Bank Accs.",BusRelCodeforBankAccs);
      MarketingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBusRelCodeforCustomers@60(BusRelCodeforCustomers@1000 : Code[10]) DefaultBusRelCodeforCustomers : Code[10];
    VAR
      MarketingSetup@1001 : Record 5079;
    BEGIN
      MarketingSetup.GET;
      DefaultBusRelCodeforCustomers := MarketingSetup."Bus. Rel. Code for Customers";
      MarketingSetup.VALIDATE("Bus. Rel. Code for Customers",BusRelCodeforCustomers);
      MarketingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBusRelCodeforVendors@53(BusRelCodeforVendors@1000 : Code[10]) DefaultBusRelCodeforVendors : Code[10];
    VAR
      MarketingSetup@1001 : Record 5079;
    BEGIN
      MarketingSetup.GET;
      DefaultBusRelCodeforVendors := MarketingSetup."Bus. Rel. Code for Vendors";
      MarketingSetup.VALIDATE("Bus. Rel. Code for Vendors",BusRelCodeforVendors);
      MarketingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateContact@34(VAR Contact@1000 : Record 5050);
    VAR
      SalespersonPurchaser@1004 : Record 13;
      Territory@1003 : Record 286;
      CountryRegion@1002 : Record 9;
      Language@1001 : Record 8;
    BEGIN
      SalespersonPurchaser.FINDFIRST;
      Territory.FINDFIRST;
      CountryRegion.FINDFIRST;
      Language.FINDFIRST;
      Contact.VALIDATE(Type,Contact.Type::Company);
      Contact.VALIDATE("Salesperson Code",SalespersonPurchaser.Code);
      Contact.VALIDATE("Territory Code",Territory.Code);
      Contact.VALIDATE("Country/Region Code",CountryRegion.Code);
      Contact.VALIDATE("Language Code",Language.Code);
      Contact.VALIDATE(Address,LibraryUtility.GenerateRandomCode(Contact.FIELDNO(Address),DATABASE::Contact));
      Contact.VALIDATE("E-Mail",LibraryUtility.GenerateRandomCode(Contact.FIELDNO("E-Mail"),DATABASE::Contact));
      Contact.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDefaultValueSetup@50(VAR TempMarketingSetup@1000 : TEMPORARY Record 5079;VAR MarketingSetup@1001 : Record 5079);
    VAR
      Territory@1005 : Record 286;
      CountryRegion@1004 : Record 9;
      Language@1003 : Record 8;
      Salutation@1002 : Record 5068;
    BEGIN
      Territory.FINDFIRST;
      CountryRegion.FINDFIRST;
      Language.FINDFIRST;
      Salutation.FINDSET;

      MarketingSetup.GET;
      TempMarketingSetup.INIT;
      TempMarketingSetup := MarketingSetup;
      TempMarketingSetup.INSERT;

      MarketingSetup.VALIDATE("Default Territory Code",Territory.Code);
      MarketingSetup.VALIDATE("Default Country/Region Code",CountryRegion.Code);
      MarketingSetup.VALIDATE("Default Language Code",Language.Code);
      MarketingSetup.VALIDATE("Default Person Salutation Code",Salutation.Code);
      Salutation.NEXT;
      MarketingSetup.VALIDATE("Def. Company Salutation Code",Salutation.Code);
      MarketingSetup.VALIDATE("Default Correspondence Type",MarketingSetup."Default Correspondence Type"::"Hard Copy");
      MarketingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInheritanceSetup@5(Value@1000 : Boolean);
    VAR
      MarketingSetup@1001 : Record 5079;
    BEGIN
      MarketingSetup.GET;
      MarketingSetup.VALIDATE("Inherit Address Details",Value);
      MarketingSetup.VALIDATE("Inherit Communication Details",Value);
      MarketingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalutationFormula@27(VAR SalutationFormula@1000 : Record 5069);
    BEGIN
      SalutationFormula.VALIDATE("Name 1",SalutationFormula."Name 1"::"Company Name");
      SalutationFormula.VALIDATE("Name 2",SalutationFormula."Name 2"::Initials);
      SalutationFormula.VALIDATE("Name 3",SalutationFormula."Name 3"::Surname);
      SalutationFormula.VALIDATE("Name 4",SalutationFormula."Name 4"::"Middle Name");
      SalutationFormula.VALIDATE("Name 5",SalutationFormula."Name 5"::"First Name");
    END;

    LOCAL PROCEDURE VerifyContact@97(LinkToTable@1000 : Option;No@1001 : Code[20]);
    VAR
      ContactBusinessRelation@1003 : Record 5054;
      Contact@1002 : Record 5050;
    BEGIN
      ContactBusinessRelation.SETRANGE("Link to Table",LinkToTable);
      ContactBusinessRelation.SETRANGE("No.",No);
      ContactBusinessRelation.FINDFIRST;

      Contact.GET(ContactBusinessRelation."Contact No.");
    END;

    LOCAL PROCEDURE VerifyDefaultValueOnContact@62(VAR Contact@1001 : Record 5050;MarketingSetup@1000 : Record 5079);
    BEGIN
      Contact.TESTFIELD("Territory Code",MarketingSetup."Default Territory Code");
      Contact.TESTFIELD("Country/Region Code",MarketingSetup."Default Country/Region Code");
      Contact.TESTFIELD("Language Code",MarketingSetup."Default Language Code");
      Contact.TESTFIELD("Salutation Code",MarketingSetup."Def. Company Salutation Code");
      Contact.TESTFIELD("Correspondence Type",MarketingSetup."Default Correspondence Type");
    END;

    LOCAL PROCEDURE VerifyFieldError@116(FieldCaption@1000 : Text[30]);
    VAR
      MarketingSetup@1001 : Record 5079;
    BEGIN
      Assert.AreEqual(STRSUBSTNO(FieldErrorServiceTier,FieldCaption,MarketingSetup.TABLECAPTION),GETLASTERRORTEXT,UnknownError)
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmMessageHandler@121(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@24(Question@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE ModalFormHandlerForToDo@109(VAR CreateToDo@1000 : Page 5097;VAR Response@1001 : Action);
    VAR
      TempToDo@1002 : TEMPORARY Record 5080;
    BEGIN
      TempToDo.INIT;
      CreateToDo.GETRECORD(TempToDo);
      TempToDo.INSERT;
      TempToDo.VALIDATE(Type,TempToDo.Type::" ");
      TempToDo.VALIDATE(Description,TempToDo."Salesperson Code");
      TempToDo.VALIDATE(Date,WORKDATE);
      TempToDo.CheckStatus;
      TempToDo.PerformNextWizardStatus;

      TempToDo.CheckStatus;
      TempToDo.FinishWizard;
    END;

    [ModalPageHandler]
    PROCEDURE ModalFormHandlerOpportunity@22(VAR CreateOpportunity@1000 : Page 5126;VAR Response@1001 : Action);
    VAR
      TempOpportunity@1002 : TEMPORARY Record 5092;
    BEGIN
      TempOpportunity.INIT;
      CreateOpportunity.GETRECORD(TempOpportunity);
      TempOpportunity.INSERT;
      TempOpportunity.VALIDATE("Salesperson Code",SalespersonCode);
      TempOpportunity.VALIDATE(
        Description,LibraryUtility.GenerateRandomCode(TempOpportunity.FIELDNO(Description),DATABASE::Opportunity));
      TempOpportunity.MODIFY;
      TempOpportunity.CheckStatus;
      TempOpportunity.PerformNextWizardStatus;
      TempOpportunity.CheckStatus;
      TempOpportunity.FinishWizard;
    END;

    [ModalPageHandler]
    PROCEDURE ModalFormNameDetails@51(VAR NameDetails@1000 : Page 5055;VAR Response@1001 : Action);
    VAR
      Contact@1002 : Record 5050;
    BEGIN
      Contact.INIT;
      NameDetails.GETRECORD(Contact);
      Contact.VALIDATE("Salutation Code",SalutationCode);
      Contact.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ExecuteUIHandler@91();
    BEGIN
      // Generate Dummy message. Required for executing the test case successfully.
      IF CONFIRM(STRSUBSTNO(ExpectedMessage)) THEN;
    END;

    BEGIN
    {
      // [FEATURE] [Marketing]
      Unsupported version tags:
      NA: Unable to Execute

      Test for CRM Marketing Setup:
        1. Test the inheritance of identical fields from the company contact card to the person contact card.
        2. Test the assigning of default fields to each new contact created by the user.
        3. Test Setting up and assigning a default sales cycle code for the created opportunity.
        4. Test Setting up Business Relation Code for customers, vendors and bank accounts to synchronize contact with customers, vendors
           and bank account card.
        5. Test the number series for numbering new entities.
        6. Test the Salutation Code updation on Contact.

      TFS_TS_ID = 21737
      Covered Test cases:
        TFS_TC_ID=137588 and 123229
        TFS_TC_ID=137589 and 123230
        TFS_TC_ID=137590 and 123231
        TFS_TC_ID=137591 and 123232
        TFS_TC_ID=137592 and 123233

      TFS_TS_ID = 168009
      Covered Test cases:
        TFS_TC_ID=123227
    }
    END.
  }
}

