OBJECT Codeunit 138030 SMB Notifications
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1009 : Codeunit 130000;
      LibraryVariableStorage@1002 : Codeunit 131004;
      LibrarySmallBusiness@1000 : Codeunit 132213;
      LibraryRandom@1006 : Codeunit 130440;
      isInitialized@1001 : Boolean;
      DontShowAgain@1003 : Integer;
      CreateInvoiceLineDescriptionTxt@1005 : TextConst 'ENU=To sell a product, you must first select';
      LinesMissingQuantityErr@1004 : TextConst 'ENU=One or more document lines with a value in the Item No. field do not have a quantity specified.';
      LeaveDocWithoutPostingTxt@1007 : TextConst 'ENU=This document is not posted.';

    LOCAL PROCEDURE Initialize@4();
    VAR
      MiniUserRemovedInstructions@1000 : Record 1306;
      SalesSetup@1001 : Record 311;
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      MiniUserRemovedInstructions.DELETEALL;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;

      SalesSetup.GET;
      SalesSetup."Stockout Warning" := FALSE;
      SalesSetup.MODIFY;

      DontShowAgain := 2;
      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(DisableEnterDescriptionNotification,ConfirmHandler)]
    PROCEDURE SalesInvoiceTestShowingAndDisablingHowToEnterLineInstruction@3();
    VAR
      Customer@1001 : Record 18;
      MiniSalesInvoice@1000 : TestPage 1304;
    BEGIN
      Initialize;
      LibrarySmallBusiness.CreateCustomer(Customer);

      // Test notificaiton message appears when user enters description only
      // Select not to show it again
      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Customer.Name);

      LibraryVariableStorage.Enqueue(DontShowAgain);
      MiniSalesInvoice.SalesLines.Description.SETVALUE('Test Description');
      MiniSalesInvoice.CLOSE;

      // Test no message appears
      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Customer.Name);
      MiniSalesInvoice.SalesLines.Description.SETVALUE('Test Description');
      MiniSalesInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DisableEnterDescriptionNotification)]
    PROCEDURE SalesQuoteTestShowingAndDisablingHowToEnterLineInstruction@13();
    VAR
      Customer@1001 : Record 18;
      MiniSalesQuote@1000 : TestPage 1324;
    BEGIN
      Initialize;
      LibrarySmallBusiness.CreateCustomer(Customer);

      // Test notificaiton message appears when user enters description only
      // Select not to show it again
      MiniSalesQuote.OPENNEW;
      MiniSalesQuote."Sell-to Customer Name".SETVALUE(Customer.Name);

      LibraryVariableStorage.Enqueue(DontShowAgain);
      MiniSalesQuote.SalesLines.Description.SETVALUE('Test Description');
      MiniSalesQuote.CLOSE;

      // Test no message appears
      MiniSalesQuote.OPENNEW;
      MiniSalesQuote."Sell-to Customer Name".SETVALUE(Customer.Name);
      MiniSalesQuote.SalesLines.Description.SETVALUE('Test Description');
      MiniSalesQuote.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DisableEnterDescriptionNotification)]
    PROCEDURE SalesCreditMemoTestShowingAndDisablingHowToEnterLineInstruction@14();
    VAR
      Customer@1001 : Record 18;
      MiniSalesCreditMemo@1000 : TestPage 1319;
    BEGIN
      Initialize;
      LibrarySmallBusiness.CreateCustomer(Customer);

      // Test notificaiton message appears when user enters description only
      // Select not to show it again
      MiniSalesCreditMemo.OPENNEW;
      MiniSalesCreditMemo."Sell-to Customer Name".SETVALUE(Customer.Name);

      LibraryVariableStorage.Enqueue(DontShowAgain);
      MiniSalesCreditMemo.SalesLines.Description.SETVALUE('Test Description');
      MiniSalesCreditMemo.CLOSE;

      // Test no message appears
      MiniSalesCreditMemo.OPENNEW;
      MiniSalesCreditMemo."Sell-to Customer Name".SETVALUE(Customer.Name);
      MiniSalesCreditMemo.SalesLines.Description.SETVALUE('Test Description');
      MiniSalesCreditMemo.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DisableEnterDescriptionNotification)]
    PROCEDURE PurchaseInvoiceTestShowingAndDisablingHowToEnterLineInstruction@15();
    VAR
      Vendor@1001 : Record 23;
      MiniPurchaseInvoice@1000 : TestPage 1354;
    BEGIN
      Initialize;
      LibrarySmallBusiness.CreateVendor(Vendor);

      // Test notificaiton message appears when user enters description only
      // Select not to show it again
      MiniPurchaseInvoice.OPENNEW;
      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(Vendor.Name);

      LibraryVariableStorage.Enqueue(DontShowAgain);
      MiniPurchaseInvoice.PurchLines.Description.SETVALUE('Test Description');
      MiniPurchaseInvoice.CLOSE;

      // Test no message appears
      MiniPurchaseInvoice.OPENNEW;
      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(Vendor.Name);
      MiniPurchaseInvoice.PurchLines.Description.SETVALUE('Test Description');
      MiniPurchaseInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DisableEnterDescriptionNotification)]
    PROCEDURE PurchaseCreditMemoTestShowingAndDisablingHowToEnterLineInstruction@16();
    VAR
      Vendor@1001 : Record 23;
      MiniPurchaseCreditMemo@1000 : TestPage 1369;
    BEGIN
      Initialize;
      LibrarySmallBusiness.CreateVendor(Vendor);

      // Test notificaiton message appears when user enters description only
      // Select not to show it again
      MiniPurchaseCreditMemo.OPENNEW;
      MiniPurchaseCreditMemo."Buy-from Vendor Name".SETVALUE(Vendor.Name);

      LibraryVariableStorage.Enqueue(DontShowAgain);
      MiniPurchaseCreditMemo.PurchLines.Description.SETVALUE('Test Description');
      MiniPurchaseCreditMemo.CLOSE;

      // Test no message appears
      MiniPurchaseCreditMemo.OPENNEW;
      MiniPurchaseCreditMemo."Buy-from Vendor Name".SETVALUE(Vendor.Name);
      MiniPurchaseCreditMemo.PurchLines.Description.SETVALUE('Test Description');
      MiniPurchaseCreditMemo.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DisableEnterDescriptionNotification,ConfirmHandler)]
    PROCEDURE SalesInvoiceTestPostingWithoutQuantitySpecidied@5();
    VAR
      SalesHeader@1001 : Record 36;
      MiniSalesInvoice@1000 : TestPage 1304;
      MiniSalesInvoiceList@1002 : TestPage 1306;
    BEGIN
      Initialize;

      // Test posting on card
      CreateMiniSalesInvoiceForPosting(MiniSalesInvoice,SalesHeader);
      ASSERTERROR MiniSalesInvoice.Post.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniSalesInvoice.CLOSE;

      CreateMiniSalesInvoiceForPosting(MiniSalesInvoice,SalesHeader);
      ASSERTERROR MiniSalesInvoice.Printer.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniSalesInvoice.CLOSE;

      CreateMiniSalesInvoiceForPosting(MiniSalesInvoice,SalesHeader);
      ASSERTERROR MiniSalesInvoice."Email as PDF".INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniSalesInvoice.CLOSE;

      // Test posting on List
      CreateMiniSalesInvoiceForPosting(MiniSalesInvoice,SalesHeader);
      MiniSalesInvoiceList.OPENVIEW;
      MiniSalesInvoiceList.GOTORECORD(SalesHeader);
      ASSERTERROR MiniSalesInvoiceList.Post.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniSalesInvoiceList.CLOSE;
      MiniSalesInvoice.CLOSE;

      CreateMiniSalesInvoiceForPosting(MiniSalesInvoice,SalesHeader);
      MiniSalesInvoiceList.OPENVIEW;
      MiniSalesInvoiceList.GOTORECORD(SalesHeader);
      ASSERTERROR MiniSalesInvoiceList.Printer.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniSalesInvoiceList.CLOSE;
      MiniSalesInvoice.CLOSE;

      CreateMiniSalesInvoiceForPosting(MiniSalesInvoice,SalesHeader);
      MiniSalesInvoiceList.OPENVIEW;
      MiniSalesInvoiceList.GOTORECORD(SalesHeader);
      ASSERTERROR MiniSalesInvoiceList."Email as PDF".INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniSalesInvoiceList.CLOSE;
      MiniSalesInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DisableEnterDescriptionNotification)]
    PROCEDURE SalesQuoteTestPostingWithoutQuantitySpecidied@9();
    VAR
      SalesHeader@1001 : Record 36;
      MiniSalesQuote@1000 : TestPage 1324;
      MiniSalesQuotesList@1002 : TestPage 1326;
    BEGIN
      Initialize;

      // Test posting on card
      CreateMiniSalesQuoteForPosting(MiniSalesQuote,SalesHeader);
      ASSERTERROR MiniSalesQuote.MakeInvoice.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniSalesQuote.CLOSE;

      CreateMiniSalesQuoteForPosting(MiniSalesQuote,SalesHeader);
      ASSERTERROR MiniSalesQuote.Print.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniSalesQuote.CLOSE;

      CreateMiniSalesQuoteForPosting(MiniSalesQuote,SalesHeader);
      ASSERTERROR MiniSalesQuote.Email.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniSalesQuote.CLOSE;

      // Test posting on List
      CreateMiniSalesQuoteForPosting(MiniSalesQuote,SalesHeader);
      MiniSalesQuotesList.OPENVIEW;
      MiniSalesQuotesList.GOTORECORD(SalesHeader);
      ASSERTERROR MiniSalesQuotesList.MakeInvoice.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniSalesQuotesList.CLOSE;
      MiniSalesQuote.CLOSE;

      CreateMiniSalesQuoteForPosting(MiniSalesQuote,SalesHeader);
      MiniSalesQuotesList.OPENVIEW;
      MiniSalesQuotesList.GOTORECORD(SalesHeader);
      ASSERTERROR MiniSalesQuotesList.Print.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniSalesQuotesList.CLOSE;
      MiniSalesQuote.CLOSE;

      CreateMiniSalesQuoteForPosting(MiniSalesQuote,SalesHeader);
      MiniSalesQuotesList.OPENVIEW;
      MiniSalesQuotesList.GOTORECORD(SalesHeader);
      ASSERTERROR MiniSalesQuotesList.Email.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniSalesQuotesList.CLOSE;
      MiniSalesQuote.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DisableEnterDescriptionNotification)]
    PROCEDURE SalesCreditMemoTestPostingWithoutQuantitySpecidied@11();
    VAR
      SalesHeader@1001 : Record 36;
      MiniSalesCreditMemo@1000 : TestPage 1319;
      MiniSalesCreditMemos@1002 : TestPage 1317;
    BEGIN
      Initialize;

      // Test posting on card
      CreateMiniSalesCreditMemoForPosting(MiniSalesCreditMemo,SalesHeader);
      ASSERTERROR MiniSalesCreditMemo.Post.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniSalesCreditMemo.CLOSE;

      CreateMiniSalesCreditMemoForPosting(MiniSalesCreditMemo,SalesHeader);
      ASSERTERROR MiniSalesCreditMemo.Printer.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniSalesCreditMemo.CLOSE;

      CreateMiniSalesCreditMemoForPosting(MiniSalesCreditMemo,SalesHeader);
      ASSERTERROR MiniSalesCreditMemo."Email as PDF".INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniSalesCreditMemo.CLOSE;

      // Test posting on List
      CreateMiniSalesCreditMemoForPosting(MiniSalesCreditMemo,SalesHeader);
      MiniSalesCreditMemos.OPENVIEW;
      MiniSalesCreditMemos.GOTORECORD(SalesHeader);
      ASSERTERROR MiniSalesCreditMemos.Post.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniSalesCreditMemos.CLOSE;
      MiniSalesCreditMemo.CLOSE;

      CreateMiniSalesCreditMemoForPosting(MiniSalesCreditMemo,SalesHeader);
      MiniSalesCreditMemos.OPENVIEW;
      MiniSalesCreditMemos.GOTORECORD(SalesHeader);
      ASSERTERROR MiniSalesCreditMemos.Printer.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniSalesCreditMemos.CLOSE;
      MiniSalesCreditMemo.CLOSE;

      CreateMiniSalesCreditMemoForPosting(MiniSalesCreditMemo,SalesHeader);
      MiniSalesCreditMemos.OPENVIEW;
      MiniSalesCreditMemos.GOTORECORD(SalesHeader);
      ASSERTERROR MiniSalesCreditMemos."Email as PDF".INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniSalesCreditMemos.CLOSE;
      MiniSalesCreditMemo.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DisableEnterDescriptionNotification)]
    PROCEDURE PurchaseInvoiceTestPostingWithoutQuantitySpecidied@19();
    VAR
      PurchaseHeader@1001 : Record 38;
      MiniPurchaseInvoice@1000 : TestPage 1354;
      MiniPurchaseInvoiceList@1002 : TestPage 1356;
    BEGIN
      Initialize;

      // Test posting on card
      CreateMiniPurchaseInvoiceForPosting(MiniPurchaseInvoice,PurchaseHeader);
      ASSERTERROR MiniPurchaseInvoice.Post.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniPurchaseInvoice.CLOSE;

      // Test posting on List
      CreateMiniPurchaseInvoiceForPosting(MiniPurchaseInvoice,PurchaseHeader);
      MiniPurchaseInvoiceList.OPENVIEW;
      MiniPurchaseInvoiceList.GOTORECORD(PurchaseHeader);
      ASSERTERROR MiniPurchaseInvoiceList.Post.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniPurchaseInvoiceList.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DisableEnterDescriptionNotification)]
    PROCEDURE PurchaseCreditMemoTestPostingWithoutQuantitySpecidied@18();
    VAR
      PurchaseHeader@1001 : Record 38;
      MiniPurchaseCreditMemo@1000 : TestPage 1369;
      MiniPurchaseCreditMemos@1002 : TestPage 1367;
    BEGIN
      Initialize;

      // Test posting on card
      CreateMiniPurchaseCreditMemoForPosting(MiniPurchaseCreditMemo,PurchaseHeader);
      ASSERTERROR MiniPurchaseCreditMemo.Post.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniPurchaseCreditMemo.CLOSE;

      CreateMiniPurchaseCreditMemoForPosting(MiniPurchaseCreditMemo,PurchaseHeader);
      ASSERTERROR MiniPurchaseCreditMemo.Print.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniPurchaseCreditMemo.CLOSE;

      // Test posting on List
      CreateMiniPurchaseCreditMemoForPosting(MiniPurchaseCreditMemo,PurchaseHeader);
      MiniPurchaseCreditMemos.OPENVIEW;
      MiniPurchaseCreditMemos.GOTORECORD(PurchaseHeader);
      ASSERTERROR MiniPurchaseCreditMemos.Post.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniPurchaseCreditMemos.CLOSE;
      MiniPurchaseCreditMemo.CLOSE;

      CreateMiniPurchaseCreditMemoForPosting(MiniPurchaseCreditMemo,PurchaseHeader);
      MiniPurchaseCreditMemos.OPENVIEW;
      MiniPurchaseCreditMemos.GOTORECORD(PurchaseHeader);
      ASSERTERROR MiniPurchaseCreditMemos.Print.INVOKE;
      Assert.ExpectedError(LinesMissingQuantityErr);
      MiniPurchaseCreditMemos.CLOSE;
      MiniPurchaseCreditMemo.CLOSE;
    END;

    LOCAL PROCEDURE CreateMiniSalesInvoiceForPosting@20(VAR MiniSalesInvoice@1000 : TestPage 1304;VAR SalesHeader@1001 : Record 36);
    VAR
      Customer@1003 : Record 18;
      Item@1002 : Record 27;
    BEGIN
      LibrarySmallBusiness.CreateCustomer(Customer);
      LibrarySmallBusiness.CreateItem(Item);

      MiniSalesInvoice.OPENNEW;
      MiniSalesInvoice."Sell-to Customer Name".SETVALUE(Customer.Name);

      LibraryVariableStorage.Enqueue(DontShowAgain);
      MiniSalesInvoice.SalesLines.Description.SETVALUE('Test Description');

      MiniSalesInvoice.SalesLines.NEW;
      MiniSalesInvoice.SalesLines."No.".SETVALUE(Item."No.");
      MiniSalesInvoice.SalesLines.Quantity.SETVALUE(LibraryRandom.RandIntInRange(1,20));

      MiniSalesInvoice.SalesLines.NEW;
      MiniSalesInvoice.SalesLines."No.".SETVALUE(Item."No.");

      MiniSalesInvoice.SalesLines.NEW;
      MiniSalesInvoice.SalesLines."No.".SETVALUE(Item."No.");

      FindSalesHeader(Customer,SalesHeader);
    END;

    LOCAL PROCEDURE CreateMiniSalesQuoteForPosting@63(VAR MiniSalesQuote@1000 : TestPage 1324;VAR SalesHeader@1001 : Record 36);
    VAR
      Customer@1003 : Record 18;
      Item@1002 : Record 27;
    BEGIN
      LibrarySmallBusiness.CreateCustomer(Customer);
      LibrarySmallBusiness.CreateItem(Item);

      MiniSalesQuote.OPENNEW;
      MiniSalesQuote."Sell-to Customer Name".SETVALUE(Customer.Name);

      LibraryVariableStorage.Enqueue(DontShowAgain);
      MiniSalesQuote.SalesLines.Description.SETVALUE('Test Description');

      MiniSalesQuote.SalesLines.NEW;
      MiniSalesQuote.SalesLines."No.".SETVALUE(Item."No.");
      MiniSalesQuote.SalesLines.Quantity.SETVALUE(LibraryRandom.RandIntInRange(1,20));

      MiniSalesQuote.SalesLines.NEW;
      MiniSalesQuote.SalesLines."No.".SETVALUE(Item."No.");

      MiniSalesQuote.SalesLines.NEW;
      MiniSalesQuote.SalesLines."No.".SETVALUE(Item."No.");

      FindSalesHeader(Customer,SalesHeader);
    END;

    LOCAL PROCEDURE CreateMiniSalesCreditMemoForPosting@64(VAR MiniSalesCreditMemo@1000 : TestPage 1319;VAR SalesHeader@1001 : Record 36);
    VAR
      Customer@1003 : Record 18;
      Item@1002 : Record 27;
    BEGIN
      LibrarySmallBusiness.CreateCustomer(Customer);
      LibrarySmallBusiness.CreateItem(Item);

      MiniSalesCreditMemo.OPENNEW;
      MiniSalesCreditMemo."Sell-to Customer Name".SETVALUE(Customer.Name);

      LibraryVariableStorage.Enqueue(DontShowAgain);
      MiniSalesCreditMemo.SalesLines.Description.SETVALUE('Test Description');

      MiniSalesCreditMemo.SalesLines.NEW;
      MiniSalesCreditMemo.SalesLines."No.".SETVALUE(Item."No.");
      MiniSalesCreditMemo.SalesLines.Quantity.SETVALUE(LibraryRandom.RandIntInRange(1,20));

      MiniSalesCreditMemo.SalesLines.NEW;
      MiniSalesCreditMemo.SalesLines."No.".SETVALUE(Item."No.");

      MiniSalesCreditMemo.SalesLines.NEW;
      MiniSalesCreditMemo.SalesLines."No.".SETVALUE(Item."No.");

      FindSalesHeader(Customer,SalesHeader);
    END;

    LOCAL PROCEDURE CreateMiniPurchaseInvoiceForPosting@65(VAR MiniPurchaseInvoice@1000 : TestPage 1354;VAR PurchaseHeader@1001 : Record 38);
    VAR
      Vendor@1003 : Record 23;
      Item@1002 : Record 27;
    BEGIN
      LibrarySmallBusiness.CreateVendor(Vendor);
      LibrarySmallBusiness.CreateItem(Item);

      MiniPurchaseInvoice.OPENNEW;
      MiniPurchaseInvoice."Buy-from Vendor Name".SETVALUE(Vendor.Name);

      LibraryVariableStorage.Enqueue(DontShowAgain);
      MiniPurchaseInvoice.PurchLines.Description.SETVALUE('Test Description');

      MiniPurchaseInvoice.PurchLines.NEW;
      MiniPurchaseInvoice.PurchLines."No.".SETVALUE(Item."No.");
      MiniPurchaseInvoice.PurchLines.Quantity.SETVALUE(LibraryRandom.RandIntInRange(1,20));

      MiniPurchaseInvoice.PurchLines.NEW;
      MiniPurchaseInvoice.PurchLines."No.".SETVALUE(Item."No.");

      MiniPurchaseInvoice.PurchLines.NEW;
      MiniPurchaseInvoice.PurchLines."No.".SETVALUE(Item."No.");

      FindPurchaseHeader(Vendor,PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateMiniPurchaseCreditMemoForPosting@66(VAR MiniPurchaseCreditMemo@1000 : TestPage 1369;VAR PurchaseHeader@1004 : Record 38);
    VAR
      Vendor@1003 : Record 23;
      Item@1002 : Record 27;
    BEGIN
      LibrarySmallBusiness.CreateVendor(Vendor);
      LibrarySmallBusiness.CreateItem(Item);

      MiniPurchaseCreditMemo.OPENNEW;
      MiniPurchaseCreditMemo."Buy-from Vendor Name".SETVALUE(Vendor.Name);

      LibraryVariableStorage.Enqueue(DontShowAgain);
      MiniPurchaseCreditMemo.PurchLines.Description.SETVALUE('Test Description');

      MiniPurchaseCreditMemo.PurchLines.NEW;
      MiniPurchaseCreditMemo.PurchLines."No.".SETVALUE(Item."No.");
      MiniPurchaseCreditMemo.PurchLines.Quantity.SETVALUE(LibraryRandom.RandIntInRange(1,20));

      MiniPurchaseCreditMemo.PurchLines.NEW;
      MiniPurchaseCreditMemo.PurchLines."No.".SETVALUE(Item."No.");

      MiniPurchaseCreditMemo.PurchLines.NEW;
      MiniPurchaseCreditMemo.PurchLines."No.".SETVALUE(Item."No.");

      FindPurchaseHeader(Vendor,PurchaseHeader);
    END;

    LOCAL PROCEDURE FindSalesHeader@1(Customer@1000 : Record 18;VAR SalesHeader@1001 : Record 36);
    BEGIN
      SalesHeader.SETRANGE("Sell-to Customer No.",Customer."No.");
      Assert.AreEqual(SalesHeader.COUNT,1,'Could not find the document or more documents were found');
      SalesHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseHeader@7(Vendor@1000 : Record 23;VAR PurchaseHeader@1001 : Record 38);
    BEGIN
      PurchaseHeader.SETRANGE("Buy-from Vendor No.",Vendor."No.");
      Assert.AreEqual(PurchaseHeader.COUNT,1,'Could not find the document or more documents were found');
      PurchaseHeader.FINDFIRST;
    END;

    [StrMenuHandler]
    PROCEDURE DisableEnterDescriptionNotification@2(Options@1000 : Text;VAR Choice@1001 : Integer;Instruction@1002 : Text);
    VAR
      ExpectedChoice@1003 : Variant;
    BEGIN
      Assert.IsTrue(STRPOS(Instruction,CreateInvoiceLineDescriptionTxt) > 0,'Wrong dialog was found');
      LibraryVariableStorage.Dequeue(ExpectedChoice);
      Choice := ExpectedChoice;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@56(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(Question,LeaveDocWithoutPostingTxt) > 0,Question);
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Quantity] [SMB]
    }
    END.
  }
}

