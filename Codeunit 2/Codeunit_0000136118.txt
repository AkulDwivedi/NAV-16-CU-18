OBJECT Codeunit 136118 Service Posting - Dimensions
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1023 : Codeunit 131300;
      LibraryResource@1024 : Codeunit 130511;
      LibraryService@1003 : Codeunit 131902;
      LibrarySales@1012 : Codeunit 130509;
      LibraryInventory@1022 : Codeunit 132201;
      LibraryManufacturing@1026 : Codeunit 132202;
      LibraryDimension@1004 : Codeunit 131001;
      LibraryUtility@1019 : Codeunit 131000;
      LibraryRandom@1027 : Codeunit 130440;
      LibraryVariableStorage@1025 : Codeunit 131004;
      LibrarySetupStorage@1080 : Codeunit 131009;
      Assert@1001 : Codeunit 130000;
      IsInitialized@1000 : Boolean;
      ServiceContractConfirmation@1005 : TextConst 'ENU=Do you want to create the contract using a contract template?';
      BlockDimension@1008 : TextConst 'ENU=Dimension %1 is blocked.';
      UnknownError@1009 : TextConst 'ENU=Unexpected Error.';
      BlockDimensionOnServiceHeader@1010 : TextConst 'ENU=The dimensions used in %1 %2 are invalid. Dimension %3 is blocked.';
      BlockDimensionOnItemLine@1011 : TextConst 'ENU=The dimensions used in %1 %2, line no. %3 are invalid. Dimension %4 is blocked.';
      LimitedDimensionCombination@1013 : TextConst 'ENU=The combination of dimensions used in %1 %2 is blocked. Dimension combinations %3 - %4 and %5 - %6 can''t be used concurrently.';
      LimitedDimensionItemLine@1014 : TextConst 'ENU=The combination of dimensions used in %1 %2, line no. %3 is blocked. Dimension combinations %4 - %5 and %6 - %7 can''t be used concurrently.';
      MandatoryDimensionOnHeader@1018 : TextConst 'ENU=The dimensions used in %1 %2 are invalid. Select a %3 for the %4 %5 for Customer %6.';
      MandatoryDimensionServiceLine@1017 : TextConst 'ENU=The dimensions used in %1 %2, line no. %3 are invalid. Select a %4 for the %5 %6 for %7 %8.';
      SameCodeDimensionHeader@1016 : TextConst 'ENU=The dimensions used in %1 %2 are invalid. Select %3 %4 for the %5 %6 for Customer %7.';
      SameCodeDimensionLine@1015 : TextConst 'ENU=The dimensions used in %1 %2, line no. %3 are invalid. Select %4 %5 for the %6 %7 for %8 %9.';
      NoCodeDimensionHeader@1007 : TextConst 'ENU=The dimensions used in %1 %2 are invalid. %3 %4 must not be mentioned for Customer %5.';
      NoCodeDimensionLine@1006 : TextConst 'ENU=The dimensions used in %1 %2, line no. %3 are invalid. %4 %5 must not be mentioned for %6 %7.';
      DimensionSetIDErr@1002 : TextConst 'ENU=Dimension Set ID is incorrect on Posted Service Shipment Line';
      IncorrectShortcutDimensionValueErr@1102 : TextConst 'ENU=Incorrect Shortcut Dimension value for %1';

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE DimOnServiceHeader@6();
    VAR
      Customer@1000 : Record 18;
      ServiceHeader@1001 : Record 5900;
      SalespersonPurchaser@1004 : Record 13;
      ResponsibilityCenter@1006 : Record 5714;
      ServiceOrderType@1007 : Record 5903;
      DefaultDimension@1003 : Record 352;
      Dimension@1005 : Record 348;
      DimensionValue@1009 : Record 349;
      ContractNo@1008 : Code[20];
    BEGIN
      // Test Dimensions on Service Header.

      // 1. Setup: Create Customer, Salesperson, Responsibility Center, Service Order Type, Service Contract, Create Default Dimensions
      // for all and Sign the Contract.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      LibraryService.CreateResponsibilityCenter(ResponsibilityCenter);
      LibraryService.CreateServiceOrderType(ServiceOrderType);

      CreateDimensionAndDimensionValue(Dimension,DimensionValue);

      LibraryDimension.CreateDefaultDimensionCustomer(
        DefaultDimension,Customer."No.",Dimension.Code,DimensionValue.Code);

      CreateDimensionAndDimensionValue(Dimension,DimensionValue);

      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Salesperson/Purchaser",SalespersonPurchaser.Code,Dimension.Code,
        DimensionValue.Code);

      CreateDimensionAndDimensionValue(Dimension,DimensionValue);

      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Responsibility Center",ResponsibilityCenter.Code,Dimension.Code,
        DimensionValue.Code);

      CreateDimensionAndDimensionValue(Dimension,DimensionValue);

      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Service Order Type",ServiceOrderType.Code,Dimension.Code,DimensionValue.Code);

      ContractNo := CreateAndSignServiceContract(Customer."No.");

      // 2. Exercise: Create Service Header, Update Salesperson, Responsibility Center, Contract No. and Service Order Type on Service
      // Header.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      UpdateServiceHeader(ServiceHeader,SalespersonPurchaser.Code,ResponsibilityCenter.Code,ContractNo,ServiceOrderType.Code);

      // 3. Verify: Verify Dimensions on Service Header.
      VerifyDimForCustomer(ServiceHeader,Customer."No.");
      VerifyDimForResponsibility(ServiceHeader,ResponsibilityCenter.Code);
      VerifyDimForSalesperson(ServiceHeader,SalespersonPurchaser.Code);
      VerifyDimForOrderType(ServiceHeader,ServiceOrderType.Code);
      VerifyDimForContract(ServiceHeader);
    END;

    [Test]
    PROCEDURE DimOnServiceItemLine@30();
    VAR
      Customer@1000 : Record 18;
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1003 : Record 5901;
      Dimension@1005 : Record 348;
      DefaultDimension@1006 : Record 352;
      ServiceItemNo@1002 : Code[20];
      ServiceItemGroupCode@1004 : Code[10];
    BEGIN
      // Test Dimensions on Service Item Line.

      // 1. Setup: Create Customer, Service Item group, Service Item, Create Default Dimension for Service Item Group and Service Item.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      ServiceItemGroupCode := CreateServiceItemGroup;

      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Service Item Group",ServiceItemGroupCode,Dimension.Code,FindDimensionValue(Dimension.Code));

      ServiceItemNo := CreateServiceItem(Customer."No.",ServiceItemGroupCode);
      Dimension.NEXT;
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Service Item",ServiceItemNo,Dimension.Code,FindDimensionValue(Dimension.Code));

      // 2. Exercise: Create Service Header and Service Item Line.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItemNo);

      // 3. Verify: Verify Dimensions on Service Item Line.
      VerifyDimForServiceItem(ServiceItemLine,ServiceItemNo);
      VerifyDimForServiceItemGrp(ServiceItemLine,ServiceItemGroupCode);
    END;

    [Test]
    PROCEDURE ShortcutDimOnServiceItemLine@65();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1003 : Record 5901;
      ServiceItemNo@1002 : Code[20];
      ShortcutDimCode@1009 : ARRAY [2] OF Code[20];
      CustomerNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Service] [Dimensions]
      // [SCENARIO 118320] Shortcut Dimension is updated in Service Item Line when create new line with Service Item No.
      Initialize;

      // [GIVEN] Create Customer and Service Order with Global Dimensions
      CustomerNo := CreateCustomerWithDefGlobalDimensions(ShortcutDimCode);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CustomerNo);
      // [GIVEN] Create Service Item
      ServiceItemNo := CreateServiceItem(CustomerNo,CreateServiceItemGroup);

      // [WHEN] Create Service Item Line
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItemNo);

      // [THEN] Shortcut Dimensions are updated in Service Item Line
      Assert.AreEqual(
        ShortcutDimCode[1],ServiceItemLine."Shortcut Dimension 1 Code",
        STRSUBSTNO(IncorrectShortcutDimensionValueErr,ServiceItemLine.FIELDCAPTION("Shortcut Dimension 1 Code")));
      Assert.AreEqual(
        ShortcutDimCode[2],ServiceItemLine."Shortcut Dimension 2 Code",
        STRSUBSTNO(IncorrectShortcutDimensionValueErr,ServiceItemLine.FIELDCAPTION("Shortcut Dimension 2 Code")));
    END;

    [Test]
    PROCEDURE DimOnServiceLine@9();
    VAR
      ServiceLine@1000 : Record 5902;
      CustomerNo@1008 : Code[20];
      ItemNo@1014 : Code[20];
      ResourceNo@1006 : Code[20];
      GLAccountNo@1011 : Code[20];
    BEGIN
      // Test Dimensions on Service Line for Type Item, Resource and G/L Account.

      // 1. Setup: Create Customer, Item, Resource, G/L Account and assign Default Dimension on all.
      CreateItemResourceGLDefaultDim(CustomerNo,ItemNo,ResourceNo,GLAccountNo);

      // 2. Exercise: Create Service Header, Service Line for Type Item, Resource and G/L Account.
      CreateServiceOrderWithLines(ServiceLine,CustomerNo,ItemNo,ResourceNo,GLAccountNo);

      // 3. Verify: Verify Dimensions on Service Line for Type Item, Resource and G/L Account.
      VerifyDimOnServiceLine(ServiceLine);
    END;

    [Test]
    PROCEDURE DimOnServiceLineCost@12();
    VAR
      Customer@1000 : Record 18;
      ServiceHeader@1001 : Record 5900;
      ServiceCost@1008 : Record 5905;
      ServiceLine@1013 : Record 5902;
    BEGIN
      // Test Dimensions on Service Line for Type Cost and Blank.

      // 1. Setup: Create Customer.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateServiceCost(ServiceCost);

      // 2. Exercise: Create Service Header and Service Line for Type Cost and Blank.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::" ",'');

      // 3. Verify: Verify Dimensions on Service Line for Type Cost and Blank.
      VerifyDimOnServiceLineCost(ServiceLine);
    END;

    [Test]
    PROCEDURE DimPriorityOnServiceLine@13();
    VAR
      Dimension@1000 : Record 348;
      ServiceLine@1013 : Record 5902;
      DefaultDimension@1001 : Record 352;
      CustomerNo@1011 : Code[20];
      ItemNo@1007 : Code[20];
      ResourceNo@1006 : Code[20];
      GLAccountNo@1002 : Code[20];
    BEGIN
      // Test Dimensions on Service Line according to the Dimension Priority.

      // 1. Setup: Create Customer, Item, Resource, G/L Account and assign Default Dimension on all.
      CreateItemResourceGLDefaultDim(CustomerNo,ItemNo,ResourceNo,GLAccountNo);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDefaultDimensionCustomer(DefaultDimension,CustomerNo,Dimension.Code,FindDimensionValue(Dimension.Code));
      UpdateDefaultDimForItem(ItemNo);
      UpdateDefaultDimForResource(ResourceNo);
      UpdateDefaultDimForGLAccount(GLAccountNo);

      // 2. Exercise: Create Service Header, Service Line for Type Item, Resource and G/L Account.
      CreateServiceOrderWithLines(ServiceLine,CustomerNo,ItemNo,ResourceNo,GLAccountNo);

      // 3. Verify: Verify Dimensions on Service Line.
      VerifyPriorityDimOnServiceLine(ServiceLine);
    END;

    [Test]
    PROCEDURE BlockDimOnHeader@15();
    VAR
      Customer@1000 : Record 18;
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      DimensionSetEntry@1003 : Record 480;
    BEGIN
      // Test error occurs on Selecting Block Dimension on Service Header.

      // 1. Setup: Create Customer, Select Dimension and Set Blocked to True.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryDimension.FindDimension(Dimension);
      ModifyDimension(Dimension,TRUE);

      // 2. Exercise: Create Service Header.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");

      // 3. Verify: Verify error occurs "Dimension Blocked" on Selecting Block Dimension on Service Header.
      DimensionSetEntry.INIT;
      ASSERTERROR DimensionSetEntry.VALIDATE("Dimension Code",Dimension.Code);
      Assert.AreEqual(STRSUBSTNO(BlockDimension,Dimension.Code),GETLASTERRORTEXT,UnknownError);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    PROCEDURE ShipBlockDimOnHeader@48();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
    BEGIN
      // Test error occurs on Posting Service Order as Ship with Block Dimension on Service Header.

      // 1. Setup: Create Customer, Create Default Dimension for Customer, Block the assign dimension and Create Service Header and line.
      CreateServiceHeaderBlockDim(ServiceHeader,Dimension);
      ModifyDimension(Dimension,TRUE);

      // 2. Exercise: Post Service Order as Ship.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Ship with Block Dimension on Service Header.
      VerifyBlockDimOnServiceHeader(ServiceHeader,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    PROCEDURE InvBlockDimOnHeader@70();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
    BEGIN
      // Test error occurs on Posting Service Order as Invoice with Block Dimension on Service Header.

      // 1. Setup: Create Customer, Create Default Dimension for Customer, Block the assign dimension and Create Service Header.
      CreateServiceHeaderBlockDim(ServiceHeader,Dimension);

      // 2. Exercise: Post Service Order as Invoice.
      ModifyDimension(Dimension,TRUE);
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Invoice with Block Dimension on Service Header.
      VerifyBlockDimOnServiceHeader(ServiceHeader,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    PROCEDURE ShipInvBlockDimOnHeader@71();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
    BEGIN
      // Test error occurs on Posting Service Order as Ship and Invoice with Block Dimension on Service Header.

      // 1. Setup: Create Customer, Create Default Dimension for Customer, Block the assign dimension and Create Service Header.
      CreateServiceHeaderBlockDim(ServiceHeader,Dimension);

      // 2. Exercise: Post Service Order as Ship and Invoice.
      ModifyDimension(Dimension,TRUE);
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Ship and Invoice with Block Dimension on
      // Service Header.
      VerifyBlockDimOnServiceHeader(ServiceHeader,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    PROCEDURE ShipConsumeBlockDimOnHeader@72();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
    BEGIN
      // Test error occurs on Posting Service Order as Ship and Consume with Block Dimension on Service Header.

      // 1. Setup: Create Customer, Create Default Dimension for Customer, Block the assign dimension and Create Service Header.
      CreateServiceHeaderBlockDim(ServiceHeader,Dimension);

      // 2. Exercise: Post Service Order as Ship and Consume.
      ModifyDimension(Dimension,TRUE);
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Ship and Consume with Block Dimension on
      // Service Header.
      VerifyBlockDimOnServiceHeader(ServiceHeader,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE ShipBlockDimOnItemLine@20();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceItemLine@1004 : Record 5901;
    BEGIN
      // Test error occurs on Posting Service Order as Ship with Block Dimension on Service Item Line.

      // 1. Create Customer, Create Service Item, Create Default Dimension for Service Item, Create Service Header, Service Item Line,
      // Service Line for Type Item, update Quantity on Line and Block the assigned Dimension.
      CreateItemLineBlockDim(ServiceItemLine,Dimension,FALSE);
      ModifyDimension(Dimension,TRUE);
      ServiceHeader.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.");

      // 2. Exercise: Post Service Order as Ship.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Ship with Block Dimension on Service Item Line.
      VerifyBlockDimOnItemLine(ServiceItemLine,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE InvBlockDimOnItemLine@19();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceItemLine@1004 : Record 5901;
    BEGIN
      // Test error occurs on Posting Service Order as Invoice with Block Dimension on Service Item Line.

      // 1. Setup: Create Customer, Service Item, Create Default Dimension for Service Item, Create Service Header, Service Item Line,
      // Service Line for Type Item, update Quantity on Line, Post Service Order as Ship and Block the assigned Dimension.
      CreateItemLineBlockDim(ServiceItemLine,Dimension,FALSE);
      ServiceHeader.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      ModifyDimension(Dimension,TRUE);

      // 2. Exercise: Post Service Order as Invoice.
      ServiceHeader.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.");
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Invoice with Block Dimension on Service Item Line.
      VerifyBlockDimOnItemLine(ServiceItemLine,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE ShipInvBlockDimOnItemLine@17();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceItemLine@1004 : Record 5901;
    BEGIN
      // Test error occurs on Posting Service Order as Ship and Invoice with Block Dimension on Service Item Line.

      // 1. Setup: Create Customer, Service Item, Create Default Dimension for Service Item, Create Service Header, Service Item Line,
      // Service Line for Type Item, update Quantity on Line and Block the assigned Dimension.
      CreateItemLineBlockDim(ServiceItemLine,Dimension,FALSE);
      ModifyDimension(Dimension,TRUE);
      ServiceHeader.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.");

      // 2. Exercise: Post Service Order as Ship and Invoice.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Ship and Invoice with Block Dimension on
      // Service Item Line.
      VerifyBlockDimOnItemLine(ServiceItemLine,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE ShipConsumeBlockDimOnItemLine@16();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceItemLine@1004 : Record 5901;
    BEGIN
      // Test error occurs on Posting Service Order as Ship and Consume with Block Dimension on Service Item Line.

      // 1. Setup: Create Customer, Service Item, Create Default Dimension for Service Item, Create Service Header, Service Item Line,
      // Service Line for Type Item, update Qty. to consume on Line and Block the assigned Dimension.
      CreateItemLineBlockDim(ServiceItemLine,Dimension,TRUE);
      ServiceHeader.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.");
      ModifyDimension(Dimension,TRUE);

      // 2. Exercise: Post Service Order as Ship and Consume.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Ship and Consume with Block Dimension on
      // Service Item Line.
      VerifyBlockDimOnItemLine(ServiceItemLine,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    PROCEDURE ShipDimBlockItem@25();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Test error occurs on Posting Service Order as Ship with Blocked Dimension on Service Line of Type Item.

      // 1. Setup: Create Customer, Item, Create Default Dimension for Item, Create Service Header, Service Item Line, Service Line of
      // Type Item and Block assigned Dimension.
      CreateLineBlockDimItem(ServiceLine,Dimension,FALSE);
      ModifyDimension(Dimension,TRUE);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");

      // 2. Exercise: Post Service Order as Ship.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Ship with Blocked Dimension on Service Line
      // of Type Item.
      VerifyBlockDimOnLine(ServiceLine,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    PROCEDURE InvDimBlockItem@26();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Test error occurs on Posting Service Order as Invoice with Blocked Dimension on Service Line of Type Item.

      // 1. Setup: Create Customer, Item, Create Default Dimension for Item, Create Service Header, Service Item Line, Service Line of
      // Type Item, Post Service Order as Ship and Block assigned Dimension.
      CreateLineBlockDimItem(ServiceLine,Dimension,FALSE);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      ModifyDimension(Dimension,TRUE);

      // 2. Exercise: Post Service Order as Invoice.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Invoice with Blocked Dimension on Service Line
      // of Type Item.
      VerifyBlockDimOnLine(ServiceLine,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    PROCEDURE ShipInvDimBlockItem@28();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Test error occurs on Posting Service Order as Ship and Invoice with Blocked Dimension on Service Line of Type Item.

      // 1. Setup: Create Customer, Item, Create Default Dimension for Item, Create Service Header, Service Item Line, Service Line of
      // Type Item and Block assigned Dimension.
      CreateLineBlockDimItem(ServiceLine,Dimension,FALSE);
      ModifyDimension(Dimension,TRUE);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");

      // 2. Exercise: Post Service Order as Ship and Invoice.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Ship and Invoice with Blocked Dimension on Service
      // Line of Type Item.
      VerifyBlockDimOnLine(ServiceLine,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    PROCEDURE ConsumeDimBlockItem@31();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Test error occurs on Posting Service Order as Ship and Consume with Blocked Dimension on Service Line of Type Item.

      // 1. Setup: Create Customer, Item, Create Default Dimension for Item, Create Service Header, Service Item Line, Service Line of
      // Type Item and Block assigned Dimension.
      CreateLineBlockDimItem(ServiceLine,Dimension,TRUE);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ModifyDimension(Dimension,TRUE);

      // 2. Exercise: Post Service Order as Ship and Consume.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Ship and Consume with Blocked Dimension on Service
      // Line of Type Item.
      VerifyBlockDimOnLine(ServiceLine,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    PROCEDURE ShipDimBlockResource@92();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Test error occurs on Posting Service Order as Ship with Blocked Dimension on Service Line of Type Resource.

      // 1. Setup: Create Customer, Service Resource, Create Default Dimension for Resource, Create Service Header, Service Item Line
      // Service Line of Type Resource and Block assigned Dimension.
      CreateLineBlockDimResource(ServiceLine,Dimension,FALSE);
      ModifyDimension(Dimension,TRUE);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");

      // 2. Exercise: Post Service Order as Ship.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Ship with Blocked Dimension on Service Line of
      // Type Resource.
      VerifyBlockDimOnLine(ServiceLine,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    PROCEDURE InvDimBlockResource@94();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Test error occurs on Posting Service Order as Invoice with Blocked Dimension on Service Line of Type Resource.

      // 1. Setup: Create Customer, Service Resource, Create Default Dimension for Resource, Create Service Header, Service Item Line
      // Service Line of Type Resource, Post Service Order as Ship and Block assigned Dimension.
      CreateLineBlockDimResource(ServiceLine,Dimension,FALSE);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      ModifyDimension(Dimension,TRUE);

      // 2. Exercise: Post Service Order as Invoice.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Invoice with Blocked Dimension on Service Line of
      // Type Resource.
      VerifyBlockDimOnLine(ServiceLine,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    PROCEDURE ShipInvDimBlockResource@95();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Test error occurs on Posting Service Order as Ship and Invoice with Blocked Dimension on Service Line of Type Resource.

      // 1. Setup: Create Customer, Service Resource, Create Default Dimension for Resource, Create Service Header, Service Item Line
      // Service Line of Type Resource and Block assigned Dimension.
      CreateLineBlockDimResource(ServiceLine,Dimension,FALSE);
      ModifyDimension(Dimension,TRUE);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");

      // 2. Exercise: Post Service Order as Ship and Invoice.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Ship and Invoice with Blocked Dimension on Service
      // Line of Type Resource.
      VerifyBlockDimOnLine(ServiceLine,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    PROCEDURE ConsumeDimBlockResource@96();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Test error occurs on Posting Service Order as Ship and Consume with Blocked Dimension on Service Line of Type Resource.

      // 1. Setup: Create Customer, Service Resource, Create Default Dimension for Resource, Create Service Header, Service Item Line
      // Service Line of Type Resource and Block assigned Dimension.
      CreateLineBlockDimResource(ServiceLine,Dimension,TRUE);
      ModifyDimension(Dimension,TRUE);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");

      // 2. Exercise: Post Service Order as Ship and Consume.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Ship and Consume with Blocked Dimension on Service
      // Line of Type Resource.
      VerifyBlockDimOnLine(ServiceLine,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    PROCEDURE ShipDimBlockCost@36();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Test error occurs on Posting Service Order as Ship with Blocked Dimension on Service Line of Type Cost.

      // 1. Setup: Create Customer, Service Header, Service Item Line, Service Line of Type Cost, Create Document Dimension for Type
      // Cost and Block assigned Dimension.
      CreateLineBlockDimCost(ServiceLine,Dimension);
      ModifyDimension(Dimension,TRUE);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");

      // 2. Exercise: Post Service Order as Ship.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Ship with Blocked Dimension on Service Line of
      // Type Cost.
      VerifyBlockDimOnLine(ServiceLine,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    PROCEDURE InvDimBlockCost@38();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Test error occurs on Posting Service Order as Invoice with Blocked Dimension on Service Line of Type Cost.

      // 1. Setup: Create Customer, Service Header, Service Item Line, Service Line of Type Cost, Create Document Dimension for Type
      // Cost, Post Service Order as Ship and Block assigned Dimension.
      CreateLineBlockDimCost(ServiceLine,Dimension);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      ModifyDimension(Dimension,TRUE);

      // 2. Exercise: Post Service Order as Invoice.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Invoice with Blocked Dimension on Service Line of
      // Type Cost.
      VerifyBlockDimOnLine(ServiceLine,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    PROCEDURE ShipInvDimBlockCost@39();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Test error occurs on Posting Service Order as Ship and Invoice with Blocked Dimension on Service Line of Type Cost.

      // 1. Setup: Create Customer, Service Header, Service Item Line, Service Line of Type Cost, Create Document Dimension for Type
      // Cost and Block assigned Dimension.
      CreateLineBlockDimCost(ServiceLine,Dimension);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ModifyDimension(Dimension,TRUE);

      // 2. Exercise: Post Service Order as Ship and Invoice.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Ship and Invoice with Blocked Dimension on Service
      // Line of Type Cost.
      VerifyBlockDimOnLine(ServiceLine,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    PROCEDURE ShipDimBlockGLAccount@42();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Test error occurs on Posting Service Order as Ship with Blocked Dimension on Service Line of Type G/L Account.

      // 1. Setup: Create Customer, Create G/L Account, Default Dimension for G/L Account, Create Service Header, Service Item Line,
      // Service Line of Type G/L Account and Block assigned Dimension.
      CreateLineBlockDimGLAccount(ServiceLine,Dimension);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ModifyDimension(Dimension,TRUE);

      // 2. Exercise: Post Service Order as Ship.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Ship with Blocked Dimension on Service Line of
      // Type G/L Account.
      VerifyBlockDimOnLine(ServiceLine,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    PROCEDURE InvDimBlockGLAccount@43();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Test error occurs on Posting Service Order as Invoice with Blocked Dimension on Service Line of Type G/L Account.

      // 1. Setup: Create Customer, Create G/L Account, Create Default Dimension for G/L Account, Create Service Header, Service
      // Item Line, Service Line of Type G/L Account, Post Service Order as Ship and Block assigned Dimension.
      CreateLineBlockDimGLAccount(ServiceLine,Dimension);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      ModifyDimension(Dimension,TRUE);

      // 2. Exercise: Post Service Order as Invoice.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Invoice with Blocked Dimension on Service
      // Line of Type G/L Account.
      VerifyBlockDimOnLine(ServiceLine,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    PROCEDURE ShipInvDimBlockGLAccount@45();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Test error occurs on Posting Service Order as Ship and Invoice with Blocked Dimension on Service Line of Type G/L Account.

      // 1. Create Customer, Create G/L Account, Create Default Dimension for G/L Account, Create Service Header, Service Item Line,
      // Service Line of Type G/L Account and Block assigned Dimension.
      CreateLineBlockDimGLAccount(ServiceLine,Dimension);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ModifyDimension(Dimension,TRUE);

      // 2. Exercise: Post Service Order as Ship and Invoice.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Blocked" on Posting Service Order as Ship and Invoice with Blocked Dimension on Service
      // Line of Type G/L Account.
      VerifyBlockDimOnLine(ServiceLine,Dimension.Code);

      // 4. Cleanup: Set Blocked False for Dimension.
      ModifyDimension(Dimension,FALSE);
    END;

    [Test]
    PROCEDURE ShipLimitedDimHeader@22();
    VAR
      ServiceHeader@1002 : Record 5900;
      DimensionValueCombination@1004 : Record 351;
    BEGIN
      // Test error occurs on Posting as Ship Service Order with Dimension set Limited Dimension Combination on Service Header.

      // 1. Setup: Create Customer, Create Service Header and Create Document Dimension on Service Header.
      CreateLimitedDimHeader(ServiceHeader,DimensionValueCombination);

      // 2. Exercise: Post Service Order as Ship
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verify error occurs on Posting Service Order as Ship with Limited Dimension Combination on Service
      // Header.
      VerifyLimitedDimCombination(ServiceHeader,DimensionValueCombination);
    END;

    [Test]
    PROCEDURE InvLimitedDimHeader@69();
    VAR
      ServiceHeader@1002 : Record 5900;
      DimensionValueCombination@1004 : Record 351;
    BEGIN
      // Test error occurs on Posting as Invoice Service Order with Dimension set Limited Dimension Combination on Service Header.

      // 1. Setup: Create Customer, Create Service Header and Create Document Dimension on Service Header.
      CreateLimitedDimHeader(ServiceHeader,DimensionValueCombination);

      // 2. Exercise: Post Service Order as Invoice.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);

      // 3. Verify: Verify error occurs on Posting Service Order as Invoice with Limited Dimension Combination on Service Header.
      VerifyLimitedDimCombination(ServiceHeader,DimensionValueCombination);
    END;

    [Test]
    PROCEDURE ShipInvLimitedDimHeader@73();
    VAR
      ServiceHeader@1002 : Record 5900;
      DimensionValueCombination@1004 : Record 351;
    BEGIN
      // Test error occurs on Posting as Ship and Invoice Service Order with Dimension set Limited Dimension Combination on Service
      // Header.

      // 1. Setup: Create Customer, Create Service Header and Create Document Dimension on Service Header.
      CreateLimitedDimHeader(ServiceHeader,DimensionValueCombination);

      // 2. Exercise: Post Service Order as Ship and Invoice.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs on Posting Service Order as Ship and Invoice with Limited Dimension Combination on Service
      // Header.
      VerifyLimitedDimCombination(ServiceHeader,DimensionValueCombination);
    END;

    [Test]
    PROCEDURE ShipConsumeLimitedDimHeader@74();
    VAR
      ServiceHeader@1002 : Record 5900;
      DimensionValueCombination@1004 : Record 351;
    BEGIN
      // Test error occurs on Posting as Ship and Consume Service Order with Dimension set Limited Dimension Combination on Service
      // Header.

      // 1. Setup: Create Customer, Create Service Header and Create Document Dimension on Service Header.
      CreateLimitedDimHeader(ServiceHeader,DimensionValueCombination);

      // 2. Exercise: Post Service Order as Ship and Consume.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify error occurs on Posting Service Order as Ship and Consume with Limited Dimension Combination on Service
      // Header.
      VerifyLimitedDimCombination(ServiceHeader,DimensionValueCombination);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE ShipLimitedDimItemLine@55();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceItemLine@1006 : Record 5901;
      DimensionValueCombination@1000 : Record 351;
    BEGIN
      // Test error occurs on Posting as Ship Service Order with Dimension set Limited Dimension Combination on Service Item Line.

      // 1. Setup: Create Customer, Service Item, Service Header, Service Item Line, Service Line.
      CreateServiceOrderWithItem(ServiceItemLine,FALSE);

      // 2. Exercise: Create Document Dimension on Service Item Line.
      ServiceHeader.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.");
      CreateLimitedDimItemLine(DimensionValueCombination,ServiceItemLine);

      // 3. Verify: Verify error occurs on Posting Service Order as Ship with Limited Dimension Combination on Service Item Line.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      VerifyLimitedDimItemLine(ServiceItemLine,DimensionValueCombination);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE InvLimitedDimItemLine@54();
    VAR
      ServiceHeader@1005 : Record 5900;
      ServiceItemLine@1003 : Record 5901;
      DimensionValueCombination@1000 : Record 351;
    BEGIN
      // Test error occurs on Posting as Invoice Service Order with Dimension set Limited Dimension Combination on Service Item Line.

      // 1. Setup: Create Customer, Service Item, Service Header, Service Item Line and Service Line.
      CreateServiceOrderWithItem(ServiceItemLine,FALSE);

      // 2. Exercise: Post Service Order as Ship and Create Document Dimension on Service Item Line.
      ServiceHeader.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      ServiceItemLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceItemLine.FINDFIRST;
      CreateLimitedDimItemLine(DimensionValueCombination,ServiceItemLine);

      // 2. Verify: Verify error occurs on Posting Service Order as Invoice with Limited Dimension Combination on Service Item Line.
      ServiceHeader.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.");
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);
      VerifyLimitedDimItemLine(ServiceItemLine,DimensionValueCombination);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE ShipInvLimitedDimItemLine@53();
    VAR
      ServiceHeader@1005 : Record 5900;
      ServiceItemLine@1003 : Record 5901;
      DimensionValueCombination@1000 : Record 351;
    BEGIN
      // Test error occurs on Posting as Ship and Invoice Service Order with Dimension set Limited Dimension Combination on Service Item
      // Line.

      // 1. Setup: Create Customer, Service Item, Service Header, Service Item Line and Service Line.
      CreateServiceOrderWithItem(ServiceItemLine,FALSE);

      // 2. Exercise: Create Document Dimension on Service Item Line.
      ServiceHeader.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.");
      CreateLimitedDimItemLine(DimensionValueCombination,ServiceItemLine);

      // 3. Verify: Verify error occurs on Posting Service Order as Ship and Invoice with Limited Dimension Combination on Service Item
      // Line.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
      VerifyLimitedDimItemLine(ServiceItemLine,DimensionValueCombination);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE ConsumeLimitedDimItemLine@49();
    VAR
      ServiceHeader@1005 : Record 5900;
      ServiceItemLine@1003 : Record 5901;
      DimensionValueCombination@1000 : Record 351;
    BEGIN
      // Test error occurs on Posting as Ship and Consume Service Order with Dimension set Limited Dimension Combination on Service Item
      // Line.

      // 1. Setup: Create Customer, Service Item, Service Header, Service Item Line and Service Line.
      CreateServiceOrderWithItem(ServiceItemLine,TRUE);

      // 2. Exercise: Create Document Dimension on Service Item Line and update Qty. to consume on Service Line.
      ServiceHeader.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.");
      CreateLimitedDimItemLine(DimensionValueCombination,ServiceItemLine);

      // 3. Verify: Verify error occurs on Posting Service Order as Ship and Consume with Limited Dimension Combination on Service Item
      // Line.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
      VerifyLimitedDimItemLine(ServiceItemLine,DimensionValueCombination);
    END;

    [Test]
    PROCEDURE ShipDimLimitedItem@142();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1008 : Record 5902;
      DimensionValueCombination@1004 : Record 351;
    BEGIN
      // Test error occurs on Posting as Ship Service Order with Dimension set Limited Dimension Combination on Service Line of Type Item.

      // 1. Setup: Create Customer, Item, Service Header, Service Item Line, Service Line of Type Item and Create Document Dimension on
      // Service Line.
      CreateServiceOrderItem(ServiceLine,FALSE);
      CreateLimitedDimServiceLine(DimensionValueCombination,ServiceLine);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");

      // 2. Exercise: Post Service Order as Ship.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verify error occurs on Posting Service Order as Ship with Limited Dimension Combination on Service Line of Type Item.
      VerifyLimitedDimLine(ServiceLine,DimensionValueCombination);
    END;

    [Test]
    PROCEDURE InvDimLimitedItem@161();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1008 : Record 5902;
      DimensionValueCombination@1004 : Record 351;
    BEGIN
      // Test error occurs on Posting as Invoice Service Order with Dimension set Limited Dimension Combination on Service Line of Type
      // Item.

      // 1. Setup: Create Customer, Item, Service Header, Service Item Line, Service Line of Type Item, Post Service Order as Ship and
      // Create Document Dimension on Service Line.
      CreateServiceOrderItem(ServiceLine,FALSE);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FINDFIRST;
      CreateLimitedDimServiceLine(DimensionValueCombination,ServiceLine);

      // 2. Exercise: Post Service Order as Invoice.
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);

      // 3. Verify: Verify error occurs on Posting Service Order as Invoice with Limited Dimension Combination on Service Line of Type
      // Item.
      VerifyLimitedDimLine(ServiceLine,DimensionValueCombination);
    END;

    [Test]
    PROCEDURE ShipInvDimLimitedItem@162();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1008 : Record 5902;
      DimensionValueCombination@1004 : Record 351;
    BEGIN
      // Test error occurs on Posting as Ship and Invoice Service Order with Dimension set Limited Dimension Combination on Service Line
      // of Type Item.

      // 1. Setup: Create Customer, Item, Service Header, Service Item Line, Service Line of Type Item and Create Document Dimension on
      // Service Line.
      CreateServiceOrderItem(ServiceLine,FALSE);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      CreateLimitedDimServiceLine(DimensionValueCombination,ServiceLine);

      // 2. Exercise: Post Service Order as Ship and Invoice.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs on Posting Service Order as Ship and Invoice with Limited Dimension Combination on Service Line of
      // Type Item.
      VerifyLimitedDimLine(ServiceLine,DimensionValueCombination);
    END;

    [Test]
    PROCEDURE ConsumeDimLimitedItem@163();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1008 : Record 5902;
      DimensionValueCombination@1004 : Record 351;
    BEGIN
      // Test error occurs on Posting as Ship and Consume Service Order with Dimension set Limited Dimension Combination on Service Line
      // of Type Item.

      // 1. Setup: Create Customer, Item, Service Header, Service Item Line, Service Line of Type Item, Update Qty to consume on Service
      // Line and Create Document Dimension on Service Line.
      CreateServiceOrderItem(ServiceLine,TRUE);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      CreateLimitedDimServiceLine(DimensionValueCombination,ServiceLine);

      // 2. Exercise: Post Service Order as Ship and Consume.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify error occurs on Posting Service Order as Ship and Consume with Limited Dimension Combination on Service Line of
      // Type Item.
      VerifyLimitedDimLine(ServiceLine,DimensionValueCombination);
    END;

    [Test]
    PROCEDURE ShipDimLimitedResource@175();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
      DimensionValueCombination@1009 : Record 351;
    BEGIN
      // Test error occurs on Posting as Ship Service Order with Dimension set Limited Dimension Combination on Service Line of Type
      // Resource.

      // 1. Setup: Create Customer, Resource, Service Header, Service Item Line, Service Line of Type Resource and Create Document
      // Dimension on Service Line.
      CreateServiceOrderResource(ServiceLine,FALSE);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      CreateLimitedDimServiceLine(DimensionValueCombination,ServiceLine);

      // 2. Exercise: Post Service Order as Ship.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verify error occurs on Posting Service Order as Ship with Limited Dimension Combination on Service Line of Type
      // Resource.
      VerifyLimitedDimLine(ServiceLine,DimensionValueCombination);
    END;

    [Test]
    PROCEDURE InvDimLimitedResource@183();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
      DimensionValueCombination@1009 : Record 351;
    BEGIN
      // Test error occurs on Posting as Invoice Service Order with Dimension set Limited Dimension Combination on Service Line of Type
      // Resource.

      // 1. Setup: Create Customer, Resource, Service Header, Service Item Line, Service Line of Type Resource, Post Service Order as Ship
      // and Create Document Dimension on Service Line.
      CreateServiceOrderResource(ServiceLine,FALSE);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FINDFIRST;
      CreateLimitedDimServiceLine(DimensionValueCombination,ServiceLine);

      // 2. Exercise: Post Service Order as Invoice.
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);

      // 3. Verify: Verify error occurs on Posting Service Order as Invoice with Limited Dimension Combination on Service Line of Type
      // Resource.
      VerifyLimitedDimLine(ServiceLine,DimensionValueCombination);
    END;

    [Test]
    PROCEDURE ShipInvDimLimitedResource@184();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
      DimensionValueCombination@1009 : Record 351;
    BEGIN
      // Test error occurs on Posting as Ship and Invoice Service Order with Dimension set Limited Dimension Combination on Service
      // Line of Type Resource.

      // 1. Setup: Create Customer, Resource, Service Header, Service Item Line, Service Line of Type Resource and Create Document
      // Dimension on Service Line.
      CreateServiceOrderResource(ServiceLine,FALSE);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      CreateLimitedDimServiceLine(DimensionValueCombination,ServiceLine);

      // 2. Exercise: Post Service Order as Ship and Invoice.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs on Posting Service Order as Ship and Invoice with Limited Dimension Combination on Service Line of
      // Type Resource.
      VerifyLimitedDimLine(ServiceLine,DimensionValueCombination);
    END;

    [Test]
    PROCEDURE ConsumeDimLimitedResource@185();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
      DimensionValueCombination@1009 : Record 351;
    BEGIN
      // Test error occurs on Posting as Ship and Consume Service Order with Dimension set Limited Dimension Combination on Service
      // Line of Type Resource.

      // 1. Setup: Create Customer, Resource, Service Header, Service Item Line, Service Line of Type Resource, Update Qty to consume on
      // Service Line and Create Document Dimension on Service Line.
      CreateServiceOrderResource(ServiceLine,TRUE);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      CreateLimitedDimServiceLine(DimensionValueCombination,ServiceLine);

      // 2. Exercise: Post Service Order as Ship and Consume.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify error occurs on Posting Service Order as Ship and Consume with Limited Dimension Combination on Service Line of
      // Type Resource.
      VerifyLimitedDimLine(ServiceLine,DimensionValueCombination);
    END;

    [Test]
    PROCEDURE ShipDimLimitedCost@58();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
      DimensionValueCombination@1008 : Record 351;
    BEGIN
      // Test error occurs on Posting as Ship Service Order with Dimension set Limited Dimension Combination on Service Line of Type Cost.

      // 1. Setup: Create Customer, Service Header, Service Item Line, Service Line of Type Cost and Create Document Dimension on
      // Service Line.
      CreateServiceOrderCost(ServiceLine);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      CreateLimitedDimServiceLine(DimensionValueCombination,ServiceLine);

      // 2. Exercise: Post Service Order as Ship.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verify error occurs on Posting Service Order as Ship with Limited Dimension Combination on Service Line of
      // Type Cost.
      VerifyLimitedDimLine(ServiceLine,DimensionValueCombination);
    END;

    [Test]
    PROCEDURE InvDimLimitedCost@90();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
      DimensionValueCombination@1008 : Record 351;
    BEGIN
      // Test error occurs on Posting as Invoice Service Order with Dimension set Limited Dimension Combination on Service Line of Type
      // Cost.

      // 1. Setup: Create Customer, Service Header, Service Item Line, Service Line of Type Cost, Post Service Order as Ship and Create
      // Document Dimension on Service Line.
      CreateServiceOrderCost(ServiceLine);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FINDFIRST;
      CreateLimitedDimServiceLine(DimensionValueCombination,ServiceLine);

      // 2. Exercise: Post Service Order as Invoice.
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);

      // 3. Verify: Verify error occurs on Posting Service Order as Invoice with Limited Dimension Combination on Service Line of Type
      // Cost.
      VerifyLimitedDimLine(ServiceLine,DimensionValueCombination);
    END;

    [Test]
    PROCEDURE ShipInvDimLimitedCost@91();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
      DimensionValueCombination@1008 : Record 351;
    BEGIN
      // Test error occurs on Posting as Ship and Invoice Service Order with Dimension set Limited Dimension Combination on Service Line
      // of Type Cost.

      // 1. Setup: Create Customer, Service Header, Service Item Line, Service Line of Type Cost and Create Document Dimension on
      // Service Line.
      CreateServiceOrderCost(ServiceLine);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      CreateLimitedDimServiceLine(DimensionValueCombination,ServiceLine);

      // 2. Exercise: Post Service Order as Ship and Invoice.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs on Posting Service Order as Ship and Invoice with Limited Dimension Combination on Service Line of
      // Type Cost.
      VerifyLimitedDimLine(ServiceLine,DimensionValueCombination);
    END;

    [Test]
    PROCEDURE ShipDimLimitedGLAccount@103();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
      DimensionValueCombination@1009 : Record 351;
    BEGIN
      // Test error occurs on Posting as Ship Service Order with Dimension set Limited Dimension Combination on Service Line of Type
      // of Type G/L Account.

      // 1. Setup: Create Customer, G/L Account, Service Header, Service Item Line, Service Line of Type G/L Account and Create Document
      // Dimension on Service Line.
      CreateServiceOrderGLAccount(ServiceLine);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      CreateLimitedDimServiceLine(DimensionValueCombination,ServiceLine);

      // 2. Exercise: Post Service Order as Ship.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verify error occurs on Posting Service Order as Ship with Limited Dimension Combination on Service Line of
      // Type G/L Account.
      VerifyLimitedDimLine(ServiceLine,DimensionValueCombination);
    END;

    [Test]
    PROCEDURE InvDimLimitedGLAccount@124();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
      DimensionValueCombination@1009 : Record 351;
    BEGIN
      // Test error occurs on Posting as Invoice Service Order with Dimension set Limited Dimension Combination on Service Line of Type
      // of Type G/L Account.

      // 1. Setup: Create Customer, G/L Account, Service Header, Service Item Line, Service Line of Type G/L Account, Post Service Order
      // as Ship and Create Document Dimension on Service Line.
      CreateServiceOrderGLAccount(ServiceLine);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FINDSET;
      CreateLimitedDimServiceLine(DimensionValueCombination,ServiceLine);

      // 2. Exercise: Post Service Order as Invoice.
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);

      // 3. Verify: Verify error occurs on Posting Service Order as Invoice with Limited Dimension Combination on Service Line of
      // Type G/L Account.
      VerifyLimitedDimLine(ServiceLine,DimensionValueCombination);
    END;

    [Test]
    PROCEDURE ShipInvDimLimitedGLAccount@125();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
      DimensionValueCombination@1009 : Record 351;
    BEGIN
      // Test error occurs on Posting as Ship and Invoice Service Order with Dimension set Limited Dimension Combination on Service
      // Line of Type of Type G/L Account.

      // 1. Setup: Create Customer, G/L Account, Service Header, Service Item Line, Service Line of Type G/L Account and Create Document
      // Dimension on Service Line.
      CreateServiceOrderGLAccount(ServiceLine);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      CreateLimitedDimServiceLine(DimensionValueCombination,ServiceLine);

      // 2. Exercise: Post Service Order as Ship and Invoice.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs on Posting Service Order as Ship and Invoice with Limited Dimension Combination on Service Line of
      // Type G/L Account.
      VerifyLimitedDimLine(ServiceLine,DimensionValueCombination);
    END;

    [Test]
    PROCEDURE ShipServiceOrderDim@118();
    VAR
      ServiceHeader@1013 : Record 5900;
      ServiceLine@1000 : Record 5902;
    BEGIN
      // Test Dimensions on Posted Service Shipment, Item Ledger Entries and Value Entries after Posting Service Order as Ship.

      // 1. Setup: Create Customer, Service Item, Item, Resource, G/L Account, Cost, assign Default Dimensions on all, Create Service
      // Header, Service Item Line and Service Line of Type Item, Resource, G/L Account and Cost.
      CreateServiceOrderWithDim(ServiceHeader,ServiceLine,FALSE);

      // 2. Exercise: Update Qty to Ship on Service Line and Post Service Order as Ship.
      UpdatePartialQtyToShip(ServiceLine);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verify Dimensions on Posted Service Shipment, Item Ledger Entries and Value Entries.
      VerifyDimForShipmentHeader(ServiceHeader);
      VerifyDimForShipmentItemLine(ServiceHeader);
      VerifyDimForShipmentLine(ServiceLine);
      VerifyDimShipmentLineCustomer(ServiceLine);
      VerifyDimForItemLedgerEntry(ServiceLine);
      VerifyDimForValueEntry(ServiceLine);
    END;

    [Test]
    PROCEDURE InvServiceOrderDim@116();
    VAR
      ServiceHeader@1013 : Record 5900;
      ServiceLine@1015 : Record 5902;
    BEGIN
      // Test Dimensions on Posted Service Invoice, Customer Ledger Entries and G/L Entries after Posting Service Order as Invoice.

      // 1. Setup: Create Customer, Service Item, Item, Resource, G/L Account, Cost, assign Default Dimensions on all, Create Service
      // Header, Service Item Line and Service Line of Type Item, Resource, G/L Account, Cost and Post Service Order as Ship.
      CreateServiceOrderWithDim(ServiceHeader,ServiceLine,FALSE);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 2. Exercise: Update Qty to Invoice on Service Line and Post Service Order as Invoice.
      UpdatePartialQtyToInvoice(ServiceLine);
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);

      // 3. Verify: Verify Dimensions on Posted Service Invoice, Customer Ledger Entries and G/L Entries.
      VerifyDimForInvoiceHeader(ServiceHeader);
      VerifyDimForInvoiceLine(ServiceLine);
      VerifyDimInvoiceLineCustomer(ServiceLine);
      VerifyDimForCustomerLederEntry(ServiceHeader."No.");
      VerifyDimForGLEntry(ServiceHeader);
    END;

    [Test]
    PROCEDURE ShipInvServiceOrderDim@114();
    VAR
      ServiceHeader@1013 : Record 5900;
      ServiceLine@1015 : Record 5902;
    BEGIN
      // Test Dimensions on Posted Service Shipment, Invoice and Resource Ledger Entries after Posting Service Order as Ship and Invoice.

      // 1. Setup: Create Customer, Service Item, Item, Resource, G/L Account, Cost, assign Default Dimensions on all, Create Service
      // Header, Service Item Line and Service Line of Type Item, Resource, G/L Account and Cost.
      CreateServiceOrderWithDim(ServiceHeader,ServiceLine,FALSE);

      // 2. Exercise: Update Qty to Ship on Service Line and Post Service Order as Ship and Invoice.
      UpdatePartialQtyToShip(ServiceLine);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify Dimensions on Posted Service Shipment, Invoice and Resource Ledger Entries.
      VerifyDimForShipmentHeader(ServiceHeader);
      VerifyDimForShipmentItemLine(ServiceHeader);
      VerifyDimForShipmentLine(ServiceLine);
      VerifyDimShipmentLineCustomer(ServiceLine);
      VerifyDimForInvoiceHeader(ServiceHeader);
      VerifyDimForInvoiceLine(ServiceLine);
      VerifyDimInvoiceLineCustomer(ServiceLine);
      VerifyDimForResourceLederEntry(ServiceLine);
    END;

    [Test]
    PROCEDURE ShipConsumeServiceOrderDim@113();
    VAR
      ServiceHeader@1013 : Record 5900;
      ServiceLine@1015 : Record 5902;
    BEGIN
      // Test Dimensions on Posted Service Shipment and Service Ledger Entries after Posting Service Order as Ship and Consume.

      // 1. Setup: Create Customer, Service Item, Item, Resource, assign Default Dimensions on all, Create Service Header, Service Item
      // Line and Service Line of Type Item and Resource.
      CreateServiceOrderWithDim(ServiceHeader,ServiceLine,TRUE);

      // 2. Exercise: Update Qty to Consume on Service Line and Post Service Order as Ship and Consume.
      UpdatePartialQtyToConsume(ServiceLine);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify Dimensions on Posted Service Shipment and Service Ledger Entries.
      VerifyDimForShipmentHeader(ServiceHeader);
      VerifyDimForShipmentItemLine(ServiceHeader);
      VerifyDimForShipmentLine(ServiceLine);
      VerifyDimShipmentLineCustomer(ServiceLine);
      VerifyDimForServiceLederEntry(ServiceLine);
    END;

    [Test]
    PROCEDURE NoDimCodeMandatoryHeader@109();
    VAR
      ServiceHeader@1002 : Record 5900;
      DefaultDimension@1005 : Record 352;
    BEGIN
      // Test error occurs on Posting Service Order without Dimension marked as Code mandatory on Service Header.

      // 1. Setup: Create Customer, Create Default Dimension for Customer and Create Service Header.
      CreateServiceHeaderWithDim(ServiceHeader,DefaultDimension,DefaultDimension."Value Posting"::"Code Mandatory");
      COMMIT;

      // 2. Exercise: Delete Document Dimension for Service Header and Post Service Order as Ship and Invoice.
      UpdateDimSetIdOnHeader(
        ServiceHeader,LibraryDimension.DeleteDimSet(ServiceHeader."Dimension Set ID",DefaultDimension."Dimension Code"));
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Invalid" on Posting Service Order as Ship and Invoice.
      Assert.AreEqual(
        STRSUBSTNO(
          MandatoryDimensionOnHeader,ServiceHeader."Document Type",ServiceHeader."No.",
          DefaultDimension.FIELDCAPTION("Dimension Value Code"),DefaultDimension.FIELDCAPTION("Dimension Code"),
          DefaultDimension."Dimension Code",ServiceHeader."Customer No."),
        GETLASTERRORTEXT,UnknownError);

      // 4. Cleanup: Change Value Posting to Blank.
      ModifyDefaultDimension(DefaultDimension,DefaultDimension."Value Posting"::" ");
    END;

    [Test]
    PROCEDURE DimCodeMandatoryHeader@108();
    VAR
      DefaultDimension@1005 : Record 352;
    BEGIN
      // Test Service Order Sucessfully Posted with Dimension marked as Code mandatory on Service Header.

      ShipInvWithHeaderDim(DefaultDimension."Value Posting"::"Code Mandatory");
    END;

    [Test]
    PROCEDURE DimSameCodeHeader@107();
    VAR
      DefaultDimension@1005 : Record 352;
    BEGIN
      // Test Service Order Sucessfully Posted with same Dimension value code marked as Same Code on Service Header.

      ShipInvWithHeaderDim(DefaultDimension."Value Posting"::"Same Code");
    END;

    [Test]
    PROCEDURE DimNoCodeHeader@106();
    VAR
      Item@1007 : Record 27;
      ServiceHeader@1006 : Record 5900;
      DefaultDimension@1003 : Record 352;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
    BEGIN
      // Test Service Order Sucessfully Posted without Dimension marked as No Code on Service Header.

      // 1. Setup: Create Customer, Create Default Dimension for Customer, Create Service Header, Service Item Line and Service Line.
      CreateServiceHeaderWithDim(ServiceHeader,DefaultDimension,DefaultDimension."Value Posting"::"No Code");
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.",ServiceItemLine."Line No.");

      // 2. Post Service Order as Ship and Invoice.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify Service Shipment Header created after Posting Service Order.
      VerifyServiceShipmentHeader(ServiceHeader);

      // 4. Teardown: Change Value Posting to Blank.
      ModifyDefaultDimension(DefaultDimension,DefaultDimension."Value Posting"::" ");
    END;

    LOCAL PROCEDURE ShipInvWithHeaderDim@105(ValuePosting@1000 : Option);
    VAR
      ServiceHeader@1007 : Record 5900;
      DefaultDimension@1005 : Record 352;
      ServiceItemLine@1004 : Record 5901;
      ServiceLine@1003 : Record 5902;
    BEGIN
      // 1. Setup: Create Customer, Create Default Dimension for Customer, Create Service Header, Service Item Line and Service Line.
      CreateServiceHeaderWithDim(ServiceHeader,DefaultDimension,ValuePosting);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,LibraryInventory.CreateItemNo,ServiceItemLine."Line No.");

      // 2. Exercise: Post Service Order as Ship and Invoice.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify Service Shipment Header created after Posting Service Order.
      VerifyServiceShipmentHeader(ServiceHeader);

      // 4. Cleanup: Change Value Posting to Blank.
      ModifyDefaultDimension(DefaultDimension,DefaultDimension."Value Posting"::" ");
    END;

    [Test]
    PROCEDURE NoDimCodeMandatoryGLAccount@101();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1006 : Record 5902;
      DefaultDimension@1005 : Record 352;
    BEGIN
      // Test error occurs on Posting Service Order without Dimension marked as Code mandatory on Service Line of Type G/L Account.

      // 1. Setup: Create Customer, Create G/L Account, Create Default Dimension for G/L Account, Create Service Header, Service Item
      // Line, Service Line of Type G/L Account and Change Value Posting to "Code Mandatory" for G/L Account.
      CreateLineBlockDimGLAccount(ServiceLine,Dimension);
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::"G/L Account",ServiceLine."No.");
      ModifyDefaultDimension(DefaultDimension,DefaultDimension."Value Posting"::"Code Mandatory");

      // 2. Exercise: Delete Document Dimension for Service Line and Post Service Order as Ship and Invoice.
      UpdateDimSetIdOnLine(
        ServiceLine,LibraryDimension.DeleteDimSet(ServiceLine."Dimension Set ID",DefaultDimension."Dimension Code"));
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Invalid" on Posting Service Order as Ship and Invoice.
      Assert.AreEqual(
        STRSUBSTNO(
          MandatoryDimensionServiceLine,ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.",
          DefaultDimension.FIELDCAPTION("Dimension Value Code"),DefaultDimension.FIELDCAPTION("Dimension Code"),Dimension.Code,
          ServiceLine.Type,ServiceLine."No."),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE NoDimCodeMandatoryItem@100();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1006 : Record 5902;
      DefaultDimension@1005 : Record 352;
    BEGIN
      // Test error occurs on Posting Service Order without Dimension marked as Code mandatory on Service Line of Type Item.

      // 1. Setup: Create Customer, Create Item, Create Default Dimension for Item, Create Service Header, Service Item
      // Line, Service Line of Type Item and Change Value Posting to "Code Mandatory" for Item.
      CreateLineBlockDimItem(ServiceLine,Dimension,FALSE);
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Item,ServiceLine."No.");
      ModifyDefaultDimension(DefaultDimension,DefaultDimension."Value Posting"::"Code Mandatory");

      // 2. Exercise: Delete Document Dimension for Service Line and Post Service Order as Ship and Invoice.
      UpdateDimSetIdOnLine(
        ServiceLine,LibraryDimension.DeleteDimSet(ServiceLine."Dimension Set ID",DefaultDimension."Dimension Code"));
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Invalid" on Posting Service Order as Ship and Invoice.
      Assert.AreEqual(
        STRSUBSTNO(
          MandatoryDimensionServiceLine,ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.",
          DefaultDimension.FIELDCAPTION("Dimension Value Code"),DefaultDimension.FIELDCAPTION("Dimension Code"),Dimension.Code,
          ServiceLine.Type,ServiceLine."No."),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE NoDimCodeMandatoryResource@99();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1006 : Record 5902;
      DefaultDimension@1005 : Record 352;
    BEGIN
      // Test error occurs on Posting Service Order without Dimension marked as Code mandatory on Service Line of Type Resource.

      // 1. Setup: Create Customer, Create Resource, Create Default Dimension for Resource, Create Service Header, Service Item
      // Line, Service Line of Type Resource and Change Value Posting to "Code Mandatory" for Resource.
      CreateLineBlockDimResource(ServiceLine,Dimension,FALSE);
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Resource,ServiceLine."No.");
      ModifyDefaultDimension(DefaultDimension,DefaultDimension."Value Posting"::"Code Mandatory");

      // 2. Exercise: Delete Document Dimension for Service Line and Post Service Order as Ship and Invoice.
      UpdateDimSetIdOnLine(
        ServiceLine,LibraryDimension.DeleteDimSet(ServiceLine."Dimension Set ID",DefaultDimension."Dimension Code"));
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Invalid" on Posting Service Order as Ship and Invoice.
      Assert.AreEqual(
        STRSUBSTNO(
          MandatoryDimensionServiceLine,ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.",
          DefaultDimension.FIELDCAPTION("Dimension Value Code"),DefaultDimension.FIELDCAPTION("Dimension Code"),Dimension.Code,
          ServiceLine.Type,ServiceLine."No."),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE NoDimSameCodeHeader@85();
    VAR
      ServiceHeader@1002 : Record 5900;
      DefaultDimension@1005 : Record 352;
    BEGIN
      // Test error occurs on Posting Service Order with different Dimension value code marked as Same Code on Service Header.

      // 1. Setup: Create Customer, Create Default Dimension for Customer and Create Service Header.
      CreateServiceHeaderWithDim(ServiceHeader,DefaultDimension,DefaultDimension."Value Posting"::"Same Code");
      COMMIT;

      // 2. Exercise: Change the Dimension Value on Document Dimension for Service Header and Post Service Order as Ship and Invoice.
      UpdateDimSetIdOnHeader(
        ServiceHeader,
        LibraryDimension.EditDimSet(
          ServiceHeader."Dimension Set ID",DefaultDimension."Dimension Code",
          FindDifferentDimensionValue(DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code")));
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Invalid" on Posting Service Order as Ship and Invoice.
      Assert.AreEqual(
        STRSUBSTNO(
          SameCodeDimensionHeader,ServiceHeader."Document Type",ServiceHeader."No.",
          DefaultDimension.FIELDCAPTION("Dimension Value Code"),DefaultDimension."Dimension Value Code",
          DefaultDimension.FIELDCAPTION("Dimension Code"),
          DefaultDimension."Dimension Code",ServiceHeader."Customer No."),GETLASTERRORTEXT,UnknownError);

      // 4. Cleanup: Change Value Posting to Blank.
      ModifyDefaultDimension(DefaultDimension,DefaultDimension."Value Posting"::" ");
    END;

    [Test]
    PROCEDURE NoDimSameCodeItem@84();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1006 : Record 5902;
      DefaultDimension@1005 : Record 352;
    BEGIN
      // Test error occurs on Posting Service Order with different Dimension value code marked as Same Code on Service Line of Type Item.

      // 1. Setup: Create Customer, Create Item, Create Default Dimension for Item, Create Service Header, Service Item
      // Line, Service Line of Type Item and Change Value Posting to "Same Code" for Item.
      CreateLineBlockDimItem(ServiceLine,Dimension,FALSE);
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Item,ServiceLine."No.");
      ModifyDefaultDimension(DefaultDimension,DefaultDimension."Value Posting"::"Same Code");

      // 2. Exercise: Change the Dimension Value on Document Dimension for Service Line and Post Service Order as Ship and Invoice.
      UpdateDimSetIdOnLine(
        ServiceLine,
        LibraryDimension.EditDimSet(
          ServiceLine."Dimension Set ID",DefaultDimension."Dimension Code",
          FindDifferentDimensionValue(DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code")));
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Invalid" on Posting Service Order as Ship and Invoice.
      Assert.AreEqual(
        STRSUBSTNO(
          SameCodeDimensionLine,ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.",
          DefaultDimension.FIELDCAPTION("Dimension Value Code"),DefaultDimension."Dimension Value Code",
          DefaultDimension.FIELDCAPTION("Dimension Code"),
          Dimension.Code,ServiceLine.Type,ServiceLine."No."),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE NoDimSameCodeResource@81();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1006 : Record 5902;
      DefaultDimension@1005 : Record 352;
    BEGIN
      // Test error occurs on Posting Service Order with different Dimension value code marked as Same Code on Service Line of Type
      // Resource.

      // 1. Setup: Create Customer, Create Resource, Create Default Dimension for Resource, Create Service Header, Service Item
      // Line, Service Line of Type Resource and Change Value Posting to "Same Code" for Resource.
      CreateLineBlockDimResource(ServiceLine,Dimension,FALSE);
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Resource,ServiceLine."No.");
      ModifyDefaultDimension(DefaultDimension,DefaultDimension."Value Posting"::"Same Code");

      // 2. Exercise: Change the Dimension Value on Document Dimension for Service Line and Post Service Order as Ship and Invoice.
      UpdateDimSetIdOnLine(
        ServiceLine,
        LibraryDimension.EditDimSet(
          ServiceLine."Dimension Set ID",DefaultDimension."Dimension Code",
          FindDifferentDimensionValue(DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code")));
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Invalid" on Posting Service Order as Ship and Invoice.
      Assert.AreEqual(
        STRSUBSTNO(
          SameCodeDimensionLine,ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.",
          DefaultDimension.FIELDCAPTION("Dimension Value Code"),DefaultDimension."Dimension Value Code",
          DefaultDimension.FIELDCAPTION("Dimension Code"),
          Dimension.Code,ServiceLine.Type,ServiceLine."No."),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE NoDimSameCodeGLAccount@80();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1006 : Record 5902;
      DefaultDimension@1005 : Record 352;
    BEGIN
      // Test error occurs on Posting Service Order with different Dimension value code marked as Same Code on Service Line of Type
      // G/L Account.

      // 1. Setup: Create Customer, Create G/L Account, Create Default Dimension for G/L Account, Create Service Header, Service Item
      // Line, Service Line of Type G/L Account and Change Value Posting to "Same Code" for G/L Account.
      CreateLineBlockDimGLAccount(ServiceLine,Dimension);
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::"G/L Account",ServiceLine."No.");
      ModifyDefaultDimension(DefaultDimension,DefaultDimension."Value Posting"::"Same Code");

      // 2. Exercise: Change the Dimension Value on Document Dimension for Service Line and Post Service Order as Ship and Invoice.
      UpdateDimSetIdOnLine(
        ServiceLine,
        LibraryDimension.EditDimSet(
          ServiceLine."Dimension Set ID",DefaultDimension."Dimension Code",
          FindDifferentDimensionValue(DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code")));
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Invalid" on Posting Service Order as Ship and Invoice.
      Assert.AreEqual(
        STRSUBSTNO(
          SameCodeDimensionLine,ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.",
          DefaultDimension.FIELDCAPTION("Dimension Value Code"),
          DefaultDimension."Dimension Value Code",DefaultDimension.FIELDCAPTION("Dimension Code"),
          Dimension.Code,ServiceLine.Type,ServiceLine."No."),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE NoDimNoCodeHeader@76();
    VAR
      ServiceHeader@1002 : Record 5900;
      DefaultDimension@1005 : Record 352;
    BEGIN
      // Test error occurs on Posting Service Order with Dimension marked as No Code on Service Header.

      // 1. Setup: Create Customer, Create Default Dimension for Customer and Create Service Header.
      CreateServiceHeaderWithDim(ServiceHeader,DefaultDimension,DefaultDimension."Value Posting"::"No Code");
      COMMIT;
      // 2. Exercise: Change the Dimension Value on Document Dimension for Service Header and Post Service Order as Ship and Invoice.
      UpdateDimSetIdOnHeader(
        ServiceHeader,
        LibraryDimension.CreateDimSet(
          ServiceHeader."Dimension Set ID",DefaultDimension."Dimension Code",
          FindDifferentDimensionValue(DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code")));

      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Invalid" on Posting Service Order as Ship and Invoice.
      Assert.AreEqual(
        STRSUBSTNO(
          NoCodeDimensionHeader,ServiceHeader."Document Type",ServiceHeader."No.",DefaultDimension.FIELDCAPTION("Dimension Code"),
          DefaultDimension."Dimension Code",ServiceHeader."Customer No."),GETLASTERRORTEXT,UnknownError);

      // 4. Teardown: Change Value Posting to Blank.
      ModifyDefaultDimension(DefaultDimension,DefaultDimension."Value Posting"::" ");
    END;

    [Test]
    PROCEDURE NoDimNoCodeGLAccount@68();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1006 : Record 5902;
      DefaultDimension@1005 : Record 352;
    BEGIN
      // Test error occurs on Posting Service Order with Dimension Value marked as No Code on Service Line of Type G/L Account.

      // 1. Setup: Create Customer, Create G/L Account, Create Default Dimension for G/L Account, Create Service Header, Service Item
      // Line, Service Line of Type G/L Account and Change Value Posting to "No Code" for G/L Account.
      CreateLineBlockDimGLAccount(ServiceLine,Dimension);
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::"G/L Account",ServiceLine."No.");
      ModifyDefaultDimension(DefaultDimension,DefaultDimension."Value Posting"::"No Code");
      COMMIT;

      // 2. Exercise: Post Service Order as Ship and Invoice.
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Invalid" on Posting Service Order as Ship and Invoice.
      Assert.AreEqual(
        STRSUBSTNO(
          NoCodeDimensionLine,ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.",
          DefaultDimension.FIELDCAPTION("Dimension Code"),
          Dimension.Code,ServiceLine.Type,ServiceLine."No."),GETLASTERRORTEXT,UnknownError);

      // 4. Teardown: Change Value Posting to Blank.
      ModifyDefaultDimension(DefaultDimension,DefaultDimension."Value Posting"::" ");
    END;

    [Test]
    PROCEDURE NoDimNoCodeItem@60();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1006 : Record 5902;
      DefaultDimension@1005 : Record 352;
    BEGIN
      // Test error occurs on Posting Service Order with Dimension Value marked as No Code on Service Line of Type Item.

      // 1. Setup: Create Customer, Create Item, Create Default Dimension for Item, Create Service Header, Service Item
      // Line, Service Line of Type Item and Change Value Posting to "No Code" for Item.
      CreateLineBlockDimItem(ServiceLine,Dimension,FALSE);
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Item,ServiceLine."No.");
      ModifyDefaultDimension(DefaultDimension,DefaultDimension."Value Posting"::"No Code");
      COMMIT;

      // 2. Exercise: Post Service Order as Ship and Invoice.
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Invalid" on Posting Service Order as Ship and Invoice.
      Assert.AreEqual(
        STRSUBSTNO(
          NoCodeDimensionLine,ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.",
          DefaultDimension.FIELDCAPTION("Dimension Code"),
          Dimension.Code,ServiceLine.Type,ServiceLine."No."),GETLASTERRORTEXT,UnknownError);

      // 4. Teardown: Change Value Posting to Blank.
      ModifyDefaultDimension(DefaultDimension,DefaultDimension."Value Posting"::" ");
    END;

    [Test]
    PROCEDURE NoDimNoCodeResource@57();
    VAR
      Dimension@1001 : Record 348;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1006 : Record 5902;
      DefaultDimension@1005 : Record 352;
    BEGIN
      // Test error occurs on Posting Service Order with Dimension Value marked as No Code on Service Line of Type Resource.

      // 1. Setup: Create Customer, Create Resource, Create Default Dimension for Resource, Create Service Header, Service Item
      // Line, Service Line of Type Resource and Change Value Posting to "No Code" for Resource.
      CreateLineBlockDimResource(ServiceLine,Dimension,FALSE);
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Resource,ServiceLine."No.");
      ModifyDefaultDimension(DefaultDimension,DefaultDimension."Value Posting"::"No Code");
      COMMIT;

      // 2. Exercise: Post Service Order as Ship and Invoice.
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify error occurs "Dimension Invalid" on Posting Service Order as Ship and Invoice.
      Assert.AreEqual(
        STRSUBSTNO(
          NoCodeDimensionLine,ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.",
          DefaultDimension.FIELDCAPTION("Dimension Code"),
          Dimension.Code,ServiceLine.Type,ServiceLine."No."),GETLASTERRORTEXT,UnknownError);

      // 4. Teardown: Change Value Posting to Blank.
      ModifyDefaultDimension(DefaultDimension,DefaultDimension."Value Posting"::" ");
    END;

    [Test]
    PROCEDURE DimCodeMandatory@46();
    VAR
      DefaultDimension@1005 : Record 352;
    BEGIN
      // Test Service Order Sucessfully Posted with Dimension marked as Code mandatory on Service Line of Type Item, Resource and
      // G/L Account.

      ShipInvDimServiceLine(DefaultDimension."Value Posting"::"Code Mandatory");
    END;

    [Test]
    PROCEDURE DimSameCode@44();
    VAR
      DefaultDimension@1005 : Record 352;
    BEGIN
      // Test Service Order Sucessfully Posted with same Dimension value code marked as Same Code on Service Line of Type Item, Resource
      // and G/L Account.

      ShipInvDimServiceLine(DefaultDimension."Value Posting"::"Same Code");
    END;

    [Test]
    PROCEDURE DimNoCode@41();
    VAR
      ServiceHeader@1010 : Record 5900;
      DefaultDimension@1006 : Record 352;
    BEGIN
      // Test Service Order Sucessfully Posted without Dimension Value marked as No Code on Service Line of Type Item, Resource and
      // G/L Account.

      // 1. Setup: Create Customer, Resource, Item, G/L Account and Assign Default Dimension for all with Value Posting "No Code",
      // Create Service Header, Service Item Line, Service Line of Type Item, Resource, G/L Account.
      CreateServiceOrderGLDim(ServiceHeader,DefaultDimension."Value Posting"::"No Code");

      // Delete Dimensions for all Service Lines.
      DeleteServiceLineDimensions(ServiceHeader);

      // 2. Exercise: Post Service Order as Ship and Invoice.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify Service Shipment Header created after Posting Service Header.
      VerifyServiceShipmentHeader(ServiceHeader);

      // 4. Teardown: Change Value Posting to Blank.
      DefaultDimension.SETRANGE("Value Posting",DefaultDimension."Value Posting"::"No Code");
      DefaultDimension.MODIFYALL("Value Posting",DefaultDimension."Value Posting"::" ");
    END;

    LOCAL PROCEDURE ShipInvDimServiceLine@37(ValuePosting@1013 : Option);
    VAR
      ServiceHeader@1002 : Record 5900;
    BEGIN
      // 1. Setup: Create Customer, Resource, Item, G/L Account and Assign Default Dimension for all with Value Posting "No Code",
      // Create Service Header, Service Item Line, Service Line of Type Item, Resource, G/L Account.
      CreateServiceOrderGLDim(ServiceHeader,ValuePosting);
      // 2. Exercise: Post Service Order as Ship and Invoice.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify Service Shipment Header created after Posting Service Header.
      VerifyServiceShipmentHeader(ServiceHeader);

      // 4. Cleanup: Change Value Posting to Blank.
      RollbackValuePosting(ServiceHeader."No.");

      DeleteZeroDimEntry;
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE SameDimHeaderLine@63();
    VAR
      ServiceLine@1006 : Record 5902;
      DefaultDimension@1005 : Record 352;
      ServiceHeader@1000 : Record 5900;
      ServiceItemLine@1004 : Record 5901;
      DimensionValueCode@1002 : Code[20];
      HeaderDimensionSetID@1001 : Integer;
    BEGIN
      // Test on changing Dimension Values on Service Header its successfully updated on Service Item Line and Service Line.

      // 1. Setup: Create Customer, Create Item, Create Default Dimension for Item and Customer, Create Service Header, Service Item
      // Line and Service Line of Type Item.
      CreateOrderWithCustomerDim(ServiceLine,DefaultDimension);

      // 2. Exercise: Change Document Dimension Value on Service Header and Click Yes on Confirmation Message for updating Service Item
      // Line and Service Line Dimensions.
      DimensionValueCode := FindDifferentDimensionValue(DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      HeaderDimensionSetID := ServiceHeader."Dimension Set ID";
      UpdateDimSetIdOnHeader(
        ServiceHeader,LibraryDimension.EditDimSet(HeaderDimensionSetID,DefaultDimension."Dimension Code",DimensionValueCode));
      ServiceHeader.UpdateAllLineDim(ServiceHeader."Dimension Set ID",HeaderDimensionSetID);

      // 3. Verify: Verify Dimension value Successfully updated on Service Item Line and Service Line Dimensions.
      ServiceItemLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceItemLine.FINDFIRST;
      VerifyDimSetEntry(ServiceItemLine."Dimension Set ID",DefaultDimension."Dimension Code",DimensionValueCode);

      ServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLine.FINDFIRST;
      VerifyDimSetEntry(ServiceLine."Dimension Set ID",DefaultDimension."Dimension Code",DimensionValueCode);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandlerForFalse)]
    PROCEDURE DiffDimHeaderLine@29();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1006 : Record 5902;
      DefaultDimension@1005 : Record 352;
      HeaderDimensionSetID@1000 : Integer;
    BEGIN
      // Test Service Order Sucessfully Posted with different Dimension Values on Service Header, Service Item Line and Service Line.

      // 1. Setup: Create Customer, Create Item, Create Default Dimension for Item and Customer, Create Service Header, Service Item
      // Line and Service Line of Type Item.
      CreateOrderWithCustomerDim(ServiceLine,DefaultDimension);

      // 2. Exercise: Change Document Dimension Value on Service Header and Click No on Confirmation Message for updating Service Item
      // Line, Service Line Dimensions and Post Service Order as Ship.
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      HeaderDimensionSetID := ServiceHeader."Dimension Set ID";
      UpdateDimSetIdOnHeader(
        ServiceHeader,
        LibraryDimension.EditDimSet(
          HeaderDimensionSetID,DefaultDimension."Dimension Code",
          FindDifferentDimensionValue(DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code")));
      ServiceHeader.UpdateAllLineDim(ServiceHeader."Dimension Set ID",HeaderDimensionSetID);

      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verify Posted Service Shipment Created after Posting Service Order.
      VerifyServiceShipmentHeader(ServiceHeader);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE SameDimItemLineLine@67();
    VAR
      ServiceLine@1006 : Record 5902;
      DefaultDimension@1005 : Record 352;
      ServiceItemLine@1001 : Record 5901;
      DimensionValueCode@1000 : Code[20];
    BEGIN
      // Test on changing Dimension Values on Service Item Line its Successfully updated on Service Line.

      // 1. Setup: Create Customer, Create Item, Create Default Dimension for Item and Customer, Create Service Header, Service Item
      // Line and Service Line of Type Item.
      CreateOrderWithCustomerDim(ServiceLine,DefaultDimension);

      // 2. Exercise: Change Document Dimension Value on Service Item Line and Click Yes on Confirmation Message for updating Service
      // Line Dimensions.
      FindServiceItemLine(ServiceItemLine,ServiceLine);
      DimensionValueCode := FindDifferentDimensionValue(DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
      UpdateDimSetIdOnItemLine(ServiceItemLine,DefaultDimension."Dimension Code",DimensionValueCode);

      // 3. Verify: Verify Dimension value Successfully updated on Service Line Dimensions.
      ServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLine.FINDFIRST;
      VerifyDimSetEntry(ServiceLine."Dimension Set ID",DefaultDimension."Dimension Code",DimensionValueCode);
    END;

    [Test]
    PROCEDURE DefaultDimPriorityOrder@159();
    VAR
      Customer@1000 : Record 18;
      SourceCodeSetup@1010 : Record 242;
      ServiceHeader@1001 : Record 5900;
      Dimension@1005 : Record 348;
      DimensionValue@1004 : Record 349;
      DefaultDimension@1003 : Record 352;
      DefaultDimensionPriority@1009 : Record 354;
      ServiceItemLine@1020 : Record 5901;
      ServiceLine@1021 : Record 5902;
      ServiceItemGroupCode@1007 : Code[10];
    BEGIN
      // Test Dimensions on Service Header, Service Item Line and Service Line are updated according to Default Dimensions Priorities.

      // 1. Setup: Create Customer, Responsibility Center, Create Default Dimension Priority, Service Item, Resource, Item, G/L Account
      // Cost and Create Default Dimensions for all.
      Initialize;
      CreateDefaultDimensionPriority(DefaultDimensionPriority);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);

      LibrarySales.CreateCustomer(Customer);
      LibraryDimension.CreateDefaultDimensionCustomer(DefaultDimension,Customer."No.",Dimension.Code,DimensionValue.Code);

      DimensionValue.NEXT;
      CreateHeaderResponsibility(ServiceHeader,Customer."No.",Dimension.Code,DimensionValue.Code);

      // 2. Exercise: Create Service Header, Update Responsibility Center on Service Header, Create Service Item Line and Service Lines.
      ServiceItemGroupCode := CreateServiceDocumentLines(ServiceLine,ServiceItemLine,DimensionValue,ServiceHeader,Dimension.Code);

      // 3. Verify: Verify Dimensions on Service Line according to Default Dimension Priorities.
      VerifyDimOnServiceLine(ServiceLine);
      VerifyDimForCost(ServiceLine);
      VerifyDimForResponsibility(ServiceHeader,ServiceHeader."Responsibility Center");
      VerifyDimForServiceItemGrp(ServiceItemLine,ServiceItemGroupCode);

      // 4. Teardown: Delete all Default Dimension Priority Related to Service Management.
      SourceCodeSetup.GET;
      DefaultDimensionPriority.SETRANGE("Source Code",SourceCodeSetup."Service Management");
      DefaultDimensionPriority.DELETEALL(TRUE);
    END;

    [Test]
    [HandlerFunctions(ModalFormHander)]
    PROCEDURE DimFromStandardServiceCode@177();
    VAR
      Customer@1000 : Record 18;
      ServiceHeader@1001 : Record 5900;
      StandardServiceCode@1023 : Record 5996;
      ServiceItemLine@1020 : Record 5901;
      StandardServiceItemGrCode@1027 : Record 5998;
      ServiceItemGroupCode@1002 : Code[10];
    BEGIN
      // Test Dimension on Service Lines after running Get Standard Service Code.

      // 1. Setup: Create Customer, Service Item Group and Create Standard Service Code with Standard Service Lines having Dimensions.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateStandardServiceCodeDim(StandardServiceCode);
      ServiceItemGroupCode := CreateServiceItemGroup;
      LibraryVariableStorage.Enqueue(ServiceItemGroupCode);
      LibraryVariableStorage.Enqueue(StandardServiceCode.Code);

      // 2. Exercise: Create Service Header, Service Item Line, Update Service Item Group Code on Service Item Line and Run Insert Service
      // Lines functions.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      ServiceItemLine.VALIDATE("Service Item Group Code",ServiceItemGroupCode);
      ServiceItemLine.MODIFY(TRUE);
      StandardServiceItemGrCode.InsertServiceLines(ServiceItemLine);

      // 3. Verify: Verify Dimensions on Service Lines.
      VerifyDimFromStandardCode(StandardServiceCode.Code,ServiceHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ModalFormHander)]
    PROCEDURE CombineDimFromStandardServiceCode@59();
    VAR
      Customer@1000 : Record 18;
      Item@1002 : Record 27;
      Dimension@1003 : Record 348;
      DefaultDimension@1007 : Record 352;
      ServiceHeader@1001 : Record 5900;
      StandardServiceCode@1023 : Record 5996;
      StandardServiceLine@1006 : Record 5997;
      ServiceItemLine@1020 : Record 5901;
      StandardServiceItemGrCode@1027 : Record 5998;
      ServiceItemGroupCode@1004 : Code[10];
      ServItemDimSetID@1005 : Integer;
    BEGIN
      // Test Dimension on Service Lines after running Get Standard Service Code.

      // 1. Setup: Create Customer, Service Item Group and Create Standard Service Code with Standard Service Lines having Dimensions.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateStandardServiceCode(StandardServiceCode);
      LibraryDimension.FindDimension(Dimension);
      CreateStandardServiceLineDim(StandardServiceCode.Code,StandardServiceLine.Type::Item,Item."No.",Dimension.Code);
      Dimension.NEXT;
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,Item."No.",Dimension.Code,FindDimensionValue(Dimension.Code));
      ServiceItemGroupCode := CreateServiceItemGroup;
      LibraryVariableStorage.Enqueue(ServiceItemGroupCode);
      LibraryVariableStorage.Enqueue(StandardServiceCode.Code);

      // 2. Exercise: Create Service Header, Service Item Line, Update Service Item Group Code on Service Item Line and Run Insert Service
      // Lines functions.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      ServiceItemLine.VALIDATE("Service Item Group Code",ServiceItemGroupCode);
      ServiceItemLine.MODIFY(TRUE);
      ServItemDimSetID := ServiceItemLine."Dimension Set ID";
      StandardServiceItemGrCode.InsertServiceLines(ServiceItemLine);

      // 3. Verify: Verify Dimensions on Service Lines.
      CombineDimensions(ServiceItemLine,StandardServiceLine);
      Assert.AreEqual(ServItemDimSetID,ServiceItemLine."Dimension Set ID",'Dim Set ID should be combined');
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE UndoServiceShipmentForResourceWithSameCodeDimension@32();
    VAR
      Dimension@1001 : Record 348;
      DefaultDimension@1000 : Record 352;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1007 : Record 5902;
    BEGIN
      // Setup: Create Service Order for Resource with Dimension. Update Value Posting for Dimension. Post Service Order as Ship.
      CreateLineBlockDimResource(ServiceLine,Dimension,FALSE);
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Resource,ServiceLine."No.");
      ModifyDefaultDimension(DefaultDimension,DefaultDimension."Value Posting"::"Same Code");
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // Exercise: Undo Posted Service Shipment.
      LibraryService.UndoShipmentLinesByServiceOrderNo(ServiceHeader."No.");

      // Verify: Verify the Dimension Set ID on the Service Ledger Entry.
      VerifyServiceLedgerEntryDimSetID(ServiceHeader."No.",ServiceLine."Dimension Set ID");
    END;

    [Test]
    PROCEDURE DefDimWithHighestPriorityFromServItemLineInheritedToServLine@172();
    VAR
      Dimension@1006 : Record 348;
      ServiceHeader@1004 : Record 5900;
      ServiceItemLine@1005 : Record 5901;
      ServiceLine@1010 : Record 5902;
      CustomerNo@1002 : Code[20];
      ServiceItemNo@1003 : Code[20];
      ItemNo@1009 : Code[20];
      ExpectedDimValueCode@1007 : Code[20];
    BEGIN
      // [FEATURE] [Default Dimension Priority]
      // [SCENARIO 375456] Default Dimension with highest priority in Service Item Line should be inherited to Service Line

      Initialize;
      // [GIVEN] Default Dimension Priorities: Service Item = 1, Item = 2
      SetPairedDefaultDimPriorities(DATABASE::"Service Item",DATABASE::Item);
      LibraryDimension.CreateDimension(Dimension);

      // [GIVEN] Default Dimension "A1" for Customer, "A2" for Item, "A3" for Service Item
      CustomerNo := LibrarySales.CreateCustomerNo;
      ServiceItemNo := CreateServiceItem(CustomerNo,CreateServiceItemGroup);
      ItemNo := LibraryInventory.CreateItemNo;
      CreateDefDimWithNewDimValue(Dimension.Code,DATABASE::Customer,CustomerNo);
      CreateDefDimWithNewDimValue(Dimension.Code,DATABASE::Item,ItemNo);
      ExpectedDimValueCode :=
        CreateDefDimWithNewDimValue(Dimension.Code,DATABASE::"Service Item",ServiceItemNo);

      // [GIVEN] Service Order with Customer and Service Item Line with Service Item
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CustomerNo);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItemNo);

      // [WHEN] Create Service Line with Item
      CreateServiceLineWithServItemLineNo(ServiceLine,ServiceHeader,ItemNo,ServiceItemLine."Line No.");

      // [THEN] "Dimension Set ID" in Service Line has dimension with value "A3"
      VerifyDimSetEntry(ServiceLine."Dimension Set ID",Dimension.Code,ExpectedDimValueCode);
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerForDim)]
    PROCEDURE DefDimWithHighPriorityFromWorkCenterInheritedByProdJournal@188();
    VAR
      ProductionOrder@1009 : Record 5405;
      ItemNo@1003 : Code[20];
      ItemDimValueCode@1000 : Code[20];
      WorkCenterDimValueCode@1002 : Code[20];
    BEGIN
      // [FEATURE] [Default Dimension Priority] [Production Journal]
      // [SCENARIO 378966] Default Dimension with high priority in Work Center should be inherited by Production Journal.
      Initialize;

      // [GIVEN] Default Dimension Priorities are high for Work Center and low for Item.
      // [GIVEN] Item with Routing "R" for Work Center.
      // [GIVEN] Default Dimension Value Codes are equal to "A1" for Item and "A2" for Work Center.
      // [GIVEN] Released Production Order for Item with Routing "R".
      CreateAndRefreshReleasedProdOrder(
        ProductionOrder,ItemNo,ItemDimValueCode,WorkCenterDimValueCode,DATABASE::"Work Center",DATABASE::Item);

      // [WHEN] Open Production Journal
      LibraryVariableStorage.Enqueue(ItemNo); // Enqueue for ModalPageHandlerForDim handler
      LibraryVariableStorage.Enqueue(WorkCenterDimValueCode); // Enqueue for ModalPageHandlerForDim handler
      LibraryManufacturing.OpenProductionJournal(ProductionOrder,FindProdOrderLineNo(ProductionOrder,ItemNo));

      // [THEN] Dimension Value Code in Production Journal Line is equal to "A2".
      // Checked on PageHandler named ModalPageHandlerForDim.
    END;

    [Test]
    [HandlerFunctions(ModalPageHandlerForDim)]
    PROCEDURE DefDimWithHighPriorityFromItemInheritedByProdJournal@213();
    VAR
      ProductionOrder@1009 : Record 5405;
      ItemNo@1003 : Code[20];
      ItemDimValueCode@1002 : Code[20];
      WorkCenterDimValueCode@1000 : Code[20];
    BEGIN
      // [FEATURE] [Default Dimension Priority] [Production Journal]
      // [SCENARIO 378966] Default Dimension with high priority in Item should be inherited by Production Journal.
      Initialize;

      // [GIVEN] Default Dimension Priorities are high for Item and low for Work Center.
      // [GIVEN] Item with Routing "R" for Work Center.
      // [GIVEN] Default Dimension Value Codes are equal to "A1" for Item and "A2" for Work Center.
      // [GIVEN] Released Production Order for Item with Routing "R".
      CreateAndRefreshReleasedProdOrder(
        ProductionOrder,ItemNo,ItemDimValueCode,WorkCenterDimValueCode,DATABASE::Item,DATABASE::"Work Center");

      // [WHEN] Open Production Journal
      LibraryVariableStorage.Enqueue(ItemNo); // Enqueue for ModalPageHandlerForDim handler
      LibraryVariableStorage.Enqueue(ItemDimValueCode); // Enqueue for ModalPageHandlerForDim handler
      LibraryManufacturing.OpenProductionJournal(ProductionOrder,FindProdOrderLineNo(ProductionOrder,ItemNo));

      // [THEN] Dimension Value Code in Production Journal Line is equal to "A1".
      // Checked on PageHandler named ModalPageHandlerForDim.
    END;

    [Test]
    PROCEDURE ModifiedDefDimWithHighestPriorityFromServHeaderDoNotInheritedToServLine@174();
    VAR
      Dimension@1007 : Record 348;
      ServiceHeader@1006 : Record 5900;
      ServiceItemLine@1005 : Record 5901;
      ServiceLine@1004 : Record 5902;
      CustomerNo@1003 : Code[20];
      ServiceItemNo@1002 : Code[20];
      ItemNo@1001 : Code[20];
      ExpectedDimValueCode@1000 : Code[20];
    BEGIN
      // [FEATURE] [Default Dimension Priority]
      // [SCENARIO 375456] Default Dimension with highest priority modified in Service Item Line should not be inherited to Service Line

      Initialize;
      // [GIVEN] Default Dimension Priorities: Service Item = 1, Item = 2
      SetPairedDefaultDimPriorities(DATABASE::"Service Item",DATABASE::Item);
      LibraryDimension.CreateDimension(Dimension);

      // [GIVEN] Default Dimension "A1" for Customer, "A2" for Item, "A3" for Service Item
      CustomerNo := LibrarySales.CreateCustomerNo;
      ServiceItemNo := CreateServiceItem(CustomerNo,CreateServiceItemGroup);
      ItemNo := LibraryInventory.CreateItemNo;
      CreateDefDimWithNewDimValue(Dimension.Code,DATABASE::Customer,CustomerNo);
      ExpectedDimValueCode := CreateDefDimWithNewDimValue(Dimension.Code,DATABASE::Item,ItemNo);
      CreateDefDimWithNewDimValue(Dimension.Code,DATABASE::"Service Item",ServiceItemNo);

      // [GIVEN] Service Order with Customer and Service Item Line with Service Item and dimension "A3" replaced with "A"4
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CustomerNo);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItemNo);
      ServiceItemLine."Dimension Set ID" :=
        ChangeDimensionValueInDimensionSetID(ServiceItemLine."Dimension Set ID",Dimension.Code);
      ServiceItemLine.MODIFY(TRUE);

      // [WHEN] Create Service Line with Item
      CreateServiceLineWithServItemLineNo(ServiceLine,ServiceHeader,ItemNo,ServiceItemLine."Line No.");

      // [THEN] "Dimension Set ID" in Service Line has dimension with value "A2"
      VerifyDimSetEntry(ServiceLine."Dimension Set ID",Dimension.Code,ExpectedDimValueCode);
    END;

    [Test]
    PROCEDURE DimFromServiceItemLineInheritedToServLine@178();
    VAR
      Dimension@1007 : Record 348;
      ServiceHeader@1006 : Record 5900;
      ServiceItemLine@1005 : Record 5901;
      ServiceLine@1004 : Record 5902;
      ServiceItemNo@1002 : Code[20];
      CustomerNo@1001 : Code[20];
    BEGIN
      // [SCENARIO 375646] Dimension from Service Item Line should be inherited to related Service Line

      Initialize;
      // [GIVEN] Service Order and Service Item Line with dimension "X"
      LibraryDimension.CreateDimension(Dimension);
      CustomerNo := LibrarySales.CreateCustomerNo;
      ServiceItemNo := CreateServiceItem(CustomerNo,CreateServiceItemGroup);
      CreateDefDimWithNewDimValue(Dimension.Code,DATABASE::"Service Item",ServiceItemNo);
      LibraryService.CreateServiceHeader(
        ServiceHeader,ServiceHeader."Document Type"::Order,CustomerNo);
      LibraryService.CreateServiceItemLine(
        ServiceItemLine,ServiceHeader,ServiceItemNo);

      // [THEN] Create Service Line related to Service Item Line
      CreateServiceLineWithServItemLineNo(
        ServiceLine,ServiceHeader,LibraryInventory.CreateItemNo,ServiceItemLine."Line No.");

      // [WHEN] Service Line has dimension "X"
      ServiceLine.TESTFIELD("Dimension Set ID",ServiceItemLine."Dimension Set ID");
    END;

    [Test]
    [HandlerFunctions(ServiceOrderStatisticsMPH)]
    PROCEDURE NewDimOnInvoiceRoungingGLAccount@197();
    VAR
      Customer@1000 : Record 18;
      ServiceHeader@1002 : Record 5900;
      DimensionSetTreeNode@1007 : Record 481;
      ServiceOrder@1006 : TestPage 5900;
      InvoiceRoundingGLAccountNo@1001 : Code[20];
      DimValueId@1005 : Integer;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 380919] Dimension Set ID is not updated on Temporary Service Line on open Statistic page
      Initialize;

      // [GIVEN] Enabled "Invoice Rounding" in "Sales & Receivables Setup"
      // [GIVEN] "Invoice Rounding Precision" = 1
      InitRoundingSetup;

      // [GIVEN] Customer posting group "CPG" with Invoice Rounding G/L Account = "A"
      // [GIVEN] New Dimension Value "DV" added to "A"
      // [GIVEN] Customer "C" with posting group "CPG"
      // [GIVEN] Service order for "C" with line having = 123.17 (the amount causes invoice rounding calculation for the service line)
      LibrarySales.CreateCustomer(Customer);
      InvoiceRoundingGLAccountNo := CreateGLAccountForInvoiceRounding(Customer."Customer Posting Group");
      DimValueId := CreateDimOnGLAccount(InvoiceRoundingGLAccountNo);
      CreateServiceOrderWithItemLine(ServiceHeader,Customer."No.");

      // [WHEN] Open service order's statistics page
      ServiceOrder.OPENEDIT;
      ServiceOrder.GOTORECORD(ServiceHeader);
      ServiceOrder.Statistics.INVOKE;
      ServiceOrder.CLOSE;

      // [THEN] Dimension Set Tree Node for "DV" has not been created
      DimensionSetTreeNode.INIT;
      DimensionSetTreeNode.SETFILTER("Parent Dimension Set ID",'<>%1',0);
      DimensionSetTreeNode.SETRANGE("Dimension Value ID",DimValueId);
      Assert.RecordIsEmpty(DimensionSetTreeNode);
    END;

    [Test]
    PROCEDURE PostInvoiceWithRoundingGLAccAndMandatoryDimension@202();
    VAR
      GeneralLedgerSetup@1008 : Record 98;
      DimValue@1007 : Record 349;
      DefaultDimension@1009 : Record 352;
      Customer@1000 : Record 18;
      ServiceHeader@1002 : Record 5900;
      InvoiceRoundingGLAccountNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Rounding]
      // [SCENARIO 204621] Dimensions are inherited from Service Header when post Service Order with Invoice Rounding Account and dimension setup "Code Mandatory"

      Initialize;

      // [GIVEN] Enabled "Invoice Rounding" in "Sales & Receivables Setup"
      // [GIVEN] "Invoice Rounding Precision" = 1
      InitRoundingSetup;

      // [GIVEN] Customer posting group with Invoice Rounding G/L Account = "A"
      // [GIVEN] Customer with posting group and dimension "DEPARTMENT" - "ADM"
      GeneralLedgerSetup.GET;
      LibrarySales.CreateCustomer(Customer);
      LibraryDimension.CreateDimensionValue(DimValue,GeneralLedgerSetup."Global Dimension 1 Code");
      LibraryDimension.CreateDefaultDimensionCustomer(
        DefaultDimension,Customer."No.",GeneralLedgerSetup."Global Dimension 1 Code",DimValue.Code);
      InvoiceRoundingGLAccountNo := CreateGLAccountForInvoiceRounding(Customer."Customer Posting Group");

      // [GIVEN] Dimension "DEPARTMENT" with "Value Posting" = "Code Mandatory" is set for Invoice Rounding G/L Account "A"
      CreateDimMandatoryOnGLAccount(InvoiceRoundingGLAccountNo,GeneralLedgerSetup."Global Dimension 1 Code");

      // [GIVEN] Service order with Customer and amount 123.17 (the amount causes invoice rounding calculation for the service line)
      CreateServiceOrderWithItemLine(ServiceHeader,Customer."No.");

      // [WHEN] Post Service Order
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [THEN] G/L Entry with G/L Account "A" is posted with Dimension "DEPARTMENT" - "ADM"
      VerifyGLEntryDimensionSetID(ServiceHeader."No.",InvoiceRoundingGLAccountNo,ServiceHeader."Dimension Set ID");
    END;

    LOCAL PROCEDURE Initialize@61();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      IF IsInitialized THEN
        EXIT;

      // Create Demonstration Database.
      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateGeneralPostingSetupData;

      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndRefreshReleasedProdOrder@196(VAR ProductionOrder@1000 : Record 5405;VAR ItemNo@1001 : Code[20];VAR ItemDimValueCode@1010 : Code[20];VAR WorkCenterDimValueCode@1009 : Code[20];TableOfHighPriority@1005 : Integer;TableOfLowPriority@1003 : Integer);
    VAR
      SourceCodeSetup@1002 : Record 242;
      Item@1008 : Record 27;
      RoutingHeader@1007 : Record 99000763;
      WorkCenterNo@1004 : Code[20];
    BEGIN
      SourceCodeSetup.GET;
      SetPairedDefaultDimPrioritiesForSourceCode(TableOfHighPriority,TableOfLowPriority,SourceCodeSetup."Production Journal");

      CreateCertifiedRoutingForWorkCenter(RoutingHeader,RoutingHeader.Type::Serial,WorkCenterNo);
      ItemNo := LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Routing No.",RoutingHeader."No.");
      Item.MODIFY(TRUE);

      SetDifferentDefaultDimForItemAndWorkCenter(ItemNo,WorkCenterNo,ItemDimValueCode,WorkCenterDimValueCode);

      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,
        ProductionOrder."Source Type"::Item,ItemNo,LibraryRandom.RandDec(100,2));
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateCertifiedRoutingForWorkCenter@191(VAR RoutingHeader@1000 : Record 99000763;RoutingType@1004 : Option;VAR WorkCenterNo@1003 : Code[20]);
    VAR
      WorkCenter@1006 : Record 99000754;
      RoutingLine@1002 : Record 99000764;
    BEGIN
      LibraryManufacturing.CreateWorkCenter(WorkCenter);

      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingType);
      LibraryManufacturing.CreateRoutingLineSetup(RoutingLine,RoutingHeader,WorkCenter."No.",LibraryUtility.GenerateGUID,0,0);
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
      WorkCenterNo := WorkCenter."No.";
    END;

    LOCAL PROCEDURE CreateHeaderResponsibility@167(VAR ServiceHeader@1000 : Record 5900;CustomerNo@1001 : Code[20];DimensionCode@1005 : Code[20];DimensionValueResponsibility@1002 : Code[20]);
    VAR
      ResponsibilityCenter@1003 : Record 5714;
      DefaultDimension@1004 : Record 352;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CustomerNo);

      LibraryService.CreateResponsibilityCenter(ResponsibilityCenter);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Responsibility Center",ResponsibilityCenter.Code,DimensionCode,DimensionValueResponsibility);
      ServiceHeader.VALIDATE("Responsibility Center",ResponsibilityCenter.Code);
      ServiceHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceHeaderBlockDim@40(VAR ServiceHeader@1000 : Record 5900;VAR Dimension@1001 : Record 348);
    VAR
      Customer@1002 : Record 18;
      DefaultDimension@1004 : Record 352;
    BEGIN
      // 1. Setup: Create Customer, Create Default Dimension for Customer.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDefaultDimensionCustomer(
        DefaultDimension,Customer."No.",Dimension.Code,FindDimensionValue(Dimension.Code));

      // 2. Exercise: Create Service Header and line
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
    END;

    LOCAL PROCEDURE CreateItemLineBlockDim@56(VAR ServiceItemLine@1001 : Record 5901;VAR Dimension@1000 : Record 348;QtyToConsume@1009 : Boolean);
    VAR
      Customer@1002 : Record 18;
      ServiceHeader@1003 : Record 5900;
      Item@1004 : Record 27;
      ServiceItem@1005 : Record 5940;
      ServiceLine@1006 : Record 5902;
      DefaultDimension@1008 : Record 352;
    BEGIN
      // 1. Setup: Create Customer, Create Service Item, Create Default Dimension for Service Item.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceItem(ServiceItem,Customer."No.");
      LibraryDimension.FindDimension(Dimension);
      DeleteDefaultDimItem(Item."No.",Dimension.Code);

      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Service Item",ServiceItem."No.",Dimension.Code,FindDimensionValue(Dimension.Code));

      // 2. Exercise: Create Service Header, Service Item Line, Service Line for Type Item and update Quantity on Line.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceLine.VALIDATE("No.",Item."No.");
      ServiceLine.VALIDATE(Quantity,RANDOM(10));  // Use Random because value is not important.
      IF QtyToConsume THEN
        ServiceLine.VALIDATE("Qty. to Consume",ServiceLine.Quantity);
      ServiceLine.MODIFY(TRUE);

      UpdateDimSetIdOnItemLine(
        ServiceItemLine,DefaultDimension."Dimension Code",
        FindDifferentDimensionValue(DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code"));
    END;

    LOCAL PROCEDURE CreateLimitedDimHeader@144(VAR ServiceHeader@1000 : Record 5900;VAR DimensionValueCombination@1001 : Record 351);
    VAR
      Customer@1004 : Record 18;
      DimensionSetID@1003 : Integer;
    BEGIN
      // 1. Setup: Create Customer.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      DimensionValueCombination.FINDFIRST;

      // 2. Exercise: Create Service Header and Document Dimension on Service Header.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      DimensionSetID :=
        LibraryDimension.CreateDimSet(
          ServiceHeader."Dimension Set ID",
          DimensionValueCombination."Dimension 1 Code",DimensionValueCombination."Dimension 1 Value Code");
      DimensionSetID :=
        LibraryDimension.CreateDimSet(
          DimensionSetID,
          DimensionValueCombination."Dimension 2 Code",DimensionValueCombination."Dimension 2 Value Code");
      UpdateDimSetIdOnHeader(ServiceHeader,DimensionSetID);
    END;

    LOCAL PROCEDURE CreateLineBlockDimCost@112(VAR ServiceLine@1001 : Record 5902;VAR Dimension@1000 : Record 348);
    VAR
      Customer@1007 : Record 18;
      ServiceCost@1005 : Record 5905;
    BEGIN
      // 1. Setup: Create Customer.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateServiceCost(ServiceCost);
      LibraryDimension.FindDimension(Dimension);

      // 2. Exercise: Create Service Header, Service Item Line, Service Line of Type Cost and Create Document Dimension for Type Cost.
      CreateServiceOrder(ServiceLine,ServiceLine.Type::Cost,ServiceCost.Code,Customer."No.",FALSE);
      UpdateDimSetIdOnLine(
        ServiceLine,
        LibraryDimension.CreateDimSet(ServiceLine."Dimension Set ID",Dimension.Code,FindDimensionValue(Dimension.Code)));
    END;

    LOCAL PROCEDURE CreateLineBlockDimGLAccount@127(VAR ServiceLine@1001 : Record 5902;VAR Dimension@1000 : Record 348);
    VAR
      Customer@1007 : Record 18;
      GLAccount@1005 : Record 15;
      DefaultDimension@1002 : Record 352;
    BEGIN
      // 1. Setup: Create Customer, Create G/L Account and Create Default Dimension for G/L Account.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateGLAccount(GLAccount);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDefaultDimensionGLAcc(DefaultDimension,GLAccount."No.",Dimension.Code,FindDimensionValue(Dimension.Code));

      // 2. Exercise: Create Service Header, Service Item Line and Service Line of Type G/L Account.
      CreateServiceOrder(ServiceLine,ServiceLine.Type::"G/L Account",GLAccount."No.",Customer."No.",FALSE);
    END;

    [HandlerFunctions(ConfirmMessageHandler)]
    LOCAL PROCEDURE CreateLineBlockDimItem@86(VAR ServiceLine@1001 : Record 5902;VAR Dimension@1000 : Record 348;QtyToConsume@1005 : Boolean);
    VAR
      Customer@1002 : Record 18;
      Item@1004 : Record 27;
      DefaultDimension@1003 : Record 352;
    BEGIN
      // 1. Setup: Create Customer, Create Item, Create Default Dimension for Item.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,Item."No.",Dimension.Code,FindDimensionValue(Dimension.Code));

      // 2. Exercise: Create Service Header, Service Item Line and Service Line.
      CreateServiceOrder(ServiceLine,ServiceLine.Type::Item,Item."No.",Customer."No.",QtyToConsume);
    END;

    LOCAL PROCEDURE CreateLineBlockDimResource@149(VAR ServiceLine@1001 : Record 5902;VAR Dimension@1000 : Record 348;QtyToConsume@1003 : Boolean);
    VAR
      Customer@1006 : Record 18;
      DefaultDimension@1002 : Record 352;
    BEGIN
      // 1. Setup: Create Customer, Create Resource, Create Default Dimension for Resource.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDefaultDimensionResource(
        DefaultDimension,CreateResource,Dimension.Code,FindDimensionValue(Dimension.Code));

      // 2. Exercise: Create Service Header, Service Item Line and Service Line of Type Resource.
      CreateServiceOrder(ServiceLine,ServiceLine.Type::Resource,DefaultDimension."No.",Customer."No.",QtyToConsume);
    END;

    LOCAL PROCEDURE CreateOrderWithCustomerDim@119(VAR ServiceLine@1000 : Record 5902;VAR DefaultDimension@1001 : Record 352);
    VAR
      Item@1012 : Record 27;
      Customer@1011 : Record 18;
      Dimension@1010 : Record 348;
    BEGIN
      // Create Customer, Create Item, Create Default Dimension for Item and Customer, Create Service Header, Service Item
      // Line and Service Line of Type Item.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDefaultDimensionCustomer(
        DefaultDimension,Customer."No.",Dimension.Code,FindDimensionValue(Dimension.Code));

      CreateServiceOrder(ServiceLine,ServiceLine.Type::Item,Item."No.",Customer."No.",FALSE);
    END;

    LOCAL PROCEDURE CreateServiceCost@64(VAR ServiceCost@1000 : Record 5905);
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);
      LibraryService.CreateServiceCost(ServiceCost);
      ServiceCost.VALIDATE("Account No.",GLAccount."No.");
      ServiceCost.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceDocumentLines@168(VAR ServiceLine@1000 : Record 5902;VAR ServiceItemLine@1001 : Record 5901;VAR DimensionValue@1003 : Record 349;ServiceHeader@1002 : Record 5900;DimensionCode@1013 : Code[20]) ServiceItemGroupCode : Code[10];
    VAR
      Item@1010 : Record 27;
      DefaultDimension@1005 : Record 352;
      ServiceCost@1006 : Record 5905;
      GLAccount@1011 : Record 15;
      ServiceItemNo@1008 : Code[20];
      ResourceNo@1007 : Code[20];
    BEGIN
      DimensionValue.NEXT;
      ServiceItemGroupCode := CreateServiceItemGroup;
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Service Item Group",ServiceItemGroupCode,DimensionCode,DimensionValue.Code);

      DimensionValue.NEXT;
      ServiceItemNo := CreateServiceItem(ServiceHeader."Customer No.",ServiceItemGroupCode);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Service Item",ServiceItemNo,DimensionCode,DimensionValue.Code);

      DimensionValue.NEXT;
      LibraryInventory.CreateItem(Item);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,Item."No.",DimensionCode,DimensionValue.Code);

      DimensionValue.NEXT;
      ResourceNo := CreateResource;
      LibraryDimension.CreateDefaultDimensionResource(DefaultDimension,ResourceNo,DimensionCode,DimensionValue.Code);

      DimensionValue.NEXT;
      CreateGLAccount(GLAccount);
      LibraryDimension.CreateDefaultDimensionGLAcc(DefaultDimension,GLAccount."No.",DimensionCode,DimensionValue.Code);

      CreateServiceCost(ServiceCost);

      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItemNo);
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.",ServiceItemLine."Line No.");
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Resource,ResourceNo,ServiceItemLine."Line No.");
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::"G/L Account",GLAccount."No.",ServiceItemLine."Line No.");
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code,ServiceItemLine."Line No.");
    END;

    LOCAL PROCEDURE CreateServiceHeaderWithDim@123(VAR ServiceHeader@1000 : Record 5900;VAR DefaultDimension@1004 : Record 352;ValuePosting@1002 : Option);
    VAR
      Customer@1005 : Record 18;
      Dimension@1001 : Record 348;
    BEGIN
      // Create Customer, Create Default Dimension for Customer and Create Service Header.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryDimension.FindDimension(Dimension);
      IF ValuePosting = DefaultDimension."Value Posting"::"No Code" THEN
        LibraryDimension.CreateDefaultDimensionCustomer(DefaultDimension,Customer."No.",Dimension.Code,'')
      ELSE
        LibraryDimension.CreateDefaultDimensionCustomer(DefaultDimension,Customer."No.",
          Dimension.Code,FindDimensionValue(Dimension.Code));

      DefaultDimension.VALIDATE("Value Posting",ValuePosting);
      DefaultDimension.MODIFY(TRUE);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
    END;

    LOCAL PROCEDURE CreateServiceLine@129(VAR ServiceLine@1000 : Record 5902;ServiceHeader@1001 : Record 5900;Type@1002 : Option;No@1003 : Code[20];ServiceItemLineNo@1005 : Integer);
    BEGIN
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,Type,No);
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLineNo);
      ServiceLine.VALIDATE(Quantity,RANDOM(10));  // Use Random because value is not important.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceOrder@88(VAR ServiceLine@1000 : Record 5902;Type@1003 : Option;No@1004 : Code[20];CustomerNo@1005 : Code[20];QtyToConsume@1006 : Boolean);
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceItemLine@1001 : Record 5901;
    BEGIN
      // Create Service Header, Service item Line and Service Line.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CustomerNo);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,Type,No);
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceLine.VALIDATE(Quantity,RANDOM(10));  // Use Random because value is not important.
      IF QtyToConsume THEN
        ServiceLine.VALIDATE("Qty. to Consume",ServiceLine.Quantity);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceOrderCost@153(VAR ServiceLine@1000 : Record 5902);
    VAR
      Customer@1004 : Record 18;
      ServiceCost@1002 : Record 5905;
    BEGIN
      // 1. Setup: Create Customer.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateServiceCost(ServiceCost);

      // 2. Exercise: Create Service Header, Service Item Line and Service Line of Type Cost.
      CreateServiceOrder(ServiceLine,ServiceLine.Type::Cost,ServiceCost.Code,Customer."No.",FALSE);
    END;

    LOCAL PROCEDURE CreateServiceOrderGLAccount@157(VAR ServiceLine@1000 : Record 5902);
    VAR
      Customer@1004 : Record 18;
      GLAccount@1002 : Record 15;
    BEGIN
      // 1. Setup: Create Customer, G/L Account.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateGLAccount(GLAccount);

      // 2. Exercise: Create Service Header, Service Item Line and Service Line of Type Cost.
      CreateServiceOrder(ServiceLine,ServiceLine.Type::"G/L Account",GLAccount."No.",Customer."No.",FALSE);
    END;

    LOCAL PROCEDURE CreateServiceOrderGLDim@120(VAR ServiceHeader@1002 : Record 5900;ValuePosting@1013 : Option);
    VAR
      Item@1010 : Record 27;
      Customer@1000 : Record 18;
      Dimension@1001 : Record 348;
      ServiceLine@1006 : Record 5902;
      GLAccount@1007 : Record 15;
      DefaultDimension@1005 : Record 352;
      ServiceItemLine@1011 : Record 5901;
      ResourceNo@1008 : Code[20];
    BEGIN
      // Create Customer, Resource, Item, G/L Account and Assign Default Dimension for all with Value Posting "No Code",
      // Create Service Header, Service Item Line, Service Line of Type Item, Resource, G/L Account.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      ResourceNo := CreateResource;
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDefaultDimensionResource(DefaultDimension,ResourceNo,Dimension.Code,FindDimensionValue(Dimension.Code));
      ModifyDefaultDimension(DefaultDimension,ValuePosting);

      LibraryInventory.CreateItem(Item);
      Dimension.NEXT;
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,Item."No.",Dimension.Code,FindDimensionValue(Dimension.Code));
      ModifyDefaultDimension(DefaultDimension,ValuePosting);

      CreateGLAccount(GLAccount);
      Dimension.NEXT;
      LibraryDimension.CreateDefaultDimensionGLAcc(DefaultDimension,GLAccount."No.",Dimension.Code,FindDimensionValue(Dimension.Code));
      ModifyDefaultDimension(DefaultDimension,ValuePosting);

      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.",ServiceItemLine."Line No.");
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Resource,ResourceNo,ServiceItemLine."Line No.");
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::"G/L Account",GLAccount."No.",ServiceItemLine."Line No.");
      IF DefaultDimension."Value Posting" <> DefaultDimension."Value Posting"::"No Code" THEN
        CreateDimSetEntry(DefaultDimension."Dimension Code",FindDimensionValue(Dimension.Code));
    END;

    LOCAL PROCEDURE CreateServiceOrderItem@132(VAR ServiceLine@1000 : Record 5902;QtyToConsume@1003 : Boolean);
    VAR
      Customer@1002 : Record 18;
      Item@1004 : Record 27;
    BEGIN
      // 1. Setup: Create Customer and Item.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);

      // 2. Exercise: Create Service Header, Service Item Line and Service Line for Type Item.
      CreateServiceOrder(ServiceLine,ServiceLine.Type::Item,Item."No.",Customer."No.",QtyToConsume);
    END;

    LOCAL PROCEDURE CreateServiceOrderResource@146(VAR ServiceLine@1000 : Record 5902;QtyToConsume@1001 : Boolean);
    VAR
      Customer@1004 : Record 18;
    BEGIN
      // 1. Setup: Create Customer.
      Initialize;
      LibrarySales.CreateCustomer(Customer);

      // 2. Exercise: Create Service Header, Service Item Line and Service Line of Type Resource.
      CreateServiceOrder(ServiceLine,ServiceLine.Type::Resource,CreateResource,Customer."No.",QtyToConsume);
    END;

    LOCAL PROCEDURE CreateServiceOrderWithDim@128(VAR ServiceHeader@1000 : Record 5900;VAR ServiceLine@1012 : Record 5902;Consume@1014 : Boolean);
    VAR
      Item@1016 : Record 27;
      GLAccount@1015 : Record 15;
      Customer@1011 : Record 18;
      Dimension@1010 : Record 348;
      DefaultDimension@1009 : Record 352;
      ServiceCost@1008 : Record 5905;
      ServiceItemLine@1003 : Record 5901;
      ServiceItemNo@1001 : Code[20];
      ResourceNo@1002 : Code[20];
    BEGIN
      // Create Customer, Service Item, Item, Resource, G/L Account, Cost, assign Default Dimensions on all, Create Service Header,
      // Service Item Line and Service Line of Type Item, Resource, G/L Account and Cost as per Consume parameter.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDefaultDimensionCustomer(
        DefaultDimension,Customer."No.",Dimension.Code,FindDimensionValue(Dimension.Code));

      ServiceItemNo := CreateServiceItem(Customer."No.",'');
      Dimension.NEXT;
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::"Service Item",ServiceItemNo,Dimension.Code,FindDimensionValue(Dimension.Code));

      LibraryInventory.CreateItem(Item);
      Dimension.NEXT;
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,Item."No.",Dimension.Code,FindDimensionValue(Dimension.Code));

      ResourceNo := CreateResource;
      LibraryDimension.CreateDefaultDimensionResource(DefaultDimension,ResourceNo,Dimension.Code,FindDimensionValue(Dimension.Code));

      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItemNo);
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.",ServiceItemLine."Line No.");
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Resource,ResourceNo,ServiceItemLine."Line No.");
      IF Consume THEN
        EXIT;
      CreateGLAccount(GLAccount);
      LibraryDimension.CreateDefaultDimensionGLAcc(
        DefaultDimension,GLAccount."No.",Dimension.Code,FindDimensionValue(Dimension.Code));
      CreateServiceCost(ServiceCost);
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::"G/L Account",GLAccount."No.",ServiceItemLine."Line No.");
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code,ServiceItemLine."Line No.");
    END;

    LOCAL PROCEDURE CreateServiceOrderWithItem@97(VAR ServiceItemLine@1001 : Record 5901;QtyToConsume@1002 : Boolean);
    VAR
      Customer@1004 : Record 18;
      ServiceHeader@1005 : Record 5900;
      ServiceLine@1008 : Record 5902;
      ServiceItem@1006 : Record 5940;
      ItemNo@1007 : Code[20];
    BEGIN
      // Create Customer, Service Item, Create Service Header, Service Item Line and Service Line.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceItem(ServiceItem,Customer."No.");
      ItemNo := LibraryInventory.CreateItemNo;

      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNo);
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceLine.VALIDATE("No.",ItemNo);
      ServiceLine.VALIDATE(Quantity,RANDOM(10));  // Use Random because value is not important.
      IF QtyToConsume THEN
        ServiceLine.VALIDATE("Qty. to Consume",ServiceLine.Quantity);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceOrderWithItemLine@216(VAR ServiceHeader@1000 : Record 5900;CustNo@1001 : Code[20]);
    VAR
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1003 : Record 5902;
    BEGIN
      LibraryService.CreateServiceHeader(
        ServiceHeader,ServiceHeader."Document Type"::Order,CustNo);
      LibraryService.CreateServiceItemLine(
        ServiceItemLine,ServiceHeader,CreateServiceItem(CustNo,CreateServiceItemGroup));
      CreateServiceLineWithServItemLineNo(
        ServiceLine,ServiceHeader,LibraryInventory.CreateItemNo,ServiceItemLine."Line No.");
      ServiceLine.VALIDATE(Quantity,LibraryRandom.RandInt(10));
      ServiceLine.VALIDATE("Unit Price",LibraryRandom.RandDecInRange(100,200,2));
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceLineWithServItemLineNo@179(VAR ServiceLine@1000 : Record 5902;ServiceHeader@1001 : Record 5900;ItemNo@1002 : Code[20];ItemLineNo@1003 : Integer);
    BEGIN
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNo);
      ServiceLine.VALIDATE("Service Item Line No.",ItemLineNo);
      ServiceLine.VALIDATE("No.",ItemNo);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateStandardServiceCodeDim@154(VAR StandardServiceCode@1016 : Record 5996);
    VAR
      Item@1027 : Record 27;
      GLAccount@1025 : Record 15;
      ServiceCost@1021 : Record 5905;
      Dimension@1020 : Record 348;
      StandardServiceLine@1015 : Record 5997;
    BEGIN
      LibraryService.CreateStandardServiceCode(StandardServiceCode);

      LibraryInventory.CreateItem(Item);
      LibraryDimension.FindDimension(Dimension);
      CreateStandardServiceLineDim(StandardServiceCode.Code,StandardServiceLine.Type::Item,Item."No.",Dimension.Code);

      Dimension.NEXT;
      CreateStandardServiceLineDim(StandardServiceCode.Code,StandardServiceLine.Type::Resource,CreateResource,Dimension.Code);

      CreateServiceCost(ServiceCost);
      Dimension.NEXT;
      CreateStandardServiceLineDim(StandardServiceCode.Code,StandardServiceLine.Type::Cost,ServiceCost.Code,Dimension.Code);

      CreateGLAccount(GLAccount);
      Dimension.NEXT;
      CreateStandardServiceLineDim(StandardServiceCode.Code,StandardServiceLine.Type::"G/L Account",GLAccount."No.",Dimension.Code);
    END;

    LOCAL PROCEDURE CreateStandardServiceLineDim@102(StandardServiceCode@1000 : Code[10];StandardServiceLineType@1001 : Option;StandardServiceLineNo@1002 : Code[20];DimensionCode@1004 : Code[20]) : Integer;
    VAR
      StandardServiceLine@1003 : Record 5997;
    BEGIN
      CreateStandardServiceLine(StandardServiceLine,StandardServiceCode,StandardServiceLineType,StandardServiceLineNo);
      UpdateStandardServiceLineDim(
        StandardServiceLine,
        LibraryDimension.CreateDimSet(StandardServiceLine."Dimension Set ID",DimensionCode,FindDimensionValue(DimensionCode)));
      EXIT(StandardServiceLine."Dimension Set ID");
    END;

    LOCAL PROCEDURE CreateStandardServiceLine@158(VAR StandardServiceLine@1001 : Record 5997;StandardServiceCode@1002 : Code[10];Type@1003 : Option;No@1004 : Code[20]);
    BEGIN
      LibraryService.CreateStandardServiceLine(StandardServiceLine,StandardServiceCode);
      StandardServiceLine.VALIDATE(Type,Type);
      StandardServiceLine.VALIDATE("No.",No);
      StandardServiceLine.VALIDATE(Quantity,RANDOM(10));  // Use Random because value is not important.
      StandardServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndSignServiceContract@89(CustomerNo@1002 : Code[20]) : Code[20];
    VAR
      ServiceContractHeader@1000 : Record 5965;
      ServiceContractLine@1001 : Record 5964;
      ServiceItem@1004 : Record 5940;
      Dimension@1003 : Record 348;
      DimensionValue@1006 : Record 349;
      SignServContractDoc@1005 : Codeunit 5944;
    BEGIN
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,CustomerNo);

      CreateDimensionAndDimensionValue(Dimension,DimensionValue);

      LibraryDimension.CreateServiceContractDimension(ServiceContractHeader,Dimension.Code,DimensionValue.Code);

      LibraryService.CreateServiceItem(ServiceItem,CustomerNo);
      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");
      ServiceContractLine.VALIDATE("Line Value",RANDOM(100));  // Use Random because value is not important.
      ServiceContractLine.MODIFY(TRUE);
      UpdateServiceContract(ServiceContractHeader);
      UpdateServiceContractLineDate(ServiceContractLine,ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);
      EXIT(ServiceContractHeader."Contract No.");
    END;

    LOCAL PROCEDURE CreateDefaultDimensionPriority@164(VAR DefaultDimensionPriority@1000 : Record 354);
    VAR
      SourceCodeSetup@1002 : Record 242;
    BEGIN
      // Use 1,2,3,4,5 Values for Dimension Priority.
      SourceCodeSetup.GET;

      DefaultDimensionPriority.SETRANGE("Source Code",SourceCodeSetup."Service Management");
      DefaultDimensionPriority.DELETEALL(TRUE);
      LibraryDimension.CreateDefaultDimensionPriority(DefaultDimensionPriority,SourceCodeSetup."Service Management",DATABASE::Item);
      UpdatePriority(DefaultDimensionPriority,1);

      LibraryDimension.CreateDefaultDimensionPriority(
        DefaultDimensionPriority,SourceCodeSetup."Service Management",DATABASE::"Service Item Group");
      UpdatePriority(DefaultDimensionPriority,2);

      LibraryDimension.CreateDefaultDimensionPriority(
        DefaultDimensionPriority,SourceCodeSetup."Service Management",DATABASE::"Service Item");
      UpdatePriority(DefaultDimensionPriority,3);

      LibraryDimension.CreateDefaultDimensionPriority(
        DefaultDimensionPriority,SourceCodeSetup."Service Management",DATABASE::"Responsibility Center");
      UpdatePriority(DefaultDimensionPriority,4);

      LibraryDimension.CreateDefaultDimensionPriority(
        DefaultDimensionPriority,SourceCodeSetup."Service Management",DATABASE::Customer);
      UpdatePriority(DefaultDimensionPriority,5);

      LibraryDimension.CreateDefaultDimensionPriority(
        DefaultDimensionPriority,SourceCodeSetup."Service Management",DATABASE::"G/L Account");
      UpdatePriority(DefaultDimensionPriority,1);

      LibraryDimension.CreateDefaultDimensionPriority(
        DefaultDimensionPriority,SourceCodeSetup."Service Management",DATABASE::Resource);
      UpdatePriority(DefaultDimensionPriority,1);
    END;

    LOCAL PROCEDURE CreateDefDimWithNewDimValue@201(DimensionCode@1000 : Code[20];SourceID@1001 : Integer;SourceNo@1002 : Code[20]) : Code[20];
    VAR
      DimensionValue@1005 : Record 349;
      DefaultDimension@1004 : Record 352;
    BEGIN
      LibraryDimension.CreateDimensionValue(DimensionValue,DimensionCode);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,SourceID,SourceNo,DimensionValue."Dimension Code",
        DimensionValue.Code);
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateDimOnGLAccount@219(GLAccountNo@1000 : Code[20]) : Integer;
    VAR
      DimensionValue@1001 : Record 349;
      DefaultDimension@1002 : Record 352;
    BEGIN
      LibraryDimension.CreateDimWithDimValue(DimensionValue);
      LibraryDimension.CreateDefaultDimensionGLAcc(
        DefaultDimension,GLAccountNo,DimensionValue."Dimension Code",DimensionValue.Code);
      DefaultDimension.VALIDATE("Value Posting",DefaultDimension."Value Posting"::"Same Code");
      DefaultDimension.MODIFY;
      EXIT(DimensionValue."Dimension Value ID");
    END;

    LOCAL PROCEDURE CreateDimMandatoryOnGLAccount@207(GLAccountNo@1000 : Code[20];DimensionCode@1003 : Code[20]);
    VAR
      DefaultDimension@1002 : Record 352;
    BEGIN
      LibraryDimension.CreateDefaultDimensionGLAcc(
        DefaultDimension,GLAccountNo,DimensionCode,'');
      DefaultDimension.VALIDATE("Value Posting",DefaultDimension."Value Posting"::"Code Mandatory");
      DefaultDimension.MODIFY;
    END;

    LOCAL PROCEDURE CreateItemResourceGLDefaultDim@47(VAR CustomerNo@1003 : Code[20];VAR ItemNo@1002 : Code[20];VAR ResourceNo@1001 : Code[20];VAR GLAccountNo@1000 : Code[20]);
    VAR
      Customer@1013 : Record 18;
      Dimension@1009 : Record 348;
      Item@1008 : Record 27;
      GLAccount@1004 : Record 15;
      DefaultDimension@1007 : Record 352;
    BEGIN
      // Create Customer, Item, Resource, G/L Account and assign Default Dimension on all.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,Item."No.",Dimension.Code,FindDimensionValue(Dimension.Code));

      ResourceNo := CreateResource;
      LibraryDimension.CreateDefaultDimensionResource(DefaultDimension,ResourceNo,Dimension.Code,FindDimensionValue(Dimension.Code));

      CreateGLAccount(GLAccount);
      LibraryDimension.CreateDefaultDimensionGLAcc(DefaultDimension,GLAccount."No.",Dimension.Code,FindDimensionValue(Dimension.Code));
      CustomerNo := Customer."No.";
      ItemNo := Item."No.";
      GLAccountNo := GLAccount."No.";
    END;

    LOCAL PROCEDURE CreateGLAccount@10(VAR GLAccount@1000 : Record 15);
    BEGIN
      GLAccount.GET(LibraryERM.CreateGLAccountWithSalesSetup);
      GLAccount.VALIDATE("Direct Posting",TRUE);
      GLAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGLAccountForInvoiceRounding@199(CustomerPostingGroupCode@1002 : Code[10]) : Code[20];
    VAR
      CustomerPostingGroup@1001 : Record 92;
    BEGIN
      CustomerPostingGroup.GET(CustomerPostingGroupCode);
      CustomerPostingGroup.VALIDATE("Invoice Rounding Account",LibraryERM.CreateGLAccountWithSalesSetup);
      CustomerPostingGroup.MODIFY(TRUE);

      EXIT(CustomerPostingGroup."Invoice Rounding Account");
    END;

    LOCAL PROCEDURE CreateLimitedDimItemLine@77(VAR DimensionValueCombination@1000 : Record 351;ServiceItemLine@1002 : Record 5901);
    VAR
      DimensionSetID@1001 : Integer;
    BEGIN
      DimensionValueCombination.FINDFIRST;
      DimensionSetID :=
        LibraryDimension.CreateDimSet(
          ServiceItemLine."Dimension Set ID",DimensionValueCombination."Dimension 1 Code",
          DimensionValueCombination."Dimension 1 Value Code");
      DimensionSetID :=
        LibraryDimension.CreateDimSet(
          DimensionSetID,DimensionValueCombination."Dimension 2 Code",DimensionValueCombination."Dimension 2 Value Code");
      ServiceItemLine.UpdateAllLineDim(DimensionSetID,ServiceItemLine."Dimension Set ID");
      ServiceItemLine.VALIDATE("Dimension Set ID",DimensionSetID);
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLimitedDimServiceLine@145(VAR DimensionValueCombination@1001 : Record 351;ServiceLine@1000 : Record 5902);
    VAR
      DimensionSetID@1003 : Integer;
    BEGIN
      DimensionValueCombination.FINDFIRST;
      DimensionSetID :=
        LibraryDimension.CreateDimSet(
          ServiceLine."Dimension Set ID",
          DimensionValueCombination."Dimension 1 Code",DimensionValueCombination."Dimension 1 Value Code");
      DimensionSetID :=
        LibraryDimension.CreateDimSet(
          DimensionSetID,DimensionValueCombination."Dimension 2 Code",DimensionValueCombination."Dimension 2 Value Code");
      ServiceLine.VALIDATE("Dimension Set ID",DimensionSetID);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateResource@111() : Code[20];
    BEGIN
      EXIT(LibraryResource.CreateResourceNo);
    END;

    LOCAL PROCEDURE CreateServiceItem@115(CustomerNo@1001 : Code[20];ServiceItemGroupCode@1002 : Code[10]) : Code[20];
    VAR
      ServiceItem@1000 : Record 5940;
    BEGIN
      LibraryService.CreateServiceItem(ServiceItem,CustomerNo);
      ServiceItem.VALIDATE("Service Item Group Code",ServiceItemGroupCode);
      ServiceItem.MODIFY(TRUE);
      EXIT(ServiceItem."No.");
    END;

    LOCAL PROCEDURE CreateServiceOrderWithLines@82(VAR ServiceLine@1000 : Record 5902;CustomerNo@1004 : Code[20];ItemNo@1003 : Code[20];ResourceNo@1002 : Code[20];GLAccountNo@1001 : Code[20]);
    VAR
      ServiceHeader@1005 : Record 5900;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CustomerNo);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNo);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Resource,ResourceNo);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::"G/L Account",GLAccountNo);
    END;

    LOCAL PROCEDURE CreateCustomerWithDefGlobalDimensions@187(VAR ShortcutDimCode@1002 : ARRAY [2] OF Code[20]) : Code[20];
    VAR
      Customer@1000 : Record 18;
      DefaultDimension@1003 : Record 352;
      DimSetID@1001 : Integer;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      InitDimSetIDWithGlobalDimensions(DimSetID,ShortcutDimCode);
      LibraryDimension.CreateDefaultDimensionCustomer(
        DefaultDimension,Customer."No.",LibraryERM.GetGlobalDimensionCode(1),ShortcutDimCode[1]);
      LibraryDimension.CreateDefaultDimensionCustomer(
        DefaultDimension,Customer."No.",LibraryERM.GetGlobalDimensionCode(2),ShortcutDimCode[2]);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateServiceItemGroup@34() : Code[10];
    VAR
      ServiceItemGroup@1000 : Record 5904;
    BEGIN
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      EXIT(ServiceItemGroup.Code);
    END;

    LOCAL PROCEDURE InitDimSetIDWithGlobalDimensions@173(VAR DimSetID@1000 : Integer;VAR ShortcutDimCode@1001 : ARRAY [2] OF Code[20]);
    BEGIN
      ShortcutDimCode[1] := FindDimensionValue(LibraryERM.GetGlobalDimensionCode(1));
      ShortcutDimCode[2] := FindDimensionValue(LibraryERM.GetGlobalDimensionCode(2));
      DimSetID :=
        LibraryDimension.CreateDimSet(0,LibraryERM.GetGlobalDimensionCode(1),ShortcutDimCode[1]);
      DimSetID :=
        LibraryDimension.CreateDimSet(DimSetID,LibraryERM.GetGlobalDimensionCode(2),ShortcutDimCode[2]);
    END;

    LOCAL PROCEDURE InitRoundingSetup@243();
    BEGIN
      LibraryERM.SetInvRoundingPrecisionLCY(1);
      LibrarySales.SetInvoiceRounding(TRUE);
      LibrarySales.SetCalcInvDiscount(FALSE);
      LibrarySales.SetStockoutWarning(FALSE);
    END;

    LOCAL PROCEDURE DeleteDefaultDimItem@181(No@1002 : Code[20];DimensionCode@1001 : Code[20]);
    VAR
      DefaultDimension@1000 : Record 352;
    BEGIN
      DefaultDimension.SETRANGE("Table ID",DATABASE::Item);
      DefaultDimension.SETRANGE("No.",No);
      DefaultDimension.SETRANGE("Dimension Code",DimensionCode);
      DefaultDimension.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE DeleteServiceLineDimensions@206(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FINDSET;
      REPEAT
        ServiceLine.VALIDATE("Dimension Set ID",0);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE FilterDefaultDimension@165(VAR DefaultDimension@1000 : Record 352;Type@1003 : ' ,Item,Resource,Cost,G/L Account';No@1002 : Code[20]);
    BEGIN
      IF Type = Type::Item THEN
        DefaultDimension.SETRANGE("Table ID",DATABASE::Item);
      IF Type = Type::Resource THEN
        DefaultDimension.SETRANGE("Table ID",DATABASE::Resource);
      IF Type = Type::"G/L Account" THEN
        DefaultDimension.SETRANGE("Table ID",DATABASE::"G/L Account");
      DefaultDimension.SETRANGE("No.",No);
      DefaultDimension.FINDFIRST;
    END;

    LOCAL PROCEDURE FindCustLedgerEntryDimSetID@200(DocumentNo@1001 : Code[20]) : Integer;
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETRANGE("Document No.",DocumentNo);
      CustLedgerEntry.FINDFIRST;
      EXIT(CustLedgerEntry."Dimension Set ID");
    END;

    LOCAL PROCEDURE FindDimensionValue@78(DimensionCode@1001 : Code[20]) : Code[20];
    VAR
      DimensionValue@1000 : Record 349;
    BEGIN
      LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE FindDifferentDimensionValue@126(DimensionCode@1001 : Code[20];Code@1002 : Code[20]) : Code[20];
    VAR
      DimensionValue@1000 : Record 349;
    BEGIN
      DimensionValue.SETFILTER(Code,'<>%1',Code);
      LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE FindGLEntryDimSetID@198(GLAccountNo@1001 : Code[20];DocumenNo@1002 : Code[20]) : Integer;
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETRANGE("Document No.",DocumenNo);
      GLEntry.FINDFIRST;
      EXIT(GLEntry."Dimension Set ID");
    END;

    LOCAL PROCEDURE FindItemLedgerEntryDimSetID@195(ServiceShipmentLine@1001 : Record 5991) : Integer;
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Document Type",ItemLedgerEntry."Document Type"::"Service Shipment");
      ItemLedgerEntry.SETRANGE("Document No.",ServiceShipmentLine."Document No.");
      ItemLedgerEntry.SETRANGE("Document Line No.",ServiceShipmentLine."Line No.");
      ItemLedgerEntry.FINDFIRST;
      EXIT(ItemLedgerEntry."Dimension Set ID");
    END;

    LOCAL PROCEDURE FindProdOrderLineNo@193(ProductionOrder@1001 : Record 5405;ItemNo@1002 : Code[20]) : Integer;
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      WITH ProdOrderLine DO BEGIN
        SETRANGE(Status,ProductionOrder.Status);
        SETRANGE("Prod. Order No.",ProductionOrder."No.");
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        EXIT("Line No.");
      END;
    END;

    LOCAL PROCEDURE FindResLedgerEntryDimSetID@190(ResourceNo@1001 : Code[20];DocumentNo@1002 : Code[20]) : Integer;
    VAR
      ResLedgerEntry@1000 : Record 203;
    BEGIN
      ResLedgerEntry.SETRANGE("Resource No.",ResourceNo);
      ResLedgerEntry.SETRANGE("Entry Type",ResLedgerEntry."Entry Type"::Sale);
      ResLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ResLedgerEntry.FINDFIRST;
      EXIT(ResLedgerEntry."Dimension Set ID");
    END;

    LOCAL PROCEDURE FindServiceShipmentHeader@209(VAR ServiceShipmentHeader@1000 : Record 5990;OrderNo@1001 : Code[20]);
    BEGIN
      ServiceShipmentHeader.SETRANGE("Order No.",OrderNo);
      ServiceShipmentHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindServiceShipmentLine@182(VAR ServiceShipmentLine@1000 : Record 5991;ServiceLine@1001 : Record 5902);
    BEGIN
      ServiceShipmentLine.SETRANGE("Order No.",ServiceLine."Document No.");
      ServiceShipmentLine.SETRANGE("Order Line No.",ServiceLine."Line No.");
      ServiceShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindServiceItemLine@62(VAR ServiceItemLine@1001 : Record 5901;ServiceLine@1000 : Record 5902);
    BEGIN
      ServiceItemLine.SETRANGE("Document Type",ServiceLine."Document Type");
      ServiceItemLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceItemLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindServiceLine@171(VAR ServiceLine@1000 : Record 5902);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLine.FINDSET;
    END;

    LOCAL PROCEDURE FindValueEntryDimSetID@180(ServiceShipmentLine@1001 : Record 5991) : Integer;
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      ValueEntry.SETRANGE("Document Type",ValueEntry."Document Type"::"Service Shipment");
      ValueEntry.SETRANGE("Document No.",ServiceShipmentLine."Document No.");
      ValueEntry.SETRANGE("Document Line No.",ServiceShipmentLine."Line No.");
      ValueEntry.FINDFIRST;
      EXIT(ValueEntry."Dimension Set ID");
    END;

    LOCAL PROCEDURE ModifyDefaultDimension@122(VAR DefaultDimension@1000 : Record 352;ValuePosting@1001 : Option);
    BEGIN
      // Remove dimension value if value posting is No Code
      IF ValuePosting = DefaultDimension."Value Posting"::"No Code" THEN
        DefaultDimension.VALIDATE("Dimension Value Code",'');

      DefaultDimension.VALIDATE("Value Posting",ValuePosting);
      DefaultDimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyDimension@104(VAR Dimension@1000 : Record 348;Blocked@1001 : Boolean);
    BEGIN
      Dimension.VALIDATE(Blocked,Blocked);
      Dimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetDifferentDefaultDimForItemAndWorkCenter@189(ItemNo@1001 : Code[20];WorkCenterNo@1002 : Code[20];VAR ItemDimValueCode@1004 : Code[20];VAR WorkCenterDimValueCode@1003 : Code[20]);
    VAR
      Dimension@1000 : Record 348;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      ItemDimValueCode := CreateDefDimWithNewDimValue(Dimension.Code,DATABASE::Item,ItemNo);
      WorkCenterDimValueCode := CreateDefDimWithNewDimValue(Dimension.Code,DATABASE::"Work Center",WorkCenterNo);
    END;

    LOCAL PROCEDURE SetPairedDefaultDimPriorities@176(HighPriorityTableID@1000 : Integer;LowPriorityTableID@1001 : Integer);
    VAR
      SourceCodeSetup@1002 : Record 242;
    BEGIN
      SourceCodeSetup.GET;
      SetPairedDefaultDimPrioritiesForSourceCode(HighPriorityTableID,LowPriorityTableID,SourceCodeSetup."Service Management");
    END;

    LOCAL PROCEDURE SetPairedDefaultDimPrioritiesForSourceCode@222(HighPriorityTableID@1000 : Integer;LowPriorityTableID@1001 : Integer;SourceCode@1003 : Code[10]);
    VAR
      DefaultDimensionPriority@1002 : Record 354;
    BEGIN
      DefaultDimensionPriority.SETRANGE("Source Code",SourceCode);
      DefaultDimensionPriority.DELETEALL(TRUE);

      LibraryDimension.CreateDefaultDimensionPriority(DefaultDimensionPriority,SourceCode,HighPriorityTableID);
      UpdatePriority(DefaultDimensionPriority,1);
      LibraryDimension.CreateDefaultDimensionPriority(DefaultDimensionPriority,SourceCode,LowPriorityTableID);
      UpdatePriority(DefaultDimensionPriority,2);
    END;

    LOCAL PROCEDURE RollbackValuePosting@35(OrderNo@1000 : Code[20]);
    VAR
      ServiceShipmentHeader@1003 : Record 5990;
      ServiceShipmentLine@1002 : Record 5991;
      DefaultDimension@1001 : Record 352;
    BEGIN
      FindServiceShipmentHeader(ServiceShipmentHeader,OrderNo);
      ServiceShipmentLine.SETRANGE("Document No.",ServiceShipmentHeader."No.");
      ServiceShipmentLine.FINDSET;
      REPEAT
        FilterDefaultDimension(DefaultDimension,ServiceShipmentLine.Type,ServiceShipmentLine."No.");
        ModifyDefaultDimension(DefaultDimension,DefaultDimension."Value Posting"::" ");
      UNTIL ServiceShipmentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateServiceContract@21(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader.CALCFIELDS("Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Annual Amount",ServiceContractHeader."Calcd. Annual Amount");
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateServiceContractLineDate@2(VAR ServiceContractLine@1002 : Record 5964;ServiceContractHeader@1001 : Record 5965);
    BEGIN
      ServiceContractLine.VALIDATE("Next Planned Service Date",ServiceContractHeader."Starting Date");
      ServiceContractLine.VALIDATE("Starting Date",ServiceContractHeader."Starting Date");
      ServiceContractLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateServiceHeader@98(VAR ServiceHeader@1000 : Record 5900;SalespersonCode@1001 : Code[10];ResponsibilityCenterCode@1002 : Code[10];ContractNo@1003 : Code[20];ServiceOrderType@1004 : Code[10]);
    BEGIN
      ServiceHeader.VALIDATE("Contract No.",ContractNo);
      ServiceHeader.VALIDATE("Responsibility Center",ResponsibilityCenterCode);
      ServiceHeader.VALIDATE("Service Order Type",ServiceOrderType);
      ServiceHeader.VALIDATE("Salesperson Code",SalespersonCode);
      ServiceHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDimSetIdOnHeader@166(VAR ServiceHeader@1000 : Record 5900;DimensionSetID@1002 : Integer);
    BEGIN
      ServiceHeader.VALIDATE("Dimension Set ID",DimensionSetID);
      ServiceHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDimSetIdOnItemLine@24(VAR ServiceItemLine@1000 : Record 5901;DimensionCode@1002 : Code[20];DimensionValueCode@1003 : Code[20]);
    VAR
      DimensionSetID@1001 : Integer;
    BEGIN
      DimensionSetID := LibraryDimension.EditDimSet(ServiceItemLine."Dimension Set ID",DimensionCode,DimensionValueCode);
      ServiceItemLine.UpdateAllLineDim(DimensionSetID,ServiceItemLine."Dimension Set ID");
      ServiceItemLine.VALIDATE("Dimension Set ID",DimensionSetID);
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDimSetIdOnLine@169(VAR ServiceLine@1000 : Record 5902;DimensionSetID@1002 : Integer);
    BEGIN
      ServiceLine.VALIDATE("Dimension Set ID",DimensionSetID);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDefaultDimForItem@52(ItemNo@1000 : Code[20]);
    VAR
      DefaultDimension@1001 : Record 352;
    BEGIN
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Item,ItemNo);
      DefaultDimension.VALIDATE(
        "Dimension Value Code",FindDifferentDimensionValue(DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code"));
      DefaultDimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDefaultDimForGLAccount@93(GLAccountNo@1000 : Code[20]);
    VAR
      DefaultDimension@1001 : Record 352;
    BEGIN
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::"G/L Account",GLAccountNo);
      DefaultDimension.VALIDATE(
        "Dimension Value Code",FindDifferentDimensionValue(DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code"));
      DefaultDimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDefaultDimForResource@79(ResourceNo@1000 : Code[20]);
    VAR
      DefaultDimension@1001 : Record 352;
    BEGIN
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Resource,ResourceNo);
      DefaultDimension.VALIDATE(
        "Dimension Value Code",FindDifferentDimensionValue(DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code"));
      DefaultDimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePartialQtyToConsume@133(ServiceLine@1000 : Record 5902);
    BEGIN
      FindServiceLine(ServiceLine);
      REPEAT
        ServiceLine.VALIDATE("Qty. to Consume",ServiceLine.Quantity * LibraryUtility.GenerateRandomFraction);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdatePartialQtyToShip@134(ServiceLine@1000 : Record 5902);
    BEGIN
      FindServiceLine(ServiceLine);
      REPEAT
        ServiceLine.VALIDATE("Qty. to Ship",ServiceLine.Quantity * LibraryUtility.GenerateRandomFraction);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdatePartialQtyToInvoice@140(ServiceLine@1000 : Record 5902);
    BEGIN
      FindServiceLine(ServiceLine);
      REPEAT
        ServiceLine.VALIDATE("Qty. to Invoice",ServiceLine."Quantity Shipped" * LibraryUtility.GenerateRandomFraction);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdatePriority@160(VAR DefaultDimensionPriority@1000 : Record 354;Priority@1001 : Integer);
    BEGIN
      DefaultDimensionPriority.VALIDATE(Priority,Priority);
      DefaultDimensionPriority.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateStandardServiceLineDim@192(VAR StandardServiceLine@1000 : Record 5997;DimensionSetID@1001 : Integer);
    BEGIN
      StandardServiceLine.VALIDATE("Dimension Set ID",DimensionSetID);
      StandardServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeDimensionValueInDimensionSetID@186(DimensionSetID@1000 : Integer;DimensionCode@1001 : Code[20]) : Integer;
    VAR
      DimValue@1004 : Record 349;
      TempDimSetEntry@1003 : TEMPORARY Record 480;
      DimMgt@1002 : Codeunit 408;
    BEGIN
      DimMgt.GetDimensionSet(TempDimSetEntry,DimensionSetID);
      TempDimSetEntry.SETRANGE("Dimension Code",DimensionCode);
      TempDimSetEntry.FINDFIRST;
      LibraryDimension.CreateDimensionValue(DimValue,DimensionCode);
      TempDimSetEntry.VALIDATE("Dimension Value Code",DimValue.Code);
      TempDimSetEntry.MODIFY(TRUE);
      EXIT(DimMgt.GetDimensionSetID(TempDimSetEntry));
    END;

    LOCAL PROCEDURE CreateDimensionAndDimensionValue@7(VAR Dimension@1002 : Record 348;VAR DimensionValue@1000 : Record 349);
    BEGIN
      // creates a new Dimension and a related new DimensionValue where Dimension.Code=DimensionValue."Dimension Code"
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
    END;

    LOCAL PROCEDURE CombineDimensions@170(VAR ServItemLine@1001 : Record 5901;StdServLine@1002 : Record 5997);
    VAR
      DimensionManagement@1000 : Codeunit 408;
      DimensionSetIDArr@1005 : ARRAY [10] OF Integer;
    BEGIN
      DimensionSetIDArr[1] := ServItemLine."Dimension Set ID";
      DimensionSetIDArr[2] := StdServLine."Dimension Set ID";

      ServItemLine."Dimension Set ID" :=
        DimensionManagement.GetCombinedDimensionSetID(
          DimensionSetIDArr,ServItemLine."Shortcut Dimension 1 Code",ServItemLine."Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE VerifyBlockDimOnServiceHeader@23(ServiceHeader@1000 : Record 5900;DimensionCode@1001 : Code[20]);
    BEGIN
      Assert.AreEqual(
        STRSUBSTNO(
          BlockDimensionOnServiceHeader,ServiceHeader."Document Type",ServiceHeader."No.",DimensionCode),
        GETLASTERRORTEXT,UnknownError);
    END;

    LOCAL PROCEDURE VerifyBlockDimOnItemLine@50(ServiceItemLine@1000 : Record 5901;DimensionCode@1001 : Code[20]);
    BEGIN
      Assert.AreEqual(
        STRSUBSTNO(
          BlockDimensionOnItemLine,ServiceItemLine."Document Type",ServiceItemLine."Document No.",ServiceItemLine."Line No.",
          DimensionCode),
        GETLASTERRORTEXT,
        UnknownError);
    END;

    LOCAL PROCEDURE VerifyBlockDimOnLine@1(ServiceLine@1000 : Record 5902;DimensionCode@1001 : Code[20]);
    BEGIN
      Assert.AreEqual(
        STRSUBSTNO(
          BlockDimensionOnItemLine,ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.",
          DimensionCode),
        GETLASTERRORTEXT,
        UnknownError);
    END;

    LOCAL PROCEDURE VerifyLimitedDimCombination@87(ServiceHeader@1000 : Record 5900;DimensionValueCombination@1001 : Record 351);
    BEGIN
      Assert.AreEqual(
        STRSUBSTNO(
          LimitedDimensionCombination,ServiceHeader."Document Type",ServiceHeader."No.",DimensionValueCombination."Dimension 1 Code",
          DimensionValueCombination."Dimension 1 Value Code",DimensionValueCombination."Dimension 2 Code",
          DimensionValueCombination."Dimension 2 Value Code"),
        GETLASTERRORTEXT,
        UnknownError);
    END;

    LOCAL PROCEDURE VerifyLimitedDimItemLine@110(ServiceItemLine@1000 : Record 5901;DimensionValueCombination@1001 : Record 351);
    BEGIN
      Assert.AreEqual(
        STRSUBSTNO(
          LimitedDimensionItemLine,ServiceItemLine."Document Type",ServiceItemLine."Document No.",ServiceItemLine."Line No.",
          DimensionValueCombination."Dimension 1 Code",DimensionValueCombination."Dimension 1 Value Code",
          DimensionValueCombination."Dimension 2 Code",DimensionValueCombination."Dimension 2 Value Code"),
        GETLASTERRORTEXT,
        UnknownError);
    END;

    LOCAL PROCEDURE VerifyLimitedDimLine@117(ServiceLine@1000 : Record 5902;DimensionValueCombination@1001 : Record 351);
    BEGIN
      Assert.AreEqual(
        STRSUBSTNO(
          LimitedDimensionItemLine,ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.",
          DimensionValueCombination."Dimension 1 Code",DimensionValueCombination."Dimension 1 Value Code",
          DimensionValueCombination."Dimension 2 Code",DimensionValueCombination."Dimension 2 Value Code"),
        GETLASTERRORTEXT,
        UnknownError);
    END;

    LOCAL PROCEDURE VerifyDimForCost@152(ServiceLine@1000 : Record 5902);
    VAR
      DefaultDimension@1001 : Record 352;
    BEGIN
      ServiceLine.SETRANGE(Type,ServiceLine.Type::Cost);
      FindServiceLine(ServiceLine);

      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::"Responsibility Center",ServiceLine."Responsibility Center");
      VerifyDimSetEntry(ServiceLine."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDimForCustomer@4(ServiceHeader@1001 : Record 5900;CustomerNo@1002 : Code[20]);
    VAR
      DefaultDimension@1003 : Record 352;
    BEGIN
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Customer,CustomerNo);
      VerifyDimSetEntry(ServiceHeader."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDimForCustomerLederEntry@136(OrderNo@1000 : Code[20]);
    VAR
      DefaultDimension@1001 : Record 352;
      ServiceInvoiceHeader@1005 : Record 5992;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",OrderNo);
      ServiceInvoiceHeader.FINDFIRST;
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Customer,ServiceInvoiceHeader."Customer No.");
      VerifyDimSetEntry(
        FindCustLedgerEntryDimSetID(ServiceInvoiceHeader."No."),DefaultDimension."Dimension Code",
        DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDimForGLEntry@135(ServiceHeader@1000 : Record 5900);
    VAR
      DefaultDimension@1001 : Record 352;
      ServiceInvoiceHeader@1005 : Record 5992;
      ServiceLine@1007 : Record 5902;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceInvoiceHeader.FINDFIRST;
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.SETRANGE(Type,ServiceLine.Type::"G/L Account");
      ServiceLine.FINDFIRST;

      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Customer,ServiceInvoiceHeader."Customer No.");
      VerifyDimSetEntry(
        FindGLEntryDimSetID(ServiceLine."No.",ServiceInvoiceHeader."No."),DefaultDimension."Dimension Code",
        DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDimForInvoiceHeader@139(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceInvoiceHeader@1000 : Record 5992;
      DefaultDimension@1003 : Record 352;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceInvoiceHeader.FINDFIRST;
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Customer,ServiceHeader."Customer No.");
      VerifyDimSetEntry(
        ServiceInvoiceHeader."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDimForInvoiceLine@138(ServiceLine@1000 : Record 5902);
    VAR
      DefaultDimension@1001 : Record 352;
      ServiceInvoiceHeader@1004 : Record 5992;
      ServiceInvoiceLine@1002 : Record 5993;
    BEGIN
      ServiceLine.SETFILTER(Type,'<>%1',ServiceLine.Type::Cost);
      FindServiceLine(ServiceLine);
      ServiceInvoiceHeader.SETRANGE("Order No.",ServiceLine."Document No.");
      ServiceInvoiceHeader.FINDFIRST;
      ServiceInvoiceLine.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      REPEAT
        ServiceInvoiceLine.SETRANGE("Line No.",ServiceLine."Line No.");
        ServiceInvoiceLine.FINDFIRST;
        FilterDefaultDimension(DefaultDimension,ServiceLine.Type,ServiceLine."No.");
        VerifyDimSetEntry(
          ServiceInvoiceLine."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDimForItemLedgerEntry@143(ServiceLine@1000 : Record 5902);
    VAR
      DefaultDimension@1001 : Record 352;
      ServiceShipmentLine@1002 : Record 5991;
      DimensionSetID@1003 : Integer;
    BEGIN
      ServiceLine.SETRANGE(Type,ServiceShipmentLine.Type::Item);
      FindServiceLine(ServiceLine);
      FindServiceShipmentLine(ServiceShipmentLine,ServiceLine);
      DimensionSetID := FindItemLedgerEntryDimSetID(ServiceShipmentLine);

      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Item,ServiceShipmentLine."No.");
      VerifyDimSetEntry(DimensionSetID,DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");

      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Customer,ServiceShipmentLine."Customer No.");
      VerifyDimSetEntry(DimensionSetID,DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDimForResponsibility@3(ServiceHeader@1001 : Record 5900;ResponsibilityCenterCode@1004 : Code[10]);
    VAR
      DefaultDimension@1003 : Record 352;
    BEGIN
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::"Responsibility Center",ResponsibilityCenterCode);
      VerifyDimSetEntry(ServiceHeader."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDimForResourceLederEntry@131(ServiceLine@1000 : Record 5902);
    VAR
      DefaultDimension@1001 : Record 352;
      ServiceInvoiceHeader@1005 : Record 5992;
      DimensionSetID@1002 : Integer;
    BEGIN
      ServiceLine.SETRANGE(Type,ServiceLine.Type::Resource);
      FindServiceLine(ServiceLine);
      ServiceInvoiceHeader.SETRANGE("Order No.",ServiceLine."Document No.");
      ServiceInvoiceHeader.FINDFIRST;
      DimensionSetID := FindResLedgerEntryDimSetID(ServiceLine."No.",ServiceInvoiceHeader."No.");

      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Customer,ServiceInvoiceHeader."Customer No.");
      VerifyDimSetEntry(DimensionSetID,DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");

      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Resource,ServiceLine."No.");
      VerifyDimSetEntry(DimensionSetID,DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDimForSalesperson@14(ServiceHeader@1001 : Record 5900;SalespersonCode@1002 : Code[10]);
    VAR
      DefaultDimension@1003 : Record 352;
    BEGIN
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::"Salesperson/Purchaser",SalespersonCode);
      VerifyDimSetEntry(ServiceHeader."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDimForServiceLederEntry@130(ServiceLine@1000 : Record 5902);
    VAR
      DefaultDimension@1001 : Record 352;
      ServiceLedgerEntry@1007 : Record 5907;
    BEGIN
      FindServiceLine(ServiceLine);
      ServiceLedgerEntry.SETRANGE("Service Order No.",ServiceLine."Document No.");
      REPEAT
        FilterDefaultDimension(DefaultDimension,ServiceLine.Type,ServiceLine."No.");
        ServiceLedgerEntry.SETRANGE("Document Line No.",ServiceLine."Line No.");
        ServiceLedgerEntry.FINDSET;
        REPEAT
          VerifyDimSetEntry(
            ServiceLedgerEntry."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
        UNTIL ServiceLedgerEntry.NEXT = 0;
      UNTIL ServiceLine.NEXT = 0;

      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Customer,ServiceLine."Customer No.");
      VerifyDimSetEntry(
        ServiceLedgerEntry."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDimForShipmentHeader@151(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceShipmentHeader@1000 : Record 5990;
      DefaultDimension@1003 : Record 352;
    BEGIN
      FindServiceShipmentHeader(ServiceShipmentHeader,ServiceHeader."No.");
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Customer,ServiceHeader."Customer No.");
      VerifyDimSetEntry(
        ServiceShipmentHeader."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDimForShipmentItemLine@150(ServiceHeader@1005 : Record 5900);
    VAR
      ServiceShipmentHeader@1004 : Record 5990;
      ServiceShipmentItemLine@1000 : Record 5989;
      DefaultDimension@1003 : Record 352;
    BEGIN
      FindServiceShipmentHeader(ServiceShipmentHeader,ServiceHeader."No.");
      ServiceShipmentItemLine.SETRANGE("No.",ServiceShipmentHeader."No.");
      ServiceShipmentItemLine.FINDFIRST;

      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Customer,ServiceHeader."Customer No.");
      VerifyDimSetEntry(
        ServiceShipmentItemLine."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");

      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::"Service Item",ServiceShipmentItemLine."Service Item No.");
      VerifyDimSetEntry(
        ServiceShipmentItemLine."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDimForShipmentLine@148(ServiceLine@1000 : Record 5902);
    VAR
      DefaultDimension@1001 : Record 352;
      ServiceShipmentLine@1002 : Record 5991;
    BEGIN
      ServiceLine.SETFILTER(Type,'<>%1',ServiceLine.Type::Cost);
      FindServiceLine(ServiceLine);
      ServiceShipmentLine.SETRANGE("Order No.",ServiceLine."Document No.");
      REPEAT
        ServiceShipmentLine.SETRANGE("Order Line No.",ServiceLine."Line No.");
        ServiceShipmentLine.FINDFIRST;
        FilterDefaultDimension(DefaultDimension,ServiceShipmentLine.Type,ServiceShipmentLine."No.");
        VerifyDimSetEntry(
          ServiceShipmentLine."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDimFromStandardCode@155(StandardServiceCode@1000 : Code[10];OrderNo@1005 : Code[20]);
    VAR
      StandardServiceLine@1002 : Record 5997;
      ServiceLine@1001 : Record 5902;
    BEGIN
      StandardServiceLine.SETRANGE("Standard Service Code",StandardServiceCode);
      StandardServiceLine.FINDSET;
      ServiceLine.SETRANGE("Document No.",OrderNo);
      REPEAT
        ServiceLine.SETRANGE("Line No.",StandardServiceLine."Line No.");
        ServiceLine.FINDFIRST;
        ServiceLine.TESTFIELD("Dimension Set ID",StandardServiceLine."Dimension Set ID");
      UNTIL StandardServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDimShipmentLineCustomer@147(ServiceLine@1000 : Record 5902);
    VAR
      DefaultDimension@1001 : Record 352;
      ServiceShipmentLine@1002 : Record 5991;
    BEGIN
      FindServiceLine(ServiceLine);
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Customer,ServiceLine."Customer No.");
      ServiceShipmentLine.SETRANGE("Order No.",ServiceLine."Document No.");
      REPEAT
        ServiceShipmentLine.SETRANGE("Order Line No.",ServiceLine."Line No.");
        ServiceShipmentLine.FINDFIRST;
        VerifyDimSetEntry(
          ServiceShipmentLine."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDimForOrderType@18(ServiceHeader@1001 : Record 5900;ServiceOrderType@1004 : Code[10]);
    VAR
      DefaultDimension@1003 : Record 352;
    BEGIN
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::"Service Order Type",ServiceOrderType);
      VerifyDimSetEntry(ServiceHeader."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDimForContract@8(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceContractHeader@1000 : Record 5965;
      DimensionSetEntry2@1002 : Record 480;
      DimensionSetEntry@1004 : Record 480;
    BEGIN
      ServiceContractHeader.SETRANGE("Contract No.",ServiceHeader."Contract No.");
      ServiceContractHeader.FINDFIRST;
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,ServiceContractHeader."Dimension Set ID");

      DimensionSetEntry2.SETRANGE("Dimension Code",DimensionSetEntry."Dimension Code");
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry2,ServiceHeader."Dimension Set ID");
      DimensionSetEntry2.TESTFIELD("Dimension Value Code",DimensionSetEntry."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDimForServiceItem@51(ServiceItemLine@1001 : Record 5901;ServiceItemNo@1002 : Code[20]);
    VAR
      DefaultDimension@1003 : Record 352;
    BEGIN
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::"Service Item",ServiceItemNo);
      VerifyDimSetEntry(ServiceItemLine."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDimForServiceItemGrp@66(ServiceItemLine@1001 : Record 5901;ServiceItemGroupCode@1002 : Code[10]);
    VAR
      DefaultDimension@1003 : Record 352;
    BEGIN
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::"Service Item Group",ServiceItemGroupCode);
      VerifyDimSetEntry(ServiceItemLine."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDimForValueEntry@141(ServiceLine@1000 : Record 5902);
    VAR
      DefaultDimension@1001 : Record 352;
      ServiceShipmentLine@1002 : Record 5991;
      DimensionSetID@1003 : Integer;
    BEGIN
      FindServiceLine(ServiceLine);
      FindServiceShipmentLine(ServiceShipmentLine,ServiceLine);
      DimensionSetID := FindValueEntryDimSetID(ServiceShipmentLine);

      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Item,ServiceShipmentLine."No.");
      VerifyDimSetEntry(DimensionSetID,DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");

      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Customer,ServiceShipmentLine."Customer No.");
      VerifyDimSetEntry(DimensionSetID,DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDimOnServiceLine@11(ServiceLine@1000 : Record 5902);
    VAR
      DefaultDimension@1001 : Record 352;
    BEGIN
      ServiceLine.SETFILTER(Type,'<>%1',ServiceLine.Type::Cost);
      FindServiceLine(ServiceLine);
      REPEAT
        FilterDefaultDimension(DefaultDimension,ServiceLine.Type,ServiceLine."No.");
        VerifyDimSetEntry(ServiceLine."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDimInvoiceLineCustomer@137(ServiceLine@1000 : Record 5902);
    VAR
      DefaultDimension@1001 : Record 352;
      ServiceInvoiceHeader@1004 : Record 5992;
      ServiceInvoiceLine@1002 : Record 5993;
    BEGIN
      ServiceLine.SETFILTER(Type,'<>%1',ServiceLine.Type::Cost);
      FindServiceLine(ServiceLine);
      ServiceInvoiceHeader.SETRANGE("Order No.",ServiceLine."Document No.");
      ServiceInvoiceHeader.FINDFIRST;
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Customer,ServiceInvoiceHeader."Customer No.");
      ServiceInvoiceLine.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      REPEAT
        ServiceInvoiceLine.SETRANGE("Line No.",ServiceLine."Line No.");
        ServiceInvoiceLine.FINDFIRST;
        VerifyDimSetEntry(
          ServiceInvoiceLine."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDimOnServiceLineCost@33(ServiceLine@1000 : Record 5902);
    BEGIN
      FindServiceLine(ServiceLine);
      REPEAT
        ServiceLine.TESTFIELD("Dimension Set ID",0);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDimSetEntry@204(DimensionSetID@1000 : Integer;DimensionCode@1001 : Code[20];DimensionValueCode@1002 : Code[20]);
    VAR
      DimensionSetEntry@1003 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Code",DimensionCode);
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,DimensionSetID);
      DimensionSetEntry.TESTFIELD("Dimension Value Code",DimensionValueCode);
    END;

    LOCAL PROCEDURE VerifyPriorityDimOnServiceLine@83(ServiceLine@1000 : Record 5902);
    VAR
      DefaultDimension@1001 : Record 352;
    BEGIN
      FindServiceLine(ServiceLine);
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Customer,ServiceLine."Customer No.");
      REPEAT
        VerifyDimSetEntry(ServiceLine."Dimension Set ID",DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceShipmentHeader@232(ServiceHeader@1000 : Record 5900);
    VAR
      ServiceShipmentHeader@1001 : Record 5990;
    BEGIN
      FindServiceShipmentHeader(ServiceShipmentHeader,ServiceHeader."No.");
      ServiceShipmentHeader.TESTFIELD("Customer No.",ServiceHeader."Customer No.");
    END;

    LOCAL PROCEDURE VerifyServiceLedgerEntryDimSetID@27(ServiceOrderNo@1003 : Code[20];DimSetID@1000 : Integer);
    VAR
      ServiceLedgerEntry@1001 : Record 5907;
    BEGIN
      WITH ServiceLedgerEntry DO BEGIN
        SETRANGE("Document Type","Document Type"::Shipment);
        SETRANGE("Service Order No.",ServiceOrderNo);
        FINDSET;
        Assert.AreEqual(DimSetID,"Dimension Set ID",DimensionSetIDErr);
        NEXT;
        Assert.AreEqual(DimSetID,"Dimension Set ID",DimensionSetIDErr);
      END;
    END;

    LOCAL PROCEDURE VerifyGLEntryDimensionSetID@245(ServiceOrderNo@1000 : Code[20];GLAccNo@1001 : Code[20];ExpectedDimSetID@1002 : Integer);
    VAR
      ServiceInvHeader@1004 : Record 5992;
      GLEntry@1003 : Record 17;
    BEGIN
      ServiceInvHeader.SETRANGE("Order No.",ServiceOrderNo);
      ServiceInvHeader.FINDFIRST;
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETRANGE("Document No.",ServiceInvHeader."No.");
      GLEntry.SETRANGE("G/L Account No.",GLAccNo);
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD("Dimension Set ID",ExpectedDimSetID);
    END;

    LOCAL PROCEDURE CreateDimSetEntry@1500002(DimCode@1500000 : Code[20];DimValue@1500001 : Code[20]);
    VAR
      DimSetEntry@1500002 : Record 480;
    BEGIN
      DimSetEntry.INIT;
      DimSetEntry.VALIDATE("Dimension Set ID",0);
      DimSetEntry.VALIDATE("Dimension Code",DimCode);
      DimSetEntry.VALIDATE("Dimension Value Code",DimValue);
      DimSetEntry.INSERT(TRUE);
    END;

    LOCAL PROCEDURE DeleteZeroDimEntry@1500009();
    VAR
      DimSetEntry@1500000 : Record 480;
    BEGIN
      DimSetEntry.SETRANGE("Dimension Set ID",0);
      DimSetEntry.DELETEALL;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmMessageHandler@75(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := NOT (Question = ServiceContractConfirmation);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmMessageHandlerForFalse@121(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@5(Question@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE ModalFormHander@156(VAR StandardServItemGrCodes@1003 : Page 5959;VAR Response@1000 : Action);
    VAR
      StandardServiceItemGrCode@1002 : Record 5998;
    BEGIN
      LibraryService.CreateStandardServiceItemGr(
        StandardServiceItemGrCode,
        COPYSTR(LibraryVariableStorage.DequeueText,1,10),
        COPYSTR(LibraryVariableStorage.DequeueText,1,10));
      StandardServItemGrCodes.SETRECORD(StandardServiceItemGrCode);
      StandardServItemGrCodes.SETTABLEVIEW(StandardServiceItemGrCode);
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE ModalPageHandlerForDim@194(VAR ProductionJournal@1001 : Page 5510;VAR Response@1000 : Action);
    VAR
      DimensionSetEntry@1003 : Record 480;
      ItemJournalLine@1002 : Record 83;
    BEGIN
      ItemJournalLine.SETRANGE("Item No.",LibraryVariableStorage.DequeueText);
      ItemJournalLine.FINDFIRST;
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,ItemJournalLine."Dimension Set ID");
      DimensionSetEntry.TESTFIELD("Dimension Value Code",LibraryVariableStorage.DequeueText);
    END;

    [ModalPageHandler]
    PROCEDURE ServiceOrderStatisticsMPH@205(VAR ServiceOrderStatistics@1000 : TestPage 5914);
    BEGIN
      ServiceOrderStatistics.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Dimension] [Service]

      Unsupported version tags:
      NA: Unable to Compile
      ES: Unable to Execute

      Test for Service Posting - Dimensions:
        1. Test Copying the Default Dimensions Sets from the Tables (Accounts) to Service Order.
           a. TC-PP-DO-1 - Test Copy Default Dimensions to the Service Order Header.
           b. TC-PP-DO-2 - Test Copy Default Dimensions to the Service Item Line.
           c. TC-PP-DO-3 - Test Copy Default Dimensions to the Service Line. Dimensions Assigned to the Service Lines Are Not Assigned
                           to the Item Line(s) or/and to the Order Header.
        2. Test Account Type Default Dimensions and Dimensions-Single (Dimensions-Multiple) Default Dimensions Prioritization. Dimensions
           Inheritance on the Item Line(s) and on the Service Line(s).
           a. TC-PP-DO-4 - Test Dimensions-Single (Dimensions-Multiple) Default Dimensions Have a Higher Priority than the Account Type
                           Default Dimensions. Default Dimensions on the Item Line(s) and on the Service Line(s) are Inherited Correctly.
        3. Test Posting a Service Order With Blocked Dimensions and/or a Blocked Dimensions Combination Assigned Impossible.
           a. TC-PP-DO-5 - Test Post the Order When Its Header Has Blocked Dimensions and/or a Blocked Dimensions Combination Assigned.
           b. TC-PP-DO-6 - Test Post the Order When Its Item Line Has a Blocked Dimension and a Blocked Dimensions Combination Assigned.
           c. TC-PP-DO-7 - Test Post the Order When Its Service Line Has a Blocked Dimension and/or a Blocked Dimensions Combination
                           Assigned.
        4. Test posting a Service Order With a Limited Dimensions Combination Assigned is Impossible.
           a. TC-PP-DO-8  - Test Post an Order With a Limited Dimensions Combination Assigned to Its Header. Negative Test.
           b. TC-PP-DO-9  - Test Post the Order with a Limited Dimensions Combination Assigned to Its Item Line. Negative Test.
           c. TC-PP-DO-10 - Test Post the Order with a Limited Dimensions Combination Assigned to Its Service Line. Negative Test.
        5. Test Posting a Service Order When There Are Dimensions Assigned to the Document and There Are No Restrictions for the
           Dimensions. Transferring Dimensions from the Service Order to the Posted Documents and Ledger Entries.
           a. TC-PP-DO-11 - Test Post a Service Order When There Are Dimensions Assigned to the Document and No Restrictions as for the
                            Dimensions.
           b. TC-PP-DO-12 - Test All Dimensions Are Transferred from the Service Order to the Posted Documents and to the Ledger Entries
                            Correctly.
        6. Test Interpretation of the 'Code Mandatory' Value in the Value Posting Field for the Default Dimensions in the Posting Routine.
           a. TC-PP-DO-13 - Test Post the Service Order When Its Header Has No Assigned Dimension Marked as 'Code Mandatory'.
           b. TC-PP-DO-15 - Test Post Service Order When Its Service Line Has No Assigned Dimension Marked as 'Code Mandatory'.
        7. Test Interpretation of the 'Same Code' Value in the Value Posting Field for the Default Dimensions in the Posting Routine
           a. TC-PP-DO-16 - Test Post the Service Order When Its Header Has No Dimension Assigned with a Certain Value Marked as 'Same
                            Code'.
           b. TC-PP-DO-18 - Test Post the Service Order When the Service Line Has No Assigned Dimension with a Certain Value Marked as
                            'Same Code'.
        8. Test Interpretation of the 'No Code' Value in the Value Posting Field for the Default Dimensions in the Posting Routine.
           a. TC-PP-DO-19 - Test Post the Service Order When Its Header Has a Dimension Marked as 'No Code' Assigned. Negative Test.
           b. TC-PP-DO-21 - Test Post the Service Order When Its Service Line Has a Dimension Marked as 'No Code' Assigned. Negative Test.
        9. Test Document Dimension Sets Update According to the Changes Made by the User.
           a. TC-PP-DO-22 - Test Change the Document Dimensions on the Header.
           b. TC-PP-DO-23 - Test Change the Document Dimensions on the Item Lines and on the Service Lines.
       10. Test The Program's Interpretation of Default Dimensions Priorities.
           a. TC-PP-DO-24 - Test Document Dimensions Are Assigned Properly According to the Default Dimensions Priority Settings.
       11. Test Copying Dimension Sets Assigned to the Standard Service Codes to the Order Service Lines.
           a. TC-PP-DO-25 - Test Run the Get Std. Service Codes Function.
       12. Test to verify it should be able to undo a posted Service Shipment where Resource with "Same Code" Dimension defined.

      TFS_TS_ID = 20918
      Covered Test cases:
      ----------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                     TFS ID
      ----------------------------------------------------------------------------------------------------------------------------------
      DimOnServiceHeader, DimOnServiceItemLine, DimOnServiceLine, DimOnServiceLineCost                                      31902, 12110
      DimPriorityOnServiceLine                                                                                              31903, 12111
      BlockDimOnHeader, ShipBlockDimOnHeader, InvBlockDimOnHeader, ShipInvBlockDimOnHeader,ShipConsumeBlockDimOnHeader      31969, 12177
      ShipBlockDimOnItemLine, InvBlockDimOnItemLine, ShipInvBlockDimOnItemLine, ShipConsumeBlockDimOnItemLine               31969, 12177
      ShipDimBlockItem, InvDimBlockItem, ShipInvDimBlockItem, ConsumeDimBlockItem, ShipDimBlockResource                     31969, 12177
      InvDimBlockResource, ShipInvDimBlockResource, ConsumeDimBlockResource, ShipDimBlockCost, InvDimBlockCost              31969, 12177
      ShipInvDimBlockCost, ShipDimBlockGLAccount, InvDimBlockGLAccount, ShipInvDimBlockGLAccount                            31969, 12177
      ShipLimitedDimHeader, InvLimitedDimHeader, ShipInvLimitedDimHeader, ShipConsumeLimitedDimHeader                       31970, 12178
      ShipLimitedDimItemLine, ShipLimitedDimItemLine, ShipInvLimitedDimItemLine, ConsumeLimitedDimItemLine                  31970, 12178
      ShipDimLimitedItem, InvDimLimitedItem, ShipInvDimLimitedItem, ConsumeDimLimitedItem, ShipDimLimitedResource           31970, 12178
      InvDimLimitedResource, ShipInvDimLimitedResource, ConsumeDimLimitedResource, ShipDimLimitedCost, InvDimLimitedCost    31970, 12178
      ShipInvDimLimitedCostShipDimLimitedGLAccount, InvDimLimitedGLAccount, ShipInvDimLimitedGLAccount                      31970, 12178
      ShipServiceOrderDim, InvServiceOrderDim, ShipInvServiceOrderDim, ShipConsumeServiceOrderDim                           31971, 12179
      NoDimCodeMandatoryHeader, DimCodeMandatoryHeader, NoDimCodeMandatoryGLAccount, NoDimCodeMandatoryItem                 31972, 12180
      NoDimCodeMandatoryResource, DimCodeMandatory                                                                          31972, 12180
      DimSameCodeHeader, NoDimSameCodeHeader, NoDimSameCodeItem, NoDimSameCodeResource, NoDimSameCodeGLAccount, DimSameCode 31973, 12181
      DimNoCodeHeader, NoDimNoCodeHeader, NoDimNoCodeGLAccount, NoDimNoCodeItem, NoDimNoCodeResource, DimNoCode             31974, 12182
      SameDimHeaderLine, DiffDimHeaderLine, SameDimItemLineLine                                                             31975, 12183
      DefaultDimPriorityOrder                                                                                               31976, 12184
      DimFromStandardServiceCode                                                                                            31977, 12185
      UpdateShortcutDimFromServiceItemLine                                                                                  118320

      Covered Test cases for W1 103374
      ----------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                     TFS ID
      ----------------------------------------------------------------------------------------------------------------------------------
      UndoServiceShipmentForResourceWithSameCodeDimension                                                                    103374
    }
    END.
  }
}

