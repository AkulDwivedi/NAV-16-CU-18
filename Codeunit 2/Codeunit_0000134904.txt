OBJECT Codeunit 134904 ERM Reminder For Additinal Fee
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibrarySales@1000 : Codeunit 130509;
      LibraryERM@1001 : Codeunit 131300;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryInventory@1008 : Codeunit 132201;
      LibraryRandom@1003 : Codeunit 130440;
      Assert@1004 : Codeunit 130000;
      AmountError@1005 : TextConst 'ENU=Additional Fee must be %1.';
      IsInitialized@1006 : Boolean;
      ErrMsg@1007 : TextConst 'ENU=Rounding in the end is not expected.';

    LOCAL PROCEDURE Initialize@7();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE ReminderWithAdditionalFee@8();
    VAR
      ReminderLevel@1001 : Record 293;
      SalesHeader@1000 : Record 36;
      CurrencyCode@1002 : Code[10];
      Amount@1003 : Decimal;
      ReminderNo@1004 : Code[20];
    BEGIN
      // Create Sales Invoice with Reminder and Check Additional Fee after Suggest Reminder Lines.

      // Setup: Create Reminder with Additional Fee and Sales Invoice and Post it.
      Initialize;
      CurrencyCode := CreateCurrency;
      CreateReminderTerms(ReminderLevel,CurrencyCode);
      CreateAndPostSalesInvoice(SalesHeader,ReminderLevel."Reminder Terms Code",CurrencyCode);
      Amount := LibraryERM.ConvertCurrency(ReminderLevel."Additional Fee (LCY)",'',CurrencyCode,WORKDATE);

      // Exercise: Create and Suggest Reminder Lines.
      ReminderNo :=
        CreateAndSuggestReminder(
          SalesHeader."Sell-to Customer No.",CALCDATE('<1D>',CALCDATE(ReminderLevel."Grace Period",SalesHeader."Due Date")));

      // Verify: Verify Reminder Lines after Suggesting.
      VerifyReminderLine(ReminderNo,Amount);
    END;

    [Test]
    PROCEDURE ReminderFromRefund@9();
    VAR
      ReminderLevel@1001 : Record 293;
      ReminderLine@1002 : Record 296;
      GenJournalLine@1000 : Record 81;
      ReminderNo@1003 : Code[20];
    BEGIN
      // Test Reminder Lines after Suggesting Lines for Reminder.

      // 1. Setup: Create Reminder Terms, Create Customer, Create and Post General Journal Line for Refund.
      Initialize;
      CreateReminderTerms(ReminderLevel,'');
      CreateAndPostGeneralJournal(GenJournalLine,CreateCustomer(ReminderLevel."Reminder Terms Code",''));

      // 2. Exercise: Create Reminder Header and Suggest Lines.
      ReminderNo :=
        CreateAndSuggestReminder(
          GenJournalLine."Account No.",
          CALCDATE('<' + FORMAT(LibraryRandom.RandInt(3)) + 'D>',CALCDATE(ReminderLevel."Grace Period",WORKDATE)));

      // 3. Verify: Verify Reminder Lines.
      VerifyReminderLine(ReminderNo,ReminderLevel."Additional Fee (LCY)");
      FindReminderLine(ReminderLine,ReminderNo,ReminderLine.Type::"Customer Ledger Entry");
      ReminderLine.TESTFIELD("Remaining Amount",GenJournalLine.Amount);
    END;

    [Test]
    PROCEDURE IssuedReminderFromRefund@11();
    VAR
      ReminderLevel@1001 : Record 293;
      IssuedReminderHeader@1006 : Record 297;
      IssuedReminderLine@1002 : Record 298;
      GenJournalLine@1000 : Record 81;
      ReminderNo@1003 : Code[20];
    BEGIN
      // Test Issued Reminder Lines after Issuing Reminder.

      // 1. Setup: Create Reminder Terms, Create Customer, Create and Post General Journal Line for Refund, Create Reminder Header
      // and Suggest Lines.
      Initialize;
      CreateReminderTerms(ReminderLevel,'');
      CreateAndPostGeneralJournal(GenJournalLine,CreateCustomer(ReminderLevel."Reminder Terms Code",''));
      ReminderNo :=
        CreateAndSuggestReminder(
          GenJournalLine."Account No.",
          CALCDATE('<' + FORMAT(LibraryRandom.RandInt(3)) + 'D>',CALCDATE(ReminderLevel."Grace Period",WORKDATE)));

      // 2. Exercise: Issue Reminder.
      IssueReminder(ReminderNo);

      // 3. Verify: Verify Issued Reminder Lines.
      IssuedReminderHeader.SETRANGE("Pre-Assigned No.",ReminderNo);
      IssuedReminderHeader.FINDFIRST;
      VerifyIssuedReminderLine(IssuedReminderHeader."No.",IssuedReminderLine.Type::"Customer Ledger Entry",GenJournalLine.Amount,0);
      VerifyIssuedReminderLine(
        IssuedReminderHeader."No.",IssuedReminderLine.Type::"G/L Account",0,ReminderLevel."Additional Fee (LCY)");
    END;

    [Test]
    PROCEDURE ReminderWithRounding@14();
    VAR
      SalesHeader@1000 : Record 36;
      ReminderLevel@1003 : Record 293;
      ReminderText@1001 : Record 294;
      ReminderNo@1004 : Code[20];
      ReminderTermsCode@1002 : Code[10];
    BEGIN
      // Setup: Set the Rounding Precision.
      Initialize;
      LibraryERM.SetInvRoundingPrecisionLCY(LibraryRandom.RandDec(1,2));
      ReminderTermsCode := CreateReminderTerms(ReminderLevel,'');
      LibraryERM.CreateReminderText(ReminderText,ReminderTermsCode,ReminderLevel."No.",
        ReminderText.Position::Ending,'Reminder Text');

      // Setup: Create and Post Sales Invoice.
      CreateAndPostSalesInvoice(SalesHeader,ReminderTermsCode,'');

      // Setup: Re-Set the Rounding Precision.
      LibraryERM.SetInvRoundingPrecisionLCY(LibraryRandom.RandDec(1,1));

      // Exercise: Create and Suggest Reminder Lines.
      ReminderNo :=
        CreateAndSuggestReminder(
          SalesHeader."Sell-to Customer No.",CALCDATE('<1D>',CALCDATE(ReminderLevel."Grace Period",SalesHeader."Due Date")));

      // Verify: Verify Reminder Lines after Suggesting.
      VerifyReminderRoundingLine(ReminderNo);
    END;

    LOCAL PROCEDURE CreateAndPostGeneralJournal@78(VAR GenJournalLine@1001 : Record 81;AccountNo@1003 : Code[20]);
    VAR
      GenJournalBatch@1000 : Record 232;
      GLAccount@1002 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      CreateGeneralJournalBatch(GenJournalBatch);

      // Use Random because value is not important.
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Refund,
        GenJournalLine."Account Type"::Customer,AccountNo,LibraryRandom.RandDec(1000,2));
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalLine.MODIFY(TRUE);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoice@10(VAR SalesHeader@1001 : Record 36;ReminderTermsCode@1004 : Code[10];CurrencyCode@1005 : Code[10]);
    VAR
      SalesLine@1003 : Record 37;
      Item@1002 : Record 27;
    BEGIN
      // Take Random Quantity for Sales Invoice.
      LibraryInventory.CreateItemWithUnitPriceAndUnitCost(
        Item,LibraryRandom.RandDec(1000,2),LibraryRandom.RandDec(1000,2));
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CreateCustomer(ReminderTermsCode,CurrencyCode));
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateCurrency@25() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCustomer@2(ReminderTermsCode@1004 : Code[10];CurrencyCode@1005 : Code[10]) : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",CurrencyCode);
      Customer.VALIDATE("Reminder Terms Code",ReminderTermsCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatch@94(VAR GenJournalBatch@1000 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Recurring,FALSE);
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::General);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      GenJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReminderTerms@3(VAR ReminderLevel@1002 : Record 293;CurrencyCode@1003 : Code[10]) : Code[10];
    VAR
      ReminderTerms@1000 : Record 292;
    BEGIN
      LibraryERM.CreateReminderTerms(ReminderTerms);
      CreateReminderLevel(ReminderLevel,ReminderTerms.Code);
      ModifyCurrencyOnReminderLevel(ReminderTerms.Code,ReminderLevel."Additional Fee (LCY)",CurrencyCode);
      EXIT(ReminderTerms.Code);
    END;

    LOCAL PROCEDURE CreateReminderLevel@4(VAR ReminderLevel@1001 : Record 293;ReminderTermsCode@1003 : Code[10]);
    BEGIN
      // Take Random Grace Period and Additional Fee.
      LibraryERM.CreateReminderLevel(ReminderLevel,ReminderTermsCode);
      EVALUATE(ReminderLevel."Grace Period",'<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>');
      ReminderLevel.VALIDATE("Additional Fee (LCY)",LibraryRandom.RandInt(10));
      ReminderLevel.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindReminderLine@20(VAR ReminderLine@1000 : Record 296;ReminderNo@1001 : Code[20];Type@1002 : Option);
    BEGIN
      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      ReminderLine.SETRANGE(Type,Type);
      ReminderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE IssueReminder@13(ReminderNo@1000 : Code[20]);
    VAR
      ReminderHeader@1002 : Record 295;
      ReminderIssue@1001 : Codeunit 393;
    BEGIN
      ReminderHeader.GET(ReminderNo);
      ReminderIssue.Set(ReminderHeader,FALSE,ReminderHeader."Document Date");
      ReminderIssue.RUN;
    END;

    LOCAL PROCEDURE ModifyCurrencyOnReminderLevel@5(ReminderTermsCode@1001 : Code[10];AdditionalFee@1002 : Decimal;CurrencyCode@1003 : Code[10]);
    VAR
      CurrencyForReminderLevel@1000 : Record 329;
    BEGIN
      LibraryERM.CreateCurrencyForReminderLevel(CurrencyForReminderLevel,ReminderTermsCode,CurrencyCode);
      CurrencyForReminderLevel.VALIDATE("Additional Fee",AdditionalFee);
      CurrencyForReminderLevel.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndSuggestReminder@1(CustomerNo@1001 : Code[20];DocumentDate@1002 : Date) : Code[20];
    VAR
      ReminderHeader@1000 : Record 295;
      CustLedgerEntry@1003 : Record 21;
      CustLedgEntryLineFeeOn@1005 : Record 21;
      ReminderMake@1004 : Codeunit 392;
    BEGIN
      LibraryERM.CreateReminderHeader(ReminderHeader);
      ReminderHeader.VALIDATE("Customer No.",CustomerNo);
      ReminderHeader.VALIDATE("Document Date",DocumentDate);
      ReminderHeader.MODIFY(TRUE);

      ReminderMake.SuggestLines(ReminderHeader,CustLedgerEntry,TRUE,FALSE,CustLedgEntryLineFeeOn);
      ReminderMake.Code;
      EXIT(ReminderHeader."No.");
    END;

    LOCAL PROCEDURE VerifyIssuedReminderLine@12(ReminderNo@1000 : Code[20];Type@1002 : Option;RemainingAmount@1003 : Decimal;Amount@1004 : Decimal);
    VAR
      IssuedReminderLine@1001 : Record 298;
    BEGIN
      IssuedReminderLine.SETRANGE("Reminder No.",ReminderNo);
      IssuedReminderLine.SETRANGE(Type,Type);
      IssuedReminderLine.FINDFIRST;
      IssuedReminderLine.TESTFIELD("Remaining Amount",RemainingAmount);
      IssuedReminderLine.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyReminderLine@6(ReminderNo@1001 : Code[20];Amount@1003 : Decimal);
    VAR
      ReminderLine@1000 : Record 296;
      GeneralLedgerSetup@1004 : Record 98;
      Assert@1002 : Codeunit 130000;
    BEGIN
      GeneralLedgerSetup.GET;
      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      ReminderLine.SETRANGE(Type,ReminderLine.Type::"G/L Account");
      ReminderLine.SETRANGE("Line Type",ReminderLine."Line Type"::"Additional Fee");
      ReminderLine.FINDFIRST;
      Assert.AreNearlyEqual(Amount,ReminderLine.Amount,GeneralLedgerSetup."Amount Rounding Precision",STRSUBSTNO(AmountError,Amount));
    END;

    LOCAL PROCEDURE VerifyReminderRoundingLine@15(ReminderNo@1001 : Code[20]);
    VAR
      ReminderLine@1000 : Record 296;
    BEGIN
      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      ReminderLine.SETFILTER("Line Type",'%1|%2',
        ReminderLine."Line Type"::Rounding,ReminderLine."Line Type"::"Ending Text");
      ReminderLine.FINDLAST;
      Assert.AreNotEqual(ReminderLine."Line Type"::Rounding,ReminderLine."Line Type",ErrMsg);
    END;

    BEGIN
    {
      // [FEATURE] [Reminder]
      Unsupported version tags:
      NA: Unable to Execute

      Test Reminder with Additional Fee on Sales Invoice.
       1. Create Sales Invoice with Reminder and Check Additional Fee after Suggest Reminder Lines.
       2. Test Reminder Lines after Suggesting Lines for Reminder.
       3. Test Issued Reminder Lines after Issuing Reminder.
       4. Suggest Reminder Lines with Rounding, and check Rounding Line shows before Ending Text Line.

        Covers Test Cases
        ---------------------------------------------------
        Test Function Name                   TFS ID
        ---------------------------------------------------
        ReminderWithAdditionalFee     125667 to 125671 and 121519

      TFS_TS_ID = 216991
      Cover Test cases:
      -------------------------------------------------------------------
      Test Function Name                                         TFS ID
      -------------------------------------------------------------------
      ReminderFromRefund, IssuedReminderFromRefund               124534
      Covers Test Cases: 333065
      -------------------------------------------------------------------
      Test Function Name                                         TFS ID
      -------------------------------------------------------------------
      ReminderWithRounding
    }
    END.
  }
}

