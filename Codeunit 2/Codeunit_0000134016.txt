OBJECT Codeunit 134016 ERM Vendor Pmt Tol With Wrning
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1002 : Codeunit 131300;
      LibraryPmtDiscSetup@1003 : Codeunit 131303;
      LibrarySetupStorage@1006 : Codeunit 131009;
      LibraryRandom@1001 : Codeunit 130440;
      Assert@1005 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      AmountError@1004 : TextConst 'ENU=%1 must be %2 in %3.';

    [Test]
    PROCEDURE OverPmtWithDisountLCY@25();
    BEGIN
      // Covers documents TFS_TC_ID=124390,124391.

      // Check Payment Tolerance on various entries after Post General Lines with more Amount and Same Posting Date.
      Initialize;
      OverPmtWithDiscount('','');
    END;

    [Test]
    PROCEDURE OverPmtWithDiscountFCY@42();
    VAR
      CurrencyCode@1000 : Code[10];
    BEGIN
      // Covers documents TFS_TC_ID=124390,124391.

      // Check Payment Tolerance on various entries after Post General Lines with more Amount and Same Posting Date with Currency.
      Initialize;
      CurrencyCode := CreateCurrency;
      OverPmtWithDiscount(CurrencyCode,CurrencyCode);
    END;

    [Test]
    PROCEDURE OverPmtWithDiscountMultiCur@51();
    BEGIN
      // Covers documents TFS_TC_ID=124390,124391.

      // Check Payment Tolerance on various entries after Post General Lines with more Amount and Same Posting Date with New Currency.
      Initialize;
      OverPmtWithDiscount(CreateCurrency,CreateCurrency);
    END;

    LOCAL PROCEDURE OverPmtWithDiscount@43(CurrencyCode1@1004 : Code[10];CurrencyCode2@1005 : Code[10]);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      GenJournalLine@1002 : Record 81;
      Amount@1001 : Decimal;
      Amount2@1000 : Decimal;
    BEGIN
      // Modify General Ledger Setup and Post Gen. Journal Lines for Invoice/Credit Memo and Payment/Refund
      // with Random Amount.
      LibraryPmtDiscSetup.SetPmtTolerance(1);

      GeneralLedgerSetup.GET;
      Amount := 10 * LibraryRandom.RandInt(100);
      Amount2 := Amount + GeneralLedgerSetup."Max. Payment Tolerance Amount";

      PaymentWithDiscount(
        CurrencyCode1,CurrencyCode2,GenJournalLine."Document Type"::"Credit Memo",
        GenJournalLine."Document Type"::Refund,Amount,-Amount2);
      PaymentWithDiscount(
        CurrencyCode1,CurrencyCode2,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,-Amount,Amount2);
    END;

    [Test]
    PROCEDURE EqualPmtWithDisountLCY@15();
    BEGIN
      // Covers documents TFS_TC_ID=124390,124392.

      // Check Payment Tolerance on various entries after Post General Lines with more Amount and Same Posting Date.
      Initialize;
      EqualPmtWithDiscount('','');
    END;

    [Test]
    PROCEDURE EqualPmtWithDisountFCY@14();
    VAR
      CurrencyCode@1003 : Code[10];
    BEGIN
      // Covers documents TFS_TC_ID=124390,124392.

      // Check Payment Tolerance on various entries after Post General Lines with more Amount and Same Posting Date with Currency.
      Initialize;
      CurrencyCode := CreateCurrency;
      EqualPmtWithDiscount(CurrencyCode,CurrencyCode);
    END;

    [Test]
    PROCEDURE EqualPmtWithDisountMultiCur@7();
    BEGIN
      // Covers documents TFS_TC_ID=124390,124392.

      // Check Payment Tolerance on various entries after Post General Lines with more Amount and Same Posting Date with New Currency.
      Initialize;
      EqualPmtWithDiscount(CreateCurrency,CreateCurrency);
    END;

    LOCAL PROCEDURE EqualPmtWithDiscount@58(CurrencyCode1@1002 : Code[10];CurrencyCode2@1003 : Code[10]);
    VAR
      GenJournalLine@1001 : Record 81;
      Amount@1000 : Decimal;
    BEGIN
      // Modify General Ledger Setup and Post Gen. Journal Lines for Invoice/Credit Memo and Payment/Refund
      // with Random Amount.
      LibraryPmtDiscSetup.SetPmtTolerance(1);
      Amount := 10 * LibraryRandom.RandInt(100);

      PaymentWithDiscount(
        CurrencyCode1,CurrencyCode2,GenJournalLine."Document Type"::"Credit Memo",
        GenJournalLine."Document Type"::Refund,Amount,-Amount);
      PaymentWithDiscount(
        CurrencyCode1,CurrencyCode2,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,-Amount,Amount);
    END;

    [Test]
    [HandlerFunctions(PaymentDiscTolPageHandler,PaymentTolerancePageHandler)]
    PROCEDURE LessPmtWithToleranceLCY@30();
    BEGIN
      // Covers documents TFS_TC_ID=124390,124401,124402,124403.

      // Check Payment Tolerance on various entries after Post General Lines with Less Amount and After Posting Date.
      Initialize;
      LessPmtWithTolerance('','');
    END;

    [Test]
    [HandlerFunctions(PaymentDiscTolPageHandler,PaymentTolerancePageHandler)]
    PROCEDURE LessPmtWithToleranceFCY@35();
    VAR
      CurrencyCode@1001 : Code[10];
    BEGIN
      // Covers documents TFS_TC_ID=124390,124401,124402,124403.

      // Check Payment Tolerance on various entries after Post General Lines with Less Amount and After Posting Date with Currency.
      Initialize;
      CurrencyCode := CreateCurrency;
      LessPmtWithTolerance(CurrencyCode,CurrencyCode);
    END;

    [Test]
    [HandlerFunctions(PaymentDiscTolPageHandler,PaymentTolerancePageHandler)]
    PROCEDURE LessPmtWithToleranceMultiCur@34();
    BEGIN
      // Covers documents TFS_TC_ID=124390,124401,124402,124403.

      // Check Payment Tolerance on various entries after Post General Lines with Less Amount and After Posting Date with New Currency.
      Initialize;
      LessPmtWithTolerance(CreateCurrency,CreateCurrency);
    END;

    LOCAL PROCEDURE LessPmtWithTolerance@70(CurrencyCode1@1004 : Code[10];CurrencyCode2@1005 : Code[10]);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      GenJournalLine@1002 : Record 81;
      Amount@1001 : Decimal;
      Amount2@1000 : Decimal;
    BEGIN
      // Check Payment Tolerance on various entries after Post General Lines with Less Amount and After Posting Date.

      // Modify General Ledger Setup and Post Gen. Journal Lines for Invoice/Credit Memo and Payment/Refund
      // with Random Amount.
      LibraryPmtDiscSetup.SetPmtTolerance(1);
      GeneralLedgerSetup.GET;

      ComputePmtTolAmountForMinValue(Amount,Amount2);
      PaymentWithDiscountTolerance(
        CurrencyCode1,CurrencyCode2,GenJournalLine."Document Type"::"Credit Memo",
        GenJournalLine."Document Type"::Refund,Amount,-Amount2);
      ComputePmtTolAmountForMaxValue(Amount,Amount2);
      PaymentWithDiscountTolerance(
        CurrencyCode1,CurrencyCode2,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,-Amount,Amount2);
    END;

    [Test]
    [HandlerFunctions(PaymentTolerancePageHandler)]
    PROCEDURE UnderAmtBfrDiscDateLCY@32();
    BEGIN
      // Covers documents TFS_TC_ID=124390, 124393,124394,124395.

      // Check Payment Tolerance on various entries after Post General Lines with Less Amount and Less Posting Date.
      Initialize;
      UnderAmtBfrDiscDate('','');
    END;

    [Test]
    [HandlerFunctions(PaymentTolerancePageHandler)]
    PROCEDURE UnderAmtBfrDiscDateFCY@31();
    VAR
      CurrencyCode@1002 : Code[10];
    BEGIN
      // Covers documents TFS_TC_ID=124390, 124393,124394,124395.

      // Check Payment Tolerance on various entries after Post General Lines with Less Amount and Less Posting Date with Currency.
      Initialize;
      CurrencyCode := CreateCurrency;
      UnderAmtBfrDiscDate(CurrencyCode,CurrencyCode);
    END;

    [Test]
    [HandlerFunctions(PaymentTolerancePageHandler)]
    PROCEDURE UnderAmtBfrDiscDateMultiCur@29();
    BEGIN
      // Covers documents TFS_TC_ID=124390, 124393,124394,124395.

      // Check Payment Tolerance on various entries after Post General Lines with Less Amount and Less Posting Date with New Currency.
      Initialize;
      UnderAmtBfrDiscDate(CreateCurrency,CreateCurrency);
    END;

    LOCAL PROCEDURE UnderAmtBfrDiscDate@83(CurrencyCode1@1000 : Code[10];CurrencyCode2@1001 : Code[10]);
    VAR
      GenJournalLine@1004 : Record 81;
      Amount@1003 : Decimal;
      Amount2@1002 : Decimal;
    BEGIN
      // Modify General Ledger Setup and Post Gen. Journal Lines for Credit Memo and Refund with Random Amount.
      LibraryPmtDiscSetup.SetPmtTolerance(1);

      ComputePmtTolAmountForMinValue(Amount,Amount2);
      PaymentWithTolerance(
        CurrencyCode1,CurrencyCode2,GenJournalLine."Document Type"::"Credit Memo",
        GenJournalLine."Document Type"::Refund,Amount,-Amount2);
      PaymentWithTolerance(
        CurrencyCode1,CurrencyCode2,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,-Amount,Amount2);
    END;

    [Test]
    [HandlerFunctions(PaymentDiscTolPageHandler)]
    PROCEDURE OverWithoutToleranceLCY@37();
    BEGIN
      // Covers documents TFS_TC_ID=124390,124404,124405,124409,124410.

      // Check Payment Tolerance on various entries after Post General Lines with More Amount and After Posting Date.
      Initialize;
      OverWithoutTolerance('','');
    END;

    [Test]
    [HandlerFunctions(PaymentDiscTolPageHandler)]
    PROCEDURE OverWithoutToleranceFCY@36();
    VAR
      CurrencyCode@1000 : Code[10];
    BEGIN
      // Covers documents TFS_TC_ID=124390,124404,124405,124409,124410.

      // Check Payment Tolerance on various entries after Post General Lines with Less Amount and After Posting Date with Currency.
      Initialize;
      CurrencyCode := CreateCurrency;
      OverWithoutTolerance(CurrencyCode,CurrencyCode);
    END;

    [Test]
    [HandlerFunctions(PaymentDiscTolPageHandler)]
    PROCEDURE OverWithoutToleranceMultiCur@9();
    BEGIN
      // Covers documents TFS_TC_ID=124390,124404,124405,124409,124410.

      // Check Payment Tolerance on various entries after Post General Lines with Less Amount and After Posting Date with New Currency.
      Initialize;
      OverWithoutTolerance(CreateCurrency,CreateCurrency);
    END;

    LOCAL PROCEDURE OverWithoutTolerance@96(CurrencyCode1@1004 : Code[10];CurrencyCode2@1005 : Code[10]);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      GenJournalLine@1002 : Record 81;
      Amount@1001 : Decimal;
      Amount2@1000 : Decimal;
    BEGIN
      // Check Payment Tolerance on various entries after Post General Lines with More Amount and After Posting Date.

      // Modify General Ledger Setup and Post Gen. Journal Lines for Credit Memo and Refund with Random Amount.
      LibraryPmtDiscSetup.SetPmtTolerance(1);
      GeneralLedgerSetup.GET;
      Amount := 10 * LibraryRandom.RandInt(100);
      Amount2 := Amount + GeneralLedgerSetup."Max. Payment Tolerance Amount";

      PaymentWithoutTolerance(
        CurrencyCode1,CurrencyCode2,GenJournalLine."Document Type"::"Credit Memo",
        GenJournalLine."Document Type"::Refund,Amount,-Amount2);
      PaymentWithoutTolerance(
        CurrencyCode1,CurrencyCode2,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,-Amount,Amount2);
    END;

    [Test]
    PROCEDURE EqualWithoutDiscountLCY@41();
    BEGIN
      // Covers documents TFS_TC_ID=124390,124406,124407,124408.

      // Check Payment Tolerance on various entries after Post General Lines with Same Amount and After Posting Date.
      Initialize;
      EqualWithoutDiscount('','');
    END;

    [Test]
    PROCEDURE EqualWithoutDiscountFCY@40();
    VAR
      CurrencyCode@1003 : Code[10];
    BEGIN
      // Covers documents TFS_TC_ID=124390,124406,124407,124408.

      // Check Payment Tolerance on various entries after Post General Lines with Same Amount and After Posting Date with Currency.
      Initialize;
      CurrencyCode := CreateCurrency;
      EqualWithoutDiscount(CurrencyCode,CurrencyCode);
    END;

    [Test]
    PROCEDURE EqualWithoutDiscountMultiCur@39();
    BEGIN
      // Covers documents TFS_TC_ID=124390,124406,124407,124408.

      // Check Payment Tolerance on various entries after Post General Lines with Same Amount and After Posting Date with New Currency.
      Initialize;
      EqualWithoutDiscount(CreateCurrency,CreateCurrency);
    END;

    LOCAL PROCEDURE EqualWithoutDiscount@104(CurrencyCode1@1002 : Code[10];CurrencyCode2@1003 : Code[10]);
    VAR
      GenJournalLine@1001 : Record 81;
      Amount@1000 : Decimal;
    BEGIN
      // Check Payment Tolerance on various entries after Post General Lines with Same Amount and After Posting Date.

      // Modify General Ledger Setup and Post Gen. Journal Lines for Credit Memo and Refund with Random Amount.
      LibraryPmtDiscSetup.SetPmtTolerance(1);
      Amount := 10 * LibraryRandom.RandInt(100);

      PaymentWithoutDiscount(
        CurrencyCode1,CurrencyCode2,GenJournalLine."Document Type"::"Credit Memo",
        GenJournalLine."Document Type"::Refund,Amount,-Amount);
      PaymentWithoutDiscount(
        CurrencyCode1,CurrencyCode2,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,-Amount,Amount);
    END;

    [Test]
    [HandlerFunctions(PaymentTolerancePageHandler)]
    PROCEDURE LessWithoutDiscountLCY@50();
    BEGIN
      // Covers documents TFS_TC_ID=124390, 124396,124397,124398,124399,124400.

      // Check Payment Tolerance on various entries after Post General Lines with Less Amount and Over Posting Date.
      Initialize;
      LessPmtWithoutDiscount('','');
    END;

    [Test]
    [HandlerFunctions(PaymentTolerancePageHandler)]
    PROCEDURE LessPmtWithoutDiscountFCY@49();
    VAR
      CurrencyCode@1003 : Code[10];
    BEGIN
      // Covers documents TFS_TC_ID=124390, 124396,124397,124398,124399,124400.

      // Check Payment Tolerance on various entries after Post General Lines with Less Amount and Over Posting Date with Currency.
      Initialize;
      CurrencyCode := CreateCurrency;
      LessPmtWithoutDiscount(CurrencyCode,CurrencyCode);
    END;

    [Test]
    [HandlerFunctions(PaymentTolerancePageHandler)]
    PROCEDURE LessPmtWithoutDiscountMultiCur@48();
    BEGIN
      // Covers documents TFS_TC_ID=124390, 124396,124397,124398,124399,124400.

      // Check Payment Tolerance on various entries after Post General Lines with Less Amount and Over Posting Date with New Currency.
      Initialize;
      LessPmtWithoutDiscount(CreateCurrency,CreateCurrency);
    END;

    LOCAL PROCEDURE LessPmtWithoutDiscount@114(CurrencyCode1@1004 : Code[10];CurrencyCode2@1005 : Code[10]);
    VAR
      GenJournalLine@1003 : Record 81;
      GeneralLedgerSetup@1002 : Record 98;
      Amount@1001 : Decimal;
      Amount2@1000 : Decimal;
    BEGIN
      // Modify General Ledger Setup and Post Gen. Journal Lines for Credit Memo and Refund with Random Amount.
      LibraryPmtDiscSetup.SetPmtTolerance(1);
      GeneralLedgerSetup.GET;

      ComputePmtTolAmountForMinValue(Amount,Amount2);
      PaymentWithoutDiscount(
        CurrencyCode1,CurrencyCode2,GenJournalLine."Document Type"::"Credit Memo",
        GenJournalLine."Document Type"::Refund,Amount,-Amount2);
      ComputeAmountForABSMaxValue(Amount,Amount2);
      PaymentWithoutDiscount(
        CurrencyCode1,CurrencyCode2,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,-Amount,Amount2);
    END;

    [Normal]
    LOCAL PROCEDURE PaymentWithoutDiscount@44(CurrencyCode@1013 : Code[10];CurrencyCode2@1011 : Code[10];GenJnlDocumentType@1010 : Option;GenJnlDocumentType2@1009 : Option;Amount@1007 : Decimal;Amount2@1006 : Decimal);
    VAR
      DetailedVendorLedgEntry@1001 : Record 380;
      GenJournalLine@1002 : Record 81;
      DocumentNo@1008 : Code[20];
    BEGIN
      // Setup: Modify General Ledger Setup and Post Gen. Journal Lines for Invoice and Payment with Random Amount and
      // attached currency and Post them.
      CreateAndPostJnlLine(GenJournalLine,CurrencyCode,GenJnlDocumentType,Amount);

      // Exercise: Apply Invoice Document No. with Payment Gen. Journal Line and Post it.
      DocumentNo :=
        PostApplicationJnlLine(GenJournalLine,CurrencyCode2,GenJnlDocumentType2,
          Amount2,CALCDATE('<' + LibraryPmtDiscSetup.GetPmtDiscGracePeriod + '>',CALCDATE('<1M>',CalcDueDate)));

      // Verify: Verify Vendor Ledger Entry, Detailed Vendor Ledger Entry.
      VerifyVendorLedgerEntry(GenJnlDocumentType,GenJournalLine."Document No.",(Amount * GetDiscountPercent / 100));
      VerifyDetldVendorLedgerEntry(
        GenJnlDocumentType2,DetailedVendorLedgEntry."Entry Type"::Application,DocumentNo,-GetAmountFCY(CurrencyCode2,Amount));
    END;

    [Normal]
    LOCAL PROCEDURE PaymentWithDiscount@19(CurrencyCode@1005 : Code[10];CurrencyCode2@1004 : Code[10];GenJnlDocumentType@1003 : Option;GenJnlDocumentType2@1002 : Option;Amount@1001 : Decimal;Amount2@1000 : Decimal);
    VAR
      DetailedVendorLedgEntry@1007 : Record 380;
      GenJournalLine@1010 : Record 81;
      DocumentNo@1012 : Code[20];
      PmtDiscount@1006 : Decimal;
    BEGIN
      // Setup: Modify General Ledger Setup and Post Gen. Journal Lines with Random Amount and
      // attached currency and Post them.
      CreateAndPostJnlLine(GenJournalLine,CurrencyCode,GenJnlDocumentType,Amount);

      // Exercise: Apply Document with Gen. Journal Line and Post it.
      DocumentNo := PostApplicationJnlLine(GenJournalLine,CurrencyCode2,GenJnlDocumentType2,Amount2,CalcDueDate);

      // Verify: Verify Vendor Ledger Entry, Detailed Vendor Ledger Entry and G/L Entry.
      PmtDiscount := GetAmountFCY(CurrencyCode2,GetDiscountAmount(Amount));
      VerifyVendorLedgerEntry(GenJnlDocumentType,GenJournalLine."Document No.",GetDiscountAmount(Amount));
      VerifyDetldVendorLedgerEntry(GenJnlDocumentType2,DetailedVendorLedgEntry."Entry Type"::"Payment Discount",DocumentNo,-PmtDiscount)
      ;
    END;

    [Normal]
    LOCAL PROCEDURE PaymentWithTolerance@33(CurrencyCode@1000 : Code[10];CurrencyCode2@1009 : Code[10];GenJnlDocumentType@1010 : Option;GenJnlDocumentType2@1011 : Option;Amount@1012 : Decimal;Amount2@1003 : Decimal);
    VAR
      DetailedVendorLedgEntry@1004 : Record 380;
      GenJournalLine@1001 : Record 81;
      DocumentNo@1006 : Code[20];
      PmtTolAmount@1002 : Decimal;
    BEGIN
      // Setup: Modify General Ledger Setup and Post Gen. Journal Lines with Random Amount and
      // attached currency and Post them.
      CreateAndPostJnlLine(GenJournalLine,CurrencyCode,GenJnlDocumentType,Amount);

      // Exercise: Apply Invoice/Credit Memo Document No. with Payment/Refund Gen. Journal Line and Post it.
      DocumentNo := PostApplicationJnlLine(GenJournalLine,CurrencyCode2,GenJnlDocumentType2,Amount2,CALCDATE('<-1D>',CalcDueDate));

      // Verify: Verify Vendor Ledger Entry, Detailed Vendor Ledger Entry.
      PmtTolAmount := GetAmountFCY(CurrencyCode2,Amount2 + (Amount - GetDiscountAmount(Amount)));
      VerifyVendorLedgerEntry(GenJnlDocumentType,GenJournalLine."Document No.",GetDiscountAmount(Amount));
      VerifyDetldVendorLedgerEntry(
        GenJnlDocumentType2,DetailedVendorLedgEntry."Entry Type"::"Payment Tolerance",DocumentNo,-PmtTolAmount);
    END;

    LOCAL PROCEDURE PaymentWithoutTolerance@38(CurrencyCode@1000 : Code[10];CurrencyCode2@1009 : Code[10];GenJnlDocumentType@1010 : Option;GenJnlDocumentType2@1011 : Option;Amount@1012 : Decimal;Amount2@1003 : Decimal);
    VAR
      DetailedVendorLedgEntry@1001 : Record 380;
      GenJournalLine@1007 : Record 81;
      DocumentNo@1006 : Code[20];
      PmtDiscount@1004 : Decimal;
    BEGIN
      // Setup: Modify General Ledger Setup and Post Gen. Journal Lines with Random Amount and
      // attached currency and Post them.
      CreateAndPostJnlLine(GenJournalLine,CurrencyCode,GenJnlDocumentType,Amount);

      // Exercise: Apply Credit Memo Document No. with Refund Gen. Journal Line and Post it.
      DocumentNo := PostApplicationJnlLine(GenJournalLine,CurrencyCode2,GenJnlDocumentType2,Amount2,CALCDATE('<1D>',CalcDueDate));

      // Verify: Verify Vendor Ledger Entry and Detailed Vendor Ledger Entry.
      PmtDiscount := GetAmountFCY(CurrencyCode2,GetDiscountAmount(Amount));
      VerifyVendorLedgerEntry(GenJnlDocumentType,GenJournalLine."Document No.",Amount * GetDiscountPercent / 100);
      VerifyDetldVendorLedgerEntry(
        GenJnlDocumentType2,DetailedVendorLedgEntry."Entry Type"::"Payment Discount Tolerance",DocumentNo,-PmtDiscount);
    END;

    LOCAL PROCEDURE PaymentWithDiscountTolerance@21(CurrencyCode@1011 : Code[10];CurrencyCode2@1010 : Code[10];GenJnlDocumentType@1009 : Option;GenJnlDocumentType2@1008 : Option;Amount@1007 : Decimal;Amount2@1006 : Decimal);
    VAR
      DetailedVendorLedgEntry@1001 : Record 380;
      GenJournalLine@1004 : Record 81;
      DocumentNo@1012 : Code[20];
      PmtTolAmount@1000 : Decimal;
    BEGIN
      // Setup: Modify General Ledger Setup and Post Gen. Journal Lines for Invoice and Payment with Random Amount and
      // attached currency and Post them.
      CreateAndPostJnlLine(GenJournalLine,CurrencyCode,GenJnlDocumentType,Amount);

      // Exercise: Apply Document with Gen. Journal Line and Post it.
      DocumentNo := PostApplicationJnlLine(GenJournalLine,CurrencyCode2,GenJnlDocumentType2,Amount2,CALCDATE('<1D>',CalcDueDate));

      // Verify: Verify Vendor Ledger Entry, Detailed Vendor Ledger Entry and G/L Entry.
      PmtTolAmount := GetAmountFCY(CurrencyCode2,Amount2 + (Amount - GetDiscountAmount(Amount)));
      VerifyDetldVendorLedgerEntry(
        GenJnlDocumentType2,DetailedVendorLedgEntry."Entry Type"::"Payment Tolerance",DocumentNo,-PmtTolAmount);
      VerifyDetldVendorLedgerEntry(GenJnlDocumentType2,DetailedVendorLedgEntry."Entry Type"::"Payment Discount Tolerance",DocumentNo,
        -GetAmountFCY(CurrencyCode2,GetDiscountAmount(Amount)));
    END;

    LOCAL PROCEDURE CreateAndPostJnlLine@24(VAR GenJournalLine@1000 : Record 81;CurrencyCode@1009 : Code[10];GenJnlDocumentType@1007 : Option;Amount@1005 : Decimal);
    BEGIN
      // Setup: Modify General Ledger Setup and Post Gen. Journal Lines for Invoice and Payment with Random Amount and
      // attached currency and Post them.
      CreateDocumentLine(GenJournalLine,GenJnlDocumentType,CreateVendor,Amount,CurrencyCode,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE PostApplicationJnlLine@28(GenJournalLine@1002 : Record 81;CurrencyCode@1005 : Code[10];GenJnlDocumentType@1003 : Option;Amount2@1001 : Decimal;DueDate@1000 : Date) : Code[20];
    VAR
      GenJournalLine2@1007 : Record 81;
    BEGIN
      // Set Amount and Posting Date with Payment Terms for Payment Tolerance Discount.
      CreateDocumentLine(GenJournalLine2,GenJnlDocumentType,GenJournalLine."Account No.",Amount2,CurrencyCode,DueDate);

      // Exercise: Apply Document with Gen. Journal Line and Post it.
      UpdateAndPostGenJnlLine(GenJournalLine2,GenJournalLine."Document Type",GenJournalLine."Document No.");
      EXIT(GenJournalLine2."Document No.");
    END;

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
    END;

    LOCAL PROCEDURE ComputePmtTolAmountForMinValue@26(VAR Amount@1000 : Decimal;VAR Amount2@1001 : Decimal);
    VAR
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      // To Calculate Payment/Refund value using "Payment Tolerance %" field value from General Ledger Setup need to take fixed
      // higher seed value to 499.
      GeneralLedgerSetup.GET;
      Amount := LibraryRandom.RandInt(499);
      Amount2 := Amount - (Amount * GeneralLedgerSetup."Payment Tolerance %" / 100);
    END;

    LOCAL PROCEDURE ComputePmtTolAmountForMaxValue@27(VAR Amount@1002 : Decimal;VAR Amount2@1001 : Decimal);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      // To Calculate Payment/Refund value using "Max. Payment Tolerance Amount" field value from General Ledger Setup need to take fixed
      // lower seed value to 500.
      GeneralLedgerSetup.GET;
      Amount := 500 * LibraryRandom.RandInt(5);
      Amount2 := Amount - (GeneralLedgerSetup."Max. Payment Tolerance Amount" + (Amount * GetDiscountPercent / 100));
    END;

    LOCAL PROCEDURE ComputeAmountForABSMaxValue@55(VAR Amount@1002 : Decimal;VAR Amount2@1001 : Decimal);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      // To Calculate Payment/Refund value using "Max. Payment Tolerance Amount" field value from General Ledger Setup need to take fixed
      // lower seed value to 500.
      GeneralLedgerSetup.GET;
      Amount := 500 * LibraryRandom.RandInt(5);
      Amount2 := Amount - GeneralLedgerSetup."Max. Payment Tolerance Amount";
    END;

    LOCAL PROCEDURE CreateVendor@6() : Code[20];
    VAR
      Vendor@1000 : Record 23;
      LibraryPurchase@1001 : Codeunit 130512;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Application Method",Vendor."Application Method"::Manual);
      Vendor.VALIDATE("Payment Terms Code",GetPaymentTerms);
      Vendor.MODIFY(TRUE);

      UpdateVendorPostingGroup(Vendor."Vendor Posting Group");
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateCurrency@2() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      Currency.VALIDATE("Payment Tolerance %",1);
      Currency.VALIDATE("Max. Payment Tolerance Amount",5);
      Currency.VALIDATE("Residual Gains Account",Currency."Realized Gains Acc.");
      Currency.VALIDATE("Residual Losses Account",Currency."Realized Losses Acc.");
      Currency.MODIFY(TRUE);

      // Create Exchange Rate.
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      COMMIT;
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateDocumentLine@13(VAR GenJournalLine@1004 : Record 81;DocumentType@1006 : Option;VendorNo@1000 : Code[20];Amount@1001 : Decimal;CurrencyCode@1007 : Code[10];PostingDate@1003 : Date);
    VAR
      GenJournalBatch@1002 : Record 232;
    BEGIN
      // Select Journal Batch Name and Template Name.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,GenJournalLine."Account Type"::Vendor,
        VendorNo,Amount);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcDueDate@23() : Date;
    VAR
      PaymentTerms@1000 : Record 3;
    BEGIN
      PaymentTerms.GET(GetPaymentTerms);
      EXIT(CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE));
    END;

    LOCAL PROCEDURE GetDiscountPercent@1() : Decimal;
    VAR
      PaymentTerms@1000 : Record 3;
    BEGIN
      PaymentTerms.GET(GetPaymentTerms);
      EXIT(PaymentTerms."Discount %");
    END;

    LOCAL PROCEDURE GetDiscountAmount@4(Amount@1001 : Decimal) : Decimal;
    BEGIN
      EXIT(Amount * GetDiscountPercent / 100);
    END;

    LOCAL PROCEDURE GetPaymentTerms@16() : Code[10];
    VAR
      PaymentTerms@1000 : Record 3;
    BEGIN
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      IF NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
        PaymentTerms.VALIDATE("Calc. Pmt. Disc. on Cr. Memos",TRUE);
        PaymentTerms.MODIFY(TRUE);
      END;
      EXIT(PaymentTerms.Code);
    END;

    [Normal]
    LOCAL PROCEDURE GetAmountFCY@3(CurrencyCode@1000 : Code[10];Amount@1001 : Decimal) : Decimal;
    VAR
      CurrencyExchangeRate@1003 : Record 330;
    BEGIN
      IF CurrencyCode = '' THEN
        EXIT(Amount);
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
      EXIT(Amount * CurrencyExchangeRate."Relational Exch. Rate Amount" / CurrencyExchangeRate."Exchange Rate Amount");
    END;

    LOCAL PROCEDURE UpdateVendorPostingGroup@11(PostingGroupCode@1000 : Code[10]);
    VAR
      VendorPostingGroup@1001 : Record 93;
      GLAccount@1002 : Record 15;
    BEGIN
      VendorPostingGroup.GET(PostingGroupCode);
      GLAccount.SETRANGE("Account Type",GLAccount."Account Type"::Posting);
      GLAccount.SETRANGE(Blocked,FALSE);
      GLAccount.FINDSET;
      VendorPostingGroup.VALIDATE("Payment Disc. Debit Acc.",GLAccount."No.");
      VendorPostingGroup.VALIDATE("Payment Disc. Credit Acc.",GLAccount."No.");
      GLAccount.NEXT;
      VendorPostingGroup.VALIDATE("Payment Tolerance Debit Acc.",GLAccount."No.");
      VendorPostingGroup.VALIDATE("Payment Tolerance Credit Acc.",GLAccount."No.");
      VendorPostingGroup.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE UpdateAndPostGenJnlLine@12(VAR GenJournalLine@1002 : Record 81;AppliestoDocType@1000 : Option;DocumentNo@1001 : Code[20]);
    BEGIN
      GenJournalLine.VALIDATE("Applies-to Doc. Type",AppliestoDocType);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",DocumentNo);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyVendorLedgerEntry@17(DocumentType@1002 : Option;DocumentNo@1000 : Code[20];ToleranceDiscount@1003 : Decimal);
    VAR
      VendorLedgerEntry@1001 : Record 25;
      GeneralLedgerSetup@1004 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      VendorLedgerEntry.SETRANGE("Document Type",DocumentType);
      VendorLedgerEntry.SETRANGE("Document No.",DocumentNo);
      VendorLedgerEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        ToleranceDiscount,VendorLedgerEntry."Original Pmt. Disc. Possible",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,VendorLedgerEntry.FIELDCAPTION("Original Pmt. Disc. Possible"),
          ToleranceDiscount,VendorLedgerEntry.TABLECAPTION));
    END;

    [Normal]
    LOCAL PROCEDURE VerifyDetldVendorLedgerEntry@10(DocumentType@1001 : Option;EntryType@1005 : Option;DocumentNo@1000 : Code[20];ToleranceDiscount@1003 : Decimal);
    VAR
      DetailedVendorLedgEntry@1002 : Record 380;
      GeneralLedgerSetup@1004 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      DetailedVendorLedgEntry.SETRANGE("Document Type",DocumentType);
      DetailedVendorLedgEntry.SETRANGE("Entry Type",EntryType);
      DetailedVendorLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedVendorLedgEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        ToleranceDiscount,DetailedVendorLedgEntry."Amount (LCY)",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,DetailedVendorLedgEntry.FIELDCAPTION("Amount (LCY)"),
          ToleranceDiscount,DetailedVendorLedgEntry.TABLECAPTION));
    END;

    [ModalPageHandler]
    PROCEDURE PaymentTolerancePageHandler@22(VAR PaymentToleranceWarning@1000 : Page 591;VAR Response@1001 : Action);
    BEGIN
      // Set Integer Value 1 for option "Post Balance for Payment Discount" on Tolerance Warning page.
      PaymentToleranceWarning.InitializeOption(1);
      Response := ACTION::Yes;
    END;

    [ModalPageHandler]
    PROCEDURE PaymentDiscTolPageHandler@20(VAR PaymentDiscToleranceWarning@1000 : Page 599;VAR Response@1001 : Action);
    BEGIN
      // Set Integer Value 1 for option "Post as Payment Disc. Tolerance" on Tolerance Warning page.
      PaymentDiscToleranceWarning.InitializeNewPostingAction(1);
      Response := ACTION::Yes;
    END;

    BEGIN
    {
      // [FEATURE] [Payment Tolerance] [Purchase]

      Test Payment Tolerance on Vendor feature for single documents manual application and with Tolerance warning:
      1. Create Setup for Payment Tolerance and Post Credit Memo and Refund and Check Payment Tolerance Discount on various Entries.
      2. Create Setup for Payment Tolerance and Post Invoice and Payment with Currency and Check Payment Tolerance Discount
         on various Entries.
      3. Create Setup for Payment Tolerance and Post Invoice and Payment with New Currency and Check Payment Tolerance Discount
         on various Entries.
      4. Create Setup for Payment Tolerance and Post Credit Memo and Refund with equal amount and Check Payment Tolerance Discount
         on various Entries.
      5. Create Setup for Payment Tolerance and Post Invoice and Payment with equal amount and with Currency and Check Payment
         Tolerance Discount on various Entries.
      6. Create Setup for Payment Tolerance and Post Invoice and Payment with equal amount with New Currency and Check Payment Tolerance
         Discount on various Entries.
      7. Create Setup for Payment Tolerance and Post Credit Memo and Refund with Less amount and Check Payment Tolerance Discount
         on various Entries.
      8. Create Setup for Payment Tolerance and Post Invoice and Payment with Less amount and with Currency and Check Payment
         Tolerance Discount on various Entries.
      9. Create Setup for Payment Tolerance and Post Invoice and Payment with Less amount with New Currency and Check Payment Tolerance
         Discount on various Entries.
      10. Create Setup for Payment Tolerance and Post Credit Memo and Refund with Less amount and Over Payment Discount Date and
          Check Payment Tolerance Discount on various Entries.
      11. Create Setup for Payment Tolerance and Post Invoice and Payment with Less amount and Over Payment Discount Date with
          attached currency and Check Payment Tolerance Discount on various Entries.
      12. Create Setup for Payment Tolerance and Post Invoice and Payment with Less amount and Over Payment Discount Date with
          attached currency and Check Payment Tolerance Discount on various Entries with new currency.
      13. Create Setup for Payment Tolerance and Post Invoice and Payment with Less amount and Over Payment Discount Date
          and Check Payment Disc. Tolerance Warning and various Entries.
      14. Create Setup for Payment Tolerance and Post Invoice and Payment with Less amount and Over Payment Discount Date with
          currency and Check Payment Disc. Tolerance Warning and various Entries.
      15. Create Setup for Payment Tolerance and Post Invoice and Payment with Less amount and Over Payment Discount Date with
          currency and Check Payment Disc. Tolerance Warning and various Entries.
      16. Create Setup for Payment Tolerance and Post Invoice and Payment with more invoice amount and Over Payment Discount Date
          and Check Payment Disc. Tolerance Warning and various Entries.
      17. Create Setup for Payment Tolerance and Post Invoice and Payment with more invoice amount and Over Payment Discount Date
          with currency and Check Payment Disc. Tolerance Warning and various Entries.
      18. Create Setup for Payment Tolerance and Post Invoice and Payment with Less amount and Over Payment Discount Date with
          new currency and Check Payment Disc. Tolerance Warning and various Entries.
      19. Create Setup for Payment Tolerance and Post Invoice and Payment with Less invoice amount and Over Payment Discount Date
          and check various Entries.
      20. Create Setup for Payment Tolerance and Post Invoice and Payment with Less invoice amount and Over Payment Discount Date
          with currency and check various Entries.
      21. Create Setup for Payment Tolerance and Post Invoice and Payment with Less invoice amount and Over Payment Discount Date
          with new currency and check various Entries.

      Cover Test cases:
        TFS_TC_ID-124390 and TC_ID= 6270
        TFS_TC_ID-124391 and TC_ID= 6271
        TFS_TC_ID-124392 and TC_ID= 6272
        TFS_TC_ID-124393 and TC_ID= 6273
        TFS_TC_ID-124394 and TC_ID= 6274
        TFS_TC_ID-124395 and TC_ID= 6275
        TFS_TC_ID-124396 and TC_ID= 6276
        TFS_TC_ID-124397 and TC_ID= 6277
        TFS_TC_ID-124398 and TC_ID= 6278
        TFS_TC_ID-124399 and TC_ID= 6279
        TFS_TC_ID-124400 and TC_ID= 6280
        TFS_TC_ID-124401 and TC_ID= 6281
        TFS_TC_ID-124402 and TC_ID= 6282
        TFS_TC_ID-124403 and TC_ID= 6283
        TFS_TC_ID-124404 and TC_ID= 6284
        TFS_TC_ID-124405 and TC_ID= 6285
        TFS_TC_ID-124406 and TC_ID= 6286
        TFS_TC_ID-124407 and TC_ID= 6287
        TFS_TC_ID-124408 and TC_ID= 6288
        TFS_TC_ID-124409 and TC_ID= 6289
        TFS_TC_ID-124410 and TC_ID= 6290
    }
    END.
  }
}

