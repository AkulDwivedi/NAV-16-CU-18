OBJECT Codeunit 137158 SCM Orders V
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalTemplate@1005 : Record 82;
      ItemJournalBatch@1006 : Record 233;
      ReclassItemJournalTemplate@1030 : Record 82;
      ReclassItemJournalBatch@1029 : Record 233;
      LocationWhite@1007 : Record 14;
      LocationBlue@1011 : Record 14;
      LocationRed@1038 : Record 14;
      LocationSilver@1009 : Record 14;
      LocationYellow@1010 : Record 14;
      LocationGreen@1039 : Record 14;
      LocationOrange@1012 : Record 14;
      LocationInTransit@1041 : Record 14;
      WarehouseJournalTemplate@1033 : Record 7309;
      WarehouseJournalBatch@1032 : Record 7310;
      LibraryRandom@1000 : Codeunit 130440;
      LibraryVariableStorage@1001 : Codeunit 131004;
      LibrarySetupStorage@1071 : Codeunit 131009;
      LibraryUtility@1003 : Codeunit 131000;
      LibraryFiscalYear@1034 : Codeunit 131302;
      LibraryInventory@1004 : Codeunit 132201;
      LibraryItemTracking@1073 : Codeunit 130502;
      LibraryWarehouse@1008 : Codeunit 132204;
      LibraryManufacturing@1023 : Codeunit 132202;
      LibraryPurchase@1013 : Codeunit 130512;
      LibraryERM@1031 : Codeunit 131300;
      LibraryERMCountryData@1123 : Codeunit 131305;
      LibrarySales@1014 : Codeunit 130509;
      LibraryPlanning@1036 : Codeunit 132203;
      LibraryMarketing@1049 : Codeunit 131900;
      LibraryAssembly@1050 : Codeunit 132207;
      LibraryCosting@1054 : Codeunit 132200;
      LibraryService@1072 : Codeunit 131902;
      Assert@1015 : Codeunit 130000;
      LibraryJob@1058 : Codeunit 131920;
      LibraryPatterns@1061 : Codeunit 132212;
      LibraryDimension@1067 : Codeunit 131001;
      isInitialized@1002 : Boolean;
      ShipToCodeErr@1016 : TextConst '@@@="%1 = Ship-to Code Value, %2 = PurchaseHeader No.Value";ENU="Ship-to Code must be equal to ''%1''  in Purchase Header: Document Type=Order, No.=%2. Current value is ''%3''."';
      InventoryPickMsg@1017 : TextConst 'ENU=Number of Invt. Pick activities created';
      InventoryPickExistsAndShippingAdviceCompleteErr@1018 : TextConst 'ENU=You cannot add an item line because an open inventory pick exists for the Sales Header and because Shipping Advice is Complete.';
      InventoryPutAwayMsg@1019 : TextConst 'ENU=Number of Invt. Put-away activities created';
      UndoReceiptMsg@1021 : TextConst 'ENU=Do you really want to undo the selected Receipt lines?';
      CrossDockWarehouseEntryErr@1022 : TextConst 'ENU=Cross Dock Warehouse Entry must not exist.';
      PickActivityCreatedMsg@1028 : TextConst 'ENU="Pick activity no. "';
      PostJournalLinesConfirmationQst@1026 : TextConst 'ENU=Do you want to post the journal lines';
      JournalLinesPostedMsg@1025 : TextConst 'ENU=The journal lines were successfully posted';
      DateCompressConfirmMsg@1024 : TextConst 'ENU=This batch job deletes entries. Therefore, it is important that you make a backup of the database before you run the batch job.';
      AmountMustBeEqualErr@1035 : TextConst 'ENU=Amount must be equal.';
      ReservationEntryForItemLedgerEntryErr@1037 : TextConst 'ENU=Reservation Entry for Item Ledger Entry must not exist.';
      QuantityMustBeSameErr@1040 : TextConst 'ENU=Quantity must be same.';
      FieldShouldNotBeEditableErr@1043 : TextConst 'ENU=Field should not be editable.';
      FieldShouldBeEditableErr@1042 : TextConst 'ENU=Field should be editable.';
      ChangeBillToCustomerNoConfirmQst@1048 : TextConst 'ENU=Do you want to change';
      QuantityToAssembleErr@1047 : TextConst '@@@="%1 = Quantity Value";ENU=Quantity to Assemble cannot be higher than the Remaining Quantity, which is %1.';
      CannotInvoiceItemInPurchaseOrderErr@1046 : TextConst '@@@="%1 = Item No. Value, %2 = Serial No. Value, %3 = Sales Order No. Value";ENU=You cannot invoice the item %1 with item tracking number  %2 in this purchase order before the associated sales order %3 has been invoiced.';
      AvailabilityWarningsConfirmMsg@1045 : TextConst 'ENU=There are availability warnings on one or more lines.';
      ExternalDocumentMustNotEmptyErr@1044 : TextConst '@@@="%1 = Order No.";ENU="External Document No. must have a value in Sales Header: Document Type=Order, No.=%1. It cannot be zero or empty."';
      OrderDateOnSalesHeaderMsg@1051 : TextConst 'ENU=You have changed Order Date on the sales header';
      NoGLEntryWithinFilterErr@1052 : TextConst 'ENU=There is no G/L Entry within the filter';
      EMailBlankErr@1053 : TextConst '@@@={Locked};ENU="E-Mail must have a value in Contact: No.=%1"';
      DropShipmentMustBeEqualToNoErr@1056 : TextConst '@@@="%1 = Document No.";ENU="Drop Shipment must be equal to ''No''  in Purchase Line: Document Type=Order, Document No.=%1"';
      SpecialOrderMustBeEqualToNoErr@1057 : TextConst '@@@="%1 = Document No.";ENU="Special Order must be equal to ''No''  in Purchase Line: Document Type=Order, Document No.=%1"';
      ReservationEntryExistMsg@1059 : TextConst 'ENU=One or more reservation entries exist for the item';
      QuantityBaseErr@1060 : TextConst 'ENU=Quantity (Base) is not sufficient to complete this action';
      ExtendedTxt@1062 : TextConst 'ENU=Extended text of the BOM component.';
      ExpectedWarehousePickErrMsg@1063 : TextConst 'ENU=This order must be a complete shipment.';
      QtyToCrossDockErr@1064 : TextConst '@@@="%1 = Quantity";ENU=%1 must be correct.';
      OutboundDocument@1065 : 'SalesOrder,OutboundTransfer';
      ItemTrackingMode@1068 : 'AssignLotNo,SelectEntries,AssignSerialNo,UpdateQtyOnFirstLine,UpdateQtyOnLastLine,VerifyLot';
      UndoReturnShipmentMsg@1069 : TextConst 'ENU=Do you really want to undo the selected Return Shipment lines?';
      ExpectedFailedErr@1066 : TextConst '@@@={Locked};ENU=%1 must be equal to ''%2''  in %3';
      SpecialOrderSalesNoErr@1070 : TextConst 'ENU=Special Order Sales No in Purchase Line must be equal to Sales Order No';
      WrongNoOfDocumentsListErr@1027 : TextConst '@@@="%1=Quantity of documents";ENU=There must be %1 documents in the list.';
      PostedSalesDocType@1055 : 'Posted Shipments,Posted Invoices,Posted Return Receipts,Posted Cr. Memos';
      UndoShipmentMsg@1020 : TextConst 'ENU=Do you really want to undo the selected Shipment lines?';
      WrongNoOfRecordsErr@1074 : TextConst '@@@="%1 = Record count";ENU=The list must contain %1 records';

    [Test]
    [HandlerFunctions(PartialReservationPageHandler,HandlePickSelectionPage)]
    PROCEDURE PartialPickWorksheetLineRemainsQtyOutstandingInthePickWorksheetAfterPickCreationWhenQtyOnILEIsEnough@339();
    VAR
      WhseWorksheetName@1001 : Record 7327;
      WhseWorksheetLine@1011 : Record 7326;
      LocationCode@1000 : Code[10];
      QtyResvdOnILE@1019 : Decimal;
      QtyOnInventory@1006 : Decimal;
      QtyOnPO@1002 : Decimal;
    BEGIN
      // [SCENARIO 361128.1] Partial Pick Worksheet Line remains in the Pick Worksheet after Pick creation when Qty on ILE is enough
      Initialize;

      WITH LibraryRandom DO BEGIN
        QtyOnPO := RandDec(100,2);
        QtyResvdOnILE := RandDec(100,2);
        QtyOnInventory := QtyOnPO + QtyResvdOnILE + RandDecInRange(100,200,2);
      END;

      // [GIVEN] Sales Order for Item with Qty = "Q"
      // [GIVEN] Item with Inventory "X", where "X" > "Q"
      // [GIVEN] Purchase Order for Item with Qty = "Y", where "Y" < "Q"
      // [GIVEN] Reserve Purchase Order completely against Sales Order ("Y").
      // [GIVEN] Release Sales Order, Create Warehouse Shipment, Release Warehouse Shipment
      // [GIVEN] Create Pick Worksheet Line for Warehouse Shipment.
      CreatePartialPick(WhseWorksheetName,WhseWorksheetLine,LocationCode,QtyOnPO,QtyResvdOnILE,QtyOnInventory);

      // [WHEN] Crete Pick
      LibraryWarehouse.CreatePickFromPickWorksheet(
        WhseWorksheetLine,WhseWorksheetLine."Line No.",WhseWorksheetLine."Worksheet Template Name",WhseWorksheetLine.Name,
        LocationCode,'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);

      // [THEN] Pick Worksheet Line for Item remains with Qty Outstanding = "Y"
      FindWhseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,LocationCode);
      Assert.AreEqual(QtyOnPO,WhseWorksheetLine."Qty. Outstanding",'!');
    END;

    [Test]
    PROCEDURE CheckRefreshIsNotAllowedIfProdOrderHasReservedCompsWithCalcLinesAndCalcCompsSelected@392();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // [SCENARIO 359388.1] Order Tracking Policy does Reschedule an existing replenishment instead of Cancel & New. CalcLines and CalcComps checkmarks are selected
      Initialize;

      // [GIVEN] Create Component Item, Parent Item, certified Production BOM assigned to Parent Item and Post Positive Adjustment On Component Item and Reserve Production Order Component
      CreateProdOrderWithReservedComponent(ProductionOrder);

      // [WHEN] Refresh Production Order with reserved components whenever CalcLines and CalcComps checkmarks are selected
      ASSERTERROR LibraryManufacturing.RefreshProdOrder(ProductionOrder,TRUE,TRUE,TRUE,TRUE,FALSE);

      // [THEN] Verify that it is not allowed to refresh Production Order with reserved components whenever CalcLines and CalcComps checkmarks are selected
      VerifyCalcReservedCompError;
    END;

    [Test]
    PROCEDURE CheckRefreshIsNotAllowedIfProdOrderHasReservedCompsWithCalcCompsSelected@393();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // [SCENARIO 359388.2] Order Tracking Policy does Reschedule an existing replenishment instead of Cancel & New. CalcComps checkmark is selected
      Initialize;

      // [GIVEN] Create Component Item, Parent Item, certified Production BOM assigned to Parent Item and Post Positive Adjustment On Component Item and Reserve Production Order Component
      CreateProdOrderWithReservedComponent(ProductionOrder);

      // [WHEN] Refresh Production Order with reserved components whenever CalcComps checkmark is selected
      ASSERTERROR LibraryManufacturing.RefreshProdOrder(ProductionOrder,TRUE,FALSE,TRUE,TRUE,FALSE);

      // [THEN] Verify that it is not allowed to refresh Production Order with reserved components whenever CalcComps checkmark is selected
      VerifyCalcReservedCompError;
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE ChangeExpectedReceiptDateOnPurchaseOrderReservedAgainstSalesOrder@3();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      SalesHeader@1005 : Record 36;
      NewExpectedReceiptDate@1004 : Date;
    BEGIN
      // Setup: Create Purchase Order. Create Sales Order and Reserve Quantity.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,'',Item."No.",LibraryRandom.RandDec(10,2),'',FALSE);
      UpdateExpectedReceiptDateOnPurchaseLine(PurchaseLine,WORKDATE);  // Updating Expected Receipt Date on Purchase Line for Reservation on Sales Line.
      CreateSalesOrder(SalesHeader,'',Item."No.",PurchaseLine.Quantity,'',TRUE);  // Reserve as TRUE
      NewExpectedReceiptDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE);  // Must be less than WorkDate.

      // Exercise: Update Expected Receipt Date on Purchase Line.
      UpdateExpectedReceiptDateOnPurchaseLine(PurchaseLine,NewExpectedReceiptDate);

      // Verify: Verify Expected Receipt Date on Purchase Line.
      PurchaseLine.TESTFIELD("Expected Receipt Date",NewExpectedReceiptDate);
    END;

    [Test]
    PROCEDURE PostPurchaseOrderWithJobAndJobTask@1();
    VAR
      Item@1000 : Record 27;
      Bin@1001 : Record 7354;
      JobTask@1003 : Record 1001;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      ItemLedgerEntry@1006 : Record 32;
      WarehouseEntry@1008 : Record 7312;
    BEGIN
      // Setup: Create Bin. Create Job with Job Task. Create Purchase Order. Update Bin Code, Job No. and Job Task No. on Purchase Line.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      CreateJobWithJobTask(JobTask);
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,'',Item."No.",LibraryRandom.RandDec(10,2),LocationSilver.Code,FALSE);
      UpdateBinCodeJobNoAndJobTaskNoOnPurchaseLine(PurchaseLine,JobTask,Bin.Code);

      // Exercise: Post Purchase Order.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);  // Post as Receive and Invoice.

      // Verify: Verify Item Ledger Entry and Warehouse Entry.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Purchase,Item."No.",PurchaseLine.Quantity,LocationSilver.Code,JobTask."Job No.",
        JobTask."Job Task No.");
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::"Negative Adjmt.",Item."No.",-PurchaseLine.Quantity,LocationSilver.Code,JobTask."Job No.",
        JobTask."Job Task No.");
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::"Positive Adjmt.",Item."No.",LocationSilver.Code,Bin.Code,PurchaseLine.Quantity,'');
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::"Negative Adjmt.",Item."No.",LocationSilver.Code,Bin.Code,-PurchaseLine.Quantity,'');
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler)]
    PROCEDURE GetSpecialSalesOrderFromPurchaseOrderWithDifferentShipToCode@338();
    VAR
      PurchaseHeader@1003 : Record 38;
      SalesShipToCode@1001 : Code[20];
      PurchaseShipToCode@1000 : Code[20];
    BEGIN
      // [SCENARIO 360247.1] Ship-to error on multi line purchase order (special order) that is linked to multiple special orders with different "Ship-to Code"
      Initialize;

      // [GIVEN] Create Customer and Ship to Address. Create Sales Order with Special Order. Create Purchase Header with Sell to Customer No. and different Ship-to Code
      CreateSpecialSaleOrderAndPurchaseOrderWithDifferentShipToCode(PurchaseHeader,SalesShipToCode,PurchaseShipToCode);

      // [WHEN] Get Sales Order for Special Order.
      ASSERTERROR LibraryPurchase.GetSpecialOrder(PurchaseHeader);

      // [THEN] Verify Different Ship-to Code error message
      Assert.ExpectedError(STRSUBSTNO(ShipToCodeErr,SalesShipToCode,PurchaseHeader."No.",PurchaseShipToCode));
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler)]
    PROCEDURE GetSpecialSalesOrderFromPurchaseOrderWithShipToCodeBlank@5();
    VAR
      PurchaseHeader@1003 : Record 38;
      SalesHeaderNo@1004 : Code[20];
    BEGIN
      // [SCENARIO 360247.2] Ship-to error on multi line purchase order (special order) that is linked to multiple special orders with blank "Ship-to Code"
      Initialize;

      // [GIVEN] Create Customer and Ship to Address. Create Sales Order with Special Order. Create Purchase Header with Sell to Customer No. and empty Ship-to Code
      CreateSpecialSaleOrderAndPurchaseOrder(PurchaseHeader,SalesHeaderNo);

      // [WHEN] Get Sales Order for Special Order.
      LibraryPurchase.GetSpecialOrder(PurchaseHeader);

      // [THEN] Verify that Purchase Line has correct Sales Orders No
      VerifyPurchLineHasCorrectSalesOrdersNo(PurchaseHeader."No.",SalesHeaderNo);
    END;

    [Test]
    PROCEDURE CalcualteCrossDockOnWarehouseReceiptWithMultipleItems@18();
    BEGIN
      // Setup.
      Initialize;
      CalculateCrossDockOnWarehouseReceiptAndRegisterPutAwayWithMultipleItems(FALSE);  // Register Put Away as FALSE.
    END;

    [Test]
    PROCEDURE RegisterPutAwayAfterCalcualteCrossDockOnWarehouseReceiptWithMultipleItems@68();
    BEGIN
      // Setup.
      Initialize;
      CalculateCrossDockOnWarehouseReceiptAndRegisterPutAwayWithMultipleItems(TRUE);  // Register Put Away as TRUE.
    END;

    LOCAL PROCEDURE CalculateCrossDockOnWarehouseReceiptAndRegisterPutAwayWithMultipleItems@15(RegisterPutAway@1009 : Boolean);
    VAR
      Item@1008 : Record 27;
      Item2@1007 : Record 27;
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1001 : Record 39;
      SalesHeader@1003 : Record 36;
      WarehouseActivityLine@1010 : Record 5767;
      WarehouseEntry@1011 : Record 7312;
      WarehouseActivityHeader@1012 : Record 5766;
      Quantity@1000 : Decimal;
    BEGIN
      // Create Warehouse Receipt from Purchase Order. Create and Release Sales Order.
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);
      CreateWarehouseReceiptFromPurchaseOrderWithMultipleItems(
        PurchaseHeader,PurchaseLine,Item."No.",Quantity,LocationWhite.Code,Item2."No.");
      CreateAndReleaseSalesOrder(SalesHeader,'',Item2."No.",Quantity,LocationWhite.Code);

      // Exercise: Calculate Cross Dock.
      CalculateCrossDock(PurchaseHeader."No.",Item2."No.");

      // Verify: Verify Warehouse Receipt Line.
      VerifyWarehouseReceiptLine(PurchaseHeader."No.",Item."No.",Quantity,0,LocationWhite.Code);  // Value required for test.
      VerifyWarehouseReceiptLine(PurchaseHeader."No.",Item2."No.",Quantity,Quantity,LocationWhite.Code);

      IF RegisterPutAway THEN BEGIN
        // Exercise: Post Warehouse Receipt and Register Put away.
        PostWarehouseReceipt(PurchaseHeader."No.",Item2."No.");
        RegisterWarehouseActivity(
          WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",WarehouseActivityHeader.Type::"Put-away");

        // Verify: Verify Warehouse Entry.
        FilterCrossDockWarehouseEntry(WarehouseEntry,LocationWhite,PurchaseHeader."No.",Item."No.");
        Assert.IsTrue(WarehouseEntry.ISEMPTY,CrossDockWarehouseEntryErr);
        VerifyCrossDockWarehouseEntry(PurchaseHeader."No.",LocationWhite,Item2."No.",Quantity);
      END;
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE InventoryPickFromSalesOrderWithShippingAdviceCompleteError@16();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      WarehouseRequest@1003 : Record 5765;
      SalesLine@1004 : Record 37;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create and Post Item journal Line. Create and Release Sales Order with Shipping Advice as Complete. Create Inventory Pick from Sales Order. Reopen Sales Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      CreateAndPostItemJournalLine(Item."No.",Quantity,LocationBlue.Code,'');
      CreateAndReleaseSalesDocumentWithShippingAdviceAsComplete(
        SalesHeader,SalesHeader."Document Type"::Order,Item."No.",Quantity,LocationBlue.Code);
      LibraryVariableStorage.Enqueue(InventoryPickMsg);  // Enqueue for MessageHandler.
      CreateInventoryActivity(WarehouseRequest."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE);  // Taking True for Pick.
      LibrarySales.ReopenSalesDocument(SalesHeader);

      // Exercise: Adding New Line to the Sales Order.
      ASSERTERROR CreateSalesLine(SalesHeader,SalesLine,Item."No.",Quantity,LocationBlue.Code);

      // Verify: Verify error message.
      Assert.ExpectedError(InventoryPickExistsAndShippingAdviceCompleteErr);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE InventoryPutAwayFromSalesReturnOrderWithShippingAdviceCompleteError@20();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      WarehouseRequest@1003 : Record 5765;
      SalesLine@1004 : Record 37;
    BEGIN
      // Setup: Create and Release Sales Return Order with Shipping Advice as Complete. Create Inventory Put Away from Sales Return Order. Reopen Sales Return Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateAndReleaseSalesDocumentWithShippingAdviceAsComplete(
        SalesHeader,SalesHeader."Document Type"::"Return Order",Item."No.",LibraryRandom.RandDec(10,2),LocationBlue.Code);
      LibraryVariableStorage.Enqueue(InventoryPutAwayMsg);  // Enqueue for MessageHandler.
      CreateInventoryActivity(WarehouseRequest."Source Document"::"Sales Return Order",SalesHeader."No.",TRUE,FALSE);  // Taking True for Put Away.
      LibrarySales.ReopenSalesDocument(SalesHeader);

      // Exercise: Adding New Line to the Sales Return Order.
      ASSERTERROR CreateSalesLine(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2),LocationBlue.Code);

      // Verify: Verify error message.
      Assert.ExpectedError(InventoryPickExistsAndShippingAdviceCompleteErr);
    END;

    [Test]
    PROCEDURE PickFromWarehouseShipmentWithBlankLocation@44();
    BEGIN
      // Setup.
      Initialize;
      RegisterPickAndPostWarehouseShipmentWithBlankLocation(FALSE);  // Post Shipment as FALSE.
    END;

    [Test]
    PROCEDURE PostWarehouseShipmentWithBlankLocation@30();
    BEGIN
      // Setup.
      Initialize;
      RegisterPickAndPostWarehouseShipmentWithBlankLocation(TRUE);  // Post Shipment as TRUE.
    END;

    LOCAL PROCEDURE RegisterPickAndPostWarehouseShipmentWithBlankLocation@45(PostShipment@1008 : Boolean);
    VAR
      Item@1007 : Record 27;
      SalesHeader@1006 : Record 36;
      WarehouseShipmentHeader@1004 : Record 7320;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseActivityHeader@1009 : Record 5766;
      ItemLedgerEntry@1010 : Record 32;
      OldRequireShipment@1002 : Boolean;
      OldRequirePick@1001 : Boolean;
      Quantity@1000 : Decimal;
    BEGIN
      // Update Require Shipment and Require Pick on Warehouse Setup. Create and Post Item Journal.
      OldRequireShipment := UpdateRequireShipmentOnWarehouseSetup(TRUE);
      OldRequirePick := UpdateRequirePickOnWarehouseSetup(TRUE);
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      CreateAndPostItemJournalLine(Item."No.",Quantity,'','');

      // Exercise: Create Pick from Warehouse Shipment.
      CreatePickFromWarehouseShipment(SalesHeader,WarehouseShipmentHeader,Item."No.",Quantity);

      // Verify: Verify Warehouse Activity Line.
      VerifyWarehousePickLine(SalesHeader."No.",Item."No.",'',Quantity);

      IF PostShipment THEN BEGIN
        // Exercise: Register Pick and Post Warehouse Shipment.
        RegisterWarehouseActivity(
          WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityHeader.Type::Pick);
        LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);  // Invoice as FALSE.

        // Verify: Verify Item Ledger Entry.
        VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Purchase,Item."No.",Quantity,'','','');
        VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Sale,Item."No.",-Quantity,'','','');
      END;

      // Tear Down.
      UpdateRequireShipmentOnWarehouseSetup(OldRequireShipment);
      UpdateRequirePickOnWarehouseSetup(OldRequirePick);
    END;

    [Test]
    PROCEDURE PlannedReceiptDateOnPurchaseLineUsingLeadTimeCalculation@10();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1003 : Record 39;
    BEGIN
      // Setup: Create Purchase Header with Lead Time Calculation.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreatePurchaseHeaderWithLeadTimeCalculation(PurchaseHeader);

      // Exercise: Create Purchase Line.
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,Item."No.",LibraryRandom.RandDec(10,2),'',FALSE);  // Use Tracking as FALSE.

      // Verify: Verify Lead Time Calculation and Planned Receipt Date calculated from Lead Time Calculation and Order Date on Purchase Line.
      PurchaseLine.TESTFIELD("Lead Time Calculation",PurchaseHeader."Lead Time Calculation");
      PurchaseLine.TESTFIELD("Planned Receipt Date",CALCDATE(PurchaseHeader."Lead Time Calculation",PurchaseHeader."Order Date"));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ConfirmHandler)]
    PROCEDURE UndoPurchaseReceiptWithAndWithoutLotItemTracking@33();
    VAR
      Item@1000 : Record 27;
      Item2@1008 : Record 27;
      ItemLedgerEntry@1007 : Record 32;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      DequeueVariable@1005 : Variant;
      LotNo@1006 : Code[20];
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create Item with Lot Item Tracking Code. Create and Post Purchase Order with multiple Items and assign Tracking on Single Item.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      CreateItemWithItemTrackingCode(Item2,TRUE,FALSE,LibraryUtility.GetGlobalNoSeriesCode,'');  // True for Lot.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);
      CreateAndPostPurchaseOrderWithMultipleItems(PurchaseHeader,PurchaseLine,Item."No.",Quantity,Item2."No.");
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LotNo := DequeueVariable;

      // Exercise: Undo Purchase Receipt.
      UndoPurchaseReceipt(PurchaseLine."Document No.",Item."No.",Item2."No.");

      // Verify: Verify Receipt Line and Item Ledger Entry.
      VerifyReceiptLineAfterUndo(PurchaseLine."Document No.",Item."No.",Item2."No.",Quantity);
      VerifyItemLedgerEntryForLot(ItemLedgerEntry."Entry Type"::Purchase,Item2."No.",LotNo,Quantity,FALSE);  // Use MoveNext as FALSE.
      VerifyItemLedgerEntryForLot(ItemLedgerEntry."Entry Type"::Purchase,Item2."No.",LotNo,-Quantity,TRUE);  // Use MoveNext as TRUE.
    END;

    [Test]
    PROCEDURE PostItemReclassificationJournalWithUpdatedDescription@36();
    VAR
      Bin@1001 : Record 7354;
      Bin2@1005 : Record 7354;
      Item@1002 : Record 27;
      Quantity@1000 : Decimal;
      Description@1004 : Text[50];
    BEGIN
      // Setup: Create Bin for two Silver Locations. Create and post Item Journal line.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      LibraryWarehouse.CreateBin(Bin2,LocationYellow.Code,LibraryUtility.GenerateGUID,'','');
      CreateItemWithVendorNoAndReorderingPolicy(Item,'',Item."Reordering Policy"::" ");
      CreateAndPostItemJournalLine(Item."No.",Quantity,LocationYellow.Code,Bin2.Code);

      // Exercise.
      Description := CreateAndPostItemReclassificationJournalLine(Bin2,Bin,Item."No.",Quantity);

      // Verify.
      VerifyDescriptionOnWarehouseEntry(Item."No.",Description);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler,MessageHandler,WhseSourceCreateDocumentHandler)]
    PROCEDURE CreateAndRegisterPickFromInternalPickWithMultipleUnitOfMeasureAndLot@32();
    VAR
      Bin@1003 : Record 7354;
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      WarehouseActivityLine@1007 : Record 5767;
      WhseInternalPickHeader@1004 : Record 7333;
      LotNo@1005 : Code[20];
      LotNo2@1006 : Code[20];
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create Item with Lot specific tracking. Update Inventory using Warehouse Journal. Create Pick from Warehouse Internal Pick.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithItemTrackingCode(Item,TRUE,FALSE,LibraryUtility.GetGlobalNoSeriesCode,'');  // True for Lot.
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",LibraryRandom.RandInt(5) + 1);
      FindPickBin(Bin,LocationWhite.Code);
      LotNo := UpdateInventoryUsingWarehouseJournalWithLotItemTracking(Item,Bin,Quantity,Item."Base Unit of Measure");
      LotNo2 := UpdateInventoryUsingWarehouseJournalWithLotItemTracking(Item,Bin,Quantity,ItemUnitOfMeasure.Code);
      Bin.GET(LocationWhite.Code,LocationWhite."To-Production Bin Code");
      CreatePickFromWarehouseInternalPickWithMultipleLines(
        WhseInternalPickHeader,Bin,Item,Quantity,ItemUnitOfMeasure.Code,LotNo,LotNo2);

      // Exercise.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::" ",WhseInternalPickHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // Verify.
      VerifyRegisteredWarehousePickLine(WhseInternalPickHeader."No.",Item."No.",Quantity,Item."Base Unit of Measure",LotNo);
      VerifyRegisteredWarehousePickLine(WhseInternalPickHeader."No.",Item."No.",Quantity,ItemUnitOfMeasure.Code,LotNo2);
    END;

    [Test]
    PROCEDURE CalculatePlanOnRequistionWorkSheetAfterSalesOrderWithCurrency@53();
    BEGIN
      // Setup.
      Initialize;
      CalculatePlanAndCarryOutActionMessageOnRequisitionWorkSheetWithCurrency(FALSE);  // CarryOutActionMessage as FALSE.
    END;

    [Test]
    PROCEDURE PostPurchaseOrderAfterCarryOutActionMessageOnRequisitionWorkSheetWithCurrency@168();
    BEGIN
      // Setup.
      Initialize;
      CalculatePlanAndCarryOutActionMessageOnRequisitionWorkSheetWithCurrency(TRUE);  // CarryOutActionMessage as TRUE.
    END;

    LOCAL PROCEDURE CalculatePlanAndCarryOutActionMessageOnRequisitionWorkSheetWithCurrency@65(CarryOutActionMessage@1002 : Boolean);
    VAR
      Customer@1006 : Record 18;
      Item@1007 : Record 27;
      GeneralPostingSetup@1011 : Record 252;
      PurchaseLine@1009 : Record 39;
      PurchaseHeader@1010 : Record 38;
      RequisitionWkshName@1004 : Record 245;
      SalesHeader@1003 : Record 36;
      Vendor@1016 : Record 23;
      VendorPostingGroup@1001 : Record 93;
      CurrencyFactor@1000 : Decimal;
      DocumentNo@1015 : Code[20];
    BEGIN
      // Create Currency with different exchange rate. Create Sales Order with Currency Code.
      CurrencyFactor := CreateVendorWithCurrencyExchangeRate(Vendor);
      CreateItemWithVendorNoAndReorderingPolicy(Item,Vendor."No.",Item."Reordering Policy"::Order);
      LibrarySales.CreateCustomer(Customer);
      CreateSalesOrder(SalesHeader,Customer."No.",Item."No.",LibraryRandom.RandInt(100),LocationBlue.Code,FALSE);

      // Exercise.
      CalculatePlanForRequisitionWorksheet(
        RequisitionWkshName,Item,CALCDATE('<' + FORMAT(-LibraryRandom.RandInt(5)) + 'Y>',WORKDATE),
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE));  // Values required for StartDate and EndDate.

      // Verify.
      VerifyRequisitionLine(RequisitionWkshName,Item."No.",CurrencyFactor);

      IF CarryOutActionMessage THEN BEGIN
        // Exercise.
        CarryOutActionMessageOnRequisitionWorksheet(RequisitionWkshName,Item."No.");
        VendorPostingGroup.GET(Vendor."Vendor Posting Group");
        GeneralPostingSetup.GET(Vendor."Gen. Bus. Posting Group",Item."Gen. Prod. Posting Group");
        UpdateUnitCostOnPurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.");
        DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);  // Post as Receive and Invoice.

        // Verify.
        VerifyGLEntry(DocumentNo,GeneralPostingSetup."Purch. Account",PurchaseLine."Line Amount" / CurrencyFactor);  // Value required for the test.
        VerifyGLEntry(DocumentNo,VendorPostingGroup."Payables Account",-PurchaseLine."Amount Including VAT" / CurrencyFactor);  // Value required for the test.
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ProductionJournalHandler,ItemTrackingSummaryPageHandler,DateCompressWarehouseEntriesHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE RunDateCompressWhseEntriesAfterPostProductionJournalWithLotNo@17();
    VAR
      Bin@1007 : Record 7354;
      ParentItem@1000 : Record 27;
      ChildItem@1001 : Record 27;
      PurchaseHeader@1006 : Record 38;
      ProductionOrder@1011 : Record 5405;
      Vendor@1003 : Record 23;
      WarehouseEntry@1010 : Record 7312;
      LotNo@1009 : Code[20];
      Quantity@1002 : Decimal;
      QuantityPer@1004 : Decimal;
    BEGIN
      // Setup: Create Item with Production BOM. Create and post Purchase Order as Receive for Child Item with Lot No. Create and refresh Released Production Order. Post the Production Journal.
      Initialize;
      QuantityPer := LibraryRandom.RandInt(10);
      Quantity := Quantity + LibraryRandom.RandInt(10);  // Greater value required for Quantity.
      CreateItemWithProductionBOM(ParentItem,ChildItem,QuantityPer);
      LibraryWarehouse.CreateBin(Bin,LocationYellow.Code,LibraryUtility.GenerateGUID,'','');
      LibraryPurchase.CreateVendor(Vendor);
      LotNo :=
        CreateAndPostPurchaseOrderWithLotItemTracking(
          PurchaseHeader,Vendor."No.",ChildItem."No.",Quantity * QuantityPer,LocationYellow.Code,Bin.Code);
      CreateAndRefreshProductionOrder(ProductionOrder,ParentItem."No.",Quantity,LocationYellow.Code,Bin.Code);
      PostProductionJournal(ProductionOrder);

      // Exercise.
      LibraryVariableStorage.Enqueue(DateCompressConfirmMsg);  // Enqueue for ConfirmHandler.
      LibraryWarehouse.RunDateCompressWhseEntries(ChildItem."No.");

      // Verify.
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::"Positive Adjmt.",ChildItem."No.",LocationYellow.Code,Bin.Code,Quantity * QuantityPer,LotNo);  // Value required for verification.
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::"Negative Adjmt.",ChildItem."No.",LocationYellow.Code,Bin.Code,-Quantity * QuantityPer,LotNo);  // Value required for verification.
    END;

    [Test]
    [HandlerFunctions(GetReceiptLinesPageHandler)]
    PROCEDURE PostPurchaseInvoiceAfterPurchaseOrderOfPartialQuantityFromBlanketOrder@144();
    VAR
      Item@1003 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchaseHeader2@1005 : Record 38;
      PostedDocumentNo@1002 : Code[20];
      Quantity@1004 : Decimal;
    BEGIN
      // Setup: Create Purchase Order with Partial Quantity from Blanket Purchase Order. Post Purchase Order. Get Receipt Line on Purchase Invoice. Create Purchase Order with Remaining Quantity from Blanket Purchase Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      CreatePurchaseOrderFromBlanketPurchaseOrderWithPartialQuantity(PurchaseHeader,Item."No.",Quantity);
      PostPurchaseOrder(PurchaseHeader."Buy-from Vendor No.");
      GetReceiptLineOnPurchaseInvoice(PurchaseHeader2,PurchaseHeader."Buy-from Vendor No.");
      LibraryPurchase.BlanketPurchaseOrderMakeOrder(PurchaseHeader);

      // Exercise: Post Purchase Invoice.
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader2,FALSE,FALSE);

      // Verify: Verify Purchase Invoice Line.
      VerifyPurchaseInvoiceLine(PostedDocumentNo,Item."No.",Quantity / 2);  // Calculated Value Required.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE CalculatePlanOnRequisitionWorksheetWithMultiplePurchaseOrders@142();
    BEGIN
      // Setup.
      Initialize;
      CalculatePlanOnRequisitionWorksheetAndRegisterWarehouseActivity(FALSE,FALSE,FALSE);  // Register Put Away, Register Pick And Post Shipment, Sales Order as FALSE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE RegisterWarehousePutAwayAfterCalculatePlanWithMultiplePurchaseOrders@140();
    BEGIN
      // Setup.
      Initialize;
      CalculatePlanOnRequisitionWorksheetAndRegisterWarehouseActivity(TRUE,FALSE,FALSE);  // Register Pick And Post Shipment, Sales Order as FALSE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE RegisterWarehousePickAndPostWarehouseShipmentAfterCalculatePlanWithMultiplePurchaseOrders@139();
    BEGIN
      // Setup.
      Initialize;
      CalculatePlanOnRequisitionWorksheetAndRegisterWarehouseActivity(TRUE,TRUE,FALSE);  // Sales Order as FALSE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE RegisterWarehousePickAndPostWarehouseShipmentOfRemainingQuantity@138();
    BEGIN
      // Setup.
      Initialize;
      CalculatePlanOnRequisitionWorksheetAndRegisterWarehouseActivity(TRUE,TRUE,TRUE);  // Register Put Away, Register Pick And Post Shipment, Sales Order as TRUE.
    END;

    LOCAL PROCEDURE CalculatePlanOnRequisitionWorksheetAndRegisterWarehouseActivity@136(RegisterPutAway@1016 : Boolean;RegisterPickAndPostShipment@1017 : Boolean;SalesOrder@1018 : Boolean);
    VAR
      Item@1002 : Record 27;
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      PurchaseHeader@1008 : Record 38;
      PurchaseLine@1009 : Record 39;
      PurchaseHeader2@1012 : Record 38;
      PurchaseLine2@1013 : Record 39;
      ReservationEntry@1015 : Record 337;
      SalesHeader2@1019 : Record 36;
      SalesLine2@1020 : Record 37;
      ItemLedgerEntry@1021 : Record 32;
      RequisitionWkshName@1010 : Record 245;
      ShipmentDate@1005 : Date;
      LotNo@1011 : Code[20];
      LotNo2@1014 : Code[20];
      Quantity@1000 : Decimal;
      Quantity2@1001 : Decimal;
    BEGIN
      // Create Lot for Lot Item. Create Sales Order and Update Shipment Date. Create Multiple Purchase Orders with Lot Item Tracking and Update Planning Flexibility on Purchase Line.
      Quantity := LibraryRandom.RandInt(100) + 100;  // Large value Required.
      Quantity2 := LibraryRandom.RandInt(100) + 100;  // Large value Required.
      CreateLotForLotItem(Item);
      ShipmentDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      CreateAndReleaseSalesOrderWithShipmentDate(
        SalesHeader,SalesLine,'',ShipmentDate,Item."No.",Quantity + (Quantity2 / 2),LocationWhite.Code);  // Calculated Value Required.
      LotNo :=
        CreateAndReleasePurchaseOrderWithLotTrackingAndNonePlanningFlexibility(
          PurchaseHeader,PurchaseLine,'',Item."No.",Quantity,LocationWhite.Code);
      LotNo2 :=
        CreateAndReleasePurchaseOrderWithLotTrackingAndNonePlanningFlexibility(
          PurchaseHeader2,PurchaseLine2,PurchaseHeader."Buy-from Vendor No.",Item."No.",
          Quantity2 + LibraryRandom.RandInt(100),LocationWhite.Code);

      // Exercise: Calculate Plan for Requisition Worksheet.
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item,WORKDATE,ShipmentDate);

      // Verify: Verify Reservation Entry.
      VerifyReservationEntry(
        ReservationEntry."Reservation Status"::Tracking,Item."No.",DATABASE::"Sales Line",LocationWhite.Code,'',
        -PurchaseLine.Quantity,FALSE);  // Use MoveNext as FALSE.
      VerifyReservationEntry(
        ReservationEntry."Reservation Status"::Tracking,Item."No.",DATABASE::"Sales Line",LocationWhite.Code,'',
        PurchaseLine.Quantity - SalesLine.Quantity,TRUE);  // Use MoveNext as TRUE and Calculated Value Required.
      VerifyReservationEntry(
        ReservationEntry."Reservation Status"::Tracking,Item."No.",DATABASE::"Purchase Line",LocationWhite.Code,LotNo,
        PurchaseLine.Quantity,FALSE);  // Use MoveNext as FALSE.
      VerifyReservationEntry(
        ReservationEntry."Reservation Status"::Tracking,Item."No.",DATABASE::"Purchase Line",LocationWhite.Code,LotNo2,
        SalesLine.Quantity - PurchaseLine.Quantity,TRUE);  // Use MoveNext as TRUE and Calculated Value Required.
      VerifyReservationEntry(
        ReservationEntry."Reservation Status"::Surplus,Item."No.",DATABASE::"Purchase Line",LocationWhite.Code,LotNo2,
        PurchaseLine2.Quantity - (SalesLine.Quantity - PurchaseLine.Quantity),FALSE);  // Use MoveNext as FALSE Calculated Value Required.

      IF RegisterPutAway THEN BEGIN
        // Exercise: Register Put away.
        PostWarehouseReceiptAndRegisterPutAway(PurchaseHeader2,Item."No.");

        // Verify: Verify Reservation Entry.
        VerifyReservationEntry(
          ReservationEntry."Reservation Status"::Tracking,Item."No.",DATABASE::"Item Ledger Entry",LocationWhite.Code,LotNo2,
          SalesLine.Quantity - PurchaseLine.Quantity,FALSE);  // Use MoveNext as FALSE and Calculated Value Required.
      END;

      IF RegisterPickAndPostShipment THEN BEGIN
        // Exercise: Register Pick and Post Warehouse Shipment.
        RegisterWarehousePickAndPostWarehouseShipment(SalesHeader,LotNo2);

        // Verify: Verify Reservation Entry.
        FilterReservationEntry(
          ReservationEntry,ReservationEntry."Reservation Status"::Tracking,Item."No.",DATABASE::"Item Ledger Entry",
          LocationWhite.Code);
        Assert.IsTrue(ReservationEntry.ISEMPTY,ReservationEntryForItemLedgerEntryErr);
      END;

      IF SalesOrder THEN BEGIN
        // Exercise: Create and Release Sales Order with Remaining Quantity. Register Pick and Post Warehouse Shipment.
        CreateAndReleaseSalesOrderWithShipmentDate(
          SalesHeader2,SalesLine2,SalesHeader."Sell-to Customer No.",WORKDATE,Item."No.",
          PurchaseLine2.Quantity - (SalesLine.Quantity - PurchaseLine.Quantity),LocationWhite.Code);  // Calculated Value Required.
        RegisterWarehousePickAndPostWarehouseShipment(SalesHeader2,LotNo2);

        // Verify: Item Ledger Entry.
        VerifyItemLedgerEntryForLot(ItemLedgerEntry."Entry Type"::Sale,Item."No.",LotNo2,-SalesLine.Quantity,FALSE);  // Use MoveNext as FALSE.
        VerifyItemLedgerEntryForLot(
          ItemLedgerEntry."Entry Type"::Sale,Item."No.",LotNo2,SalesLine.Quantity - PurchaseLine2.Quantity,TRUE);  // Use MoveNext as TRUE and Calculated Value Required.
      END;
    END;

    [Test]
    PROCEDURE PostSalesOrderWithNegativeLineAndApplyFromItemEntry@134();
    BEGIN
      // Setup.
      Initialize;
      PostSalesOrderWithNegativeLineAndGetPostedDocumentLinesOnSalesReturnOrder(FALSE);  // Post Sales Return Order as FALSE.
    END;

    [Test]
    [HandlerFunctions(PostedSalesDocumentLinesPageHandler)]
    PROCEDURE GetPostedDocumentLinesToReverseOnSalesReturnOrder@133();
    BEGIN
      // Setup.
      Initialize;
      PostSalesOrderWithNegativeLineAndGetPostedDocumentLinesOnSalesReturnOrder(TRUE);  // Post Sales Return Order as TRUE.
    END;

    LOCAL PROCEDURE PostSalesOrderWithNegativeLineAndGetPostedDocumentLinesOnSalesReturnOrder@132(PostSalesReturnOrder@1010 : Boolean);
    VAR
      Item@1009 : Record 27;
      SalesHeader@1008 : Record 36;
      SalesLine@1006 : Record 37;
      ItemLedgerEntry@1005 : Record 32;
      OldExactCostReversingMandatory@1004 : Boolean;
      PostedDocumentNo@1003 : Code[20];
      PostedDocumentNo2@1002 : Code[20];
      PostedDocumentNo3@1001 : Code[20];
      Quantity@1000 : Decimal;
    BEGIN
      // Update Exact Cost Reversing Mandatory On Sales and Receivable Setup. Create and Post Sales Order. Reopen Sales Order. Add Negative Sales Line and Apply from Item Entry.
      OldExactCostReversingMandatory := UpdateExactCostReversingMandatoryOnSalesReceivableSetup(TRUE);
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      PostedDocumentNo := CreateAndPostSalesOrder(SalesHeader,Item."No.",Quantity,LocationRed.Code);
      LibrarySales.ReopenSalesDocument(SalesHeader);
      CreateNegativeSalesLineAndApplyFromItemEntry(SalesHeader,SalesLine,Item."No.",-Quantity,LocationRed.Code,PostedDocumentNo);

      // Exercise: Post Sales Order.
      PostedDocumentNo2 := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);  // Ship as TRUE.

      // Verify: Verify Item Ledger Entry.
      VerifyItemLedgerEntryForPostedDocument(
        ItemLedgerEntry."Document Type"::"Sales Shipment",ItemLedgerEntry."Entry Type"::Sale,PostedDocumentNo,Item."No.",-Quantity,
        -Quantity);
      VerifyItemLedgerEntryForPostedDocument(
        ItemLedgerEntry."Document Type"::"Sales Shipment",ItemLedgerEntry."Entry Type"::Sale,PostedDocumentNo2,Item."No.",Quantity,
        Quantity);

      IF PostSalesReturnOrder THEN BEGIN
        // Exercise: Create and Post Sales Return Order with Get Posted Document Lines to Reserve.
        PostedDocumentNo3 := CreateAndPostSalesReturnOrderWithGetPostedDocumentLinesToReverse(SalesHeader."Sell-to Customer No.");

        // Verify: Verify Item Ledger Entry.
        VerifyItemLedgerEntryForPostedDocument(
          ItemLedgerEntry."Document Type"::"Sales Shipment",ItemLedgerEntry."Entry Type"::Sale,PostedDocumentNo,Item."No.",-Quantity,
          -Quantity);
        VerifyItemLedgerEntryForPostedDocument(
          ItemLedgerEntry."Document Type"::"Sales Shipment",ItemLedgerEntry."Entry Type"::Sale,PostedDocumentNo2,Item."No.",0,
          Quantity);  // Value required for test
        VerifyItemLedgerEntryForPostedDocument(
          ItemLedgerEntry."Document Type"::"Sales Return Receipt",ItemLedgerEntry."Entry Type"::Sale,PostedDocumentNo3,Item."No.",0,
          -Quantity);  // Value required for test.
      END;

      // Tear Down.
      UpdateExactCostReversingMandatoryOnSalesReceivableSetup(OldExactCostReversingMandatory);
    END;

    [Test]
    PROCEDURE PostPurchaseOrderWithNegativeLineAndApplyToItemEntry@131();
    BEGIN
      // Setup.
      Initialize;
      PostPurchaseOrderWithNegativeLineAndGetPostedDocumentLinesOnPurchaseReturnOrder(FALSE);  // Post Purchase Return Order as FALSE.
    END;

    [Test]
    [HandlerFunctions(PostedPurchaseDocumentLinesPageHandler)]
    PROCEDURE GetPostedDocumentLinesToReverseOnPurchaseReturnOrder@130();
    BEGIN
      // Setup.
      Initialize;
      PostPurchaseOrderWithNegativeLineAndGetPostedDocumentLinesOnPurchaseReturnOrder(TRUE);  // Post Purchase Return Order as TRUE.
    END;

    LOCAL PROCEDURE PostPurchaseOrderWithNegativeLineAndGetPostedDocumentLinesOnPurchaseReturnOrder@128(PostPurchaseReturnOrder@1010 : Boolean);
    VAR
      Item@1009 : Record 27;
      PurchaseHeader@1008 : Record 38;
      PurchaseLine@1007 : Record 39;
      ItemLedgerEntry@1005 : Record 32;
      OldExactCostReversingMandatory@1004 : Boolean;
      PostedDocumentNo@1003 : Code[20];
      PostedDocumentNo2@1002 : Code[20];
      PostedDocumentNo3@1001 : Code[20];
      Quantity@1000 : Decimal;
    BEGIN
      // Update Exact Cost Reversing Mandatory On Purchase and Payable Setup. Create and Post Purchase Order. Reopen Purchase Order. Add Negative Purchase Line and Apply to Item Entry.
      OldExactCostReversingMandatory := UpdateExactCostReversingMandatoryOnPurchaseSetup(TRUE);
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      PostedDocumentNo := CreateAndPostPurchaseOrder(PurchaseHeader,Item."No.",Quantity,LocationRed.Code);
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);
      CreateNegativePurchaseLineAndApplyToItemEntry(
        PurchaseHeader,PurchaseLine,Item."No.",-Quantity,LocationRed.Code,PostedDocumentNo);

      // Exercise: Post Purchase Order.
      PostedDocumentNo2 := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Receive as TRUE.

      // Verify: Verify Item Ledger Entry.
      VerifyItemLedgerEntryForPostedDocument(
        ItemLedgerEntry."Document Type"::"Purchase Receipt",ItemLedgerEntry."Entry Type"::Purchase,PostedDocumentNo,Item."No.",0,
        Quantity);
      VerifyItemLedgerEntryForPostedDocument(
        ItemLedgerEntry."Document Type"::"Purchase Receipt",ItemLedgerEntry."Entry Type"::Purchase,PostedDocumentNo2,Item."No.",0,
        -Quantity);

      IF PostPurchaseReturnOrder THEN BEGIN
        // Exercise: Post Purchase Return Order with Get Posted Document Lines to Reserve.
        PostedDocumentNo3 := CreateAndPostPurchaseReturnOrderWithGetPostedDocumentLinesToRevere(PurchaseHeader."Buy-from Vendor No.");

        // Verify: Verify Item Ledger Entry.
        VerifyItemLedgerEntryForPostedDocument(
          ItemLedgerEntry."Document Type"::"Purchase Receipt",ItemLedgerEntry."Entry Type"::Purchase,PostedDocumentNo,Item."No.",0,
          Quantity);
        VerifyItemLedgerEntryForPostedDocument(
          ItemLedgerEntry."Document Type"::"Purchase Receipt",ItemLedgerEntry."Entry Type"::Purchase,PostedDocumentNo2,Item."No.",0,
          -Quantity);
        VerifyItemLedgerEntryForPostedDocument(
          ItemLedgerEntry."Document Type"::"Purchase Return Shipment",ItemLedgerEntry."Entry Type"::Purchase,PostedDocumentNo3,
          Item."No.",Quantity,Quantity);
      END;

      // Tear Down.
      UpdateExactCostReversingMandatoryOnPurchaseSetup(OldExactCostReversingMandatory);
    END;

    [Test]
    PROCEDURE PickFromPickWorksheetForMultipleItemsWithGetWarehouseDocuments@122();
    VAR
      Item@1001 : Record 27;
      Item2@1002 : Record 27;
      Bin@1003 : Record 7354;
      SalesHeader@1004 : Record 36;
      WarehouseShipmentHeader@1005 : Record 7320;
      SalesHeader2@1006 : Record 36;
      WarehouseShipmentHeader2@1007 : Record 7320;
      WarehouseEntry@1009 : Record 7312;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Multiple Items. Create and Release Warehouse Shipment for both Items.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);
      FindPickBin(Bin,LocationWhite.Code);
      CreateAndReleaseWarehouseShipmentFromSalesOrder(SalesHeader,WarehouseShipmentHeader,Item,Bin,Quantity);
      CreateAndReleaseWarehouseShipmentFromSalesOrder(SalesHeader2,WarehouseShipmentHeader2,Item2,Bin,Quantity);

      // Exercise.
      CreateAndRegisterPickUsingPickWorksheet(
        LocationWhite.Code,WarehouseShipmentHeader."No.",WarehouseShipmentHeader2."No.",Item."No.",Item2."No.",SalesHeader."No.");

      // Verify.
      VerifyWarehouseEntry(WarehouseEntry."Entry Type"::Movement,Item."No.",LocationWhite.Code,Bin.Code,-Quantity,'');
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::Movement,Item."No.",LocationWhite.Code,LocationWhite."Shipment Bin Code",Quantity,'');
      VerifyWarehouseEntry(WarehouseEntry."Entry Type"::Movement,Item2."No.",LocationWhite.Code,Bin.Code,-Quantity,'');
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::Movement,Item2."No.",LocationWhite.Code,LocationWhite."Shipment Bin Code",Quantity,'');
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE AvailableQuantityToPickOnPickWorksheetAfterRegisterPutAwayWithReservation@70();
    BEGIN
      // Setup.
      Initialize;
      AvailableQuantityToPickOnPickWorksheetAfterRegisterPutAwayAndPick(FALSE);  // Register Pick From Warehouse Shipment as FALSE.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE AvailableQuantityToPickOnPickWorksheetAfterRegisterPickWithReservation@166();
    BEGIN
      // Setup.
      Initialize;
      AvailableQuantityToPickOnPickWorksheetAfterRegisterPutAwayAndPick(TRUE);  // Register Pick From Warehouse Shipment as TRUE.
    END;

    LOCAL PROCEDURE AvailableQuantityToPickOnPickWorksheetAfterRegisterPutAwayAndPick@54(RegisterPickFromWarehouseShipment@1012 : Boolean);
    VAR
      Item@1011 : Record 27;
      SalesHeader@1007 : Record 36;
      WhseWorksheetName@1003 : Record 7327;
      Quantity@1001 : Decimal;
      Quantity2@1000 : Decimal;
      Quantity3@1005 : Decimal;
    BEGIN
      // create and Register Put Away from Warehouse Receipt using Sales Order.
      Quantity := LibraryRandom.RandInt(100);
      Quantity2 := Quantity + LibraryRandom.RandInt(100);
      Quantity3 := (Quantity + Quantity2) * 2;  // Large value Required for Purchase Order and greater than Sales Order Quantity.
      LibraryInventory.CreateItem(Item);
      CreateAndRegisterPutAwayFromWarehouseReceiptUsingPurchaseOrder(Item."No.",Quantity3,LocationGreen.Code);

      // Exercise.
      CreatePickWorksheetLineUsingSalesOrderWithMultipleLinesAndReservation(
        SalesHeader,WhseWorksheetName,Item."No.",Quantity,LocationGreen.Code,Quantity2);

      // Verify.
      VerifyPickWorksheetLine(WhseWorksheetName,Item."No.",Quantity,Quantity3 - Quantity2,FALSE);  // Use MoveNext as FALSE and Calculated Value Required.
      VerifyPickWorksheetLine(WhseWorksheetName,Item."No.",Quantity2,Quantity3 - Quantity,TRUE);  // Use MoveNext as TRUE and Calculated Value Required.

      IF RegisterPickFromWarehouseShipment THEN BEGIN
        // Exercise.
        CreateAndRegisterPickFromWarehouseShipmentUsingSalesOrder(
          SalesHeader."Sell-to Customer No.",Item."No.",Quantity3 - Quantity2 - Quantity,LocationGreen.Code);  // Calculated Value Required.

        // Verify.
        VerifyPickWorksheetLine(WhseWorksheetName,Item."No.",Quantity,Quantity,FALSE);  // Use MoveNext as FALSE.
        VerifyPickWorksheetLine(WhseWorksheetName,Item."No.",Quantity2,Quantity2,TRUE);  // Use MoveNext as TRUE.
      END;
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE AvailableQuantityToPickOnPickWorksheetBeforeRegisterPutAwayWithReservation@185();
    BEGIN
      // Setup.
      Initialize;
      AvailableQuantityToPickOnPickWorksheetBeforeRegisterPutAwayAndAfterRegisterPick(FALSE);  // Register Pick From Warehouse Shipment as FALSE.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE AvailableQuantityToPickOnPickWorksheetBeforeRegisterPutAwayAndAfterRegisterPickWithReservation@182();
    BEGIN
      // Setup.
      Initialize;
      AvailableQuantityToPickOnPickWorksheetBeforeRegisterPutAwayAndAfterRegisterPick(TRUE);  // Register Pick From Warehouse Shipment as TRUE.
    END;

    LOCAL PROCEDURE AvailableQuantityToPickOnPickWorksheetBeforeRegisterPutAwayAndAfterRegisterPick@181(RegisterPickFromWarehouseShipment@1003 : Boolean);
    VAR
      Item@1007 : Record 27;
      PurchaseHeader@1005 : Record 38;
      SalesHeader@1004 : Record 36;
      WhseWorksheetName@1002 : Record 7327;
      Quantity@1001 : Decimal;
      Quantity2@1000 : Decimal;
      Quantity3@1011 : Decimal;
    BEGIN
      // Create and Post Warehouse Receipt from Purchase Order.
      Quantity := LibraryRandom.RandInt(100);
      Quantity2 := Quantity + LibraryRandom.RandInt(100);
      Quantity3 := (Quantity + Quantity2) * 2 ;  // Large value Required for Purchase Order and greater than Sales Order Quantity.
      LibraryInventory.CreateItem(Item);
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,Item."No.",Quantity3,LocationGreen.Code);

      // Exercise.
      CreatePickWorksheetLineUsingSalesOrderWithMultipleLinesAndReservation(
        SalesHeader,WhseWorksheetName,Item."No.",Quantity,LocationGreen.Code,Quantity2);

      // Verify.
      VerifyPickWorksheetLine(WhseWorksheetName,Item."No.",Quantity,Quantity,FALSE);  // Use MoveNext as FALSE.
      VerifyPickWorksheetLine(WhseWorksheetName,Item."No.",Quantity2,Quantity2,TRUE);  // Use MoveNext as TRUE.

      IF RegisterPickFromWarehouseShipment THEN BEGIN
        // Exercise.
        CreateAndRegisterPickFromWarehouseShipmentUsingSalesOrder(
          SalesHeader."Sell-to Customer No.",Item."No.",Quantity3 - Quantity2 - Quantity,LocationGreen.Code);  // Calculated Value Required.

        // Verify.
        VerifyPickWorksheetLine(WhseWorksheetName,Item."No.",Quantity,Quantity3 - Quantity2,FALSE);  // Use MoveNext as FALSE and Calculated Value Required.
        VerifyPickWorksheetLine(WhseWorksheetName,Item."No.",Quantity2,Quantity3 - Quantity,TRUE);  // Use MoveNext as TRUE and Calculated Value Required.
      END;
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE AvailableQuantityToPickOnPickWorksheetAfterRegisterPartialPutAwayWithReservation@190();
    BEGIN
      // Setup.
      Initialize;
      AvailableQuantityToPickOnPickWorksheetAfterRegisterPartialPutAwayAndRegisterPick(FALSE);  // Register Pick From Warehouse Shipment as FALSE.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE AvailableQuantityToPickOnPickWorksheetAfterRegisterPartialPutAwayAndRegisterPickWithReservation@189();
    BEGIN
      // Setup.
      Initialize;
      AvailableQuantityToPickOnPickWorksheetAfterRegisterPartialPutAwayAndRegisterPick(TRUE);  // Register Pick From Warehouse Shipment as TRUE.
    END;

    LOCAL PROCEDURE AvailableQuantityToPickOnPickWorksheetAfterRegisterPartialPutAwayAndRegisterPick@187(RegisterPickFromWarehouseShipment@1004 : Boolean);
    VAR
      Item@1003 : Record 27;
      SalesHeader@1007 : Record 36;
      WhseWorksheetName@1009 : Record 7327;
      Quantity@1002 : Decimal;
      Quantity2@1001 : Decimal;
      Quantity3@1000 : Decimal;
    BEGIN
      // create and register Partial Put Away from Warehouse Receipt using Purchase Order.
      Quantity := LibraryRandom.RandInt(100);
      Quantity2 := Quantity + LibraryRandom.RandInt(100);
      Quantity3 := (Quantity + Quantity2) * 2;  // Large value Required for Purchase Order and greater than Sales Order Quantity.
      LibraryInventory.CreateItem(Item);
      CreateAndRegisterPartialPutAwayFromWarehouseReceiptUsingPurchaseOrder(
        Item."No.",Quantity3,LocationGreen.Code,Quantity + Quantity2);  // Calculated Value Required.

      // Exercise.
      CreatePickWorksheetLineUsingSalesOrderWithMultipleLinesAndReservation(
        SalesHeader,WhseWorksheetName,Item."No.",Quantity,LocationGreen.Code,Quantity2);

      // Verify.
      VerifyPickWorksheetLine(WhseWorksheetName,Item."No.",Quantity,Quantity3 - Quantity2,FALSE);  // Use MoveNext as FALSE and Calculated Value Required.
      VerifyPickWorksheetLine(WhseWorksheetName,Item."No.",Quantity2,Quantity3 - Quantity,TRUE);  // Use MoveNext as TRUE and Calculated Value Required.

      IF RegisterPickFromWarehouseShipment THEN BEGIN
        // Exercise.
        CreateAndRegisterPickFromWarehouseShipmentUsingSalesOrder(
          SalesHeader."Sell-to Customer No.",Item."No.",Quantity2,LocationGreen.Code);

        // Verify: Verify Pick Worksheet Line.
        VerifyPickWorksheetLine(WhseWorksheetName,Item."No.",Quantity,Quantity + Quantity,FALSE);  // Use MoveNext as FALSE and Calculated Value Required.
        VerifyPickWorksheetLine(WhseWorksheetName,Item."No.",Quantity2,Quantity2 + Quantity,TRUE);  // Use MoveNext as TRUE and Calculated Value Required.
      END;
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler)]
    PROCEDURE RegisterWarehouseJournalLineWithLotAndMultipleBins@192();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseShipmentAfterRegisterPickFromSalesOrderWithLotAndMultipleBins(FALSE,FALSE,FALSE);  // CalculateWhseAdjustment, RegisterPick and PostWhseShipment as FALSE.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler)]
    PROCEDURE CalculateWhseAdjustmentAndPostItemJournalLineWithLotAndMultipleBins@191();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseShipmentAfterRegisterPickFromSalesOrderWithLotAndMultipleBins(TRUE,FALSE,FALSE);  // CalculateWhseAdjustment as TRUE. RegisterPick and PostWhseShipment as FALSE.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler,ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE CreateAndRegisterPickFromSalesOrderWithLotAndMultipleBins@176();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseShipmentAfterRegisterPickFromSalesOrderWithLotAndMultipleBins(TRUE,TRUE,FALSE);  // CalculateWhseAdjustment and RegisterPick as TRUE. PostWhseShipment as FALSE.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler,ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostWarehouseShipmentOfSalesOrderWithLotAndMultipleBins@102();
    BEGIN
      // Setup.
      Initialize;
      PostWarehouseShipmentAfterRegisterPickFromSalesOrderWithLotAndMultipleBins(TRUE,TRUE,TRUE);  // CalculateWhseAdjustment, RegisterPick and PostWhseShipment as TRUE.
    END;

    LOCAL PROCEDURE PostWarehouseShipmentAfterRegisterPickFromSalesOrderWithLotAndMultipleBins@71(CalculateWhseAdjustment@1009 : Boolean;RegisterPick@1010 : Boolean;PostWhseShipment@1011 : Boolean);
    VAR
      Bin@1002 : Record 7354;
      Bin2@1005 : Record 7354;
      Item@1000 : Record 27;
      SalesHeader@1013 : Record 36;
      WarehouseEntry@1006 : Record 7312;
      WarehouseShipmentHeader@1012 : Record 7320;
      WarehouseShipmentLine@1008 : Record 7321;
      LotNo@1004 : Code[20];
      ItemTrackingMode@1001 : 'AssignLotNo,SelectLotNo';
      Quantity@1003 : Decimal;
      Quantity2@1007 : Decimal;
    BEGIN
      // Create Item with Lot specific Tracking. Create and register Warehouse Journal line with Lot No.
      Quantity := LibraryRandom.RandDec(10,2);
      Quantity2 := Quantity + LibraryRandom.RandDec(10,2);  // Greater value required for Quantity.
      LotNo := CreateItemAndRegisterWarehouseJournalLineWithItemTracking(Bin,Item,Quantity,LocationWhite.Code);
      LibraryWarehouse.CreateBin(Bin2,LocationWhite.Code,LibraryUtility.GenerateGUID,Bin."Zone Code",Bin."Bin Type Code");
      LibraryVariableStorage.Enqueue(ItemTrackingMode::SelectLotNo);  // Enqueue for WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(LotNo);  // Enqueue for WhseItemTrackingLinesHandler.

      // Exercise.
      CreateAndRegisterWarehouseJournalLine(Bin2,Item,Quantity2,Item."Base Unit of Measure",TRUE);  // TRUE for Tracking.

      // Verify.
      VerifyWarehouseEntry(WarehouseEntry."Entry Type"::"Positive Adjmt.",Item."No.",LocationWhite.Code,Bin.Code,Quantity,LotNo);
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::"Negative Adjmt.",Item."No.",LocationWhite.Code,LocationWhite."Adjustment Bin Code",-Quantity,
        LotNo);
      VerifyWarehouseEntry(WarehouseEntry."Entry Type"::"Positive Adjmt.",Item."No.",LocationWhite.Code,Bin2.Code,Quantity2,LotNo);
      VerifyWarehouseEntry(
        WarehouseEntry."Entry Type"::"Negative Adjmt.",Item."No.",LocationWhite.Code,LocationWhite."Adjustment Bin Code",-Quantity2,
        LotNo);

      IF CalculateWhseAdjustment THEN BEGIN
        // Exercise.
        CalculateWarehouseAdjustmentAndPostItemJournalLine(Item);

        // Verify.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::"Positive Adjmt.",Item."No.",LocationWhite.Code,LocationWhite."Adjustment Bin Code",
          Quantity + Quantity2,LotNo);  // Value required for verification.
      END;

      IF RegisterPick THEN BEGIN
        // Exercise.
        CreateAndRegisterPickFromSalesOrderWithLotItemTracking(SalesHeader,Item."No.",Quantity + Quantity2,LocationWhite.Code);  // Value required for test.

        // Verify.
        VerifyWarehouseEntry(WarehouseEntry."Entry Type"::Movement,Item."No.",LocationWhite.Code,Bin.Code,-Quantity,LotNo);
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,Item."No.",LocationWhite.Code,LocationWhite."Shipment Bin Code",Quantity,LotNo);
        VerifyWarehouseEntry(WarehouseEntry."Entry Type"::Movement,Item."No.",LocationWhite.Code,Bin2.Code,-Quantity2,LotNo);
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::Movement,Item."No.",LocationWhite.Code,LocationWhite."Shipment Bin Code",Quantity2,LotNo);
      END;

      IF PostWhseShipment THEN BEGIN
        // Exercise.
        GetWarehouseShipmentHeader(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
        PostWarehouseShipment(
          WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",Quantity + Quantity2,TRUE); // Value required for test.

        // Verify.
        VerifyWarehouseEntry(
          WarehouseEntry."Entry Type"::"Negative Adjmt.",Item."No.",LocationWhite.Code,LocationWhite."Shipment Bin Code",
          -(Quantity + Quantity2),LotNo);  // Value required for verification.
      END;
    END;

    [Test]
    PROCEDURE UseAsInTransitBecomesUneditableAfterCreateAndReleaseTransferOrder@200();
    BEGIN
      // Setup.
      Initialize;
      CreateAndPostTransferOrderAfterPostPurchaseOrderWithLocationInTransit(FALSE);  // PostTransferOrder as FALSE.
    END;

    [Test]
    PROCEDURE UseAsInTransitBecomesEditableAfterPostTransferOrderAsReceive@199();
    BEGIN
      // Setup.
      Initialize;
      CreateAndPostTransferOrderAfterPostPurchaseOrderWithLocationInTransit(TRUE);  // PostTransferOrder as TRUE.
    END;

    LOCAL PROCEDURE CreateAndPostTransferOrderAfterPostPurchaseOrderWithLocationInTransit@211(PostTransferOrder@1000 : Boolean);
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      TransferHeader@1005 : Record 5740;
    BEGIN
      // Create and Post Purchase Order as Receive and Invoice.
      CreateItemWithVendorNoAndReorderingPolicy(Item,'',Item."Reordering Policy"::" ");
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,'',Item."No.",LibraryRandom.RandDec(10,2),LocationBlue.Code,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);  // Post as RECEIVE and INVOICE.

      // Exercise.
      CreateAndReleaseTransferOrder(TransferHeader,LocationBlue.Code,LocationRed.Code,Item."No.",PurchaseLine.Quantity);

      // Verify.
      VerifyEditablePropertyOfUseAsInTransitFieldOnLocationCard(LocationInTransit.Code,FALSE);

      IF PostTransferOrder THEN BEGIN
        // Exercise.
        PostAllTransferOrdersWithLocationInTransit;  // Posting of All Transfers Orders is required for verification of this test.

        // Verify.
        VerifyEditablePropertyOfUseAsInTransitFieldOnLocationCard(LocationInTransit.Code,TRUE);  // Editable as TRUE.
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,EnterQuantityToCreatePageHandler,SalesListPageHandler,ConfirmHandler)]
    PROCEDURE ErrorOnPostingPurchaseOrderForDifferentSerialNoOfSalesOrderWithDropShipment@226();
    VAR
      PurchaseHeader@1006 : Record 38;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      SerialNo@1010 : Variant;
    BEGIN
      // Setup: Create Purchase Order with Get Drop Shipment from Sales Order with Serial Item Tracking. Update Quantity to Invoice on Purchase and Sales Line and Post Sales Order.
      Initialize;
      CreateSalesOrderWithDropShipmentAndSerialItemTracking(SalesHeader,SalesLine);
      LibraryVariableStorage.Dequeue(SerialNo);
      CreatePurchaseOrderWithGetDropShipment(PurchaseHeader,SalesHeader."Sell-to Customer No.");
      UpdateQuantityToInvoiceOnSalesAndItemTrackingLineAndPostSalesOrder(SalesHeader,SalesLine,SalesLine.Quantity - 1);  // Value required for the test.
      UpdateQuantityToInvoiceOnPurchaseAndItemTrackingLine(SalesLine."No.",SalesLine.Quantity - 1);  // Value required for the test.
      PurchaseHeader.FIND;

      // Exercise.
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);  // Post as RECEIVE and INVOICE.

      // Verify.
      Assert.ExpectedError(STRSUBSTNO(CannotInvoiceItemInPurchaseOrderErr,SalesLine."No.",SerialNo,SalesHeader."No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE PostSalesOrderAsInvoiceWithDifferentBillToCustomer@225();
    BEGIN
      // Setup.
      Initialize;
      PostSalesCreditMemoAgainstSalesReturnOrderWithDifferentBillToCustomer(FALSE,FALSE);  // SalesReturnOrder and SalesCreditMemo as FALSE.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,PostedSalesDocumentLinesPageHandler)]
    PROCEDURE PostSalesReturnOrderWithGetPostedDocLinesToReverseWithDifferentBillToCustomer@224();
    BEGIN
      // Setup.
      Initialize;
      PostSalesCreditMemoAgainstSalesReturnOrderWithDifferentBillToCustomer(TRUE,FALSE);  // SalesReturnOrder as TRUE and SalesCreditMemo as FALSE.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,PostedSalesDocumentLinesPageHandler)]
    PROCEDURE PostSalesCreditMemoWithGetPostedDocLinesToReverseWithDifferentBillToCustomer@223();
    BEGIN
      // Setup.
      Initialize;
      PostSalesCreditMemoAgainstSalesReturnOrderWithDifferentBillToCustomer(TRUE,TRUE);  // SalesReturnOrder and SalesCreditMemo as TRUE.
    END;

    LOCAL PROCEDURE PostSalesCreditMemoAgainstSalesReturnOrderWithDifferentBillToCustomer@222(SalesReturnOrder@1002 : Boolean;SalesCreditMemo@1005 : Boolean);
    VAR
      Customer@1000 : Record 18;
      CustomerPostingGroup@1008 : Record 92;
      GeneralPostingSetup@1011 : Record 252;
      Item@1001 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      ItemLedgerEntry@1007 : Record 32;
      VATPostingSetup@1009 : Record 325;
      PostedDocumentNo@1006 : Code[20];
    BEGIN
      // Create Sales Order with different Bill to Customer.
      CreateSalesOrderWithDifferentBillToCustomerNo(SalesHeader,SalesLine,Customer,Item);
      CustomerPostingGroup.GET(Customer."Customer Posting Group");
      GeneralPostingSetup.GET(Customer."Gen. Bus. Posting Group",Item."Gen. Prod. Posting Group");
      VATPostingSetup.GET(Customer."VAT Bus. Posting Group",Item."VAT Prod. Posting Group");

      // Exercise.
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);  // Post as SHIP and INVOICE.

      // Verify.
      VerifyGLEntry(PostedDocumentNo,GeneralPostingSetup."Sales Account",-SalesLine."Line Amount");
      VerifyGLEntry(PostedDocumentNo,CustomerPostingGroup."Receivables Account",SalesLine."Amount Including VAT");

      IF SalesReturnOrder THEN BEGIN
        // Exercise.
        CreateAndPostSalesReturnOrderWithGetPostedDocumentLinesToReverse(Customer."No.");

        // Verify.
        VerifyItemLedgerEntryForLot(ItemLedgerEntry."Entry Type"::Sale,Item."No.",'',-SalesLine.Quantity,FALSE);
      END;

      IF SalesCreditMemo THEN BEGIN
        // Exercise.
        PostedDocumentNo := CreateAndPostSalesCreditMemoWithGetPostedDocLinesToReverse(SalesLine,Customer."No.",Item."No.");

        // Verify.
        VerifyGLEntry(PostedDocumentNo,GeneralPostingSetup."Sales Account",SalesLine."Line Amount");
        VerifyGLEntry(PostedDocumentNo,CustomerPostingGroup."Receivables Account",-SalesLine."Amount Including VAT");
      END;
    END;

    [Test]
    PROCEDURE UpdateDescriptionOnToDoCardOfSameOrganizerToDoOfContactByPage@220();
    VAR
      Contact@1001 : Record 5050;
      Description@1004 : Variant;
    BEGIN
      // Setup: Create Contact. Create two To-do for the Contact.
      Initialize;
      CreateContactWithToDos(Contact);
      Description := LibraryUtility.GenerateGUID;

      // Exercise: Update Description on To-do Card opened from To-do list page.
      OpenToDoListPageFromContactCard(Contact."No.",Description);

      // Verify: Description gets updated on both To-dos of the Contact.
      VerifyDescriptionOnToDo(Contact."No.",Description);
    END;

    [Test]
    PROCEDURE OpenCommentsFromToDoCardPage@348();
    VAR
      Contact@1001 : Record 5050;
      ToDo@1000 : Record 5080;
      RlshpMgtCommentLine@1003 : Record 5061;
    BEGIN
      // [FEATURE] [To-Do] [UI]
      // [SCENARIO 363277] Open comments from the To-do Card page the link is set to the organizer to-do.
      Initialize;
      // [GIVEN] Contact and To-Do for the Contact.
      LibraryMarketing.CreateContact(Contact);
      CreateAndUpdateToDo(ToDo,Contact);

      // [GIVEN] Comment "X" for To-Do.
      LibraryMarketing.CreateRlshpMgtCommentLine(RlshpMgtCommentLine,RlshpMgtCommentLine."Table Name"::"To-do",ToDo."No.",0);
      RlshpMgtCommentLine.VALIDATE(Comment,LibraryUtility.GenerateGUID);
      RlshpMgtCommentLine.MODIFY(TRUE);

      // [WHEN] Open page Comment from To-Do Page.
      OpenCommentPageFromToDoCard(ToDo,RlshpMgtCommentLine.Comment);
      // [THEN] Page Comment from To-Do Page shows comment "X".
    END;

    [Test]
    PROCEDURE ErrorOnUpdatingQuantityToAssembleOnAssemblyOrder@219();
    VAR
      AssemblyHeader@1000 : Record 900;
      Item@1001 : Record 27;
    BEGIN
      // Setup: Create Item. Create Assembly Header.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,WORKDATE,Item."No.",'',LibraryRandom.RandDec(10,2),'');

      // Exercise.
      ASSERTERROR AssemblyHeader.VALIDATE("Quantity to Assemble",AssemblyHeader.Quantity + LibraryRandom.RandDec(10,2));  // Greater value is required to generate the error.

      // Verify.
      Assert.ExpectedError(STRSUBSTNO(QuantityToAssembleErr,AssemblyHeader.Quantity));
    END;

    [Test]
    PROCEDURE DeletePartialRegisteredWarehousePickAfterPostWarehouseShipment@241();
    BEGIN
      // Setup.
      Initialize;
      PostWhseShipmentOfSalesOrderWithReservationAfterDeletePickOfAnotherSalesOrder(FALSE);  // SalesOrderWithReservation as FALSE.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE PostWarehouseShipmentFromSalesOrderWithReservationAfterDeletePick@240();
    BEGIN
      // Setup.
      Initialize;
      PostWhseShipmentOfSalesOrderWithReservationAfterDeletePickOfAnotherSalesOrder(TRUE);  // SalesOrderWithReservation as TRUE.
    END;

    [HandlerFunctions(ReservationPageHandler)]
    LOCAL PROCEDURE PostWhseShipmentOfSalesOrderWithReservationAfterDeletePickOfAnotherSalesOrder@233(SalesOrderWithReservation@1009 : Boolean);
    VAR
      Item@1018 : Record 27;
      SalesHeader@1017 : Record 36;
      SalesHeader2@1016 : Record 36;
      Bin@1013 : Record 7354;
      ItemLedgerEntry@1012 : Record 32;
      WarehouseActivityLine@1000 : Record 5767;
      Quantity@1011 : Decimal;
    BEGIN
      // Update Inventory using Warehouse Journal. Post Warehouse Shipment after register Partial Pick from Sales Order.
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      FindPickBin(Bin,LocationWhite.Code);
      UpdateInventoryUsingWarehouseJournal(Bin,Item,Quantity + Quantity,Item."Base Unit of Measure",FALSE);  // Tracking as False. Value required for test.
      PostWarehouseShipmentAfterPartialRegisterPickFromSalesOrder(SalesHeader,Item."No.",Quantity,LocationWhite.Code);

      // Exercise.
      DeletePick(SalesHeader."No.");

      // Verify.
      VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Sale,Item."No.",-Quantity / 2,LocationWhite.Code,'','');  // Value required for Partial Quantity.

      IF SalesOrderWithReservation THEN BEGIN
        // Exercise.
        CreatePickFromWarehouseShipmentUsingSalesOrder(
          SalesHeader2,SalesHeader."Sell-to Customer No.",Item."No.",Quantity,LocationWhite.Code,TRUE);  // TRUE for Reserve.
        PostWarehouseShipmentAfterRegisterPick(
          WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader2."No.",Quantity,TRUE);

        // Verify.
        VerifyItemLedgerEntryForPostedDocument(
          ItemLedgerEntry."Document Type"::"Sales Shipment",ItemLedgerEntry."Entry Type"::Sale,
          GetSalesShipmentHeader(SalesHeader2."No."),Item."No.",0,-Quantity);  // Value 0 required for test.
      END;
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler)]
    PROCEDURE ShipmentMethodOnPurchaseOrderBySpecialSalesOrder@73();
    BEGIN
      // Setup.
      Initialize;
      PostPurchaseOrderWithShptMethodBySpecialSalesOrder(FALSE);  // Use False for Posted Purchase Invoice.
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler)]
    PROCEDURE ShipmentMethodOnPostedPurchInvBySpecialSalesOrder@257();
    BEGIN
      // Setup.
      Initialize;
      PostPurchaseOrderWithShptMethodBySpecialSalesOrder(TRUE);  // Use True for Posted Purchase Invoice.
    END;

    LOCAL PROCEDURE PostPurchaseOrderWithShptMethodBySpecialSalesOrder@246(PostedPurchaseInvoice@1007 : Boolean);
    VAR
      Customer@1006 : Record 18;
      Item@1005 : Record 27;
      PurchaseHeader@1004 : Record 38;
      PurchInvHeader@1003 : Record 122;
      SalesHeader@1002 : Record 36;
      Vendor@1001 : Record 23;
      DocumentNo@1000 : Code[20];
    BEGIN
      // Create Customer and Vendor with Shipment Method. Create Sales Order with Special Order. Create Purchase Order with Sell to Customer.
      LibraryInventory.CreateItem(Item);
      CreateCustomerWithShipmentMethod(Customer);
      CreateVendorWithShipmentMethod(Vendor,Customer."Shipment Method Code");
      CreateSalesOrderWithSpecialOrder(SalesHeader,Customer."No.",'',Item."No.");
      CreatePurchaseHeaderWithSellToCustomerNo(PurchaseHeader,Vendor."No.",SalesHeader."Sell-to Customer No.");

      // Exercise.
      LibraryPurchase.GetSpecialOrder(PurchaseHeader);

      // Verify.
      PurchaseHeader.TESTFIELD("Shipment Method Code",Vendor."Shipment Method Code");

      IF PostedPurchaseInvoice THEN BEGIN
        // Exercise.
        DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);  // Post Receive and Invoice.

        // Verify.
        PurchInvHeader.GET(DocumentNo);
        PurchInvHeader.TESTFIELD("Shipment Method Code",Vendor."Shipment Method Code");
      END;
    END;

    [Test]
    PROCEDURE ErrorOnPostingSalesOrderWithoutExternalDocument@248();
    BEGIN
      // Setup.
      Initialize;
      PostSalesOrderWithMultipleSeriesLine(FALSE);  // Use False for without External Document.
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PostSalesOrderWithMultipleSeriesLineAndExtDocument@281();
    BEGIN
      // Setup.
      Initialize;
      PostSalesOrderWithMultipleSeriesLine(TRUE);  // Use True for with External Document.
    END;

    LOCAL PROCEDURE PostSalesOrderWithMultipleSeriesLine@275(WithExternalDocumentNo@1007 : Boolean);
    VAR
      Customer@1006 : Record 18;
      CustomerPostingGroup@1005 : Record 92;
      GeneralPostingSetup@1004 : Record 252;
      NoSeriesLine@1003 : Record 309;
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      SalesReceivablesSetup@1002 : Record 311;
    BEGIN
      // Create Series with different starting dates. Update External Document Mandatory and Posted Invoice Series on Sales Setup. Create Sales Order without External Document.
      SalesReceivablesSetup.GET;
      CreateNoSeriesWithDifferentStartingDates(NoSeriesLine);
      UpdateExtDocNoMandatoryAndPostedInvNosOnSalesSetup(TRUE,NoSeriesLine."Series Code");
      CreateSalesOrderWithoutExternalDocumentNo(SalesHeader,Customer);

      // Exercise.
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);  // Post Ship and Invoice.

      // Verify.
      Assert.ExpectedError(STRSUBSTNO(ExternalDocumentMustNotEmptyErr,SalesHeader."No."));

      IF WithExternalDocumentNo THEN BEGIN
        // Exercise.
        PostSalesOrderAfterUpdateDatesWithExternalDocNo(SalesLine,SalesHeader,NoSeriesLine."Starting Date");
        GeneralPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");
        CustomerPostingGroup.GET(Customer."Customer Posting Group");

        // Tear Down.
        UpdateExtDocNoMandatoryAndPostedInvNosOnSalesSetup(
          SalesReceivablesSetup."Ext. Doc. No. Mandatory",SalesReceivablesSetup."Posted Invoice Nos.");

        // Verify.
        ASSERTERROR
          VerifyGLEntry(NoSeriesLine."Starting No.",GeneralPostingSetup."Sales Account",-SalesLine."Line Amount");
        Assert.ExpectedError(NoGLEntryWithinFilterErr);
        ASSERTERROR
          VerifyGLEntry(NoSeriesLine."Starting No.",CustomerPostingGroup."Receivables Account",SalesLine."Amount Including VAT");
        Assert.ExpectedError(NoGLEntryWithinFilterErr);
      END;

      // Tear Down.
      UpdateExtDocNoMandatoryAndPostedInvNosOnSalesSetup(
        SalesReceivablesSetup."Ext. Doc. No. Mandatory",SalesReceivablesSetup."Posted Invoice Nos.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PostInventroyPickWithEmailOnCustomerAndContact@279();
    BEGIN
      // Setup.
      Initialize;
      CreateAndPostInventoryPickFromSOWithEmail(FALSE,TRUE);  // Show Error as False and Update Email as True.
    END;

    LOCAL PROCEDURE CreateAndPostInventoryPickFromSOWithEmail@282(ShowError@1002 : Boolean;UpdateEMail@1008 : Boolean);
    VAR
      Customer@1007 : Record 18;
      Contact@1006 : Record 5050;
      Item@1005 : Record 27;
      SalesHeader@1004 : Record 36;
      WarehouseRequest@1003 : Record 5765;
      ItemLedgerEntry@1001 : Record 32;
      InventoryPick@1009 : TestPage 7377;
      Quantity@1000 : Decimal;
    BEGIN
      // Create Customer and Update Correspondence Type as Email on Customer Contact. Create and post Item Journal Line. Create and Release Sales Order. Create Inventory Pick. Auto Fill Quantity on Inventory Pick.
      Quantity := LibraryRandom.RandDec(10,2);
      UpdateCorrespondenceTypeAsEMailOnCustomerContact(Customer,Contact);
      LibraryInventory.CreateItem(Item);
      CreateAndPostItemJournalLine(Item."No.",Quantity,LocationOrange.Code,'');
      CreateAndReleaseSalesOrder(SalesHeader,Customer."No.",Item."No.",Quantity,LocationOrange.Code);
      LibraryVariableStorage.Enqueue(InventoryPickMsg);  // Enqueue for MessageHandler.
      CreateInventoryActivity(WarehouseRequest."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE);  // Taking True for Pick.

      IF ShowError THEN BEGIN
        // Exercise.
        OpenInventoryPickPageAndAutoFillQtyToHandle(InventoryPick,SalesHeader."No.");
        ASSERTERROR InventoryPick.PostAndPrint.INVOKE;

        // Verify: Verify error message.
        Assert.ExpectedError(STRSUBSTNO(EMailBlankErr,Contact."No."));
      END;

      IF UpdateEMail THEN BEGIN
        // Exercise.
        UpdateEMailOnCustomer(Customer);
        UpdateEmailOnContact(Contact);
        PostInventoryPick(SalesHeader."No.");

        // Verify.
        VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Purchase,Item."No.",Quantity,LocationOrange.Code,'','');
        VerifyItemLedgerEntry(ItemLedgerEntry."Entry Type"::Sale,Item."No.",-Quantity,LocationOrange.Code,'','');
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE PostPurchaseOrderWithStandardCostItemUsingLot@280();
    BEGIN
      // Setup.
      Initialize;
      PostInvtCostAfterPostingPurchaseReturnOrderWithLot(FALSE,FALSE,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,PostedPurchaseDocumentLinesPageHandler)]
    PROCEDURE ApplyToEntryOnPurchRetOrderWithReverseDocument@278();
    BEGIN
      // Setup.
      Initialize;
      PostInvtCostAfterPostingPurchaseReturnOrderWithLot(TRUE,FALSE,FALSE,FALSE);  // Use True for GetPostedDocumentLines.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,PostedPurchaseDocumentLinesPageHandler)]
    PROCEDURE LotOnPurchaseReturnOrderWithReverseDocument@271();
    BEGIN
      // Setup.
      Initialize;
      PostInvtCostAfterPostingPurchaseReturnOrderWithLot(TRUE,TRUE,FALSE,FALSE);  // Use True for GetPostedDocumentLines and LotAfterGetPostedDocumentLines.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,PostedPurchaseDocumentLinesPageHandler)]
    PROCEDURE PostPurchaseReturnOrderWithReverseDocument@269();
    BEGIN
      // Setup.
      Initialize;
      PostInvtCostAfterPostingPurchaseReturnOrderWithLot(TRUE,TRUE,TRUE,FALSE);  // Use True for GetPostedDocumentLines, LotAfterGetPostedDocumentLines and PostPurchaseReturnOrder.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,PostedPurchaseDocumentLinesPageHandler)]
    PROCEDURE PostInventoryCostAfterPostingPurchaseReturnOrder@268();
    BEGIN
      // Setup.
      Initialize;
      PostInvtCostAfterPostingPurchaseReturnOrderWithLot(TRUE,TRUE,TRUE,TRUE);  // Use True for GetPostedDocumentLines, LotAfterGetPostedDocumentLines, PostPurchaseReturnOrder and PostCostToGL.
    END;

    LOCAL PROCEDURE PostInvtCostAfterPostingPurchaseReturnOrderWithLot@267(GetPostedDocumentLines@1012 : Boolean;LotAfterGetPostedDocumentLines@1013 : Boolean;PostPurchaseReturnOrder@1014 : Boolean;PostCostToGL@1015 : Boolean);
    VAR
      GeneralPostingSetup@1011 : Record 252;
      PurchaseHeader@1010 : Record 38;
      PurchaseLine@1009 : Record 39;
      PurchaseLine2@1008 : Record 39;
      ValueEntry@1007 : Record 5802;
      Vendor@1006 : Record 23;
      VendorPostingGroup@1005 : Record 93;
      OldExactCostReversingMandatory@1004 : Boolean;
      LotNo@1002 : Code[20];
      DocumentNo@1001 : Code[20];
      DocumentNo2@1000 : Code[20];
    BEGIN
      // Create Purchase Order with Standard Cost Item using Lot Item Tracking.
      OldExactCostReversingMandatory := UpdateExactCostReversingMandatoryOnPurchaseSetup(TRUE);
      LotNo := CreatePurchaseOrderWithStandardCostItemUsingLot(PurchaseHeader,PurchaseLine,Vendor);
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      VendorPostingGroup.GET(Vendor."Vendor Posting Group");

      // Exercise.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);  // Post Purchase Order as Receive and Invoice.

      // Verify.
      VerifyGLEntry(DocumentNo,GeneralPostingSetup."Purch. Account",PurchaseLine."Line Amount");
      VerifyGLEntry(DocumentNo,VendorPostingGroup."Payables Account",-PurchaseLine."Amount Including VAT");
      VerifyValueEntry(
        DocumentNo,ValueEntry."Document Type"::"Purchase Invoice",PurchaseLine."No.",
        ValueEntry."Entry Type"::"Direct Cost",PurchaseLine."Line Amount",PurchaseLine."Direct Unit Cost",FALSE);
      VerifyValueEntry(
        DocumentNo,ValueEntry."Document Type"::"Purchase Invoice",PurchaseLine."No.",
        ValueEntry."Entry Type"::Variance,-PurchaseLine."Line Amount",-PurchaseLine."Direct Unit Cost",FALSE);

      IF GetPostedDocumentLines THEN BEGIN
        // Exercise.
        CreatePurchReturnOrderWithGetPstdDocLinesToReverse(PurchaseHeader);

        // Verify.
        FindPurchaseLine(PurchaseLine2,PurchaseLine."No.");
        PurchaseLine2.TESTFIELD("Appl.-to Item Entry",0);  // Use 0 for Apply To Item Entry.
      END;

      IF LotAfterGetPostedDocumentLines THEN BEGIN
        // Exercise.
        LibraryVariableStorage.Enqueue(ItemTrackingMode::VerifyLot);  // Enqueue for ItemTrackingPageHandler.
        LibraryVariableStorage.Enqueue(LotNo);  // Enqueue for ItemTrackingPageHandler.
        PurchaseLine2.OpenItemTrackingLines;

        // Verify: Verification performed on ItemTrackingPageHandler.
      END;

      IF PostPurchaseReturnOrder THEN BEGIN
        // Exercise.
        DocumentNo2 := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);  // Post Purchase Return Order as Ship and Invoice.

        // Verify.
        VerifyGLEntry(DocumentNo2,GeneralPostingSetup."Purch. Credit Memo Account",-PurchaseLine."Line Amount");
        VerifyGLEntry(DocumentNo2,VendorPostingGroup."Payables Account",PurchaseLine."Amount Including VAT");
        VerifyValueEntry(
          DocumentNo2,ValueEntry."Document Type"::"Purchase Credit Memo",PurchaseLine."No.",
          ValueEntry."Entry Type"::"Direct Cost",0,0,FALSE);  // Use 0 for Cost Amount Actual and Cost Per Unit.
      END;

      IF PostCostToGL THEN BEGIN
        // Exercise.
        LibraryCosting.AdjustCostItemEntries(PurchaseLine."No.",'');
        LibraryCosting.PostInvtCostToGL(FALSE,WORKDATE,'');

        // Verify.
        VerifyGLEntry(DocumentNo,GeneralPostingSetup."Direct Cost Applied Account",-PurchaseLine."Line Amount");
        VerifyGLEntry(DocumentNo,GeneralPostingSetup."Purchase Variance Account",PurchaseLine."Line Amount");
        VerifyGLEntry(DocumentNo2,GeneralPostingSetup."Purchase Variance Account",-PurchaseLine."Line Amount");
        VerifyGLEntry(DocumentNo2,GeneralPostingSetup."Direct Cost Applied Account",PurchaseLine."Line Amount");
        VerifyValueEntry(
          DocumentNo2,ValueEntry."Document Type"::"Purchase Credit Memo",PurchaseLine."No.",
          ValueEntry."Entry Type"::"Direct Cost",-PurchaseLine."Line Amount",PurchaseLine."Direct Unit Cost",
          TRUE);  // Use True for Adjustment.
        VerifyValueEntry(
          DocumentNo2,ValueEntry."Document Type"::"Purchase Credit Memo",PurchaseLine."No.",
          ValueEntry."Entry Type"::Variance,PurchaseLine."Line Amount",-PurchaseLine."Direct Unit Cost",
          TRUE);  // Use True for Adjustment.
      END;

      // Tear Down.
      UpdateExactCostReversingMandatoryOnPurchaseSetup(OldExactCostReversingMandatory);
    END;

    [Test]
    PROCEDURE CrossDockingWithReleasedProductionOrder@288();
    VAR
      Item@1000 : Record 27;
      ComponentItem@1001 : Record 27;
      ProductionOrder@1004 : Record 5405;
      PurchaseHeader@1007 : Record 38;
      Quantity@1003 : Decimal;
      OldUseCrossDocking@1009 : Boolean;
    BEGIN
      // Setup: Create Item with Order Reorder Policy and Production BOM. Create and refresh Production Order. Create Warehouse Receipt from Purchase Order Suggested By Requisition Worksheet.
      Initialize;
      OldUseCrossDocking := UpdateUseCrossDockingOnLocation(LocationGreen,TRUE);
      Quantity := CreateItemWithOrderReorderPolicyAndProductionBOM(Item,ComponentItem);
      CreateAndRefreshProductionOrder(ProductionOrder,Item."No.",Quantity,LocationGreen.Code,'');
      CreateWhseReceiptFromPurchOrderSuggestedByReqWksh(PurchaseHeader,ComponentItem);

      // Exercise.
      CalculateCrossDock(PurchaseHeader."No.",ComponentItem."No.");

      // Verify.
      VerifyWarehouseCrossDockOpportunity(ProductionOrder."No.",ComponentItem."No.",Quantity * Quantity);  // Value required for Reserved Quantity.

      // Tear down.
      UpdateUseCrossDockingOnLocation(LocationGreen,OldUseCrossDocking);
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler)]
    PROCEDURE ErrorOnPurchaseOrderWithDropShipmentAndJobNo@270();
    VAR
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1002 : Record 39;
      SalesHeader@1004 : Record 36;
      Item@1000 : Record 27;
      Customer@1001 : Record 18;
      Job@1003 : Record 167;
    BEGIN
      // Setup: Create Purchase Order with Get Drop Shipment from Sales Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateCustomer(Customer);
      CreateSalesOrderWithDropShipment(SalesHeader,Customer."No.",Item."No.");

      CreatePurchaseOrderWithGetDropShipment(PurchaseHeader,SalesHeader."Sell-to Customer No.");

      // Exercise: Update Job No. in Purchase Order
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;
      LibraryJob.CreateJob(Job);
      ASSERTERROR PurchaseLine.VALIDATE("Job No.",Job."No.");

      // Verify: Error message pops up when add the Job No.
      Assert.ExpectedError(STRSUBSTNO(DropShipmentMustBeEqualToNoErr,PurchaseHeader."No."));
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler)]
    PROCEDURE ErrorOnPurchaseOrderWithSpecialOrderAndJobNo@293();
    VAR
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1002 : Record 39;
      SalesHeader@1004 : Record 36;
      Item@1001 : Record 27;
      Customer@1000 : Record 18;
      Job@1003 : Record 167;
    BEGIN
      // Setup: Create Purchase Order with Get Special Order from Sales Order.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateCustomer(Customer);
      CreateSalesOrderWithSpecialOrder(SalesHeader,Customer."No.",'',Item."No.");

      CreatePurchaseOrderWithGetSpecialOrder(PurchaseHeader,SalesHeader."Sell-to Customer No.");

      // Exercise: Update Job No. in Purchase Order
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;
      LibraryJob.CreateJob(Job);
      ASSERTERROR PurchaseLine.VALIDATE("Job No.",Job."No.");

      // Verify: Error message pops up when add the Job No.
      Assert.ExpectedError(STRSUBSTNO(SpecialOrderMustBeEqualToNoErr,PurchaseHeader."No."));
    END;

    [Test]
    [HandlerFunctions(CheckAvailabilityHandler,ShipAndInvoiceMenuHandler)]
    PROCEDURE SalesOrderWithChangeUOM@299();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1002 : Record 5404;
      ItemUnitOfMeasure1@1001 : Record 5404;
      SalesHeader@1003 : Record 36;
      ItemLedgerEntry@1006 : Record 32;
      SalesOrder@1005 : TestPage 42;
      Quantity@1004 : Decimal;
    BEGIN
      // Setup: Create Item with Order Reorder Policy and Multiple UOM.
      Initialize;
      CreateItemWithMultipleUOM(Item,ItemUnitOfMeasure,ItemUnitOfMeasure1);

      // Exercise: Create Sales Order.
      Quantity := LibraryRandom.RandDec(10,2);
      CreateSalesOrder(SalesHeader,'',Item."No.",Quantity,'',FALSE);

      // Exercise: Change the Unit of Measure Code on Sales Order page to trigger the avail. warning and post the order.
      // PS: The automation case cannot detect the error "The following C/AL functionts..." due to testability issue.
      COMMIT;
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",SalesHeader."No.");
      SalesOrder.SalesLines."Unit of Measure Code".SETVALUE(ItemUnitOfMeasure1.Code); // Trigger the avail.warning.
      SalesOrder.Post.INVOKE;

      // Verify: Verify the Quantity(calculated by ItemUnitOfMeasure1) on Item Ledger Entry.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Sale,Item."No.",-Quantity * ItemUnitOfMeasure1."Qty. per Unit of Measure",'','','');
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,ConfirmHandler)]
    PROCEDURE PostSalesOrderWhenReservationEntryExistsForAnotherSalesOrder@304();
    VAR
      Outbound@1000 : ',SalesOrder,SalesInvoice,PurchaseReturnOrder,PurchaseCreditMemo';
    BEGIN
      // Test and verify confirm message can be poped up with posting Sales Order when all stock is reserved for another Sales Order.
      Initialize;
      PostOutboundWhenReservationEntryExistsForSalesOrder(Outbound::SalesOrder);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,ConfirmHandler)]
    PROCEDURE PostSalesInvoiceWhenReservationEntryExistsForSalesOrder@395();
    VAR
      Outbound@1000 : ',SalesOrder,SalesInvoice,PurchaseReturnOrder,PurchaseCreditMemo';
    BEGIN
      // Test and verify confirm message can be poped up with posting Sales Invoice when all stock is reserved for another Sales Order.
      Initialize;
      PostOutboundWhenReservationEntryExistsForSalesOrder(Outbound::SalesInvoice);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,ConfirmHandler)]
    PROCEDURE PostPurchaseReturnOrderWhenReservationEntryExistsForSalesOrder@300();
    VAR
      Outbound@1000 : ',SalesOrder,SalesInvoice,PurchaseReturnOrder,PurchaseCreditMemo';
    BEGIN
      // Test and verify confirm message can be poped up with posting Purchase Return Order when all stock is reserved for Sales Order.
      Initialize;
      PostOutboundWhenReservationEntryExistsForSalesOrder(Outbound::PurchaseReturnOrder);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,ConfirmHandler)]
    PROCEDURE PostPurchaseCreditMemoWhenReservationEntryExistsForSalesOrder@397();
    VAR
      Outbound@1000 : ',SalesOrder,SalesInvoice,PurchaseReturnOrder,PurchaseCreditMemo';
    BEGIN
      // Test and verify confirm message can be poped up with posting Purchase Credit Memo when all stock is reserved for Sales Order.
      Initialize;
      PostOutboundWhenReservationEntryExistsForSalesOrder(Outbound::PurchaseCreditMemo);
    END;

    [Test]
    [HandlerFunctions(ExplodeBomHandler)]
    PROCEDURE ExplodedBOMWhenComponentExistsExtendedTxtOnSalesLine@306();
    VAR
      CompItem@1000 : Record 27;
      CompItem2@1001 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      AssemblyItemNo@1002 : Code[20];
    BEGIN
      // Test and verify Assembly BOM can be exploded on the Sales line and the Extended Text to be automatic inserted accordingly
      // when the Assembly contains an Item with an associated Extended Text and Automatic Ext. Texts=Yes.

      // Setup: Create two component items, one with Extended Text. Create assembly item with the two BOM Components.
      Initialize;
      UpdateStockoutWarningOnSalesReceivableSetup(FALSE);
      AssemblyItemNo := CreateAssemblyItemWithMultipleBOMComponents(CompItem,CompItem2);

      // Create a Sales Order.
      CreateSalesOrder(
        SalesHeader,'',AssemblyItemNo,LibraryRandom.RandDec(10,2),'',FALSE);

      // Exercise: Find the sales line with assembly item, and Explode BOM.
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.");
      LibrarySales.ExplodeBOM(SalesLine);

      // Verify: Verify Assembly BOM can be exploded on the Sales line and  Extended Text to be automatic inserted accordingly.
      VerifySalesLine(
        SalesHeader."Document Type",SalesHeader."No.",CompItem."No.",CompItem2."No.");
    END;

    [Test]
    [HandlerFunctions(ExplodeBomHandler)]
    PROCEDURE ExplodedBOMWhenComponentExistsExtendedTxtOnPurchaseLine@310();
    VAR
      CompItem@1000 : Record 27;
      CompItem2@1001 : Record 27;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      AssemblyItemNo@1002 : Code[20];
    BEGIN
      // Test and verify Assembly BOM can be exploded on the Purchase line and the Extended Text to be automatic inserted accordingly
      // when the Assembly contains an Item with an associated Extended Text and Automatic Ext. Texts=Yes.

      // Setup: Create two components item, one with Extended Text. Create assembly item with the two BOM Components.
      Initialize;
      AssemblyItemNo := CreateAssemblyItemWithMultipleBOMComponents(CompItem,CompItem2);

      // Create a Purchases Order.
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,'',AssemblyItemNo,LibraryRandom.RandDec(10,2),'',FALSE);

      // Exercise: Find the Purchase line with assembly item, and Explode BOM.
      FindPurchaseLine(PurchaseLine,AssemblyItemNo);
      LibraryPurchase.ExplodeBOM(PurchaseLine);

      // Verify: Verify Assembly BOM can be exploded on the Sales line and  Extended Text to be automatic inserted accordingly.
      VerifyPurchaseLine(
        PurchaseHeader."Document Type",PurchaseHeader."No.",CompItem."No.",CompItem2."No.");
    END;

    [Test]
    PROCEDURE WarehousePickFromSalesOrderWithShippingAdviceCompleteError@307();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      Quantity@1001 : Decimal;
    BEGIN
      // Test the error message when trying to create partial Warehouse Pick having Shipping Advice Complete in Sales Order.

      // Setup.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      CreateAndPostItemJournalLine(Item."No.",Quantity,LocationBlue.Code,'');

      // Exercise.
      CreateAndReleaseSalesDocumentShippingAdviceCompletePartToShip(
        SalesHeader,SalesHeader."Document Type"::Order,Item."No.",Quantity,Quantity / 2,LocationBlue.Code);
      COMMIT;

      // Verify.
      ASSERTERROR SalesHeader.CreateInvtPutAwayPick;
      Assert.ExpectedError(ExpectedWarehousePickErrMsg);
    END;

    [Test]
    PROCEDURE CalculateCrossDockOnWarehouseReceiptForWarehouseShipmentUsingSalesOrder@311();
    BEGIN
      // Test and verify 'Calculate Cross-dock' is calculated correctly on Warehouse Receipt when Sales Order is partially shipped and the warehouse shipment was deleted.
      CalculateCrossDockOnWarehouseReceiptForDeletedWarehouseShipment(OutboundDocument::SalesOrder);
    END;

    [Test]
    PROCEDURE CalculateCrossDockOnWarehouseReceiptForWarehouseShipmentUsingOutboundTransfer@326();
    BEGIN
      // Test and verify 'Calculate Cross-dock' is calculated correctly on Warehouse Receipt when Outbound Transfer is partially shipped and the warehouse shipment was deleted.
      CalculateCrossDockOnWarehouseReceiptForDeletedWarehouseShipment(OutboundDocument::OutboundTransfer);
    END;

    LOCAL PROCEDURE CalculateCrossDockOnWarehouseReceiptForDeletedWarehouseShipment@318(OutboundType@1004 : Option);
    VAR
      Item@1011 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      Quantity@1001 : Decimal;
      Quantity2@1000 : Decimal;
    BEGIN
      // Setup: Create Item. Create and Register Put Away from Warehouse Receipt using Purchase Order.
      // Create another Warehouse Receipt using the 2nd Purchase Order.
      Initialize;
      LocationSetup;
      Quantity := LibraryRandom.RandInt(100);
      Quantity2 := Quantity + LibraryRandom.RandInt(100); // Large value Required for Sales Order and greater than 1st Purchase Order Quantity.
      LibraryInventory.CreateItem(Item);
      CreateAndRegisterPutAwayFromWarehouseReceiptUsingPurchaseOrder(Item."No.",Quantity,LocationWhite.Code);
      CreateWarehouseReceiptFromPurchaseOrderWithMultipleItems(
        PurchaseHeader,PurchaseLine,Item."No.",Quantity2,LocationWhite.Code,Item."No.");

      // Create and Register Pick from Warehouse Shipment using Sales Order/ Outbound Transfer.
      CASE OutboundType OF
        OutboundDocument::SalesOrder:
          DeleteWarehouseShipmentAfterPostAndRegisterPickUsingSalesOrder(Item."No.",Quantity2,LocationWhite.Code,Quantity,FALSE); // Partial Ship, Invoice=FALSE.
        OutboundDocument::OutboundTransfer:
          DeleteWarehouseShipmentAfterPostAndRegisterPickUsingTransferOrder(
            LocationWhite.Code,LocationBlue.Code,Item."No.",Quantity2,Quantity,FALSE); // Partial Ship, Invoice=FALSE.
      END;

      // Exercise: Calculate Cross-Dock on Warehouse Receipt.
      CalculateCrossDock(PurchaseHeader."No.",Item."No.");

      // Verify: Verify Qty. to Cross-Dock is correct on Warehouse Receipt Line.
      VerifyQtyToCrossDockOnWarehouseReceiptLine(PurchaseHeader."No.",Item."No.",Quantity2 - Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ConfirmHandler)]
    PROCEDURE UndoPurchaseReceiptWithDimensionAndJobNo@499();
    VAR
      Item@1000 : ARRAY [2] OF Record 27;
      ItemLedgerEntry@1007 : Record 32;
      LotNo@1006 : ARRAY [2] OF Code[20];
      OrderNo@1009 : Code[20];
      Quantity@1001 : Decimal;
      i@1010 : Integer;
    BEGIN
      // Test the Receipt Line and Item Ledger Entry after Undo Purchase Receipt with Job No. and Dimension set as Code mandatory

      // Setup: Create 2 Items with Dimension set as Code mandatory and Lot Tracking.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      FOR i := 1 TO ARRAYLEN(Item) DO BEGIN
        CreateItemWithItemTrackingCode(Item[i],TRUE,FALSE,LibraryUtility.GetGlobalNoSeriesCode,'');  // True for Lot.
        CreateDimensionForItem(Item[i]."No.");
      END;

      // Create and Post Purchase Order with multiple Items and Job No.
      OrderNo := CreateAndPostPurchaseOrderWithMultipleItemsAndJobNo(Item,Quantity,LotNo);

      // Exercise: Undo Purchase Receipt.
      UndoPurchaseReceipt(OrderNo,Item[1]."No.",Item[2]."No.");

      // Verify: Verify Receipt Line and Item Ledger Entry.
      VerifyReceiptLineAfterUndo(OrderNo,Item[1]."No.",Item[2]."No.",Quantity);
      VerifyItemLedgerEntryForLot(ItemLedgerEntry."Entry Type"::Purchase,Item[2]."No.",LotNo[2],Quantity,FALSE);  // Use MoveNext as FALSE.
      VerifyItemLedgerEntryForLot(ItemLedgerEntry."Entry Type"::Purchase,Item[2]."No.",LotNo[2],-Quantity,TRUE);  // Use MoveNext as TRUE.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UndoPurchaseReturnShipmentWithDimensionAndJobNo@331();
    VAR
      Item@1005 : ARRAY [2] OF Record 27;
      ItemLedgerEntry@1004 : Record 32;
      OrderNo@1002 : Code[20];
      Quantity@1001 : Decimal;
      i@1000 : Integer;
    BEGIN
      // Test the Return Shipment Line and Item Ledger Entry after Undo Purchase Return Shipment with Job No. and Dimension set as Code mandatory

      // Setup: Create 2 Items with Dimension set as Code mandatory.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      FOR i := 1 TO ARRAYLEN(Item) DO BEGIN
        LibraryInventory.CreateItem(Item[i]);
        CreateDimensionForItem(Item[i]."No.");
      END;

      // Create and Post Purchase Return Order with multiple Items and Job No
      OrderNo := CreateAndPostPurchaseReturnOrderWithMultipleItemsAndJobNo(Item,Quantity);

      // Exercise: Undo Purchase Return Shipment.
      UndoReturnShipment(OrderNo,Item[1]."No.",Item[2]."No.");

      // Verify: Verify Return Shipment Line and Item Ledger Entry.
      VerifyReturnShipmentLineAfterUndo(OrderNo,Item[1]."No.",Item[2]."No.",Quantity);
      VerifyItemLedgerEntryForLot(ItemLedgerEntry."Entry Type"::Purchase,Item[2]."No.",'',-Quantity,FALSE);  // Use MoveNext as FALSE.
      VerifyItemLedgerEntryForLot(ItemLedgerEntry."Entry Type"::Purchase,Item[2]."No.",'',Quantity,TRUE);  // Use MoveNext as TRUE.
    END;

    [Test]
    PROCEDURE ChangeQuantityOnSalesLineDefaultQtyToShipBlank@349();
    VAR
      Resource@1000 : Record 156;
      SalesLine@1002 : Record 37;
      SalesHeader@1005 : Record 36;
      LibraryResource@1001 : Codeunit 130511;
      PrevDefQtyToShip@1003 : Integer;
    BEGIN
      // [FEATURE] [Default Qty]
      // [SCENARIO] "Qty. to Ship" shoud be set to zero for non-Item Sales Line when Quantity is modified.

      // [GIVEN] Set "Default Quantity to Ship" to "Blank" in Sales & Receivable Setup, create SalesLine with Resource of Quantity X.
      Initialize;
      PrevDefQtyToShip := UpdateDefQtyToShipOnSalesReceivableSetup(1); // Blank
      LibraryResource.FindResource(Resource);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Resource,Resource."No.",LibraryRandom.RandIntInRange(10,100));

      // [GIVEN] Set Sales Line "Qty. to Ship" to X.
      SalesLine.VALIDATE("Qty. to Ship",SalesLine.Quantity);
      SalesLine.MODIFY;

      // [WHEN] Change Quantity in Sales Line to X + 1 (VALIDATE).
      SalesLine.VALIDATE(Quantity,SalesLine.Quantity + 1);

      // [THEN] Verify "Qty. to Ship" is zero.
      SalesLine.TESTFIELD("Qty. to Ship",0);

      // Teardown.
      UpdateDefQtyToShipOnSalesReceivableSetup(PrevDefQtyToShip);
    END;

    [Test]
    [HandlerFunctions(HandlePickSelectionPage)]
    PROCEDURE VerifyPartialPickWithMultipleUOMs@343();
    VAR
      WhseWorksheetName@1001 : Record 7327;
      WhseWorksheetLine@1011 : Record 7326;
      SalesHeader@1005 : Record 36;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      Item@1006 : Record 27;
      UOMCode@1004 : Code[10];
      ExpectedQty@1007 : Decimal;
    BEGIN
      // [FEATURE] [Pick Worksheet] [Create Pick]
      // [SCENARIO 363148] Verify that "Qty. Outstanding" in a Warehouse Pick line is decreased by actually picked Quantity, when pick requires breakbulk.

      // [GIVEN] Item with two UOMs, "A" with QtyPerUOM = 1, is on stock, "B" with QtyPerOUM < 1, not on stock.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,LibraryPurchase.CreateVendorNo,Item."No.",
        LibraryRandom.RandIntInRange(100,200),LocationWhite.Code,FALSE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      CreateWarehouseReceipt(PurchaseHeader);
      CreateAndRegisterPutAwayFromPurchaseOrder(PurchaseHeader."No.",Item."No.",LocationWhite.Code);
      UOMCode := AddItemUOM(Item."No.",LibraryRandom.RandDecInDecimalRange(0.1,0.5,1));

      // [GIVEN] Sales order with the item, with UOM "B". Stock is enough.
      ExpectedQty := 2 * LibraryRandom.RandIntInRange(5,10);
      CreateReleasedSalesOrder(SalesHeader,Item."No.",UOMCode,ExpectedQty,LocationWhite.Code,FALSE);

      // [GIVEN] Create Pick Worksheet line, related to Sales Order.
      CreatePartialPickForWhseShipment(
        SalesHeader,WhseWorksheetName,WhseWorksheetLine,LocationWhite.Code);

      // [GIVEN] Open Pick Worksheet, set partial Qty. to handle.
      WITH WhseWorksheetLine DO BEGIN
        VALIDATE("Qty. to Handle","Qty. Outstanding" / 2);
        MODIFY(TRUE);
        ExpectedQty := "Qty. Outstanding" - "Qty. to Handle";

        // [WHEN] Create Pick from Worksheet.
        LibraryWarehouse.CreatePickFromPickWorksheet(
          WhseWorksheetLine,"Line No.","Worksheet Template Name",Name,
          LocationWhite.Code,'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);

        // [THEN] Outstanding Quantity for the pick line is decreased by picked quantity.
        FIND;
        Assert.AreEqual(
          ExpectedQty,"Qty. Outstanding",STRSUBSTNO(QtyToCrossDockErr,FIELDCAPTION("Qty. Outstanding")));
      END;
    END;

    [Test]
    [HandlerFunctions(HandlePickSelectionPage)]
    PROCEDURE VerifyPickWithDifferentUOMs@350();
    VAR
      WhseWorksheetName@1001 : Record 7327;
      WhseWorksheetLine@1011 : Record 7326;
      SalesHeader@1005 : Record 36;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      Item@1006 : Record 27;
      WarehouseEmployee@1012 : Record 7301;
      UOMCode@1004 : Code[10];
      QtyPerUOM@1003 : Decimal;
      QtyOnStock@1008 : Decimal;
      PrevAlwaysCreatePickLine@1007 : Boolean;
    BEGIN
      // [FEATURE] [Pick Worksheet] [Create Pick]
      // [SCENARIO 363382] "Qty. Outstanding" in a Warehouse Pick line is decreased by actually picked Quantity, when pick requires breakbulk and taken UOM differs from pick line UOM.

      // [GIVEN] Item with two UOMs, "A" with QtyPerUOM = 1, is on stock of quantity X, "B" with QtyPerUOM = 10, not on stock.
      Initialize;

      WarehouseEmployee.DELETEALL(TRUE);
      CreateFullWarehouseSetup(LocationWhite); // Renew white location.

      LibraryInventory.CreateItem(Item);
      QtyPerUOM := LibraryRandom.RandIntInRange(10,20);
      QtyOnStock := 2 * LibraryRandom.RandIntInRange(10,50);
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,LibraryPurchase.CreateVendorNo,Item."No.",
        QtyOnStock * QtyPerUOM,LocationWhite.Code,FALSE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      CreateWarehouseReceipt(PurchaseHeader);
      CreateAndRegisterPutAwayFromPurchaseOrder(PurchaseHeader."No.",Item."No.",LocationWhite.Code);
      UOMCode := AddItemUOM(Item."No.",QtyPerUOM);

      // [GIVEN] Sales order with the item, with UOM "B", sale quantity X.
      PrevAlwaysCreatePickLine := UpdateAlwaysCreatePickLine(LocationWhite.Code,TRUE);
      CreateReleasedSalesOrder(SalesHeader,Item."No.",UOMCode,QtyOnStock,LocationWhite.Code,FALSE);

      // [GIVEN] Create Pick Worksheet line, related to Sales Order.
      CreatePartialPickForWhseShipment(
        SalesHeader,WhseWorksheetName,WhseWorksheetLine,LocationWhite.Code);

      // [GIVEN] Open Pick Worksheet, set "Qty. to Handle" to (X / 2).
      WITH WhseWorksheetLine DO BEGIN
        VALIDATE("Qty. to Handle",QtyOnStock / 2);
        MODIFY(TRUE);

        // [WHEN] Create Pick from Worksheet.
        LibraryWarehouse.CreatePickFromPickWorksheet(
          WhseWorksheetLine,"Line No.","Worksheet Template Name",Name,
          LocationWhite.Code,'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);

        // [THEN] "Qty. Outstanding" for the pick line is (X / 2).
        FIND;
        Assert.AreEqual(
          QtyOnStock / 2,"Qty. Outstanding",STRSUBSTNO(QtyToCrossDockErr,FIELDCAPTION("Qty. Outstanding")));
      END;

      // Teardown.
      UpdateAlwaysCreatePickLine(LocationWhite.Code,PrevAlwaysCreatePickLine);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,PostedITLPageHandler,PostedSalesDocTrackingPageHandler)]
    PROCEDURE ItemTrackingLinesInGetPostedShptLinesShowsCorrectTrackingLines@23();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      SalesHeader@1004 : Record 36;
      LotNo@1006 : Code[20];
      Qty@1007 : Integer;
    BEGIN
      // [FEATURE] [Get Posted Document Lines to Reverse] [Item Tracking]
      // [SCENARIO 166286] "Item Tracking Lines" action in page 5851 "Get Post.Doc - S.ShptLn Sbfrm" should open item tracking lines related to selected document line
      Initialize;

      // [GIVEN] Item with lot tracking
      Qty := LibraryRandom.RandInt(100);
      CreateItemWithItemTrackingCode(Item,TRUE,FALSE,LibraryUtility.GetGlobalNoSeriesCode,'');
      // [GIVEN] Post purchase receipt with lot no. = "L"
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,'',Item."No.",Qty,'',TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] Post sales shipment for lot "L"
      LotNo := COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(LotNo));
      CreateSalesOrderWithItemTracking(SalesHeader,'',Item."No.",Qty,'');
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [GIVEN] Create sales credit memo for lot "L" and run "Get Posted Document Lines to Reverse"
      LibraryVariableStorage.Enqueue(LotNo);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",SalesHeader."Sell-to Customer No.");

      // [WHEN] Open posted item tracking lines
      // [THEN] Item tracking line with lot no. = "L" is displayed
      // Verified in PostedITLPageHandler
      SalesHeader.GetPstdDocLinesToRevere;
    END;

    [Test]
    [HandlerFunctions(PostedSalesDocTrackingVerifyFilterPageHandler)]
    PROCEDURE ItemTrackingLinesInGetPostedShptLinesDoesNotResetFilters@321();
    VAR
      Customer@1000 : Record 18;
      Item@1005 : Record 27;
      SalesHeader@1002 : Record 36;
    BEGIN
      // [FEATURE] [Get Posted Document Lines to Reverse]
      // [SCENARIO 166286] "Item Tracking Lines" action in page 5851 "Get Post.Doc - S.ShptLn Sbfrm" should not affect filters in the current page

      Initialize;
      LibraryInventory.CreateItem(Item);

      // [GIVEN] Customer "C"
      LibrarySales.CreateCustomer(Customer);
      // [GIVEN] Post 2 sales shipments "S1" and "S2" for customer "C"
      LibraryVariableStorage.Enqueue(PostSalesShipment(Customer."No.",Item."No.",LibraryRandom.RandInt(100)));
      LibraryVariableStorage.Enqueue(PostSalesShipment(Customer."No.",Item."No.",LibraryRandom.RandInt(100)));

      // [GIVEN] Create sales credit memo for customer "C" and run "Get Posted Document Lines to Reverse"
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",Customer."No.");
      SalesHeader.GetPstdDocLinesToRevere;

      // [WHEN] Open posted item tracking lines
      // [THEN] 2 sales shipments are in the list: "S1" and "S2"
      // Verified in PostedSalesDocTrackingVerifyFilterPageHandler
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler,ItemTrackingPageHandler,ConfirmHandler)]
    PROCEDURE WarehouseShipmentPartiallySuppliedFromAssemblyAndInventoryWithLotTrackingVerifyLotBeforePick@357();
    VAR
      SalesHeader@1004 : Record 36;
      LotNo@1003 : ARRAY [2] OF Code[20];
    BEGIN
      // [FEATURE] [Assembly] [Warehouse Shipment] [Item Tracking]
      // [SCENARIO 379398] User should be able to assign lot no. to warehouse shipment lines when shipment is partially supplied from assembly and partially picked from inventory

      Initialize;

      // [GIVEN] Item "I" with assembly BOM, tracked by Lot No.
      // [GIVEN] Post 6 pcs of stock on WHITE location
      // [GIVEN] Create sales order for 10 pcs of item "I"
      // [GIVEN] Create warehouse shipment that is partially supplied from stock (6 pcs) and partially assembled (remaining 4 pcs)

      // [WHEN] Assign lot no. "L" to item in assembly order
      CreateSalesOrderAndWhseShptWithPartialSupplyFromAsmAndInventory(
        SalesHeader,LotNo,LibraryRandom.RandDec(10,2),LibraryRandom.RandDecInRange(15,30,2));

      // [THEN] Warehouse shipment line supplied from assembly order has lot no. "L" assigned
      VerifyWhseShipmentTrackingLineAvailabilityWarning(SalesHeader."No.",TRUE,LotNo[1],AvailabilityWarningsConfirmMsg);
      // [THEN] Warehouse shipment line supplied from inventory has blank lot no.
      VerifyWhseShipmentTrackingLine(SalesHeader."No.",FALSE,'');
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler,ItemTrackingPageHandler,ConfirmHandler)]
    PROCEDURE WarehouseShipmentPartiallySuppliedFromAssemblyAndInventoryWithLotTrackingVerifyLotAfterPick@371();
    VAR
      SalesHeader@1003 : Record 36;
      LotNo@1002 : ARRAY [2] OF Code[20];
    BEGIN
      // [FEATURE] [Assembly] [Warehouse Shipment] [Item Tracking]
      // [SCENARIO 379398] Warehouse pick should assign lot no. to warehouse shipment line when shipment is partially supplied from assembly and partially picked from inventory

      Initialize;

      // [GIVEN] Item "I" with assembly BOM, tracked by Lot No.
      // [GIVEN] Post 6 pcs of stock on WHITE location
      // [GIVEN] Create sales order for 10 pcs of item "I"
      // [GIVEN] Create warehouse shipment that is partially supplied from stock (6 pcs) and partially assembled (remaining 4 pcs)
      // [GIVEN] Assign lot no. "L1" to item in assembly order
      CreateSalesOrderAndWhseShptWithPartialSupplyFromAsmAndInventory(
        SalesHeader,LotNo,LibraryRandom.RandDec(10,2),LibraryRandom.RandDecInRange(15,30,2));

      // [GIVEN] Create pick from warehouse shipment and assign lot no. "L2" to pick lines
      // [WHEN] Register pick
      CreateAndRegisterPickFromWarehouseShipment(SalesHeader."No.",LotNo[2]);

      // [THEN] Warehouse shipment line supplied from assembly order has lot no. "L1" assigned
      VerifyWhseShipmentTrackingLineAvailabilityWarning(SalesHeader."No.",TRUE,LotNo[1],AvailabilityWarningsConfirmMsg);
      // [THEN] Warehouse shipment line supplied from inventory order has lot no. "L2" assigned
      VerifyWhseShipmentTrackingLine(SalesHeader."No.",FALSE,LotNo[2]);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler,ItemTrackingPageHandler)]
    PROCEDURE WarehouseShipmentPartiallySuppliedFromAssemblyAndInventoryWithLotTrackingPostShipmentVerifyLot@78();
    VAR
      SalesHeader@1003 : Record 36;
      ItemLedgerEntry@1000 : Record 32;
      LotNo@1002 : ARRAY [2] OF Code[20];
      QtyOnInventory@1004 : Decimal;
      QtyToAssemble@1001 : Decimal;
    BEGIN
      // [FEATURE] [Assembly] [Warehouse Shipment] [Item Tracking]
      // [SCENARIO 379398] Warehouse shipment should be posted correctly when it is partially supplied from assembly and partially picked from inventory

      Initialize;

      QtyOnInventory := LibraryRandom.RandDec(10,2);
      QtyToAssemble := LibraryRandom.RandDecInRange(15,30,2);

      // [GIVEN] Item "I" with assembly BOM, tracked by Lot No.
      // [GIVEN] Post 6 pcs of stock on WHITE location
      // [GIVEN] Create sales order for 10 pcs of item "I"
      // [GIVEN] Create warehouse shipment that is partially supplied from stock (6 pcs) and partially assembled (remaining 4 pcs)
      // [GIVEN] Assign lot no. "L1" to item in assembly order
      CreateSalesOrderAndWhseShptWithPartialSupplyFromAsmAndInventory(SalesHeader,LotNo,QtyOnInventory,QtyToAssemble);

      // [GIVEN] Create pick from warehouse shipment, assign lot no. "L2" to pick lines and register pick
      CreateAndRegisterPickFromWarehouseShipment(SalesHeader."No.",LotNo[2]);

      // [WHEN] Post warehouse shipment
      PostWarehouseShipmentWithAssembleToOrder(SalesHeader."No.");

      // [THEN] 6 pcs of item "I" with lot no. = "L1" are shipped
      VerifyLotQuantity(ItemLedgerEntry."Document Type"::"Sales Shipment",LotNo[1],TRUE,FALSE,-QtyToAssemble);
      // [THEN] 4 pcs of item "I" with lot no. = "L2" are shipped
      VerifyLotQuantity(ItemLedgerEntry."Document Type"::"Sales Shipment",LotNo[2],FALSE,FALSE,-QtyOnInventory);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler,ItemTrackingPageHandler,ConfirmYesHandler)]
    PROCEDURE WarehouseShipmentPartiallySuppliedFromAssemblyAndInventoryWithLotTrackingUndoShipmentVerifyLot@373();
    VAR
      SalesHeader@1003 : Record 36;
      SalesShipmentLine@1004 : Record 111;
      ItemLedgerEntry@1005 : Record 32;
      LotNo@1002 : ARRAY [2] OF Code[20];
      QtyOnInventory@1001 : Decimal;
      QtyToAssemble@1000 : Decimal;
    BEGIN
      // [FEATURE] [Assembly] [Warehouse Shipment] [Item Tracking]
      // [SCENARIO 379398] User should be able to undo warehouse shipment when it is partially supplied from assembly and partially picked from inventory

      Initialize;

      QtyOnInventory := LibraryRandom.RandDec(10,2);
      QtyToAssemble := LibraryRandom.RandDecInRange(15,30,2);

      // [GIVEN] Item "I" with assembly BOM, tracked by Lot No.
      // [GIVEN] Post 6 pcs of stock on WHITE location
      // [GIVEN] Create sales order for 10 pcs of item "I"
      // [GIVEN] Create warehouse shipment that is partially supplied from stock (6 pcs) and partially assembled (remaining 4 pcs)
      // [GIVEN] Assign lot no. "L1" to item in assembly order
      CreateSalesOrderAndWhseShptWithPartialSupplyFromAsmAndInventory(SalesHeader,LotNo,QtyOnInventory,QtyToAssemble);

      // [GIVEN] Create pick from warehouse shipment, assign lot no. "L2" to pick lines and register pick
      CreateAndRegisterPickFromWarehouseShipment(SalesHeader."No.",LotNo[2]);
      // [GIVEN] Post warehouse shipment
      PostWarehouseShipmentWithAssembleToOrder(SalesHeader."No.");

      LibraryVariableStorage.Enqueue(UndoShipmentMsg);
      SalesShipmentLine.SETRANGE("Document No.",GetSalesShipmentHeader(SalesHeader."No."));
      SalesShipmentLine.SETRANGE(Type,SalesShipmentLine.Type::Item);

      // [WHEN] Undo sales shipment
      LibrarySales.UndoSalesShipmentLine(SalesShipmentLine);

      // [THEN] 6 pcs of item "I" with lot no. = "L1" are shipped
      VerifyLotQuantity(ItemLedgerEntry."Document Type"::"Sales Shipment",LotNo[1],TRUE,FALSE,-QtyToAssemble);
      // [THEN] 4 pcs of item "I" with lot no. = "L2" are shipped
      VerifyLotQuantity(ItemLedgerEntry."Document Type"::"Sales Shipment",LotNo[2],FALSE,FALSE,-QtyOnInventory);
      // [THEN] 6 pcs of item "I" with lot no. = "L1" are returned
      VerifyLotQuantity(ItemLedgerEntry."Document Type"::"Sales Shipment",LotNo[1],TRUE,TRUE,QtyToAssemble);
      // [THEN] 4 pcs of item "I" with lot no. = "L2" are returned
      VerifyLotQuantity(ItemLedgerEntry."Document Type"::"Sales Shipment",LotNo[2],FALSE,TRUE,QtyOnInventory);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE PickPartiallyAssembledSalesLineWithLotTracking@112();
    VAR
      AssemblyItem@1000 : Record 27;
      CompItem@1001 : Record 27;
      SalesHeader@1002 : Record 36;
      ReservationEntry@1008 : Record 337;
      AssemblyLotNo@1003 : Code[20];
      InventoryLotNo@1005 : Code[20];
      QtyOnInv@1004 : Decimal;
      QtyToAssemble@1006 : Decimal;
    BEGIN
      // [FEATURE] [Item Tracking] [Assembly] [Warehouse]
      // [SCENARIO 379757] It should be possible to pick a partially assembled sales line with lot tracking and different lot nos. in inventory and assembly header
      Initialize;

      QtyOnInv := LibraryRandom.RandDec(100,2);
      QtyToAssemble := LibraryRandom.RandDec(100,2);

      // [GIVEN] Assembled item "I" with lot tracking. Post inventory stock of "X" pcs with lot no. = "L1" on "GREEN" location
      CreateAssembledItemWithLotTracking(AssemblyItem,CompItem,1);
      CreateAndPostItemJournalLine(CompItem."No.",QtyToAssemble,LocationGreen.Code,'');
      InventoryLotNo := PostItemJournalLineWithLotTracking(AssemblyItem."No.",QtyToAssemble,LocationGreen.Code);

      // [GIVEN] Create sales order for item "I". Take "X" pcs from inventory and set "Assemble to Order" = "Y"
      CreateSalesOrderWithQtyToAssemble(SalesHeader,'',AssemblyItem."No.",QtyOnInv + QtyToAssemble,QtyToAssemble,LocationGreen.Code);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      // [GIVEN] In the assembly order, assign lot no. = "L2" to assembled item "I"
      AssemblyLotNo := AssignLotNoToAssemblyItem(SalesHeader."Document Type",SalesHeader."No.");
      // [GIVEN] Create warehouse shipment
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // [WHEN] Create and register warehouse pick
      CreateAndRegisterPickFromWarehouseShipment(SalesHeader."No.",InventoryLotNo);

      // [THEN] "X" pcs of item "I" are registered as surplus with lot no. "L1"
      VerifyReservationEntry(
        ReservationEntry."Reservation Status"::Surplus,AssemblyItem."No.",DATABASE::"Sales Line",
        LocationGreen.Code,InventoryLotNo,-QtyOnInv,TRUE);
      // [THEN] "Y" pcs of item "I" with lot no. "L2" are reserved against the assembly order
      VerifyReservationEntry(
        ReservationEntry."Reservation Status"::Reservation,AssemblyItem."No.",DATABASE::"Sales Line",
        LocationGreen.Code,AssemblyLotNo,-QtyToAssemble,FALSE);
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler,GetShipmentLinesModalPageHandler)]
    PROCEDURE DeleteFullyInvoicedSalesOrderWithSpecialOrderPurchOrderNotInvoiced@421();
    VAR
      SalesHeaderOrder@1004 : Record 36;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1001 : Record 39;
      ItemNo@1006 : Code[20];
    BEGIN
      // [FEATURE] [Sales] [Shipment] [Get Shipment Lines] [Special Order]
      // [SCENARIO 381247] Stan can delete fully shipped Sales Order tied with Purchase "Special Order" when it is fully Invoiced by another document
      Initialize;

      // [GIVEN] Sales order "SO" marked as "Special Order" and linked to purchase order "PO"
      ItemNo := LibraryInventory.CreateItemNo;
      CreateSalesOrderWithSpecialOrder(SalesHeaderOrder,LibrarySales.CreateCustomerNo,'',ItemNo);

      // [GIVEN] "PO" with line "PL" received and not invoiced
      CreateSpecialPurchaseOrderAndPostReceipt(PurchaseHeader,SalesHeaderOrder,ItemNo);

      // [GIVEN] "SO" shipped fully
      LibrarySales.PostSalesDocument(SalesHeaderOrder,TRUE,FALSE);

      // [GIVEN] Sales invoice "SI" created from shipped "SO" using "Get Shipment Lines"
      // [GIVEN] "SI" fully invoiced
      CreateAndPostSalesInvoiceFromShipment(SalesHeaderOrder);

      // [WHEN] Delete "SO"
      SalesHeaderOrder.FIND;
      SalesHeaderOrder.DELETE(TRUE);

      // [THEN] "SO" deleted without any error and "PL" updated
      // [THEN] "PL"."Special Order Sales No." = <blank>
      // [THEN] "PL"."Special Order Sales Line No." = 0
      // [THEN] "PL"."Special Order" = FALSE
      FindPurchaseLine(PurchaseLine,ItemNo);
      PurchaseLine.TESTFIELD("Special Order",FALSE);
      PurchaseLine.TESTFIELD("Special Order Sales No.",'');
      PurchaseLine.TESTFIELD("Special Order Sales Line No.",0);
    END;

    [Test]
    [HandlerFunctions(SalesListPageHandler,GetShipmentLinesModalPageHandler)]
    PROCEDURE DeleteFullyInvoicedSalesOrderWithSpecialOrderPurchOrderFullyInvoiced@422();
    VAR
      SalesHeaderOrder@1004 : Record 36;
      PurchaseHeader@1005 : Record 38;
      ItemNo@1006 : Code[20];
    BEGIN
      // [FEATURE] [Sales] [Shipment] [Get Shipment Lines] [Special Order]
      // [SCENARIO 381247] Stan can delete fully shipped Sales Order tied with Purchase "Special Order" when it is fully Invoiced by another document and special order fully receipt and invoiced
      Initialize;

      // [GIVEN] Sales order "SO" marked as "Special Order" and linked to purchase order "PO"
      ItemNo := LibraryInventory.CreateItemNo;
      CreateSalesOrderWithSpecialOrder(SalesHeaderOrder,LibrarySales.CreateCustomerNo,'',ItemNo);

      // [GIVEN] "PO" with line "PL" received and not invoiced
      CreateSpecialPurchaseOrderAndPostReceipt(PurchaseHeader,SalesHeaderOrder,ItemNo);

      // [GIVEN] "SO" shipped fully
      LibrarySales.PostSalesDocument(SalesHeaderOrder,TRUE,FALSE);
      // [GIVEN] "PO" invoiced fully
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // [GIVEN] Sales invoice "SI" created from shipped "SO" using "Get Shipment Lines"
      // [GIVEN] "SI" fully invoiced
      CreateAndPostSalesInvoiceFromShipment(SalesHeaderOrder);

      // [WHEN] Delete "SO"
      SalesHeaderOrder.FIND;
      SalesHeaderOrder.DELETE(TRUE);

      // [THEN] "SO" deleted without any error
    END;

    [Test]
    [HandlerFunctions(GetShipmentLinesModalPageHandler)]
    PROCEDURE SalesInvoiceUsesQtyPerUOMFromSalesShipment@249();
    VAR
      Customer@1001 : Record 18;
      Location@1000 : Record 14;
      SalesHeaderOrder@1003 : Record 36;
      SalesHeaderInvoice@1007 : Record 36;
      ItemNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Sales Invoice] [Get Shipment Line] [Item Unit of Measure]
      // [SCENARIO 381806] When the proportion between "Quantity (Base)" and Quantity in sales shipment is not equal to "Qty. per Unit of Measure", that changed proportion should be also applied to sales invoice created from that shipment.
      Initialize;

      // [GIVEN] Item "I" with alternate sales unit of measure "BOX". Qty. in base UOM for "BOX" = 6.
      // [GIVEN] Item "I" is in stock in Location set up for required shipment.
      ItemNo := CreateItemWithSalesUOM(6);
      LibrarySales.CreateCustomer(Customer);
      LibraryWarehouse.CreateLocationWMS(Location,FALSE,FALSE,FALSE,FALSE,TRUE);
      CreateAndPostItemJournalLine(ItemNo,LibraryRandom.RandIntInRange(10,20),Location.Code,'');

      // [GIVEN] Sales Order "SO" for 1 "BOX" of item "I".
      // [GIVEN] Posted warehouse shipment for the sales order. "Qty. to Ship" = 0.66667. "Qty. to Ship (Base)" = 4, which is not equal to 0.66667 * 6 = 4.00002
      CreateAndPartiallyShipSalesOrderWithAlternateUOM(
        SalesHeaderOrder,Customer."No.",ItemNo,Location.Code,1,0.66667,4);

      // [WHEN] Create Sales Invoice "SI" from shipped "SO" using "Get Shipment Lines".
      CreateSalesInvoiceFromShipment(SalesHeaderInvoice,SalesHeaderOrder);

      // [THEN] SI."Quantity (Base)" = 4
      // [THEN] SI."Outstanding Qty. (Base)" = 4
      // [THEN] SI."Qty. to Invoice (Base)" = 4
      VerifyBaseQtysOnSalesLine(SalesHeaderInvoice,ItemNo,4);
    END;

    [Test]
    [HandlerFunctions(ExplodeBomHandler)]
    PROCEDURE ExplodedBOMInSalesLinesAfterAttachedExtendedTexts@265();
    VAR
      AssemblyItem@1000 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      CompItemNo@1001 : Code[20];
      ExtendedText@1003 : Text;
    BEGIN
      // [FEATURE] [BOM] [Explode BOM] [Sales] [Extended Text]
      // [SCENARIO 382083] The Assembly BOM is exploded on the Sales Line after attached extended texts

      // [GIVEN] Assembly BOM with extended text
      Initialize;
      UpdateStockoutWarningOnSalesReceivableSetup(FALSE);
      CompItemNo := LibraryInventory.CreateItemNo;
      CreateAssemblyItemWithAsseblyBOM(AssemblyItem,CompItemNo,LibraryRandom.RandInt(10));
      ExtendedText := LibraryService.CreateExtendedTextForItem(AssemblyItem."No.");

      // [GIVEN] Sales Order with Assembly BOM and inserted extended text
      CreateSalesOrderWithInsertedExtendedText(SalesHeader,SalesLine,AssemblyItem."No.");

      // [WHEN] Explode Assembly BOM
      LibrarySales.ExplodeBOM(SalesLine);

      // [THEN] The Sales Line with component is inserted after extended text from BOM
      VerifySalesLineExtTextBeforeItem(SalesHeader,ExtendedText,CompItemNo);
    END;

    [Test]
    [HandlerFunctions(ExplodeBomHandler)]
    PROCEDURE ExplodedBOMInSalesLinesAfterAttachedExtendedTextsAndBeforeNextLine@313();
    VAR
      AssemblyItem@1006 : Record 27;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      NewSalesLine@1007 : Record 37;
      CompItemNo@1002 : Code[20];
      ExtendedText@1000 : Text;
    BEGIN
      // [FEATURE] [BOM] [Explode BOM] [Sales] [Extended Text]
      // [SCENARIO 382083] The Assembly BOM is exploded on the Sales Line after attached extended texts but before next line

      // [GIVEN] Assembly BOM with extended text
      Initialize;
      UpdateStockoutWarningOnSalesReceivableSetup(FALSE);
      CompItemNo := LibraryInventory.CreateItemNo;
      CreateAssemblyItemWithAsseblyBOM(AssemblyItem,CompItemNo,LibraryRandom.RandInt(10));
      ExtendedText := LibraryService.CreateExtendedTextForItem(AssemblyItem."No.");

      // [GIVEN] Sales Order with Assembly BOM and inserted extended text
      CreateSalesOrderWithInsertedExtendedText(SalesHeader,SalesLine,AssemblyItem."No.");

      // [GIVEN] Additional line in the end of Sales Order
      CreateSalesLine(SalesHeader,NewSalesLine,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10),'');

      // [WHEN] Explode Assembly BOM
      LibrarySales.ExplodeBOM(SalesLine);

      // [THEN] The Sales Line with component is inserted after extended text from BOM and before next additional line
      VerifySalesLineExtTextBeforeItem(SalesHeader,ExtendedText,CompItemNo);
    END;

    [Test]
    [HandlerFunctions(ExplodeBomHandler)]
    PROCEDURE ExplodedBOMInPurchLinesAfterAttachedExtendedTexts@323();
    VAR
      AssemblyItem@1000 : Record 27;
      PurchHeader@1004 : Record 38;
      PurchLine@1002 : Record 39;
      CompItemNo@1001 : Code[20];
      ExtendedText@1003 : Text;
    BEGIN
      // [FEATURE] [BOM] [Explode BOM] [Purchase] [Extended Text]
      // [SCENARIO 382083] The Assembly BOM is exploded on the Purchase Line after attached extended texts

      // [GIVEN] Assembly BOM with extended text
      Initialize;
      CompItemNo := LibraryInventory.CreateItemNo;
      CreateAssemblyItemWithAsseblyBOM(AssemblyItem,CompItemNo,LibraryRandom.RandInt(10));
      ExtendedText := LibraryService.CreateExtendedTextForItem(AssemblyItem."No.");

      // [GIVEN] Purchase Order with Assembly BOM and inserted extended text
      CreatePurchOrderWithInsertedExtendedText(PurchHeader,PurchLine,AssemblyItem."No.");

      // [WHEN] Explode Assembly BOM
      LibraryPurchase.ExplodeBOM(PurchLine);

      // [THEN] The Purchase Line with component is inserted after extended text from BOM
      VerifyPurchLineExtTextBeforeItem(PurchHeader,ExtendedText,CompItemNo);
    END;

    [Test]
    [HandlerFunctions(ExplodeBomHandler)]
    PROCEDURE ExplodedBOMInPurchLinesAfterAttachedExtendedTextsAndBeforeNextLine@320();
    VAR
      AssemblyItem@1006 : Record 27;
      PurchHeader@1004 : Record 38;
      PurchLine@1003 : Record 39;
      NewPurchLine@1007 : Record 39;
      CompItemNo@1002 : Code[20];
      ExtendedText@1000 : Text;
    BEGIN
      // [FEATURE] [BOM] [Explode BOM] [Purchase] [Extended Text]
      // [SCENARIO 382083] The Assembly BOM is exploded on the Purchase Line after attached extended texts but before next line

      // [GIVEN] Assembly BOM with extended text
      Initialize;
      CompItemNo := LibraryInventory.CreateItemNo;
      CreateAssemblyItemWithAsseblyBOM(AssemblyItem,CompItemNo,LibraryRandom.RandInt(10));
      ExtendedText := LibraryService.CreateExtendedTextForItem(AssemblyItem."No.");

      // [GIVEN] Purchase Order with Assembly BOM and inserted extended text
      CreatePurchOrderWithInsertedExtendedText(PurchHeader,PurchLine,AssemblyItem."No.");

      // [GIVEN] Additional line in the end of Purchase Order
      CreatePurchaseLine(PurchHeader,NewPurchLine,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10),'',FALSE);

      // [WHEN] Explode Assembly BOM
      LibraryPurchase.ExplodeBOM(PurchLine);

      // [THEN] The Purchase Line with component is inserted after extended text from BOM and before next additional line
      VerifyPurchLineExtTextBeforeItem(PurchHeader,ExtendedText,CompItemNo);
    END;

    [Test]
    [HandlerFunctions(CrossDockOpportunitiesPageHandler)]
    PROCEDURE CrossDocOpportunitiesListNotFilteredOnWhseReceiptLine@325();
    VAR
      Item@1002 : Record 27;
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      WarehouseReceiptLine@1005 : Record 7317;
      WhseCrossDockOpportunity@1007 : Record 5768;
      WhseReceiptSubform@1009 : TestPage 5769;
      Qty@1006 : Decimal;
    BEGIN
      // [FEATURE] [Cross-Docking] [Warehouse] [Warehouse Receipt]
      // [SCENARIO 224091] Lookup action in the field "Qty. to Cross-Dock" of the page "Whse. Receipt Subform" should show all cross-dock opportunities related to the receipt, without a filter on line no.

      Initialize;

      LibraryInventory.CreateItem(Item);

      // [GIVEN] Location "L" with "Use Cross-Docking" option enabled
      // [GIVEN] Purchase order on the location "L". Order has 2 lines: first line for 10 pcs of item "I", second line - for 30 pcs.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      Qty := LibraryRandom.RandInt(20);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,Item."No.",Qty,LocationWhite.Code,FALSE);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,Item."No.",Qty * 3,LocationWhite.Code,FALSE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);

      // [GIVEN] Sales order on location "L". Two lines, both for 15 pcs of item "I".
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      CreateSalesLine(SalesHeader,SalesLine,Item."No.",(Qty * 4) / 2,LocationWhite.Code);
      CreateSalesLine(SalesHeader,SalesLine,Item."No.",(Qty * 4) / 2,LocationWhite.Code);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // [GIVEN] Create warehouse receipt from the purchase order and calculate cross-dock lines.
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);

      FindWarehouseReceiptLine(WarehouseReceiptLine,PurchaseHeader."No.",Item."No.");
      LibraryWarehouse.CalculateCrossDockLines(
        WhseCrossDockOpportunity,'',WarehouseReceiptLine."No.",WarehouseReceiptLine."Location Code");

      // [WHEN] Select the first warehouse receipt line and invoke lookup on the "Qty. to Cross-Doc" field
      LibraryVariableStorage.Enqueue(2);
      WhseReceiptSubform.OPENVIEW;
      WhseReceiptSubform.GOTORECORD(WarehouseReceiptLine);
      WhseReceiptSubform."Qty. to Cross-Dock".LOOKUP;

      // [THEN] Page "Cross-Dock Opportunities" is displayed. The list contains two records.
      // Verified in CrossDockOpportunitiesPageHandler

      // [WHEN] Select the second warehouse receipt line and invoke lookup on the "Qty. to Cross-Doc" field
      LibraryVariableStorage.Enqueue(2);
      WarehouseReceiptLine.NEXT;
      WhseReceiptSubform.GOTORECORD(WarehouseReceiptLine);
      WhseReceiptSubform."Qty. to Cross-Dock".LOOKUP;

      // [THEN] Page "Cross-Dock Opportunities" is displayed. The list contains two records.
      // Verified in CrossDockOpportunitiesPageHandler

      LibraryVariableStorage.AssertEmpty;
    END;

    LOCAL PROCEDURE Initialize@4();
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      NoSeriesSetup;
      ItemJournalSetup(ItemJournalTemplate,ItemJournalBatch,ItemJournalTemplate.Type::Item);
      ItemJournalSetup(ReclassItemJournalTemplate,ReclassItemJournalBatch,ReclassItemJournalTemplate.Type::Transfer);
      LocationSetup;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdatePrepaymentAccounts;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AssignLotNoToAssemblyItem@266(SalesDocType@1001 : Option;SalesDocNo@1002 : Code[20]) : Code[20];
    VAR
      AssemblyHeader@1000 : Record 900;
    BEGIN
      FindLinkedAssemblyOrder(AssemblyHeader,SalesDocType,SalesDocNo);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);
      AssemblyHeader.OpenItemTrackingLines;
      EXIT(LibraryVariableStorage.DequeueText);
    END;

    LOCAL PROCEDURE CreateFullWarehouseSetup@60(VAR Location@1000 : Record 14);
    VAR
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,2);  // Value used for number of bin per zone.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@39(VAR ItemJournalTemplate2@1002 : Record 82;VAR ItemJournalBatch2@1001 : Record 233;ItemJournalTemplateType@1000 : Option);
    BEGIN
      ItemJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate2,ItemJournalTemplateType);
      ItemJournalTemplate2.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate2.MODIFY(TRUE);

      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch2,ItemJournalTemplate2.Type,ItemJournalTemplate2.Name);
      ItemJournalBatch2.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch2.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE LocationSetup@92();
    VAR
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      CreateFullWarehouseSetup(LocationWhite);  // Location: White.
      CreateAndUpdateLocation(LocationBlue,TRUE,TRUE,FALSE,FALSE,FALSE);  // Location Blue with Require Put-Away and Require Pick.
      CreateAndUpdateLocation(LocationSilver,TRUE,TRUE,FALSE,FALSE,TRUE);  // Location Silver with Require Put-away, Require Pick and Bin Mandatory.
      CreateAndUpdateLocation(LocationYellow,FALSE,FALSE,FALSE,FALSE,TRUE);  // Location Yellow with Bin Mandatory.
      CreateAndUpdateLocation(LocationRed,FALSE,FALSE,FALSE,FALSE,FALSE);
      CreateAndUpdateLocation(LocationGreen,TRUE,TRUE,TRUE,TRUE,FALSE);  // Location Green with Require Put-Away, Require Pick, Require Receive and Require Shipment.
      CreateAndUpdateLocation(LocationOrange,FALSE,TRUE,FALSE,FALSE,FALSE);  // Location Orange with Require Pick.
      CreateInTransitLocation;
    END;

    LOCAL PROCEDURE WarehouseJournalSetup@106(LocationCode@1000 : Code[10]);
    BEGIN
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Item);
      WarehouseJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalTemplate.MODIFY(TRUE);

      LibraryWarehouse.SelectWhseJournalBatchName(
        WarehouseJournalBatch,WarehouseJournalTemplate.Type,WarehouseJournalTemplate.Name,LocationCode);
      WarehouseJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      PurchasesPayablesSetup@1003 : Record 312;
      SalesSetup@1001 : Record 311;
    BEGIN
      SalesSetup.GET;
      SalesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalculateCrossDock@135(SourceNo@1000 : Code[20];ItemNo@1001 : Code[20]);
    VAR
      WhseCrossDockOpportunity@1004 : Record 5768;
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,SourceNo,ItemNo);
      LibraryWarehouse.CalculateCrossDockLines(
        WhseCrossDockOpportunity,'',WarehouseReceiptLine."No.",WarehouseReceiptLine."Location Code");
    END;

    LOCAL PROCEDURE CalculatePlanForRequisitionWorksheet@151(VAR RequisitionWkshName@1000 : Record 245;VAR Item@1001 : Record 27;StartDate@1003 : Date;EndDate@1002 : Date);
    BEGIN
      FindRequisitionWkshName(RequisitionWkshName);
      LibraryPlanning.CalculatePlanForReqWksh(
        Item,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name,StartDate,EndDate);
    END;

    LOCAL PROCEDURE CalculateWarehouseAdjustmentAndPostItemJournalLine@197(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CarryOutActionMessageOnRequisitionWorksheet@34(RequisitionWkshName@1002 : Record 245;ItemNo@1000 : Code[20]);
    VAR
      RequisitionLine@1001 : Record 246;
    BEGIN
      FindRequistionLine(RequisitionLine,RequisitionWkshName,ItemNo);
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
    END;

    LOCAL PROCEDURE CreateAndCertifyBOM@188(VAR ProductionBOMHeader@1000 : Record 99000771;UnitOfMeasureCode@1002 : Code[10];ItemNo@1003 : Code[20];QuantityPer@1004 : Decimal);
    VAR
      ProductionBOMLine@1001 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,UnitOfMeasureCode);
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo,QuantityPer);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@40(ItemNo@1005 : Code[20];Quantity@1004 : Decimal;LocationCode@1001 : Code[10];BinCode@1002 : Code[20]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Purchase,ItemNo,Quantity);
      UpdateLocationAndBinOnItemJournalLine(ItemJournalLine,LocationCode,BinCode);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostItemReclassificationJournalLine@79(Bin@1007 : Record 7354;Bin2@1008 : Record 7354;ItemNo@1005 : Code[20];Quantity@1004 : Decimal) : Code[10];
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(ReclassItemJournalTemplate,ReclassItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ReclassItemJournalTemplate.Name,ReclassItemJournalBatch.Name,ItemJournalLine."Entry Type"::Transfer,ItemNo,
        Quantity);
      UpdateLocationAndBinOnItemJournalLine(ItemJournalLine,Bin."Location Code",Bin.Code);
      ItemJournalLine.VALIDATE("New Location Code",Bin2."Location Code");
      ItemJournalLine.VALIDATE("New Bin Code",Bin2.Code);
      ItemJournalLine.VALIDATE(Description,LibraryUtility.GenerateGUID);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ReclassItemJournalTemplate.Name,ReclassItemJournalBatch.Name);
      EXIT(ItemJournalLine.Description);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrder@162(VAR PurchaseHeader@1001 : Record 38;ItemNo@1003 : Code[20];Quantity@1004 : Decimal;LocationCode@1005 : Code[10]) PostedDocumentNo : Code[20];
    VAR
      Vendor@1000 : Record 23;
      PurchaseLine@1002 : Record 39;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,ItemNo,Quantity,LocationCode,FALSE);  // Use Tracking as FALSE.
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Receive as TRUE.
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrderWithLotItemTracking@172(VAR PurchaseHeader@1000 : Record 38;VendorNo@1003 : Code[20];ItemNo@1004 : Code[20];Quantity@1005 : Decimal;LocationCode@1006 : Code[10];BinCode@1007 : Code[20]) LotNo : Code[20];
    VAR
      PurchaseLine@1002 : Record 39;
    BEGIN
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);  // Enqueue for ItemTrackingPageHandler.
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,VendorNo,ItemNo,Quantity,LocationCode,TRUE);  // Value required for the test. TRUE for Tracking.
      GetLotNoFromItemTrackingPageHandler(LotNo);
      UpdateBinCodeOnPurchaseLine(PurchaseLine,BinCode);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Post as RECEIVE.
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrderWithMultipleItems@62(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;ItemNo2@1004 : Code[20]);
    BEGIN
      CreatePurchaseOrderWithMultipleItems(PurchaseHeader,PurchaseLine,ItemNo,Quantity,'',ItemNo2,TRUE);  // Use Tracking as TRUE.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Post as Receive.
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseReturnOrderWithGetPostedDocumentLinesToRevere@161(VendorNo@1001 : Code[20]) PostedDocumentNo : Code[20];
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",VendorNo);
      PurchaseHeader.GetPstdDocLinesToRevere;
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Receive as TRUE.
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocument@302(VAR PurchaseHeader@1000 : Record 38;DocumentType@1006 : Option;VendorNo@1001 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10]);
    VAR
      PurchaseLine@1005 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,ItemNo,Quantity,LocationCode,FALSE);
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrder@158(VAR SalesHeader@1001 : Record 36;ItemNo@1003 : Code[20];Quantity@1005 : Decimal;LocationCode@1004 : Code[10]) PostedDocumentNo : Code[20];
    VAR
      Customer@1000 : Record 18;
      SalesLine@1002 : Record 37;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      CreateSalesLine(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode);
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);  // Ship as TRUE.
    END;

    LOCAL PROCEDURE CreateAndPostSalesCreditMemoWithGetPostedDocLinesToReverse@232(VAR SalesLine@1001 : Record 37;CustomerNo@1002 : Code[20];ItemNo@1004 : Code[20]) : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      LibraryVariableStorage.Enqueue(PostedSalesDocType::"Posted Return Receipts");  // Enqueue for PostedSalesDocumentLinesPageHandler.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",CustomerNo);
      SalesHeader.GetPstdDocLinesToRevere;
      UpdateUnitPriceOnSalesCreditMemoLine(SalesLine,ItemNo,SalesHeader."No.");
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));  // Post as SHIP and INVOICE.
    END;

    LOCAL PROCEDURE CreateAndPostSalesReturnOrderWithGetPostedDocumentLinesToReverse@194(CustomerNo@1001 : Code[20]) PostedDocumentNo : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",CustomerNo);
      LibraryVariableStorage.Enqueue(PostedSalesDocType::"Posted Shipments");  // Enqueue for PostedSalesDocumentLinesPageHandler.
      SalesHeader.GetPstdDocLinesToRevere;
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);  // Post as Receive.
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderWithQtyToAssembleToOrder@303(VAR SalesHeader@1001 : Record 36;CustomerNo@1002 : Code[20];ItemNo@1003 : Code[20];Quantity@1004 : Decimal;LocationCode@1005 : Code[10];Quantity2@1006 : Decimal);
    BEGIN
      CreateSalesOrderWithQtyToAssemble(SalesHeader,CustomerNo,ItemNo,Quantity,Quantity2,LocationCode);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPartiallyShipSalesOrderWithAlternateUOM@429(VAR SalesHeader@1004 : Record 36;CustomerNo@1007 : Code[20];ItemNo@1008 : Code[20];LocationCode@1009 : Code[10];SalesQty@1010 : Decimal;ShipQty@1011 : Decimal;ShipQtyBase@1012 : Decimal);
    VAR
      WarehouseShipmentHeader@1002 : Record 7320;
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      CreateAndReleaseSalesOrder(SalesHeader,CustomerNo,ItemNo,SalesQty,LocationCode);
      CreateWarehouseShipment(SalesHeader);
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      WarehouseShipmentLine.VALIDATE("Qty. to Ship",ShipQty);
      WarehouseShipmentLine."Qty. to Ship (Base)" := ShipQtyBase;
      WarehouseShipmentLine.MODIFY(TRUE);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoice@301(VAR SalesHeader@1000 : Record 36;CustomerNo@1001 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10]);
    VAR
      SalesLine@1005 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      CreateSalesLine(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseReceiptFromPurchaseOrder@179(VAR PurchaseHeader@1000 : Record 38;ItemNo@1003 : Code[20];Quantity@1004 : Decimal;LocationCode@1005 : Code[10]);
    VAR
      PurchaseLine@1001 : Record 39;
      Vendor@1002 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Vendor."No.",ItemNo,Quantity,LocationCode,FALSE);  // Item Tracking as FALSE.
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      CreateWarehouseReceipt(PurchaseHeader);
      PostWarehouseReceipt(PurchaseHeader."No.",ItemNo);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrderWithMultipleItemsAndJobNo@330(Item@1002 : ARRAY [2] OF Record 27;Quantity@1003 : Decimal;VAR LotNo@1010 : ARRAY [2] OF Code[20]) : Code[20];
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      JobTask@1004 : Record 1001;
      i@1009 : Integer;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');

      FOR i := 1 TO ARRAYLEN(Item) DO BEGIN
        LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);
        CreatePurchaseLine(PurchaseHeader,PurchaseLine,Item[i]."No.",Quantity,'',TRUE);
        CreateJobWithJobTask(JobTask);
        UpdateBinCodeJobNoAndJobTaskNoOnPurchaseLine(PurchaseLine,JobTask,'');
        GetLotNoFromItemTrackingPageHandler(LotNo[i]);
      END;

      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Post as Receive.
      EXIT(PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseReturnOrderWithMultipleItemsAndJobNo@332(Item@1002 : ARRAY [2] OF Record 27;Quantity@1003 : Decimal) : Code[20];
    VAR
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
      JobTask@1004 : Record 1001;
      i@1000 : Integer;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",'');

      FOR i := 1 TO ARRAYLEN(Item) DO BEGIN
        CreatePurchaseLine(PurchaseHeader,PurchaseLine,Item[i]."No.",Quantity,'',FALSE);
        CreateJobWithJobTask(JobTask);
        UpdateBinCodeJobNoAndJobTaskNoOnPurchaseLine(PurchaseLine,JobTask,'');
      END;

      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Post as Receive.
      EXIT(PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndRefreshProductionOrder@91(VAR ProductionOrder@1002 : Record 5405;ItemNo@1000 : Code[20];Quantity@1001 : Decimal;LocationCode@1003 : Code[10];BinCode@1005 : Code[20]);
    VAR
      LibraryManufacturing@1004 : Codeunit 132202;
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.VALIDATE("Bin Code",BinCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,TRUE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndRegisterPartialPutAwayFromWarehouseReceiptUsingPurchaseOrder@247(ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10];QuantityToHandle@1004 : Decimal);
    VAR
      PurchaseHeader@1000 : Record 38;
      WarehouseActivityLine@1005 : Record 5767;
    BEGIN
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,ItemNo,Quantity,LocationCode);
      UpdateQuantityToHandleOnPutAwayLine(PurchaseHeader."No.",QuantityToHandle);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE CreateAndRegisterPutAwayFromPurchaseOrder@90(SourceNo@1001 : Code[20];ItemNo@1003 : Code[20];LocationCode@1002 : Code[10]);
    VAR
      Bin@1000 : Record 7354;
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      PostWarehouseReceipt(SourceNo,ItemNo);
      FindPickBin(Bin,LocationCode);
      UpdateBinCodeOnPutAwayLine(Bin,SourceNo);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE CreateAndRegisterPutAwayFromWarehouseReceiptUsingPurchaseOrder@204(ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10]);
    VAR
      PurchaseHeader@1000 : Record 38;
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,ItemNo,Quantity,LocationCode);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE CreateAndRegisterPickFromWarehouseShipment@360(SalesOrderNo@1002 : Code[20];NewLotNo@1003 : Code[20]);
    VAR
      WarehouseShipmentHeader@1000 : Record 7320;
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesOrderNo);
      RegisterWarehouseActivityWithNewLotNo(SalesOrderNo,NewLotNo);
    END;

    LOCAL PROCEDURE CreateAndRegisterPickFromWarehouseShipmentUsingSalesOrder@202(CustomerNo@1002 : Code[20];ItemNo@1001 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10]);
    VAR
      SalesHeader@1000 : Record 36;
      WarehouseActivityLine@1005 : Record 5767;
    BEGIN
      CreatePickFromWarehouseShipmentUsingSalesOrder(SalesHeader,CustomerNo,ItemNo,Quantity,LocationCode,TRUE);  // Reserve as TRUE.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
    END;

    LOCAL PROCEDURE CreateAndRegisterPickUsingPickWorksheet@121(LocationCode@1001 : Code[10];WarehouseShipmentHeaderNo@1002 : Code[20];WarehouseShipmentHeaderNo2@1003 : Code[20];ItemNo@1004 : Code[20];ItemNo2@1005 : Code[20];SourceNo@1006 : Code[20]);
    VAR
      WhseWorksheetName@1000 : Record 7327;
      WarehouseActivityLine@1007 : Record 5767;
    BEGIN
      GetWarehouseDocumentOnWarehouseWorksheetLine(
        WhseWorksheetName,LocationCode,WarehouseShipmentHeaderNo,WarehouseShipmentHeaderNo2);
      CreatePickFromPickWorksheet(WhseWorksheetName,ItemNo,ItemNo2);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SourceNo,WarehouseActivityLine."Activity Type"::Pick);
    END;

    LOCAL PROCEDURE CreateAndRegisterPickFromSalesOrderWithLotItemTracking@198(VAR SalesHeader@1001 : Record 36;ItemNo@1004 : Code[20];Quantity@1005 : Decimal;LocationCode@1006 : Code[10]);
    VAR
      Customer@1002 : Record 18;
      WarehouseActivityLine@1007 : Record 5767;
      WarehouseShipmentHeader@1008 : Record 7320;
      WarehouseShipmentLine@1009 : Record 7321;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      CreateSalesOrderWithItemTracking(SalesHeader,Customer."No.",ItemNo,Quantity,LocationCode);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateWarehouseShipment(SalesHeader);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
    END;

    LOCAL PROCEDURE CreateAndRegisterWarehouseJournalLine@196(Bin@1003 : Record 7354;Item@1002 : Record 27;Quantity@1001 : Decimal;UnitOfMeasureCode@1000 : Code[10];ItemTracking@1005 : Boolean);
    VAR
      WarehouseJournalLine@1004 : Record 7311;
    BEGIN
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",
        Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);
      WarehouseJournalLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      WarehouseJournalLine.MODIFY(TRUE);
      IF ItemTracking THEN
        WarehouseJournalLine.OpenItemTrackingLines;
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",TRUE);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithLotTrackingAndNonePlanningFlexibility@149(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1002 : Record 39;VendorNo@1001 : Code[20];ItemNo@1003 : Code[20];Quantity@1004 : Decimal;LocationCode@1005 : Code[10]) LotNo : Code[20];
    VAR
      ItemTrackingMode@1006 : 'AssignLotNo,SelectEntries,AssignSerialNo,UpdateQtyOnFirstLine,UpdateQtyOnLastLine';
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);  // Enqueue for ItemTrackingPageHandler.
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,ItemNo,Quantity,LocationCode,TRUE);  // Use Tracking as TRUE.
      UpdatePlanningFlexibilityOnPurchaseLine(PurchaseLine);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      GetLotNoFromItemTrackingPageHandler(LotNo);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithMultipleLinesAndReservation@214(VAR SalesHeader@1001 : Record 36;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10];Quantity2@1006 : Decimal);
    VAR
      SalesLine@1005 : Record 37;
    BEGIN
      CreateSalesOrder(SalesHeader,'',ItemNo,Quantity,LocationCode,TRUE);  // Reserve as TRUE.
      CreateSalesLine(SalesHeader,SalesLine,ItemNo,Quantity2,LocationCode);
      SalesLine.ShowReservation;
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesDocumentWithShippingAdviceAsComplete@8(VAR SalesHeader@1000 : Record 36;DocumentType@1005 : Option;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10]);
    BEGIN
      CreateAndReleaseSalesDocumentShippingAdviceCompletePartToShip(SalesHeader,DocumentType,ItemNo,Quantity,Quantity,LocationCode);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesDocumentShippingAdviceCompletePartToShip@391(VAR SalesHeader@1000 : Record 36;DocumentType@1005 : Option;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;QtyToShip@1006 : Decimal;LocationCode@1004 : Code[10]);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      CreateSalesHeaderWithShippingAdviceAsComplete(SalesHeader,DocumentType);
      CreateSalesLine(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode);
      SalesLine.VALIDATE("Qty. to Ship",QtyToShip);
      SalesLine.MODIFY;
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrder@11(VAR SalesHeader@1000 : Record 36;CustomerNo@1001 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10]);
    BEGIN
      CreateSalesOrder(SalesHeader,CustomerNo,ItemNo,Quantity,LocationCode,FALSE);  // Reserve as FALSE.
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithShipmentDate@148(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;CustomerNo@1002 : Code[20];ShipmentDate@1003 : Date;ItemNo@1004 : Code[20];Quantity@1005 : Decimal;LocationCode@1006 : Code[10]);
    BEGIN
      CreateSalesHeaderWithShipmentDate(SalesHeader,CustomerNo,ShipmentDate);
      CreateSalesLine(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseTransferOrder@216(VAR TransferHeader@1000 : Record 5740;FromLocationCode@1002 : Code[10];ToLocationCode@1003 : Code[10];ItemNo@1004 : Code[20];Quantity@1005 : Decimal);
    VAR
      TransferLine@1001 : Record 5741;
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocationCode,LocationInTransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseWarehouseShipment@237(VAR WarehouseShipmentHeader@1003 : Record 7320;VAR SalesHeader@1000 : Record 36);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      CreateWarehouseShipment(SalesHeader);
      GetWarehouseShipmentHeader(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseWarehouseShipmentFromSalesOrder@163(VAR SalesHeader@1000 : Record 36;VAR WarehouseShipmentHeader@1004 : Record 7320;VAR Item@1006 : Record 27;VAR Bin@1001 : Record 7354;Quantity@1002 : Decimal);
    BEGIN
      UpdateInventoryUsingWarehouseJournal(Bin,Item,Quantity,Item."Base Unit of Measure",FALSE);  // Use Tracking as FALSE.
      CreateAndReleaseSalesOrder(SalesHeader,'',Item."No.",Quantity,Bin."Location Code");
      CreateAndReleaseWarehouseShipment(WarehouseShipmentHeader,SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndUpdateLocation@21(VAR Location@1000 : Record 14;RequirePutAway@1002 : Boolean;RequirePick@1003 : Boolean;RequireReceive@1006 : Boolean;RequireShipment@1005 : Boolean;BinMandatory@1001 : Boolean);
    VAR
      WarehouseEmployee@1004 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateLocationWMS(Location,BinMandatory,RequirePutAway,RequirePick,RequireReceive,RequireShipment);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
    END;

    LOCAL PROCEDURE CreateAndUpdateToDo@234(VAR ToDo@1000 : Record 5080;Contact@1001 : Record 5050);
    BEGIN
      LibraryMarketing.CreateToDo(ToDo);
      ToDo.VALIDATE(Date,WORKDATE);
      ToDo.VALIDATE("Contact No.",Contact."No.");
      ToDo.VALIDATE("Salesperson Code",Contact."Salesperson Code");
      ToDo.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAssembledItemWithLotTracking@80(VAR AssemblyItem@1000 : Record 27;VAR CompItem@1001 : Record 27;QtyPer@1002 : Decimal);
    VAR
      ItemTrackingCode@1003 : Record 6502;
    BEGIN
      LibraryInventory.CreateItem(CompItem);
      CreateAssemblyItemWithAsseblyBOM(AssemblyItem,CompItem."No.",QtyPer);
      LibraryItemTracking.AddLotNoTrackingInfo(AssemblyItem);

      ItemTrackingCode.GET(AssemblyItem."Item Tracking Code");
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",TRUE);
      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateContactWithToDos@261(VAR Contact@1000 : Record 5050);
    VAR
      ToDo@1002 : Record 5080;
      ToDo2@1001 : Record 5080;
    BEGIN
      LibraryMarketing.CreateContact(Contact);
      CreateAndUpdateToDo(ToDo,Contact);
      CreateAndUpdateToDo(ToDo2,Contact);
      UpdateOrganizerToDoNoOnToDo(ToDo2,ToDo."Organizer To-do No.");
    END;

    LOCAL PROCEDURE CreateCurrencyWithExchangeRate@169(VAR CurrencyExchangeRate@1001 : Record 330);
    VAR
      Currency@1000 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      Currency."Invoice Rounding Precision" := LibraryERM.GetAmountRoundingPrecision;
      Currency.MODIFY;

      CreateCurrencyExchangeRate(
        CurrencyExchangeRate,Currency.Code,CALCDATE('<' + FORMAT(-LibraryRandom.RandInt(5)) + 'Y>',WORKDATE));
      CreateCurrencyExchangeRate(CurrencyExchangeRate,Currency.Code,WORKDATE);
    END;

    LOCAL PROCEDURE CreateCurrencyExchangeRate@180(VAR CurrencyExchangeRate@1000 : Record 330;CurrencyCode@1001 : Code[10];StartingDate@1002 : Date);
    BEGIN
      LibraryERM.CreateExchRate(CurrencyExchangeRate,CurrencyCode,StartingDate);
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",LibraryRandom.RandDec(100,2));
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",LibraryRandom.RandDec(50,2));
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithShipmentMethod@184(VAR Customer@1000 : Record 18);
    VAR
      ShipmentMethod@1001 : Record 10;
    BEGIN
      ShipmentMethod.FINDFIRST;
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Shipment Method Code",ShipmentMethod.Code);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithVATBusPostingGroup@209(VAR Customer@1000 : Record 18;VATBusPostingGroup@1001 : Code[10]);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("VAT Bus. Posting Group",VATBusPostingGroup);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDimensionForItem@342(ItemNo@1000 : Code[20]);
    VAR
      DefaultDimension@1002 : Record 352;
      Dimension@1003 : Record 348;
      DimensionValue@1001 : Record 349;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::Item,ItemNo,DimensionValue."Dimension Code",DimensionValue.Code);
      DefaultDimension.VALIDATE("Value Posting",DefaultDimension."Value Posting"::"Code Mandatory");
      DefaultDimension.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateInventoryActivity@19(SourceDocument@1004 : Option;SourceNo@1001 : Code[20];PutAway@1003 : Boolean;Pick@1002 : Boolean);
    VAR
      WarehouseRequest@1000 : Record 5765;
    BEGIN
      WarehouseRequest.SETRANGE("Source Document",SourceDocument);
      WarehouseRequest.SETRANGE("Source No.",SourceNo);
      WarehouseRequest.FINDFIRST;
      LibraryWarehouse.CreateInvtPutAwayPick(WarehouseRequest,PutAway,Pick,FALSE);
    END;

    LOCAL PROCEDURE CreateInTransitLocation@221();
    BEGIN
      LibraryWarehouse.CreateInTransitLocation(LocationInTransit);
    END;

    LOCAL PROCEDURE CreateItemAndRegisterWarehouseJournalLineWithItemTracking@277(VAR Bin@1000 : Record 7354;VAR Item@1001 : Record 27;Quantity@1003 : Decimal;LocationCode@1005 : Code[10]) LotNo : Code[20];
    VAR
      DequeueVariable@1004 : Variant;
      ItemTrackingMode@1002 : 'AssignLotNo,SelectLotNo';
    BEGIN
      CreateItemWithItemTrackingCode(Item,TRUE,FALSE,LibraryUtility.GetGlobalNoSeriesCode,'');  // TRUE for Lot.
      FindPickBin(Bin,LocationCode);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);  // Enqueue for WhseItemTrackingLinesHandler.
      CreateAndRegisterWarehouseJournalLine(Bin,Item,Quantity,Item."Base Unit of Measure",TRUE);  // TRUE for Tracking.
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LotNo := DequeueVariable;
    END;

    LOCAL PROCEDURE CreateItemUnitOfMeasure@74(VAR ItemUnitOfMeasure@1000 : Record 5404;ItemNo@1001 : Code[20];Qty@1003 : Decimal);
    VAR
      UnitOfMeasure@1002 : Record 204;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUnitOfMeasure,ItemNo,UnitOfMeasure.Code,Qty);
    END;

    LOCAL PROCEDURE CreateItemWithSalesUOM@427(QtyPerUOM@1000 : Decimal) ItemNo : Code[20];
    VAR
      Item@1002 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
    BEGIN
      ItemNo := LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",QtyPerUOM);
      Item.VALIDATE("Sales Unit of Measure",ItemUnitOfMeasure.Code);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithMultipleUOM@295(VAR Item@1001 : Record 27;VAR ItemUnitOfMeasure@1003 : Record 5404;VAR ItemUnitOfMeasure1@1000 : Record 5404);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::Order); // Reordering Policy should not be blank.
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",1);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure1,Item."No.",LibraryRandom.RandInt(5) + 1);
      Item.VALIDATE("Base Unit of Measure",ItemUnitOfMeasure.Code);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithProductionBOM@109(VAR ParentItem@1000 : Record 27;VAR ChildItem@1001 : Record 27;QuantityPer@1004 : Decimal);
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
    BEGIN
      CreateItemWithVendorNoAndReorderingPolicy(ParentItem,'',ParentItem."Reordering Policy"::" ");
      UpdateReplenishmentSystemAsProdOrderOnItem(ParentItem);
      CreateItemWithItemTrackingCode(ChildItem,TRUE,FALSE,LibraryUtility.GetGlobalNoSeriesCode,'');  // True for Lot.
      CreateAndCertifyBOM(ProductionBOMHeader,ChildItem."Base Unit of Measure",ChildItem."No.",QuantityPer);
      UpdateProductionBOMOnItem(ParentItem,ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateItemWithOrderReorderPolicyAndProductionBOM@290(VAR Item@1000 : Record 27;VAR ComponentItem@1001 : Record 27) Quantity : Decimal;
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
    BEGIN
      CreateItemWithVendorNoAndReorderingPolicy(Item,'',Item."Reordering Policy"::Order);
      CreateItemWithVendorNoAndReorderingPolicy(ComponentItem,LibraryPurchase.CreateVendorNo,ComponentItem."Reordering Policy"::Order);
      Quantity := LibraryRandom.RandInt(100);
      CreateAndCertifyBOM(ProductionBOMHeader,Item."Base Unit of Measure",ComponentItem."No.",Quantity);
      UpdateProductionBOMOnItem(Item,ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateItemWithItemTrackingCode@47(VAR Item@1003 : Record 27;Lot@1000 : Boolean;Serial@1001 : Boolean;LotNos@1004 : Code[10];SerialNos@1005 : Code[10]);
    VAR
      ItemTrackingCode@1002 : Record 6502;
    BEGIN
      CreateItemTrackingCode(ItemTrackingCode,Lot,Serial);
      LibraryInventory.CreateTrackedItem(Item,LotNos,SerialNos,ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateItemWithVendorNoAndReorderingPolicy@101(VAR Item@1000 : Record 27;VendorNo@1004 : Code[20];ReorderingPolicy@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Vendor No.",VendorNo);
      Item.VALIDATE("Reordering Policy",ReorderingPolicy);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAssemblyItemWithAsseblyBOM@399(VAR AssemblyItem@1001 : Record 27;CompItem@1002 : Code[20];QuantityPer@1003 : Decimal);
    VAR
      BOMComponent@1000 : Record 90;
    BEGIN
      LibraryAssembly.CreateItem(AssemblyItem,AssemblyItem."Costing Method",AssemblyItem."Replenishment System"::Assembly,'','');
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,CompItem,AssemblyItem."No.",'',BOMComponent."Resource Usage Type",QuantityPer,TRUE);
    END;

    LOCAL PROCEDURE CreateAssemblyItemWithMultipleBOMComponents@305(VAR CompItem@1002 : Record 27;VAR CompItem2@1003 : Record 27) : Code[10];
    VAR
      AssemblyItem@1001 : Record 27;
      BOMComponent@1000 : Record 90;
    BEGIN
      LibraryPatterns.MAKEItemWithExtendedText(CompItem,ExtendedTxt,CompItem."Costing Method"::FIFO,0);
      LibraryAssembly.CreateItem(CompItem2,CompItem2."Costing Method",CompItem."Replenishment System"::Purchase,'','');
      CreateAssemblyItemWithAsseblyBOM(AssemblyItem,CompItem."No.",LibraryRandom.RandDec(10,2));
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,CompItem2."No.",AssemblyItem."No.",'',
        BOMComponent."Resource Usage Type",LibraryRandom.RandDec(10,2),TRUE);
      EXIT(AssemblyItem."No.");
    END;

    LOCAL PROCEDURE CreateJobWithJobTask@49(VAR JobTask@1002 : Record 1001);
    VAR
      Job@1001 : Record 167;
      LibraryJob@1000 : Codeunit 131920;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
    END;

    LOCAL PROCEDURE CreateLotForLotItem@147(VAR Item@1001 : Record 27);
    BEGIN
      CreateItemWithItemTrackingCode(Item,TRUE,FALSE,LibraryUtility.GetGlobalNoSeriesCode,'');  // True for Lot.
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.VALIDATE(Reserve,Item.Reserve::Never);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLotItemWithStandardCostingMethod@286(VAR Item@1000 : Record 27);
    BEGIN
      CreateItemWithItemTrackingCode(Item,TRUE,FALSE,LibraryUtility.GetGlobalNoSeriesCode,'');  // TRUE for Lot.
      Item.VALIDATE("Costing Method",Item."Costing Method"::Standard);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@48(VAR ItemTrackingCode@1001 : Record 6502;Lot@1000 : Boolean;Serial@1002 : Boolean);
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,Serial,Lot);
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",Lot);
      ItemTrackingCode.VALIDATE("SN Warehouse Tracking",Serial);
      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateNegativePurchaseLineAndApplyToItemEntry@160(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10];DocumentNo@1006 : Code[20]);
    VAR
      ItemLedgerEntry@1005 : Record 32;
    BEGIN
      FindItemLedgerEntryWithDocumentNo(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Purchase,DocumentNo,ItemNo);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,ItemNo,Quantity,LocationCode,FALSE);  // Use Tracking as FALSE.
      PurchaseLine.VALIDATE("Appl.-to Item Entry",ItemLedgerEntry."Entry No.");
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateNegativeSalesLineAndApplyFromItemEntry@159(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10];DocumentNo@1006 : Code[20]);
    VAR
      ItemLedgerEntry@1005 : Record 32;
    BEGIN
      FindItemLedgerEntryWithDocumentNo(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Sale,DocumentNo,ItemNo);
      CreateSalesLine(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode);
      SalesLine.VALIDATE("Appl.-from Item Entry",ItemLedgerEntry."Entry No.");
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateNoSeriesLine@258(VAR NoSeriesLine@1000 : Record 309;NoSeriesCode@1001 : Code[10];StartingDate@1002 : Date);
    BEGIN
      LibraryUtility.CreateNoSeriesLine(NoSeriesLine,NoSeriesCode,LibraryUtility.GenerateGUID,LibraryUtility.GenerateGUID);
      NoSeriesLine.VALIDATE("Starting Date",StartingDate);
      NoSeriesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateNoSeriesWithDifferentStartingDates@253(VAR NoSeriesLine@1000 : Record 309);
    VAR
      NoSeries@1001 : Record 308;
    BEGIN
      LibraryUtility.CreateNoSeries(NoSeries,TRUE,TRUE,FALSE);  // Use True for Default and Manual.
      CreateNoSeriesLine(NoSeriesLine,NoSeries.Code,WORKDATE);
      CreateNoSeriesLine(NoSeriesLine,NoSeries.Code,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE));
    END;

    LOCAL PROCEDURE CreatePartialPick@356(VAR WhseWorksheetName@1004 : Record 7327;VAR WhseWorksheetLine@1003 : Record 7326;VAR LocationCode@1012 : Code[10];QtyOnPO@1000 : Decimal;QtyResvdOnILE@1002 : Decimal;QtyOnInventory@1001 : Decimal);
    VAR
      Location@1010 : Record 14;
      Item@1006 : Record 27;
      PurchaseHeader@1009 : Record 38;
      PurchaseLine@1008 : Record 39;
      SalesHeader@1007 : Record 36;
      ItemNo@1005 : Code[20];
    BEGIN
      // Item with Inventory "X"
      LocationCode := LibraryService.CreateDefaultYellowLocation(Location);
      CreateInventory(ItemNo,LocationCode,QtyOnInventory);
      Item.GET(ItemNo);

      // Purchase Order for Item with Qty = "Y"
      CreatePurchaseOrder(
        PurchaseHeader,PurchaseLine,LibraryPurchase.CreateVendorNo,ItemNo,QtyOnPO,LocationCode,FALSE);

      // Sales Order for Item with Partial Reserved Qty = "Q", where "Q" = "X" + "Y"
      // Released Warehouse Shipment
      // Pick Worksheet Line for Item
      CreateReleasedSalesOrder(SalesHeader,ItemNo,Item."Base Unit of Measure",QtyResvdOnILE + QtyOnPO,LocationCode,TRUE);
      CreatePartialPickForWhseShipment(SalesHeader,WhseWorksheetName,WhseWorksheetLine,LocationCode);
    END;

    LOCAL PROCEDURE CreateInventory@358(VAR ItemNo@1004 : Code[20];LocationCode@1012 : Code[10];QtyOnInventory@1001 : Decimal);
    VAR
      Item@1000 : Record 27;
      Bin@1007 : Record 7354;
      Location@1002 : Record 14;
    BEGIN
      ItemNo := LibraryInventory.CreateItem(Item);
      Location.GET(LocationCode);
      LibraryWarehouse.CreateBin(Bin,Location.Code,'','','');
      LibraryPatterns.POSTPositiveAdjustment(
        Item,LocationCode,'',Bin.Code,QtyOnInventory,WORKDATE,LibraryRandom.RandDec(9,2));
    END;

    LOCAL PROCEDURE CreatePartialPickForWhseShipment@359(SalesHeader@1002 : Record 36;VAR WhseWorksheetName@1004 : Record 7327;VAR WhseWorksheetLine@1003 : Record 7326;LocationCode@1012 : Code[10]);
    BEGIN
      CreateAndReleaseWhseShipment(SalesHeader);
      GetWhseDocument(WhseWorksheetName,LocationCode);
      FindWhseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,LocationCode);
    END;

    LOCAL PROCEDURE AddItemUOM@376(ItemNo@1000 : Code[20];QtyPerUOM@1001 : Decimal) : Code[10];
    VAR
      ItemUnitOfMeasure@1002 : Record 5404;
      UnitOfMeasure@1003 : Record 204;
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUnitOfMeasure,ItemNo,UnitOfMeasure.Code,QtyPerUOM);
      EXIT(ItemUnitOfMeasure.Code);
    END;

    LOCAL PROCEDURE CreatePick@272(VAR WarehouseShipmentHeader@1003 : Record 7320;SourceDocument@1000 : Option;SourceNo@1001 : Code[20]);
    BEGIN
      GetWarehouseShipmentHeader(WarehouseShipmentHeader,SourceDocument,SourceNo);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreatePickFromPickWorksheet@165(WhseWorksheetName@1000 : Record 7327;ItemNo@1002 : Code[20];ItemNo2@1003 : Code[20]);
    VAR
      WhseWorksheetLine@1001 : Record 7326;
    BEGIN
      FindWarehouseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,WhseWorksheetName."Location Code",ItemNo,ItemNo2);
      LibraryWarehouse.CreatePickFromPickWorksheet(
        WhseWorksheetLine,0,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,WhseWorksheetName."Location Code",'',
        0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);  // Taking 0 for Line No, MaxNoOfSourceDoc and SortPick.
    END;

    LOCAL PROCEDURE CreatePickFromWarehouseInternalPickWithMultipleLines@183(VAR WhseInternalPickHeader@1000 : Record 7333;Bin@1010 : Record 7354;Item@1004 : Record 27;Quantity@1006 : Decimal;UnitOfMeasureCode@1001 : Code[10];LotNo@1005 : Code[20];LotNo2@1008 : Code[20]);
    VAR
      WhseInternalPickLine@1003 : Record 7334;
      WhseInternalPickRelease@1007 : Codeunit 7315;
    BEGIN
      CreateWarehouseInternalPickHeader(WhseInternalPickHeader,Bin."Location Code",Bin.Code);
      CreateWarehouseInternalPickLine(WhseInternalPickHeader,Item."No.",Quantity,Item."Base Unit of Measure",LotNo);
      CreateWarehouseInternalPickLine(WhseInternalPickHeader,Item."No.",Quantity,UnitOfMeasureCode,LotNo2);
      WhseInternalPickRelease.Release(WhseInternalPickHeader);
      LibraryVariableStorage.Enqueue(PickActivityCreatedMsg);  // Enqueue for MessageHandler.
      WhseInternalPickLine.SETRANGE("No.",WhseInternalPickHeader."No.");
      WhseInternalPickLine.CreatePickDoc(WhseInternalPickLine,WhseInternalPickHeader);
    END;

    LOCAL PROCEDURE CreatePickFromWarehouseShipment@87(VAR SalesHeader@1000 : Record 36;VAR WarehouseShipmentHeader@1003 : Record 7320;ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      CreateAndReleaseSalesOrder(SalesHeader,'',ItemNo,Quantity,'');
      GetSourceDocumentOnWarehouseShipment(WarehouseShipmentHeader);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreatePickFromWarehouseShipmentUsingSalesOrder@177(VAR SalesHeader@1000 : Record 36;CustomerNo@1001 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10];Reserve@1006 : Boolean);
    VAR
      WarehouseShipmentHeader@1005 : Record 7320;
      WarehouseShipmentLine@1007 : Record 7321;
    BEGIN
      CreateSalesOrder(SalesHeader,CustomerNo,ItemNo,Quantity,LocationCode,Reserve);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateWarehouseShipment(SalesHeader);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreatePickFromWarehouseShipmentUsingTransferOrder@324(FromLocationCode@1001 : Code[10];ToLocationCode@1004 : Code[10];ItemNo@1002 : Code[20];Quantity@1003 : Decimal) : Code[20];
    VAR
      TransferHeader@1000 : Record 5740;
      WarehouseShipmentHeader@1005 : Record 7320;
      WarehouseShipmentLine@1006 : Record 7321;
    BEGIN
      CreateAndReleaseTransferOrder(TransferHeader,FromLocationCode,ToLocationCode,ItemNo,Quantity);
      CreateWarehouseShipmentFromTransferOrder(TransferHeader);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.");
      EXIT(TransferHeader."No.");
    END;

    LOCAL PROCEDURE CreatePickWorksheetLineUsingSalesOrderWithMultipleLinesAndReservation@201(VAR SalesHeader@1000 : Record 36;VAR WhseWorksheetName@1005 : Record 7327;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10];Quantity2@1004 : Decimal);
    VAR
      WarehouseShipmentHeader@1006 : Record 7320;
    BEGIN
      CreateAndReleaseSalesOrderWithMultipleLinesAndReservation(SalesHeader,ItemNo,Quantity,LocationCode,Quantity2);
      CreateAndReleaseWarehouseShipment(WarehouseShipmentHeader,SalesHeader);
      GetWarehouseDocumentOnWarehouseWorksheetLine(WhseWorksheetName,LocationCode,WarehouseShipmentHeader."No.",'');
    END;

    LOCAL PROCEDURE CreateProdOrderWithBOMAndPostAdjmt@345(VAR ProductionOrder@1008 : Record 5405);
    VAR
      ParentItem@1006 : Record 27;
      CompItem@1005 : Record 27;
      Qty@1001 : Decimal;
    BEGIN
      Qty := CreateItemWithOrderReorderPolicyAndProductionBOM(ParentItem,CompItem);
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ParentItem."No.",Qty);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,TRUE,TRUE,TRUE,TRUE,FALSE);
      LibraryPatterns.POSTPositiveAdjustment(
        CompItem,'','','',LibraryRandom.RandDec(10,2),WORKDATE,LibraryPatterns.RandCost(CompItem));
    END;

    LOCAL PROCEDURE CreateProdOrderWithReservedComponent@372(VAR ProductionOrder@1000 : Record 5405);
    BEGIN
      CreateProdOrderWithBOMAndPostAdjmt(ProductionOrder);
      ReserveProdOrderComp(ProductionOrder."No.");
    END;

    LOCAL PROCEDURE CreatePurchaseHeaderWithLeadTimeCalculation@77(VAR PurchaseHeader@1000 : Record 38);
    VAR
      LeadTimeCalculation@1001 : DateFormula;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      EVALUATE(LeadTimeCalculation,'<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>');
      PurchaseHeader.VALIDATE("Lead Time Calculation",LeadTimeCalculation);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseHeaderWithSellToCustomerNo@156(VAR PurchaseHeader@1000 : Record 38;VendorNo@1002 : Code[20];SellToCustomerNo@1001 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      PurchaseHeader.VALIDATE("Sell-to Customer No.",SellToCustomerNo);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@2(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10];UseTracking@1005 : Boolean);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
      IF UseTracking THEN
        PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@27(VAR PurchaseHeader@1006 : Record 38;VAR PurchaseLine@1001 : Record 39;VendorNo@1005 : Code[20];ItemNo@1004 : Code[20];Quantity@1000 : Decimal;LocationCode@1002 : Code[10];ItemTracking@1003 : Boolean);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,ItemNo,Quantity,LocationCode,ItemTracking);
    END;

    LOCAL PROCEDURE CreateSpecialSaleOrderAndPurchaseOrder@337(VAR PurchaseHeader@1000 : Record 38;VAR SalesHeaderNo@1005 : Code[20]);
    VAR
      Item@1004 : Record 27;
      Customer@1003 : Record 18;
      ShipToAddress@1002 : Record 222;
      SalesHeader@1001 : Record 36;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateShipToAddress(ShipToAddress,Customer."No.");
      CreateSalesOrderWithSpecialOrder(SalesHeader,Customer."No.",ShipToAddress.Code,Item."No.");
      SalesHeaderNo := SalesHeader."No.";
      CreatePurchaseHeaderWithSellToCustomerNo(PurchaseHeader,'',SalesHeader."Sell-to Customer No.");
    END;

    LOCAL PROCEDURE CreatePurchaseOrderFromBlanketPurchaseOrderWithPartialQuantity@145(VAR PurchaseHeader@1000 : Record 38;ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    VAR
      PurchaseLine@1002 : Record 39;
      Vendor@1005 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Blanket Order",Vendor."No.");
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Qty. to Receive",Quantity / 2);  // Making Purchase Order of Half Quantity.
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.BlanketPurchaseOrderMakeOrder(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithMultipleItems@117(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10];ItemNo2@1006 : Code[20];UseTracking@1007 : Boolean);
    VAR
      PurchaseLine2@1005 : Record 39;
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,LibraryPurchase.CreateVendorNo,ItemNo,Quantity,LocationCode,FALSE);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine2,ItemNo2,Quantity,LocationCode,UseTracking);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithGetDropShipment@228(VAR PurchaseHeader@1000 : Record 38;CustomerNo@1001 : Code[20]);
    BEGIN
      CreatePurchaseHeaderWithSellToCustomerNo(PurchaseHeader,'',CustomerNo);
      LibraryPurchase.GetDropShipment(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithGetSpecialOrder@294(VAR PurchaseHeader@1000 : Record 38;CustomerNo@1001 : Code[20]);
    BEGIN
      CreatePurchaseHeaderWithSellToCustomerNo(PurchaseHeader,'',CustomerNo);
      LibraryPurchase.GetSpecialOrder(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithStandardCostItemUsingLot@284(VAR PurchaseHeader@1001 : Record 38;VAR PurchaseLine@1004 : Record 39;VAR Vendor@1000 : Record 23) LotNo : Code[20];
    VAR
      Item@1002 : Record 27;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      CreateLotItemWithStandardCostingMethod(Item);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);  // Enqueue for ItemTrackingPageHandler.
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Vendor."No.",Item."No.",LibraryRandom.RandDec(100,2),LocationBlue.Code,TRUE);  // Value required for the test. TRUE for Tracking.
      UpdateUnitCostOnPurchaseLine(PurchaseLine);
      GetLotNoFromItemTrackingPageHandler(LotNo);
    END;

    LOCAL PROCEDURE CreatePurchOrderWithInsertedExtendedText@329(VAR PurchaseHeader@1000 : Record 38;VAR PurchLine@1001 : Record 39;ItemNo@1002 : Code[20]);
    VAR
      TransferExtendedText@1003 : Codeunit 378;
    BEGIN
      CreatePurchaseOrder(
        PurchaseHeader,PurchLine,'',ItemNo,LibraryRandom.RandDec(10,2),'',FALSE);
      FindPurchaseLine(PurchLine,ItemNo);
      TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,TRUE);
      TransferExtendedText.InsertPurchExtText(PurchLine);
    END;

    PROCEDURE CreatePurchReturnOrderWithGetPstdDocLinesToReverse@285(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",PurchaseHeader."Buy-from Vendor No.");
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      PurchaseHeader.GetPstdDocLinesToRevere;
    END;

    LOCAL PROCEDURE CreatePurchasingCode@108(SpecialOrder@1001 : Boolean;DropShipment@1002 : Boolean) : Code[10];
    VAR
      Purchasing@1000 : Record 5721;
    BEGIN
      LibraryPurchase.CreatePurchasingCode(Purchasing);
      Purchasing.VALIDATE("Special Order",SpecialOrder);
      Purchasing.VALIDATE("Drop Shipment",DropShipment);
      Purchasing.MODIFY(TRUE);
      EXIT(Purchasing.Code);
    END;

    LOCAL PROCEDURE CreateSalesHeaderWithShipmentDate@171(VAR SalesHeader@1000 : Record 36;CustomerNo@1002 : Code[20];ShipmentDate@1001 : Date);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      SalesHeader.VALIDATE("Shipment Date",ShipmentDate);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesHeaderWithShippingAdviceAsComplete@9(VAR SalesHeader@1000 : Record 36;DocumentType@1001 : Option);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,'');
      SalesHeader.VALIDATE("Shipping Advice",SalesHeader."Shipping Advice"::Complete);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesHeaderWithShipToCode@94(VAR SalesHeader@1000 : Record 36;CustomerNo@1001 : Code[20];ShipToCode@1002 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      SalesHeader.VALIDATE("Ship-to Code",ShipToCode);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLine@72(VAR SalesHeader@1004 : Record 36;VAR SalesLine@1003 : Record 37;ItemNo@1001 : Code[20];Quantity@1000 : Decimal;LocationCode@1002 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandInt(50));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSpecialSaleOrderAndPurchaseOrderWithDifferentShipToCode@347(VAR PurchaseHeader@1001 : Record 38;VAR SalesShipToCode@1000 : Code[20];VAR PurchaseShipToCode@1007 : Code[20]);
    VAR
      ShipToAddress@1002 : Record 222;
      SalesHeader@1004 : Record 36;
      SalesHeaderNo@1005 : Code[20];
    BEGIN
      CreateSpecialSaleOrderAndPurchaseOrder(PurchaseHeader,SalesHeaderNo);
      WITH SalesHeader DO BEGIN
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE("No.",SalesHeaderNo);
        FINDFIRST;
        SalesShipToCode := "Ship-to Code";
        LibrarySales.CreateShipToAddress(ShipToAddress,"Sell-to Customer No.");
      END;
      WITH PurchaseHeader DO BEGIN
        VALIDATE("Ship-to Code",ShipToAddress.Code);
        MODIFY;
        PurchaseShipToCode := "Ship-to Code";
      END;
    END;

    LOCAL PROCEDURE CreateSalesLineWithPurchasingCode@97(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10];PurchasingCode@1005 : Code[10]);
    BEGIN
      CreateSalesLine(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode);
      SalesLine.VALIDATE("Purchasing Code",PurchasingCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@22(VAR SalesHeader@1001 : Record 36;CustomerNo@1006 : Code[20];ItemNo@1004 : Code[20];Quantity@1003 : Decimal;LocationCode@1005 : Code[10];Reserve@1002 : Boolean);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      CreateSalesLine(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode);
      IF Reserve THEN
        SalesLine.ShowReservation;
    END;

    LOCAL PROCEDURE CreateReleasedSalesOrder@355(VAR SalesHeader@1001 : Record 36;ItemNo@1004 : Code[20];UOMCode@1006 : Code[10];Quantity@1003 : Decimal;LocationCode@1005 : Code[10];DoReserve@1007 : Boolean);
    VAR
      SalesLine@1000 : Record 37;
      Customer@1002 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      CreateSalesLine(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode);
      WITH SalesLine DO BEGIN
        VALIDATE("Unit of Measure Code",UOMCode);
        VALIDATE("Shipment Date",WORKDATE + LibraryRandom.RandInt(5));
        MODIFY;
        IF DoReserve THEN
          ShowReservation;
      END;
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateSalesOrderAndWarehouseShipment@327(VAR SalesHeader@1000 : Record 36;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;QtyToAssemble@1003 : Decimal;LocationCode@1004 : Code[10]);
    BEGIN
      CreateSalesOrderWithQtyToAssemble(SalesHeader,'',ItemNo,Quantity,QtyToAssemble,LocationCode);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
    END;

    LOCAL PROCEDURE CreateSalesOrderAndWhseShptWithPartialSupplyFromAsmAndInventory@377(VAR SalesHeader@1000 : Record 36;VAR LotNo@1001 : ARRAY [2] OF Code[20];QtyOnInventory@1005 : Decimal;QtyToAssemble@1004 : Decimal);
    VAR
      AssemblyItem@1002 : Record 27;
      CompItem@1003 : Record 27;
      Bin@1006 : Record 7354;
    BEGIN
      CreateAssembledItemWithLotTracking(AssemblyItem,CompItem,1);
      FindPickBin(Bin,LocationWhite.Code);

      UpdateInventoryUsingWarehouseJournal(Bin,CompItem,QtyToAssemble,CompItem."Base Unit of Measure",FALSE);
      CreateSalesOrderAndWarehouseShipment(
        SalesHeader,AssemblyItem."No.",QtyOnInventory + QtyToAssemble,QtyToAssemble,LocationWhite.Code);

      LotNo[1] := AssignLotNoToAssemblyItem(SalesHeader."Document Type",SalesHeader."No.");
      LotNo[2] :=
        UpdateInventoryUsingWarehouseJournalWithLotItemTracking(AssemblyItem,Bin,QtyOnInventory,AssemblyItem."Base Unit of Measure");
    END;

    LOCAL PROCEDURE CreateSalesOrderWithDifferentBillToCustomerNo@231(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1000 : Record 37;VAR Customer@1003 : Record 18;VAR Item@1005 : Record 27);
    VAR
      Customer2@1004 : Record 18;
      VATPostingSetup@1002 : Record 325;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type");
      CreateItemWithVendorNoAndReorderingPolicy(Item,'',Item."Reordering Policy"::" ");
      UpdateVATProdPostingGroupOnItem(Item,VATPostingSetup."VAT Prod. Posting Group");
      CreateCustomerWithVATBusPostingGroup(Customer,VATPostingSetup."VAT Bus. Posting Group");
      CreateCustomerWithVATBusPostingGroup(Customer2,VATPostingSetup."VAT Bus. Posting Group");
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      LibraryVariableStorage.Enqueue(ChangeBillToCustomerNoConfirmQst);  // Enqueue for ConfirmHandler.
      SalesHeader.VALIDATE("Bill-to Customer No.",Customer2."No.");
      SalesHeader.MODIFY(TRUE);
      CreateSalesLine(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2),'');
    END;

    LOCAL PROCEDURE CreateSalesOrderWithSpecialOrder@103(VAR SalesHeader@1000 : Record 36;CustomerNo@1001 : Code[20];ShipToCode@1002 : Code[10];ItemNo@1003 : Code[20]);
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      CreateSalesHeaderWithShipToCode(SalesHeader,CustomerNo,ShipToCode);
      CreateSalesLineWithPurchasingCode(
        SalesHeader,SalesLine,ItemNo,LibraryRandom.RandDec(10,2),'',CreatePurchasingCode(TRUE,FALSE));  // TRUE for Special Order.
    END;

    LOCAL PROCEDURE CreateSalesOrderWithDropShipment@297(VAR SalesHeader@1002 : Record 36;CustomerNo@1005 : Code[20];ItemNo@1004 : Code[20]);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      CreateSalesLineWithPurchasingCode(
        SalesHeader,SalesLine,ItemNo,LibraryRandom.RandDec(10,2),'',CreatePurchasingCode(FALSE,TRUE));  // TRUE for Drop Shipment.
    END;

    LOCAL PROCEDURE CreateSalesOrderWithDropShipmentAndSerialItemTracking@227(VAR SalesHeader@1002 : Record 36;VAR SalesLine@1001 : Record 37);
    VAR
      Customer@1003 : Record 18;
      Item@1000 : Record 27;
    BEGIN
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE,'',LibraryUtility.GetGlobalNoSeriesCode);  // TRUE for Serial.
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
      CreateSalesLineWithPurchasingCode(
        SalesHeader,SalesLine,Item."No.",1 + LibraryRandom.RandInt(10),'',CreatePurchasingCode(FALSE,TRUE));  // TRUE for Drop Shipment. Quantity required greater than 1 for the test.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignSerialNo);  // Enqueue for ItemTrackingPageHandler.
      LibraryVariableStorage.Enqueue(AvailabilityWarningsConfirmMsg);  // Enqueue for ConfirmHandler.
      SalesLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateSalesOrderWithItemTracking@24(VAR SalesHeader@1000 : Record 36;CustomerNo@1002 : Code[20];ItemNo@1005 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10]);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      CreateSalesOrder(SalesHeader,CustomerNo,ItemNo,Quantity,LocationCode,FALSE);
      FindSalesLine(SalesLine,SalesHeader."Document Type"::Order,SalesHeader."No.");
      LibraryVariableStorage.Enqueue(ItemTrackingMode::SelectEntries);  // Enqueue for ItemTrackingPageHandler.
      SalesLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateSalesOrderWithQtyToAssemble@96(VAR SalesHeader@1000 : Record 36;CustomerNo@1001 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal;QtyToAssemble@1004 : Decimal;LocationCode@1005 : Code[10]);
    VAR
      MfgSetup@1006 : Record 99000765;
      SalesLine@1007 : Record 37;
    BEGIN
      MfgSetup.GET;
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      CreateSalesLine(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode);
      SalesLine.VALIDATE("Shipment Date",CALCDATE(MfgSetup."Default Safety Lead Time",WORKDATE)); // To avoid Due Date Before Work Date message.
      SalesLine.VALIDATE("Qty. to Assemble to Order",QtyToAssemble);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithoutExternalDocumentNo@255(VAR SalesHeader@1002 : Record 36;VAR Customer@1001 : Record 18);
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateCustomer(Customer);
      CreateSalesOrder(SalesHeader,Customer."No.",Item."No.",LibraryRandom.RandDec(100,2),'',FALSE);
      UpdateExternalDocumentNoOnSalesOrder(SalesHeader,'');
    END;

    LOCAL PROCEDURE CreateSalesOrderWithInsertedExtendedText@384(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20]);
    VAR
      TransferExtendedText@1003 : Codeunit 378;
    BEGIN
      CreateSalesOrder(
        SalesHeader,'',ItemNo,LibraryRandom.RandDec(10,2),'',FALSE);
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.");
      TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,TRUE);
      TransferExtendedText.InsertSalesExtText(SalesLine);
    END;

    LOCAL PROCEDURE CreateVendorWithCurrencyExchangeRate@250(VAR Vendor@1002 : Record 23) : Decimal;
    VAR
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);
      LibraryPurchase.CreateVendor(Vendor);
      UpdateCurrencyCodeOnVendor(Vendor,CurrencyExchangeRate."Currency Code");
      EXIT(CurrencyExchangeRate."Exchange Rate Amount" / CurrencyExchangeRate."Relational Exch. Rate Amount"); // Value required for calculating Currency factor.
    END;

    LOCAL PROCEDURE CreateVendorWithShipmentMethod@210(VAR Vendor@1000 : Record 23;ShipmentMethodCode@1002 : Code[10]);
    VAR
      ShipmentMethod@1001 : Record 10;
    BEGIN
      ShipmentMethod.SETFILTER(Code,'<>%1',ShipmentMethodCode);
      ShipmentMethod.FINDFIRST;
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Shipment Method Code",ShipmentMethod.Code);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseInternalPickHeader@212(VAR WhseInternalPickHeader@1002 : Record 7333;LocationCode@1001 : Code[10];BinCode@1000 : Code[20]);
    BEGIN
      LibraryWarehouse.CreateWhseInternalPickHeader(WhseInternalPickHeader,LocationCode);
      WhseInternalPickHeader.VALIDATE("To Zone Code",'');
      WhseInternalPickHeader.VALIDATE("To Bin Code",BinCode);
      WhseInternalPickHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseInternalPickLine@215(VAR WhseInternalPickHeader@1001 : Record 7333;ItemNo@1006 : Code[20];Quantity@1005 : Decimal;UnitOfMeasureCode@1002 : Code[10];LotNo@1004 : Code[20]);
    VAR
      WhseInternalPickLine@1000 : Record 7334;
      ItemTrackingMode@1003 : 'AssignLotNo,SelectLotNo';
    BEGIN
      LibraryWarehouse.CreateWhseInternalPickLine(WhseInternalPickHeader,WhseInternalPickLine,ItemNo,Quantity);
      WhseInternalPickLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      WhseInternalPickLine.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::SelectLotNo);  // Enqueue for WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(LotNo);  // Enqueue for WhseItemTrackingLinesHandler.
      WhseInternalPickLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateWarehouseReceipt@58(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptFromPurchaseOrderWithMultipleItems@14(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1007 : Record 39;ItemNo@1003 : Code[20];Quantity@1004 : Decimal;LocationCode@1005 : Code[10];ItemNo2@1006 : Code[20]);
    BEGIN
      CreatePurchaseOrderWithMultipleItems(PurchaseHeader,PurchaseLine,ItemNo,Quantity,LocationCode,ItemNo2,FALSE);  // Use Tracking as FALSE.
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      CreateWarehouseReceipt(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseShipment@84(VAR SalesHeader@1000 : Record 36);
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseWhseShipment@390(SalesHeader@1000 : Record 36);
    VAR
      WarehouseShipmentHeader@1002 : Record 7320;
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      GetWarehouseShipmentHeader(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentFromTransferOrder@322(VAR TransferHeader@1000 : Record 5740);
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);
    END;

    LOCAL PROCEDURE CreateWhseReceiptFromPurchOrderSuggestedByReqWksh@291(VAR PurchaseHeader@1002 : Record 38;Item@1001 : Record 27);
    VAR
      PurchaseLine@1003 : Record 39;
      RequisitionWkshName@1000 : Record 245;
    BEGIN
      CalculatePlanForRequisitionWorksheet(RequisitionWkshName,Item,WORKDATE,WORKDATE);
      CarryOutActionMessageOnRequisitionWorksheet(RequisitionWkshName,Item."No.");
      UpdateUnitCostOnPurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      CreateWarehouseReceipt(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateSalesInvoiceFromShipment@361(VAR SalesHeaderInvoice@1000 : Record 36;SalesHeaderOrder@1001 : Record 36);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(
        SalesHeaderInvoice,SalesHeaderInvoice."Document Type"::Invoice,SalesHeaderOrder."Sell-to Customer No.");
      SalesLine."Document Type" := SalesHeaderInvoice."Document Type";
      SalesLine."Document No." := SalesHeaderInvoice."No.";
      LibrarySales.GetShipmentLines(SalesLine);
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoiceFromShipment@423(SalesHeaderOrder@1001 : Record 36);
    VAR
      SalesHeaderInvoice@1000 : Record 36;
    BEGIN
      CreateSalesInvoiceFromShipment(SalesHeaderInvoice,SalesHeaderOrder);
      LibrarySales.PostSalesDocument(SalesHeaderInvoice,FALSE,TRUE);
    END;

    LOCAL PROCEDURE CreateSpecialPurchaseOrderAndPostReceipt@424(VAR PurchaseHeader@1000 : Record 38;SalesHeaderOrder@1001 : Record 36;ItemNo@1003 : Code[20]);
    VAR
      PurchaseLine@1002 : Record 39;
    BEGIN
      CreatePurchaseOrderWithGetSpecialOrder(PurchaseHeader,SalesHeaderOrder."Sell-to Customer No.");
      FindPurchaseLine(PurchaseLine,ItemNo);
      PurchaseLine.TESTFIELD("Special Order Sales No.",SalesHeaderOrder."No.");
      PurchaseLine.TESTFIELD("Special Order Sales Line No.");
      PurchaseLine.TESTFIELD("Special Order");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE DeletePick@242(SourceNo@1002 : Code[20]);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SourceNo,
        WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      WarehouseActivityHeader.DELETE(TRUE);
    END;

    LOCAL PROCEDURE DeleteWarehouseShipment@314(SourceDocument@1003 : Option;SourceNo@1002 : Code[20]);
    VAR
      WarehouseShipmentHeader@1000 : Record 7320;
    BEGIN
      GetWarehouseShipmentHeader(WarehouseShipmentHeader,SourceDocument,SourceNo);
      LibraryWarehouse.ReopenWhseShipment(WarehouseShipmentHeader);
      WarehouseShipmentHeader.GET(WarehouseShipmentHeader."No.");
      WarehouseShipmentHeader.DELETE(TRUE);
    END;

    LOCAL PROCEDURE DeleteWarehouseShipmentAfterPostAndRegisterPickUsingSalesOrder@317(ItemNo@1002 : Code[20];Quantity@1001 : Decimal;LocationCode@1003 : Code[10];QtyToShip@1004 : Decimal;Invoice@1005 : Boolean);
    VAR
      SalesHeader@1000 : Record 36;
      WarehouseActivityLine@1006 : Record 5767;
      WarehouseShipmentLine@1007 : Record 7321;
    BEGIN
      CreatePickFromWarehouseShipmentUsingSalesOrder(
        SalesHeader,'',ItemNo,Quantity,LocationCode,FALSE); // Reserve as FALSE.
      PostWarehouseShipmentAfterRegisterPick(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",QtyToShip,Invoice);
      DeleteWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
    END;

    LOCAL PROCEDURE DeleteWarehouseShipmentAfterPostAndRegisterPickUsingTransferOrder@319(FromLocationCode@1003 : Code[10];ToLocationCode@1006 : Code[10];ItemNo@1002 : Code[20];Quantity@1001 : Decimal;QtyToShip@1004 : Decimal;Invoice@1005 : Boolean);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
      WarehouseShipmentLine@1008 : Record 7321;
      TransferHeaderNo@1007 : Code[20];
    BEGIN
      TransferHeaderNo := CreatePickFromWarehouseShipmentUsingTransferOrder(FromLocationCode,ToLocationCode,ItemNo,Quantity);
      PostWarehouseShipmentAfterRegisterPick(
        WarehouseActivityLine."Source Document"::"Outbound Transfer",TransferHeaderNo,QtyToShip,Invoice);
      DeleteWarehouseShipment(WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeaderNo);
    END;

    LOCAL PROCEDURE FilterPurchRcptLine@42(VAR PurchRcptLine@1000 : Record 121;OrderNo@1002 : Code[20];ItemNo@1003 : Code[20];ItemNo2@1001 : Code[20]);
    BEGIN
      PurchRcptLine.SETRANGE("Order No.",OrderNo);
      PurchRcptLine.SETFILTER("No.",'%1|%2',ItemNo,ItemNo2);
    END;

    LOCAL PROCEDURE FilterReturnShipmentLine@334(VAR ReturnShipmentLine@1000 : Record 6651;OrderNo@1002 : Code[20];ItemNo@1003 : Code[20];ItemNo2@1001 : Code[20]);
    BEGIN
      ReturnShipmentLine.SETRANGE("Return Order No.",OrderNo);
      ReturnShipmentLine.SETFILTER("No.",'%1|%2',ItemNo,ItemNo2);
      ReturnShipmentLine.FINDSET;
    END;

    LOCAL PROCEDURE FilterReservationEntry@153(VAR ReservationEntry@1000 : Record 337;ReservationStatus@1004 : Option;ItemNo@1003 : Code[20];SourceType@1002 : Integer;LocationCode@1001 : Code[10]);
    BEGIN
      ReservationEntry.SETRANGE("Reservation Status",ReservationStatus);
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE("Source Type",SourceType);
      ReservationEntry.SETRANGE("Location Code",LocationCode);
    END;

    LOCAL PROCEDURE FilterWarehouseEntry@143(VAR WarehouseEntry@1000 : Record 7312;EntryType@1001 : Option;ItemNo@1003 : Code[20]);
    BEGIN
      WarehouseEntry.SETRANGE("Entry Type",EntryType);
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
    END;

    LOCAL PROCEDURE FilterCrossDockWarehouseEntry@66(VAR WarehouseEntry@1002 : Record 7312;Location@1001 : Record 14;SourceNo@1004 : Code[20];ItemNo@1005 : Code[20]);
    VAR
      Bin@1000 : Record 7354;
    BEGIN
      Bin.GET(Location.Code,Location."Cross-Dock Bin Code");
      WarehouseEntry.SETRANGE("Source Document",WarehouseEntry."Source Document"::"P. Order");
      WarehouseEntry.SETRANGE("Source No.",SourceNo);
      WarehouseEntry.SETRANGE("Location Code",Bin."Location Code");
      WarehouseEntry.SETRANGE("Zone Code",Bin."Zone Code");
      WarehouseEntry.SETRANGE("Bin Code",Bin.Code);
      FilterWarehouseEntry(WarehouseEntry,WarehouseEntry."Entry Type"::Movement,ItemNo);
    END;

    LOCAL PROCEDURE FindContactBusinessRelation@263(VAR ContactBusinessRelation@1000 : Record 5054;CustomerNo@1001 : Code[20]);
    BEGIN
      ContactBusinessRelation.SETRANGE("No.",CustomerNo);
      ContactBusinessRelation.FINDFIRST;
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@75(VAR ItemLedgerEntry@1002 : Record 32;EntryType@1000 : Option;ItemNo@1001 : Code[20]);
    BEGIN
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDSET;
    END;

    LOCAL PROCEDURE FindItemLedgerEntryWithDocumentNo@173(VAR ItemLedgerEntry@1002 : Record 32;EntryType@1003 : Option;DocumentNo@1001 : Code[20];ItemNo@1000 : Code[20]);
    BEGIN
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo);
      FindItemLedgerEntry(ItemLedgerEntry,EntryType,ItemNo);
    END;

    LOCAL PROCEDURE FindLinkedAssemblyOrder@254(VAR AssemblyHeader@1000 : Record 900;SalesDocType@1002 : Option;SalesDocNo@1003 : Code[20]);
    VAR
      ATOLink@1001 : Record 904;
    BEGIN
      WITH ATOLink DO BEGIN
        SETRANGE(Type,Type::Sale);
        SETRANGE("Document Type",SalesDocType);
        SETRANGE("Document No.",SalesDocNo);
        FINDFIRST;

        AssemblyHeader.GET("Assembly Document Type","Assembly Document No.");
      END;
    END;

    LOCAL PROCEDURE FindProductionOrderLine@111(VAR ProdOrderLine@1000 : Record 5406;ProductionOrder@1001 : Record 5405);
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPickBin@137(VAR Bin@1001 : Record 7354;LocationCode@1000 : Code[10]);
    VAR
      Zone@1002 : Record 7300;
    BEGIN
      FindPickZone(Zone,LocationCode);
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.SETRANGE("Zone Code",Zone.Code);
      LibraryWarehouse.FindBin(Bin,LocationCode,Zone.Code,RANDOM(Bin.COUNT));  // Find Random Bin.
    END;

    LOCAL PROCEDURE FindPickZone@76(VAR Zone@1000 : Record 7300;LocationCode@1001 : Code[10]);
    BEGIN
      Zone.SETRANGE("Location Code",LocationCode);
      Zone.SETRANGE("Bin Type Code",LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE));  // TRUE for Put-away and Pick.
      Zone.SETRANGE("Cross-Dock Bin Zone",FALSE);
      Zone.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseLine@120(VAR PurchaseLine@1000 : Record 39;No@1001 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("No.",No);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseLineByHeader@365(VAR PurchLine@1000 : Record 39;PurchHeader@1001 : Record 38);
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.FINDSET;
    END;

    LOCAL PROCEDURE FindReceiptLine@41(VAR PurchRcptLine@1000 : Record 121;OrderNo@1001 : Code[20];ItemNo@1002 : Code[20];ItemNo2@1003 : Code[20]);
    BEGIN
      FilterPurchRcptLine(PurchRcptLine,OrderNo,ItemNo,ItemNo2);
      PurchRcptLine.FINDSET;
    END;

    LOCAL PROCEDURE FindRequisitionWkshName@86(VAR RequisitionWkshName@1000 : Record 245);
    BEGIN
      RequisitionWkshName.SETRANGE("Template Type",RequisitionWkshName."Template Type"::"Req.");
      RequisitionWkshName.FINDFIRST;
    END;

    LOCAL PROCEDURE FindRequistionLine@83(VAR RequisitionLine@1002 : Record 246;RequisitionWkshName@1000 : Record 245;ItemNo@1001 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE("Worksheet Template Name",RequisitionWkshName."Worksheet Template Name");
      RequisitionLine.SETRANGE("Journal Batch Name",RequisitionWkshName.Name);
      RequisitionLine.SETRANGE("No.",ItemNo);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesLine@118(VAR SalesLine@1001 : Record 37;DocumentType@1003 : Option;DocumentNo@1002 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityLine@13(VAR WarehouseActivityLine@1000 : Record 5767;SourceDocument@1001 : Option;SourceNo@1002 : Code[20];ActivityType@1003 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source Document",SourceDocument);
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseReceiptLine@29(VAR WarehouseReceiptLine@1002 : Record 7317;SourceNo@1000 : Code[20];ItemNo@1003 : Code[20]);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",WarehouseReceiptLine."Source Document"::"Purchase Order");
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.SETRANGE("Item No.",ItemNo);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseShipmentLine@141(VAR WarehouseShipmentLine@1002 : Record 7321;SourceDocument@1001 : Option;SourceNo@1000 : Code[20]);
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Document",SourceDocument);
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseWorksheetLine@174(VAR WhseWorksheetLine@1000 : Record 7326;WhseWorksheetName@1001 : Record 7327;LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];ItemNo2@1004 : Code[20]);
    BEGIN
      WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWorksheetName."Worksheet Template Name");
      WhseWorksheetLine.SETRANGE(Name,WhseWorksheetName.Name);
      WhseWorksheetLine.SETRANGE("Location Code",LocationCode);
      WhseWorksheetLine.SETFILTER("Item No.",ItemNo + '|' + ItemNo2);
      WhseWorksheetLine.FINDSET;
    END;

    LOCAL PROCEDURE FindWhseWorksheetLine@374(VAR WhseWorksheetLine@1000 : Record 7326;WhseWorksheetName@1001 : Record 7327;LocationCode@1002 : Code[10]);
    BEGIN
      WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWorksheetName."Worksheet Template Name");
      WhseWorksheetLine.SETRANGE(Name,WhseWorksheetName.Name);
      WhseWorksheetLine.SETRANGE("Location Code",LocationCode);
      WhseWorksheetLine.FINDSET;
    END;

    LOCAL PROCEDURE GetLotNoFromItemTrackingPageHandler@150(VAR LotNo@1001 : Code[20]);
    VAR
      DequeueVariable@1000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LotNo := DequeueVariable;
    END;

    LOCAL PROCEDURE GetReceiptLineOnPurchaseInvoice@157(VAR PurchaseHeader@1000 : Record 38;VendorNo@1001 : Code[20]);
    VAR
      PurchaseLine@1002 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,VendorNo);
      PurchaseLine.INIT;
      PurchaseLine.VALIDATE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.VALIDATE("Document No.",PurchaseHeader."No.");
      LibraryPurchase.GetPurchaseReceiptLine(PurchaseLine);
    END;

    LOCAL PROCEDURE GetSalesShipmentHeader@244(OrderNo@1000 : Code[20]) : Code[20];
    VAR
      SalesShipmentHeader@1001 : Record 110;
    BEGIN
      SalesShipmentHeader.SETRANGE("Order No.",OrderNo);
      SalesShipmentHeader.FINDFIRST;
      EXIT(SalesShipmentHeader."No.");
    END;

    LOCAL PROCEDURE GetSourceDocumentOnWarehouseShipment@28(VAR WarehouseShipmentHeader@1000 : Record 7320);
    VAR
      WarehouseSourceFilter@1001 : Record 5771;
    BEGIN
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      LibraryWarehouse.GetSourceDocumentsShipment(WarehouseShipmentHeader,WarehouseSourceFilter,'');
    END;

    LOCAL PROCEDURE GetWarehouseDocumentOnWarehouseWorksheetLine@164(VAR WhseWorksheetName@1004 : Record 7327;LocationCode@1003 : Code[10];DocumentNo@1005 : Code[20];DocumentNo2@1006 : Code[20]);
    VAR
      WhseWorksheetTemplate@1001 : Record 7328;
      WhsePickRequest@1002 : Record 7325;
    BEGIN
      LibraryWarehouse.SelectWhseWorksheetTemplate(WhseWorksheetTemplate,WhseWorksheetTemplate.Type::Pick);
      LibraryWarehouse.SelectWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
      WhsePickRequest.SETRANGE(Status,WhsePickRequest.Status::Released);
      WhsePickRequest.SETRANGE("Completely Picked",FALSE);
      WhsePickRequest.SETRANGE("Location Code",LocationCode);
      WhsePickRequest.SETRANGE("Document Type",WhsePickRequest."Document Type"::Shipment);
      IF DocumentNo <> '' THEN
        WhsePickRequest.SETFILTER("Document No.",'%1|%2',DocumentNo,DocumentNo2);
      LibraryWarehouse.GetOutboundSourceDocuments(WhsePickRequest,WhseWorksheetName,LocationCode);
    END;

    LOCAL PROCEDURE GetWarehouseShipmentHeader@251(VAR WarehouseShipmentHeader@1001 : Record 7320;SourceDocument@1003 : Option;SourceNo@1002 : Code[20]);
    VAR
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,SourceDocument,SourceNo);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
    END;

    LOCAL PROCEDURE GetWhseDocument@362(VAR WhseWorksheetName@1001 : Record 7327;LocationCode@1002 : Code[10]);
    VAR
      WhseWorksheetTemplate@1000 : Record 7328;
      GetSourceDocOutbound@1003 : Codeunit 5752;
    BEGIN
      WhseWorksheetTemplate.SETRANGE(Type,WhseWorksheetTemplate.Type::Pick);
      WhseWorksheetTemplate.FINDFIRST;
      LibraryWarehouse.CreateWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
      GetSourceDocOutbound.GetSingleWhsePickDoc(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationCode);
    END;

    LOCAL PROCEDURE OpenInventoryPickPageAndAutoFillQtyToHandle@283(VAR InventoryPick@1000 : TestPage 7377;SourceNo@1001 : Code[20]);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
      WarehouseActivityHeader@1003 : Record 5766;
    BEGIN
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",
        SourceNo,WarehouseActivityLine."Activity Type"::"Invt. Pick");
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      InventoryPick.OPENEDIT;
      InventoryPick.FILTER.SETFILTER("No.",WarehouseActivityHeader."No.");
      InventoryPick.AutofillQtyToHandle.INVOKE;
    END;

    LOCAL PROCEDURE OpenToDoListPageFromContactCard@235(ContactNo@1001 : Code[20];Description@1002 : Text[50]);
    VAR
      ContactCard@1000 : TestPage 5050;
      ToDoList@1004 : TestPage 5096;
      ToDoCard@1003 : TestPage 5098;
    BEGIN
      ContactCard.OPENEDIT;
      ContactCard.FILTER.SETFILTER("No.",ContactNo);
      ToDoList.TRAP;
      ContactCard."Page To-do List".INVOKE;
      ToDoCard.TRAP;
      ToDoList."Page To-do Card".INVOKE;
      ToDoCard.Description.SETVALUE(Description);
      ToDoCard.OK.INVOKE;
    END;

    LOCAL PROCEDURE OpenCommentPageFromToDoCard@379(ToDo@1006 : Record 5080;Comment@1002 : Text[80]);
    VAR
      ToDoCard@1003 : TestPage 5098;
      RlshpMgtCommentSheet@1005 : TestPage 5072;
    BEGIN
      ToDoCard.OPENEDIT;
      ToDoCard.GOTORECORD(ToDo);
      RlshpMgtCommentSheet.TRAP;
      ToDoCard."Page Rlshp. Mgt. Comment Sheet".INVOKE;
      RlshpMgtCommentSheet.Comment.ASSERTEQUALS(Comment);
      RlshpMgtCommentSheet.OK.INVOKE;
      ToDoCard.OK.INVOKE;
    END;

    LOCAL PROCEDURE PostAllTransferOrdersWithLocationInTransit@218();
    VAR
      TransferHeader@1000 : Record 5740;
    BEGIN
      TransferHeader.SETRANGE("In-Transit Code",LocationInTransit.Code);
      TransferHeader.FINDSET;
      REPEAT
        LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,TRUE);  // Post as SHIP and RECEIVE.
      UNTIL TransferHeader.NEXT = 0;
    END;

    LOCAL PROCEDURE PostInventoryPick@276(SourceNo@1000 : Code[20]);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
      WarehouseActivityHeader@1003 : Record 5766;
    BEGIN
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",
        SourceNo,WarehouseActivityLine."Activity Type"::"Invt. Pick");
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,TRUE);  // Invoice as TRUE.
    END;

    LOCAL PROCEDURE PostItemJournalLineWithLotTracking@95(ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10]) LotNo : Code[20];
    VAR
      ItemJnlBatch@1001 : Record 233;
      ItemJnlLine@1000 : Record 83;
    BEGIN
      LibraryInventory.CreateItemJournalBatchByType(ItemJnlBatch,ItemJnlBatch."Template Type"::Item);
      LibraryInventory.CreateItemJournalLine(
        ItemJnlLine,ItemJnlBatch."Journal Template Name",ItemJnlBatch.Name,ItemJnlLine."Entry Type"::Purchase,ItemNo,Quantity);

      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);
      UpdateLocationAndBinOnItemJournalLine(ItemJnlLine,LocationCode,'');
      ItemJnlLine.OpenItemTrackingLines(FALSE);
      LotNo := COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(LotNo));
      LibraryInventory.PostItemJournalLine(ItemJnlLine."Journal Template Name",ItemJnlBatch.Name);
    END;

    LOCAL PROCEDURE PostProductionJournal@115(ProductionOrder@1000 : Record 5405);
    VAR
      ProdOrderLine@1001 : Record 5406;
      ItemTrackingMode@1002 : 'AssignLotNo,SelectEntries,AssignSerialNo,UpdateQtyOnFirstLine,UpdateQtyOnLastLine';
    BEGIN
      FindProductionOrderLine(ProdOrderLine,ProductionOrder);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::SelectEntries);  // Enqueue for ItemTrackingPageHandler.
      LibraryManufacturing.OpenProductionJournal(ProductionOrder,ProdOrderLine."Line No.");
    END;

    LOCAL PROCEDURE PostPurchaseOrder@146(BuyfromVendorNo@1001 : Code[20]);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Order);
      PurchaseHeader.SETRANGE("Buy-from Vendor No.",BuyfromVendorNo);
      PurchaseHeader.FINDFIRST;
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Receive as TRUE.
    END;

    LOCAL PROCEDURE PostSalesOrderAfterUpdateDatesWithExternalDocNo@259(VAR SalesLine@1000 : Record 37;VAR SalesHeader@1001 : Record 36;PostingDate@1002 : Date);
    VAR
      OldWorkDate@1003 : Date;
    BEGIN
      FindSalesLine(SalesLine,SalesLine."Document Type"::Order,SalesHeader."No.");
      LibraryVariableStorage.Enqueue(OrderDateOnSalesHeaderMsg);  // Enqueue for MessageHandler.
      SalesHeader.FIND;
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.VALIDATE("Order Date",PostingDate);
      SalesHeader.VALIDATE("Document Date",PostingDate);
      UpdateExternalDocumentNoOnSalesOrder(SalesHeader,SalesHeader."No.");
      OldWorkDate := WORKDATE;
      WORKDATE := PostingDate;  // Fix for GB.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);  // Post Ship and Invoice.
      WORKDATE := OldWorkDate;
    END;

    LOCAL PROCEDURE PostSalesShipment@25(CustomerNo@1001 : Code[20];ItemNo@1002 : Code[20];Qty@1003 : Decimal) : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      CreateSalesOrder(SalesHeader,CustomerNo,ItemNo,Qty,'',FALSE);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE));
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@55(SourceNo@1003 : Code[20];ItemNo@1000 : Code[20]);
    VAR
      WarehouseReceiptHeader@1001 : Record 7316;
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,SourceNo,ItemNo);
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE PostWarehouseReceiptAndRegisterPutAway@206(VAR PurchaseHeader@1000 : Record 38;ItemNo@1002 : Code[20]);
    VAR
      Bin@1001 : Record 7354;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseActivityHeader@1004 : Record 5766;
    BEGIN
      CreateWarehouseReceipt(PurchaseHeader);
      PostWarehouseReceipt(PurchaseHeader."No.",ItemNo);
      FindPickBin(Bin,LocationWhite.Code);
      UpdateBinCodeOnPutAwayLine(Bin,PurchaseHeader."No.");
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",WarehouseActivityHeader.Type::"Put-away");
    END;

    LOCAL PROCEDURE PostWarehouseShipment@107(VAR WarehouseShipmentHeader@1004 : Record 7320;SourceDocument@1005 : Option;SourceNo@1003 : Code[20];QuantityToShip@1000 : Decimal;Invoice@1001 : Boolean);
    VAR
      WarehouseShipmentLine@1002 : Record 7321;
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,SourceDocument,SourceNo);
      WarehouseShipmentLine.VALIDATE("Qty. to Ship",QuantityToShip);
      WarehouseShipmentLine.MODIFY(TRUE);
      UpdateExternalDocumentNoOnWarehouseShipmentHeader(WarehouseShipmentHeader);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,Invoice);
    END;

    LOCAL PROCEDURE PostWarehouseShipmentAfterRegisterPick@245(SourceDocument@1005 : Option;SourceNo@1000 : Code[20];Quantity@1004 : Decimal;Invoice@1002 : Boolean);
    VAR
      WarehouseShipmentHeader@1003 : Record 7320;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      RegisterWarehouseActivity(
        SourceDocument,SourceNo,WarehouseActivityLine."Activity Type"::Pick);
      GetWarehouseShipmentHeader(WarehouseShipmentHeader,SourceDocument,SourceNo);
      PostWarehouseShipment(WarehouseShipmentHeader,SourceDocument,SourceNo,Quantity,Invoice);
    END;

    LOCAL PROCEDURE PostWarehouseShipmentAfterPartialRegisterPickFromSalesOrder@63(VAR SalesHeader@1001 : Record 36;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[10]);
    VAR
      Customer@1000 : Record 18;
      WarehouseActivityLine@1005 : Record 5767;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      CreatePickFromWarehouseShipmentUsingSalesOrder(SalesHeader,Customer."No.",ItemNo,Quantity,LocationCode,FALSE);
      UpdateQuantityToHandleOnWarehousePickLines(SalesHeader."No.",Quantity / 2);  // Value required for Partial Quantity.
      PostWarehouseShipmentAfterRegisterPick(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",Quantity / 2,TRUE); // Value required for Partial Quantity.
    END;

    LOCAL PROCEDURE PostWarehouseShipmentWithAssembleToOrder@366(SalesOrderNo@1002 : Code[20]);
    VAR
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      WarehouseShipmentLine.SETRANGE("Assemble to Order",TRUE);
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesOrderNo);
      WarehouseShipmentLine.VALIDATE("Qty. to Ship",WarehouseShipmentLine.Quantity);
      WarehouseShipmentLine.MODIFY(TRUE);

      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);
    END;

    LOCAL PROCEDURE PostOutboundWhenReservationEntryExistsForSalesOrder@398(Outbound@1006 : ',SalesOrder,SalesInvoice,PurchaseReturnOrder,PurchaseCreditMemo');
    VAR
      CompItem@1001 : Record 27;
      AssemblyItem@1004 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesHeader2@1003 : Record 36;
      PurchaseHeader@1009 : Record 38;
      Bin@1008 : Record 7354;
      Quantity@1000 : Decimal;
      Quantity2@1007 : Decimal;
    BEGIN
      // Setup: Create Assembly Item with Assembly BOM. Create Bin for Loation Yellow.
      Quantity := LibraryRandom.RandInt(10);
      Quantity2 := LibraryRandom.RandInt(5);
      LibraryWarehouse.CreateBin(Bin,LocationYellow.Code,LibraryUtility.GenerateGUID,'','');
      LibraryInventory.CreateItem(CompItem);
      CreateAssemblyItemWithAsseblyBOM(AssemblyItem,CompItem."No.",1);

      // Post Item Journal for two items.
      CreateAndPostItemJournalLine(AssemblyItem."No.",Quantity,LocationYellow.Code,Bin.Code);
      CreateAndPostItemJournalLine(CompItem."No.",Quantity2,LocationYellow.Code,Bin.Code);

      // Create 1st Sales Order for Assembly Item and Reserve.
      CreateSalesOrder(SalesHeader,'',AssemblyItem."No.",Quantity,LocationYellow.Code,TRUE);

      // Exercise & Verify: Create and post the 2nd Sales Order/Sales Invoice/Purchase Return Order/Purchase Credit Memo.
      // Verify the confirm message in ConfirmHandler.
      LibraryVariableStorage.Enqueue(ReservationEntryExistMsg); // Enqueue for ConfirmHandler.
      CASE Outbound OF
        Outbound::SalesOrder:
          CreateAndPostSalesOrderWithQtyToAssembleToOrder(
            SalesHeader2,'',AssemblyItem."No.",Quantity + Quantity2,LocationYellow.Code,Quantity2);
        Outbound::SalesInvoice:
          CreateAndPostSalesInvoice(
            SalesHeader2,'',AssemblyItem."No.",Quantity,LocationYellow.Code);
        Outbound::PurchaseReturnOrder:
          CreateAndPostPurchaseDocument(
            PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",'',
            AssemblyItem."No.",Quantity,LocationYellow.Code);
        Outbound::PurchaseCreditMemo:
          CreateAndPostPurchaseDocument(
            PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",'',
            AssemblyItem."No.",Quantity,LocationYellow.Code);
      END;

      // Post 1st Sales Order. Verify the error message.
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      Assert.ExpectedError(QuantityBaseErr);
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@35(SourceDocument@1001 : Option;SourceNo@1002 : Code[20];ActivityType@1000 : Option);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE RegisterWarehouseActivityWithNewLotNo@328(SalesOrderNo@1001 : Code[20];NewLotNo@1002 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        FindWarehouseActivityLine(WarehouseActivityLine,"Source Document"::"Sales Order",SalesOrderNo,"Activity Type"::Pick);
        MODIFYALL("Lot No.",NewLotNo);
        RegisterWarehouseActivity("Source Document"::"Sales Order",SalesOrderNo,"Activity Type"::Pick);
      END;
    END;

    LOCAL PROCEDURE RegisterWarehousePickAndPostWarehouseShipment@273(VAR SalesHeader@1000 : Record 36;LotNo@1004 : Code[20]);
    VAR
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseShipmentLine@1005 : Record 7321;
      WarehouseActivityLine@1002 : Record 5767;
      WarehouseActivityHeader@1003 : Record 5766;
    BEGIN
      CreateWarehouseShipment(SalesHeader);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
      UpdateLotNoAndQuantityToHandleOnWarehousePickLines(SalesHeader."No.",WarehouseActivityLine."Action Type"::Take,LotNo);
      UpdateLotNoAndQuantityToHandleOnWarehousePickLines(SalesHeader."No.",WarehouseActivityLine."Action Type"::Place,LotNo);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityHeader.Type::Pick);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);  // Invoice as FALSE.
    END;

    LOCAL PROCEDURE ReserveProdOrderComp@369(ProdOrderNo@1003 : Code[20]);
    VAR
      ProdOrderComp@1002 : Record 5407;
      ReservationManagement@1001 : Codeunit 99000845;
      FullReservation@1000 : Boolean;
      Qty@1004 : Decimal;
    BEGIN
      Qty := LibraryRandom.RandDec(10,2);
      ProdOrderComp.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComp.FINDFIRST;
      ReservationManagement.SetProdOrderComponent(ProdOrderComp);
      ReservationManagement.AutoReserve(FullReservation,'',ProdOrderComp."Due Date",Qty,Qty);
    END;

    LOCAL PROCEDURE UndoPurchaseReceipt@38(OrderNo@1001 : Code[20];ItemNo@1002 : Code[20];ItemNo2@1003 : Code[20]);
    VAR
      PurchRcptLine@1000 : Record 121;
    BEGIN
      LibraryVariableStorage.Enqueue(UndoReceiptMsg);  // UndoReceiptMessage Used in ConfirmHandler.
      FindReceiptLine(PurchRcptLine,OrderNo,ItemNo,ItemNo2);
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);
    END;

    LOCAL PROCEDURE UndoReturnShipment@333(OrderNo@1001 : Code[20];ItemNo@1002 : Code[20];ItemNo2@1003 : Code[20]);
    VAR
      ReturnShipmentLine@1005 : Record 6651;
    BEGIN
      LibraryVariableStorage.Enqueue(UndoReturnShipmentMsg);  // UndoReturnShipmentMsg Used in ConfirmHandler.
      FilterReturnShipmentLine(ReturnShipmentLine,OrderNo,ItemNo,ItemNo2);
      LibraryPurchase.UndoReturnShipmentLine(ReturnShipmentLine);
    END;

    LOCAL PROCEDURE UpdateBinCodeJobNoAndJobTaskNoOnPurchaseLine@26(VAR PurchaseLine@1000 : Record 39;JobTask@1002 : Record 1001;BinCode@1001 : Code[20]);
    BEGIN
      IF BinCode <> '' THEN
        PurchaseLine.VALIDATE("Bin Code",BinCode);
      PurchaseLine.VALIDATE("Job No.",JobTask."Job No.");
      PurchaseLine.VALIDATE("Job Task No.",JobTask."Job Task No.");
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinCodeOnPurchaseLine@110(VAR PurchaseLine@1000 : Record 39;BinCode@1001 : Code[20]);
    BEGIN
      PurchaseLine.VALIDATE("Bin Code",BinCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinCodeOnPutAwayLine@116(Bin@1003 : Record 7354;SourceNo@1001 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Place);
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,
        WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityLine.VALIDATE("Zone Code",Bin."Zone Code");
      WarehouseActivityLine.VALIDATE("Bin Code",Bin.Code);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCurrencyCodeOnVendor@195(VAR Vendor@1000 : Record 23;CurrencyCode@1001 : Code[10]);
    BEGIN
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCorrespondenceTypeAsEMailOnCustomerContact@256(VAR Customer@1000 : Record 18;VAR Contact@1002 : Record 5050);
    VAR
      ContactBusinessRelation@1001 : Record 5054;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      FindContactBusinessRelation(ContactBusinessRelation,Customer."No.");
      Contact.GET(ContactBusinessRelation."Contact No.");
      Contact.VALIDATE("Correspondence Type",Contact."Correspondence Type"::"E-Mail");
      Contact.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateExactCostReversingMandatoryOnPurchaseSetup@155(NewExactCostReversingMandatory@1002 : Boolean) OldExactCostReversingMandatory : Boolean;
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      OldExactCostReversingMandatory := PurchasesPayablesSetup."Exact Cost Reversing Mandatory";
      PurchasesPayablesSetup.VALIDATE("Exact Cost Reversing Mandatory",NewExactCostReversingMandatory);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateExactCostReversingMandatoryOnSalesReceivableSetup@154(NewExactCostReversingMandatory@1004 : Boolean) OldExactCostReversingMandatory : Boolean;
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      OldExactCostReversingMandatory := SalesReceivablesSetup."Exact Cost Reversing Mandatory";
      SalesReceivablesSetup.VALIDATE("Exact Cost Reversing Mandatory",NewExactCostReversingMandatory);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateStockoutWarningOnSalesReceivableSetup@309(NewStockoutWarning@1004 : Boolean);
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      WITH SalesReceivablesSetup DO BEGIN
        GET;
        VALIDATE("Stockout Warning",NewStockoutWarning);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateDefQtyToShipOnSalesReceivableSetup@351(NewDefQtyToShip@1004 : Integer) OldDefQtyToShip : Integer;
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      WITH SalesReceivablesSetup DO BEGIN
        GET;
        OldDefQtyToShip := "Default Quantity to Ship";
        VALIDATE("Default Quantity to Ship",NewDefQtyToShip);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateExpectedReceiptDateOnPurchaseLine@69(VAR PurchaseLine@1000 : Record 39;ExpectedReceiptDate@1001 : Date);
    BEGIN
      PurchaseLine.VALIDATE("Expected Receipt Date",ExpectedReceiptDate);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateExtDocNoMandatoryAndPostedInvNosOnSalesSetup@252(ExtDocNoMandatory@1001 : Boolean;PostedInvoiceNos@1002 : Code[10]);
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Ext. Doc. No. Mandatory",ExtDocNoMandatory);
      SalesReceivablesSetup.VALIDATE("Posted Invoice Nos.",PostedInvoiceNos);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateExternalDocumentNoOnSalesOrder@264(VAR SalesHeader@1000 : Record 36;ExternalDocumentNo@1001 : Code[35]);
    BEGIN
      SalesHeader.VALIDATE("External Document No.",ExternalDocumentNo);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateExternalDocumentNoOnWarehouseShipmentHeader@99(VAR WarehouseShipmentHeader@1000 : Record 7320);
    BEGIN
      WarehouseShipmentHeader.FIND;
      WarehouseShipmentHeader.VALIDATE("External Document No.",LibraryUtility.GenerateGUID);
      WarehouseShipmentHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateEMailOnCustomer@262(Customer@1000 : Record 18);
    BEGIN
      Customer.VALIDATE("E-Mail",LibraryUtility.GenerateRandomCode(Customer.FIELDNO("E-Mail"),DATABASE::Customer));
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateEmailOnContact@260(Contact@1000 : Record 5050);
    BEGIN
      Contact.VALIDATE("E-Mail",LibraryUtility.GenerateRandomCode(Contact.FIELDNO("E-Mail"),DATABASE::Contact));
      Contact.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInventoryUsingWarehouseJournal@113(Bin@1000 : Record 7354;Item@1002 : Record 27;Quantity@1003 : Decimal;UnitOfMeasureCode@1005 : Code[10];ItemTracking@1006 : Boolean);
    BEGIN
      WarehouseJournalSetup(Bin."Location Code");
      CreateAndRegisterWarehouseJournalLine(Bin,Item,Quantity,UnitOfMeasureCode,ItemTracking);
      CalculateWarehouseAdjustmentAndPostItemJournalLine(Item);
    END;

    LOCAL PROCEDURE UpdateInventoryUsingWarehouseJournalWithLotItemTracking@56(Item@1006 : Record 27;Bin@1000 : Record 7354;Quantity@1002 : Decimal;UnitOfMeasureCode@1005 : Code[10]) LotNo : Code[20];
    VAR
      DequeueVariable@1004 : Variant;
    BEGIN
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);  // Enqueue for WhseItemTrackingLinesHandler.
      UpdateInventoryUsingWarehouseJournal(Bin,Item,Quantity,UnitOfMeasureCode,TRUE);  // Use Tracking as True.
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LotNo := DequeueVariable;
    END;

    LOCAL PROCEDURE UpdateLocationAndBinOnItemJournalLine@129(VAR ItemJournalLine@1000 : Record 83;LocationCode@1001 : Code[10];BinCode@1002 : Code[20]);
    BEGIN
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateLotNoAndQuantityToHandleOnWarehousePickLines@274(SourceNo@1002 : Code[20];ActionType@1004 : Option;LotNo@1005 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SourceNo,
        WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityLine.VALIDATE("Lot No.",LotNo);
      WarehouseActivityLine.MODIFY(TRUE);
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
    END;

    LOCAL PROCEDURE UpdateOrganizerToDoNoOnToDo@239(ToDo@1000 : Record 5080;OrganizerToDoNo@1001 : Code[20]);
    BEGIN
      ToDo.VALIDATE("Organizer To-do No.",OrganizerToDoNo);
      ToDo.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePlanningFlexibilityOnPurchaseLine@167(VAR PurchaseLine@1000 : Record 39);
    BEGIN
      PurchaseLine.VALIDATE("Planning Flexibility",PurchaseLine."Planning Flexibility"::None);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProductionBOMOnItem@100(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityToHandleOnPutAwayLine@213(SourceNo@1001 : Code[20];QuantityToHandle@1002 : Decimal);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,
        WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityLine.MODIFYALL("Qty. to Handle",QuantityToHandle);
    END;

    LOCAL PROCEDURE UpdateQuantityToHandleOnWarehousePickLines@98(SourceNo@1000 : Code[20];QuantityToHandle@1001 : Decimal);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SourceNo,
        WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityLine.MODIFYALL("Qty. to Handle",QuantityToHandle);
      WarehouseActivityLine.MODIFYALL("Qty. to Handle (Base)",QuantityToHandle);
    END;

    LOCAL PROCEDURE UpdateQuantityToInvoiceOnPurchaseAndItemTrackingLine@230(ItemNo@1002 : Code[20];QuantityToInvoice@1001 : Decimal);
    VAR
      PurchaseLine@1000 : Record 39;
      ItemTrackingMode@1003 : 'AssignLotNo,SelectEntries,AssignSerialNo,UpdateQtyOnFirstLine,UpdateQtyOnLastLine';
    BEGIN
      FindPurchaseLine(PurchaseLine,ItemNo);
      PurchaseLine.VALIDATE("Qty. to Invoice",QuantityToInvoice);
      PurchaseLine.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::UpdateQtyOnLastLine);  // Enqueue for ItemTrackingPageHandler.
      PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE UpdateQuantityToInvoiceOnSalesAndItemTrackingLineAndPostSalesOrder@229(VAR SalesHeader@1002 : Record 36;VAR SalesLine@1001 : Record 37;QuantityToInvoice@1000 : Decimal);
    VAR
      ItemTrackingMode@1003 : 'AssignLotNo,SelectEntries,AssignSerialNo,UpdateQtyOnFirstLine,UpdateQtyOnLastLine';
    BEGIN
      SalesLine.FIND;
      SalesLine.VALIDATE("Qty. to Invoice",QuantityToInvoice);
      SalesLine.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::UpdateQtyOnFirstLine);  // Enqueue for ItemTrackingPageHandler.
      LibraryVariableStorage.Enqueue(AvailabilityWarningsConfirmMsg);  // Enqueue for ConfirmHandler.
      SalesLine.OpenItemTrackingLines;
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);  // Post as SHIP and INVOICE.
    END;

    LOCAL PROCEDURE UpdateRequirePickOnWarehouseSetup@57(NewRequirePick@1001 : Boolean) OldRequirePick : Boolean;
    VAR
      WarehouseSetup@1000 : Record 5769;
    BEGIN
      WarehouseSetup.GET;
      OldRequirePick := WarehouseSetup."Require Pick";
      WarehouseSetup.VALIDATE("Require Pick",NewRequirePick);
      WarehouseSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateRequireShipmentOnWarehouseSetup@52(NewRequireShipment@1001 : Boolean) OldRequireShipment : Boolean;
    VAR
      WarehouseSetup@1000 : Record 5769;
    BEGIN
      WarehouseSetup.GET;
      OldRequireShipment := WarehouseSetup."Require Shipment";
      WarehouseSetup.VALIDATE("Require Shipment",NewRequireShipment);
      WarehouseSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateReplenishmentSystemAsProdOrderOnItem@119(VAR Item@1000 : Record 27);
    BEGIN
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUnitCostOnPurchaseLine@178(VAR PurchaseLine@1000 : Record 39);
    BEGIN
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandInt(50));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUnitCostOnPurchaseOrder@105(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;ItemNo@1002 : Code[20]);
    BEGIN
      FindPurchaseLine(PurchaseLine,ItemNo);
      UpdateUnitCostOnPurchaseLine(PurchaseLine);
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      UpdateVendorInvoiceNoOnPurchaseHeader(PurchaseHeader);
    END;

    LOCAL PROCEDURE UpdateUnitPriceOnSalesCreditMemoLine@238(VAR SalesLine@1000 : Record 37;ItemNo@1001 : Code[20];DocumentNo@1002 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("No.",ItemNo);
      FindSalesLine(SalesLine,SalesLine."Document Type"::"Credit Memo",DocumentNo);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDecInRange(10,100,2));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUseCrossDockingOnLocation@289(VAR Location@1000 : Record 14;NewUseCrossDocking@1001 : Boolean) OldUseCrossDocking : Boolean;
    BEGIN
      OldUseCrossDocking := Location."Use Cross-Docking";
      Location.VALIDATE("Use Cross-Docking",NewUseCrossDocking);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVATProdPostingGroupOnItem@205(VAR Item@1000 : Record 27;VATProdPostingGroup@1001 : Code[10]);
    BEGIN
      Item.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVendorInvoiceNoOnPurchaseHeader@93(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAlwaysCreatePickLine@375(LocationCode@1000 : Code[10];SetAlwaysCreatePickLine@1001 : Boolean) PrevAlwaysCreatePickLine : Boolean;
    VAR
      Location@1002 : Record 14;
    BEGIN
      WITH Location DO BEGIN
        GET(LocationCode);
        PrevAlwaysCreatePickLine := "Always Create Pick Line";
        VALIDATE("Always Create Pick Line",SetAlwaysCreatePickLine);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE VerifyCalcReservedCompError@336();
    VAR
      ProdOrderComp@1001 : Record 5407;
    BEGIN
      WITH ProdOrderComp DO
        Assert.ExpectedError(STRSUBSTNO(ExpectedFailedErr,FIELDCAPTION("Reserved Qty. (Base)"),0,TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyCrossDockWarehouseEntry@64(SourceNo@1006 : Code[20];Location@1007 : Record 14;ItemNo@1003 : Code[20];Quantity@1000 : Decimal);
    VAR
      WarehouseEntry@1002 : Record 7312;
    BEGIN
      FilterCrossDockWarehouseEntry(WarehouseEntry,Location,SourceNo,ItemNo);
      WarehouseEntry.FINDFIRST;
      WarehouseEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyDescriptionOnToDo@236(ContactNo@1001 : Code[20];Description@1002 : Text[50]);
    VAR
      ToDo@1000 : Record 5080;
    BEGIN
      ToDo.SETRANGE("Contact No.",ContactNo);
      ToDo.FINDSET;
      ToDo.TESTFIELD(Description,Description);
      ToDo.NEXT;
      ToDo.TESTFIELD(Description,Description);
    END;

    LOCAL PROCEDURE VerifyDescriptionOnWarehouseEntry@59(ItemNo@1000 : Code[20];Description@1001 : Text[50]);
    VAR
      WarehouseEntry@1002 : Record 7312;
    BEGIN
      FilterWarehouseEntry(WarehouseEntry,WarehouseEntry."Entry Type"::Movement,ItemNo);
      WarehouseEntry.FINDFIRST;
      WarehouseEntry.TESTFIELD(Description,Description);
    END;

    LOCAL PROCEDURE VerifyEditablePropertyOfUseAsInTransitFieldOnLocationCard@217(LocationCode@1000 : Code[10];Editable@1001 : Boolean);
    VAR
      LocationCard@1002 : TestPage 5703;
    BEGIN
      LocationCard.OPENEDIT;
      LocationCard.FILTER.SETFILTER(Code,LocationCode);
      IF Editable THEN
        Assert.IsTrue(LocationCard."Use As In-Transit".EDITABLE,FieldShouldBeEditableErr)
      ELSE
        Assert.IsFalse(LocationCard."Use As In-Transit".EDITABLE,FieldShouldNotBeEditableErr);
      LocationCard.OK.INVOKE;
    END;

    LOCAL PROCEDURE VerifyGLEntry@7(DocumentNo@1000 : Code[20];GLAccountNo@1001 : Code[20];Amount@1002 : Decimal);
    VAR
      GLEntry@1003 : Record 17;
    BEGIN
      IF Amount > 0 THEN
        GLEntry.SETFILTER(Amount,'>0')
      ELSE
        GLEntry.SETFILTER(Amount,'<0');
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(Amount,GLEntry.Amount,LibraryERM.GetAmountRoundingPrecision,AmountMustBeEqualErr);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@50(EntryType@1005 : Option;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1007 : Code[10];JobNo@1003 : Code[20];JobTaskNo@1006 : Code[20]);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,EntryType,ItemNo);
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
      ItemLedgerEntry.TESTFIELD("Location Code",LocationCode);
      ItemLedgerEntry.TESTFIELD("Job No.",JobNo);
      ItemLedgerEntry.TESTFIELD("Job Task No.",JobTaskNo);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntryForLot@82(EntryType@1005 : Option;ItemNo@1001 : Code[20];LotNo@1003 : Code[20];Quantity@1002 : Decimal;MoveNext@1004 : Boolean);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,EntryType,ItemNo);
      IF MoveNext THEN
        ItemLedgerEntry.NEXT;
      ItemLedgerEntry.TESTFIELD("Lot No.",LotNo);
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity)
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntryForPostedDocument@186(DocumentType@1001 : Option;EntryType@1006 : Option;DocumentNo@1002 : Code[20];ItemNo@1003 : Code[20];RemainingQuantity@1004 : Decimal;Quantity@1005 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Document Type",DocumentType);
      FindItemLedgerEntryWithDocumentNo(ItemLedgerEntry,EntryType,DocumentNo,ItemNo);
      ItemLedgerEntry.TESTFIELD("Remaining Quantity",RemainingQuantity);
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity)
    END;

    LOCAL PROCEDURE VerifyLotQuantity@400(DocumentType@1001 : Option;LotNo@1002 : Code[20];IsAssembleToOrder@1003 : Boolean;IsCorrection@1005 : Boolean;ExpectedQty@1004 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Assemble to Order",IsAssembleToOrder);
        SETRANGE(Correction,IsCorrection);
        SETRANGE("Lot No.",LotNo);
        FINDFIRST;
        TESTFIELD(Quantity,ExpectedQty);
      END;
    END;

    LOCAL PROCEDURE VerifyPickWorksheetLine@203(WhseWorksheetName@1001 : Record 7327;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;AvailableQtyToPick@1004 : Decimal;MoveNext@1005 : Boolean);
    VAR
      WhseWorksheetLine@1000 : Record 7326;
    BEGIN
      FindWarehouseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,WhseWorksheetName."Location Code",ItemNo,ItemNo);
      IF MoveNext THEN
        WhseWorksheetLine.NEXT;
      WhseWorksheetLine.TESTFIELD(Quantity,Quantity);
      Assert.AreEqual(AvailableQtyToPick,WhseWorksheetLine.AvailableQtyToPick,QuantityMustBeSameErr);
    END;

    LOCAL PROCEDURE VerifyPurchaseInvoiceLine@207(DocumentNo@1003 : Code[20];ItemNo@1000 : Code[20];Quantity@1002 : Decimal);
    VAR
      PurchInvLine@1001 : Record 123;
    BEGIN
      PurchInvLine.SETRANGE("Document No.",DocumentNo);
      PurchInvLine.SETRANGE("No.",ItemNo);
      PurchInvLine.FINDFIRST;
      PurchInvLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyReceiptLineAfterUndo@43(OrderNo@1000 : Code[20];ItemNo@1003 : Code[20];ItemNo2@1005 : Code[20];Quantity@1002 : Decimal);
    VAR
      PurchRcptLine@1001 : Record 121;
    BEGIN
      FilterPurchRcptLine(PurchRcptLine,OrderNo,ItemNo,ItemNo2);
      PurchRcptLine.FINDSET;
      Assert.AreEqual(Quantity,PurchRcptLine.Quantity,QuantityMustBeSameErr);
      PurchRcptLine.NEXT;
      Assert.AreEqual(-Quantity,PurchRcptLine.Quantity,QuantityMustBeSameErr);
    END;

    LOCAL PROCEDURE VerifyReturnShipmentLineAfterUndo@335(OrderNo@1000 : Code[20];ItemNo@1003 : Code[20];ItemNo2@1005 : Code[20];Quantity@1002 : Decimal);
    VAR
      ReturnShipmentLine@1001 : Record 6651;
    BEGIN
      FilterReturnShipmentLine(ReturnShipmentLine,OrderNo,ItemNo,ItemNo2);
      Assert.AreEqual(Quantity,ReturnShipmentLine.Quantity,QuantityMustBeSameErr);
      ReturnShipmentLine.NEXT;
      Assert.AreEqual(-Quantity,ReturnShipmentLine.Quantity,QuantityMustBeSameErr);
    END;

    LOCAL PROCEDURE VerifyRequisitionLine@81(RequisitionWkshName@1004 : Record 245;ItemNo@1000 : Code[20];CurrencyFactor@1001 : Decimal);
    VAR
      RequisitionLine@1002 : Record 246;
    BEGIN
      FindRequistionLine(RequisitionLine,RequisitionWkshName,ItemNo);
      RequisitionLine.TESTFIELD("Currency Factor",CurrencyFactor);
    END;

    LOCAL PROCEDURE VerifyRegisteredWarehousePickLine@89(SourceNo@1001 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal;UnitOfMeasureCode@1004 : Code[10];LotNo@1005 : Code[20]);
    VAR
      RegisteredWhseActivityLine@1000 : Record 5773;
    BEGIN
      RegisteredWhseActivityLine.SETRANGE("Source Document",RegisteredWhseActivityLine."Source Document");
      RegisteredWhseActivityLine.SETRANGE("Source No.",SourceNo);
      RegisteredWhseActivityLine.SETRANGE("Activity Type",RegisteredWhseActivityLine."Activity Type"::Pick);
      RegisteredWhseActivityLine.SETRANGE("Unit of Measure Code",UnitOfMeasureCode);
      RegisteredWhseActivityLine.FINDFIRST;
      RegisteredWhseActivityLine.TESTFIELD("Item No.",ItemNo);
      RegisteredWhseActivityLine.TESTFIELD(Quantity,Quantity);
      RegisteredWhseActivityLine.TESTFIELD("Lot No.",LotNo);
    END;

    LOCAL PROCEDURE VerifyReservationEntry@152(ReservationStatus@1006 : Option;ItemNo@1002 : Code[20];SourceType@1001 : Integer;LocationCode@1000 : Code[10];LotNo@1007 : Code[20];Quantity@1004 : Decimal;MoveNext@1005 : Boolean);
    VAR
      ReservationEntry@1003 : Record 337;
    BEGIN
      FilterReservationEntry(ReservationEntry,ReservationStatus,ItemNo,SourceType,LocationCode);
      ReservationEntry.FINDSET;
      IF MoveNext THEN
        ReservationEntry.NEXT;
      ReservationEntry.TESTFIELD("Lot No.",LotNo);
      ReservationEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyValueEntry@287(DocumentNo@1002 : Code[20];DocumentType@1006 : Option;ItemNo@1001 : Code[20];EntryType@1003 : Option;CostAmountActual@1004 : Decimal;CostPerUnit@1005 : Decimal;Adjustment@1007 : Boolean);
    VAR
      ValueEntry@1000 : Record 5802;
    BEGIN
      ValueEntry.SETRANGE("Item No.",ItemNo);
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.SETRANGE("Document Type",DocumentType);
      ValueEntry.SETRANGE("Entry Type",EntryType);
      ValueEntry.SETRANGE(Adjustment,Adjustment);
      ValueEntry.FINDFIRST;
      ValueEntry.TESTFIELD("Cost Amount (Actual)",CostAmountActual);
      ValueEntry.TESTFIELD("Cost per Unit",CostPerUnit);
    END;

    LOCAL PROCEDURE VerifyWarehouseCrossDockOpportunity@292(ToSourceNo@1002 : Code[20];ItemNo@1001 : Code[20];ReservedQuantity@1003 : Decimal);
    VAR
      WhseCrossDockOpportunity@1000 : Record 5768;
    BEGIN
      WhseCrossDockOpportunity.SETRANGE("To Source Document",WhseCrossDockOpportunity."To Source Document"::"Prod. Order Comp.");
      WhseCrossDockOpportunity.SETRANGE("To Source No.",ToSourceNo);
      WhseCrossDockOpportunity.SETRANGE("Item No.",ItemNo);
      WhseCrossDockOpportunity.FINDFIRST;
      WhseCrossDockOpportunity.CALCFIELDS("Reserved Quantity");
      WhseCrossDockOpportunity.TESTFIELD("Reserved Quantity",ReservedQuantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseEntry@6(EntryType@1001 : Option;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];BinCode@1006 : Code[20];Quantity@1004 : Decimal;LotNo@1005 : Code[20]);
    VAR
      WarehouseEntry@1000 : Record 7312;
    BEGIN
      FilterWarehouseEntry(WarehouseEntry,EntryType,ItemNo);
      WarehouseEntry.SETRANGE("Bin Code",BinCode);
      WarehouseEntry.SETRANGE(Quantity,Quantity);
      WarehouseEntry.FINDFIRST;
      WarehouseEntry.TESTFIELD("Location Code",LocationCode);
      WarehouseEntry.TESTFIELD("Lot No.",LotNo);
    END;

    LOCAL PROCEDURE VerifyWarehouseReceiptLine@67(SourceNo@1001 : Code[20];ItemNo@1000 : Code[20];Quantity@1004 : Decimal;QtyToCrossDock@1005 : Decimal;LocationCode@1006 : Code[10]);
    VAR
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,SourceNo,ItemNo);
      WarehouseReceiptLine.TESTFIELD(Quantity,Quantity);
      WarehouseReceiptLine.TESTFIELD("Qty. to Cross-Dock",QtyToCrossDock);
      WarehouseReceiptLine.TESTFIELD("Location Code",LocationCode);
    END;

    LOCAL PROCEDURE VerifyWarehousePickLine@51(SourceNo@1001 : Code[20];ItemNo@1004 : Code[20];LocationCode@1006 : Code[10];Quantity@1005 : Decimal);
    VAR
      WarehouseActivityLine@1003 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SourceNo,
        WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityLine.TESTFIELD("Item No.",ItemNo);
      WarehouseActivityLine.TESTFIELD("Location Code",LocationCode);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWhseShipmentTrackingLine@382(SalesOrderNo@1001 : Code[20];IsATO@1002 : Boolean;ExpectedLotNo@1003 : Code[20]);
    VAR
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      WarehouseShipmentLine.SETRANGE("Assemble to Order",IsATO);
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesOrderNo);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::VerifyLot);
      LibraryVariableStorage.Enqueue(ExpectedLotNo);
      WarehouseShipmentLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE VerifyWhseShipmentTrackingLineAvailabilityWarning@381(SalesOrderNo@1002 : Code[20];IsATO@1001 : Boolean;ExpectedLotNo@1000 : Code[20];ExpectedWarningMessage@1003 : Text);
    VAR
      WarehouseShipmentLine@1004 : Record 7321;
    BEGIN
      WarehouseShipmentLine.SETRANGE("Assemble to Order",IsATO);
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentLine."Source Document"::"Sales Order",SalesOrderNo);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::VerifyLot);
      LibraryVariableStorage.Enqueue(ExpectedLotNo);
      LibraryVariableStorage.Enqueue(ExpectedWarningMessage);
      WarehouseShipmentLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE VerifySalesLine@308(DocumentType@1001 : Option;DocumentNo@1002 : Code[20];CompItemNo@1004 : Code[20];CompItemNo2@1005 : Code[20]);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        FINDSET;
        NEXT;
        TESTFIELD("No.",CompItemNo);
        NEXT;
        TESTFIELD(Description,ExtendedTxt);
        NEXT;
        TESTFIELD("No.",CompItemNo2);
      END;
    END;

    LOCAL PROCEDURE VerifySalesLineExtTextBeforeItem@363(SalesHeader@1000 : Record 36;ExtendedText@1003 : Text;CompItemNo@1002 : Code[20]);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.");
      SalesLine.NEXT; // the first line is description of Assembly BOM, just skip
      SalesLine.TESTFIELD(Type,0);
      SalesLine.TESTFIELD(Description,ExtendedText);
      SalesLine.NEXT;
      SalesLine.TESTFIELD(Type,SalesLine.Type::Item);
      SalesLine.TESTFIELD("No.",CompItemNo);
    END;

    LOCAL PROCEDURE VerifyBaseQtysOnSalesLine@418(SalesHeader@1001 : Record 36;ItemNo@1002 : Code[20];QtyBase@1003 : Decimal);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",ItemNo);
        FINDFIRST;
        TESTFIELD("Quantity (Base)",QtyBase);
        TESTFIELD("Outstanding Qty. (Base)",QtyBase);
        TESTFIELD("Qty. to Invoice (Base)",QtyBase);
      END;
    END;

    LOCAL PROCEDURE VerifyPurchaseLine@312(DocumentType@1001 : Option;DocumentNo@1002 : Code[20];CompItemNo@1004 : Code[20];CompItemNo2@1005 : Code[20]);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      WITH PurchaseLine DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        FINDSET;
        NEXT;
        TESTFIELD("No.",CompItemNo);
        NEXT;
        TESTFIELD(Description,ExtendedTxt);
        NEXT;
        TESTFIELD("No.",CompItemNo2);
      END;
    END;

    LOCAL PROCEDURE VerifyPurchLineHasCorrectSalesOrdersNo@346(PurchHeaderNo@1000 : Code[20];SalesHeaderNo@1001 : Code[20]);
    VAR
      PurchLine@1002 : Record 39;
    BEGIN
      WITH PurchLine DO BEGIN
        SETRANGE("Document No.",PurchHeaderNo);
        SETRANGE("Document Type","Document Type"::Order);
        FINDFIRST;
        Assert.AreEqual(SalesHeaderNo,"Special Order Sales No.",SpecialOrderSalesNoErr);
      END;
    END;

    LOCAL PROCEDURE VerifyPurchLineExtTextBeforeItem@354(PurchHeader@1000 : Record 38;ExtendedText@1003 : Text;CompItemNo@1002 : Code[20]);
    VAR
      PurchLine@1001 : Record 39;
    BEGIN
      FindPurchaseLineByHeader(PurchLine,PurchHeader);
      PurchLine.NEXT; // the first line is description of Assembly BOM, just skip
      PurchLine.TESTFIELD(Type,0);
      PurchLine.TESTFIELD(Description,ExtendedText);
      PurchLine.NEXT;
      PurchLine.TESTFIELD(Type,PurchLine.Type::Item);
      PurchLine.TESTFIELD("No.",CompItemNo);
    END;

    LOCAL PROCEDURE VerifyQtyToCrossDockOnWarehouseReceiptLine@316(SourceNo@1002 : Code[20];ItemNo@1001 : Code[20];QtyToCrossDock@1003 : Decimal);
    VAR
      WarehouseReceiptLine@1000 : Record 7317;
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,SourceNo,ItemNo);
      Assert.AreEqual(
        QtyToCrossDock,WarehouseReceiptLine."Qty. to Cross-Dock",
        STRSUBSTNO(QtyToCrossDockErr,WarehouseReceiptLine.FIELDCAPTION("Qty. to Cross-Dock")));
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@12(ConfirmMessage@1000 : Text[1024];VAR Reply@1003 : Boolean);
    VAR
      DequeueVariable@1002 : Variant;
      LocalMessage@1001 : Text[1024];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LocalMessage := DequeueVariable;
      Assert.IsTrue(STRPOS(ConfirmMessage,LocalMessage) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmYesHandler@208(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE DateCompressWarehouseEntriesHandler@123(VAR DateCompressWhseEntries@1000 : TestRequestPage 7398);
    VAR
      DateComprRegister@1001 : Record 87;
    BEGIN
      DateCompressWhseEntries.StartingDate.SETVALUE(FORMAT(LibraryFiscalYear.GetFirstPostingDate(FALSE)));
      DateCompressWhseEntries.EndingDate.SETVALUE(FORMAT(LibraryFiscalYear.GetLastPostingDate(FALSE)));
      DateCompressWhseEntries.PeriodLength.SETVALUE(DateComprRegister."Period Length"::Year);
      DateCompressWhseEntries.SerialNo.SETVALUE(FALSE);
      DateCompressWhseEntries.LotNo.SETVALUE(TRUE);
      DateCompressWhseEntries.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GetReceiptLinesPageHandler@114(VAR GetReceiptLines@1000 : TestPage 5709);
    BEGIN
      GetReceiptLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@125(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      DequeueVariable@1004 : Variant;
      LotNo@1001 : Code[20];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      ItemTrackingMode := DequeueVariable;
      CASE ItemTrackingMode OF
        ItemTrackingMode::AssignLotNo:
          BEGIN
            ItemTrackingLines."Assign Lot No.".INVOKE;
            LibraryVariableStorage.Enqueue(ItemTrackingLines."Lot No.".VALUE);  // Enqueue Lot No.
          END;
        ItemTrackingMode::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
        ItemTrackingMode::AssignSerialNo:
          BEGIN
            ItemTrackingLines."Assign Serial No.".INVOKE;
            ItemTrackingLines.FIRST;
            LibraryVariableStorage.Enqueue(ItemTrackingLines."Serial No.".VALUE);
          END;
        ItemTrackingMode::UpdateQtyOnFirstLine:
          BEGIN
            ItemTrackingLines.FIRST;
            ItemTrackingLines."Qty. to Invoice (Base)".SETVALUE(0);  // Value 0 required for the test.
          END;
        ItemTrackingMode::UpdateQtyOnLastLine:
          BEGIN
            ItemTrackingLines.LAST;
            ItemTrackingLines."Qty. to Invoice (Base)".SETVALUE(0);  // Value 0 required for the test.
          END;
        ItemTrackingMode::VerifyLot:
          BEGIN
            GetLotNoFromItemTrackingPageHandler(LotNo);
            ItemTrackingLines."Lot No.".ASSERTEQUALS(LotNo);
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@124(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@104(Message@1000 : Text[1024]);
    VAR
      DequeueVariable@1002 : Variant;
      LocalMessage@1001 : Text[1024];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LocalMessage := DequeueVariable;
      Assert.IsTrue(STRPOS(Message,LocalMessage) > 0,Message);
    END;

    [StrMenuHandler]
    PROCEDURE ShipAndInvoiceMenuHandler@298(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := 3;  // Value 3 is used for Ship and Invoice.
    END;

    [ModalPageHandler]
    PROCEDURE PostedITLPageHandler@85(VAR PostedItemTrackingLines@1000 : TestPage 6511);
    BEGIN
      PostedItemTrackingLines."Lot No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
    END;

    [ModalPageHandler]
    PROCEDURE PostedPurchaseDocumentLinesPageHandler@193(VAR PostedPurchaseDocumentLines@1000 : TestPage 5855);
    VAR
      DocumentType@1001 : 'Posted Receipts,Posted Invoices,Posted Return Shipments,Posted Cr. Memos';
    BEGIN
      PostedPurchaseDocumentLines.PostedReceiptsBtn.SETVALUE(FORMAT(DocumentType::"Posted Receipts"));
      PostedPurchaseDocumentLines.PostedRcpts.LAST;
      PostedPurchaseDocumentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedSalesDocumentLinesPageHandler@175(VAR PostedSalesDocumentLines@1000 : TestPage 5850);
    VAR
      DocumentType@1001 : Option;
    BEGIN
      DocumentType := LibraryVariableStorage.DequeueInteger;
      CASE DocumentType OF
        PostedSalesDocType::"Posted Shipments":
          BEGIN
            PostedSalesDocumentLines.PostedShipmentsBtn.SETVALUE(FORMAT(PostedSalesDocType::"Posted Shipments"));
            PostedSalesDocumentLines.PostedShpts.LAST;
          END;
        PostedSalesDocType::"Posted Return Receipts":
          BEGIN
            PostedSalesDocumentLines.PostedShipmentsBtn.SETVALUE(FORMAT(PostedSalesDocType::"Posted Return Receipts"));
            PostedSalesDocumentLines.PostedReturnRcpts.FIRST;
          END;
      END;
      PostedSalesDocumentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedSalesDocTrackingPageHandler@46(VAR PostedSalesDocumentLines@1000 : TestPage 5850);
    BEGIN
      PostedSalesDocumentLines.PostedShipmentsBtn.SETVALUE(FORMAT(PostedSalesDocType::"Posted Shipments"));
      PostedSalesDocumentLines.PostedShpts.ItemTrackingLines.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedSalesDocTrackingVerifyFilterPageHandler@341(VAR PostedSalesDocumentLines@1001 : TestPage 5850);
    BEGIN
      PostedSalesDocumentLines.PostedShipmentsBtn.SETVALUE(FORMAT(PostedSalesDocType::"Posted Shipments"));
      PostedSalesDocumentLines.PostedShpts.ItemTrackingLines.INVOKE;

      PostedSalesDocumentLines.PostedShpts.FIRST;
      PostedSalesDocumentLines.PostedShpts."Document No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      PostedSalesDocumentLines.PostedShpts.NEXT;
      PostedSalesDocumentLines.PostedShpts."Document No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      Assert.IsFalse(PostedSalesDocumentLines.NEXT,STRSUBSTNO(WrongNoOfDocumentsListErr,2));
    END;

    [ModalPageHandler]
    PROCEDURE ProductionJournalHandler@126(VAR ProductionJournal@1000 : TestPage 5510);
    BEGIN
      ProductionJournal.FILTER.SETFILTER("Entry Type",ProductionJournal."Entry Type".GETOPTION(6));  // Value 6 is used for Consumption.
      ProductionJournal.ItemTrackingLines.INVOKE;
      LibraryVariableStorage.Enqueue(PostJournalLinesConfirmationQst);  // Enqueue for ConfirmHandler.
      LibraryVariableStorage.Enqueue(JournalLinesPostedMsg);  // Enqueue for MessageHandler.
      ProductionJournal.Post.INVOKE;
      ProductionJournal.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@61(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Auto Reserve".INVOKE;
      Reservation.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SalesListPageHandler@88(VAR SalesList@1000 : TestPage 45);
    BEGIN
      SalesList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE WhseItemTrackingLinesHandler@127(VAR WhseItemTrackingLines@1000 : TestPage 6550);
    VAR
      DequeueVariable@1003 : Variant;
      TrackingQuantity@1002 : Decimal;
      ItemTrackingMode@1001 : 'AssignLotNo,SelectLotNo';
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      ItemTrackingMode := DequeueVariable;
      TrackingQuantity := WhseItemTrackingLines.Quantity3.ASDECIMAL;
      CASE ItemTrackingMode OF
        ItemTrackingMode::AssignLotNo:
          BEGIN
            WhseItemTrackingLines."Lot No.".SETVALUE(LibraryUtility.GenerateGUID);
            WhseItemTrackingLines.Quantity.SETVALUE(TrackingQuantity);
            LibraryVariableStorage.Enqueue(WhseItemTrackingLines."Lot No.".VALUE);
          END;
        ItemTrackingMode::SelectLotNo:
          BEGIN
            LibraryVariableStorage.Dequeue(DequeueVariable);
            WhseItemTrackingLines."Lot No.".SETVALUE(DequeueVariable);
            WhseItemTrackingLines.Quantity.SETVALUE(TrackingQuantity);
          END;
      END;
      WhseItemTrackingLines.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE WhseSourceCreateDocumentHandler@170(VAR WhseSourceCreateDocument@1000 : TestRequestPage 7305);
    BEGIN
      WhseSourceCreateDocument.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreatePageHandler@243(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.CreateNewLotNo.SETVALUE(FALSE);  // False required for the CreateNewLotNo in the tests.
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CheckAvailabilityHandler@296(VAR CheckAvailability@1000 : TestPage 342);
    BEGIN
      CheckAvailability.Yes.INVOKE;
    END;

    [StrMenuHandler]
    PROCEDURE ExplodeBomHandler@315(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instructions@1002 : Text[1024]);
    BEGIN
      // Take 1 for "Retrieve dimensions from components".
      Choice := 1;
    END;

    [ModalPageHandler]
    PROCEDURE HandlePickSelectionPage@344(VAR PickSelectionTestPage@1000 : TestPage 7343);
    BEGIN
      PickSelectionTestPage.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PartialReservationPageHandler@340(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation.LAST;
      Reservation."Reserve from Current Line".INVOKE;
      Reservation.FIRST;
      Reservation."Auto Reserve".INVOKE;
      Reservation.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GetShipmentLinesModalPageHandler@425(VAR GetShipmentLines@1000 : TestPage 5708);
    BEGIN
      GetShipmentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CrossDockOpportunitiesPageHandler@370(VAR CrossDockOpportunities@1000 : TestPage 5783);
    VAR
      RecCount@1001 : Integer;
      ExpectedRecCount@1002 : Integer;
    BEGIN
      ExpectedRecCount := LibraryVariableStorage.DequeueInteger;
      IF CrossDockOpportunities.FIRST THEN BEGIN
        RecCount := 1;
        WHILE CrossDockOpportunities.NEXT DO
          RecCount += 1;
      END;

      Assert.AreEqual(ExpectedRecCount,RecCount,STRSUBSTNO(WrongNoOfRecordsErr,ExpectedRecCount));
    END;

    BEGIN
    {
      // [FEATURE] [SCM]
      Test Cases for SCM Orders.
      1.  Test the Expected Receipt Date on Purchase Line after Reserve Quantity on Sales Order.
      2.  Test the Item Ledger Entry and Warehouse Entry after Post Purchase Order as Receive and Invoice with Job.
      3.  Test the error message ship to Code Blank on Purchase Header after creating Sales Order with Special Order and Ship to Code after Get Sales Order from Purchase Order.
      4.  Test the Warehouse Receipt Line for Cross Dock Quantity with Purchase Order created with multiple lines and Sales Order created with single Line.
      5.  Test the Warehouse Entry for Cross Dock Quantity with Purchase Order created with multiple lines and Sales Order created with single Line.
      6.  Test the error message Inventory Pick Exists and Shipping Advice Complete after creating Inventory Pick from Sales Order and Adding New Line to Sales Order.
      7.  Test the error message Inventory Pick Exists and Shipping Advice Complete after creating Inventory Put Away from Sales Return Order and Adding New Line to Sales Order.
      8.  Test the Warehouse Activity Line after creating Pick with Blank Location.
      9.  Test the Item Ledger Entry after Registering Pick and Posting Warehouse Shipment with Blank Location.
      10. Test the Lead Time Calculation and Planned Receipt Date on Purchase Line after Updating Lead Time Calculation on Purchase Header.
      11. Test the Receipt Line and Item Ledger Entry after Post Purchase Order as Receive with multiple Lines with Lot Item Tracking on Single Line and Undo Purchase Receipt.
      12. Test to verify Description gets updated on Warehouse Entry after post Item Reclassification Journal.
      13. Test to register Pick from Warehouse Internal Pick with multiple Unit of Measures and Lot No.
      14. Test to verify Currency Factor on Requisition Worksheet after Calculate Plan with Sales Order.
      15. Test to post Purchase Order created after Calculate Plan and Carry out Action Message on Requisition Worksheet after creating Sales Order with Currency.
      16. Test to verify G/L entries after register Put-Away from Purchase Order with Post Prepayment Invoice.
      17. Test to verify G/L entries after creating Warehouse Shipment from Sales Order with Post Prepayment Invoice.
      18. Test to verify G/L entries after register Pick and Post Warehouse Shipment of Partial Quantity with Post Prepayment Invoice.
      19. Test to verify G/L entries after register Pick and Post Warehouse Shipment of Remaining Quantity with Post Prepayment Invoice.
      20. Test to run Date Compress Warehouse Entries batch report after Post Production Journal from Released Production Order with Lot No.
      21. Test the Purchase Invoice Line after Purchase Order Created from Blanket Order with Partial Quantity. And Purchase Invoice created from Get Receipt Line.
      22. Test the Reservation Entry after Calculate Plan on Requisition Worksheet with Sales Order and Multiple Purchase Order.
      23. Test the Reservation Entry after Calculate Plan on Requisition Worksheet and Register Put Away with Sales Order and Multiple Purchase Order.
      24. Test the Reservation Entry after Calculate Plan on Requisition Worksheet, Register Pick and Post Warehouse Shipment with Sales Order and Multiple Purchase Order.
      25. Test the Item Ledger Entry after Calculate Plan on Requisition Worksheet, Register Put Away, Register Pick and Post Warehouse Shipment. And Sales Order created of Remaining Quantity.
      26. Test the Item Ledger Entry after Post Sales Order with Negative Line and Update Apply From Item Entry on Sales Line.
      27. Test the Item Ledger Entry after Post Sales Return Order with Get Posted Document Lines To reverse on Sales Return Order.
      28. Test the Item Ledger Entry after Post Purchase Order with Negative Line and Update Apply to Item Entry on Purchase Line.
      29. Test the Item Ledger Entry after Post Purchase Return Order with Get Posted Document Lines To reverse on Purchase Return Order.
      30. Test the Warehouse Entry after Creating Pick from Pick Worksheet with multiple Item and Get Warehouse Documents.
      30. Test the Warehouse Entry after Creating Pick from Pick Worksheet with multiple Item and Get Warehouse Documents.
      31. Test the Available Quantity to Pick on Pick Worksheet Line after Register Put Away with Item as Reserve Always.
      32. Test the Available Quantity to Pick on Pick Worksheet Line after Register Put Away and Pick with Item as Reserve Always.
      33. Test the Available Quantity to Pick on Pick Worksheet Line before Register Put Away with Item as Reserve Always.
      34. Test the Available Quantity to Pick on Pick Worksheet Line before Register Put Away and after Register Pick with Item as Reserve Always.
      35. Test the Available Quantity to Pick on Pick Worksheet Line after Partially Register Put Away with Item as Reserve Always.
      36. Test the Available Quantity to Pick on Pick Worksheet Line after Partially Register Put Away and after Register Pick with Item as Reserve Always.
      37. Test and verify Warehouse entries after register Warehouse Journal line with Lot and multiple Bins.
      38. Test and verify Warehouse entries after post Warehouse Journal line with Lot and multiple Bins.
      39. Test and verify Warehouse entries after register Pick from Sales Order with Lot and multiple Bins.
      40. Test and verify Warehouse entries after post Warehouse Shipment with Lot and multiple Bins.
      41. Test and verify Use as in-Transit is Un-editable after create and release Transfer Order.
      42. Test and verify Use as in-Transit is Editable after post Transfer Order as Receive.
      43. Test and verify error on posting Purchase Order for different Serial No of Sales Order with Drop Shipment.
      44. Test and verify posting of Sales Order as Invoice with different Bill-to Customer.
      45. Test and verify posting of Sales Return Order with Get Posted Document lines to reverse with different Bill-to Customer.
      46. Test and verify posting of Sales Credit Memo with Get Posted Document lines to reverse with different Bill-to Customer.
      47. Test and verify Description gets updated on all To-dos of same Organizer To-do of Contact by updating one To-do card by page.
      48. Test and verify Error on updating Quantity to Assemble on Assembly Order.
      49. Test and verify deletion of Pick after posting Warehouse Shipment of registered pick with partial quantity.
      50. Test and verify posting Warehouse Shipment of Sales Order with Reservation after deleting Pick of Sales Order without Reservation.
      51. Test and verify Shipment Method on Purchase Order by Special Sales Order.
      52. Test and verify Shipment Method on Posted Purchase Invoice by Special Sales Order.
      53. Test and verify Error on Posting Sales Order without External Document.
      54. Test and verify Post Sales Order with Multiple Series Line and External Document.
      55. Test and verify Error on Posting Inventory Pick from Sales Order Without Correspondence Type as Email on Contact.
      56. Test and verify Item Ledger Entry after Posting Inventory Pick from Sales Order With Correspondence Type as Email on Contact.
      57. Test and verify Post Purchase Order with Standard Cost Item using Lot.
      58. Test and verify Apply to Entry on Purchase Return Order with Reverse Document.
      59. Test and verify Lot on Purchase Return Order with Reverse Document.
      60. Test and verify Post Purchase Return Order with Reverse Document.
      61. Test and verify Post Inventory Cost after Posting Purchase Return Order.
      62. Test and verify Cross Docking with Released Production Order.
      63. Test and verify error message will pops when add Job No. in Purchase Order which get from Drop Shipment.
      64. Test and verify error message will pops when add Job No. in Purchase Order which get from Special Order.
      65. Verify no error pops up when change UOM on Sales order and verify quantity on Item Ledger Entry.
      66. Test and verify confirm message can be poped up with posting Sales Order when all stock is reserved for another Sales Order.
      67. Test and verify confirm message can be poped up with posting Sales Invoice when all stock is reserved for Sales Order.
      68. Test and verify confirm message can be poped up with posting Purchase Return Order when all stock is reserved for Sales Order.
      69. Test and verify confirm message can be poped up with posting Purchase Credit Memo when all stock is reserved for Sales Order.
      70. Test and verify Assembly BOM can be exploded on the Sales line and the Extended Text to be automatic inserted accordingly
          when the Assembly contains an Item with an associated Extended Text and Automatic Ext. Texts=Yes.
      71. Test and verify Assembly BOM can be exploded on the Purchase line and the Extended Text to be automatic inserted accordingly
          when the Assembly contains an Item with an associated Extended Text and Automatic Ext. Texts=Yes.
      72. Test the error message when trying to create partial Warehouse Pick having Shipping Advice Complete in Sales Order.
      73. Test and verify 'Calculate Cross-dock' is calculated correctly on Warehouse Receipt when Sales Order is partially shipped and the warehouse shipment was deleted.
      74. Test and verify 'Calculate Cross-dock' is calculated correctly on Warehouse Receipt when Outbound Transfer is partially shipped and the warehouse shipment was deleted.
      75. Test and verify G/L Entry should be correct when posting Sales Prepayment Invoice with Currency Code.
      76. Test and verify G/L Entry should be correct when posting Purchase Prepayment Invoice with Currency Code.
      77. Test the Receipt Line and Item Ledger Entry after Undo Purchase Receipt with Job No. and Dimension set as Code mandatory
      78. Test the Return Shipment Line and Item Ledger Entry after Undo Purchase Return Shipment with Job No. and Dimension set as Code mandatory
      79. Test that Quantity to Ship zeroes after Quantity changes on a Sales Line if Default Quantity to Ship to Blank in Sales & Receivable Setup.
      80. Verify that "Qty. Outstanding" in a Warehouse Pick line is decreased by actually picked Quantity, when pick requires breakbulk.
      81. "Qty. Outstanding" in a Warehouse Pick line is decreased by actually picked Quantity, when pick requires breakbulk and taken UOM differs from pick line UOM.

      Covers Test Cases for WI - 309670
      -------------------------------------------------------------------------------------------------
      Test Function Name                                                                     TFS ID
      -------------------------------------------------------------------------------------------------
      ChangeExpectedReceiptDateOnPurchaseOrderReservedAgainstSalesOrder                      244862
      PostPurchaseOrderWithJobAndJobTask                                                     251093
      GetSalesOrderFromPurchaseOrderWithShipToCodeBlankError                                 262457
      CalcualteCrossDockOnWarehouseReceiptWithMultipleItems                                  295183
      RegisterPutAwayAfterCalcualteCrossDockOnWarehouseReceiptWithMultipleItems              295183
      InventoryPickFromSalesOrderWithShippingAdviceCompleteError                             239181
      InventoryPutAwayFromSalesReturnOrderWithShippingAdviceCompleteError                    239181
      PickFromWarehouseShipmentWithBlankLocation                                             250682
      PostWarehouseShipmentWithBlankLocation                                                 250682

      Covers Test Cases for WI - 304085
      -------------------------------------------------------------------------------------------------
      Test Function Name                                                                     TFS ID
      -------------------------------------------------------------------------------------------------
      PlannedReceiptDateOnPurchaseLineUsingLeadTimeCalculation                               135586
      UndoPurchaseReceiptWithAndWithoutLotItemTracking                                       135535

      Covers Test Cases for WI - 309018
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------
      PostItemReclassificationJournalWithUpdatedDescription                                       259156
      CreateAndRegisterPickFromInternalPickWithMultipleUnitOfMeasureAndLot                        239391
      CalculatePlanOnRequistionWorkSheetAfterSalesOrderWithCurrency                               263291
      PostPurchaseOrderAfterCarryOutActionMessageOnRequisitionWorkSheetWithCurrency               263291

      Covers Test Cases for WI - 309021
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------
      CreateAndRegisterPutAwayFromPurchaseOrderWithPostPrepaymentInvoice                          301624
      CreateWarehouseShipmentFromSalesOrderWithPostPrepaymentInvoice                              301624
      RegisterPickAndPostWarehouseShipmentForPartialQuantityWithPostPrepaymentInvoice             301624
      RegisterPickAndPostWarehouseShipmentForRemainingQuantityWithPostPrepaymentInvoice           301624
      RunDateCompressWhseEntriesAfterPostProductionJournalWithLotNo                               268655

      Covers Test Cases for WI - 308954
      -------------------------------------------------------------------------------------------------------
      Test Function Name                                                                              TFS ID
      -------------------------------------------------------------------------------------------------------
      PostPurchaseInvoiceAfterPurchaseOrderOfPartialQuantityFromBlanketOrder                          229614
      CalculatePlanOnRequisitionWorksheetWithMultiplePurchaseOrders                                   268394
      RegisterWarehousePutAwayAfterCalculatePlanWithMultiplePurchaseOrders                            268394
      RegisterWarehousePickAndPostWarehouseShipmentAfterCalculatePlanWithMultiplePurchaseOrders       268394
      RegisterWarehousePickAndPostWarehouseShipmentOfRemainingQuantity                                268394
      PostSalesOrderWithNegativeLineAndApplyFromItemEntry                                             298819
      GetPostedDocumentLinesToReverseOnSalesReturnOrder                                               298819
      PostPurchaseOrderWithNegativeLineAndApplyToItemEntry                                            298819
      GetPostedDocumentLinesToReverseOnPurchaseReturnOrder                                            298819
      PickFromPickWorksheetForMultipleItemsWithGetWarehouseDocuments                                  286062

      Covers Test Cases for WI - 308910
      --------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                          TFS ID
      --------------------------------------------------------------------------------------------------------------------
      AvailableQuantityToPickOnPickWorksheetAfterRegisterPutAwayWithReservation                                   264160
      AvailableQuantityToPickOnPickWorksheetAfterRegisterPickWithReservation                                      264160
      AvailableQuantityToPickOnPickWorksheetBeforeRegisterPutAwayWithReservation                                  264160
      AvailableQuantityToPickOnPickWorksheetBeforeRegisterPutAwayAndAfterRegisterPickWithReservation              264160
      AvailableQuantityToPickOnPickWorksheetAfterRegisterPartialPutAwayWithReservation                            264160
      AvailableQuantityToPickOnPickWorksheetAfterRegisterPartialPutAwayAndRegisterPickWithReservation             264160

      Covers Test Cases for WI - 313024
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------
      RegisterWarehouseJournalLineWithLotAndMultipleBins                                          244866
      CalculateWhseAdjustmentAndPostItemJournalLineWithLotAndMultipleBins                         244866
      CreateAndRegisterPickFromSalesOrderWithLotAndMultipleBins                                   244866
      PostWarehouseShipmentOfSalesOrderWithLotAndMultipleBins                                     244866
      UseAsInTransitBecomesUneditableAfterCreateAndReleaseTransferOrder                           264085
      UseAsInTransitBecomesEditableAfterPostTransferOrderAsReceive                                264085
      ErrorOnPostingPurchaseOrderForDifferentSerialNoOfSalesOrderWithDropShipment                 267057
      PostSalesOrderAsInvoiceWithDifferentBillToCustomer                                          237016
      PostSalesReturnOrderWithGetPostedDocLinesToReverseWithDifferentBillToCustomer               237016
      PostSalesCreditMemoWithGetPostedDocLinesToReverseWithDifferentBillToCustomer                237016
      UpdateDescriptionOnToDoCardOfSameOrganizerToDoOfContactByPage                               268715
      ErrorOnUpdatingQuantityToAssembleOnAssemblyOrder                                            255695
      DeletePartialRegisteredWarehousePickAfterPostWarehouseShipment                              287748
      PostWarehouseShipmentFromSalesOrderWithReservationAfterDeletePick                           287748

      Covers Test Cases for WI - 318113
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------
      ShipmentMethodOnPurchaseOrderBySpecialSalesOrder                                            255986
      ShipmentMethodOnPostedPurchInvBySpecialSalesOrder                                           255986
      ErrorOnPostingSalesOrderWithoutExternalDocument                                             252383
      PostSalesOrderWithMultipleSeriesLineAndExtDocument                                          252383

      Covers Test Cases for WI - 324375
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------
      ErrorOnPostingInventoryPickWithoutEmailOnCustomer                                           272554
      PostInventroyPickWithEmailOnCustomerAndContact                                              272554
      PostPurchaseOrderWithStandardCostItemUsingLot                                               267967
      ApplyToEntryOnPurchRetOrderWithReverseDocument                                              267967
      LotOnPurchaseReturnOrderWithReverseDocument                                                 267967
      PostPurchaseReturnOrderWithReverseDocument                                                  267967
      PostInventoryCostAfterPostingPurchaseReturnOrder                                            267967
      CrossDockingWithReleasedProductionOrder                                                     143086

      Covers Test Cases for CD - 48248
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------
      ErrorOnPurchaseOrderWithDropShipmentAndJobNo                                                 48248
      ErrorOnPurchaseOrderWithSpecialOrderAndJobNo                                                 48248

      Covers Test Cases for WI - 341266
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------
      SalesOrderWithChangeUOM                                                                     48494

      Covers Test Cases for WI Hotfix
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------
      PostSalesOrderWhenReservationEntryExistsForAnotherSalesOrder                                68631
      PostSalesInvoiceWhenReservationEntryExistsForSalesOrder                                     68631
      PostPurchaseReturnOrderWhenReservationEntryExistsForSalesOrder                              68631
      PostPurchaseCreditMemoWhenReservationEntryExistsForSalesOrder                               68631

      Covers Test Cases for WI
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------
      ExplodedBOMWhenComponentExistsExtendedTxtOnSalesLine                                        72977
      ExplodedBOMWhenComponentExistsExtendedTxtOnPurchaseLine                                     72977

      Covers Test Cases for WI
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------
      WarehousePickFromSalesOrderWithShippingAdviceCompleteError                                  355218

      Covers Test Cases for WI Hotfix
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------
      CalculateCrossDockOnWarehouseReceiptForWarehouseShipmentUsingSalesOrder                      97173
      CalculateCrossDockOnWarehouseReceiptForWarehouseShipmentUsingOutboundTransfer                97173

      Covers Test Cases for WI Hotfix
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------
      PostSalesPrepaymentInvoiceWithCurrencyCode                                                  357466
      PostPurchasePrepaymentInvoiceWithCurrencyCode                                               357466

      Covers Test Cases for WI Hotfix
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------
      UndoPurchaseReceiptWithDimensionAndJobNo                                                    359952
      UndoPurchaseReturnShipmentWithDimensionAndJobNo                                             359952

      Covers Test Cases for WI Hotfix
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------
      ChangeQuantityOnSalesLineDefaultQtyToShipBlank                                              361885

      Covers Test Cases for WI Hotfix
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------
      VerifyPartialPickWithMultipleUOMs                                                           363148

      Covers Test Cases for WI Hotfix
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------
      VerifyPickWithDifferentUOMs                                                                 363382
      ChangeQuantityOnSalesLineDefaultQtyToShipBlank                                              122091
    }
    END.
  }
}

